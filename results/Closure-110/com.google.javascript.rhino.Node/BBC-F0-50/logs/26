* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 12921
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 933686904
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:49:52.368 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:50:12.185 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:50:40.230 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:52:56.622 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:53:35.094 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.UnionType canUseFunctionalMocks=false, canBeMocked: true
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 311
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 13171
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 311
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 311
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 311
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 1987
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 3392
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 77
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 1889
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 3111
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 3073
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 12966
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 311
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 311
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 311
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 5967
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 311
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 967
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 10869
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 10418
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 311
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 311
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 414
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 10016
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 414
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 11190
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 2867
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 3392
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 1959
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 2350
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 4282
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 1435
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 1663
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 14760
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 3550
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 975
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 318
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 5031
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 790
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 1188
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 3042
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 847
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 382
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 311
Number of times BBC is called for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: Line 1323: 47
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1623
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 2350
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 35971
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 4654
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 1228
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 18042
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 28
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 142
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 3660
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 585
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - true: 263
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 3349
Number of times BBC is called for com.google.javascript.rhino.Node.putProp(ILjava/lang/Object;)V: I8 Branch 108 IFNULL L846 - false: 10
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 12393
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 32775
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 656
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 5169
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 47
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 17679
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 311
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 131
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 15
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 142
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 2867
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 142
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 3907
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 3927
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 364
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 218
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 218
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 218
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 2925
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 5082
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 19281
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 47
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 47
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 2351
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 247
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 218
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 247
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - false: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 16423
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 378
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 378
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 378
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 50
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 2191
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 1534
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 30212
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 5857
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 8097
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 4
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 29892
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 13237
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 99275
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 3927
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 322
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 47
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 3143
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 77
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 2962
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 675
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 36
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 3163
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 18504
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 77
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 10484
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 47
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 1298
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 7101
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 1159
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 532
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 91
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 20558
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 1470
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 7260
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 3096
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 447
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 2740
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 414
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 656
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 120
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 8108
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 53101
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 356
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 4282
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 30212
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 2564
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 2867
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 382
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 11913
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 6871
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 31
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 28
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 131
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 218
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 218
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 1756
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 3541
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - true: 17
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 1392
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 25999
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 919
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 17459
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 17459
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 8473
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 2304
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 214
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 8365
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 30995
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 111
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 30212
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 1328
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 218
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 53101
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 2037
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 218
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 656
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 99275
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 30212
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 1161
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 3214
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 30388
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 14
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 383
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 414
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 414
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 1470
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 790
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 1161
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 2387
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 3011
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 2350
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1633
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setReturnsTainted()Lcom/google/javascript/rhino/Node$SideEffectFlags;: root-Branch: 311
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 414
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 77
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 656
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 23
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 2350
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 17679
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 2867
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 3747
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 14712
Number of times BBC is called for com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;: Line 1881: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 1470
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 919
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 11635
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 1773
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 28390
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 47
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 310
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 2867
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 157
Number of times BBC is called for com.google.javascript.rhino.Node.createProp(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 863: 131
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 3081
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 218
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 2916
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 218
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 656
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 974
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 164
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 765
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 4084
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 3257
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 656
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 479
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 47
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 7214
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 33251
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 1596
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 24728
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 160
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 7214
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 3458
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 7482
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 3214
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - false: 26
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 57
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 1632
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 195
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 356
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 395
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 131
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 44
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 790
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1752: 126
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 790
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 1641
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1747: 126
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1743: 47
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 656
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 8473
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 656
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 790
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 8325
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 764
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 790
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 656
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 1524
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 790
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 790
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 2350
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 790
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 1524
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 1524
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 28284
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 1524
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 20057
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 3653
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 532
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 585
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 3206
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 9309
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 1889
Number of times BBC is called for com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;: root-Branch: 131
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 18847
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 2867
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 28145
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 23591
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 6691
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 790
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 656
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 2587
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 311
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 131
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: Line 312: 131
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 3042
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 149
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 65
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 400
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 30212
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 790
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 3539
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 2867
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 311
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.<init>(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)V: root-Branch: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 3927
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 2523
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 447
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 22374
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 5277
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 722
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 100
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 15
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 7967
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 3747
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 2191
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 2817
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 47
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 1116
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 191
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 17833
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 656
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 15146
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 414
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 10153
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 1074
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 595
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 310
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 14788
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 532
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 4776
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 142
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 311
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 3214
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 717
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 404
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 15024
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 36
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true: 4123
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 616
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 3847
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 5372
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setReturnsTainted()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2111: 311
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 1201
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 1950
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 5759
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 15
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setReturnsTainted()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2112: 311
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 790
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 17459
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 2867
Number of times BBC is called for com.google.javascript.rhino.Node.extractLineno(I)I: I4 Branch 142 IF_ICMPNE L1209 - true: 7
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 17459
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false: 4123
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 17459
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 3876
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 215
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 17459
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 31748
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 17459
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 17459
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 3747
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 3927
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 71
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 2350
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 2037
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 10647
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 10647
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 218
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 15556
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1858: 311
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 404
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 17059
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 404
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 10439
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 65
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 907
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 5234
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 2523
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 3239
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 15785
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 656
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 311
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 656
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 311
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1888: 131
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1889: 131
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 217
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 919
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 311
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 3392
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 1896
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 414
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 7270
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 7961
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 7080
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 4
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 7961
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 27298
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 2587
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 20783
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 2587
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 2350
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 311
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 404
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 262
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 131
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 311
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 311
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 149
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 393
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 14866
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 4910
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 311
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 1070
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 919
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 218
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 2672
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 7214
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 2672
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 1717
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 8881
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 656
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 1801
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 131
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 1470
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 45122
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 45122
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 3156
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 4742
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 28652
Number of times BBC is called for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 7482
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 17883
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 6270
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 907
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 531: 218
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 530: 218
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 656
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 24819
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 2984
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 395
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 532
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 3025
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 47
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 142
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 336
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 515
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 142
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 91
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 443
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 239
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 1328
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 161
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 2867
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 12456
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 372
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 414
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 3782
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 414
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 2867
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 2867
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 2867
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 6831
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 2867
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 159
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 2867
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 713
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 37
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 45122
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 105
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 3392
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 3184
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 45122
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 131
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 45122
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 45122
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 7081
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 637
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 19732
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 45122
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 311
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 45122
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 218
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 19732
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 19732
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - true: 77
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 28522
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 790
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 142
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 142
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 13081
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 13081
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 16753
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 30212
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 16938
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 218
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 789
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 8587
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 218
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 36106
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 414
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 5502
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 3927
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 656
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 656
Number of times BBC is called for com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;: I9 Branch 104 IFNONNULL L814 - true: 29
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 24256
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 1747
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 17062
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 19595
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.<init>(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)V: Line 303: 131
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 228
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.<init>(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)V: Line 302: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 535
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 3747
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 1855
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 11535
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 547
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 414
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 6270
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.<init>(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)V: Line 301: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 6778
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 7963
Number of times BBC is called for com.google.javascript.rhino.Node.createProp(ILjava/lang/Object;Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 1495
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 3125
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 56
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 9235
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 13135
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 6871
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 1086
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 218
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 218
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 47
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 2939
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 1524
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 790
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 47
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 8216
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 656
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 3265
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 218
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 33633
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 218
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 360
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 13628
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 2793
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 790
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 414
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 790
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 163
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 414
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 311
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 656
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 29419
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 99275
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 311
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 414
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 218
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 218
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 1536
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 218
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 218
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 414
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 414
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: root-Branch: 131
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 218
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 9155
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 146
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 3163
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 1747
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 29419
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 1509
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 99275
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 10414
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - true: 100
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - false: 5
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 1188
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 15
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - false: 126
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 7080
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 131
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 47
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 47
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 2867
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 2350
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 913
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 6517
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 1811
Number of times BBC is called in total: 5325289
* Search finished after 604s and 600 generations, 250744 statements, best individual has fitness: 2733.0
* Minimizing test suite
[MASTER] 11:01:11.580 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 793
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 622
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 108
* Number of covered goals: 108
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 474
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 4536
* Number of covered goals: 2321
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 579
* Generated 846 tests with total length 10079
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:02:14.407 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6699666666666667% of time used, but only 40/846 tests minimized), falling back to using all assertions
[MASTER] 11:02:34.392 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 11:02:44.932 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 10 seconds more than allowed.
[MASTER] 11:02:47.817 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_47_1628161367647/com/google/javascript/rhino/Node_47_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_47_1628161367647/com/google/javascript/rhino/Node_47_tmp__ESTest_scaffolding.java]]
[MASTER] 11:02:47.817 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:47.817 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:47.822 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1048
[MASTER] 11:02:47.823 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_47_1628161367647/com/google/javascript/rhino/Node_47_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:02:47 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_47_tmp__ESTest extends Node_47_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertFalse(node0.isAssign());
23:       assertFalse(node0.hasChildren());
24:       assertFalse(node0.isGetElem());
25:       assertFalse(node0.isCast());
26:       assertEquals((-1), node0.getSourcePosition());
27:       assertFalse(node0.isDec());
28:       assertFalse(node0.isTypeOf());
29:       assertFalse(node0.isAssignAdd());
30:       assertFalse(node0.isReturn());
31:       assertFalse(node0.isLabel());
32:       assertFalse(node0.hasOneChild());
33:       assertFalse(node0.isNot());
34:       assertFalse(node0.isScript());
35:       assertFalse(node0.isContinue());
36:       assertFalse(node0.isObjectLit());
37:       assertFalse(node0.isAnd());
38:       assertFalse(node0.isLabelName());
39:       assertFalse(node0.isThrow());
40:       assertFalse(node0.isStringKey());
41:       assertFalse(node0.isThis());
42:       assertFalse(node0.isFalse());
43:       assertFalse(node0.isHook());
44:       assertFalse(node0.isBlock());
45:       assertFalse(node0.isSetterDef());
46:       assertFalse(node0.isInc());
47:       assertEquals(39, node0.getType());
48:       assertFalse(node0.isWith());
49:       assertFalse(node0.hasMoreThanOneChild());
50:       assertFalse(node0.isCatch());
51:       assertFalse(node0.isIn());
52:       assertFalse(node0.isRegExp());
53:       assertEquals((-1), node0.getLineno());
54:       assertFalse(node0.isInstanceOf());
55:       assertFalse(node0.isNE());
56:       assertFalse(node0.isIf());
57:       assertFalse(node0.isFor());
58:       assertFalse(node0.isEmpty());
59:       assertFalse(node0.isGetterDef());
60:       assertTrue(node0.isNumber());
61:       assertFalse(node0.isDefaultCase());
62:       assertFalse(node0.isTry());
63:       assertFalse(node0.isCase());
64:       assertFalse(node0.isString());
65:       assertFalse(node0.isFunction());
66:       assertEquals((-1), node0.getCharno());
67:       assertFalse(node0.isDebugger());
68:       assertEquals(0, node0.getChildCount());
69:       assertFalse(node0.isSwitch());
70:       assertFalse(node0.isArrayLit());
71:       assertFalse(node0.isParamList());
72:       assertFalse(node0.isBreak());
73:       assertFalse(node0.isCall());
74:       assertFalse(node0.isNull());
75:       assertFalse(node0.isComma());
76:       assertFalse(node0.isNew());
77:       assertFalse(node0.isGetProp());
78:       assertFalse(node0.isVar());
79:       assertFalse(node0.isAdd());
80:       assertFalse(node0.isDo());
81:       assertFalse(node0.isWhile());
82:       assertFalse(node0.isOr());
83:       assertFalse(node0.isTrue());
84:       assertFalse(node0.isExprResult());
85:       assertFalse(node0.isName());
86:       assertFalse(node0.isDelProp());
87:       assertFalse(node0.isVoid());
88:       assertNotNull(node0);
89:       assertEquals(15, Node.NO_SIDE_EFFECTS);
90:       assertEquals(57, Node.LAST_PROP);
91:       assertEquals(54, Node.SLASH_V);
92:       assertEquals(52, Node.LENGTH);
93:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
94:       assertEquals(30, Node.VAR_ARGS_NAME);
95:       assertEquals(40, Node.ORIGINALNAME_PROP);
96:       assertEquals(57, Node.REFLECTED_OBJECT);
97:       assertEquals(46, Node.IS_NAMESPACE);
98:       assertEquals(49, Node.DIRECT_EVAL);
99:       assertEquals(37, Node.OPT_ARG_NAME);
100:       assertEquals(2, Node.POST_FLAG);
101:       assertEquals(8, Node.FLAG_NO_THROWS);
102:       assertEquals(39, Node.EMPTY_BLOCK);
103:       assertEquals(47, Node.IS_DISPATCHER);
104:       assertEquals(56, Node.CHANGE_TIME);
105:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
106:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
107:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
108:       assertEquals(55, Node.INFERRED_FUNCTION);
109:       assertEquals(29, Node.JSDOC_INFO_PROP);
110:       assertEquals(53, Node.INPUT_ID);
111:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
112:       assertEquals(43, Node.IS_CONSTANT_NAME);
113:       assertEquals(36, Node.QUOTED_PROP);
114:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
115:       assertEquals(4095, Node.COLUMN_MASK);
116:       assertEquals(48, Node.DIRECTIVES);
117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
118:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
119:       assertEquals(50, Node.FREE_CALL);
120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
121:       assertEquals(12, Node.COLUMN_BITS);
122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
123:       assertEquals(32, Node.INCRDECR_PROP);
124:       assertEquals(1, Node.DECR_FLAG);
125:       
126:       String string0 = "UNKNOWN";
127:       Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
128:       assertFalse(node1.equals((Object)node0));
129:       assertEquals(0, node1.getChildCount());
130:       assertFalse(node1.isCatch());
131:       assertFalse(node1.isSetterDef());
132:       assertFalse(node1.isNull());
133:       assertFalse(node1.isParamList());
134:       assertFalse(node1.isStringKey());
135:       assertFalse(node1.isTrue());
136:       assertFalse(node1.isDebugger());
137:       assertFalse(node1.isVar());
138:       assertFalse(node1.isNew());
139:       assertFalse(node1.isEmpty());
140:       assertFalse(node1.isAdd());
141:       assertFalse(node1.isArrayLit());
142:       assertFalse(node1.isFunction());
143:       assertFalse(node1.isDefaultCase());
144:       assertFalse(node1.hasMoreThanOneChild());
145:       assertFalse(node1.isIn());
146:       assertFalse(node1.isCase());
147:       assertEquals(32, node1.getLineno());
148:       assertFalse(node1.isNumber());
149:       assertFalse(node1.isNE());
150:       assertFalse(node1.isGetterDef());
151:       assertFalse(node1.isIf());
152:       assertFalse(node1.isSwitch());
153:       assertFalse(node1.hasOneChild());
154:       assertFalse(node1.isHook());
155:       assertFalse(node1.isTry());
156:       assertFalse(node1.isRegExp());
157:       assertFalse(node1.isWith());
158:       assertFalse(node1.isBlock());
159:       assertFalse(node1.isFor());
160:       assertFalse(node1.isThis());
161:       assertFalse(node1.isInstanceOf());
162:       assertFalse(node1.isAnd());
163:       assertFalse(node1.isGetProp());
164:       assertFalse(node1.isScript());
165:       assertEquals(131072, node1.getSourcePosition());
166:       assertFalse(node1.isNot());
167:       assertFalse(node1.isObjectLit());
168:       assertEquals(0, node1.getCharno());
169:       assertFalse(node1.isCast());
170:       assertFalse(node1.isLabelName());
171:       assertFalse(node1.isInc());
172:       assertEquals((-1122), node1.getType());
173:       assertFalse(node1.isFalse());
174:       assertFalse(node1.isThrow());
175:       assertFalse(node1.isLabel());
176:       assertFalse(node1.isAssignAdd());
177:       assertFalse(node1.isContinue());
178:       assertFalse(node1.isDo());
179:       assertFalse(node1.isDelProp());
180:       assertFalse(node1.isString());
181:       assertFalse(node1.isOr());
182:       assertFalse(node1.isName());
183:       assertFalse(node1.isGetElem());
184:       assertFalse(node1.isVoid());
185:       assertFalse(node1.isCall());
186:       assertFalse(node1.isExprResult());
187:       assertFalse(node1.isBreak());
188:       assertFalse(node1.isTypeOf());
189:       assertFalse(node1.isDec());
190:       assertFalse(node1.isWhile());
191:       assertFalse(node1.isAssign());
192:       assertFalse(node1.isReturn());
193:       assertFalse(node1.isComma());
194:       assertFalse(node1.hasChildren());
195:       assertNotNull(node1);
196:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
197:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
199:       assertEquals(29, Node.JSDOC_INFO_PROP);
200:       assertEquals(53, Node.INPUT_ID);
201:       assertEquals(2, Node.POST_FLAG);
202:       assertEquals(32, Node.INCRDECR_PROP);
203:       assertEquals(47, Node.IS_DISPATCHER);
204:       assertEquals(12, Node.COLUMN_BITS);
205:       assertEquals(49, Node.DIRECT_EVAL);
206:       assertEquals(4095, Node.COLUMN_MASK);
207:       assertEquals(15, Node.NO_SIDE_EFFECTS);
208:       assertEquals(55, Node.INFERRED_FUNCTION);
209:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
210:       assertEquals(48, Node.DIRECTIVES);
211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
212:       assertEquals(37, Node.OPT_ARG_NAME);
213:       assertEquals(52, Node.LENGTH);
214:       assertEquals(8, Node.FLAG_NO_THROWS);
215:       assertEquals(56, Node.CHANGE_TIME);
216:       assertEquals(36, Node.QUOTED_PROP);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
219:       assertEquals(50, Node.FREE_CALL);
220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
221:       assertEquals(39, Node.EMPTY_BLOCK);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
224:       assertEquals(57, Node.LAST_PROP);
225:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
226:       assertEquals(1, Node.DECR_FLAG);
227:       assertEquals(30, Node.VAR_ARGS_NAME);
228:       assertEquals(54, Node.SLASH_V);
229:       assertEquals(46, Node.IS_NAMESPACE);
230:       assertEquals(43, Node.IS_CONSTANT_NAME);
231:       assertEquals(51, Node.STATIC_SOURCE_FILE);
232:       
233:       Object object0 = node1.getProp(0);
234:       assertFalse(node1.equals((Object)node0));
235:       assertEquals(0, node1.getChildCount());
236:       assertFalse(node1.isCatch());
237:       assertFalse(node1.isSetterDef());
238:       assertFalse(node1.isNull());
239:       assertFalse(node1.isParamList());
240:       assertFalse(node1.isStringKey());
241:       assertFalse(node1.isTrue());
242:       assertFalse(node1.isDebugger());
243:       assertFalse(node1.isVar());
244:       assertFalse(node1.isNew());
245:       assertFalse(node1.isEmpty());
246:       assertFalse(node1.isAdd());
247:       assertFalse(node1.isArrayLit());
248:       assertFalse(node1.isFunction());
249:       assertFalse(node1.isDefaultCase());
250:       assertFalse(node1.hasMoreThanOneChild());
251:       assertFalse(node1.isIn());
252:       assertFalse(node1.isCase());
253:       assertEquals(32, node1.getLineno());
254:       assertFalse(node1.isNumber());
255:       assertFalse(node1.isNE());
256:       assertFalse(node1.isGetterDef());
257:       assertFalse(node1.isIf());
258:       assertFalse(node1.isSwitch());
259:       assertFalse(node1.hasOneChild());
260:       assertFalse(node1.isHook());
261:       assertFalse(node1.isTry());
262:       assertFalse(node1.isRegExp());
263:       assertFalse(node1.isWith());
264:       assertFalse(node1.isBlock());
265:       assertFalse(node1.isFor());
266:       assertFalse(node1.isThis());
267:       assertFalse(node1.isInstanceOf());
268:       assertFalse(node1.isAnd());
269:       assertFalse(node1.isGetProp());
270:       assertFalse(node1.isScript());
271:       assertEquals(131072, node1.getSourcePosition());
272:       assertFalse(node1.isNot());
273:       assertFalse(node1.isObjectLit());
274:       assertEquals(0, node1.getCharno());
275:       assertFalse(node1.isCast());
276:       assertFalse(node1.isLabelName());
277:       assertFalse(node1.isInc());
278:       assertEquals((-1122), node1.getType());
279:       assertFalse(node1.isFalse());
280:       assertFalse(node1.isThrow());
281:       assertFalse(node1.isLabel());
282:       assertFalse(node1.isAssignAdd());
283:       assertFalse(node1.isContinue());
284:       assertFalse(node1.isDo());
285:       assertFalse(node1.isDelProp());
286:       assertFalse(node1.isString());
287:       assertFalse(node1.isOr());
288:       assertFalse(node1.isName());
289:       assertFalse(node1.isGetElem());
290:       assertFalse(node1.isVoid());
291:       assertFalse(node1.isCall());
292:       assertFalse(node1.isExprResult());
293:       assertFalse(node1.isBreak());
294:       assertFalse(node1.isTypeOf());
295:       assertFalse(node1.isDec());
296:       assertFalse(node1.isWhile());
297:       assertFalse(node1.isAssign());
298:       assertFalse(node1.isReturn());
299:       assertFalse(node1.isComma());
300:       assertFalse(node1.hasChildren());
301:       assertNull(object0);
302:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
304:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
305:       assertEquals(29, Node.JSDOC_INFO_PROP);
306:       assertEquals(53, Node.INPUT_ID);
307:       assertEquals(2, Node.POST_FLAG);
308:       assertEquals(32, Node.INCRDECR_PROP);
309:       assertEquals(47, Node.IS_DISPATCHER);
310:       assertEquals(12, Node.COLUMN_BITS);
311:       assertEquals(49, Node.DIRECT_EVAL);
312:       assertEquals(4095, Node.COLUMN_MASK);
313:       assertEquals(15, Node.NO_SIDE_EFFECTS);
314:       assertEquals(55, Node.INFERRED_FUNCTION);
315:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
316:       assertEquals(48, Node.DIRECTIVES);
317:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
318:       assertEquals(37, Node.OPT_ARG_NAME);
319:       assertEquals(52, Node.LENGTH);
320:       assertEquals(8, Node.FLAG_NO_THROWS);
321:       assertEquals(56, Node.CHANGE_TIME);
322:       assertEquals(36, Node.QUOTED_PROP);
323:       assertEquals(57, Node.REFLECTED_OBJECT);
324:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
325:       assertEquals(50, Node.FREE_CALL);
326:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
327:       assertEquals(39, Node.EMPTY_BLOCK);
328:       assertEquals(40, Node.ORIGINALNAME_PROP);
329:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
330:       assertEquals(57, Node.LAST_PROP);
331:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
332:       assertEquals(1, Node.DECR_FLAG);
333:       assertEquals(30, Node.VAR_ARGS_NAME);
334:       assertEquals(54, Node.SLASH_V);
335:       assertEquals(46, Node.IS_NAMESPACE);
336:       assertEquals(43, Node.IS_CONSTANT_NAME);
337:       assertEquals(51, Node.STATIC_SOURCE_FILE);
338:       
339:       Node node2 = Node.newString(46, "UNKNOWN");
340:       assertFalse(node2.equals((Object)node1));
341:       assertFalse(node2.equals((Object)node0));
342:       assertNotSame(node2, node1);
343:       assertFalse(node2.isAnd());
344:       assertFalse(node2.isInstanceOf());
345:       assertFalse(node2.isWith());
346:       assertFalse(node2.isObjectLit());
347:       assertFalse(node2.isNot());
348:       assertFalse(node2.isComma());
349:       assertFalse(node2.isScript());
350:       assertFalse(node2.isThis());
351:       assertFalse(node2.isGetProp());
352:       assertEquals(46, node2.getType());
353:       assertFalse(node2.hasOneChild());
354:       assertFalse(node2.isCast());
355:       assertFalse(node2.isThrow());
356:       assertFalse(node2.isFalse());
357:       assertEquals((-1), node2.getCharno());
358:       assertEquals((-1), node2.getSourcePosition());
359:       assertFalse(node2.isSwitch());
360:       assertFalse(node2.isLabelName());
361:       assertFalse(node2.hasMoreThanOneChild());
362:       assertFalse(node2.isIn());
363:       assertFalse(node2.isContinue());
364:       assertFalse(node2.isNumber());
365:       assertFalse(node2.isInc());
366:       assertFalse(node2.isCase());
367:       assertFalse(node2.isHook());
368:       assertFalse(node2.isBlock());
369:       assertFalse(node2.isFor());
370:       assertFalse(node2.isRegExp());
371:       assertFalse(node2.isIf());
372:       assertFalse(node2.isNE());
373:       assertEquals((-1), node2.getLineno());
374:       assertFalse(node2.isCatch());
375:       assertEquals(0, node2.getChildCount());
376:       assertFalse(node2.isSetterDef());
377:       assertFalse(node2.isDefaultCase());
378:       assertFalse(node2.isTry());
379:       assertFalse(node2.isArrayLit());
380:       assertFalse(node2.isVar());
381:       assertFalse(node2.isStringKey());
382:       assertFalse(node2.isGetterDef());
383:       assertFalse(node2.isDebugger());
384:       assertFalse(node2.isFunction());
385:       assertFalse(node2.isParamList());
386:       assertFalse(node2.isLabel());
387:       assertFalse(node2.isReturn());
388:       assertFalse(node2.isOr());
389:       assertFalse(node2.hasChildren());
390:       assertFalse(node2.isString());
391:       assertFalse(node2.isWhile());
392:       assertFalse(node2.isEmpty());
393:       assertFalse(node2.isNew());
394:       assertFalse(node2.isAdd());
395:       assertFalse(node2.isAssignAdd());
396:       assertFalse(node2.isDo());
397:       assertFalse(node2.isCall());
398:       assertFalse(node2.isDec());
399:       assertFalse(node2.isAssign());
400:       assertFalse(node2.isNull());
401:       assertFalse(node2.isTypeOf());
402:       assertFalse(node2.isTrue());
403:       assertFalse(node2.isExprResult());
404:       assertFalse(node2.isName());
405:       assertFalse(node2.isGetElem());
406:       assertFalse(node2.isBreak());
407:       assertFalse(node2.isDelProp());
408:       assertFalse(node2.isVoid());
409:       assertNotNull(node2);
410:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
411:       assertEquals(29, Node.JSDOC_INFO_PROP);
412:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
413:       assertEquals(56, Node.CHANGE_TIME);
414:       assertEquals(47, Node.IS_DISPATCHER);
415:       assertEquals(2, Node.POST_FLAG);
416:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
417:       assertEquals(37, Node.OPT_ARG_NAME);
418:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
419:       assertEquals(49, Node.DIRECT_EVAL);
420:       assertEquals(55, Node.INFERRED_FUNCTION);
421:       assertEquals(57, Node.LAST_PROP);
422:       assertEquals(36, Node.QUOTED_PROP);
423:       assertEquals(30, Node.VAR_ARGS_NAME);
424:       assertEquals(53, Node.INPUT_ID);
425:       assertEquals(52, Node.LENGTH);
426:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
427:       assertEquals(8, Node.FLAG_NO_THROWS);
428:       assertEquals(15, Node.NO_SIDE_EFFECTS);
429:       assertEquals(39, Node.EMPTY_BLOCK);
430:       assertEquals(50, Node.FREE_CALL);
431:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
432:       assertEquals(57, Node.REFLECTED_OBJECT);
433:       assertEquals(48, Node.DIRECTIVES);
434:       assertEquals(54, Node.SLASH_V);
435:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
436:       assertEquals(40, Node.ORIGINALNAME_PROP);
437:       assertEquals(1, Node.DECR_FLAG);
438:       assertEquals(4095, Node.COLUMN_MASK);
439:       assertEquals(43, Node.IS_CONSTANT_NAME);
440:       assertEquals(51, Node.STATIC_SOURCE_FILE);
441:       assertEquals(12, Node.COLUMN_BITS);
442:       assertEquals(46, Node.IS_NAMESPACE);
443:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
444:       assertEquals(32, Node.INCRDECR_PROP);
445:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
446:       
447:       boolean boolean0 = node1.isVarArgs();
448:       assertFalse(node1.equals((Object)node2));
449:       assertFalse(node1.equals((Object)node0));
450:       assertNotSame(node1, node2);
451:       assertEquals(0, node1.getChildCount());
452:       assertFalse(node1.isCatch());
453:       assertFalse(node1.isSetterDef());
454:       assertFalse(node1.isNull());
455:       assertFalse(node1.isParamList());
456:       assertFalse(node1.isStringKey());
457:       assertFalse(node1.isTrue());
458:       assertFalse(node1.isDebugger());
459:       assertFalse(node1.isVar());
460:       assertFalse(node1.isNew());
461:       assertFalse(node1.isEmpty());
462:       assertFalse(node1.isAdd());
463:       assertFalse(node1.isArrayLit());
464:       assertFalse(node1.isFunction());
465:       assertFalse(node1.isDefaultCase());
466:       assertFalse(node1.hasMoreThanOneChild());
467:       assertFalse(node1.isIn());
468:       assertFalse(node1.isCase());
469:       assertEquals(32, node1.getLineno());
470:       assertFalse(node1.isNumber());
471:       assertFalse(node1.isNE());
472:       assertFalse(node1.isGetterDef());
473:       assertFalse(node1.isIf());
474:       assertFalse(node1.isSwitch());
475:       assertFalse(node1.hasOneChild());
476:       assertFalse(node1.isHook());
477:       assertFalse(node1.isTry());
478:       assertFalse(node1.isRegExp());
479:       assertFalse(node1.isWith());
480:       assertFalse(node1.isBlock());
481:       assertFalse(node1.isFor());
482:       assertFalse(node1.isThis());
483:       assertFalse(node1.isInstanceOf());
484:       assertFalse(node1.isAnd());
485:       assertFalse(node1.isGetProp());
486:       assertFalse(node1.isScript());
487:       assertEquals(131072, node1.getSourcePosition());
488:       assertFalse(node1.isNot());
489:       assertFalse(node1.isObjectLit());
490:       assertEquals(0, node1.getCharno());
491:       assertFalse(node1.isCast());
492:       assertFalse(node1.isLabelName());
493:       assertFalse(node1.isInc());
494:       assertEquals((-1122), node1.getType());
495:       assertFalse(node1.isFalse());
496:       assertFalse(node1.isThrow());
497:       assertFalse(node1.isLabel());
498:       assertFalse(node1.isAssignAdd());
499:       assertFalse(node1.isContinue());
500:       assertFalse(node1.isDo());
501:       assertFalse(node1.isDelProp());
502:       assertFalse(node1.isString());
503:       assertFalse(node1.isOr());
504:       assertFalse(node1.isName());
505:       assertFalse(node1.isGetElem());
506:       assertFalse(node1.isVoid());
507:       assertFalse(node1.isCall());
508:       assertFalse(node1.isExprResult());
509:       assertFalse(node1.isBreak());
510:       assertFalse(node1.isTypeOf());
511:       assertFalse(node1.isDec());
512:       assertFalse(node1.isWhile());
513:       assertFalse(node1.isAssign());
514:       assertFalse(node1.isReturn());
515:       assertFalse(node1.isComma());
516:       assertFalse(node1.hasChildren());
517:       assertFalse(boolean0);
518:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
519:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
520:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
521:       assertEquals(29, Node.JSDOC_INFO_PROP);
522:       assertEquals(53, Node.INPUT_ID);
523:       assertEquals(2, Node.POST_FLAG);
524:       assertEquals(32, Node.INCRDECR_PROP);
525:       assertEquals(47, Node.IS_DISPATCHER);
526:       assertEquals(12, Node.COLUMN_BITS);
527:       assertEquals(49, Node.DIRECT_EVAL);
528:       assertEquals(4095, Node.COLUMN_MASK);
529:       assertEquals(15, Node.NO_SIDE_EFFECTS);
530:       assertEquals(55, Node.INFERRED_FUNCTION);
531:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
532:       assertEquals(48, Node.DIRECTIVES);
533:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
534:       assertEquals(37, Node.OPT_ARG_NAME);
535:       assertEquals(52, Node.LENGTH);
536:       assertEquals(8, Node.FLAG_NO_THROWS);
537:       assertEquals(56, Node.CHANGE_TIME);
538:       assertEquals(36, Node.QUOTED_PROP);
539:       assertEquals(57, Node.REFLECTED_OBJECT);
540:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
541:       assertEquals(50, Node.FREE_CALL);
542:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
543:       assertEquals(39, Node.EMPTY_BLOCK);
544:       assertEquals(40, Node.ORIGINALNAME_PROP);
545:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
546:       assertEquals(57, Node.LAST_PROP);
547:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
548:       assertEquals(1, Node.DECR_FLAG);
549:       assertEquals(30, Node.VAR_ARGS_NAME);
550:       assertEquals(54, Node.SLASH_V);
551:       assertEquals(46, Node.IS_NAMESPACE);
552:       assertEquals(43, Node.IS_CONSTANT_NAME);
553:       assertEquals(51, Node.STATIC_SOURCE_FILE);
554:       
555:       node0.setLineno(39);
556:       assertFalse(node0.equals((Object)node1));
557:       assertFalse(node0.equals((Object)node2));
558:       assertFalse(node0.isAssign());
559:       assertFalse(node0.hasChildren());
560:       assertFalse(node0.isGetElem());
561:       assertFalse(node0.isCast());
562:       assertFalse(node0.isDec());
563:       assertFalse(node0.isTypeOf());
564:       assertFalse(node0.isAssignAdd());
565:       assertFalse(node0.isReturn());
566:       assertFalse(node0.isLabel());
567:       assertFalse(node0.hasOneChild());
568:       assertFalse(node0.isNot());
569:       assertFalse(node0.isScript());
570:       assertFalse(node0.isContinue());
571:       assertFalse(node0.isObjectLit());
572:       assertFalse(node0.isAnd());
573:       assertFalse(node0.isLabelName());
574:       assertFalse(node0.isThrow());
575:       assertFalse(node0.isStringKey());
576:       assertFalse(node0.isThis());
577:       assertFalse(node0.isFalse());
578:       assertFalse(node0.isHook());
579:       assertFalse(node0.isBlock());
580:       assertFalse(node0.isSetterDef());
581:       assertFalse(node0.isInc());
582:       assertEquals(159744, node0.getSourcePosition());
583:       assertEquals(39, node0.getType());
584:       assertFalse(node0.isWith());
585:       assertFalse(node0.hasMoreThanOneChild());
586:       assertFalse(node0.isCatch());
587:       assertEquals(0, node0.getCharno());
588:       assertFalse(node0.isIn());
589:       assertFalse(node0.isRegExp());
590:       assertFalse(node0.isInstanceOf());
591:       assertFalse(node0.isNE());
592:       assertFalse(node0.isIf());
593:       assertFalse(node0.isFor());
594:       assertFalse(node0.isEmpty());
595:       assertFalse(node0.isGetterDef());
596:       assertTrue(node0.isNumber());
597:       assertFalse(node0.isDefaultCase());
598:       assertFalse(node0.isTry());
599:       assertFalse(node0.isCase());
600:       assertFalse(node0.isString());
601:       assertFalse(node0.isFunction());
602:       assertFalse(node0.isDebugger());
603:       assertEquals(0, node0.getChildCount());
604:       assertFalse(node0.isSwitch());
605:       assertFalse(node0.isArrayLit());
606:       assertFalse(node0.isParamList());
607:       assertEquals(39, node0.getLineno());
608:       assertFalse(node0.isBreak());
609:       assertFalse(node0.isCall());
610:       assertFalse(node0.isNull());
611:       assertFalse(node0.isComma());
612:       assertFalse(node0.isNew());
613:       assertFalse(node0.isGetProp());
614:       assertFalse(node0.isVar());
615:       assertFalse(node0.isAdd());
616:       assertFalse(node0.isDo());
617:       assertFalse(node0.isWhile());
618:       assertFalse(node0.isOr());
619:       assertFalse(node0.isTrue());
620:       assertFalse(node0.isExprResult());
621:       assertFalse(node0.isName());
622:       assertFalse(node0.isDelProp());
623:       assertFalse(node0.isVoid());
624:       assertEquals(15, Node.NO_SIDE_EFFECTS);
625:       assertEquals(57, Node.LAST_PROP);
626:       assertEquals(54, Node.SLASH_V);
627:       assertEquals(52, Node.LENGTH);
628:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
629:       assertEquals(30, Node.VAR_ARGS_NAME);
630:       assertEquals(40, Node.ORIGINALNAME_PROP);
631:       assertEquals(57, Node.REFLECTED_OBJECT);
632:       assertEquals(46, Node.IS_NAMESPACE);
633:       assertEquals(49, Node.DIRECT_EVAL);
634:       assertEquals(37, Node.OPT_ARG_NAME);
635:       assertEquals(2, Node.POST_FLAG);
636:       assertEquals(8, Node.FLAG_NO_THROWS);
637:       assertEquals(39, Node.EMPTY_BLOCK);
638:       assertEquals(47, Node.IS_DISPATCHER);
639:       assertEquals(56, Node.CHANGE_TIME);
640:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
641:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
642:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
643:       assertEquals(55, Node.INFERRED_FUNCTION);
644:       assertEquals(29, Node.JSDOC_INFO_PROP);
645:       assertEquals(53, Node.INPUT_ID);
646:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
647:       assertEquals(43, Node.IS_CONSTANT_NAME);
648:       assertEquals(36, Node.QUOTED_PROP);
649:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
650:       assertEquals(4095, Node.COLUMN_MASK);
651:       assertEquals(48, Node.DIRECTIVES);
652:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
653:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
654:       assertEquals(50, Node.FREE_CALL);
655:       assertEquals(51, Node.STATIC_SOURCE_FILE);
656:       assertEquals(12, Node.COLUMN_BITS);
657:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
658:       assertEquals(32, Node.INCRDECR_PROP);
659:       assertEquals(1, Node.DECR_FLAG);
660:       
661:       node0.putProp(4095, (Object) null);
662:       assertFalse(node0.equals((Object)node1));
663:       assertFalse(node0.equals((Object)node2));
664:       assertFalse(node0.isAssign());
665:       assertFalse(node0.hasChildren());
666:       assertFalse(node0.isGetElem());
667:       assertFalse(node0.isCast());
668:       assertFalse(node0.isDec());
669:       assertFalse(node0.isTypeOf());
670:       assertFalse(node0.isAssignAdd());
671:       assertFalse(node0.isReturn());
672:       assertFalse(node0.isLabel());
673:       assertFalse(node0.hasOneChild());
674:       assertFalse(node0.isNot());
675:       assertFalse(node0.isScript());
676:       assertFalse(node0.isContinue());
677:       assertFalse(node0.isObjectLit());
678:       assertFalse(node0.isAnd());
679:       assertFalse(node0.isLabelName());
680:       assertFalse(node0.isThrow());
681:       assertFalse(node0.isStringKey());
682:       assertFalse(node0.isThis());
683:       assertFalse(node0.isFalse());
684:       assertFalse(node0.isHook());
685:       assertFalse(node0.isBlock());
686:       assertFalse(node0.isSetterDef());
687:       assertFalse(node0.isInc());
688:       assertEquals(159744, node0.getSourcePosition());
689:       assertEquals(39, node0.getType());
690:       assertFalse(node0.isWith());
691:       assertFalse(node0.hasMoreThanOneChild());
692:       assertFalse(node0.isCatch());
693:       assertEquals(0, node0.getCharno());
694:       assertFalse(node0.isIn());
695:       assertFalse(node0.isRegExp());
696:       assertFalse(node0.isInstanceOf());
697:       assertFalse(node0.isNE());
698:       assertFalse(node0.isIf());
699:       assertFalse(node0.isFor());
700:       assertFalse(node0.isEmpty());
701:       assertFalse(node0.isGetterDef());
702:       assertTrue(node0.isNumber());
703:       assertFalse(node0.isDefaultCase());
704:       assertFalse(node0.isTry());
705:       assertFalse(node0.isCase());
706:       assertFalse(node0.isString());
707:       assertFalse(node0.isFunction());
708:       assertFalse(node0.isDebugger());
709:       assertEquals(0, node0.getChildCount());
710:       assertFalse(node0.isSwitch());
711:       assertFalse(node0.isArrayLit());
712:       assertFalse(node0.isParamList());
713:       assertEquals(39, node0.getLineno());
714:       assertFalse(node0.isBreak());
715:       assertFalse(node0.isCall());
716:       assertFalse(node0.isNull());
717:       assertFalse(node0.isComma());
718:       assertFalse(node0.isNew());
719:       assertFalse(node0.isGetProp());
720:       assertFalse(node0.isVar());
721:       assertFalse(node0.isAdd());
722:       assertFalse(node0.isDo());
723:       assertFalse(node0.isWhile());
724:       assertFalse(node0.isOr());
725:       assertFalse(node0.isTrue());
726:       assertFalse(node0.isExprResult());
727:       assertFalse(node0.isName());
728:       assertFalse(node0.isDelProp());
729:       assertFalse(node0.isVoid());
730:       assertEquals(15, Node.NO_SIDE_EFFECTS);
731:       assertEquals(57, Node.LAST_PROP);
732:       assertEquals(54, Node.SLASH_V);
733:       assertEquals(52, Node.LENGTH);
734:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
735:       assertEquals(30, Node.VAR_ARGS_NAME);
736:       assertEquals(40, Node.ORIGINALNAME_PROP);
737:       assertEquals(57, Node.REFLECTED_OBJECT);
738:       assertEquals(46, Node.IS_NAMESPACE);
739:       assertEquals(49, Node.DIRECT_EVAL);
740:       assertEquals(37, Node.OPT_ARG_NAME);
741:       assertEquals(2, Node.POST_FLAG);
742:       assertEquals(8, Node.FLAG_NO_THROWS);
743:       assertEquals(39, Node.EMPTY_BLOCK);
744:       assertEquals(47, Node.IS_DISPATCHER);
745:       assertEquals(56, Node.CHANGE_TIME);
746:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
747:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
748:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
749:       assertEquals(55, Node.INFERRED_FUNCTION);
750:       assertEquals(29, Node.JSDOC_INFO_PROP);
751:       assertEquals(53, Node.INPUT_ID);
752:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
753:       assertEquals(43, Node.IS_CONSTANT_NAME);
754:       assertEquals(36, Node.QUOTED_PROP);
755:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
756:       assertEquals(4095, Node.COLUMN_MASK);
757:       assertEquals(48, Node.DIRECTIVES);
758:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
759:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
760:       assertEquals(50, Node.FREE_CALL);
761:       assertEquals(51, Node.STATIC_SOURCE_FILE);
762:       assertEquals(12, Node.COLUMN_BITS);
763:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
764:       assertEquals(32, Node.INCRDECR_PROP);
765:       assertEquals(1, Node.DECR_FLAG);
766:       
767:       int int0 = node0.getIndexOfChild(node1);
768:       assertFalse(node0.equals((Object)node1));
769:       assertFalse(node0.equals((Object)node2));
770:       assertFalse(node1.equals((Object)node2));
771:       assertFalse(node1.equals((Object)node0));
772:       assertNotSame(node1, node2);
773:       assertFalse(node0.isAssign());
774:       assertFalse(node0.hasChildren());
775:       assertFalse(node0.isGetElem());
776:       assertFalse(node0.isCast());
777:       assertFalse(node0.isDec());
778:       assertFalse(node0.isTypeOf());
779:       assertFalse(node0.isAssignAdd());
780:       assertFalse(node0.isReturn());
781:       assertFalse(node0.isLabel());
782:       assertFalse(node0.hasOneChild());
783:       assertFalse(node0.isNot());
784:       assertFalse(node0.isScript());
785:       assertFalse(node0.isContinue());
786:       assertFalse(node0.isObjectLit());
787:       assertFalse(node0.isAnd());
788:       assertFalse(node0.isLabelName());
789:       assertFalse(node0.isThrow());
790:       assertFalse(node0.isStringKey());
791:       assertFalse(node0.isThis());
792:       assertFalse(node0.isFalse());
793:       assertFalse(node0.isHook());
794:       assertFalse(node0.isBlock());
795:       assertFalse(node0.isSetterDef());
796:       assertFalse(node0.isInc());
797:       assertEquals(159744, node0.getSourcePosition());
798:       assertEquals(39, node0.getType());
799:       assertFalse(node0.isWith());
800:       assertFalse(node0.hasMoreThanOneChild());
801:       assertFalse(node0.isCatch());
802:       assertEquals(0, node0.getCharno());
803:       assertFalse(node0.isIn());
804:       assertFalse(node0.isRegExp());
805:       assertFalse(node0.isInstanceOf());
806:       assertFalse(node0.isNE());
807:       assertFalse(node0.isIf());
808:       assertFalse(node0.isFor());
809:       assertFalse(node0.isEmpty());
810:       assertFalse(node0.isGetterDef());
811:       assertTrue(node0.isNumber());
812:       assertFalse(node0.isDefaultCase());
813:       assertFalse(node0.isTry());
814:       assertFalse(node0.isCase());
815:       assertFalse(node0.isString());
816:       assertFalse(node0.isFunction());
817:       assertFalse(node0.isDebugger());
818:       assertEquals(0, node0.getChildCount());
819:       assertFalse(node0.isSwitch());
820:       assertFalse(node0.isArrayLit());
821:       assertFalse(node0.isParamList());
822:       assertEquals(39, node0.getLineno());
823:       assertFalse(node0.isBreak());
824:       assertFalse(node0.isCall());
825:       assertFalse(node0.isNull());
826:       assertFalse(node0.isComma());
827:       assertFalse(node0.isNew());
828:       assertFalse(node0.isGetProp());
829:       assertFalse(node0.isVar());
830:       assertFalse(node0.isAdd());
831:       assertFalse(node0.isDo());
832:       assertFalse(node0.isWhile());
833:       assertFalse(node0.isOr());
834:       assertFalse(node0.isTrue());
835:       assertFalse(node0.isExprResult());
836:       assertFalse(node0.isName());
837:       assertFalse(node0.isDelProp());
838:       assertFalse(node0.isVoid());
839:       assertEquals(0, node1.getChildCount());
840:       assertFalse(node1.isCatch());
841:       assertFalse(node1.isSetterDef());
842:       assertFalse(node1.isNull());
843:       assertFalse(node1.isParamList());
844:       assertFalse(node1.isStringKey());
845:       assertFalse(node1.isTrue());
846:       assertFalse(node1.isDebugger());
847:       assertFalse(node1.isVar());
848:       assertFalse(node1.isNew());
849:       assertFalse(node1.isEmpty());
850:       assertFalse(node1.isAdd());
851:       assertFalse(node1.isArrayLit());
852:       assertFalse(node1.isFunction());
853:       assertFalse(node1.isDefaultCase());
854:       assertFalse(node1.hasMoreThanOneChild());
855:       assertFalse(node1.isIn());
856:       assertFalse(node1.isCase());
857:       assertEquals(32, node1.getLineno());
858:       assertFalse(node1.isNumber());
859:       assertFalse(node1.isNE());
860:       assertFalse(node1.isGetterDef());
861:       assertFalse(node1.isIf());
862:       assertFalse(node1.isSwitch());
863:       assertFalse(node1.hasOneChild());
864:       assertFalse(node1.isHook());
865:       assertFalse(node1.isTry());
866:       assertFalse(node1.isRegExp());
867:       assertFalse(node1.isWith());
868:       assertFalse(node1.isBlock());
869:       assertFalse(node1.isFor());
870:       assertFalse(node1.isThis());
871:       assertFalse(node1.isInstanceOf());
872:       assertFalse(node1.isAnd());
873:       assertFalse(node1.isGetProp());
874:       assertFalse(node1.isScript());
875:       assertEquals(131072, node1.getSourcePosition());
876:       assertFalse(node1.isNot());
877:       assertFalse(node1.isObjectLit());
878:       assertEquals(0, node1.getCharno());
879:       assertFalse(node1.isCast());
880:       assertFalse(node1.isLabelName());
881:       assertFalse(node1.isInc());
882:       assertEquals((-1122), node1.getType());
883:       assertFalse(node1.isFalse());
884:       assertFalse(node1.isThrow());
885:       assertFalse(node1.isLabel());
886:       assertFalse(node1.isAssignAdd());
887:       assertFalse(node1.isContinue());
888:       assertFalse(node1.isDo());
889:       assertFalse(node1.isDelProp());
890:       assertFalse(node1.isString());
891:       assertFalse(node1.isOr());
892:       assertFalse(node1.isName());
893:       assertFalse(node1.isGetElem());
894:       assertFalse(node1.isVoid());
895:       assertFalse(node1.isCall());
896:       assertFalse(node1.isExprResult());
897:       assertFalse(node1.isBreak());
898:       assertFalse(node1.isTypeOf());
899:       assertFalse(node1.isDec());
900:       assertFalse(node1.isWhile());
901:       assertFalse(node1.isAssign());
902:       assertFalse(node1.isReturn());
903:       assertFalse(node1.isComma());
904:       assertFalse(node1.hasChildren());
905:       assertEquals((-1), int0);
906:       assertEquals(15, Node.NO_SIDE_EFFECTS);
907:       assertEquals(57, Node.LAST_PROP);
908:       assertEquals(54, Node.SLASH_V);
909:       assertEquals(52, Node.LENGTH);
910:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
911:       assertEquals(30, Node.VAR_ARGS_NAME);
912:       assertEquals(40, Node.ORIGINALNAME_PROP);
913:       assertEquals(57, Node.REFLECTED_OBJECT);
914:       assertEquals(46, Node.IS_NAMESPACE);
915:       assertEquals(49, Node.DIRECT_EVAL);
916:       assertEquals(37, Node.OPT_ARG_NAME);
917:       assertEquals(2, Node.POST_FLAG);
918:       assertEquals(8, Node.FLAG_NO_THROWS);
919:       assertEquals(39, Node.EMPTY_BLOCK);
920:       assertEquals(47, Node.IS_DISPATCHER);
921:       assertEquals(56, Node.CHANGE_TIME);
922:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
923:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
924:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
925:       assertEquals(55, Node.INFERRED_FUNCTION);
926:       assertEquals(29, Node.JSDOC_INFO_PROP);
927:       assertEquals(53, Node.INPUT_ID);
928:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
929:       assertEquals(43, Node.IS_CONSTANT_NAME);
930:       assertEquals(36, Node.QUOTED_PROP);
931:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
932:       assertEquals(4095, Node.COLUMN_MASK);
933:       assertEquals(48, Node.DIRECTIVES);
934:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
935:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
936:       assertEquals(50, Node.FREE_CALL);
937:       assertEquals(51, Node.STATIC_SOURCE_FILE);
938:       assertEquals(12, Node.COLUMN_BITS);
939:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
940:       assertEquals(32, Node.INCRDECR_PROP);
941:       assertEquals(1, Node.DECR_FLAG);
942:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
943:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
944:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
945:       assertEquals(29, Node.JSDOC_INFO_PROP);
946:       assertEquals(53, Node.INPUT_ID);
947:       assertEquals(2, Node.POST_FLAG);
948:       assertEquals(32, Node.INCRDECR_PROP);
949:       assertEquals(47, Node.IS_DISPATCHER);
950:       assertEquals(12, Node.COLUMN_BITS);
951:       assertEquals(49, Node.DIRECT_EVAL);
952:       assertEquals(4095, Node.COLUMN_MASK);
953:       assertEquals(15, Node.NO_SIDE_EFFECTS);
954:       assertEquals(55, Node.INFERRED_FUNCTION);
955:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
956:       assertEquals(48, Node.DIRECTIVES);
957:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
958:       assertEquals(37, Node.OPT_ARG_NAME);
959:       assertEquals(52, Node.LENGTH);
960:       assertEquals(8, Node.FLAG_NO_THROWS);
961:       assertEquals(56, Node.CHANGE_TIME);
962:       assertEquals(36, Node.QUOTED_PROP);
963:       assertEquals(57, Node.REFLECTED_OBJECT);
964:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
965:       assertEquals(50, Node.FREE_CALL);
966:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
967:       assertEquals(39, Node.EMPTY_BLOCK);
968:       assertEquals(40, Node.ORIGINALNAME_PROP);
969:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
970:       assertEquals(57, Node.LAST_PROP);
971:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
972:       assertEquals(1, Node.DECR_FLAG);
973:       assertEquals(30, Node.VAR_ARGS_NAME);
974:       assertEquals(54, Node.SLASH_V);
975:       assertEquals(46, Node.IS_NAMESPACE);
976:       assertEquals(43, Node.IS_CONSTANT_NAME);
977:       assertEquals(51, Node.STATIC_SOURCE_FILE);
978:       
979:       Iterable<Node> iterable0 = node0.children();
980:       assertFalse(node0.equals((Object)node1));
981:       assertFalse(node0.equals((Object)node2));
982:       assertFalse(node0.isAssign());
983:       assertFalse(node0.hasChildren());
984:       assertFalse(node0.isGetElem());
985:       assertFalse(node0.isCast());
986:       assertFalse(node0.isDec());
987:       assertFalse(node0.isTypeOf());
988:       assertFalse(node0.isAssignAdd());
989:       assertFalse(node0.isReturn());
990:       assertFalse(node0.isLabel());
991:       assertFalse(node0.hasOneChild());
992:       assertFalse(node0.isNot());
993:       assertFalse(node0.isScript());
994:       assertFalse(node0.isContinue());
995:       assertFalse(node0.isObjectLit());
996:       assertFalse(node0.isAnd());
997:       assertFalse(node0.isLabelName());
998:       assertFalse(node0.isThrow());
999:       assertFalse(node0.isStringKey());
1000:       assertFalse(node0.isThis());
1001:       assertFalse(node0.isFalse());
1002:       assertFalse(node0.isHook());
1003:       assertFalse(node0.isBlock());
1004:       assertFalse(node0.isSetterDef());
1005:       assertFalse(node0.isInc());
1006:       assertEquals(159744, node0.getSourcePosition());
1007:       assertEquals(39, node0.getType());
1008:       assertFalse(node0.isWith());
1009:       assertFalse(node0.hasMoreThanOneChild());
1010:       assertFalse(node0.isCatch());
1011:       assertEquals(0, node0.getCharno());
1012:       assertFalse(node0.isIn());
1013:       assertFalse(node0.isRegExp());
1014:       assertFalse(node0.isInstanceOf());
1015:       assertFalse(node0.isNE());
1016:       assertFalse(node0.isIf());
1017:       assertFalse(node0.isFor());
1018:       assertFalse(node0.isEmpty());
1019:       assertFalse(node0.isGetterDef());
1020:       assertTrue(node0.isNumber());
1021:       assertFalse(node0.isDefaultCase());
1022:       assertFalse(node0.isTry());
1023:       assertFalse(node0.isCase());
1024:       assertFalse(node0.isString());
1025:       assertFalse(node0.isFunction());
1026:       assertFalse(node0.isDebugger());
1027:       assertEquals(0, node0.getChildCount());
1028:       assertFalse(node0.isSwitch());
1029:       assertFalse(node0.isArrayLit());
1030:       assertFalse(node0.isParamList());
1031:       assertEquals(39, node0.getLineno());
1032:       assertFalse(node0.isBreak());
1033:       assertFalse(node0.isCall());
1034:       assertFalse(node0.isNull());
1035:       assertFalse(node0.isComma());
1036:       assertFalse(node0.isNew());
1037:       assertFalse(node0.isGetProp());
1038:       assertFalse(node0.isVar());
1039:       assertFalse(node0.isAdd());
1040:       assertFalse(node0.isDo());
1041:       assertFalse(node0.isWhile());
1042:       assertFalse(node0.isOr());
1043:       assertFalse(node0.isTrue());
1044:       assertFalse(node0.isExprResult());
1045:       assertFalse(node0.isName());
1046:       assertFalse(node0.isDelProp());
1047:       assertFalse(node0.isVoid());
1048:       assertFalse(iterable0.contains(node0));
1049:       assertNotNull(iterable0);
1050:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1051:       assertEquals(57, Node.LAST_PROP);
1052:       assertEquals(54, Node.SLASH_V);
1053:       assertEquals(52, Node.LENGTH);
1054:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1055:       assertEquals(30, Node.VAR_ARGS_NAME);
1056:       assertEquals(40, Node.ORIGINALNAME_PROP);
1057:       assertEquals(57, Node.REFLECTED_OBJECT);
1058:       assertEquals(46, Node.IS_NAMESPACE);
1059:       assertEquals(49, Node.DIRECT_EVAL);
1060:       assertEquals(37, Node.OPT_ARG_NAME);
1061:       assertEquals(2, Node.POST_FLAG);
1062:       assertEquals(8, Node.FLAG_NO_THROWS);
1063:       assertEquals(39, Node.EMPTY_BLOCK);
1064:       assertEquals(47, Node.IS_DISPATCHER);
1065:       assertEquals(56, Node.CHANGE_TIME);
1066:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1067:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1068:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1069:       assertEquals(55, Node.INFERRED_FUNCTION);
1070:       assertEquals(29, Node.JSDOC_INFO_PROP);
1071:       assertEquals(53, Node.INPUT_ID);
1072:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1073:       assertEquals(43, Node.IS_CONSTANT_NAME);
1074:       assertEquals(36, Node.QUOTED_PROP);
1075:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1076:       assertEquals(4095, Node.COLUMN_MASK);
1077:       assertEquals(48, Node.DIRECTIVES);
1078:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1079:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1080:       assertEquals(50, Node.FREE_CALL);
1081:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1082:       assertEquals(12, Node.COLUMN_BITS);
1083:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1084:       assertEquals(32, Node.INCRDECR_PROP);
1085:       assertEquals(1, Node.DECR_FLAG);
1086:       
1087:       node1.putIntProp(57, 38);
1088:       assertFalse(node1.equals((Object)node2));
1089:       assertFalse(node1.equals((Object)node0));
1090:       assertNotSame(node1, node2);
1091:       assertEquals(0, node1.getChildCount());
1092:       assertFalse(node1.isCatch());
1093:       assertFalse(node1.isSetterDef());
1094:       assertFalse(node1.isNull());
1095:       assertFalse(node1.isParamList());
1096:       assertFalse(node1.isStringKey());
1097:       assertFalse(node1.isTrue());
1098:       assertFalse(node1.isDebugger());
1099:       assertFalse(node1.isVar());
1100:       assertFalse(node1.isNew());
1101:       assertFalse(node1.isEmpty());
1102:       assertFalse(node1.isAdd());
1103:       assertFalse(node1.isArrayLit());
1104:       assertFalse(node1.isFunction());
1105:       assertFalse(node1.isDefaultCase());
1106:       assertFalse(node1.hasMoreThanOneChild());
1107:       assertFalse(node1.isIn());
1108:       assertFalse(node1.isCase());
1109:       assertEquals(32, node1.getLineno());
1110:       assertFalse(node1.isNumber());
1111:       assertFalse(node1.isNE());
1112:       assertFalse(node1.isGetterDef());
1113:       assertFalse(node1.isIf());
1114:       assertFalse(node1.isSwitch());
1115:       assertFalse(node1.hasOneChild());
1116:       assertFalse(node1.isHook());
1117:       assertFalse(node1.isTry());
1118:       assertFalse(node1.isRegExp());
1119:       assertFalse(node1.isWith());
1120:       assertFalse(node1.isBlock());
1121:       assertFalse(node1.isFor());
1122:       assertFalse(node1.isThis());
1123:       assertFalse(node1.isInstanceOf());
1124:       assertFalse(node1.isAnd());
1125:       assertFalse(node1.isGetProp());
1126:       assertFalse(node1.isScript());
1127:       assertEquals(131072, node1.getSourcePosition());
1128:       assertFalse(node1.isNot());
1129:       assertFalse(node1.isObjectLit());
1130:       assertEquals(0, node1.getCharno());
1131:       assertFalse(node1.isCast());
1132:       assertFalse(node1.isLabelName());
1133:       assertFalse(node1.isInc());
1134:       assertEquals((-1122), node1.getType());
1135:       assertFalse(node1.isFalse());
1136:       assertFalse(node1.isThrow());
1137:       assertFalse(node1.isLabel());
1138:       assertFalse(node1.isAssignAdd());
1139:       assertFalse(node1.isContinue());
1140:       assertFalse(node1.isDo());
1141:       assertFalse(node1.isDelProp());
1142:       assertFalse(node1.isString());
1143:       assertFalse(node1.isOr());
1144:       assertFalse(node1.isName());
1145:       assertFalse(node1.isGetElem());
1146:       assertFalse(node1.isVoid());
1147:       assertFalse(node1.isCall());
1148:       assertFalse(node1.isExprResult());
1149:       assertFalse(node1.isBreak());
1150:       assertFalse(node1.isTypeOf());
1151:       assertFalse(node1.isDec());
1152:       assertFalse(node1.isWhile());
1153:       assertFalse(node1.isAssign());
1154:       assertFalse(node1.isReturn());
1155:       assertFalse(node1.isComma());
1156:       assertFalse(node1.hasChildren());
1157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1160:       assertEquals(29, Node.JSDOC_INFO_PROP);
1161:       assertEquals(53, Node.INPUT_ID);
1162:       assertEquals(2, Node.POST_FLAG);
1163:       assertEquals(32, Node.INCRDECR_PROP);
1164:       assertEquals(47, Node.IS_DISPATCHER);
1165:       assertEquals(12, Node.COLUMN_BITS);
1166:       assertEquals(49, Node.DIRECT_EVAL);
1167:       assertEquals(4095, Node.COLUMN_MASK);
1168:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1169:       assertEquals(55, Node.INFERRED_FUNCTION);
1170:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1171:       assertEquals(48, Node.DIRECTIVES);
1172:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1173:       assertEquals(37, Node.OPT_ARG_NAME);
1174:       assertEquals(52, Node.LENGTH);
1175:       assertEquals(8, Node.FLAG_NO_THROWS);
1176:       assertEquals(56, Node.CHANGE_TIME);
1177:       assertEquals(36, Node.QUOTED_PROP);
1178:       assertEquals(57, Node.REFLECTED_OBJECT);
1179:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1180:       assertEquals(50, Node.FREE_CALL);
1181:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1182:       assertEquals(39, Node.EMPTY_BLOCK);
1183:       assertEquals(40, Node.ORIGINALNAME_PROP);
1184:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1185:       assertEquals(57, Node.LAST_PROP);
1186:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1187:       assertEquals(1, Node.DECR_FLAG);
1188:       assertEquals(30, Node.VAR_ARGS_NAME);
1189:       assertEquals(54, Node.SLASH_V);
1190:       assertEquals(46, Node.IS_NAMESPACE);
1191:       assertEquals(43, Node.IS_CONSTANT_NAME);
1192:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1193:       
1194:       Node node3 = new Node((-2115), node2, node1, node2, (-377), 103);
1195:       assertFalse(node1.equals((Object)node2));
1196:       assertFalse(node1.equals((Object)node0));
1197:       assertFalse(node2.equals((Object)node1));
1198:       assertFalse(node2.equals((Object)node0));
1199:       assertFalse(node3.equals((Object)node1));
1200:       assertFalse(node3.equals((Object)node0));
1201:       assertFalse(node3.equals((Object)node2));
1202:       assertEquals(0, node1.getChildCount());
1203:       assertFalse(node1.isCatch());
1204:       assertFalse(node1.isSetterDef());
1205:       assertFalse(node1.isNull());
1206:       assertFalse(node1.isParamList());
1207:       assertFalse(node1.isStringKey());
1208:       assertFalse(node1.isTrue());
1209:       assertFalse(node1.isDebugger());
1210:       assertFalse(node1.isVar());
1211:       assertFalse(node1.isNew());
1212:       assertFalse(node1.isEmpty());
1213:       assertFalse(node1.isAdd());
1214:       assertFalse(node1.isArrayLit());
1215:       assertFalse(node1.isFunction());
1216:       assertFalse(node1.isDefaultCase());
1217:       assertFalse(node1.hasMoreThanOneChild());
1218:       assertFalse(node1.isIn());
1219:       assertFalse(node1.isCase());
1220:       assertEquals(32, node1.getLineno());
1221:       assertFalse(node1.isNumber());
1222:       assertFalse(node1.isNE());
1223:       assertFalse(node1.isGetterDef());
1224:       assertFalse(node1.isIf());
1225:       assertFalse(node1.isSwitch());
1226:       assertFalse(node1.hasOneChild());
1227:       assertFalse(node1.isHook());
1228:       assertFalse(node1.isTry());
1229:       assertFalse(node1.isRegExp());
1230:       assertFalse(node1.isWith());
1231:       assertFalse(node1.isBlock());
1232:       assertFalse(node1.isFor());
1233:       assertFalse(node1.isThis());
1234:       assertFalse(node1.isInstanceOf());
1235:       assertFalse(node1.isAnd());
1236:       assertFalse(node1.isGetProp());
1237:       assertFalse(node1.isScript());
1238:       assertEquals(131072, node1.getSourcePosition());
1239:       assertFalse(node1.isNot());
1240:       assertFalse(node1.isObjectLit());
1241:       assertEquals(0, node1.getCharno());
1242:       assertFalse(node1.isCast());
1243:       assertFalse(node1.isLabelName());
1244:       assertFalse(node1.isInc());
1245:       assertEquals((-1122), node1.getType());
1246:       assertFalse(node1.isFalse());
1247:       assertFalse(node1.isThrow());
1248:       assertFalse(node1.isLabel());
1249:       assertFalse(node1.isAssignAdd());
1250:       assertFalse(node1.isContinue());
1251:       assertFalse(node1.isDo());
1252:       assertFalse(node1.isDelProp());
1253:       assertFalse(node1.isString());
1254:       assertFalse(node1.isOr());
1255:       assertFalse(node1.isName());
1256:       assertFalse(node1.isGetElem());
1257:       assertFalse(node1.isVoid());
1258:       assertFalse(node1.isCall());
1259:       assertFalse(node1.isExprResult());
1260:       assertFalse(node1.isBreak());
1261:       assertFalse(node1.isTypeOf());
1262:       assertFalse(node1.isDec());
1263:       assertFalse(node1.isWhile());
1264:       assertFalse(node1.isAssign());
1265:       assertFalse(node1.isReturn());
1266:       assertFalse(node1.isComma());
1267:       assertFalse(node1.hasChildren());
1268:       assertFalse(node2.isAnd());
1269:       assertFalse(node2.isInstanceOf());
1270:       assertFalse(node2.isWith());
1271:       assertFalse(node2.isObjectLit());
1272:       assertFalse(node2.isNot());
1273:       assertFalse(node2.isComma());
1274:       assertFalse(node2.isScript());
1275:       assertFalse(node2.isThis());
1276:       assertFalse(node2.isGetProp());
1277:       assertEquals(46, node2.getType());
1278:       assertFalse(node2.hasOneChild());
1279:       assertFalse(node2.isCast());
1280:       assertFalse(node2.isThrow());
1281:       assertFalse(node2.isFalse());
1282:       assertEquals((-1), node2.getCharno());
1283:       assertEquals((-1), node2.getSourcePosition());
1284:       assertFalse(node2.isSwitch());
1285:       assertFalse(node2.isLabelName());
1286:       assertFalse(node2.hasMoreThanOneChild());
1287:       assertFalse(node2.isIn());
1288:       assertFalse(node2.isContinue());
1289:       assertFalse(node2.isNumber());
1290:       assertFalse(node2.isInc());
1291:       assertFalse(node2.isCase());
1292:       assertFalse(node2.isHook());
1293:       assertFalse(node2.isBlock());
1294:       assertFalse(node2.isFor());
1295:       assertFalse(node2.isRegExp());
1296:       assertFalse(node2.isIf());
1297:       assertFalse(node2.isNE());
1298:       assertEquals((-1), node2.getLineno());
1299:       assertFalse(node2.isCatch());
1300:       assertEquals(0, node2.getChildCount());
1301:       assertFalse(node2.isSetterDef());
1302:       assertFalse(node2.isDefaultCase());
1303:       assertFalse(node2.isTry());
1304:       assertFalse(node2.isArrayLit());
1305:       assertFalse(node2.isVar());
1306:       assertFalse(node2.isStringKey());
1307:       assertFalse(node2.isGetterDef());
1308:       assertFalse(node2.isDebugger());
1309:       assertFalse(node2.isFunction());
1310:       assertFalse(node2.isParamList());
1311:       assertFalse(node2.isLabel());
1312:       assertFalse(node2.isReturn());
1313:       assertFalse(node2.isOr());
1314:       assertFalse(node2.hasChildren());
1315:       assertFalse(node2.isString());
1316:       assertFalse(node2.isWhile());
1317:       assertFalse(node2.isEmpty());
1318:       assertFalse(node2.isNew());
1319:       assertFalse(node2.isAdd());
1320:       assertFalse(node2.isAssignAdd());
1321:       assertFalse(node2.isDo());
1322:       assertFalse(node2.isCall());
1323:       assertFalse(node2.isDec());
1324:       assertFalse(node2.isAssign());
1325:       assertFalse(node2.isNull());
1326:       assertFalse(node2.isTypeOf());
1327:       assertFalse(node2.isTrue());
1328:       assertFalse(node2.isExprResult());
1329:       assertFalse(node2.isName());
1330:       assertFalse(node2.isGetElem());
1331:       assertFalse(node2.isBreak());
1332:       assertFalse(node2.isDelProp());
1333:       assertFalse(node2.isVoid());
1334:       assertFalse(node3.isOr());
1335:       assertFalse(node3.isLabel());
1336:       assertFalse(node3.isAssignAdd());
1337:       assertFalse(node3.isReturn());
1338:       assertEquals((-1), node3.getLineno());
1339:       assertFalse(node3.isNumber());
1340:       assertFalse(node3.hasMoreThanOneChild());
1341:       assertFalse(node3.isTypeOf());
1342:       assertFalse(node3.isContinue());
1343:       assertFalse(node3.isLabelName());
1344:       assertFalse(node3.isGetElem());
1345:       assertEquals((-1), node3.getSourcePosition());
1346:       assertFalse(node3.isBlock());
1347:       assertFalse(node3.isScript());
1348:       assertFalse(node3.isCall());
1349:       assertFalse(node3.isExprResult());
1350:       assertFalse(node3.isAssign());
1351:       assertFalse(node3.isWith());
1352:       assertFalse(node3.isDec());
1353:       assertFalse(node3.isWhile());
1354:       assertFalse(node3.isComma());
1355:       assertFalse(node3.isName());
1356:       assertFalse(node3.isBreak());
1357:       assertFalse(node3.isTrue());
1358:       assertFalse(node3.isNull());
1359:       assertFalse(node3.isStringKey());
1360:       assertFalse(node3.isParamList());
1361:       assertFalse(node3.isAdd());
1362:       assertFalse(node3.isNew());
1363:       assertFalse(node3.isArrayLit());
1364:       assertFalse(node3.isDo());
1365:       assertFalse(node3.isEmpty());
1366:       assertFalse(node3.isVar());
1367:       assertFalse(node3.isDefaultCase());
1368:       assertTrue(node3.hasChildren());
1369:       assertEquals(1, node3.getChildCount());
1370:       assertFalse(node3.isIn());
1371:       assertFalse(node3.isGetterDef());
1372:       assertFalse(node3.isDelProp());
1373:       assertFalse(node3.isNE());
1374:       assertFalse(node3.isSwitch());
1375:       assertFalse(node3.isIf());
1376:       assertFalse(node3.isTry());
1377:       assertEquals((-1), node3.getCharno());
1378:       assertFalse(node3.isDebugger());
1379:       assertFalse(node3.isVoid());
1380:       assertFalse(node3.isRegExp());
1381:       assertFalse(node3.isString());
1382:       assertFalse(node3.isFor());
1383:       assertTrue(node3.hasOneChild());
1384:       assertFalse(node3.isCase());
1385:       assertFalse(node3.isHook());
1386:       assertFalse(node3.isThis());
1387:       assertFalse(node3.isGetProp());
1388:       assertFalse(node3.isSetterDef());
1389:       assertFalse(node3.isCatch());
1390:       assertFalse(node3.isInstanceOf());
1391:       assertFalse(node3.isNot());
1392:       assertFalse(node3.isObjectLit());
1393:       assertFalse(node3.isAnd());
1394:       assertEquals((-2115), node3.getType());
1395:       assertFalse(node3.isCast());
1396:       assertFalse(node3.isInc());
1397:       assertFalse(node3.isFunction());
1398:       assertFalse(node3.isFalse());
1399:       assertFalse(node3.isThrow());
1400:       assertNotNull(node3);
1401:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1402:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1403:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1404:       assertEquals(29, Node.JSDOC_INFO_PROP);
1405:       assertEquals(53, Node.INPUT_ID);
1406:       assertEquals(2, Node.POST_FLAG);
1407:       assertEquals(32, Node.INCRDECR_PROP);
1408:       assertEquals(47, Node.IS_DISPATCHER);
1409:       assertEquals(12, Node.COLUMN_BITS);
1410:       assertEquals(49, Node.DIRECT_EVAL);
1411:       assertEquals(4095, Node.COLUMN_MASK);
1412:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1413:       assertEquals(55, Node.INFERRED_FUNCTION);
1414:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1415:       assertEquals(48, Node.DIRECTIVES);
1416:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1417:       assertEquals(37, Node.OPT_ARG_NAME);
1418:       assertEquals(52, Node.LENGTH);
1419:       assertEquals(8, Node.FLAG_NO_THROWS);
1420:       assertEquals(56, Node.CHANGE_TIME);
1421:       assertEquals(36, Node.QUOTED_PROP);
1422:       assertEquals(57, Node.REFLECTED_OBJECT);
1423:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1424:       assertEquals(50, Node.FREE_CALL);
1425:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1426:       assertEquals(39, Node.EMPTY_BLOCK);
1427:       assertEquals(40, Node.ORIGINALNAME_PROP);
1428:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1429:       assertEquals(57, Node.LAST_PROP);
1430:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1431:       assertEquals(1, Node.DECR_FLAG);
1432:       assertEquals(30, Node.VAR_ARGS_NAME);
1433:       assertEquals(54, Node.SLASH_V);
1434:       assertEquals(46, Node.IS_NAMESPACE);
1435:       assertEquals(43, Node.IS_CONSTANT_NAME);
1436:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1437:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1438:       assertEquals(29, Node.JSDOC_INFO_PROP);
1439:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1440:       assertEquals(56, Node.CHANGE_TIME);
1441:       assertEquals(47, Node.IS_DISPATCHER);
1442:       assertEquals(2, Node.POST_FLAG);
1443:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1444:       assertEquals(37, Node.OPT_ARG_NAME);
1445:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1446:       assertEquals(49, Node.DIRECT_EVAL);
1447:       assertEquals(55, Node.INFERRED_FUNCTION);
1448:       assertEquals(57, Node.LAST_PROP);
1449:       assertEquals(36, Node.QUOTED_PROP);
1450:       assertEquals(30, Node.VAR_ARGS_NAME);
1451:       assertEquals(53, Node.INPUT_ID);
1452:       assertEquals(52, Node.LENGTH);
1453:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1454:       assertEquals(8, Node.FLAG_NO_THROWS);
1455:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1456:       assertEquals(39, Node.EMPTY_BLOCK);
1457:       assertEquals(50, Node.FREE_CALL);
1458:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1459:       assertEquals(57, Node.REFLECTED_OBJECT);
1460:       assertEquals(48, Node.DIRECTIVES);
1461:       assertEquals(54, Node.SLASH_V);
1462:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1463:       assertEquals(40, Node.ORIGINALNAME_PROP);
1464:       assertEquals(1, Node.DECR_FLAG);
1465:       assertEquals(4095, Node.COLUMN_MASK);
1466:       assertEquals(43, Node.IS_CONSTANT_NAME);
1467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1468:       assertEquals(12, Node.COLUMN_BITS);
1469:       assertEquals(46, Node.IS_NAMESPACE);
1470:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1471:       assertEquals(32, Node.INCRDECR_PROP);
1472:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1473:       assertEquals(57, Node.REFLECTED_OBJECT);
1474:       assertEquals(40, Node.ORIGINALNAME_PROP);
1475:       assertEquals(50, Node.FREE_CALL);
1476:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1477:       assertEquals(52, Node.LENGTH);
1478:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1479:       assertEquals(39, Node.EMPTY_BLOCK);
1480:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1481:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1482:       assertEquals(1, Node.DECR_FLAG);
1483:       assertEquals(57, Node.LAST_PROP);
1484:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1485:       assertEquals(46, Node.IS_NAMESPACE);
1486:       assertEquals(30, Node.VAR_ARGS_NAME);
1487:       assertEquals(43, Node.IS_CONSTANT_NAME);
1488:       assertEquals(54, Node.SLASH_V);
1489:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1490:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1491:       assertEquals(53, Node.INPUT_ID);
1492:       assertEquals(29, Node.JSDOC_INFO_PROP);
1493:       assertEquals(2, Node.POST_FLAG);
1494:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1495:       assertEquals(47, Node.IS_DISPATCHER);
1496:       assertEquals(32, Node.INCRDECR_PROP);
1497:       assertEquals(12, Node.COLUMN_BITS);
1498:       assertEquals(55, Node.INFERRED_FUNCTION);
1499:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1500:       assertEquals(8, Node.FLAG_NO_THROWS);
1501:       assertEquals(4095, Node.COLUMN_MASK);
1502:       assertEquals(56, Node.CHANGE_TIME);
1503:       assertEquals(36, Node.QUOTED_PROP);
1504:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1505:       assertEquals(37, Node.OPT_ARG_NAME);
1506:       assertEquals(48, Node.DIRECTIVES);
1507:       assertEquals(49, Node.DIRECT_EVAL);
1508:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1509:       
1510:       // Undeclared exception!
1511:       try { 
1512:         node1.copyInformationFromForTree((Node) null);
1513:         fail("Expecting exception: NullPointerException");
1514:       
1515:       } catch(NullPointerException e) {
1516:          //
1517:          // no message in exception (getMessage() returned null)
1518:          //
1519:          verifyException("com.google.javascript.rhino.Node", e);
1520:       }
1521:   }
1522: }
RegularFileObject[/tmp/EvoSuite_47_1628161367647/com/google/javascript/rhino/Node_47_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:02:47 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_47_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_47_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_47_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:02:48.013 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertNotNull(node0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

String string0 = "UNKNOWN";
Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
assertFalse(node1.equals((Object)node0));
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals(32, node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isInc());
assertEquals((-1122), node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isDelProp());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertNotNull(node1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Object object0 = node1.getProp(0);
assertFalse(node1.equals((Object)node0));
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals(32, node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isInc());
assertEquals((-1122), node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isDelProp());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertNull(object0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node node2 = Node.newString(46, "UNKNOWN");
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node1);
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertEquals(46, node2.getType());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals((-1), node2.getCharno());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isNumber());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isParamList());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.hasChildren());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isCall());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertNotNull(node2);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean0 = node1.isVarArgs();
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node2);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals(32, node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isInc());
assertEquals((-1122), node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isDelProp());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(boolean0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node0.setLineno(39);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals(39, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

node0.putProp(4095, (Object) null);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals(39, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

int int0 = node0.getIndexOfChild(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node2);
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals(39, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals(32, node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isInc());
assertEquals((-1122), node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isDelProp());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertEquals((-1), int0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertEquals(0, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isParamList());
assertEquals(39, node0.getLineno());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

node1.putIntProp(57, 38);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node2);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals(32, node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isInc());
assertEquals((-1122), node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isDelProp());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node node3 = new Node((-2115), node2, node1, node2, (-377), 103);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals(32, node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(0, node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isInc());
assertEquals((-1122), node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isDelProp());
assertFalse(node1.isString());
assertFalse(node1.isOr());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertEquals(46, node2.getType());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertEquals((-1), node2.getCharno());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isSwitch());
assertFalse(node2.isLabelName());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isNumber());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isParamList());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.hasChildren());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isEmpty());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isCall());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNumber());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isTypeOf());
assertFalse(node3.isContinue());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isBlock());
assertFalse(node3.isScript());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());
assertFalse(node3.isAssign());
assertFalse(node3.isWith());
assertFalse(node3.isDec());
assertFalse(node3.isWhile());
assertFalse(node3.isComma());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isArrayLit());
assertFalse(node3.isDo());
assertFalse(node3.isEmpty());
assertFalse(node3.isVar());
assertFalse(node3.isDefaultCase());
assertTrue(node3.hasChildren());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isNE());
assertFalse(node3.isSwitch());
assertFalse(node3.isIf());
assertFalse(node3.isTry());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isString());
assertFalse(node3.isFor());
assertTrue(node3.hasOneChild());
assertFalse(node3.isCase());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertEquals((-2115), node3.getType());
assertFalse(node3.isCast());
assertFalse(node3.isInc());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertNotNull(node3);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

node1.copyInformationFromForTree((Node) null);

[MASTER] 11:02:48.747 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_54_1628161368660/com/google/javascript/rhino/Node_54_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_54_1628161368660/com/google/javascript/rhino/Node_54_tmp__ESTest_scaffolding.java]]
[MASTER] 11:02:48.747 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:48.747 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:48.747 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 194
[MASTER] 11:02:48.749 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_54_1628161368660/com/google/javascript/rhino/Node_54_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:02:48 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_54_tmp__ESTest extends Node_54_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       String string0 = "np";
22:       Node node0 = new Node((-1080));
23:       assertFalse(node0.isWith());
24:       assertFalse(node0.isNot());
25:       assertFalse(node0.isAnd());
26:       assertFalse(node0.isExprResult());
27:       assertFalse(node0.isGetElem());
28:       assertFalse(node0.isCast());
29:       assertFalse(node0.isInstanceOf());
30:       assertFalse(node0.isBreak());
31:       assertFalse(node0.isThrow());
32:       assertFalse(node0.isAssignAdd());
33:       assertFalse(node0.isOr());
34:       assertFalse(node0.isInc());
35:       assertFalse(node0.isString());
36:       assertFalse(node0.isWhile());
37:       assertFalse(node0.isReturn());
38:       assertFalse(node0.isContinue());
39:       assertFalse(node0.isCall());
40:       assertFalse(node0.isFalse());
41:       assertFalse(node0.hasChildren());
42:       assertEquals((-1), node0.getSourcePosition());
43:       assertFalse(node0.isTypeOf());
44:       assertFalse(node0.isComma());
45:       assertFalse(node0.isDec());
46:       assertFalse(node0.isAssign());
47:       assertFalse(node0.isObjectLit());
48:       assertFalse(node0.isGetProp());
49:       assertFalse(node0.isDefaultCase());
50:       assertFalse(node0.isRegExp());
51:       assertFalse(node0.isTrue());
52:       assertFalse(node0.isDebugger());
53:       assertFalse(node0.isVoid());
54:       assertFalse(node0.isArrayLit());
55:       assertEquals(0, node0.getChildCount());
56:       assertFalse(node0.isFunction());
57:       assertFalse(node0.isCatch());
58:       assertFalse(node0.isDelProp());
59:       assertFalse(node0.isIf());
60:       assertFalse(node0.isName());
61:       assertFalse(node0.isNull());
62:       assertFalse(node0.isNE());
63:       assertFalse(node0.isVar());
64:       assertFalse(node0.isIn());
65:       assertFalse(node0.isNew());
66:       assertFalse(node0.isSetterDef());
67:       assertFalse(node0.isAdd());
68:       assertFalse(node0.isEmpty());
69:       assertFalse(node0.isCase());
70:       assertFalse(node0.isDo());
71:       assertEquals((-1), node0.getCharno());
72:       assertFalse(node0.isSwitch());
73:       assertFalse(node0.isBlock());
74:       assertEquals((-1080), node0.getType());
75:       assertEquals((-1), node0.getLineno());
76:       assertFalse(node0.isHook());
77:       assertFalse(node0.isLabel());
78:       assertFalse(node0.hasMoreThanOneChild());
79:       assertFalse(node0.isGetterDef());
80:       assertFalse(node0.isNumber());
81:       assertFalse(node0.isLabelName());
82:       assertFalse(node0.isParamList());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isFor());
85:       assertFalse(node0.isStringKey());
86:       assertFalse(node0.hasOneChild());
87:       assertFalse(node0.isTry());
88:       assertFalse(node0.isScript());
89:       assertNotNull(node0);
90:       assertEquals(2, Node.POST_FLAG);
91:       assertEquals(47, Node.IS_DISPATCHER);
92:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
93:       assertEquals(37, Node.OPT_ARG_NAME);
94:       assertEquals(32, Node.INCRDECR_PROP);
95:       assertEquals(46, Node.IS_NAMESPACE);
96:       assertEquals(56, Node.CHANGE_TIME);
97:       assertEquals(51, Node.STATIC_SOURCE_FILE);
98:       assertEquals(1, Node.DECR_FLAG);
99:       assertEquals(29, Node.JSDOC_INFO_PROP);
100:       assertEquals(53, Node.INPUT_ID);
101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
103:       assertEquals(36, Node.QUOTED_PROP);
104:       assertEquals(49, Node.DIRECT_EVAL);
105:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
106:       assertEquals(12, Node.COLUMN_BITS);
107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
108:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
109:       assertEquals(4095, Node.COLUMN_MASK);
110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
111:       assertEquals(8, Node.FLAG_NO_THROWS);
112:       assertEquals(39, Node.EMPTY_BLOCK);
113:       assertEquals(48, Node.DIRECTIVES);
114:       assertEquals(55, Node.INFERRED_FUNCTION);
115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
116:       assertEquals(57, Node.REFLECTED_OBJECT);
117:       assertEquals(52, Node.LENGTH);
118:       assertEquals(50, Node.FREE_CALL);
119:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
120:       assertEquals(54, Node.SLASH_V);
121:       assertEquals(15, Node.NO_SIDE_EFFECTS);
122:       assertEquals(43, Node.IS_CONSTANT_NAME);
123:       assertEquals(57, Node.LAST_PROP);
124:       assertEquals(40, Node.ORIGINALNAME_PROP);
125:       assertEquals(30, Node.VAR_ARGS_NAME);
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertFalse(node0.isWith());
129:       assertFalse(node0.isNot());
130:       assertFalse(node0.isAnd());
131:       assertFalse(node0.isExprResult());
132:       assertFalse(node0.isGetElem());
133:       assertFalse(node0.isCast());
134:       assertFalse(node0.isInstanceOf());
135:       assertFalse(node0.isBreak());
136:       assertFalse(node0.isThrow());
137:       assertFalse(node0.isAssignAdd());
138:       assertFalse(node0.isOr());
139:       assertFalse(node0.isInc());
140:       assertFalse(node0.isString());
141:       assertFalse(node0.isWhile());
142:       assertFalse(node0.isReturn());
143:       assertFalse(node0.isContinue());
144:       assertFalse(node0.isCall());
145:       assertFalse(node0.isFalse());
146:       assertFalse(node0.hasChildren());
147:       assertEquals((-1), node0.getSourcePosition());
148:       assertFalse(node0.isTypeOf());
149:       assertFalse(node0.isComma());
150:       assertFalse(node0.isDec());
151:       assertFalse(node0.isAssign());
152:       assertFalse(node0.isObjectLit());
153:       assertFalse(node0.isGetProp());
154:       assertFalse(node0.isDefaultCase());
155:       assertFalse(node0.isRegExp());
156:       assertFalse(node0.isTrue());
157:       assertFalse(node0.isDebugger());
158:       assertFalse(node0.isVoid());
159:       assertFalse(node0.isArrayLit());
160:       assertEquals(0, node0.getChildCount());
161:       assertFalse(node0.isFunction());
162:       assertFalse(node0.isCatch());
163:       assertFalse(node0.isDelProp());
164:       assertFalse(node0.isIf());
165:       assertFalse(node0.isName());
166:       assertFalse(node0.isNull());
167:       assertFalse(node0.isNE());
168:       assertFalse(node0.isVar());
169:       assertFalse(node0.isIn());
170:       assertFalse(node0.isNew());
171:       assertFalse(node0.isSetterDef());
172:       assertFalse(node0.isAdd());
173:       assertFalse(node0.isEmpty());
174:       assertFalse(node0.isCase());
175:       assertFalse(node0.isDo());
176:       assertEquals((-1), node0.getCharno());
177:       assertFalse(node0.isSwitch());
178:       assertFalse(node0.isBlock());
179:       assertEquals((-1080), node0.getType());
180:       assertEquals((-1), node0.getLineno());
181:       assertFalse(node0.isHook());
182:       assertFalse(node0.isLabel());
183:       assertFalse(node0.hasMoreThanOneChild());
184:       assertFalse(node0.isGetterDef());
185:       assertFalse(node0.isNumber());
186:       assertFalse(node0.isLabelName());
187:       assertFalse(node0.isParamList());
188:       assertFalse(node0.isThis());
189:       assertFalse(node0.isFor());
190:       assertFalse(node0.isStringKey());
191:       assertFalse(node0.hasOneChild());
192:       assertFalse(node0.isTry());
193:       assertFalse(node0.isScript());
194:       assertFalse(iterable0.contains(node0));
195:       assertNotNull(iterable0);
196:       assertEquals(2, Node.POST_FLAG);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
199:       assertEquals(37, Node.OPT_ARG_NAME);
200:       assertEquals(32, Node.INCRDECR_PROP);
201:       assertEquals(46, Node.IS_NAMESPACE);
202:       assertEquals(56, Node.CHANGE_TIME);
203:       assertEquals(51, Node.STATIC_SOURCE_FILE);
204:       assertEquals(1, Node.DECR_FLAG);
205:       assertEquals(29, Node.JSDOC_INFO_PROP);
206:       assertEquals(53, Node.INPUT_ID);
207:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(36, Node.QUOTED_PROP);
210:       assertEquals(49, Node.DIRECT_EVAL);
211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
212:       assertEquals(12, Node.COLUMN_BITS);
213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
214:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
215:       assertEquals(4095, Node.COLUMN_MASK);
216:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
217:       assertEquals(8, Node.FLAG_NO_THROWS);
218:       assertEquals(39, Node.EMPTY_BLOCK);
219:       assertEquals(48, Node.DIRECTIVES);
220:       assertEquals(55, Node.INFERRED_FUNCTION);
221:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
222:       assertEquals(57, Node.REFLECTED_OBJECT);
223:       assertEquals(52, Node.LENGTH);
224:       assertEquals(50, Node.FREE_CALL);
225:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
226:       assertEquals(54, Node.SLASH_V);
227:       assertEquals(15, Node.NO_SIDE_EFFECTS);
228:       assertEquals(43, Node.IS_CONSTANT_NAME);
229:       assertEquals(57, Node.LAST_PROP);
230:       assertEquals(40, Node.ORIGINALNAME_PROP);
231:       assertEquals(30, Node.VAR_ARGS_NAME);
232:       
233:       Node node1 = null;
234:       node0.putIntProp((-862048943), (-852));
235:       assertFalse(node0.isWith());
236:       assertFalse(node0.isNot());
237:       assertFalse(node0.isAnd());
238:       assertFalse(node0.isExprResult());
239:       assertFalse(node0.isGetElem());
240:       assertFalse(node0.isCast());
241:       assertFalse(node0.isInstanceOf());
242:       assertFalse(node0.isBreak());
243:       assertFalse(node0.isThrow());
244:       assertFalse(node0.isAssignAdd());
245:       assertFalse(node0.isOr());
246:       assertFalse(node0.isInc());
247:       assertFalse(node0.isString());
248:       assertFalse(node0.isWhile());
249:       assertFalse(node0.isReturn());
250:       assertFalse(node0.isContinue());
251:       assertFalse(node0.isCall());
252:       assertFalse(node0.isFalse());
253:       assertFalse(node0.hasChildren());
254:       assertEquals((-1), node0.getSourcePosition());
255:       assertFalse(node0.isTypeOf());
256:       assertFalse(node0.isComma());
257:       assertFalse(node0.isDec());
258:       assertFalse(node0.isAssign());
259:       assertFalse(node0.isObjectLit());
260:       assertFalse(node0.isGetProp());
261:       assertFalse(node0.isDefaultCase());
262:       assertFalse(node0.isRegExp());
263:       assertFalse(node0.isTrue());
264:       assertFalse(node0.isDebugger());
265:       assertFalse(node0.isVoid());
266:       assertFalse(node0.isArrayLit());
267:       assertEquals(0, node0.getChildCount());
268:       assertFalse(node0.isFunction());
269:       assertFalse(node0.isCatch());
270:       assertFalse(node0.isDelProp());
271:       assertFalse(node0.isIf());
272:       assertFalse(node0.isName());
273:       assertFalse(node0.isNull());
274:       assertFalse(node0.isNE());
275:       assertFalse(node0.isVar());
276:       assertFalse(node0.isIn());
277:       assertFalse(node0.isNew());
278:       assertFalse(node0.isSetterDef());
279:       assertFalse(node0.isAdd());
280:       assertFalse(node0.isEmpty());
281:       assertFalse(node0.isCase());
282:       assertFalse(node0.isDo());
283:       assertEquals((-1), node0.getCharno());
284:       assertFalse(node0.isSwitch());
285:       assertFalse(node0.isBlock());
286:       assertEquals((-1080), node0.getType());
287:       assertEquals((-1), node0.getLineno());
288:       assertFalse(node0.isHook());
289:       assertFalse(node0.isLabel());
290:       assertFalse(node0.hasMoreThanOneChild());
291:       assertFalse(node0.isGetterDef());
292:       assertFalse(node0.isNumber());
293:       assertFalse(node0.isLabelName());
294:       assertFalse(node0.isParamList());
295:       assertFalse(node0.isThis());
296:       assertFalse(node0.isFor());
297:       assertFalse(node0.isStringKey());
298:       assertFalse(node0.hasOneChild());
299:       assertFalse(node0.isTry());
300:       assertFalse(node0.isScript());
301:       assertEquals(2, Node.POST_FLAG);
302:       assertEquals(47, Node.IS_DISPATCHER);
303:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
304:       assertEquals(37, Node.OPT_ARG_NAME);
305:       assertEquals(32, Node.INCRDECR_PROP);
306:       assertEquals(46, Node.IS_NAMESPACE);
307:       assertEquals(56, Node.CHANGE_TIME);
308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
309:       assertEquals(1, Node.DECR_FLAG);
310:       assertEquals(29, Node.JSDOC_INFO_PROP);
311:       assertEquals(53, Node.INPUT_ID);
312:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
313:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
314:       assertEquals(36, Node.QUOTED_PROP);
315:       assertEquals(49, Node.DIRECT_EVAL);
316:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
317:       assertEquals(12, Node.COLUMN_BITS);
318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
320:       assertEquals(4095, Node.COLUMN_MASK);
321:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
322:       assertEquals(8, Node.FLAG_NO_THROWS);
323:       assertEquals(39, Node.EMPTY_BLOCK);
324:       assertEquals(48, Node.DIRECTIVES);
325:       assertEquals(55, Node.INFERRED_FUNCTION);
326:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
327:       assertEquals(57, Node.REFLECTED_OBJECT);
328:       assertEquals(52, Node.LENGTH);
329:       assertEquals(50, Node.FREE_CALL);
330:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
331:       assertEquals(54, Node.SLASH_V);
332:       assertEquals(15, Node.NO_SIDE_EFFECTS);
333:       assertEquals(43, Node.IS_CONSTANT_NAME);
334:       assertEquals(57, Node.LAST_PROP);
335:       assertEquals(40, Node.ORIGINALNAME_PROP);
336:       assertEquals(30, Node.VAR_ARGS_NAME);
337:       
338:       Node node2 = null;
339:       try {
340:         node2 = new Node(4095, node0, node0, (Node) null, 18, 46);
341:         fail("Expecting exception: NullPointerException");
342:       
343:       } catch(NullPointerException e) {
344:          //
345:          // no message in exception (getMessage() returned null)
346:          //
347:          verifyException("com.google.javascript.rhino.Node", e);
348:       }
349:   }
350: }
RegularFileObject[/tmp/EvoSuite_54_1628161368660/com/google/javascript/rhino/Node_54_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:02:48 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_54_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_54_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_54_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:02:48.752 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "np";
Node node0 = new Node((-1080));
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isVar());
assertFalse(node0.isIn());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertEquals((-1080), node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertNotNull(node0);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isVar());
assertFalse(node0.isIn());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertEquals((-1080), node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node1 = null;
node0.putIntProp((-862048943), (-852));
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isVar());
assertFalse(node0.isIn());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertEquals((-1080), node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isHook());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node2 = new Node(4095, node0, node0, (Node) null, 18, 46);

[MASTER] 11:02:51.143 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_67_1628161371000/com/google/javascript/rhino/Node_67_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_67_1628161371000/com/google/javascript/rhino/Node_67_tmp__ESTest_scaffolding.java]]
[MASTER] 11:02:51.143 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:51.143 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:51.146 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1055
[MASTER] 11:02:51.147 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_67_1628161371000/com/google/javascript/rhino/Node_67_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:02:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.common.collect.ImmutableList;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.SimpleErrorReporter;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import com.google.javascript.rhino.jstype.NoObjectType;
17: import java.util.Iterator;
18: import java.util.LinkedList;
19: import java.util.List;
20: import org.evosuite.runtime.EvoRunner;
21: import org.evosuite.runtime.EvoRunnerParameters;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class Node_67_tmp__ESTest extends Node_67_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       Node node0 = Node.newNumber(1.0);
30:       assertFalse(node0.hasOneChild());
31:       assertFalse(node0.isCast());
32:       assertFalse(node0.isAssign());
33:       assertFalse(node0.isDec());
34:       assertFalse(node0.hasChildren());
35:       assertFalse(node0.isScript());
36:       assertFalse(node0.isAssignAdd());
37:       assertFalse(node0.isLabel());
38:       assertFalse(node0.isContinue());
39:       assertFalse(node0.isNot());
40:       assertFalse(node0.isObjectLit());
41:       assertEquals((-1), node0.getSourcePosition());
42:       assertFalse(node0.isAnd());
43:       assertFalse(node0.isLabelName());
44:       assertFalse(node0.isHook());
45:       assertFalse(node0.isThrow());
46:       assertFalse(node0.isFalse());
47:       assertFalse(node0.isBlock());
48:       assertEquals((-1), node0.getCharno());
49:       assertFalse(node0.isSetterDef());
50:       assertFalse(node0.isInc());
51:       assertFalse(node0.isThis());
52:       assertFalse(node0.isCase());
53:       assertFalse(node0.isInstanceOf());
54:       assertFalse(node0.isIn());
55:       assertFalse(node0.isCatch());
56:       assertEquals(39, node0.getType());
57:       assertFalse(node0.hasMoreThanOneChild());
58:       assertFalse(node0.isWith());
59:       assertFalse(node0.isIf());
60:       assertFalse(node0.isNE());
61:       assertEquals((-1), node0.getLineno());
62:       assertFalse(node0.isArrayLit());
63:       assertFalse(node0.isDebugger());
64:       assertFalse(node0.isFunction());
65:       assertFalse(node0.isRegExp());
66:       assertFalse(node0.isGetterDef());
67:       assertFalse(node0.isDefaultCase());
68:       assertFalse(node0.isFor());
69:       assertFalse(node0.isEmpty());
70:       assertTrue(node0.isNumber());
71:       assertFalse(node0.isTry());
72:       assertEquals(0, node0.getChildCount());
73:       assertFalse(node0.isParamList());
74:       assertFalse(node0.isStringKey());
75:       assertFalse(node0.isSwitch());
76:       assertFalse(node0.isCall());
77:       assertFalse(node0.isVar());
78:       assertFalse(node0.isAdd());
79:       assertFalse(node0.isString());
80:       assertFalse(node0.isWhile());
81:       assertFalse(node0.isNew());
82:       assertFalse(node0.isGetProp());
83:       assertFalse(node0.isDo());
84:       assertFalse(node0.isReturn());
85:       assertFalse(node0.isComma());
86:       assertFalse(node0.isOr());
87:       assertFalse(node0.isNull());
88:       assertFalse(node0.isTypeOf());
89:       assertFalse(node0.isBreak());
90:       assertFalse(node0.isTrue());
91:       assertFalse(node0.isExprResult());
92:       assertFalse(node0.isName());
93:       assertFalse(node0.isGetElem());
94:       assertFalse(node0.isDelProp());
95:       assertFalse(node0.isVoid());
96:       assertNotNull(node0);
97:       assertEquals(1, Node.DECR_FLAG);
98:       assertEquals(46, Node.IS_NAMESPACE);
99:       assertEquals(12, Node.COLUMN_BITS);
100:       assertEquals(30, Node.VAR_ARGS_NAME);
101:       assertEquals(51, Node.STATIC_SOURCE_FILE);
102:       assertEquals(54, Node.SLASH_V);
103:       assertEquals(56, Node.CHANGE_TIME);
104:       assertEquals(49, Node.DIRECT_EVAL);
105:       assertEquals(37, Node.OPT_ARG_NAME);
106:       assertEquals(40, Node.ORIGINALNAME_PROP);
107:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
108:       assertEquals(29, Node.JSDOC_INFO_PROP);
109:       assertEquals(47, Node.IS_DISPATCHER);
110:       assertEquals(57, Node.REFLECTED_OBJECT);
111:       assertEquals(2, Node.POST_FLAG);
112:       assertEquals(8, Node.FLAG_NO_THROWS);
113:       assertEquals(39, Node.EMPTY_BLOCK);
114:       assertEquals(53, Node.INPUT_ID);
115:       assertEquals(52, Node.LENGTH);
116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
118:       assertEquals(57, Node.LAST_PROP);
119:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
120:       assertEquals(55, Node.INFERRED_FUNCTION);
121:       assertEquals(4095, Node.COLUMN_MASK);
122:       assertEquals(36, Node.QUOTED_PROP);
123:       assertEquals(48, Node.DIRECTIVES);
124:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
125:       assertEquals(43, Node.IS_CONSTANT_NAME);
126:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
127:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
128:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
129:       assertEquals(50, Node.FREE_CALL);
130:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
131:       assertEquals(32, Node.INCRDECR_PROP);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       
134:       Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
135:       assertFalse(node1.equals((Object)node0));
136:       assertFalse(node1.isNE());
137:       assertFalse(node1.isIf());
138:       assertFalse(node1.isEmpty());
139:       assertFalse(node1.isDelProp());
140:       assertFalse(node1.isFor());
141:       assertFalse(node1.isSwitch());
142:       assertFalse(node1.isFunction());
143:       assertFalse(node1.isString());
144:       assertFalse(node1.isTry());
145:       assertFalse(node1.isCase());
146:       assertFalse(node1.isArrayLit());
147:       assertFalse(node1.isGetterDef());
148:       assertFalse(node1.isDebugger());
149:       assertEquals(131072, node1.getSourcePosition());
150:       assertFalse(node1.isSetterDef());
151:       assertFalse(node1.isThis());
152:       assertFalse(node1.isCatch());
153:       assertFalse(node1.isFalse());
154:       assertFalse(node1.isThrow());
155:       assertFalse(node1.isInstanceOf());
156:       assertFalse(node1.isWith());
157:       assertFalse(node1.isHook());
158:       assertFalse(node1.isBlock());
159:       assertFalse(node1.isInc());
160:       assertEquals(0, node1.getCharno());
161:       assertFalse(node1.isRegExp());
162:       assertFalse(node1.isIn());
163:       assertFalse(node1.isTypeOf());
164:       assertFalse(node1.isNumber());
165:       assertFalse(node1.isAssignAdd());
166:       assertFalse(node1.isLabelName());
167:       assertFalse(node1.isGetElem());
168:       assertEquals(32, node1.getLineno());
169:       assertFalse(node1.isCast());
170:       assertFalse(node1.hasMoreThanOneChild());
171:       assertFalse(node1.isContinue());
172:       assertFalse(node1.isReturn());
173:       assertFalse(node1.isAssign());
174:       assertFalse(node1.isDec());
175:       assertFalse(node1.isLabel());
176:       assertFalse(node1.hasChildren());
177:       assertFalse(node1.isScript());
178:       assertFalse(node1.isWhile());
179:       assertFalse(node1.hasOneChild());
180:       assertEquals((-1122), node1.getType());
181:       assertFalse(node1.isObjectLit());
182:       assertFalse(node1.isStringKey());
183:       assertFalse(node1.isAnd());
184:       assertFalse(node1.isNot());
185:       assertFalse(node1.isParamList());
186:       assertFalse(node1.isComma());
187:       assertFalse(node1.isNull());
188:       assertFalse(node1.isName());
189:       assertFalse(node1.isGetProp());
190:       assertFalse(node1.isBreak());
191:       assertFalse(node1.isVar());
192:       assertFalse(node1.isCall());
193:       assertEquals(0, node1.getChildCount());
194:       assertFalse(node1.isTrue());
195:       assertFalse(node1.isExprResult());
196:       assertFalse(node1.isVoid());
197:       assertFalse(node1.isDefaultCase());
198:       assertFalse(node1.isDo());
199:       assertFalse(node1.isAdd());
200:       assertFalse(node1.isNew());
201:       assertFalse(node1.isOr());
202:       assertNotNull(node1);
203:       assertEquals(52, Node.LENGTH);
204:       assertEquals(40, Node.ORIGINALNAME_PROP);
205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
206:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
207:       assertEquals(49, Node.DIRECT_EVAL);
208:       assertEquals(50, Node.FREE_CALL);
209:       assertEquals(51, Node.STATIC_SOURCE_FILE);
210:       assertEquals(46, Node.IS_NAMESPACE);
211:       assertEquals(54, Node.SLASH_V);
212:       assertEquals(57, Node.REFLECTED_OBJECT);
213:       assertEquals(8, Node.FLAG_NO_THROWS);
214:       assertEquals(55, Node.INFERRED_FUNCTION);
215:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
216:       assertEquals(39, Node.EMPTY_BLOCK);
217:       assertEquals(30, Node.VAR_ARGS_NAME);
218:       assertEquals(57, Node.LAST_PROP);
219:       assertEquals(2, Node.POST_FLAG);
220:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
221:       assertEquals(47, Node.IS_DISPATCHER);
222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
224:       assertEquals(53, Node.INPUT_ID);
225:       assertEquals(29, Node.JSDOC_INFO_PROP);
226:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
227:       assertEquals(43, Node.IS_CONSTANT_NAME);
228:       assertEquals(56, Node.CHANGE_TIME);
229:       assertEquals(36, Node.QUOTED_PROP);
230:       assertEquals(48, Node.DIRECTIVES);
231:       assertEquals(32, Node.INCRDECR_PROP);
232:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
233:       assertEquals(4095, Node.COLUMN_MASK);
234:       assertEquals(37, Node.OPT_ARG_NAME);
235:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
236:       assertEquals(1, Node.DECR_FLAG);
237:       assertEquals(12, Node.COLUMN_BITS);
238:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
239:       
240:       Object object0 = node1.getProp(0);
241:       assertFalse(node1.equals((Object)node0));
242:       assertFalse(node1.isNE());
243:       assertFalse(node1.isIf());
244:       assertFalse(node1.isEmpty());
245:       assertFalse(node1.isDelProp());
246:       assertFalse(node1.isFor());
247:       assertFalse(node1.isSwitch());
248:       assertFalse(node1.isFunction());
249:       assertFalse(node1.isString());
250:       assertFalse(node1.isTry());
251:       assertFalse(node1.isCase());
252:       assertFalse(node1.isArrayLit());
253:       assertFalse(node1.isGetterDef());
254:       assertFalse(node1.isDebugger());
255:       assertEquals(131072, node1.getSourcePosition());
256:       assertFalse(node1.isSetterDef());
257:       assertFalse(node1.isThis());
258:       assertFalse(node1.isCatch());
259:       assertFalse(node1.isFalse());
260:       assertFalse(node1.isThrow());
261:       assertFalse(node1.isInstanceOf());
262:       assertFalse(node1.isWith());
263:       assertFalse(node1.isHook());
264:       assertFalse(node1.isBlock());
265:       assertFalse(node1.isInc());
266:       assertEquals(0, node1.getCharno());
267:       assertFalse(node1.isRegExp());
268:       assertFalse(node1.isIn());
269:       assertFalse(node1.isTypeOf());
270:       assertFalse(node1.isNumber());
271:       assertFalse(node1.isAssignAdd());
272:       assertFalse(node1.isLabelName());
273:       assertFalse(node1.isGetElem());
274:       assertEquals(32, node1.getLineno());
275:       assertFalse(node1.isCast());
276:       assertFalse(node1.hasMoreThanOneChild());
277:       assertFalse(node1.isContinue());
278:       assertFalse(node1.isReturn());
279:       assertFalse(node1.isAssign());
280:       assertFalse(node1.isDec());
281:       assertFalse(node1.isLabel());
282:       assertFalse(node1.hasChildren());
283:       assertFalse(node1.isScript());
284:       assertFalse(node1.isWhile());
285:       assertFalse(node1.hasOneChild());
286:       assertEquals((-1122), node1.getType());
287:       assertFalse(node1.isObjectLit());
288:       assertFalse(node1.isStringKey());
289:       assertFalse(node1.isAnd());
290:       assertFalse(node1.isNot());
291:       assertFalse(node1.isParamList());
292:       assertFalse(node1.isComma());
293:       assertFalse(node1.isNull());
294:       assertFalse(node1.isName());
295:       assertFalse(node1.isGetProp());
296:       assertFalse(node1.isBreak());
297:       assertFalse(node1.isVar());
298:       assertFalse(node1.isCall());
299:       assertEquals(0, node1.getChildCount());
300:       assertFalse(node1.isTrue());
301:       assertFalse(node1.isExprResult());
302:       assertFalse(node1.isVoid());
303:       assertFalse(node1.isDefaultCase());
304:       assertFalse(node1.isDo());
305:       assertFalse(node1.isAdd());
306:       assertFalse(node1.isNew());
307:       assertFalse(node1.isOr());
308:       assertNull(object0);
309:       assertEquals(52, Node.LENGTH);
310:       assertEquals(40, Node.ORIGINALNAME_PROP);
311:       assertEquals(15, Node.NO_SIDE_EFFECTS);
312:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
313:       assertEquals(49, Node.DIRECT_EVAL);
314:       assertEquals(50, Node.FREE_CALL);
315:       assertEquals(51, Node.STATIC_SOURCE_FILE);
316:       assertEquals(46, Node.IS_NAMESPACE);
317:       assertEquals(54, Node.SLASH_V);
318:       assertEquals(57, Node.REFLECTED_OBJECT);
319:       assertEquals(8, Node.FLAG_NO_THROWS);
320:       assertEquals(55, Node.INFERRED_FUNCTION);
321:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
322:       assertEquals(39, Node.EMPTY_BLOCK);
323:       assertEquals(30, Node.VAR_ARGS_NAME);
324:       assertEquals(57, Node.LAST_PROP);
325:       assertEquals(2, Node.POST_FLAG);
326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
327:       assertEquals(47, Node.IS_DISPATCHER);
328:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
329:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
330:       assertEquals(53, Node.INPUT_ID);
331:       assertEquals(29, Node.JSDOC_INFO_PROP);
332:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
333:       assertEquals(43, Node.IS_CONSTANT_NAME);
334:       assertEquals(56, Node.CHANGE_TIME);
335:       assertEquals(36, Node.QUOTED_PROP);
336:       assertEquals(48, Node.DIRECTIVES);
337:       assertEquals(32, Node.INCRDECR_PROP);
338:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
339:       assertEquals(4095, Node.COLUMN_MASK);
340:       assertEquals(37, Node.OPT_ARG_NAME);
341:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
342:       assertEquals(1, Node.DECR_FLAG);
343:       assertEquals(12, Node.COLUMN_BITS);
344:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
345:       
346:       Node node2 = Node.newString(46, "UNKNOWN");
347:       assertFalse(node2.equals((Object)node0));
348:       assertFalse(node2.equals((Object)node1));
349:       assertNotSame(node2, node1);
350:       assertFalse(node2.isTrue());
351:       assertFalse(node2.isDebugger());
352:       assertFalse(node2.isVoid());
353:       assertFalse(node2.isFunction());
354:       assertFalse(node2.isRegExp());
355:       assertFalse(node2.isCatch());
356:       assertFalse(node2.isIf());
357:       assertFalse(node2.isDelProp());
358:       assertFalse(node2.isArrayLit());
359:       assertFalse(node2.isSetterDef());
360:       assertFalse(node2.isNE());
361:       assertFalse(node2.isNull());
362:       assertFalse(node2.isIn());
363:       assertEquals(0, node2.getChildCount());
364:       assertFalse(node2.isEmpty());
365:       assertFalse(node2.isVar());
366:       assertFalse(node2.isDefaultCase());
367:       assertFalse(node2.isNew());
368:       assertFalse(node2.isAdd());
369:       assertFalse(node2.isString());
370:       assertFalse(node2.isContinue());
371:       assertFalse(node2.isCall());
372:       assertFalse(node2.isFalse());
373:       assertFalse(node2.isBreak());
374:       assertFalse(node2.isName());
375:       assertFalse(node2.isGetProp());
376:       assertFalse(node2.hasChildren());
377:       assertFalse(node2.isReturn());
378:       assertFalse(node2.isTypeOf());
379:       assertFalse(node2.isAssign());
380:       assertEquals((-1), node2.getSourcePosition());
381:       assertFalse(node2.isComma());
382:       assertFalse(node2.isDec());
383:       assertFalse(node2.isObjectLit());
384:       assertFalse(node2.isWhile());
385:       assertFalse(node2.isExprResult());
386:       assertFalse(node2.isScript());
387:       assertFalse(node2.isWith());
388:       assertFalse(node2.isNot());
389:       assertFalse(node2.isAnd());
390:       assertFalse(node2.isGetElem());
391:       assertFalse(node2.isCast());
392:       assertFalse(node2.isInstanceOf());
393:       assertFalse(node2.isLabelName());
394:       assertFalse(node2.isAssignAdd());
395:       assertFalse(node2.isOr());
396:       assertFalse(node2.isLabel());
397:       assertFalse(node2.isThrow());
398:       assertFalse(node2.isDo());
399:       assertEquals(46, node2.getType());
400:       assertEquals((-1), node2.getCharno());
401:       assertFalse(node2.isBlock());
402:       assertFalse(node2.isInc());
403:       assertFalse(node2.isSwitch());
404:       assertFalse(node2.isHook());
405:       assertFalse(node2.hasMoreThanOneChild());
406:       assertFalse(node2.isStringKey());
407:       assertEquals((-1), node2.getLineno());
408:       assertFalse(node2.isThis());
409:       assertFalse(node2.isParamList());
410:       assertFalse(node2.isGetterDef());
411:       assertFalse(node2.isNumber());
412:       assertFalse(node2.isFor());
413:       assertFalse(node2.isCase());
414:       assertFalse(node2.isTry());
415:       assertFalse(node2.hasOneChild());
416:       assertNotNull(node2);
417:       assertEquals(32, Node.INCRDECR_PROP);
418:       assertEquals(46, Node.IS_NAMESPACE);
419:       assertEquals(2, Node.POST_FLAG);
420:       assertEquals(12, Node.COLUMN_BITS);
421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
422:       assertEquals(47, Node.IS_DISPATCHER);
423:       assertEquals(29, Node.JSDOC_INFO_PROP);
424:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
425:       assertEquals(57, Node.LAST_PROP);
426:       assertEquals(1, Node.DECR_FLAG);
427:       assertEquals(15, Node.NO_SIDE_EFFECTS);
428:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
429:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
430:       assertEquals(52, Node.LENGTH);
431:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
432:       assertEquals(36, Node.QUOTED_PROP);
433:       assertEquals(57, Node.REFLECTED_OBJECT);
434:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
435:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
436:       assertEquals(49, Node.DIRECT_EVAL);
437:       assertEquals(56, Node.CHANGE_TIME);
438:       assertEquals(37, Node.OPT_ARG_NAME);
439:       assertEquals(48, Node.DIRECTIVES);
440:       assertEquals(4095, Node.COLUMN_MASK);
441:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
442:       assertEquals(8, Node.FLAG_NO_THROWS);
443:       assertEquals(50, Node.FREE_CALL);
444:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
445:       assertEquals(39, Node.EMPTY_BLOCK);
446:       assertEquals(55, Node.INFERRED_FUNCTION);
447:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
448:       assertEquals(53, Node.INPUT_ID);
449:       assertEquals(54, Node.SLASH_V);
450:       assertEquals(30, Node.VAR_ARGS_NAME);
451:       assertEquals(43, Node.IS_CONSTANT_NAME);
452:       assertEquals(40, Node.ORIGINALNAME_PROP);
453:       
454:       boolean boolean0 = node2.isSyntheticBlock();
455:       assertFalse(node2.equals((Object)node0));
456:       assertFalse(node2.equals((Object)node1));
457:       assertNotSame(node2, node1);
458:       assertFalse(node2.isTrue());
459:       assertFalse(node2.isDebugger());
460:       assertFalse(node2.isVoid());
461:       assertFalse(node2.isFunction());
462:       assertFalse(node2.isRegExp());
463:       assertFalse(node2.isCatch());
464:       assertFalse(node2.isIf());
465:       assertFalse(node2.isDelProp());
466:       assertFalse(node2.isArrayLit());
467:       assertFalse(node2.isSetterDef());
468:       assertFalse(node2.isNE());
469:       assertFalse(node2.isNull());
470:       assertFalse(node2.isIn());
471:       assertEquals(0, node2.getChildCount());
472:       assertFalse(node2.isEmpty());
473:       assertFalse(node2.isVar());
474:       assertFalse(node2.isDefaultCase());
475:       assertFalse(node2.isNew());
476:       assertFalse(node2.isAdd());
477:       assertFalse(node2.isString());
478:       assertFalse(node2.isContinue());
479:       assertFalse(node2.isCall());
480:       assertFalse(node2.isFalse());
481:       assertFalse(node2.isBreak());
482:       assertFalse(node2.isName());
483:       assertFalse(node2.isGetProp());
484:       assertFalse(node2.hasChildren());
485:       assertFalse(node2.isReturn());
486:       assertFalse(node2.isTypeOf());
487:       assertFalse(node2.isAssign());
488:       assertEquals((-1), node2.getSourcePosition());
489:       assertFalse(node2.isComma());
490:       assertFalse(node2.isDec());
491:       assertFalse(node2.isObjectLit());
492:       assertFalse(node2.isWhile());
493:       assertFalse(node2.isExprResult());
494:       assertFalse(node2.isScript());
495:       assertFalse(node2.isWith());
496:       assertFalse(node2.isNot());
497:       assertFalse(node2.isAnd());
498:       assertFalse(node2.isGetElem());
499:       assertFalse(node2.isCast());
500:       assertFalse(node2.isInstanceOf());
501:       assertFalse(node2.isLabelName());
502:       assertFalse(node2.isAssignAdd());
503:       assertFalse(node2.isOr());
504:       assertFalse(node2.isLabel());
505:       assertFalse(node2.isThrow());
506:       assertFalse(node2.isDo());
507:       assertEquals(46, node2.getType());
508:       assertEquals((-1), node2.getCharno());
509:       assertFalse(node2.isBlock());
510:       assertFalse(node2.isInc());
511:       assertFalse(node2.isSwitch());
512:       assertFalse(node2.isHook());
513:       assertFalse(node2.hasMoreThanOneChild());
514:       assertFalse(node2.isStringKey());
515:       assertEquals((-1), node2.getLineno());
516:       assertFalse(node2.isThis());
517:       assertFalse(node2.isParamList());
518:       assertFalse(node2.isGetterDef());
519:       assertFalse(node2.isNumber());
520:       assertFalse(node2.isFor());
521:       assertFalse(node2.isCase());
522:       assertFalse(node2.isTry());
523:       assertFalse(node2.hasOneChild());
524:       assertFalse(boolean0);
525:       assertEquals(32, Node.INCRDECR_PROP);
526:       assertEquals(46, Node.IS_NAMESPACE);
527:       assertEquals(2, Node.POST_FLAG);
528:       assertEquals(12, Node.COLUMN_BITS);
529:       assertEquals(51, Node.STATIC_SOURCE_FILE);
530:       assertEquals(47, Node.IS_DISPATCHER);
531:       assertEquals(29, Node.JSDOC_INFO_PROP);
532:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
533:       assertEquals(57, Node.LAST_PROP);
534:       assertEquals(1, Node.DECR_FLAG);
535:       assertEquals(15, Node.NO_SIDE_EFFECTS);
536:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
537:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
538:       assertEquals(52, Node.LENGTH);
539:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
540:       assertEquals(36, Node.QUOTED_PROP);
541:       assertEquals(57, Node.REFLECTED_OBJECT);
542:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
543:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
544:       assertEquals(49, Node.DIRECT_EVAL);
545:       assertEquals(56, Node.CHANGE_TIME);
546:       assertEquals(37, Node.OPT_ARG_NAME);
547:       assertEquals(48, Node.DIRECTIVES);
548:       assertEquals(4095, Node.COLUMN_MASK);
549:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
550:       assertEquals(8, Node.FLAG_NO_THROWS);
551:       assertEquals(50, Node.FREE_CALL);
552:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
553:       assertEquals(39, Node.EMPTY_BLOCK);
554:       assertEquals(55, Node.INFERRED_FUNCTION);
555:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
556:       assertEquals(53, Node.INPUT_ID);
557:       assertEquals(54, Node.SLASH_V);
558:       assertEquals(30, Node.VAR_ARGS_NAME);
559:       assertEquals(43, Node.IS_CONSTANT_NAME);
560:       assertEquals(40, Node.ORIGINALNAME_PROP);
561:       
562:       node0.setLineno(39);
563:       assertFalse(node0.equals((Object)node1));
564:       assertFalse(node0.equals((Object)node2));
565:       assertFalse(node0.hasOneChild());
566:       assertFalse(node0.isCast());
567:       assertFalse(node0.isAssign());
568:       assertFalse(node0.isDec());
569:       assertFalse(node0.hasChildren());
570:       assertFalse(node0.isScript());
571:       assertFalse(node0.isAssignAdd());
572:       assertFalse(node0.isLabel());
573:       assertFalse(node0.isContinue());
574:       assertFalse(node0.isNot());
575:       assertFalse(node0.isObjectLit());
576:       assertFalse(node0.isAnd());
577:       assertFalse(node0.isLabelName());
578:       assertFalse(node0.isHook());
579:       assertFalse(node0.isThrow());
580:       assertFalse(node0.isFalse());
581:       assertFalse(node0.isBlock());
582:       assertFalse(node0.isSetterDef());
583:       assertFalse(node0.isInc());
584:       assertFalse(node0.isThis());
585:       assertEquals(159744, node0.getSourcePosition());
586:       assertFalse(node0.isCase());
587:       assertFalse(node0.isInstanceOf());
588:       assertFalse(node0.isIn());
589:       assertFalse(node0.isCatch());
590:       assertEquals(39, node0.getType());
591:       assertFalse(node0.hasMoreThanOneChild());
592:       assertFalse(node0.isWith());
593:       assertFalse(node0.isIf());
594:       assertEquals(0, node0.getCharno());
595:       assertFalse(node0.isNE());
596:       assertFalse(node0.isArrayLit());
597:       assertFalse(node0.isDebugger());
598:       assertFalse(node0.isFunction());
599:       assertFalse(node0.isRegExp());
600:       assertFalse(node0.isGetterDef());
601:       assertFalse(node0.isDefaultCase());
602:       assertFalse(node0.isFor());
603:       assertFalse(node0.isEmpty());
604:       assertTrue(node0.isNumber());
605:       assertFalse(node0.isTry());
606:       assertEquals(0, node0.getChildCount());
607:       assertFalse(node0.isParamList());
608:       assertFalse(node0.isStringKey());
609:       assertFalse(node0.isSwitch());
610:       assertFalse(node0.isCall());
611:       assertFalse(node0.isVar());
612:       assertFalse(node0.isAdd());
613:       assertEquals(39, node0.getLineno());
614:       assertFalse(node0.isString());
615:       assertFalse(node0.isWhile());
616:       assertFalse(node0.isNew());
617:       assertFalse(node0.isGetProp());
618:       assertFalse(node0.isDo());
619:       assertFalse(node0.isReturn());
620:       assertFalse(node0.isComma());
621:       assertFalse(node0.isOr());
622:       assertFalse(node0.isNull());
623:       assertFalse(node0.isTypeOf());
624:       assertFalse(node0.isBreak());
625:       assertFalse(node0.isTrue());
626:       assertFalse(node0.isExprResult());
627:       assertFalse(node0.isName());
628:       assertFalse(node0.isGetElem());
629:       assertFalse(node0.isDelProp());
630:       assertFalse(node0.isVoid());
631:       assertEquals(1, Node.DECR_FLAG);
632:       assertEquals(46, Node.IS_NAMESPACE);
633:       assertEquals(12, Node.COLUMN_BITS);
634:       assertEquals(30, Node.VAR_ARGS_NAME);
635:       assertEquals(51, Node.STATIC_SOURCE_FILE);
636:       assertEquals(54, Node.SLASH_V);
637:       assertEquals(56, Node.CHANGE_TIME);
638:       assertEquals(49, Node.DIRECT_EVAL);
639:       assertEquals(37, Node.OPT_ARG_NAME);
640:       assertEquals(40, Node.ORIGINALNAME_PROP);
641:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
642:       assertEquals(29, Node.JSDOC_INFO_PROP);
643:       assertEquals(47, Node.IS_DISPATCHER);
644:       assertEquals(57, Node.REFLECTED_OBJECT);
645:       assertEquals(2, Node.POST_FLAG);
646:       assertEquals(8, Node.FLAG_NO_THROWS);
647:       assertEquals(39, Node.EMPTY_BLOCK);
648:       assertEquals(53, Node.INPUT_ID);
649:       assertEquals(52, Node.LENGTH);
650:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
651:       assertEquals(15, Node.NO_SIDE_EFFECTS);
652:       assertEquals(57, Node.LAST_PROP);
653:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
654:       assertEquals(55, Node.INFERRED_FUNCTION);
655:       assertEquals(4095, Node.COLUMN_MASK);
656:       assertEquals(36, Node.QUOTED_PROP);
657:       assertEquals(48, Node.DIRECTIVES);
658:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
659:       assertEquals(43, Node.IS_CONSTANT_NAME);
660:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
661:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
662:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
663:       assertEquals(50, Node.FREE_CALL);
664:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
665:       assertEquals(32, Node.INCRDECR_PROP);
666:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
667:       
668:       node0.putProp(4095, (Object) null);
669:       assertFalse(node0.equals((Object)node1));
670:       assertFalse(node0.equals((Object)node2));
671:       assertFalse(node0.hasOneChild());
672:       assertFalse(node0.isCast());
673:       assertFalse(node0.isAssign());
674:       assertFalse(node0.isDec());
675:       assertFalse(node0.hasChildren());
676:       assertFalse(node0.isScript());
677:       assertFalse(node0.isAssignAdd());
678:       assertFalse(node0.isLabel());
679:       assertFalse(node0.isContinue());
680:       assertFalse(node0.isNot());
681:       assertFalse(node0.isObjectLit());
682:       assertFalse(node0.isAnd());
683:       assertFalse(node0.isLabelName());
684:       assertFalse(node0.isHook());
685:       assertFalse(node0.isThrow());
686:       assertFalse(node0.isFalse());
687:       assertFalse(node0.isBlock());
688:       assertFalse(node0.isSetterDef());
689:       assertFalse(node0.isInc());
690:       assertFalse(node0.isThis());
691:       assertEquals(159744, node0.getSourcePosition());
692:       assertFalse(node0.isCase());
693:       assertFalse(node0.isInstanceOf());
694:       assertFalse(node0.isIn());
695:       assertFalse(node0.isCatch());
696:       assertEquals(39, node0.getType());
697:       assertFalse(node0.hasMoreThanOneChild());
698:       assertFalse(node0.isWith());
699:       assertFalse(node0.isIf());
700:       assertEquals(0, node0.getCharno());
701:       assertFalse(node0.isNE());
702:       assertFalse(node0.isArrayLit());
703:       assertFalse(node0.isDebugger());
704:       assertFalse(node0.isFunction());
705:       assertFalse(node0.isRegExp());
706:       assertFalse(node0.isGetterDef());
707:       assertFalse(node0.isDefaultCase());
708:       assertFalse(node0.isFor());
709:       assertFalse(node0.isEmpty());
710:       assertTrue(node0.isNumber());
711:       assertFalse(node0.isTry());
712:       assertEquals(0, node0.getChildCount());
713:       assertFalse(node0.isParamList());
714:       assertFalse(node0.isStringKey());
715:       assertFalse(node0.isSwitch());
716:       assertFalse(node0.isCall());
717:       assertFalse(node0.isVar());
718:       assertFalse(node0.isAdd());
719:       assertEquals(39, node0.getLineno());
720:       assertFalse(node0.isString());
721:       assertFalse(node0.isWhile());
722:       assertFalse(node0.isNew());
723:       assertFalse(node0.isGetProp());
724:       assertFalse(node0.isDo());
725:       assertFalse(node0.isReturn());
726:       assertFalse(node0.isComma());
727:       assertFalse(node0.isOr());
728:       assertFalse(node0.isNull());
729:       assertFalse(node0.isTypeOf());
730:       assertFalse(node0.isBreak());
731:       assertFalse(node0.isTrue());
732:       assertFalse(node0.isExprResult());
733:       assertFalse(node0.isName());
734:       assertFalse(node0.isGetElem());
735:       assertFalse(node0.isDelProp());
736:       assertFalse(node0.isVoid());
737:       assertEquals(1, Node.DECR_FLAG);
738:       assertEquals(46, Node.IS_NAMESPACE);
739:       assertEquals(12, Node.COLUMN_BITS);
740:       assertEquals(30, Node.VAR_ARGS_NAME);
741:       assertEquals(51, Node.STATIC_SOURCE_FILE);
742:       assertEquals(54, Node.SLASH_V);
743:       assertEquals(56, Node.CHANGE_TIME);
744:       assertEquals(49, Node.DIRECT_EVAL);
745:       assertEquals(37, Node.OPT_ARG_NAME);
746:       assertEquals(40, Node.ORIGINALNAME_PROP);
747:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
748:       assertEquals(29, Node.JSDOC_INFO_PROP);
749:       assertEquals(47, Node.IS_DISPATCHER);
750:       assertEquals(57, Node.REFLECTED_OBJECT);
751:       assertEquals(2, Node.POST_FLAG);
752:       assertEquals(8, Node.FLAG_NO_THROWS);
753:       assertEquals(39, Node.EMPTY_BLOCK);
754:       assertEquals(53, Node.INPUT_ID);
755:       assertEquals(52, Node.LENGTH);
756:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
757:       assertEquals(15, Node.NO_SIDE_EFFECTS);
758:       assertEquals(57, Node.LAST_PROP);
759:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
760:       assertEquals(55, Node.INFERRED_FUNCTION);
761:       assertEquals(4095, Node.COLUMN_MASK);
762:       assertEquals(36, Node.QUOTED_PROP);
763:       assertEquals(48, Node.DIRECTIVES);
764:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
765:       assertEquals(43, Node.IS_CONSTANT_NAME);
766:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
767:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
768:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
769:       assertEquals(50, Node.FREE_CALL);
770:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
771:       assertEquals(32, Node.INCRDECR_PROP);
772:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
773:       
774:       int int0 = node0.getIndexOfChild(node1);
775:       assertFalse(node0.equals((Object)node1));
776:       assertFalse(node0.equals((Object)node2));
777:       assertFalse(node1.equals((Object)node0));
778:       assertFalse(node1.equals((Object)node2));
779:       assertNotSame(node1, node2);
780:       assertFalse(node0.hasOneChild());
781:       assertFalse(node0.isCast());
782:       assertFalse(node0.isAssign());
783:       assertFalse(node0.isDec());
784:       assertFalse(node0.hasChildren());
785:       assertFalse(node0.isScript());
786:       assertFalse(node0.isAssignAdd());
787:       assertFalse(node0.isLabel());
788:       assertFalse(node0.isContinue());
789:       assertFalse(node0.isNot());
790:       assertFalse(node0.isObjectLit());
791:       assertFalse(node0.isAnd());
792:       assertFalse(node0.isLabelName());
793:       assertFalse(node0.isHook());
794:       assertFalse(node0.isThrow());
795:       assertFalse(node0.isFalse());
796:       assertFalse(node0.isBlock());
797:       assertFalse(node0.isSetterDef());
798:       assertFalse(node0.isInc());
799:       assertFalse(node0.isThis());
800:       assertEquals(159744, node0.getSourcePosition());
801:       assertFalse(node0.isCase());
802:       assertFalse(node0.isInstanceOf());
803:       assertFalse(node0.isIn());
804:       assertFalse(node0.isCatch());
805:       assertEquals(39, node0.getType());
806:       assertFalse(node0.hasMoreThanOneChild());
807:       assertFalse(node0.isWith());
808:       assertFalse(node0.isIf());
809:       assertEquals(0, node0.getCharno());
810:       assertFalse(node0.isNE());
811:       assertFalse(node0.isArrayLit());
812:       assertFalse(node0.isDebugger());
813:       assertFalse(node0.isFunction());
814:       assertFalse(node0.isRegExp());
815:       assertFalse(node0.isGetterDef());
816:       assertFalse(node0.isDefaultCase());
817:       assertFalse(node0.isFor());
818:       assertFalse(node0.isEmpty());
819:       assertTrue(node0.isNumber());
820:       assertFalse(node0.isTry());
821:       assertEquals(0, node0.getChildCount());
822:       assertFalse(node0.isParamList());
823:       assertFalse(node0.isStringKey());
824:       assertFalse(node0.isSwitch());
825:       assertFalse(node0.isCall());
826:       assertFalse(node0.isVar());
827:       assertFalse(node0.isAdd());
828:       assertEquals(39, node0.getLineno());
829:       assertFalse(node0.isString());
830:       assertFalse(node0.isWhile());
831:       assertFalse(node0.isNew());
832:       assertFalse(node0.isGetProp());
833:       assertFalse(node0.isDo());
834:       assertFalse(node0.isReturn());
835:       assertFalse(node0.isComma());
836:       assertFalse(node0.isOr());
837:       assertFalse(node0.isNull());
838:       assertFalse(node0.isTypeOf());
839:       assertFalse(node0.isBreak());
840:       assertFalse(node0.isTrue());
841:       assertFalse(node0.isExprResult());
842:       assertFalse(node0.isName());
843:       assertFalse(node0.isGetElem());
844:       assertFalse(node0.isDelProp());
845:       assertFalse(node0.isVoid());
846:       assertFalse(node1.isNE());
847:       assertFalse(node1.isIf());
848:       assertFalse(node1.isEmpty());
849:       assertFalse(node1.isDelProp());
850:       assertFalse(node1.isFor());
851:       assertFalse(node1.isSwitch());
852:       assertFalse(node1.isFunction());
853:       assertFalse(node1.isString());
854:       assertFalse(node1.isTry());
855:       assertFalse(node1.isCase());
856:       assertFalse(node1.isArrayLit());
857:       assertFalse(node1.isGetterDef());
858:       assertFalse(node1.isDebugger());
859:       assertEquals(131072, node1.getSourcePosition());
860:       assertFalse(node1.isSetterDef());
861:       assertFalse(node1.isThis());
862:       assertFalse(node1.isCatch());
863:       assertFalse(node1.isFalse());
864:       assertFalse(node1.isThrow());
865:       assertFalse(node1.isInstanceOf());
866:       assertFalse(node1.isWith());
867:       assertFalse(node1.isHook());
868:       assertFalse(node1.isBlock());
869:       assertFalse(node1.isInc());
870:       assertEquals(0, node1.getCharno());
871:       assertFalse(node1.isRegExp());
872:       assertFalse(node1.isIn());
873:       assertFalse(node1.isTypeOf());
874:       assertFalse(node1.isNumber());
875:       assertFalse(node1.isAssignAdd());
876:       assertFalse(node1.isLabelName());
877:       assertFalse(node1.isGetElem());
878:       assertEquals(32, node1.getLineno());
879:       assertFalse(node1.isCast());
880:       assertFalse(node1.hasMoreThanOneChild());
881:       assertFalse(node1.isContinue());
882:       assertFalse(node1.isReturn());
883:       assertFalse(node1.isAssign());
884:       assertFalse(node1.isDec());
885:       assertFalse(node1.isLabel());
886:       assertFalse(node1.hasChildren());
887:       assertFalse(node1.isScript());
888:       assertFalse(node1.isWhile());
889:       assertFalse(node1.hasOneChild());
890:       assertEquals((-1122), node1.getType());
891:       assertFalse(node1.isObjectLit());
892:       assertFalse(node1.isStringKey());
893:       assertFalse(node1.isAnd());
894:       assertFalse(node1.isNot());
895:       assertFalse(node1.isParamList());
896:       assertFalse(node1.isComma());
897:       assertFalse(node1.isNull());
898:       assertFalse(node1.isName());
899:       assertFalse(node1.isGetProp());
900:       assertFalse(node1.isBreak());
901:       assertFalse(node1.isVar());
902:       assertFalse(node1.isCall());
903:       assertEquals(0, node1.getChildCount());
904:       assertFalse(node1.isTrue());
905:       assertFalse(node1.isExprResult());
906:       assertFalse(node1.isVoid());
907:       assertFalse(node1.isDefaultCase());
908:       assertFalse(node1.isDo());
909:       assertFalse(node1.isAdd());
910:       assertFalse(node1.isNew());
911:       assertFalse(node1.isOr());
912:       assertEquals((-1), int0);
913:       assertEquals(1, Node.DECR_FLAG);
914:       assertEquals(46, Node.IS_NAMESPACE);
915:       assertEquals(12, Node.COLUMN_BITS);
916:       assertEquals(30, Node.VAR_ARGS_NAME);
917:       assertEquals(51, Node.STATIC_SOURCE_FILE);
918:       assertEquals(54, Node.SLASH_V);
919:       assertEquals(56, Node.CHANGE_TIME);
920:       assertEquals(49, Node.DIRECT_EVAL);
921:       assertEquals(37, Node.OPT_ARG_NAME);
922:       assertEquals(40, Node.ORIGINALNAME_PROP);
923:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
924:       assertEquals(29, Node.JSDOC_INFO_PROP);
925:       assertEquals(47, Node.IS_DISPATCHER);
926:       assertEquals(57, Node.REFLECTED_OBJECT);
927:       assertEquals(2, Node.POST_FLAG);
928:       assertEquals(8, Node.FLAG_NO_THROWS);
929:       assertEquals(39, Node.EMPTY_BLOCK);
930:       assertEquals(53, Node.INPUT_ID);
931:       assertEquals(52, Node.LENGTH);
932:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
933:       assertEquals(15, Node.NO_SIDE_EFFECTS);
934:       assertEquals(57, Node.LAST_PROP);
935:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
936:       assertEquals(55, Node.INFERRED_FUNCTION);
937:       assertEquals(4095, Node.COLUMN_MASK);
938:       assertEquals(36, Node.QUOTED_PROP);
939:       assertEquals(48, Node.DIRECTIVES);
940:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
941:       assertEquals(43, Node.IS_CONSTANT_NAME);
942:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
943:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
944:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
945:       assertEquals(50, Node.FREE_CALL);
946:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
947:       assertEquals(32, Node.INCRDECR_PROP);
948:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
949:       assertEquals(52, Node.LENGTH);
950:       assertEquals(40, Node.ORIGINALNAME_PROP);
951:       assertEquals(15, Node.NO_SIDE_EFFECTS);
952:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
953:       assertEquals(49, Node.DIRECT_EVAL);
954:       assertEquals(50, Node.FREE_CALL);
955:       assertEquals(51, Node.STATIC_SOURCE_FILE);
956:       assertEquals(46, Node.IS_NAMESPACE);
957:       assertEquals(54, Node.SLASH_V);
958:       assertEquals(57, Node.REFLECTED_OBJECT);
959:       assertEquals(8, Node.FLAG_NO_THROWS);
960:       assertEquals(55, Node.INFERRED_FUNCTION);
961:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
962:       assertEquals(39, Node.EMPTY_BLOCK);
963:       assertEquals(30, Node.VAR_ARGS_NAME);
964:       assertEquals(57, Node.LAST_PROP);
965:       assertEquals(2, Node.POST_FLAG);
966:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
967:       assertEquals(47, Node.IS_DISPATCHER);
968:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
969:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
970:       assertEquals(53, Node.INPUT_ID);
971:       assertEquals(29, Node.JSDOC_INFO_PROP);
972:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
973:       assertEquals(43, Node.IS_CONSTANT_NAME);
974:       assertEquals(56, Node.CHANGE_TIME);
975:       assertEquals(36, Node.QUOTED_PROP);
976:       assertEquals(48, Node.DIRECTIVES);
977:       assertEquals(32, Node.INCRDECR_PROP);
978:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
979:       assertEquals(4095, Node.COLUMN_MASK);
980:       assertEquals(37, Node.OPT_ARG_NAME);
981:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
982:       assertEquals(1, Node.DECR_FLAG);
983:       assertEquals(12, Node.COLUMN_BITS);
984:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
985:       
986:       Iterable<Node> iterable0 = node0.children();
987:       assertFalse(node0.equals((Object)node1));
988:       assertFalse(node0.equals((Object)node2));
989:       assertFalse(node0.hasOneChild());
990:       assertFalse(node0.isCast());
991:       assertFalse(node0.isAssign());
992:       assertFalse(node0.isDec());
993:       assertFalse(node0.hasChildren());
994:       assertFalse(node0.isScript());
995:       assertFalse(node0.isAssignAdd());
996:       assertFalse(node0.isLabel());
997:       assertFalse(node0.isContinue());
998:       assertFalse(node0.isNot());
999:       assertFalse(node0.isObjectLit());
1000:       assertFalse(node0.isAnd());
1001:       assertFalse(node0.isLabelName());
1002:       assertFalse(node0.isHook());
1003:       assertFalse(node0.isThrow());
1004:       assertFalse(node0.isFalse());
1005:       assertFalse(node0.isBlock());
1006:       assertFalse(node0.isSetterDef());
1007:       assertFalse(node0.isInc());
1008:       assertFalse(node0.isThis());
1009:       assertEquals(159744, node0.getSourcePosition());
1010:       assertFalse(node0.isCase());
1011:       assertFalse(node0.isInstanceOf());
1012:       assertFalse(node0.isIn());
1013:       assertFalse(node0.isCatch());
1014:       assertEquals(39, node0.getType());
1015:       assertFalse(node0.hasMoreThanOneChild());
1016:       assertFalse(node0.isWith());
1017:       assertFalse(node0.isIf());
1018:       assertEquals(0, node0.getCharno());
1019:       assertFalse(node0.isNE());
1020:       assertFalse(node0.isArrayLit());
1021:       assertFalse(node0.isDebugger());
1022:       assertFalse(node0.isFunction());
1023:       assertFalse(node0.isRegExp());
1024:       assertFalse(node0.isGetterDef());
1025:       assertFalse(node0.isDefaultCase());
1026:       assertFalse(node0.isFor());
1027:       assertFalse(node0.isEmpty());
1028:       assertTrue(node0.isNumber());
1029:       assertFalse(node0.isTry());
1030:       assertEquals(0, node0.getChildCount());
1031:       assertFalse(node0.isParamList());
1032:       assertFalse(node0.isStringKey());
1033:       assertFalse(node0.isSwitch());
1034:       assertFalse(node0.isCall());
1035:       assertFalse(node0.isVar());
1036:       assertFalse(node0.isAdd());
1037:       assertEquals(39, node0.getLineno());
1038:       assertFalse(node0.isString());
1039:       assertFalse(node0.isWhile());
1040:       assertFalse(node0.isNew());
1041:       assertFalse(node0.isGetProp());
1042:       assertFalse(node0.isDo());
1043:       assertFalse(node0.isReturn());
1044:       assertFalse(node0.isComma());
1045:       assertFalse(node0.isOr());
1046:       assertFalse(node0.isNull());
1047:       assertFalse(node0.isTypeOf());
1048:       assertFalse(node0.isBreak());
1049:       assertFalse(node0.isTrue());
1050:       assertFalse(node0.isExprResult());
1051:       assertFalse(node0.isName());
1052:       assertFalse(node0.isGetElem());
1053:       assertFalse(node0.isDelProp());
1054:       assertFalse(node0.isVoid());
1055:       assertFalse(iterable0.contains(node0));
1056:       assertNotNull(iterable0);
1057:       assertEquals(1, Node.DECR_FLAG);
1058:       assertEquals(46, Node.IS_NAMESPACE);
1059:       assertEquals(12, Node.COLUMN_BITS);
1060:       assertEquals(30, Node.VAR_ARGS_NAME);
1061:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1062:       assertEquals(54, Node.SLASH_V);
1063:       assertEquals(56, Node.CHANGE_TIME);
1064:       assertEquals(49, Node.DIRECT_EVAL);
1065:       assertEquals(37, Node.OPT_ARG_NAME);
1066:       assertEquals(40, Node.ORIGINALNAME_PROP);
1067:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1068:       assertEquals(29, Node.JSDOC_INFO_PROP);
1069:       assertEquals(47, Node.IS_DISPATCHER);
1070:       assertEquals(57, Node.REFLECTED_OBJECT);
1071:       assertEquals(2, Node.POST_FLAG);
1072:       assertEquals(8, Node.FLAG_NO_THROWS);
1073:       assertEquals(39, Node.EMPTY_BLOCK);
1074:       assertEquals(53, Node.INPUT_ID);
1075:       assertEquals(52, Node.LENGTH);
1076:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1077:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1078:       assertEquals(57, Node.LAST_PROP);
1079:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1080:       assertEquals(55, Node.INFERRED_FUNCTION);
1081:       assertEquals(4095, Node.COLUMN_MASK);
1082:       assertEquals(36, Node.QUOTED_PROP);
1083:       assertEquals(48, Node.DIRECTIVES);
1084:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1085:       assertEquals(43, Node.IS_CONSTANT_NAME);
1086:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1087:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1088:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1089:       assertEquals(50, Node.FREE_CALL);
1090:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1091:       assertEquals(32, Node.INCRDECR_PROP);
1092:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1093:       
1094:       node1.putIntProp(57, 2);
1095:       assertFalse(node1.equals((Object)node0));
1096:       assertFalse(node1.equals((Object)node2));
1097:       assertNotSame(node1, node2);
1098:       assertFalse(node1.isNE());
1099:       assertFalse(node1.isIf());
1100:       assertFalse(node1.isEmpty());
1101:       assertFalse(node1.isDelProp());
1102:       assertFalse(node1.isFor());
1103:       assertFalse(node1.isSwitch());
1104:       assertFalse(node1.isFunction());
1105:       assertFalse(node1.isString());
1106:       assertFalse(node1.isTry());
1107:       assertFalse(node1.isCase());
1108:       assertFalse(node1.isArrayLit());
1109:       assertFalse(node1.isGetterDef());
1110:       assertFalse(node1.isDebugger());
1111:       assertEquals(131072, node1.getSourcePosition());
1112:       assertFalse(node1.isSetterDef());
1113:       assertFalse(node1.isThis());
1114:       assertFalse(node1.isCatch());
1115:       assertFalse(node1.isFalse());
1116:       assertFalse(node1.isThrow());
1117:       assertFalse(node1.isInstanceOf());
1118:       assertFalse(node1.isWith());
1119:       assertFalse(node1.isHook());
1120:       assertFalse(node1.isBlock());
1121:       assertFalse(node1.isInc());
1122:       assertEquals(0, node1.getCharno());
1123:       assertFalse(node1.isRegExp());
1124:       assertFalse(node1.isIn());
1125:       assertFalse(node1.isTypeOf());
1126:       assertFalse(node1.isNumber());
1127:       assertFalse(node1.isAssignAdd());
1128:       assertFalse(node1.isLabelName());
1129:       assertFalse(node1.isGetElem());
1130:       assertEquals(32, node1.getLineno());
1131:       assertFalse(node1.isCast());
1132:       assertFalse(node1.hasMoreThanOneChild());
1133:       assertFalse(node1.isContinue());
1134:       assertFalse(node1.isReturn());
1135:       assertFalse(node1.isAssign());
1136:       assertFalse(node1.isDec());
1137:       assertFalse(node1.isLabel());
1138:       assertFalse(node1.hasChildren());
1139:       assertFalse(node1.isScript());
1140:       assertFalse(node1.isWhile());
1141:       assertFalse(node1.hasOneChild());
1142:       assertEquals((-1122), node1.getType());
1143:       assertFalse(node1.isObjectLit());
1144:       assertFalse(node1.isStringKey());
1145:       assertFalse(node1.isAnd());
1146:       assertFalse(node1.isNot());
1147:       assertFalse(node1.isParamList());
1148:       assertFalse(node1.isComma());
1149:       assertFalse(node1.isNull());
1150:       assertFalse(node1.isName());
1151:       assertFalse(node1.isGetProp());
1152:       assertFalse(node1.isBreak());
1153:       assertFalse(node1.isVar());
1154:       assertFalse(node1.isCall());
1155:       assertEquals(0, node1.getChildCount());
1156:       assertFalse(node1.isTrue());
1157:       assertFalse(node1.isExprResult());
1158:       assertFalse(node1.isVoid());
1159:       assertFalse(node1.isDefaultCase());
1160:       assertFalse(node1.isDo());
1161:       assertFalse(node1.isAdd());
1162:       assertFalse(node1.isNew());
1163:       assertFalse(node1.isOr());
1164:       assertEquals(52, Node.LENGTH);
1165:       assertEquals(40, Node.ORIGINALNAME_PROP);
1166:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1167:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1168:       assertEquals(49, Node.DIRECT_EVAL);
1169:       assertEquals(50, Node.FREE_CALL);
1170:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1171:       assertEquals(46, Node.IS_NAMESPACE);
1172:       assertEquals(54, Node.SLASH_V);
1173:       assertEquals(57, Node.REFLECTED_OBJECT);
1174:       assertEquals(8, Node.FLAG_NO_THROWS);
1175:       assertEquals(55, Node.INFERRED_FUNCTION);
1176:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1177:       assertEquals(39, Node.EMPTY_BLOCK);
1178:       assertEquals(30, Node.VAR_ARGS_NAME);
1179:       assertEquals(57, Node.LAST_PROP);
1180:       assertEquals(2, Node.POST_FLAG);
1181:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1182:       assertEquals(47, Node.IS_DISPATCHER);
1183:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1184:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1185:       assertEquals(53, Node.INPUT_ID);
1186:       assertEquals(29, Node.JSDOC_INFO_PROP);
1187:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1188:       assertEquals(43, Node.IS_CONSTANT_NAME);
1189:       assertEquals(56, Node.CHANGE_TIME);
1190:       assertEquals(36, Node.QUOTED_PROP);
1191:       assertEquals(48, Node.DIRECTIVES);
1192:       assertEquals(32, Node.INCRDECR_PROP);
1193:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1194:       assertEquals(4095, Node.COLUMN_MASK);
1195:       assertEquals(37, Node.OPT_ARG_NAME);
1196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1197:       assertEquals(1, Node.DECR_FLAG);
1198:       assertEquals(12, Node.COLUMN_BITS);
1199:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1200:       
1201:       LinkedList<NoObjectType> linkedList0 = new LinkedList<NoObjectType>();
1202:       assertEquals(0, linkedList0.size());
1203:       assertNotNull(linkedList0);
1204:       
1205:       Iterator<NoObjectType> iterator0 = linkedList0.iterator();
1206:       assertEquals(0, linkedList0.size());
1207:       assertNotNull(iterator0);
1208:       
1209:       ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
1210:       assertEquals(0, linkedList0.size());
1211:       assertEquals(0, immutableList0.size());
1212:       assertNotNull(immutableList0);
1213:       
1214:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
1215:       assertNotNull(simpleErrorReporter0);
1216:       
1217:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
1218:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1219:       assertNotNull(jSTypeRegistry0);
1220:       
1221:       Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
1222:       assertFalse(node3.equals((Object)node0));
1223:       assertFalse(node3.equals((Object)node2));
1224:       assertFalse(node3.equals((Object)node1));
1225:       assertEquals(0, linkedList0.size());
1226:       assertEquals(0, immutableList0.size());
1227:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1228:       assertFalse(node3.isHook());
1229:       assertEquals((-1), node3.getCharno());
1230:       assertFalse(node3.isFalse());
1231:       assertFalse(node3.isBreak());
1232:       assertFalse(node3.isSwitch());
1233:       assertFalse(node3.isIn());
1234:       assertEquals(83, node3.getType());
1235:       assertFalse(node3.isEmpty());
1236:       assertFalse(node3.isInc());
1237:       assertFalse(node3.isThrow());
1238:       assertFalse(node3.isCast());
1239:       assertFalse(node3.isDebugger());
1240:       assertFalse(node3.isAssign());
1241:       assertFalse(node3.isFunction());
1242:       assertFalse(node3.isDelProp());
1243:       assertEquals((-1), node3.getSourcePosition());
1244:       assertFalse(node3.isTrue());
1245:       assertFalse(node3.isExprResult());
1246:       assertFalse(node3.isGetElem());
1247:       assertFalse(node3.isAnd());
1248:       assertFalse(node3.isVoid());
1249:       assertFalse(node3.isReturn());
1250:       assertFalse(node3.isObjectLit());
1251:       assertFalse(node3.isComma());
1252:       assertFalse(node3.isNot());
1253:       assertTrue(node3.isParamList());
1254:       assertFalse(node3.isTypeOf());
1255:       assertFalse(node3.hasChildren());
1256:       assertFalse(node3.isString());
1257:       assertFalse(node3.isWhile());
1258:       assertFalse(node3.isDec());
1259:       assertFalse(node3.isGetProp());
1260:       assertFalse(node3.isVar());
1261:       assertFalse(node3.isAdd());
1262:       assertFalse(node3.isBlock());
1263:       assertFalse(node3.isCall());
1264:       assertFalse(node3.isNull());
1265:       assertFalse(node3.isStringKey());
1266:       assertFalse(node3.isName());
1267:       assertEquals(0, node3.getChildCount());
1268:       assertFalse(node3.isLabel());
1269:       assertFalse(node3.isContinue());
1270:       assertFalse(node3.isOr());
1271:       assertFalse(node3.isDefaultCase());
1272:       assertFalse(node3.isSetterDef());
1273:       assertFalse(node3.isNew());
1274:       assertFalse(node3.isAssignAdd());
1275:       assertFalse(node3.isDo());
1276:       assertFalse(node3.hasOneChild());
1277:       assertFalse(node3.isArrayLit());
1278:       assertFalse(node3.isRegExp());
1279:       assertFalse(node3.isIf());
1280:       assertFalse(node3.isGetterDef());
1281:       assertFalse(node3.isNE());
1282:       assertFalse(node3.isLabelName());
1283:       assertEquals((-1), node3.getLineno());
1284:       assertFalse(node3.isInstanceOf());
1285:       assertFalse(node3.isCatch());
1286:       assertFalse(node3.isNumber());
1287:       assertFalse(node3.hasMoreThanOneChild());
1288:       assertFalse(node3.isWith());
1289:       assertFalse(node3.isScript());
1290:       assertFalse(node3.isFor());
1291:       assertFalse(node3.isThis());
1292:       assertFalse(node3.isCase());
1293:       assertFalse(node3.isTry());
1294:       assertNotNull(node3);
1295:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1296:       assertEquals(4095, Node.COLUMN_MASK);
1297:       assertEquals(55, Node.INFERRED_FUNCTION);
1298:       assertEquals(36, Node.QUOTED_PROP);
1299:       assertEquals(8, Node.FLAG_NO_THROWS);
1300:       assertEquals(39, Node.EMPTY_BLOCK);
1301:       assertEquals(53, Node.INPUT_ID);
1302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1304:       assertEquals(57, Node.REFLECTED_OBJECT);
1305:       assertEquals(29, Node.JSDOC_INFO_PROP);
1306:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1307:       assertEquals(52, Node.LENGTH);
1308:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1309:       assertEquals(37, Node.OPT_ARG_NAME);
1310:       assertEquals(56, Node.CHANGE_TIME);
1311:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1312:       assertEquals(48, Node.DIRECTIVES);
1313:       assertEquals(49, Node.DIRECT_EVAL);
1314:       assertEquals(12, Node.COLUMN_BITS);
1315:       assertEquals(46, Node.IS_NAMESPACE);
1316:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1317:       assertEquals(30, Node.VAR_ARGS_NAME);
1318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1320:       assertEquals(32, Node.INCRDECR_PROP);
1321:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1322:       assertEquals(57, Node.LAST_PROP);
1323:       assertEquals(1, Node.DECR_FLAG);
1324:       assertEquals(40, Node.ORIGINALNAME_PROP);
1325:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1326:       assertEquals(47, Node.IS_DISPATCHER);
1327:       assertEquals(2, Node.POST_FLAG);
1328:       assertEquals(50, Node.FREE_CALL);
1329:       assertEquals(43, Node.IS_CONSTANT_NAME);
1330:       assertEquals(54, Node.SLASH_V);
1331:       
1332:       // Undeclared exception!
1333:       try { 
1334:         node2.checkTreeEquals((Node) null);
1335:         fail("Expecting exception: NullPointerException");
1336:       
1337:       } catch(NullPointerException e) {
1338:          //
1339:          // no message in exception (getMessage() returned null)
1340:          //
1341:          verifyException("com.google.javascript.rhino.Node", e);
1342:       }
1343:   }
1344: }
RegularFileObject[/tmp/EvoSuite_67_1628161371000/com/google/javascript/rhino/Node_67_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:02:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_67_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_67_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_67_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:02:51.184 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertNotNull(node0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertEquals(0, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isWhile());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isObjectLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertNotNull(node1);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Object object0 = node1.getProp(0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertEquals(0, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isWhile());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isObjectLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertNull(object0);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node2 = Node.newString(46, "UNKNOWN");
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isThrow());
assertFalse(node2.isDo());
assertEquals(46, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertNotNull(node2);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean0 = node2.isSyntheticBlock();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isThrow());
assertFalse(node2.isDo());
assertEquals(46, node2.getType());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isBlock());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(boolean0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

node0.setLineno(39);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertEquals(39, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node0.putProp(4095, (Object) null);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertEquals(39, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

int int0 = node0.getIndexOfChild(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertEquals(39, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertEquals(0, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isWhile());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isObjectLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertEquals((-1), int0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isCase());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertEquals(39, node0.getLineno());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node1.putIntProp(57, 2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isSwitch());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isInc());
assertEquals(0, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.isWhile());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isObjectLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

LinkedList<NoObjectType> linkedList0 = new LinkedList<NoObjectType>();
assertEquals(0, linkedList0.size());
assertNotNull(linkedList0);

Iterator<NoObjectType> iterator0 = linkedList0.iterator();
assertEquals(0, linkedList0.size());
assertNotNull(iterator0);

ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
assertEquals(0, linkedList0.size());
assertEquals(0, immutableList0.size());
assertNotNull(immutableList0);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(0, linkedList0.size());
assertEquals(0, immutableList0.size());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node3.isHook());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isSwitch());
assertFalse(node3.isIn());
assertEquals(83, node3.getType());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isDebugger());
assertFalse(node3.isAssign());
assertFalse(node3.isFunction());
assertFalse(node3.isDelProp());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isReturn());
assertFalse(node3.isObjectLit());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertTrue(node3.isParamList());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isDec());
assertFalse(node3.isGetProp());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isRegExp());
assertFalse(node3.isIf());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNE());
assertFalse(node3.isLabelName());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isNumber());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isScript());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertFalse(node3.isCase());
assertFalse(node3.isTry());
assertNotNull(node3);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);

node2.checkTreeEquals((Node) null);

[MASTER] 11:02:52.062 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_71_1628161371778/com/google/javascript/rhino/Node_71_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_71_1628161371778/com/google/javascript/rhino/Node_71_tmp__ESTest_scaffolding.java]]
[MASTER] 11:02:52.062 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:52.062 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:52.062 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 617
[MASTER] 11:02:52.063 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_71_1628161371778/com/google/javascript/rhino/Node_71_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:02:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_71_tmp__ESTest extends Node_71_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertFalse(node0.isStringKey());
23:       assertFalse(node0.isNull());
24:       assertFalse(node0.isCatch());
25:       assertFalse(node0.isParamList());
26:       assertFalse(node0.isCall());
27:       assertFalse(node0.isName());
28:       assertFalse(node0.isWhile());
29:       assertEquals(39, node0.getType());
30:       assertFalse(node0.isDebugger());
31:       assertFalse(node0.hasMoreThanOneChild());
32:       assertFalse(node0.isRegExp());
33:       assertFalse(node0.isReturn());
34:       assertFalse(node0.isBlock());
35:       assertFalse(node0.isTry());
36:       assertFalse(node0.isIf());
37:       assertFalse(node0.isFor());
38:       assertFalse(node0.isNE());
39:       assertEquals((-1), node0.getSourcePosition());
40:       assertEquals((-1), node0.getLineno());
41:       assertFalse(node0.isCast());
42:       assertFalse(node0.isFunction());
43:       assertFalse(node0.isContinue());
44:       assertFalse(node0.isIn());
45:       assertFalse(node0.isSetterDef());
46:       assertFalse(node0.isInc());
47:       assertFalse(node0.isBreak());
48:       assertFalse(node0.isThrow());
49:       assertFalse(node0.isThis());
50:       assertFalse(node0.isComma());
51:       assertFalse(node0.isFalse());
52:       assertFalse(node0.isInstanceOf());
53:       assertFalse(node0.isAnd());
54:       assertFalse(node0.isSwitch());
55:       assertFalse(node0.isString());
56:       assertFalse(node0.isWith());
57:       assertFalse(node0.isScript());
58:       assertFalse(node0.isObjectLit());
59:       assertEquals((-1), node0.getCharno());
60:       assertFalse(node0.isNot());
61:       assertTrue(node0.isNumber());
62:       assertFalse(node0.isHook());
63:       assertFalse(node0.isGetProp());
64:       assertFalse(node0.hasOneChild());
65:       assertFalse(node0.isCase());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.hasChildren());
68:       assertFalse(node0.isGetElem());
69:       assertFalse(node0.isEmpty());
70:       assertFalse(node0.isTypeOf());
71:       assertFalse(node0.isDec());
72:       assertFalse(node0.isOr());
73:       assertFalse(node0.isGetterDef());
74:       assertFalse(node0.isAssign());
75:       assertFalse(node0.isExprResult());
76:       assertFalse(node0.isArrayLit());
77:       assertFalse(node0.isLabelName());
78:       assertFalse(node0.isVoid());
79:       assertFalse(node0.isDefaultCase());
80:       assertFalse(node0.isTrue());
81:       assertEquals(0, node0.getChildCount());
82:       assertFalse(node0.isLabel());
83:       assertFalse(node0.isAssignAdd());
84:       assertFalse(node0.isAdd());
85:       assertFalse(node0.isVar());
86:       assertFalse(node0.isNew());
87:       assertFalse(node0.isDo());
88:       assertNotNull(node0);
89:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
90:       assertEquals(43, Node.IS_CONSTANT_NAME);
91:       assertEquals(36, Node.QUOTED_PROP);
92:       assertEquals(55, Node.INFERRED_FUNCTION);
93:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
94:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
95:       assertEquals(29, Node.JSDOC_INFO_PROP);
96:       assertEquals(53, Node.INPUT_ID);
97:       assertEquals(2, Node.POST_FLAG);
98:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
99:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
100:       assertEquals(46, Node.IS_NAMESPACE);
101:       assertEquals(50, Node.FREE_CALL);
102:       assertEquals(47, Node.IS_DISPATCHER);
103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
104:       assertEquals(40, Node.ORIGINALNAME_PROP);
105:       assertEquals(54, Node.SLASH_V);
106:       assertEquals(57, Node.LAST_PROP);
107:       assertEquals(30, Node.VAR_ARGS_NAME);
108:       assertEquals(52, Node.LENGTH);
109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
110:       assertEquals(12, Node.COLUMN_BITS);
111:       assertEquals(32, Node.INCRDECR_PROP);
112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
113:       assertEquals(1, Node.DECR_FLAG);
114:       assertEquals(8, Node.FLAG_NO_THROWS);
115:       assertEquals(39, Node.EMPTY_BLOCK);
116:       assertEquals(56, Node.CHANGE_TIME);
117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(57, Node.REFLECTED_OBJECT);
120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
121:       assertEquals(4095, Node.COLUMN_MASK);
122:       assertEquals(49, Node.DIRECT_EVAL);
123:       assertEquals(48, Node.DIRECTIVES);
124:       assertEquals(37, Node.OPT_ARG_NAME);
125:       
126:       Node node1 = new Node(17, 52, 47);
127:       assertFalse(node1.equals((Object)node0));
128:       assertFalse(node1.isTry());
129:       assertFalse(node1.isVoid());
130:       assertFalse(node1.isArrayLit());
131:       assertFalse(node1.isEmpty());
132:       assertFalse(node1.isIf());
133:       assertFalse(node1.isGetterDef());
134:       assertFalse(node1.isDelProp());
135:       assertFalse(node1.isTrue());
136:       assertFalse(node1.isDebugger());
137:       assertFalse(node1.isNE());
138:       assertFalse(node1.isCatch());
139:       assertFalse(node1.isCase());
140:       assertFalse(node1.isRegExp());
141:       assertEquals(47, node1.getCharno());
142:       assertFalse(node1.isFor());
143:       assertFalse(node1.isCall());
144:       assertFalse(node1.isNew());
145:       assertFalse(node1.isAdd());
146:       assertFalse(node1.isBreak());
147:       assertFalse(node1.isName());
148:       assertFalse(node1.isSwitch());
149:       assertFalse(node1.isStringKey());
150:       assertFalse(node1.isParamList());
151:       assertFalse(node1.isNull());
152:       assertEquals(0, node1.getChildCount());
153:       assertFalse(node1.isOr());
154:       assertFalse(node1.isAssignAdd());
155:       assertEquals(213039, node1.getSourcePosition());
156:       assertEquals(17, node1.getType());
157:       assertFalse(node1.isDo());
158:       assertFalse(node1.isDefaultCase());
159:       assertFalse(node1.isLabel());
160:       assertFalse(node1.isVar());
161:       assertFalse(node1.hasOneChild());
162:       assertFalse(node1.isExprResult());
163:       assertFalse(node1.isCast());
164:       assertFalse(node1.isScript());
165:       assertFalse(node1.isGetElem());
166:       assertFalse(node1.isLabelName());
167:       assertFalse(node1.isNot());
168:       assertEquals(52, node1.getLineno());
169:       assertFalse(node1.isNumber());
170:       assertFalse(node1.isObjectLit());
171:       assertFalse(node1.isAnd());
172:       assertFalse(node1.isInstanceOf());
173:       assertFalse(node1.hasMoreThanOneChild());
174:       assertFalse(node1.isGetProp());
175:       assertFalse(node1.hasChildren());
176:       assertFalse(node1.isWhile());
177:       assertFalse(node1.isDec());
178:       assertFalse(node1.isTypeOf());
179:       assertFalse(node1.isAssign());
180:       assertFalse(node1.isWith());
181:       assertFalse(node1.isComma());
182:       assertFalse(node1.isHook());
183:       assertFalse(node1.isBlock());
184:       assertFalse(node1.isThis());
185:       assertFalse(node1.isReturn());
186:       assertFalse(node1.isInc());
187:       assertFalse(node1.isString());
188:       assertFalse(node1.isIn());
189:       assertFalse(node1.isContinue());
190:       assertFalse(node1.isSetterDef());
191:       assertFalse(node1.isFalse());
192:       assertFalse(node1.isFunction());
193:       assertFalse(node1.isThrow());
194:       assertNotNull(node1);
195:       assertEquals(51, Node.STATIC_SOURCE_FILE);
196:       assertEquals(30, Node.VAR_ARGS_NAME);
197:       assertEquals(49, Node.DIRECT_EVAL);
198:       assertEquals(32, Node.INCRDECR_PROP);
199:       assertEquals(1, Node.DECR_FLAG);
200:       assertEquals(15, Node.NO_SIDE_EFFECTS);
201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
202:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
203:       assertEquals(2, Node.POST_FLAG);
204:       assertEquals(57, Node.LAST_PROP);
205:       assertEquals(47, Node.IS_DISPATCHER);
206:       assertEquals(12, Node.COLUMN_BITS);
207:       assertEquals(40, Node.ORIGINALNAME_PROP);
208:       assertEquals(50, Node.FREE_CALL);
209:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
210:       assertEquals(43, Node.IS_CONSTANT_NAME);
211:       assertEquals(46, Node.IS_NAMESPACE);
212:       assertEquals(54, Node.SLASH_V);
213:       assertEquals(4095, Node.COLUMN_MASK);
214:       assertEquals(55, Node.INFERRED_FUNCTION);
215:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
216:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
217:       assertEquals(39, Node.EMPTY_BLOCK);
218:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
219:       assertEquals(52, Node.LENGTH);
220:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
221:       assertEquals(53, Node.INPUT_ID);
222:       assertEquals(29, Node.JSDOC_INFO_PROP);
223:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
224:       assertEquals(37, Node.OPT_ARG_NAME);
225:       assertEquals(8, Node.FLAG_NO_THROWS);
226:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
227:       assertEquals(36, Node.QUOTED_PROP);
228:       assertEquals(48, Node.DIRECTIVES);
229:       assertEquals(56, Node.CHANGE_TIME);
230:       assertEquals(57, Node.REFLECTED_OBJECT);
231:       
232:       Node node2 = new Node(55, node1);
233:       assertFalse(node1.equals((Object)node0));
234:       assertFalse(node2.equals((Object)node1));
235:       assertFalse(node2.equals((Object)node0));
236:       assertFalse(node1.isTry());
237:       assertFalse(node1.isVoid());
238:       assertFalse(node1.isArrayLit());
239:       assertFalse(node1.isEmpty());
240:       assertFalse(node1.isIf());
241:       assertFalse(node1.isGetterDef());
242:       assertFalse(node1.isDelProp());
243:       assertFalse(node1.isTrue());
244:       assertFalse(node1.isDebugger());
245:       assertFalse(node1.isNE());
246:       assertFalse(node1.isCatch());
247:       assertFalse(node1.isCase());
248:       assertFalse(node1.isRegExp());
249:       assertEquals(47, node1.getCharno());
250:       assertFalse(node1.isFor());
251:       assertFalse(node1.isCall());
252:       assertFalse(node1.isNew());
253:       assertFalse(node1.isAdd());
254:       assertFalse(node1.isBreak());
255:       assertFalse(node1.isName());
256:       assertFalse(node1.isSwitch());
257:       assertFalse(node1.isStringKey());
258:       assertFalse(node1.isParamList());
259:       assertFalse(node1.isNull());
260:       assertEquals(0, node1.getChildCount());
261:       assertFalse(node1.isOr());
262:       assertFalse(node1.isAssignAdd());
263:       assertEquals(213039, node1.getSourcePosition());
264:       assertEquals(17, node1.getType());
265:       assertFalse(node1.isDo());
266:       assertFalse(node1.isDefaultCase());
267:       assertFalse(node1.isLabel());
268:       assertFalse(node1.isVar());
269:       assertFalse(node1.hasOneChild());
270:       assertFalse(node1.isExprResult());
271:       assertFalse(node1.isCast());
272:       assertFalse(node1.isScript());
273:       assertFalse(node1.isGetElem());
274:       assertFalse(node1.isLabelName());
275:       assertFalse(node1.isNot());
276:       assertEquals(52, node1.getLineno());
277:       assertFalse(node1.isNumber());
278:       assertFalse(node1.isObjectLit());
279:       assertFalse(node1.isAnd());
280:       assertFalse(node1.isInstanceOf());
281:       assertFalse(node1.hasMoreThanOneChild());
282:       assertFalse(node1.isGetProp());
283:       assertFalse(node1.hasChildren());
284:       assertFalse(node1.isWhile());
285:       assertFalse(node1.isDec());
286:       assertFalse(node1.isTypeOf());
287:       assertFalse(node1.isAssign());
288:       assertFalse(node1.isWith());
289:       assertFalse(node1.isComma());
290:       assertFalse(node1.isHook());
291:       assertFalse(node1.isBlock());
292:       assertFalse(node1.isThis());
293:       assertFalse(node1.isReturn());
294:       assertFalse(node1.isInc());
295:       assertFalse(node1.isString());
296:       assertFalse(node1.isIn());
297:       assertFalse(node1.isContinue());
298:       assertFalse(node1.isSetterDef());
299:       assertFalse(node1.isFalse());
300:       assertFalse(node1.isFunction());
301:       assertFalse(node1.isThrow());
302:       assertFalse(node2.isDo());
303:       assertFalse(node2.hasMoreThanOneChild());
304:       assertFalse(node2.isContinue());
305:       assertFalse(node2.isOr());
306:       assertEquals((-1), node2.getLineno());
307:       assertFalse(node2.isStringKey());
308:       assertEquals(55, node2.getType());
309:       assertFalse(node2.isAssign());
310:       assertFalse(node2.isName());
311:       assertFalse(node2.isGetElem());
312:       assertEquals((-1), node2.getSourcePosition());
313:       assertFalse(node2.isDec());
314:       assertFalse(node2.isNumber());
315:       assertFalse(node2.isCall());
316:       assertFalse(node2.isTypeOf());
317:       assertFalse(node2.isBlock());
318:       assertFalse(node2.isReturn());
319:       assertFalse(node2.isWhile());
320:       assertFalse(node2.isScript());
321:       assertFalse(node2.isExprResult());
322:       assertFalse(node2.isVoid());
323:       assertFalse(node2.isTrue());
324:       assertFalse(node2.isNull());
325:       assertFalse(node2.isParamList());
326:       assertFalse(node2.isLabelName());
327:       assertFalse(node2.isEmpty());
328:       assertFalse(node2.isArrayLit());
329:       assertFalse(node2.isLabel());
330:       assertFalse(node2.isAssignAdd());
331:       assertFalse(node2.isAdd());
332:       assertFalse(node2.isNew());
333:       assertFalse(node2.isVar());
334:       assertFalse(node2.isDefaultCase());
335:       assertFalse(node2.isCase());
336:       assertFalse(node2.isInc());
337:       assertFalse(node2.isIn());
338:       assertFalse(node2.isString());
339:       assertTrue(node2.hasChildren());
340:       assertEquals((-1), node2.getCharno());
341:       assertFalse(node2.isNE());
342:       assertFalse(node2.isSwitch());
343:       assertFalse(node2.isIf());
344:       assertFalse(node2.isFor());
345:       assertTrue(node2.hasOneChild());
346:       assertFalse(node2.isGetterDef());
347:       assertFalse(node2.isBreak());
348:       assertFalse(node2.isDelProp());
349:       assertFalse(node2.isTry());
350:       assertFalse(node2.isGetProp());
351:       assertEquals(1, node2.getChildCount());
352:       assertFalse(node2.isComma());
353:       assertFalse(node2.isHook());
354:       assertFalse(node2.isThis());
355:       assertFalse(node2.isNot());
356:       assertFalse(node2.isWith());
357:       assertFalse(node2.isObjectLit());
358:       assertFalse(node2.isRegExp());
359:       assertFalse(node2.isFunction());
360:       assertFalse(node2.isCatch());
361:       assertFalse(node2.isInstanceOf());
362:       assertFalse(node2.isDebugger());
363:       assertFalse(node2.isAnd());
364:       assertFalse(node2.isFalse());
365:       assertFalse(node2.isCast());
366:       assertFalse(node2.isSetterDef());
367:       assertFalse(node2.isThrow());
368:       assertNotNull(node2);
369:       assertEquals(51, Node.STATIC_SOURCE_FILE);
370:       assertEquals(30, Node.VAR_ARGS_NAME);
371:       assertEquals(49, Node.DIRECT_EVAL);
372:       assertEquals(32, Node.INCRDECR_PROP);
373:       assertEquals(1, Node.DECR_FLAG);
374:       assertEquals(15, Node.NO_SIDE_EFFECTS);
375:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
376:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
377:       assertEquals(2, Node.POST_FLAG);
378:       assertEquals(57, Node.LAST_PROP);
379:       assertEquals(47, Node.IS_DISPATCHER);
380:       assertEquals(12, Node.COLUMN_BITS);
381:       assertEquals(40, Node.ORIGINALNAME_PROP);
382:       assertEquals(50, Node.FREE_CALL);
383:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
384:       assertEquals(43, Node.IS_CONSTANT_NAME);
385:       assertEquals(46, Node.IS_NAMESPACE);
386:       assertEquals(54, Node.SLASH_V);
387:       assertEquals(4095, Node.COLUMN_MASK);
388:       assertEquals(55, Node.INFERRED_FUNCTION);
389:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
390:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
391:       assertEquals(39, Node.EMPTY_BLOCK);
392:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
393:       assertEquals(52, Node.LENGTH);
394:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
395:       assertEquals(53, Node.INPUT_ID);
396:       assertEquals(29, Node.JSDOC_INFO_PROP);
397:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
398:       assertEquals(37, Node.OPT_ARG_NAME);
399:       assertEquals(8, Node.FLAG_NO_THROWS);
400:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
401:       assertEquals(36, Node.QUOTED_PROP);
402:       assertEquals(48, Node.DIRECTIVES);
403:       assertEquals(56, Node.CHANGE_TIME);
404:       assertEquals(57, Node.REFLECTED_OBJECT);
405:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
406:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
407:       assertEquals(39, Node.EMPTY_BLOCK);
408:       assertEquals(50, Node.FREE_CALL);
409:       assertEquals(8, Node.FLAG_NO_THROWS);
410:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
411:       assertEquals(55, Node.INFERRED_FUNCTION);
412:       assertEquals(43, Node.IS_CONSTANT_NAME);
413:       assertEquals(30, Node.VAR_ARGS_NAME);
414:       assertEquals(51, Node.STATIC_SOURCE_FILE);
415:       assertEquals(46, Node.IS_NAMESPACE);
416:       assertEquals(40, Node.ORIGINALNAME_PROP);
417:       assertEquals(54, Node.SLASH_V);
418:       assertEquals(56, Node.CHANGE_TIME);
419:       assertEquals(2, Node.POST_FLAG);
420:       assertEquals(37, Node.OPT_ARG_NAME);
421:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
422:       assertEquals(47, Node.IS_DISPATCHER);
423:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
424:       assertEquals(29, Node.JSDOC_INFO_PROP);
425:       assertEquals(12, Node.COLUMN_BITS);
426:       assertEquals(1, Node.DECR_FLAG);
427:       assertEquals(32, Node.INCRDECR_PROP);
428:       assertEquals(57, Node.LAST_PROP);
429:       assertEquals(36, Node.QUOTED_PROP);
430:       assertEquals(15, Node.NO_SIDE_EFFECTS);
431:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
432:       assertEquals(53, Node.INPUT_ID);
433:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
434:       assertEquals(52, Node.LENGTH);
435:       assertEquals(4095, Node.COLUMN_MASK);
436:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
437:       assertEquals(57, Node.REFLECTED_OBJECT);
438:       assertEquals(48, Node.DIRECTIVES);
439:       assertEquals(49, Node.DIRECT_EVAL);
440:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
441:       
442:       node0.setType((-2042));
443:       assertFalse(node0.equals((Object)node1));
444:       assertFalse(node0.equals((Object)node2));
445:       assertFalse(node0.isStringKey());
446:       assertFalse(node0.isNull());
447:       assertFalse(node0.isCatch());
448:       assertFalse(node0.isParamList());
449:       assertFalse(node0.isCall());
450:       assertFalse(node0.isName());
451:       assertFalse(node0.isWhile());
452:       assertEquals((-2042), node0.getType());
453:       assertFalse(node0.isDebugger());
454:       assertFalse(node0.hasMoreThanOneChild());
455:       assertFalse(node0.isRegExp());
456:       assertFalse(node0.isReturn());
457:       assertFalse(node0.isBlock());
458:       assertFalse(node0.isTry());
459:       assertFalse(node0.isIf());
460:       assertFalse(node0.isFor());
461:       assertFalse(node0.isNE());
462:       assertEquals((-1), node0.getSourcePosition());
463:       assertEquals((-1), node0.getLineno());
464:       assertFalse(node0.isCast());
465:       assertFalse(node0.isFunction());
466:       assertFalse(node0.isContinue());
467:       assertFalse(node0.isIn());
468:       assertFalse(node0.isSetterDef());
469:       assertFalse(node0.isInc());
470:       assertFalse(node0.isBreak());
471:       assertFalse(node0.isThrow());
472:       assertFalse(node0.isThis());
473:       assertFalse(node0.isComma());
474:       assertFalse(node0.isFalse());
475:       assertFalse(node0.isInstanceOf());
476:       assertFalse(node0.isAnd());
477:       assertFalse(node0.isSwitch());
478:       assertFalse(node0.isString());
479:       assertFalse(node0.isWith());
480:       assertFalse(node0.isScript());
481:       assertFalse(node0.isObjectLit());
482:       assertEquals((-1), node0.getCharno());
483:       assertFalse(node0.isNot());
484:       assertFalse(node0.isHook());
485:       assertFalse(node0.isGetProp());
486:       assertFalse(node0.hasOneChild());
487:       assertFalse(node0.isCase());
488:       assertFalse(node0.isDelProp());
489:       assertFalse(node0.hasChildren());
490:       assertFalse(node0.isGetElem());
491:       assertFalse(node0.isEmpty());
492:       assertFalse(node0.isNumber());
493:       assertFalse(node0.isTypeOf());
494:       assertFalse(node0.isDec());
495:       assertFalse(node0.isOr());
496:       assertFalse(node0.isGetterDef());
497:       assertFalse(node0.isAssign());
498:       assertFalse(node0.isExprResult());
499:       assertFalse(node0.isArrayLit());
500:       assertFalse(node0.isLabelName());
501:       assertFalse(node0.isVoid());
502:       assertFalse(node0.isDefaultCase());
503:       assertFalse(node0.isTrue());
504:       assertEquals(0, node0.getChildCount());
505:       assertFalse(node0.isLabel());
506:       assertFalse(node0.isAssignAdd());
507:       assertFalse(node0.isAdd());
508:       assertFalse(node0.isVar());
509:       assertFalse(node0.isNew());
510:       assertFalse(node0.isDo());
511:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
512:       assertEquals(43, Node.IS_CONSTANT_NAME);
513:       assertEquals(36, Node.QUOTED_PROP);
514:       assertEquals(55, Node.INFERRED_FUNCTION);
515:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
516:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
517:       assertEquals(29, Node.JSDOC_INFO_PROP);
518:       assertEquals(53, Node.INPUT_ID);
519:       assertEquals(2, Node.POST_FLAG);
520:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
521:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
522:       assertEquals(46, Node.IS_NAMESPACE);
523:       assertEquals(50, Node.FREE_CALL);
524:       assertEquals(47, Node.IS_DISPATCHER);
525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
526:       assertEquals(40, Node.ORIGINALNAME_PROP);
527:       assertEquals(54, Node.SLASH_V);
528:       assertEquals(57, Node.LAST_PROP);
529:       assertEquals(30, Node.VAR_ARGS_NAME);
530:       assertEquals(52, Node.LENGTH);
531:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
532:       assertEquals(12, Node.COLUMN_BITS);
533:       assertEquals(32, Node.INCRDECR_PROP);
534:       assertEquals(15, Node.NO_SIDE_EFFECTS);
535:       assertEquals(1, Node.DECR_FLAG);
536:       assertEquals(8, Node.FLAG_NO_THROWS);
537:       assertEquals(39, Node.EMPTY_BLOCK);
538:       assertEquals(56, Node.CHANGE_TIME);
539:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
540:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
541:       assertEquals(57, Node.REFLECTED_OBJECT);
542:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
543:       assertEquals(4095, Node.COLUMN_MASK);
544:       assertEquals(49, Node.DIRECT_EVAL);
545:       assertEquals(48, Node.DIRECTIVES);
546:       assertEquals(37, Node.OPT_ARG_NAME);
547:       
548:       Iterable<Node> iterable0 = node0.children();
549:       assertFalse(node0.equals((Object)node1));
550:       assertFalse(node0.equals((Object)node2));
551:       assertFalse(node0.isStringKey());
552:       assertFalse(node0.isNull());
553:       assertFalse(node0.isCatch());
554:       assertFalse(node0.isParamList());
555:       assertFalse(node0.isCall());
556:       assertFalse(node0.isName());
557:       assertFalse(node0.isWhile());
558:       assertEquals((-2042), node0.getType());
559:       assertFalse(node0.isDebugger());
560:       assertFalse(node0.hasMoreThanOneChild());
561:       assertFalse(node0.isRegExp());
562:       assertFalse(node0.isReturn());
563:       assertFalse(node0.isBlock());
564:       assertFalse(node0.isTry());
565:       assertFalse(node0.isIf());
566:       assertFalse(node0.isFor());
567:       assertFalse(node0.isNE());
568:       assertEquals((-1), node0.getSourcePosition());
569:       assertEquals((-1), node0.getLineno());
570:       assertFalse(node0.isCast());
571:       assertFalse(node0.isFunction());
572:       assertFalse(node0.isContinue());
573:       assertFalse(node0.isIn());
574:       assertFalse(node0.isSetterDef());
575:       assertFalse(node0.isInc());
576:       assertFalse(node0.isBreak());
577:       assertFalse(node0.isThrow());
578:       assertFalse(node0.isThis());
579:       assertFalse(node0.isComma());
580:       assertFalse(node0.isFalse());
581:       assertFalse(node0.isInstanceOf());
582:       assertFalse(node0.isAnd());
583:       assertFalse(node0.isSwitch());
584:       assertFalse(node0.isString());
585:       assertFalse(node0.isWith());
586:       assertFalse(node0.isScript());
587:       assertFalse(node0.isObjectLit());
588:       assertEquals((-1), node0.getCharno());
589:       assertFalse(node0.isNot());
590:       assertFalse(node0.isHook());
591:       assertFalse(node0.isGetProp());
592:       assertFalse(node0.hasOneChild());
593:       assertFalse(node0.isCase());
594:       assertFalse(node0.isDelProp());
595:       assertFalse(node0.hasChildren());
596:       assertFalse(node0.isGetElem());
597:       assertFalse(node0.isEmpty());
598:       assertFalse(node0.isNumber());
599:       assertFalse(node0.isTypeOf());
600:       assertFalse(node0.isDec());
601:       assertFalse(node0.isOr());
602:       assertFalse(node0.isGetterDef());
603:       assertFalse(node0.isAssign());
604:       assertFalse(node0.isExprResult());
605:       assertFalse(node0.isArrayLit());
606:       assertFalse(node0.isLabelName());
607:       assertFalse(node0.isVoid());
608:       assertFalse(node0.isDefaultCase());
609:       assertFalse(node0.isTrue());
610:       assertEquals(0, node0.getChildCount());
611:       assertFalse(node0.isLabel());
612:       assertFalse(node0.isAssignAdd());
613:       assertFalse(node0.isAdd());
614:       assertFalse(node0.isVar());
615:       assertFalse(node0.isNew());
616:       assertFalse(node0.isDo());
617:       assertFalse(iterable0.contains(node1));
618:       assertNotNull(iterable0);
619:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
620:       assertEquals(43, Node.IS_CONSTANT_NAME);
621:       assertEquals(36, Node.QUOTED_PROP);
622:       assertEquals(55, Node.INFERRED_FUNCTION);
623:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
624:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
625:       assertEquals(29, Node.JSDOC_INFO_PROP);
626:       assertEquals(53, Node.INPUT_ID);
627:       assertEquals(2, Node.POST_FLAG);
628:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
629:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
630:       assertEquals(46, Node.IS_NAMESPACE);
631:       assertEquals(50, Node.FREE_CALL);
632:       assertEquals(47, Node.IS_DISPATCHER);
633:       assertEquals(51, Node.STATIC_SOURCE_FILE);
634:       assertEquals(40, Node.ORIGINALNAME_PROP);
635:       assertEquals(54, Node.SLASH_V);
636:       assertEquals(57, Node.LAST_PROP);
637:       assertEquals(30, Node.VAR_ARGS_NAME);
638:       assertEquals(52, Node.LENGTH);
639:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
640:       assertEquals(12, Node.COLUMN_BITS);
641:       assertEquals(32, Node.INCRDECR_PROP);
642:       assertEquals(15, Node.NO_SIDE_EFFECTS);
643:       assertEquals(1, Node.DECR_FLAG);
644:       assertEquals(8, Node.FLAG_NO_THROWS);
645:       assertEquals(39, Node.EMPTY_BLOCK);
646:       assertEquals(56, Node.CHANGE_TIME);
647:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
648:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
649:       assertEquals(57, Node.REFLECTED_OBJECT);
650:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
651:       assertEquals(4095, Node.COLUMN_MASK);
652:       assertEquals(49, Node.DIRECT_EVAL);
653:       assertEquals(48, Node.DIRECTIVES);
654:       assertEquals(37, Node.OPT_ARG_NAME);
655:       
656:       boolean boolean0 = node0.isNew();
657:       assertFalse(node0.equals((Object)node1));
658:       assertFalse(node0.equals((Object)node2));
659:       assertFalse(node0.isStringKey());
660:       assertFalse(node0.isNull());
661:       assertFalse(node0.isCatch());
662:       assertFalse(node0.isParamList());
663:       assertFalse(node0.isCall());
664:       assertFalse(node0.isName());
665:       assertFalse(node0.isWhile());
666:       assertEquals((-2042), node0.getType());
667:       assertFalse(node0.isDebugger());
668:       assertFalse(node0.hasMoreThanOneChild());
669:       assertFalse(node0.isRegExp());
670:       assertFalse(node0.isReturn());
671:       assertFalse(node0.isBlock());
672:       assertFalse(node0.isTry());
673:       assertFalse(node0.isIf());
674:       assertFalse(node0.isFor());
675:       assertFalse(node0.isNE());
676:       assertEquals((-1), node0.getSourcePosition());
677:       assertEquals((-1), node0.getLineno());
678:       assertFalse(node0.isCast());
679:       assertFalse(node0.isFunction());
680:       assertFalse(node0.isContinue());
681:       assertFalse(node0.isIn());
682:       assertFalse(node0.isSetterDef());
683:       assertFalse(node0.isInc());
684:       assertFalse(node0.isBreak());
685:       assertFalse(node0.isThrow());
686:       assertFalse(node0.isThis());
687:       assertFalse(node0.isComma());
688:       assertFalse(node0.isFalse());
689:       assertFalse(node0.isInstanceOf());
690:       assertFalse(node0.isAnd());
691:       assertFalse(node0.isSwitch());
692:       assertFalse(node0.isString());
693:       assertFalse(node0.isWith());
694:       assertFalse(node0.isScript());
695:       assertFalse(node0.isObjectLit());
696:       assertEquals((-1), node0.getCharno());
697:       assertFalse(node0.isNot());
698:       assertFalse(node0.isHook());
699:       assertFalse(node0.isGetProp());
700:       assertFalse(node0.hasOneChild());
701:       assertFalse(node0.isCase());
702:       assertFalse(node0.isDelProp());
703:       assertFalse(node0.hasChildren());
704:       assertFalse(node0.isGetElem());
705:       assertFalse(node0.isEmpty());
706:       assertFalse(node0.isNumber());
707:       assertFalse(node0.isTypeOf());
708:       assertFalse(node0.isDec());
709:       assertFalse(node0.isOr());
710:       assertFalse(node0.isGetterDef());
711:       assertFalse(node0.isAssign());
712:       assertFalse(node0.isExprResult());
713:       assertFalse(node0.isArrayLit());
714:       assertFalse(node0.isLabelName());
715:       assertFalse(node0.isVoid());
716:       assertFalse(node0.isDefaultCase());
717:       assertFalse(node0.isTrue());
718:       assertEquals(0, node0.getChildCount());
719:       assertFalse(node0.isLabel());
720:       assertFalse(node0.isAssignAdd());
721:       assertFalse(node0.isAdd());
722:       assertFalse(node0.isVar());
723:       assertFalse(node0.isNew());
724:       assertFalse(node0.isDo());
725:       assertFalse(boolean0);
726:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
727:       assertEquals(43, Node.IS_CONSTANT_NAME);
728:       assertEquals(36, Node.QUOTED_PROP);
729:       assertEquals(55, Node.INFERRED_FUNCTION);
730:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
731:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
732:       assertEquals(29, Node.JSDOC_INFO_PROP);
733:       assertEquals(53, Node.INPUT_ID);
734:       assertEquals(2, Node.POST_FLAG);
735:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
736:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
737:       assertEquals(46, Node.IS_NAMESPACE);
738:       assertEquals(50, Node.FREE_CALL);
739:       assertEquals(47, Node.IS_DISPATCHER);
740:       assertEquals(51, Node.STATIC_SOURCE_FILE);
741:       assertEquals(40, Node.ORIGINALNAME_PROP);
742:       assertEquals(54, Node.SLASH_V);
743:       assertEquals(57, Node.LAST_PROP);
744:       assertEquals(30, Node.VAR_ARGS_NAME);
745:       assertEquals(52, Node.LENGTH);
746:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
747:       assertEquals(12, Node.COLUMN_BITS);
748:       assertEquals(32, Node.INCRDECR_PROP);
749:       assertEquals(15, Node.NO_SIDE_EFFECTS);
750:       assertEquals(1, Node.DECR_FLAG);
751:       assertEquals(8, Node.FLAG_NO_THROWS);
752:       assertEquals(39, Node.EMPTY_BLOCK);
753:       assertEquals(56, Node.CHANGE_TIME);
754:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
755:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
756:       assertEquals(57, Node.REFLECTED_OBJECT);
757:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
758:       assertEquals(4095, Node.COLUMN_MASK);
759:       assertEquals(49, Node.DIRECT_EVAL);
760:       assertEquals(48, Node.DIRECTIVES);
761:       assertEquals(37, Node.OPT_ARG_NAME);
762:       
763:       node2.setSourceFileForTesting("");
764:       assertFalse(node1.equals((Object)node2));
765:       assertFalse(node1.equals((Object)node0));
766:       assertFalse(node2.equals((Object)node1));
767:       assertFalse(node2.equals((Object)node0));
768:       assertNotSame(node1, node2);
769:       assertNotSame(node2, node1);
770:       assertFalse(node1.isTry());
771:       assertFalse(node1.isVoid());
772:       assertFalse(node1.isArrayLit());
773:       assertFalse(node1.isEmpty());
774:       assertFalse(node1.isIf());
775:       assertFalse(node1.isGetterDef());
776:       assertFalse(node1.isDelProp());
777:       assertFalse(node1.isTrue());
778:       assertFalse(node1.isDebugger());
779:       assertFalse(node1.isNE());
780:       assertFalse(node1.isCatch());
781:       assertFalse(node1.isCase());
782:       assertFalse(node1.isRegExp());
783:       assertEquals(47, node1.getCharno());
784:       assertFalse(node1.isFor());
785:       assertFalse(node1.isCall());
786:       assertFalse(node1.isNew());
787:       assertFalse(node1.isAdd());
788:       assertFalse(node1.isBreak());
789:       assertFalse(node1.isName());
790:       assertFalse(node1.isSwitch());
791:       assertFalse(node1.isStringKey());
792:       assertFalse(node1.isParamList());
793:       assertFalse(node1.isNull());
794:       assertEquals(0, node1.getChildCount());
795:       assertFalse(node1.isOr());
796:       assertFalse(node1.isAssignAdd());
797:       assertEquals(213039, node1.getSourcePosition());
798:       assertEquals(17, node1.getType());
799:       assertFalse(node1.isDo());
800:       assertFalse(node1.isDefaultCase());
801:       assertFalse(node1.isLabel());
802:       assertFalse(node1.isVar());
803:       assertFalse(node1.hasOneChild());
804:       assertFalse(node1.isExprResult());
805:       assertFalse(node1.isCast());
806:       assertFalse(node1.isScript());
807:       assertFalse(node1.isGetElem());
808:       assertFalse(node1.isLabelName());
809:       assertFalse(node1.isNot());
810:       assertEquals(52, node1.getLineno());
811:       assertFalse(node1.isNumber());
812:       assertFalse(node1.isObjectLit());
813:       assertFalse(node1.isAnd());
814:       assertFalse(node1.isInstanceOf());
815:       assertFalse(node1.hasMoreThanOneChild());
816:       assertFalse(node1.isGetProp());
817:       assertFalse(node1.hasChildren());
818:       assertFalse(node1.isWhile());
819:       assertFalse(node1.isDec());
820:       assertFalse(node1.isTypeOf());
821:       assertFalse(node1.isAssign());
822:       assertFalse(node1.isWith());
823:       assertFalse(node1.isComma());
824:       assertFalse(node1.isHook());
825:       assertFalse(node1.isBlock());
826:       assertFalse(node1.isThis());
827:       assertFalse(node1.isReturn());
828:       assertFalse(node1.isInc());
829:       assertFalse(node1.isString());
830:       assertFalse(node1.isIn());
831:       assertFalse(node1.isContinue());
832:       assertFalse(node1.isSetterDef());
833:       assertFalse(node1.isFalse());
834:       assertFalse(node1.isFunction());
835:       assertFalse(node1.isThrow());
836:       assertFalse(node2.isDo());
837:       assertFalse(node2.hasMoreThanOneChild());
838:       assertFalse(node2.isContinue());
839:       assertFalse(node2.isOr());
840:       assertEquals((-1), node2.getLineno());
841:       assertFalse(node2.isStringKey());
842:       assertEquals(55, node2.getType());
843:       assertFalse(node2.isAssign());
844:       assertFalse(node2.isName());
845:       assertFalse(node2.isGetElem());
846:       assertEquals((-1), node2.getSourcePosition());
847:       assertFalse(node2.isDec());
848:       assertFalse(node2.isNumber());
849:       assertFalse(node2.isCall());
850:       assertFalse(node2.isTypeOf());
851:       assertFalse(node2.isBlock());
852:       assertFalse(node2.isReturn());
853:       assertFalse(node2.isWhile());
854:       assertFalse(node2.isScript());
855:       assertFalse(node2.isExprResult());
856:       assertFalse(node2.isVoid());
857:       assertFalse(node2.isTrue());
858:       assertFalse(node2.isNull());
859:       assertFalse(node2.isParamList());
860:       assertFalse(node2.isLabelName());
861:       assertFalse(node2.isEmpty());
862:       assertFalse(node2.isArrayLit());
863:       assertFalse(node2.isLabel());
864:       assertFalse(node2.isAssignAdd());
865:       assertFalse(node2.isAdd());
866:       assertFalse(node2.isNew());
867:       assertFalse(node2.isVar());
868:       assertFalse(node2.isDefaultCase());
869:       assertFalse(node2.isCase());
870:       assertFalse(node2.isInc());
871:       assertFalse(node2.isIn());
872:       assertFalse(node2.isString());
873:       assertTrue(node2.hasChildren());
874:       assertEquals((-1), node2.getCharno());
875:       assertFalse(node2.isNE());
876:       assertFalse(node2.isSwitch());
877:       assertFalse(node2.isIf());
878:       assertFalse(node2.isFor());
879:       assertTrue(node2.hasOneChild());
880:       assertFalse(node2.isGetterDef());
881:       assertFalse(node2.isBreak());
882:       assertFalse(node2.isDelProp());
883:       assertFalse(node2.isTry());
884:       assertFalse(node2.isGetProp());
885:       assertEquals(1, node2.getChildCount());
886:       assertFalse(node2.isComma());
887:       assertFalse(node2.isHook());
888:       assertFalse(node2.isThis());
889:       assertFalse(node2.isNot());
890:       assertFalse(node2.isWith());
891:       assertFalse(node2.isObjectLit());
892:       assertFalse(node2.isRegExp());
893:       assertFalse(node2.isFunction());
894:       assertFalse(node2.isCatch());
895:       assertFalse(node2.isInstanceOf());
896:       assertFalse(node2.isDebugger());
897:       assertFalse(node2.isAnd());
898:       assertFalse(node2.isFalse());
899:       assertFalse(node2.isCast());
900:       assertFalse(node2.isSetterDef());
901:       assertFalse(node2.isThrow());
902:       assertEquals(51, Node.STATIC_SOURCE_FILE);
903:       assertEquals(30, Node.VAR_ARGS_NAME);
904:       assertEquals(49, Node.DIRECT_EVAL);
905:       assertEquals(32, Node.INCRDECR_PROP);
906:       assertEquals(1, Node.DECR_FLAG);
907:       assertEquals(15, Node.NO_SIDE_EFFECTS);
908:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
909:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
910:       assertEquals(2, Node.POST_FLAG);
911:       assertEquals(57, Node.LAST_PROP);
912:       assertEquals(47, Node.IS_DISPATCHER);
913:       assertEquals(12, Node.COLUMN_BITS);
914:       assertEquals(40, Node.ORIGINALNAME_PROP);
915:       assertEquals(50, Node.FREE_CALL);
916:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
917:       assertEquals(43, Node.IS_CONSTANT_NAME);
918:       assertEquals(46, Node.IS_NAMESPACE);
919:       assertEquals(54, Node.SLASH_V);
920:       assertEquals(4095, Node.COLUMN_MASK);
921:       assertEquals(55, Node.INFERRED_FUNCTION);
922:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
923:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
924:       assertEquals(39, Node.EMPTY_BLOCK);
925:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
926:       assertEquals(52, Node.LENGTH);
927:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
928:       assertEquals(53, Node.INPUT_ID);
929:       assertEquals(29, Node.JSDOC_INFO_PROP);
930:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
931:       assertEquals(37, Node.OPT_ARG_NAME);
932:       assertEquals(8, Node.FLAG_NO_THROWS);
933:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
934:       assertEquals(36, Node.QUOTED_PROP);
935:       assertEquals(48, Node.DIRECTIVES);
936:       assertEquals(56, Node.CHANGE_TIME);
937:       assertEquals(57, Node.REFLECTED_OBJECT);
938:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
939:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
940:       assertEquals(39, Node.EMPTY_BLOCK);
941:       assertEquals(50, Node.FREE_CALL);
942:       assertEquals(8, Node.FLAG_NO_THROWS);
943:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
944:       assertEquals(55, Node.INFERRED_FUNCTION);
945:       assertEquals(43, Node.IS_CONSTANT_NAME);
946:       assertEquals(30, Node.VAR_ARGS_NAME);
947:       assertEquals(51, Node.STATIC_SOURCE_FILE);
948:       assertEquals(46, Node.IS_NAMESPACE);
949:       assertEquals(40, Node.ORIGINALNAME_PROP);
950:       assertEquals(54, Node.SLASH_V);
951:       assertEquals(56, Node.CHANGE_TIME);
952:       assertEquals(2, Node.POST_FLAG);
953:       assertEquals(37, Node.OPT_ARG_NAME);
954:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
955:       assertEquals(47, Node.IS_DISPATCHER);
956:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
957:       assertEquals(29, Node.JSDOC_INFO_PROP);
958:       assertEquals(12, Node.COLUMN_BITS);
959:       assertEquals(1, Node.DECR_FLAG);
960:       assertEquals(32, Node.INCRDECR_PROP);
961:       assertEquals(57, Node.LAST_PROP);
962:       assertEquals(36, Node.QUOTED_PROP);
963:       assertEquals(15, Node.NO_SIDE_EFFECTS);
964:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
965:       assertEquals(53, Node.INPUT_ID);
966:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
967:       assertEquals(52, Node.LENGTH);
968:       assertEquals(4095, Node.COLUMN_MASK);
969:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
970:       assertEquals(57, Node.REFLECTED_OBJECT);
971:       assertEquals(48, Node.DIRECTIVES);
972:       assertEquals(49, Node.DIRECT_EVAL);
973:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
974:       
975:       Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
976:       assertFalse(node0.equals((Object)node1));
977:       assertFalse(node0.equals((Object)node2));
978:       assertFalse(node1.equals((Object)node2));
979:       assertFalse(node1.equals((Object)node0));
980:       assertFalse(node3.equals((Object)node0));
981:       assertFalse(node3.equals((Object)node2));
982:       assertNotSame(node1, node2);
983:       assertSame(node1, node3);
984:       assertSame(node3, node1);
985:       assertNotSame(node3, node2);
986:       assertFalse(node0.isStringKey());
987:       assertFalse(node0.isNull());
988:       assertFalse(node0.isCatch());
989:       assertFalse(node0.isParamList());
990:       assertFalse(node0.isCall());
991:       assertFalse(node0.isName());
992:       assertFalse(node0.isWhile());
993:       assertEquals((-2042), node0.getType());
994:       assertFalse(node0.isDebugger());
995:       assertFalse(node0.hasMoreThanOneChild());
996:       assertFalse(node0.isRegExp());
997:       assertFalse(node0.isReturn());
998:       assertFalse(node0.isBlock());
999:       assertFalse(node0.isTry());
1000:       assertFalse(node0.isIf());
1001:       assertFalse(node0.isFor());
1002:       assertFalse(node0.isNE());
1003:       assertEquals((-1), node0.getSourcePosition());
1004:       assertEquals((-1), node0.getLineno());
1005:       assertFalse(node0.isCast());
1006:       assertFalse(node0.isFunction());
1007:       assertFalse(node0.isContinue());
1008:       assertFalse(node0.isIn());
1009:       assertFalse(node0.isSetterDef());
1010:       assertFalse(node0.isInc());
1011:       assertFalse(node0.isBreak());
1012:       assertFalse(node0.isThrow());
1013:       assertFalse(node0.isThis());
1014:       assertFalse(node0.isComma());
1015:       assertFalse(node0.isFalse());
1016:       assertFalse(node0.isInstanceOf());
1017:       assertFalse(node0.isAnd());
1018:       assertFalse(node0.isSwitch());
1019:       assertFalse(node0.isString());
1020:       assertFalse(node0.isWith());
1021:       assertFalse(node0.isScript());
1022:       assertFalse(node0.isObjectLit());
1023:       assertEquals((-1), node0.getCharno());
1024:       assertFalse(node0.isNot());
1025:       assertFalse(node0.isHook());
1026:       assertFalse(node0.isGetProp());
1027:       assertFalse(node0.hasOneChild());
1028:       assertFalse(node0.isCase());
1029:       assertFalse(node0.isDelProp());
1030:       assertFalse(node0.hasChildren());
1031:       assertFalse(node0.isGetElem());
1032:       assertFalse(node0.isEmpty());
1033:       assertFalse(node0.isNumber());
1034:       assertFalse(node0.isTypeOf());
1035:       assertFalse(node0.isDec());
1036:       assertFalse(node0.isOr());
1037:       assertFalse(node0.isGetterDef());
1038:       assertFalse(node0.isAssign());
1039:       assertFalse(node0.isExprResult());
1040:       assertFalse(node0.isArrayLit());
1041:       assertFalse(node0.isLabelName());
1042:       assertFalse(node0.isVoid());
1043:       assertFalse(node0.isDefaultCase());
1044:       assertFalse(node0.isTrue());
1045:       assertEquals(0, node0.getChildCount());
1046:       assertFalse(node0.isLabel());
1047:       assertFalse(node0.isAssignAdd());
1048:       assertFalse(node0.isAdd());
1049:       assertFalse(node0.isVar());
1050:       assertFalse(node0.isNew());
1051:       assertFalse(node0.isDo());
1052:       assertFalse(node1.isTry());
1053:       assertFalse(node1.isVoid());
1054:       assertFalse(node1.isArrayLit());
1055:       assertFalse(node1.isEmpty());
1056:       assertFalse(node1.isIf());
1057:       assertFalse(node1.isGetterDef());
1058:       assertFalse(node1.isDelProp());
1059:       assertFalse(node1.isTrue());
1060:       assertFalse(node1.isDebugger());
1061:       assertFalse(node1.isNE());
1062:       assertFalse(node1.isCatch());
1063:       assertFalse(node1.isCase());
1064:       assertFalse(node1.isRegExp());
1065:       assertFalse(node1.isFor());
1066:       assertFalse(node1.isCall());
1067:       assertFalse(node1.isNew());
1068:       assertFalse(node1.isAdd());
1069:       assertFalse(node1.isBreak());
1070:       assertFalse(node1.isName());
1071:       assertFalse(node1.isSwitch());
1072:       assertEquals((-1), node1.getCharno());
1073:       assertFalse(node1.isStringKey());
1074:       assertFalse(node1.isParamList());
1075:       assertFalse(node1.isNull());
1076:       assertEquals(0, node1.getChildCount());
1077:       assertFalse(node1.isOr());
1078:       assertFalse(node1.isAssignAdd());
1079:       assertEquals(17, node1.getType());
1080:       assertFalse(node1.isDo());
1081:       assertFalse(node1.isDefaultCase());
1082:       assertFalse(node1.isLabel());
1083:       assertFalse(node1.isVar());
1084:       assertFalse(node1.hasOneChild());
1085:       assertFalse(node1.isExprResult());
1086:       assertFalse(node1.isCast());
1087:       assertFalse(node1.isScript());
1088:       assertFalse(node1.isGetElem());
1089:       assertEquals((-1), node1.getSourcePosition());
1090:       assertFalse(node1.isLabelName());
1091:       assertFalse(node1.isNot());
1092:       assertFalse(node1.isNumber());
1093:       assertFalse(node1.isObjectLit());
1094:       assertFalse(node1.isAnd());
1095:       assertEquals((-1), node1.getLineno());
1096:       assertFalse(node1.isInstanceOf());
1097:       assertFalse(node1.hasMoreThanOneChild());
1098:       assertFalse(node1.isGetProp());
1099:       assertFalse(node1.hasChildren());
1100:       assertFalse(node1.isWhile());
1101:       assertFalse(node1.isDec());
1102:       assertFalse(node1.isTypeOf());
1103:       assertFalse(node1.isAssign());
1104:       assertFalse(node1.isWith());
1105:       assertFalse(node1.isComma());
1106:       assertFalse(node1.isHook());
1107:       assertFalse(node1.isBlock());
1108:       assertFalse(node1.isThis());
1109:       assertFalse(node1.isReturn());
1110:       assertFalse(node1.isInc());
1111:       assertFalse(node1.isString());
1112:       assertFalse(node1.isIn());
1113:       assertFalse(node1.isContinue());
1114:       assertFalse(node1.isSetterDef());
1115:       assertFalse(node1.isFalse());
1116:       assertFalse(node1.isFunction());
1117:       assertFalse(node1.isThrow());
1118:       assertFalse(node3.isFalse());
1119:       assertFalse(node3.isThrow());
1120:       assertEquals((-1), node3.getCharno());
1121:       assertFalse(node3.isHook());
1122:       assertFalse(node3.isSwitch());
1123:       assertFalse(node3.isComma());
1124:       assertFalse(node3.isBreak());
1125:       assertFalse(node3.isIn());
1126:       assertFalse(node3.isEmpty());
1127:       assertEquals(17, node3.getType());
1128:       assertFalse(node3.isInc());
1129:       assertFalse(node3.hasOneChild());
1130:       assertFalse(node3.isArrayLit());
1131:       assertFalse(node3.isFor());
1132:       assertFalse(node3.isNE());
1133:       assertFalse(node3.isIf());
1134:       assertFalse(node3.isRegExp());
1135:       assertFalse(node3.isLabelName());
1136:       assertFalse(node3.isWith());
1137:       assertEquals((-1), node3.getLineno());
1138:       assertFalse(node3.hasMoreThanOneChild());
1139:       assertFalse(node3.isCatch());
1140:       assertFalse(node3.isInstanceOf());
1141:       assertFalse(node3.isThis());
1142:       assertFalse(node3.isScript());
1143:       assertFalse(node3.isGetterDef());
1144:       assertFalse(node3.isNumber());
1145:       assertFalse(node3.isTry());
1146:       assertFalse(node3.isCase());
1147:       assertFalse(node3.isVar());
1148:       assertFalse(node3.isName());
1149:       assertFalse(node3.isStringKey());
1150:       assertFalse(node3.isBlock());
1151:       assertFalse(node3.isNull());
1152:       assertFalse(node3.isParamList());
1153:       assertFalse(node3.isCall());
1154:       assertEquals(0, node3.getChildCount());
1155:       assertFalse(node3.isContinue());
1156:       assertFalse(node3.isOr());
1157:       assertFalse(node3.isLabel());
1158:       assertFalse(node3.isAssignAdd());
1159:       assertFalse(node3.isSetterDef());
1160:       assertFalse(node3.isDefaultCase());
1161:       assertFalse(node3.isDo());
1162:       assertFalse(node3.isNew());
1163:       assertFalse(node3.isAdd());
1164:       assertFalse(node3.isCast());
1165:       assertFalse(node3.isAssign());
1166:       assertFalse(node3.hasChildren());
1167:       assertFalse(node3.isTrue());
1168:       assertFalse(node3.isVoid());
1169:       assertFalse(node3.isDec());
1170:       assertFalse(node3.isFunction());
1171:       assertFalse(node3.isTypeOf());
1172:       assertFalse(node3.isDelProp());
1173:       assertFalse(node3.isExprResult());
1174:       assertFalse(node3.isGetElem());
1175:       assertFalse(node3.isAnd());
1176:       assertFalse(node3.isObjectLit());
1177:       assertFalse(node3.isNot());
1178:       assertFalse(node3.isWhile());
1179:       assertFalse(node3.isReturn());
1180:       assertEquals((-1), node3.getSourcePosition());
1181:       assertFalse(node3.isDebugger());
1182:       assertFalse(node3.isString());
1183:       assertFalse(node3.isGetProp());
1184:       assertNotNull(node3);
1185:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1186:       assertEquals(43, Node.IS_CONSTANT_NAME);
1187:       assertEquals(36, Node.QUOTED_PROP);
1188:       assertEquals(55, Node.INFERRED_FUNCTION);
1189:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1190:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1191:       assertEquals(29, Node.JSDOC_INFO_PROP);
1192:       assertEquals(53, Node.INPUT_ID);
1193:       assertEquals(2, Node.POST_FLAG);
1194:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1195:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1196:       assertEquals(46, Node.IS_NAMESPACE);
1197:       assertEquals(50, Node.FREE_CALL);
1198:       assertEquals(47, Node.IS_DISPATCHER);
1199:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1200:       assertEquals(40, Node.ORIGINALNAME_PROP);
1201:       assertEquals(54, Node.SLASH_V);
1202:       assertEquals(57, Node.LAST_PROP);
1203:       assertEquals(30, Node.VAR_ARGS_NAME);
1204:       assertEquals(52, Node.LENGTH);
1205:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1206:       assertEquals(12, Node.COLUMN_BITS);
1207:       assertEquals(32, Node.INCRDECR_PROP);
1208:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1209:       assertEquals(1, Node.DECR_FLAG);
1210:       assertEquals(8, Node.FLAG_NO_THROWS);
1211:       assertEquals(39, Node.EMPTY_BLOCK);
1212:       assertEquals(56, Node.CHANGE_TIME);
1213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1214:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1215:       assertEquals(57, Node.REFLECTED_OBJECT);
1216:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1217:       assertEquals(4095, Node.COLUMN_MASK);
1218:       assertEquals(49, Node.DIRECT_EVAL);
1219:       assertEquals(48, Node.DIRECTIVES);
1220:       assertEquals(37, Node.OPT_ARG_NAME);
1221:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1222:       assertEquals(30, Node.VAR_ARGS_NAME);
1223:       assertEquals(49, Node.DIRECT_EVAL);
1224:       assertEquals(32, Node.INCRDECR_PROP);
1225:       assertEquals(1, Node.DECR_FLAG);
1226:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1227:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1228:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1229:       assertEquals(2, Node.POST_FLAG);
1230:       assertEquals(57, Node.LAST_PROP);
1231:       assertEquals(47, Node.IS_DISPATCHER);
1232:       assertEquals(12, Node.COLUMN_BITS);
1233:       assertEquals(40, Node.ORIGINALNAME_PROP);
1234:       assertEquals(50, Node.FREE_CALL);
1235:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1236:       assertEquals(43, Node.IS_CONSTANT_NAME);
1237:       assertEquals(46, Node.IS_NAMESPACE);
1238:       assertEquals(54, Node.SLASH_V);
1239:       assertEquals(4095, Node.COLUMN_MASK);
1240:       assertEquals(55, Node.INFERRED_FUNCTION);
1241:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1243:       assertEquals(39, Node.EMPTY_BLOCK);
1244:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1245:       assertEquals(52, Node.LENGTH);
1246:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1247:       assertEquals(53, Node.INPUT_ID);
1248:       assertEquals(29, Node.JSDOC_INFO_PROP);
1249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1250:       assertEquals(37, Node.OPT_ARG_NAME);
1251:       assertEquals(8, Node.FLAG_NO_THROWS);
1252:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1253:       assertEquals(36, Node.QUOTED_PROP);
1254:       assertEquals(48, Node.DIRECTIVES);
1255:       assertEquals(56, Node.CHANGE_TIME);
1256:       assertEquals(57, Node.REFLECTED_OBJECT);
1257:       assertEquals(43, Node.IS_CONSTANT_NAME);
1258:       assertEquals(36, Node.QUOTED_PROP);
1259:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1260:       assertEquals(53, Node.INPUT_ID);
1261:       assertEquals(8, Node.FLAG_NO_THROWS);
1262:       assertEquals(39, Node.EMPTY_BLOCK);
1263:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1264:       assertEquals(55, Node.INFERRED_FUNCTION);
1265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1267:       assertEquals(57, Node.REFLECTED_OBJECT);
1268:       assertEquals(56, Node.CHANGE_TIME);
1269:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1270:       assertEquals(37, Node.OPT_ARG_NAME);
1271:       assertEquals(48, Node.DIRECTIVES);
1272:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1273:       assertEquals(4095, Node.COLUMN_MASK);
1274:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1275:       assertEquals(49, Node.DIRECT_EVAL);
1276:       assertEquals(30, Node.VAR_ARGS_NAME);
1277:       assertEquals(1, Node.DECR_FLAG);
1278:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1279:       assertEquals(12, Node.COLUMN_BITS);
1280:       assertEquals(57, Node.LAST_PROP);
1281:       assertEquals(46, Node.IS_NAMESPACE);
1282:       assertEquals(54, Node.SLASH_V);
1283:       assertEquals(52, Node.LENGTH);
1284:       assertEquals(32, Node.INCRDECR_PROP);
1285:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1286:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1287:       assertEquals(29, Node.JSDOC_INFO_PROP);
1288:       assertEquals(50, Node.FREE_CALL);
1289:       assertEquals(47, Node.IS_DISPATCHER);
1290:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1291:       assertEquals(2, Node.POST_FLAG);
1292:       assertEquals(40, Node.ORIGINALNAME_PROP);
1293:       
1294:       Node node4 = Node.newString("", 31, 2);
1295:       assertFalse(node4.equals((Object)node0));
1296:       assertFalse(node4.equals((Object)node2));
1297:       assertFalse(node4.equals((Object)node3));
1298:       assertFalse(node4.equals((Object)node1));
1299:       assertFalse(node4.isFunction());
1300:       assertFalse(node4.isRegExp());
1301:       assertFalse(node4.isTrue());
1302:       assertFalse(node4.isVoid());
1303:       assertEquals(2, node4.getCharno());
1304:       assertFalse(node4.isDefaultCase());
1305:       assertFalse(node4.isTry());
1306:       assertFalse(node4.isArrayLit());
1307:       assertFalse(node4.isCatch());
1308:       assertEquals(40, node4.getType());
1309:       assertFalse(node4.isFor());
1310:       assertEquals(0, node4.getChildCount());
1311:       assertFalse(node4.isParamList());
1312:       assertFalse(node4.isStringKey());
1313:       assertFalse(node4.isGetterDef());
1314:       assertFalse(node4.isDebugger());
1315:       assertFalse(node4.isInc());
1316:       assertTrue(node4.isString());
1317:       assertFalse(node4.isCase());
1318:       assertFalse(node4.hasMoreThanOneChild());
1319:       assertFalse(node4.isFalse());
1320:       assertFalse(node4.isThrow());
1321:       assertFalse(node4.isContinue());
1322:       assertFalse(node4.isBlock());
1323:       assertFalse(node4.isHook());
1324:       assertFalse(node4.isSetterDef());
1325:       assertFalse(node4.isNE());
1326:       assertFalse(node4.isIf());
1327:       assertFalse(node4.isIn());
1328:       assertFalse(node4.isScript());
1329:       assertFalse(node4.isExprResult());
1330:       assertFalse(node4.hasOneChild());
1331:       assertFalse(node4.isCast());
1332:       assertFalse(node4.isInstanceOf());
1333:       assertFalse(node4.isWith());
1334:       assertFalse(node4.isAssign());
1335:       assertFalse(node4.isDec());
1336:       assertFalse(node4.hasChildren());
1337:       assertFalse(node4.isThis());
1338:       assertFalse(node4.isNumber());
1339:       assertEquals(31, node4.getLineno());
1340:       assertFalse(node4.isLabelName());
1341:       assertFalse(node4.isGetProp());
1342:       assertFalse(node4.isObjectLit());
1343:       assertFalse(node4.isAnd());
1344:       assertFalse(node4.isNot());
1345:       assertFalse(node4.isSwitch());
1346:       assertFalse(node4.isWhile());
1347:       assertFalse(node4.isDo());
1348:       assertFalse(node4.isAdd());
1349:       assertFalse(node4.isNew());
1350:       assertFalse(node4.isVar());
1351:       assertFalse(node4.isCall());
1352:       assertFalse(node4.isReturn());
1353:       assertFalse(node4.isLabel());
1354:       assertEquals(126978, node4.getSourcePosition());
1355:       assertFalse(node4.isComma());
1356:       assertFalse(node4.isNull());
1357:       assertFalse(node4.isTypeOf());
1358:       assertFalse(node4.isAssignAdd());
1359:       assertFalse(node4.isEmpty());
1360:       assertFalse(node4.isName());
1361:       assertFalse(node4.isDelProp());
1362:       assertFalse(node4.isGetElem());
1363:       assertFalse(node4.isBreak());
1364:       assertFalse(node4.isOr());
1365:       assertNotNull(node4);
1366:       assertEquals(32, Node.INCRDECR_PROP);
1367:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1368:       assertEquals(37, Node.OPT_ARG_NAME);
1369:       assertEquals(29, Node.JSDOC_INFO_PROP);
1370:       assertEquals(49, Node.DIRECT_EVAL);
1371:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1372:       assertEquals(56, Node.CHANGE_TIME);
1373:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1374:       assertEquals(46, Node.IS_NAMESPACE);
1375:       assertEquals(54, Node.SLASH_V);
1376:       assertEquals(52, Node.LENGTH);
1377:       assertEquals(40, Node.ORIGINALNAME_PROP);
1378:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1379:       assertEquals(53, Node.INPUT_ID);
1380:       assertEquals(30, Node.VAR_ARGS_NAME);
1381:       assertEquals(57, Node.LAST_PROP);
1382:       assertEquals(2, Node.POST_FLAG);
1383:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1384:       assertEquals(47, Node.IS_DISPATCHER);
1385:       assertEquals(48, Node.DIRECTIVES);
1386:       assertEquals(8, Node.FLAG_NO_THROWS);
1387:       assertEquals(4095, Node.COLUMN_MASK);
1388:       assertEquals(55, Node.INFERRED_FUNCTION);
1389:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1390:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1391:       assertEquals(39, Node.EMPTY_BLOCK);
1392:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1393:       assertEquals(50, Node.FREE_CALL);
1394:       assertEquals(43, Node.IS_CONSTANT_NAME);
1395:       assertEquals(36, Node.QUOTED_PROP);
1396:       assertEquals(57, Node.REFLECTED_OBJECT);
1397:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1398:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1399:       assertEquals(1, Node.DECR_FLAG);
1400:       assertEquals(12, Node.COLUMN_BITS);
1401:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1402:       
1403:       Node node5 = Node.newNumber((double) 32, 241, 38);
1404:       assertFalse(node5.equals((Object)node2));
1405:       assertFalse(node5.equals((Object)node4));
1406:       assertFalse(node5.equals((Object)node3));
1407:       assertFalse(node5.equals((Object)node0));
1408:       assertFalse(node5.equals((Object)node1));
1409:       assertNotSame(node5, node0);
1410:       assertFalse(node5.isBlock());
1411:       assertFalse(node5.isNew());
1412:       assertFalse(node5.isAdd());
1413:       assertFalse(node5.isVar());
1414:       assertEquals(39, node5.getType());
1415:       assertFalse(node5.isStringKey());
1416:       assertEquals(38, node5.getCharno());
1417:       assertFalse(node5.isName());
1418:       assertFalse(node5.hasMoreThanOneChild());
1419:       assertFalse(node5.isContinue());
1420:       assertFalse(node5.isCall());
1421:       assertFalse(node5.isParamList());
1422:       assertFalse(node5.isDec());
1423:       assertFalse(node5.isTypeOf());
1424:       assertFalse(node5.isReturn());
1425:       assertFalse(node5.hasChildren());
1426:       assertFalse(node5.isWhile());
1427:       assertFalse(node5.hasOneChild());
1428:       assertFalse(node5.isExprResult());
1429:       assertFalse(node5.isVoid());
1430:       assertFalse(node5.isTrue());
1431:       assertFalse(node5.isGetElem());
1432:       assertFalse(node5.isLabelName());
1433:       assertFalse(node5.isAssign());
1434:       assertFalse(node5.isDelProp());
1435:       assertFalse(node5.isArrayLit());
1436:       assertFalse(node5.isOr());
1437:       assertFalse(node5.isAssignAdd());
1438:       assertEquals(0, node5.getChildCount());
1439:       assertFalse(node5.isNull());
1440:       assertFalse(node5.isLabel());
1441:       assertFalse(node5.isDo());
1442:       assertFalse(node5.isEmpty());
1443:       assertFalse(node5.isDefaultCase());
1444:       assertEquals(241, node5.getLineno());
1445:       assertFalse(node5.isSwitch());
1446:       assertFalse(node5.isHook());
1447:       assertFalse(node5.isFalse());
1448:       assertFalse(node5.isBreak());
1449:       assertEquals(987174, node5.getSourcePosition());
1450:       assertFalse(node5.isGetterDef());
1451:       assertFalse(node5.isThis());
1452:       assertFalse(node5.isComma());
1453:       assertFalse(node5.isCase());
1454:       assertFalse(node5.isNot());
1455:       assertFalse(node5.isObjectLit());
1456:       assertFalse(node5.isFor());
1457:       assertFalse(node5.isString());
1458:       assertFalse(node5.isScript());
1459:       assertTrue(node5.isNumber());
1460:       assertFalse(node5.isGetProp());
1461:       assertFalse(node5.isTry());
1462:       assertFalse(node5.isFunction());
1463:       assertFalse(node5.isRegExp());
1464:       assertFalse(node5.isDebugger());
1465:       assertFalse(node5.isCatch());
1466:       assertFalse(node5.isWith());
1467:       assertFalse(node5.isAnd());
1468:       assertFalse(node5.isIf());
1469:       assertFalse(node5.isInstanceOf());
1470:       assertFalse(node5.isCast());
1471:       assertFalse(node5.isIn());
1472:       assertFalse(node5.isNE());
1473:       assertFalse(node5.isThrow());
1474:       assertFalse(node5.isSetterDef());
1475:       assertFalse(node5.isInc());
1476:       assertNotNull(node5);
1477:       assertEquals(4095, Node.COLUMN_MASK);
1478:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1479:       assertEquals(36, Node.QUOTED_PROP);
1480:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1481:       assertEquals(50, Node.FREE_CALL);
1482:       assertEquals(8, Node.FLAG_NO_THROWS);
1483:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1484:       assertEquals(55, Node.INFERRED_FUNCTION);
1485:       assertEquals(39, Node.EMPTY_BLOCK);
1486:       assertEquals(53, Node.INPUT_ID);
1487:       assertEquals(54, Node.SLASH_V);
1488:       assertEquals(47, Node.IS_DISPATCHER);
1489:       assertEquals(43, Node.IS_CONSTANT_NAME);
1490:       assertEquals(2, Node.POST_FLAG);
1491:       assertEquals(30, Node.VAR_ARGS_NAME);
1492:       assertEquals(40, Node.ORIGINALNAME_PROP);
1493:       assertEquals(32, Node.INCRDECR_PROP);
1494:       assertEquals(46, Node.IS_NAMESPACE);
1495:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1496:       assertEquals(12, Node.COLUMN_BITS);
1497:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1498:       assertEquals(57, Node.LAST_PROP);
1499:       assertEquals(1, Node.DECR_FLAG);
1500:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1501:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1502:       assertEquals(29, Node.JSDOC_INFO_PROP);
1503:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1504:       assertEquals(52, Node.LENGTH);
1505:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1506:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1507:       assertEquals(57, Node.REFLECTED_OBJECT);
1508:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1509:       assertEquals(56, Node.CHANGE_TIME);
1510:       assertEquals(49, Node.DIRECT_EVAL);
1511:       assertEquals(48, Node.DIRECTIVES);
1512:       assertEquals(37, Node.OPT_ARG_NAME);
1513:       
1514:       Node node6 = Node.newString("`[[5`~'ZD|cNsy", 37, 48);
1515:       assertFalse(node6.equals((Object)node4));
1516:       assertFalse(node6.equals((Object)node0));
1517:       assertFalse(node6.equals((Object)node5));
1518:       assertFalse(node6.equals((Object)node3));
1519:       assertFalse(node6.equals((Object)node2));
1520:       assertFalse(node6.equals((Object)node1));
1521:       assertNotSame(node6, node4);
1522:       assertFalse(node6.isExprResult());
1523:       assertFalse(node6.isScript());
1524:       assertFalse(node6.isNot());
1525:       assertFalse(node6.isWith());
1526:       assertFalse(node6.hasOneChild());
1527:       assertFalse(node6.isComma());
1528:       assertFalse(node6.isThis());
1529:       assertFalse(node6.isReturn());
1530:       assertFalse(node6.hasChildren());
1531:       assertFalse(node6.isInstanceOf());
1532:       assertFalse(node6.isDec());
1533:       assertFalse(node6.isOr());
1534:       assertFalse(node6.isTypeOf());
1535:       assertFalse(node6.isAssign());
1536:       assertFalse(node6.hasMoreThanOneChild());
1537:       assertFalse(node6.isGetElem());
1538:       assertFalse(node6.isBreak());
1539:       assertFalse(node6.isNew());
1540:       assertFalse(node6.isAdd());
1541:       assertFalse(node6.isBlock());
1542:       assertFalse(node6.isCase());
1543:       assertFalse(node6.isVar());
1544:       assertFalse(node6.isHook());
1545:       assertFalse(node6.isAssignAdd());
1546:       assertFalse(node6.isDo());
1547:       assertTrue(node6.isString());
1548:       assertFalse(node6.isParamList());
1549:       assertFalse(node6.isLabel());
1550:       assertEquals(48, node6.getCharno());
1551:       assertFalse(node6.isGetterDef());
1552:       assertEquals(0, node6.getChildCount());
1553:       assertFalse(node6.isNumber());
1554:       assertFalse(node6.isStringKey());
1555:       assertFalse(node6.isArrayLit());
1556:       assertEquals(151600, node6.getSourcePosition());
1557:       assertFalse(node6.isLabelName());
1558:       assertFalse(node6.isSwitch());
1559:       assertFalse(node6.isTrue());
1560:       assertFalse(node6.isDebugger());
1561:       assertFalse(node6.isVoid());
1562:       assertFalse(node6.isRegExp());
1563:       assertFalse(node6.isFunction());
1564:       assertEquals(40, node6.getType());
1565:       assertFalse(node6.isFor());
1566:       assertFalse(node6.isEmpty());
1567:       assertFalse(node6.isTry());
1568:       assertFalse(node6.isDefaultCase());
1569:       assertFalse(node6.isNE());
1570:       assertFalse(node6.isNull());
1571:       assertFalse(node6.isSetterDef());
1572:       assertFalse(node6.isIn());
1573:       assertFalse(node6.isCall());
1574:       assertFalse(node6.isCatch());
1575:       assertFalse(node6.isIf());
1576:       assertFalse(node6.isDelProp());
1577:       assertFalse(node6.isName());
1578:       assertFalse(node6.isInc());
1579:       assertFalse(node6.isThrow());
1580:       assertFalse(node6.isWhile());
1581:       assertFalse(node6.isGetProp());
1582:       assertEquals(37, node6.getLineno());
1583:       assertFalse(node6.isFalse());
1584:       assertFalse(node6.isObjectLit());
1585:       assertFalse(node6.isAnd());
1586:       assertFalse(node6.isContinue());
1587:       assertFalse(node6.isCast());
1588:       assertNotNull(node6);
1589:       assertEquals(12, Node.COLUMN_BITS);
1590:       assertEquals(46, Node.IS_NAMESPACE);
1591:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1592:       assertEquals(2, Node.POST_FLAG);
1593:       assertEquals(30, Node.VAR_ARGS_NAME);
1594:       assertEquals(56, Node.CHANGE_TIME);
1595:       assertEquals(37, Node.OPT_ARG_NAME);
1596:       assertEquals(49, Node.DIRECT_EVAL);
1597:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1598:       assertEquals(54, Node.SLASH_V);
1599:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1600:       assertEquals(50, Node.FREE_CALL);
1601:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1602:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1603:       assertEquals(32, Node.INCRDECR_PROP);
1604:       assertEquals(1, Node.DECR_FLAG);
1605:       assertEquals(55, Node.INFERRED_FUNCTION);
1606:       assertEquals(8, Node.FLAG_NO_THROWS);
1607:       assertEquals(4095, Node.COLUMN_MASK);
1608:       assertEquals(43, Node.IS_CONSTANT_NAME);
1609:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1610:       assertEquals(40, Node.ORIGINALNAME_PROP);
1611:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1612:       assertEquals(48, Node.DIRECTIVES);
1613:       assertEquals(52, Node.LENGTH);
1614:       assertEquals(53, Node.INPUT_ID);
1615:       assertEquals(57, Node.REFLECTED_OBJECT);
1616:       assertEquals(36, Node.QUOTED_PROP);
1617:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1618:       assertEquals(57, Node.LAST_PROP);
1619:       assertEquals(47, Node.IS_DISPATCHER);
1620:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1621:       assertEquals(29, Node.JSDOC_INFO_PROP);
1622:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1623:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1624:       assertEquals(39, Node.EMPTY_BLOCK);
1625:       
1626:       // Undeclared exception!
1627:       try { 
1628:         node5.getChildBefore(node6);
1629:         fail("Expecting exception: NullPointerException");
1630:       
1631:       } catch(NullPointerException e) {
1632:          //
1633:          // no message in exception (getMessage() returned null)
1634:          //
1635:          verifyException("com.google.javascript.rhino.Node", e);
1636:       }
1637:   }
1638: }
RegularFileObject[/tmp/EvoSuite_71_1628161371778/com/google/javascript/rhino/Node_71_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:02:52 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_71_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_71_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_71_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:02:52.122 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertNotNull(node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

Node node1 = new Node(17, 52, 47);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertEquals(47, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals(213039, node1.getSourcePosition());
assertEquals(17, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertEquals(52, node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertNotNull(node1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);

Node node2 = new Node(55, node1);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertEquals(47, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals(213039, node1.getSourcePosition());
assertEquals(17, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertEquals(52, node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isStringKey());
assertEquals(55, node2.getType());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isGetProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertNotNull(node2);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

node0.setType((-2042));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertEquals((-2042), node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertEquals((-2042), node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

boolean boolean0 = node0.isNew();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertEquals((-2042), node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(boolean0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

node2.setSourceFileForTesting("");
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertEquals(47, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals(213039, node1.getSourcePosition());
assertEquals(17, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertEquals(52, node1.getLineno());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isStringKey());
assertEquals(55, node2.getType());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCase());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isGetProp());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThrow());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertNotSame(node1, node2);
assertSame(node1, node3);
assertSame(node3, node1);
assertNotSame(node3, node2);
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertEquals((-2042), node0.getType());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertEquals(17, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isScript());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isIn());
assertFalse(node3.isEmpty());
assertEquals(17, node3.getType());
assertFalse(node3.isInc());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isRegExp());
assertFalse(node3.isLabelName());
assertFalse(node3.isWith());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isTry());
assertFalse(node3.isCase());
assertFalse(node3.isVar());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isBlock());
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isCall());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isContinue());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isCast());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isDec());
assertFalse(node3.isFunction());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDelProp());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDebugger());
assertFalse(node3.isString());
assertFalse(node3.isGetProp());
assertNotNull(node3);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node4 = Node.newString("", 31, 2);
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.isFunction());
assertFalse(node4.isRegExp());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertEquals(2, node4.getCharno());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isTry());
assertFalse(node4.isArrayLit());
assertFalse(node4.isCatch());
assertEquals(40, node4.getType());
assertFalse(node4.isFor());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isGetterDef());
assertFalse(node4.isDebugger());
assertFalse(node4.isInc());
assertTrue(node4.isString());
assertFalse(node4.isCase());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isContinue());
assertFalse(node4.isBlock());
assertFalse(node4.isHook());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isIn());
assertFalse(node4.isScript());
assertFalse(node4.isExprResult());
assertFalse(node4.hasOneChild());
assertFalse(node4.isCast());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isThis());
assertFalse(node4.isNumber());
assertEquals(31, node4.getLineno());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetProp());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isSwitch());
assertFalse(node4.isWhile());
assertFalse(node4.isDo());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isVar());
assertFalse(node4.isCall());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertEquals(126978, node4.getSourcePosition());
assertFalse(node4.isComma());
assertFalse(node4.isNull());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isEmpty());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isBreak());
assertFalse(node4.isOr());
assertNotNull(node4);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node5 = Node.newNumber((double) 32, 241, 38);
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertNotSame(node5, node0);
assertFalse(node5.isBlock());
assertFalse(node5.isNew());
assertFalse(node5.isAdd());
assertFalse(node5.isVar());
assertEquals(39, node5.getType());
assertFalse(node5.isStringKey());
assertEquals(38, node5.getCharno());
assertFalse(node5.isName());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isContinue());
assertFalse(node5.isCall());
assertFalse(node5.isParamList());
assertFalse(node5.isDec());
assertFalse(node5.isTypeOf());
assertFalse(node5.isReturn());
assertFalse(node5.hasChildren());
assertFalse(node5.isWhile());
assertFalse(node5.hasOneChild());
assertFalse(node5.isExprResult());
assertFalse(node5.isVoid());
assertFalse(node5.isTrue());
assertFalse(node5.isGetElem());
assertFalse(node5.isLabelName());
assertFalse(node5.isAssign());
assertFalse(node5.isDelProp());
assertFalse(node5.isArrayLit());
assertFalse(node5.isOr());
assertFalse(node5.isAssignAdd());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isNull());
assertFalse(node5.isLabel());
assertFalse(node5.isDo());
assertFalse(node5.isEmpty());
assertFalse(node5.isDefaultCase());
assertEquals(241, node5.getLineno());
assertFalse(node5.isSwitch());
assertFalse(node5.isHook());
assertFalse(node5.isFalse());
assertFalse(node5.isBreak());
assertEquals(987174, node5.getSourcePosition());
assertFalse(node5.isGetterDef());
assertFalse(node5.isThis());
assertFalse(node5.isComma());
assertFalse(node5.isCase());
assertFalse(node5.isNot());
assertFalse(node5.isObjectLit());
assertFalse(node5.isFor());
assertFalse(node5.isString());
assertFalse(node5.isScript());
assertTrue(node5.isNumber());
assertFalse(node5.isGetProp());
assertFalse(node5.isTry());
assertFalse(node5.isFunction());
assertFalse(node5.isRegExp());
assertFalse(node5.isDebugger());
assertFalse(node5.isCatch());
assertFalse(node5.isWith());
assertFalse(node5.isAnd());
assertFalse(node5.isIf());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isCast());
assertFalse(node5.isIn());
assertFalse(node5.isNE());
assertFalse(node5.isThrow());
assertFalse(node5.isSetterDef());
assertFalse(node5.isInc());
assertNotNull(node5);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

Node node6 = Node.newString("`[[5`~'ZD|cNsy", 37, 48);
assertFalse(node6.equals((Object)node4));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node1));
assertNotSame(node6, node4);
assertFalse(node6.isExprResult());
assertFalse(node6.isScript());
assertFalse(node6.isNot());
assertFalse(node6.isWith());
assertFalse(node6.hasOneChild());
assertFalse(node6.isComma());
assertFalse(node6.isThis());
assertFalse(node6.isReturn());
assertFalse(node6.hasChildren());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isDec());
assertFalse(node6.isOr());
assertFalse(node6.isTypeOf());
assertFalse(node6.isAssign());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isGetElem());
assertFalse(node6.isBreak());
assertFalse(node6.isNew());
assertFalse(node6.isAdd());
assertFalse(node6.isBlock());
assertFalse(node6.isCase());
assertFalse(node6.isVar());
assertFalse(node6.isHook());
assertFalse(node6.isAssignAdd());
assertFalse(node6.isDo());
assertTrue(node6.isString());
assertFalse(node6.isParamList());
assertFalse(node6.isLabel());
assertEquals(48, node6.getCharno());
assertFalse(node6.isGetterDef());
assertEquals(0, node6.getChildCount());
assertFalse(node6.isNumber());
assertFalse(node6.isStringKey());
assertFalse(node6.isArrayLit());
assertEquals(151600, node6.getSourcePosition());
assertFalse(node6.isLabelName());
assertFalse(node6.isSwitch());
assertFalse(node6.isTrue());
assertFalse(node6.isDebugger());
assertFalse(node6.isVoid());
assertFalse(node6.isRegExp());
assertFalse(node6.isFunction());
assertEquals(40, node6.getType());
assertFalse(node6.isFor());
assertFalse(node6.isEmpty());
assertFalse(node6.isTry());
assertFalse(node6.isDefaultCase());
assertFalse(node6.isNE());
assertFalse(node6.isNull());
assertFalse(node6.isSetterDef());
assertFalse(node6.isIn());
assertFalse(node6.isCall());
assertFalse(node6.isCatch());
assertFalse(node6.isIf());
assertFalse(node6.isDelProp());
assertFalse(node6.isName());
assertFalse(node6.isInc());
assertFalse(node6.isThrow());
assertFalse(node6.isWhile());
assertFalse(node6.isGetProp());
assertEquals(37, node6.getLineno());
assertFalse(node6.isFalse());
assertFalse(node6.isObjectLit());
assertFalse(node6.isAnd());
assertFalse(node6.isContinue());
assertFalse(node6.isCast());
assertNotNull(node6);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);

node5.getChildBefore(node6);

[MASTER] 11:02:52.438 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_73_1628161372365/com/google/javascript/rhino/Node_73_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_73_1628161372365/com/google/javascript/rhino/Node_73_tmp__ESTest_scaffolding.java]]
[MASTER] 11:02:52.438 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:52.438 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:52.438 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 716
[MASTER] 11:02:52.439 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_73_1628161372365/com/google/javascript/rhino/Node_73_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:02:52 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_73_tmp__ESTest extends Node_73_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(0.0, 124, 124);
22:       assertFalse(node0.isCatch());
23:       assertEquals(0, node0.getChildCount());
24:       assertFalse(node0.isStringKey());
25:       assertFalse(node0.isCall());
26:       assertFalse(node0.isNull());
27:       assertFalse(node0.isParamList());
28:       assertEquals(124, node0.getLineno());
29:       assertFalse(node0.isName());
30:       assertFalse(node0.isVoid());
31:       assertFalse(node0.isTrue());
32:       assertFalse(node0.isVar());
33:       assertFalse(node0.isAdd());
34:       assertFalse(node0.isFunction());
35:       assertFalse(node0.isEmpty());
36:       assertFalse(node0.isSetterDef());
37:       assertFalse(node0.isDefaultCase());
38:       assertFalse(node0.isNew());
39:       assertFalse(node0.isDo());
40:       assertTrue(node0.isNumber());
41:       assertFalse(node0.isReturn());
42:       assertFalse(node0.isContinue());
43:       assertFalse(node0.isDec());
44:       assertFalse(node0.isOr());
45:       assertFalse(node0.isTypeOf());
46:       assertFalse(node0.isGetElem());
47:       assertFalse(node0.isDelProp());
48:       assertFalse(node0.isExprResult());
49:       assertEquals(508028, node0.getSourcePosition());
50:       assertFalse(node0.isDebugger());
51:       assertFalse(node0.isAssign());
52:       assertFalse(node0.isWhile());
53:       assertFalse(node0.isString());
54:       assertFalse(node0.hasChildren());
55:       assertFalse(node0.isInstanceOf());
56:       assertFalse(node0.isGetProp());
57:       assertFalse(node0.isThis());
58:       assertFalse(node0.isComma());
59:       assertFalse(node0.isNot());
60:       assertFalse(node0.isObjectLit());
61:       assertFalse(node0.isWith());
62:       assertFalse(node0.isBreak());
63:       assertFalse(node0.isAnd());
64:       assertEquals(124, node0.getCharno());
65:       assertFalse(node0.isCast());
66:       assertFalse(node0.isFalse());
67:       assertFalse(node0.isThrow());
68:       assertFalse(node0.isInc());
69:       assertFalse(node0.isLabel());
70:       assertFalse(node0.isAssignAdd());
71:       assertFalse(node0.isIn());
72:       assertFalse(node0.hasMoreThanOneChild());
73:       assertFalse(node0.isGetterDef());
74:       assertFalse(node0.isIf());
75:       assertFalse(node0.isNE());
76:       assertFalse(node0.isSwitch());
77:       assertFalse(node0.isArrayLit());
78:       assertFalse(node0.isLabelName());
79:       assertFalse(node0.isHook());
80:       assertFalse(node0.isBlock());
81:       assertFalse(node0.isRegExp());
82:       assertEquals(39, node0.getType());
83:       assertFalse(node0.isCase());
84:       assertFalse(node0.isScript());
85:       assertFalse(node0.isFor());
86:       assertFalse(node0.hasOneChild());
87:       assertFalse(node0.isTry());
88:       assertNotNull(node0);
89:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
90:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
91:       assertEquals(47, Node.IS_DISPATCHER);
92:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
93:       assertEquals(29, Node.JSDOC_INFO_PROP);
94:       assertEquals(53, Node.INPUT_ID);
95:       assertEquals(32, Node.INCRDECR_PROP);
96:       assertEquals(55, Node.INFERRED_FUNCTION);
97:       assertEquals(12, Node.COLUMN_BITS);
98:       assertEquals(4095, Node.COLUMN_MASK);
99:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
100:       assertEquals(36, Node.QUOTED_PROP);
101:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
102:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
103:       assertEquals(56, Node.CHANGE_TIME);
104:       assertEquals(49, Node.DIRECT_EVAL);
105:       assertEquals(48, Node.DIRECTIVES);
106:       assertEquals(37, Node.OPT_ARG_NAME);
107:       assertEquals(40, Node.ORIGINALNAME_PROP);
108:       assertEquals(57, Node.REFLECTED_OBJECT);
109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
110:       assertEquals(52, Node.LENGTH);
111:       assertEquals(50, Node.FREE_CALL);
112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
114:       assertEquals(8, Node.FLAG_NO_THROWS);
115:       assertEquals(39, Node.EMPTY_BLOCK);
116:       assertEquals(57, Node.LAST_PROP);
117:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
118:       assertEquals(1, Node.DECR_FLAG);
119:       assertEquals(46, Node.IS_NAMESPACE);
120:       assertEquals(30, Node.VAR_ARGS_NAME);
121:       assertEquals(51, Node.STATIC_SOURCE_FILE);
122:       assertEquals(2, Node.POST_FLAG);
123:       assertEquals(54, Node.SLASH_V);
124:       assertEquals(43, Node.IS_CONSTANT_NAME);
125:       
126:       String string0 = "}?Zy4Up-D>t[";
127:       node0.putProp(124, "}?Zy4Up-D>t[");
128:       assertFalse(node0.isCatch());
129:       assertEquals(0, node0.getChildCount());
130:       assertFalse(node0.isStringKey());
131:       assertFalse(node0.isCall());
132:       assertFalse(node0.isNull());
133:       assertFalse(node0.isParamList());
134:       assertEquals(124, node0.getLineno());
135:       assertFalse(node0.isName());
136:       assertFalse(node0.isVoid());
137:       assertFalse(node0.isTrue());
138:       assertFalse(node0.isVar());
139:       assertFalse(node0.isAdd());
140:       assertFalse(node0.isFunction());
141:       assertFalse(node0.isEmpty());
142:       assertFalse(node0.isSetterDef());
143:       assertFalse(node0.isDefaultCase());
144:       assertFalse(node0.isNew());
145:       assertFalse(node0.isDo());
146:       assertTrue(node0.isNumber());
147:       assertFalse(node0.isReturn());
148:       assertFalse(node0.isContinue());
149:       assertFalse(node0.isDec());
150:       assertFalse(node0.isOr());
151:       assertFalse(node0.isTypeOf());
152:       assertFalse(node0.isGetElem());
153:       assertFalse(node0.isDelProp());
154:       assertFalse(node0.isExprResult());
155:       assertEquals(508028, node0.getSourcePosition());
156:       assertFalse(node0.isDebugger());
157:       assertFalse(node0.isAssign());
158:       assertFalse(node0.isWhile());
159:       assertFalse(node0.isString());
160:       assertFalse(node0.hasChildren());
161:       assertFalse(node0.isInstanceOf());
162:       assertFalse(node0.isGetProp());
163:       assertFalse(node0.isThis());
164:       assertFalse(node0.isComma());
165:       assertFalse(node0.isNot());
166:       assertFalse(node0.isObjectLit());
167:       assertFalse(node0.isWith());
168:       assertFalse(node0.isBreak());
169:       assertFalse(node0.isAnd());
170:       assertEquals(124, node0.getCharno());
171:       assertFalse(node0.isCast());
172:       assertFalse(node0.isFalse());
173:       assertFalse(node0.isThrow());
174:       assertFalse(node0.isInc());
175:       assertFalse(node0.isLabel());
176:       assertFalse(node0.isAssignAdd());
177:       assertFalse(node0.isIn());
178:       assertFalse(node0.hasMoreThanOneChild());
179:       assertFalse(node0.isGetterDef());
180:       assertFalse(node0.isIf());
181:       assertFalse(node0.isNE());
182:       assertFalse(node0.isSwitch());
183:       assertFalse(node0.isArrayLit());
184:       assertFalse(node0.isLabelName());
185:       assertFalse(node0.isHook());
186:       assertFalse(node0.isBlock());
187:       assertFalse(node0.isRegExp());
188:       assertEquals(39, node0.getType());
189:       assertFalse(node0.isCase());
190:       assertFalse(node0.isScript());
191:       assertFalse(node0.isFor());
192:       assertFalse(node0.hasOneChild());
193:       assertFalse(node0.isTry());
194:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
195:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
196:       assertEquals(47, Node.IS_DISPATCHER);
197:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
198:       assertEquals(29, Node.JSDOC_INFO_PROP);
199:       assertEquals(53, Node.INPUT_ID);
200:       assertEquals(32, Node.INCRDECR_PROP);
201:       assertEquals(55, Node.INFERRED_FUNCTION);
202:       assertEquals(12, Node.COLUMN_BITS);
203:       assertEquals(4095, Node.COLUMN_MASK);
204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
205:       assertEquals(36, Node.QUOTED_PROP);
206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
207:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
208:       assertEquals(56, Node.CHANGE_TIME);
209:       assertEquals(49, Node.DIRECT_EVAL);
210:       assertEquals(48, Node.DIRECTIVES);
211:       assertEquals(37, Node.OPT_ARG_NAME);
212:       assertEquals(40, Node.ORIGINALNAME_PROP);
213:       assertEquals(57, Node.REFLECTED_OBJECT);
214:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
215:       assertEquals(52, Node.LENGTH);
216:       assertEquals(50, Node.FREE_CALL);
217:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
218:       assertEquals(15, Node.NO_SIDE_EFFECTS);
219:       assertEquals(8, Node.FLAG_NO_THROWS);
220:       assertEquals(39, Node.EMPTY_BLOCK);
221:       assertEquals(57, Node.LAST_PROP);
222:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
223:       assertEquals(1, Node.DECR_FLAG);
224:       assertEquals(46, Node.IS_NAMESPACE);
225:       assertEquals(30, Node.VAR_ARGS_NAME);
226:       assertEquals(51, Node.STATIC_SOURCE_FILE);
227:       assertEquals(2, Node.POST_FLAG);
228:       assertEquals(54, Node.SLASH_V);
229:       assertEquals(43, Node.IS_CONSTANT_NAME);
230:       
231:       Node node1 = new Node((-377), node0, node0, node0);
232:       assertFalse(node1.equals((Object)node0));
233:       assertFalse(node0.isCatch());
234:       assertEquals(0, node0.getChildCount());
235:       assertFalse(node0.isStringKey());
236:       assertFalse(node0.isCall());
237:       assertFalse(node0.isNull());
238:       assertFalse(node0.isParamList());
239:       assertEquals(124, node0.getLineno());
240:       assertFalse(node0.isName());
241:       assertFalse(node0.isVoid());
242:       assertFalse(node0.isTrue());
243:       assertFalse(node0.isVar());
244:       assertFalse(node0.isAdd());
245:       assertFalse(node0.isFunction());
246:       assertFalse(node0.isEmpty());
247:       assertFalse(node0.isSetterDef());
248:       assertFalse(node0.isDefaultCase());
249:       assertFalse(node0.isNew());
250:       assertFalse(node0.isDo());
251:       assertTrue(node0.isNumber());
252:       assertFalse(node0.isReturn());
253:       assertFalse(node0.isContinue());
254:       assertFalse(node0.isDec());
255:       assertFalse(node0.isOr());
256:       assertFalse(node0.isTypeOf());
257:       assertFalse(node0.isGetElem());
258:       assertFalse(node0.isDelProp());
259:       assertFalse(node0.isExprResult());
260:       assertEquals(508028, node0.getSourcePosition());
261:       assertFalse(node0.isDebugger());
262:       assertFalse(node0.isAssign());
263:       assertFalse(node0.isWhile());
264:       assertFalse(node0.isString());
265:       assertFalse(node0.hasChildren());
266:       assertFalse(node0.isInstanceOf());
267:       assertFalse(node0.isGetProp());
268:       assertFalse(node0.isThis());
269:       assertFalse(node0.isComma());
270:       assertFalse(node0.isNot());
271:       assertFalse(node0.isObjectLit());
272:       assertFalse(node0.isWith());
273:       assertFalse(node0.isBreak());
274:       assertFalse(node0.isAnd());
275:       assertEquals(124, node0.getCharno());
276:       assertFalse(node0.isCast());
277:       assertFalse(node0.isFalse());
278:       assertFalse(node0.isThrow());
279:       assertFalse(node0.isInc());
280:       assertFalse(node0.isLabel());
281:       assertFalse(node0.isAssignAdd());
282:       assertFalse(node0.isIn());
283:       assertFalse(node0.hasMoreThanOneChild());
284:       assertFalse(node0.isGetterDef());
285:       assertFalse(node0.isIf());
286:       assertFalse(node0.isNE());
287:       assertFalse(node0.isSwitch());
288:       assertFalse(node0.isArrayLit());
289:       assertFalse(node0.isLabelName());
290:       assertFalse(node0.isHook());
291:       assertFalse(node0.isBlock());
292:       assertFalse(node0.isRegExp());
293:       assertEquals(39, node0.getType());
294:       assertFalse(node0.isCase());
295:       assertFalse(node0.isScript());
296:       assertFalse(node0.isFor());
297:       assertFalse(node0.hasOneChild());
298:       assertFalse(node0.isTry());
299:       assertFalse(node1.isStringKey());
300:       assertFalse(node1.isCall());
301:       assertFalse(node1.isNull());
302:       assertFalse(node1.isSetterDef());
303:       assertFalse(node1.isVar());
304:       assertFalse(node1.isParamList());
305:       assertFalse(node1.isName());
306:       assertFalse(node1.isNew());
307:       assertFalse(node1.isAdd());
308:       assertFalse(node1.isWhile());
309:       assertFalse(node1.isVoid());
310:       assertEquals((-1), node1.getLineno());
311:       assertFalse(node1.isBlock());
312:       assertFalse(node1.isReturn());
313:       assertFalse(node1.hasMoreThanOneChild());
314:       assertFalse(node1.isCatch());
315:       assertFalse(node1.isDec());
316:       assertFalse(node1.isRegExp());
317:       assertFalse(node1.isTypeOf());
318:       assertFalse(node1.isLabelName());
319:       assertFalse(node1.isEmpty());
320:       assertFalse(node1.isFor());
321:       assertFalse(node1.isGetElem());
322:       assertFalse(node1.isArrayLit());
323:       assertFalse(node1.isDelProp());
324:       assertFalse(node1.isOr());
325:       assertFalse(node1.isTry());
326:       assertFalse(node1.isTrue());
327:       assertFalse(node1.isNumber());
328:       assertFalse(node1.isGetterDef());
329:       assertFalse(node1.isDo());
330:       assertFalse(node1.isSwitch());
331:       assertFalse(node1.isDefaultCase());
332:       assertFalse(node1.isLabel());
333:       assertFalse(node1.isAssignAdd());
334:       assertFalse(node1.isThrow());
335:       assertFalse(node1.isBreak());
336:       assertEquals((-1), node1.getCharno());
337:       assertFalse(node1.isGetProp());
338:       assertFalse(node1.isInc());
339:       assertFalse(node1.isObjectLit());
340:       assertFalse(node1.isWith());
341:       assertFalse(node1.isCase());
342:       assertFalse(node1.isString());
343:       assertFalse(node1.isScript());
344:       assertTrue(node1.hasChildren());
345:       assertEquals(1, node1.getChildCount());
346:       assertFalse(node1.isHook());
347:       assertFalse(node1.isThis());
348:       assertFalse(node1.isExprResult());
349:       assertFalse(node1.isInstanceOf());
350:       assertFalse(node1.isComma());
351:       assertFalse(node1.isAssign());
352:       assertTrue(node1.hasOneChild());
353:       assertFalse(node1.isNE());
354:       assertFalse(node1.isIf());
355:       assertEquals((-1), node1.getSourcePosition());
356:       assertFalse(node1.isDebugger());
357:       assertFalse(node1.isIn());
358:       assertFalse(node1.isNot());
359:       assertEquals((-377), node1.getType());
360:       assertFalse(node1.isAnd());
361:       assertFalse(node1.isCast());
362:       assertFalse(node1.isFalse());
363:       assertFalse(node1.isContinue());
364:       assertFalse(node1.isFunction());
365:       assertNotNull(node1);
366:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
367:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
368:       assertEquals(47, Node.IS_DISPATCHER);
369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
370:       assertEquals(29, Node.JSDOC_INFO_PROP);
371:       assertEquals(53, Node.INPUT_ID);
372:       assertEquals(32, Node.INCRDECR_PROP);
373:       assertEquals(55, Node.INFERRED_FUNCTION);
374:       assertEquals(12, Node.COLUMN_BITS);
375:       assertEquals(4095, Node.COLUMN_MASK);
376:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
377:       assertEquals(36, Node.QUOTED_PROP);
378:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
379:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
380:       assertEquals(56, Node.CHANGE_TIME);
381:       assertEquals(49, Node.DIRECT_EVAL);
382:       assertEquals(48, Node.DIRECTIVES);
383:       assertEquals(37, Node.OPT_ARG_NAME);
384:       assertEquals(40, Node.ORIGINALNAME_PROP);
385:       assertEquals(57, Node.REFLECTED_OBJECT);
386:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
387:       assertEquals(52, Node.LENGTH);
388:       assertEquals(50, Node.FREE_CALL);
389:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
390:       assertEquals(15, Node.NO_SIDE_EFFECTS);
391:       assertEquals(8, Node.FLAG_NO_THROWS);
392:       assertEquals(39, Node.EMPTY_BLOCK);
393:       assertEquals(57, Node.LAST_PROP);
394:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
395:       assertEquals(1, Node.DECR_FLAG);
396:       assertEquals(46, Node.IS_NAMESPACE);
397:       assertEquals(30, Node.VAR_ARGS_NAME);
398:       assertEquals(51, Node.STATIC_SOURCE_FILE);
399:       assertEquals(2, Node.POST_FLAG);
400:       assertEquals(54, Node.SLASH_V);
401:       assertEquals(43, Node.IS_CONSTANT_NAME);
402:       assertEquals(43, Node.IS_CONSTANT_NAME);
403:       assertEquals(36, Node.QUOTED_PROP);
404:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
405:       assertEquals(53, Node.INPUT_ID);
406:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
407:       assertEquals(4095, Node.COLUMN_MASK);
408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
409:       assertEquals(32, Node.INCRDECR_PROP);
410:       assertEquals(51, Node.STATIC_SOURCE_FILE);
411:       assertEquals(46, Node.IS_NAMESPACE);
412:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
413:       assertEquals(50, Node.FREE_CALL);
414:       assertEquals(15, Node.NO_SIDE_EFFECTS);
415:       assertEquals(57, Node.LAST_PROP);
416:       assertEquals(54, Node.SLASH_V);
417:       assertEquals(49, Node.DIRECT_EVAL);
418:       assertEquals(1, Node.DECR_FLAG);
419:       assertEquals(12, Node.COLUMN_BITS);
420:       assertEquals(40, Node.ORIGINALNAME_PROP);
421:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
422:       assertEquals(2, Node.POST_FLAG);
423:       assertEquals(30, Node.VAR_ARGS_NAME);
424:       assertEquals(8, Node.FLAG_NO_THROWS);
425:       assertEquals(39, Node.EMPTY_BLOCK);
426:       assertEquals(47, Node.IS_DISPATCHER);
427:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
428:       assertEquals(56, Node.CHANGE_TIME);
429:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
430:       assertEquals(29, Node.JSDOC_INFO_PROP);
431:       assertEquals(37, Node.OPT_ARG_NAME);
432:       assertEquals(48, Node.DIRECTIVES);
433:       assertEquals(57, Node.REFLECTED_OBJECT);
434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
435:       assertEquals(55, Node.INFERRED_FUNCTION);
436:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
437:       assertEquals(52, Node.LENGTH);
438:       
439:       int int0 = node0.getIndexOfChild(node1);
440:       assertFalse(node0.equals((Object)node1));
441:       assertFalse(node1.equals((Object)node0));
442:       assertFalse(node0.isCatch());
443:       assertEquals(0, node0.getChildCount());
444:       assertFalse(node0.isStringKey());
445:       assertFalse(node0.isCall());
446:       assertFalse(node0.isNull());
447:       assertFalse(node0.isParamList());
448:       assertEquals(124, node0.getLineno());
449:       assertFalse(node0.isName());
450:       assertFalse(node0.isVoid());
451:       assertFalse(node0.isTrue());
452:       assertFalse(node0.isVar());
453:       assertFalse(node0.isAdd());
454:       assertFalse(node0.isFunction());
455:       assertFalse(node0.isEmpty());
456:       assertFalse(node0.isSetterDef());
457:       assertFalse(node0.isDefaultCase());
458:       assertFalse(node0.isNew());
459:       assertFalse(node0.isDo());
460:       assertTrue(node0.isNumber());
461:       assertFalse(node0.isReturn());
462:       assertFalse(node0.isContinue());
463:       assertFalse(node0.isDec());
464:       assertFalse(node0.isOr());
465:       assertFalse(node0.isTypeOf());
466:       assertFalse(node0.isGetElem());
467:       assertFalse(node0.isDelProp());
468:       assertFalse(node0.isExprResult());
469:       assertEquals(508028, node0.getSourcePosition());
470:       assertFalse(node0.isDebugger());
471:       assertFalse(node0.isAssign());
472:       assertFalse(node0.isWhile());
473:       assertFalse(node0.isString());
474:       assertFalse(node0.hasChildren());
475:       assertFalse(node0.isInstanceOf());
476:       assertFalse(node0.isGetProp());
477:       assertFalse(node0.isThis());
478:       assertFalse(node0.isComma());
479:       assertFalse(node0.isNot());
480:       assertFalse(node0.isObjectLit());
481:       assertFalse(node0.isWith());
482:       assertFalse(node0.isBreak());
483:       assertFalse(node0.isAnd());
484:       assertEquals(124, node0.getCharno());
485:       assertFalse(node0.isCast());
486:       assertFalse(node0.isFalse());
487:       assertFalse(node0.isThrow());
488:       assertFalse(node0.isInc());
489:       assertFalse(node0.isLabel());
490:       assertFalse(node0.isAssignAdd());
491:       assertFalse(node0.isIn());
492:       assertFalse(node0.hasMoreThanOneChild());
493:       assertFalse(node0.isGetterDef());
494:       assertFalse(node0.isIf());
495:       assertFalse(node0.isNE());
496:       assertFalse(node0.isSwitch());
497:       assertFalse(node0.isArrayLit());
498:       assertFalse(node0.isLabelName());
499:       assertFalse(node0.isHook());
500:       assertFalse(node0.isBlock());
501:       assertFalse(node0.isRegExp());
502:       assertEquals(39, node0.getType());
503:       assertFalse(node0.isCase());
504:       assertFalse(node0.isScript());
505:       assertFalse(node0.isFor());
506:       assertFalse(node0.hasOneChild());
507:       assertFalse(node0.isTry());
508:       assertFalse(node1.isStringKey());
509:       assertFalse(node1.isCall());
510:       assertFalse(node1.isNull());
511:       assertFalse(node1.isSetterDef());
512:       assertFalse(node1.isVar());
513:       assertFalse(node1.isParamList());
514:       assertFalse(node1.isName());
515:       assertFalse(node1.isNew());
516:       assertFalse(node1.isAdd());
517:       assertFalse(node1.isWhile());
518:       assertFalse(node1.isVoid());
519:       assertEquals((-1), node1.getLineno());
520:       assertFalse(node1.isBlock());
521:       assertFalse(node1.isReturn());
522:       assertFalse(node1.hasMoreThanOneChild());
523:       assertFalse(node1.isCatch());
524:       assertFalse(node1.isDec());
525:       assertFalse(node1.isRegExp());
526:       assertFalse(node1.isTypeOf());
527:       assertFalse(node1.isLabelName());
528:       assertFalse(node1.isEmpty());
529:       assertFalse(node1.isFor());
530:       assertFalse(node1.isGetElem());
531:       assertFalse(node1.isArrayLit());
532:       assertFalse(node1.isDelProp());
533:       assertFalse(node1.isOr());
534:       assertFalse(node1.isTry());
535:       assertFalse(node1.isTrue());
536:       assertFalse(node1.isNumber());
537:       assertFalse(node1.isGetterDef());
538:       assertFalse(node1.isDo());
539:       assertFalse(node1.isSwitch());
540:       assertFalse(node1.isDefaultCase());
541:       assertFalse(node1.isLabel());
542:       assertFalse(node1.isAssignAdd());
543:       assertFalse(node1.isThrow());
544:       assertFalse(node1.isBreak());
545:       assertEquals((-1), node1.getCharno());
546:       assertFalse(node1.isGetProp());
547:       assertFalse(node1.isInc());
548:       assertFalse(node1.isObjectLit());
549:       assertFalse(node1.isWith());
550:       assertFalse(node1.isCase());
551:       assertFalse(node1.isString());
552:       assertFalse(node1.isScript());
553:       assertTrue(node1.hasChildren());
554:       assertEquals(1, node1.getChildCount());
555:       assertFalse(node1.isHook());
556:       assertFalse(node1.isThis());
557:       assertFalse(node1.isExprResult());
558:       assertFalse(node1.isInstanceOf());
559:       assertFalse(node1.isComma());
560:       assertFalse(node1.isAssign());
561:       assertTrue(node1.hasOneChild());
562:       assertFalse(node1.isNE());
563:       assertFalse(node1.isIf());
564:       assertEquals((-1), node1.getSourcePosition());
565:       assertFalse(node1.isDebugger());
566:       assertFalse(node1.isIn());
567:       assertFalse(node1.isNot());
568:       assertEquals((-377), node1.getType());
569:       assertFalse(node1.isAnd());
570:       assertFalse(node1.isCast());
571:       assertFalse(node1.isFalse());
572:       assertFalse(node1.isContinue());
573:       assertFalse(node1.isFunction());
574:       assertEquals((-1), int0);
575:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
576:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
577:       assertEquals(47, Node.IS_DISPATCHER);
578:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
579:       assertEquals(29, Node.JSDOC_INFO_PROP);
580:       assertEquals(53, Node.INPUT_ID);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertEquals(55, Node.INFERRED_FUNCTION);
583:       assertEquals(12, Node.COLUMN_BITS);
584:       assertEquals(4095, Node.COLUMN_MASK);
585:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
586:       assertEquals(36, Node.QUOTED_PROP);
587:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
588:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
589:       assertEquals(56, Node.CHANGE_TIME);
590:       assertEquals(49, Node.DIRECT_EVAL);
591:       assertEquals(48, Node.DIRECTIVES);
592:       assertEquals(37, Node.OPT_ARG_NAME);
593:       assertEquals(40, Node.ORIGINALNAME_PROP);
594:       assertEquals(57, Node.REFLECTED_OBJECT);
595:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
596:       assertEquals(52, Node.LENGTH);
597:       assertEquals(50, Node.FREE_CALL);
598:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
599:       assertEquals(15, Node.NO_SIDE_EFFECTS);
600:       assertEquals(8, Node.FLAG_NO_THROWS);
601:       assertEquals(39, Node.EMPTY_BLOCK);
602:       assertEquals(57, Node.LAST_PROP);
603:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
604:       assertEquals(1, Node.DECR_FLAG);
605:       assertEquals(46, Node.IS_NAMESPACE);
606:       assertEquals(30, Node.VAR_ARGS_NAME);
607:       assertEquals(51, Node.STATIC_SOURCE_FILE);
608:       assertEquals(2, Node.POST_FLAG);
609:       assertEquals(54, Node.SLASH_V);
610:       assertEquals(43, Node.IS_CONSTANT_NAME);
611:       assertEquals(43, Node.IS_CONSTANT_NAME);
612:       assertEquals(36, Node.QUOTED_PROP);
613:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
614:       assertEquals(53, Node.INPUT_ID);
615:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
616:       assertEquals(4095, Node.COLUMN_MASK);
617:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
618:       assertEquals(32, Node.INCRDECR_PROP);
619:       assertEquals(51, Node.STATIC_SOURCE_FILE);
620:       assertEquals(46, Node.IS_NAMESPACE);
621:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
622:       assertEquals(50, Node.FREE_CALL);
623:       assertEquals(15, Node.NO_SIDE_EFFECTS);
624:       assertEquals(57, Node.LAST_PROP);
625:       assertEquals(54, Node.SLASH_V);
626:       assertEquals(49, Node.DIRECT_EVAL);
627:       assertEquals(1, Node.DECR_FLAG);
628:       assertEquals(12, Node.COLUMN_BITS);
629:       assertEquals(40, Node.ORIGINALNAME_PROP);
630:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
631:       assertEquals(2, Node.POST_FLAG);
632:       assertEquals(30, Node.VAR_ARGS_NAME);
633:       assertEquals(8, Node.FLAG_NO_THROWS);
634:       assertEquals(39, Node.EMPTY_BLOCK);
635:       assertEquals(47, Node.IS_DISPATCHER);
636:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
637:       assertEquals(56, Node.CHANGE_TIME);
638:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
639:       assertEquals(29, Node.JSDOC_INFO_PROP);
640:       assertEquals(37, Node.OPT_ARG_NAME);
641:       assertEquals(48, Node.DIRECTIVES);
642:       assertEquals(57, Node.REFLECTED_OBJECT);
643:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
644:       assertEquals(55, Node.INFERRED_FUNCTION);
645:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
646:       assertEquals(52, Node.LENGTH);
647:       
648:       Iterable<Node> iterable0 = node0.children();
649:       assertFalse(node0.equals((Object)node1));
650:       assertFalse(node0.isCatch());
651:       assertEquals(0, node0.getChildCount());
652:       assertFalse(node0.isStringKey());
653:       assertFalse(node0.isCall());
654:       assertFalse(node0.isNull());
655:       assertFalse(node0.isParamList());
656:       assertEquals(124, node0.getLineno());
657:       assertFalse(node0.isName());
658:       assertFalse(node0.isVoid());
659:       assertFalse(node0.isTrue());
660:       assertFalse(node0.isVar());
661:       assertFalse(node0.isAdd());
662:       assertFalse(node0.isFunction());
663:       assertFalse(node0.isEmpty());
664:       assertFalse(node0.isSetterDef());
665:       assertFalse(node0.isDefaultCase());
666:       assertFalse(node0.isNew());
667:       assertFalse(node0.isDo());
668:       assertTrue(node0.isNumber());
669:       assertFalse(node0.isReturn());
670:       assertFalse(node0.isContinue());
671:       assertFalse(node0.isDec());
672:       assertFalse(node0.isOr());
673:       assertFalse(node0.isTypeOf());
674:       assertFalse(node0.isGetElem());
675:       assertFalse(node0.isDelProp());
676:       assertFalse(node0.isExprResult());
677:       assertEquals(508028, node0.getSourcePosition());
678:       assertFalse(node0.isDebugger());
679:       assertFalse(node0.isAssign());
680:       assertFalse(node0.isWhile());
681:       assertFalse(node0.isString());
682:       assertFalse(node0.hasChildren());
683:       assertFalse(node0.isInstanceOf());
684:       assertFalse(node0.isGetProp());
685:       assertFalse(node0.isThis());
686:       assertFalse(node0.isComma());
687:       assertFalse(node0.isNot());
688:       assertFalse(node0.isObjectLit());
689:       assertFalse(node0.isWith());
690:       assertFalse(node0.isBreak());
691:       assertFalse(node0.isAnd());
692:       assertEquals(124, node0.getCharno());
693:       assertFalse(node0.isCast());
694:       assertFalse(node0.isFalse());
695:       assertFalse(node0.isThrow());
696:       assertFalse(node0.isInc());
697:       assertFalse(node0.isLabel());
698:       assertFalse(node0.isAssignAdd());
699:       assertFalse(node0.isIn());
700:       assertFalse(node0.hasMoreThanOneChild());
701:       assertFalse(node0.isGetterDef());
702:       assertFalse(node0.isIf());
703:       assertFalse(node0.isNE());
704:       assertFalse(node0.isSwitch());
705:       assertFalse(node0.isArrayLit());
706:       assertFalse(node0.isLabelName());
707:       assertFalse(node0.isHook());
708:       assertFalse(node0.isBlock());
709:       assertFalse(node0.isRegExp());
710:       assertEquals(39, node0.getType());
711:       assertFalse(node0.isCase());
712:       assertFalse(node0.isScript());
713:       assertFalse(node0.isFor());
714:       assertFalse(node0.hasOneChild());
715:       assertFalse(node0.isTry());
716:       assertFalse(iterable0.contains(node1));
717:       assertNotNull(iterable0);
718:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
719:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
720:       assertEquals(47, Node.IS_DISPATCHER);
721:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
722:       assertEquals(29, Node.JSDOC_INFO_PROP);
723:       assertEquals(53, Node.INPUT_ID);
724:       assertEquals(32, Node.INCRDECR_PROP);
725:       assertEquals(55, Node.INFERRED_FUNCTION);
726:       assertEquals(12, Node.COLUMN_BITS);
727:       assertEquals(4095, Node.COLUMN_MASK);
728:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
729:       assertEquals(36, Node.QUOTED_PROP);
730:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
731:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
732:       assertEquals(56, Node.CHANGE_TIME);
733:       assertEquals(49, Node.DIRECT_EVAL);
734:       assertEquals(48, Node.DIRECTIVES);
735:       assertEquals(37, Node.OPT_ARG_NAME);
736:       assertEquals(40, Node.ORIGINALNAME_PROP);
737:       assertEquals(57, Node.REFLECTED_OBJECT);
738:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
739:       assertEquals(52, Node.LENGTH);
740:       assertEquals(50, Node.FREE_CALL);
741:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
742:       assertEquals(15, Node.NO_SIDE_EFFECTS);
743:       assertEquals(8, Node.FLAG_NO_THROWS);
744:       assertEquals(39, Node.EMPTY_BLOCK);
745:       assertEquals(57, Node.LAST_PROP);
746:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
747:       assertEquals(1, Node.DECR_FLAG);
748:       assertEquals(46, Node.IS_NAMESPACE);
749:       assertEquals(30, Node.VAR_ARGS_NAME);
750:       assertEquals(51, Node.STATIC_SOURCE_FILE);
751:       assertEquals(2, Node.POST_FLAG);
752:       assertEquals(54, Node.SLASH_V);
753:       assertEquals(43, Node.IS_CONSTANT_NAME);
754:       
755:       Node node2 = null;
756:       node1.putIntProp(12, 31);
757:       assertFalse(node0.equals((Object)node1));
758:       assertFalse(node1.equals((Object)node0));
759:       assertFalse(node0.isCatch());
760:       assertEquals(0, node0.getChildCount());
761:       assertFalse(node0.isStringKey());
762:       assertFalse(node0.isCall());
763:       assertFalse(node0.isNull());
764:       assertFalse(node0.isParamList());
765:       assertEquals(124, node0.getLineno());
766:       assertFalse(node0.isName());
767:       assertFalse(node0.isVoid());
768:       assertFalse(node0.isTrue());
769:       assertFalse(node0.isVar());
770:       assertFalse(node0.isAdd());
771:       assertFalse(node0.isFunction());
772:       assertFalse(node0.isEmpty());
773:       assertFalse(node0.isSetterDef());
774:       assertFalse(node0.isDefaultCase());
775:       assertFalse(node0.isNew());
776:       assertFalse(node0.isDo());
777:       assertTrue(node0.isNumber());
778:       assertFalse(node0.isReturn());
779:       assertFalse(node0.isContinue());
780:       assertFalse(node0.isDec());
781:       assertFalse(node0.isOr());
782:       assertFalse(node0.isTypeOf());
783:       assertFalse(node0.isGetElem());
784:       assertFalse(node0.isDelProp());
785:       assertFalse(node0.isExprResult());
786:       assertEquals(508028, node0.getSourcePosition());
787:       assertFalse(node0.isDebugger());
788:       assertFalse(node0.isAssign());
789:       assertFalse(node0.isWhile());
790:       assertFalse(node0.isString());
791:       assertFalse(node0.hasChildren());
792:       assertFalse(node0.isInstanceOf());
793:       assertFalse(node0.isGetProp());
794:       assertFalse(node0.isThis());
795:       assertFalse(node0.isComma());
796:       assertFalse(node0.isNot());
797:       assertFalse(node0.isObjectLit());
798:       assertFalse(node0.isWith());
799:       assertFalse(node0.isBreak());
800:       assertFalse(node0.isAnd());
801:       assertEquals(124, node0.getCharno());
802:       assertFalse(node0.isCast());
803:       assertFalse(node0.isFalse());
804:       assertFalse(node0.isThrow());
805:       assertFalse(node0.isInc());
806:       assertFalse(node0.isLabel());
807:       assertFalse(node0.isAssignAdd());
808:       assertFalse(node0.isIn());
809:       assertFalse(node0.hasMoreThanOneChild());
810:       assertFalse(node0.isGetterDef());
811:       assertFalse(node0.isIf());
812:       assertFalse(node0.isNE());
813:       assertFalse(node0.isSwitch());
814:       assertFalse(node0.isArrayLit());
815:       assertFalse(node0.isLabelName());
816:       assertFalse(node0.isHook());
817:       assertFalse(node0.isBlock());
818:       assertFalse(node0.isRegExp());
819:       assertEquals(39, node0.getType());
820:       assertFalse(node0.isCase());
821:       assertFalse(node0.isScript());
822:       assertFalse(node0.isFor());
823:       assertFalse(node0.hasOneChild());
824:       assertFalse(node0.isTry());
825:       assertFalse(node1.isStringKey());
826:       assertFalse(node1.isCall());
827:       assertFalse(node1.isNull());
828:       assertFalse(node1.isSetterDef());
829:       assertFalse(node1.isVar());
830:       assertFalse(node1.isParamList());
831:       assertFalse(node1.isName());
832:       assertFalse(node1.isNew());
833:       assertFalse(node1.isAdd());
834:       assertFalse(node1.isWhile());
835:       assertFalse(node1.isVoid());
836:       assertEquals((-1), node1.getLineno());
837:       assertFalse(node1.isBlock());
838:       assertFalse(node1.isReturn());
839:       assertFalse(node1.hasMoreThanOneChild());
840:       assertFalse(node1.isCatch());
841:       assertFalse(node1.isDec());
842:       assertFalse(node1.isRegExp());
843:       assertFalse(node1.isTypeOf());
844:       assertFalse(node1.isLabelName());
845:       assertFalse(node1.isEmpty());
846:       assertFalse(node1.isFor());
847:       assertFalse(node1.isGetElem());
848:       assertFalse(node1.isArrayLit());
849:       assertFalse(node1.isDelProp());
850:       assertFalse(node1.isOr());
851:       assertFalse(node1.isTry());
852:       assertFalse(node1.isTrue());
853:       assertFalse(node1.isNumber());
854:       assertFalse(node1.isGetterDef());
855:       assertFalse(node1.isDo());
856:       assertFalse(node1.isSwitch());
857:       assertFalse(node1.isDefaultCase());
858:       assertFalse(node1.isLabel());
859:       assertFalse(node1.isAssignAdd());
860:       assertFalse(node1.isThrow());
861:       assertFalse(node1.isBreak());
862:       assertEquals((-1), node1.getCharno());
863:       assertFalse(node1.isGetProp());
864:       assertFalse(node1.isInc());
865:       assertFalse(node1.isObjectLit());
866:       assertFalse(node1.isWith());
867:       assertFalse(node1.isCase());
868:       assertFalse(node1.isString());
869:       assertFalse(node1.isScript());
870:       assertTrue(node1.hasChildren());
871:       assertEquals(1, node1.getChildCount());
872:       assertFalse(node1.isHook());
873:       assertFalse(node1.isThis());
874:       assertFalse(node1.isExprResult());
875:       assertFalse(node1.isInstanceOf());
876:       assertFalse(node1.isComma());
877:       assertFalse(node1.isAssign());
878:       assertTrue(node1.hasOneChild());
879:       assertFalse(node1.isNE());
880:       assertFalse(node1.isIf());
881:       assertEquals((-1), node1.getSourcePosition());
882:       assertFalse(node1.isDebugger());
883:       assertFalse(node1.isIn());
884:       assertFalse(node1.isNot());
885:       assertEquals((-377), node1.getType());
886:       assertFalse(node1.isAnd());
887:       assertFalse(node1.isCast());
888:       assertFalse(node1.isFalse());
889:       assertFalse(node1.isContinue());
890:       assertFalse(node1.isFunction());
891:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
892:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
893:       assertEquals(47, Node.IS_DISPATCHER);
894:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
895:       assertEquals(29, Node.JSDOC_INFO_PROP);
896:       assertEquals(53, Node.INPUT_ID);
897:       assertEquals(32, Node.INCRDECR_PROP);
898:       assertEquals(55, Node.INFERRED_FUNCTION);
899:       assertEquals(12, Node.COLUMN_BITS);
900:       assertEquals(4095, Node.COLUMN_MASK);
901:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
902:       assertEquals(36, Node.QUOTED_PROP);
903:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
904:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
905:       assertEquals(56, Node.CHANGE_TIME);
906:       assertEquals(49, Node.DIRECT_EVAL);
907:       assertEquals(48, Node.DIRECTIVES);
908:       assertEquals(37, Node.OPT_ARG_NAME);
909:       assertEquals(40, Node.ORIGINALNAME_PROP);
910:       assertEquals(57, Node.REFLECTED_OBJECT);
911:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
912:       assertEquals(52, Node.LENGTH);
913:       assertEquals(50, Node.FREE_CALL);
914:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
915:       assertEquals(15, Node.NO_SIDE_EFFECTS);
916:       assertEquals(8, Node.FLAG_NO_THROWS);
917:       assertEquals(39, Node.EMPTY_BLOCK);
918:       assertEquals(57, Node.LAST_PROP);
919:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
920:       assertEquals(1, Node.DECR_FLAG);
921:       assertEquals(46, Node.IS_NAMESPACE);
922:       assertEquals(30, Node.VAR_ARGS_NAME);
923:       assertEquals(51, Node.STATIC_SOURCE_FILE);
924:       assertEquals(2, Node.POST_FLAG);
925:       assertEquals(54, Node.SLASH_V);
926:       assertEquals(43, Node.IS_CONSTANT_NAME);
927:       assertEquals(43, Node.IS_CONSTANT_NAME);
928:       assertEquals(36, Node.QUOTED_PROP);
929:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
930:       assertEquals(53, Node.INPUT_ID);
931:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
932:       assertEquals(4095, Node.COLUMN_MASK);
933:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
934:       assertEquals(32, Node.INCRDECR_PROP);
935:       assertEquals(51, Node.STATIC_SOURCE_FILE);
936:       assertEquals(46, Node.IS_NAMESPACE);
937:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
938:       assertEquals(50, Node.FREE_CALL);
939:       assertEquals(15, Node.NO_SIDE_EFFECTS);
940:       assertEquals(57, Node.LAST_PROP);
941:       assertEquals(54, Node.SLASH_V);
942:       assertEquals(49, Node.DIRECT_EVAL);
943:       assertEquals(1, Node.DECR_FLAG);
944:       assertEquals(12, Node.COLUMN_BITS);
945:       assertEquals(40, Node.ORIGINALNAME_PROP);
946:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
947:       assertEquals(2, Node.POST_FLAG);
948:       assertEquals(30, Node.VAR_ARGS_NAME);
949:       assertEquals(8, Node.FLAG_NO_THROWS);
950:       assertEquals(39, Node.EMPTY_BLOCK);
951:       assertEquals(47, Node.IS_DISPATCHER);
952:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
953:       assertEquals(56, Node.CHANGE_TIME);
954:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
955:       assertEquals(29, Node.JSDOC_INFO_PROP);
956:       assertEquals(37, Node.OPT_ARG_NAME);
957:       assertEquals(48, Node.DIRECTIVES);
958:       assertEquals(57, Node.REFLECTED_OBJECT);
959:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
960:       assertEquals(55, Node.INFERRED_FUNCTION);
961:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
962:       assertEquals(52, Node.LENGTH);
963:       
964:       Node node3 = null;
965:       try {
966:         node3 = new Node(4095, node0, node0, node0, 528, 103);
967:         fail("Expecting exception: IllegalArgumentException");
968:       
969:       } catch(IllegalArgumentException e) {
970:          //
971:          // no message in exception (getMessage() returned null)
972:          //
973:          verifyException("com.google.common.base.Preconditions", e);
974:       }
975:   }
976: }
RegularFileObject[/tmp/EvoSuite_73_1628161372365/com/google/javascript/rhino/Node_73_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:02:52 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_73_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_73_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_73_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:02:52.462 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0, 124, 124);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(124, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertEquals(508028, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertEquals(124, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertNotNull(node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

String string0 = "}?Zy4Up-D>t[";
node0.putProp(124, "}?Zy4Up-D>t[");
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(124, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertEquals(508028, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertEquals(124, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node1 = new Node((-377), node0, node0, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(124, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertEquals(508028, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertEquals(124, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDec());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertEquals((-377), node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertNotNull(node1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);

int int0 = node0.getIndexOfChild(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(124, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertEquals(508028, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertEquals(124, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDec());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertEquals((-377), node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals((-1), int0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(124, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertEquals(508028, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertEquals(124, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node2 = null;
node1.putIntProp(12, 31);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertEquals(124, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isExprResult());
assertEquals(508028, node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertEquals(124, node0.getCharno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertEquals(39, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDec());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isOr());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertEquals((-377), node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);

Node node3 = new Node(4095, node0, node0, node0, 528, 103);

[MASTER] 11:02:52.681 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_75_1628161372593/com/google/javascript/rhino/Node_75_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_75_1628161372593/com/google/javascript/rhino/Node_75_tmp__ESTest_scaffolding.java]]
[MASTER] 11:02:52.681 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:52.681 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:52.681 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 509
[MASTER] 11:02:52.682 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_75_1628161372593/com/google/javascript/rhino/Node_75_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:02:52 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_75_tmp__ESTest extends Node_75_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(0);
22:       assertFalse(node0.isThrow());
23:       assertFalse(node0.isHook());
24:       assertFalse(node0.isBreak());
25:       assertEquals((-1), node0.getCharno());
26:       assertFalse(node0.isGetProp());
27:       assertFalse(node0.isInc());
28:       assertFalse(node0.isString());
29:       assertFalse(node0.isObjectLit());
30:       assertFalse(node0.isAnd());
31:       assertFalse(node0.isSwitch());
32:       assertFalse(node0.isFalse());
33:       assertFalse(node0.isCast());
34:       assertFalse(node0.isEmpty());
35:       assertFalse(node0.isGetElem());
36:       assertFalse(node0.isDelProp());
37:       assertFalse(node0.isDebugger());
38:       assertFalse(node0.isTrue());
39:       assertEquals((-1), node0.getSourcePosition());
40:       assertFalse(node0.isNot());
41:       assertFalse(node0.isOr());
42:       assertFalse(node0.isWhile());
43:       assertFalse(node0.isExprResult());
44:       assertFalse(node0.isVoid());
45:       assertFalse(node0.isComma());
46:       assertEquals(0, node0.getType());
47:       assertFalse(node0.isReturn());
48:       assertFalse(node0.hasChildren());
49:       assertFalse(node0.isDec());
50:       assertFalse(node0.isTypeOf());
51:       assertFalse(node0.isAssign());
52:       assertFalse(node0.isCall());
53:       assertFalse(node0.isStringKey());
54:       assertFalse(node0.isVar());
55:       assertFalse(node0.isName());
56:       assertFalse(node0.isParamList());
57:       assertFalse(node0.isNew());
58:       assertFalse(node0.isNull());
59:       assertFalse(node0.isAdd());
60:       assertFalse(node0.isSetterDef());
61:       assertFalse(node0.isContinue());
62:       assertFalse(node0.isAssignAdd());
63:       assertFalse(node0.isDo());
64:       assertFalse(node0.isDefaultCase());
65:       assertFalse(node0.isLabel());
66:       assertEquals(0, node0.getChildCount());
67:       assertFalse(node0.isFunction());
68:       assertFalse(node0.isArrayLit());
69:       assertFalse(node0.isFor());
70:       assertFalse(node0.isIf());
71:       assertFalse(node0.hasOneChild());
72:       assertFalse(node0.isLabelName());
73:       assertFalse(node0.isTry());
74:       assertFalse(node0.isScript());
75:       assertFalse(node0.isNE());
76:       assertFalse(node0.isGetterDef());
77:       assertFalse(node0.isIn());
78:       assertFalse(node0.isNumber());
79:       assertFalse(node0.isCatch());
80:       assertFalse(node0.isCase());
81:       assertEquals((-1), node0.getLineno());
82:       assertFalse(node0.isBlock());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isInstanceOf());
85:       assertFalse(node0.isRegExp());
86:       assertFalse(node0.hasMoreThanOneChild());
87:       assertFalse(node0.isWith());
88:       assertNotNull(node0);
89:       assertEquals(43, Node.IS_CONSTANT_NAME);
90:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
91:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
92:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
93:       assertEquals(4095, Node.COLUMN_MASK);
94:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
95:       assertEquals(47, Node.IS_DISPATCHER);
96:       assertEquals(56, Node.CHANGE_TIME);
97:       assertEquals(29, Node.JSDOC_INFO_PROP);
98:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
99:       assertEquals(37, Node.OPT_ARG_NAME);
100:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
101:       assertEquals(39, Node.EMPTY_BLOCK);
102:       assertEquals(48, Node.DIRECTIVES);
103:       assertEquals(52, Node.LENGTH);
104:       assertEquals(53, Node.INPUT_ID);
105:       assertEquals(57, Node.REFLECTED_OBJECT);
106:       assertEquals(55, Node.INFERRED_FUNCTION);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(36, Node.QUOTED_PROP);
109:       assertEquals(15, Node.NO_SIDE_EFFECTS);
110:       assertEquals(57, Node.LAST_PROP);
111:       assertEquals(49, Node.DIRECT_EVAL);
112:       assertEquals(32, Node.INCRDECR_PROP);
113:       assertEquals(1, Node.DECR_FLAG);
114:       assertEquals(12, Node.COLUMN_BITS);
115:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
116:       assertEquals(2, Node.POST_FLAG);
117:       assertEquals(30, Node.VAR_ARGS_NAME);
118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
119:       assertEquals(40, Node.ORIGINALNAME_PROP);
120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
121:       assertEquals(46, Node.IS_NAMESPACE);
122:       assertEquals(54, Node.SLASH_V);
123:       assertEquals(51, Node.STATIC_SOURCE_FILE);
124:       assertEquals(50, Node.FREE_CALL);
125:       
126:       Node node1 = Node.newString(54, "<");
127:       assertFalse(node1.equals((Object)node0));
128:       assertEquals((-1), node1.getCharno());
129:       assertFalse(node1.isThrow());
130:       assertFalse(node1.isHook());
131:       assertFalse(node1.isBreak());
132:       assertFalse(node1.isFalse());
133:       assertFalse(node1.isSwitch());
134:       assertFalse(node1.isIn());
135:       assertFalse(node1.isNE());
136:       assertEquals(54, node1.getType());
137:       assertFalse(node1.isEmpty());
138:       assertFalse(node1.isInc());
139:       assertFalse(node1.isTrue());
140:       assertFalse(node1.isDebugger());
141:       assertFalse(node1.isDelProp());
142:       assertFalse(node1.hasChildren());
143:       assertFalse(node1.isDec());
144:       assertFalse(node1.isAssign());
145:       assertFalse(node1.isTypeOf());
146:       assertFalse(node1.isFunction());
147:       assertFalse(node1.isExprResult());
148:       assertFalse(node1.isVoid());
149:       assertFalse(node1.isCast());
150:       assertFalse(node1.isGetElem());
151:       assertFalse(node1.isObjectLit());
152:       assertFalse(node1.isAnd());
153:       assertFalse(node1.isComma());
154:       assertEquals((-1), node1.getSourcePosition());
155:       assertFalse(node1.isReturn());
156:       assertFalse(node1.isString());
157:       assertFalse(node1.isWhile());
158:       assertFalse(node1.isNot());
159:       assertFalse(node1.isGetProp());
160:       assertFalse(node1.isStringKey());
161:       assertFalse(node1.isBlock());
162:       assertFalse(node1.isVar());
163:       assertFalse(node1.isName());
164:       assertFalse(node1.isContinue());
165:       assertFalse(node1.isCall());
166:       assertEquals(0, node1.getChildCount());
167:       assertFalse(node1.isOr());
168:       assertEquals((-1), node1.getLineno());
169:       assertFalse(node1.isAssignAdd());
170:       assertFalse(node1.isLabel());
171:       assertFalse(node1.isNull());
172:       assertFalse(node1.isDo());
173:       assertFalse(node1.isDefaultCase());
174:       assertFalse(node1.isNew());
175:       assertFalse(node1.isAdd());
176:       assertFalse(node1.isSetterDef());
177:       assertFalse(node1.hasOneChild());
178:       assertFalse(node1.isTry());
179:       assertFalse(node1.isFor());
180:       assertFalse(node1.isLabelName());
181:       assertFalse(node1.isRegExp());
182:       assertFalse(node1.isWith());
183:       assertFalse(node1.isIf());
184:       assertFalse(node1.isCatch());
185:       assertFalse(node1.isArrayLit());
186:       assertFalse(node1.isInstanceOf());
187:       assertFalse(node1.hasMoreThanOneChild());
188:       assertFalse(node1.isParamList());
189:       assertFalse(node1.isThis());
190:       assertFalse(node1.isGetterDef());
191:       assertFalse(node1.isNumber());
192:       assertFalse(node1.isScript());
193:       assertFalse(node1.isCase());
194:       assertNotNull(node1);
195:       assertEquals(55, Node.INFERRED_FUNCTION);
196:       assertEquals(4095, Node.COLUMN_MASK);
197:       assertEquals(43, Node.IS_CONSTANT_NAME);
198:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
199:       assertEquals(8, Node.FLAG_NO_THROWS);
200:       assertEquals(39, Node.EMPTY_BLOCK);
201:       assertEquals(36, Node.QUOTED_PROP);
202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
203:       assertEquals(53, Node.INPUT_ID);
204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
206:       assertEquals(56, Node.CHANGE_TIME);
207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
208:       assertEquals(57, Node.REFLECTED_OBJECT);
209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
210:       assertEquals(37, Node.OPT_ARG_NAME);
211:       assertEquals(48, Node.DIRECTIVES);
212:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
214:       assertEquals(1, Node.DECR_FLAG);
215:       assertEquals(49, Node.DIRECT_EVAL);
216:       assertEquals(32, Node.INCRDECR_PROP);
217:       assertEquals(30, Node.VAR_ARGS_NAME);
218:       assertEquals(57, Node.LAST_PROP);
219:       assertEquals(12, Node.COLUMN_BITS);
220:       assertEquals(46, Node.IS_NAMESPACE);
221:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
222:       assertEquals(52, Node.LENGTH);
223:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
225:       assertEquals(29, Node.JSDOC_INFO_PROP);
226:       assertEquals(40, Node.ORIGINALNAME_PROP);
227:       assertEquals(50, Node.FREE_CALL);
228:       assertEquals(47, Node.IS_DISPATCHER);
229:       assertEquals(54, Node.SLASH_V);
230:       assertEquals(2, Node.POST_FLAG);
231:       
232:       int int0 = node1.getIndexOfChild(node0);
233:       assertFalse(node0.equals((Object)node1));
234:       assertFalse(node1.equals((Object)node0));
235:       assertFalse(node0.isThrow());
236:       assertFalse(node0.isHook());
237:       assertFalse(node0.isBreak());
238:       assertEquals((-1), node0.getCharno());
239:       assertFalse(node0.isGetProp());
240:       assertFalse(node0.isInc());
241:       assertFalse(node0.isString());
242:       assertFalse(node0.isObjectLit());
243:       assertFalse(node0.isAnd());
244:       assertFalse(node0.isSwitch());
245:       assertFalse(node0.isFalse());
246:       assertFalse(node0.isCast());
247:       assertFalse(node0.isEmpty());
248:       assertFalse(node0.isGetElem());
249:       assertFalse(node0.isDelProp());
250:       assertFalse(node0.isDebugger());
251:       assertFalse(node0.isTrue());
252:       assertEquals((-1), node0.getSourcePosition());
253:       assertFalse(node0.isNot());
254:       assertFalse(node0.isOr());
255:       assertFalse(node0.isWhile());
256:       assertFalse(node0.isExprResult());
257:       assertFalse(node0.isVoid());
258:       assertFalse(node0.isComma());
259:       assertEquals(0, node0.getType());
260:       assertFalse(node0.isReturn());
261:       assertFalse(node0.hasChildren());
262:       assertFalse(node0.isDec());
263:       assertFalse(node0.isTypeOf());
264:       assertFalse(node0.isAssign());
265:       assertFalse(node0.isCall());
266:       assertFalse(node0.isStringKey());
267:       assertFalse(node0.isVar());
268:       assertFalse(node0.isName());
269:       assertFalse(node0.isParamList());
270:       assertFalse(node0.isNew());
271:       assertFalse(node0.isNull());
272:       assertFalse(node0.isAdd());
273:       assertFalse(node0.isSetterDef());
274:       assertFalse(node0.isContinue());
275:       assertFalse(node0.isAssignAdd());
276:       assertFalse(node0.isDo());
277:       assertFalse(node0.isDefaultCase());
278:       assertFalse(node0.isLabel());
279:       assertEquals(0, node0.getChildCount());
280:       assertFalse(node0.isFunction());
281:       assertFalse(node0.isArrayLit());
282:       assertFalse(node0.isFor());
283:       assertFalse(node0.isIf());
284:       assertFalse(node0.hasOneChild());
285:       assertFalse(node0.isLabelName());
286:       assertFalse(node0.isTry());
287:       assertFalse(node0.isScript());
288:       assertFalse(node0.isNE());
289:       assertFalse(node0.isGetterDef());
290:       assertFalse(node0.isIn());
291:       assertFalse(node0.isNumber());
292:       assertFalse(node0.isCatch());
293:       assertFalse(node0.isCase());
294:       assertEquals((-1), node0.getLineno());
295:       assertFalse(node0.isBlock());
296:       assertFalse(node0.isThis());
297:       assertFalse(node0.isInstanceOf());
298:       assertFalse(node0.isRegExp());
299:       assertFalse(node0.hasMoreThanOneChild());
300:       assertFalse(node0.isWith());
301:       assertEquals((-1), node1.getCharno());
302:       assertFalse(node1.isThrow());
303:       assertFalse(node1.isHook());
304:       assertFalse(node1.isBreak());
305:       assertFalse(node1.isFalse());
306:       assertFalse(node1.isSwitch());
307:       assertFalse(node1.isIn());
308:       assertFalse(node1.isNE());
309:       assertEquals(54, node1.getType());
310:       assertFalse(node1.isEmpty());
311:       assertFalse(node1.isInc());
312:       assertFalse(node1.isTrue());
313:       assertFalse(node1.isDebugger());
314:       assertFalse(node1.isDelProp());
315:       assertFalse(node1.hasChildren());
316:       assertFalse(node1.isDec());
317:       assertFalse(node1.isAssign());
318:       assertFalse(node1.isTypeOf());
319:       assertFalse(node1.isFunction());
320:       assertFalse(node1.isExprResult());
321:       assertFalse(node1.isVoid());
322:       assertFalse(node1.isCast());
323:       assertFalse(node1.isGetElem());
324:       assertFalse(node1.isObjectLit());
325:       assertFalse(node1.isAnd());
326:       assertFalse(node1.isComma());
327:       assertEquals((-1), node1.getSourcePosition());
328:       assertFalse(node1.isReturn());
329:       assertFalse(node1.isString());
330:       assertFalse(node1.isWhile());
331:       assertFalse(node1.isNot());
332:       assertFalse(node1.isGetProp());
333:       assertFalse(node1.isStringKey());
334:       assertFalse(node1.isBlock());
335:       assertFalse(node1.isVar());
336:       assertFalse(node1.isName());
337:       assertFalse(node1.isContinue());
338:       assertFalse(node1.isCall());
339:       assertEquals(0, node1.getChildCount());
340:       assertFalse(node1.isOr());
341:       assertEquals((-1), node1.getLineno());
342:       assertFalse(node1.isAssignAdd());
343:       assertFalse(node1.isLabel());
344:       assertFalse(node1.isNull());
345:       assertFalse(node1.isDo());
346:       assertFalse(node1.isDefaultCase());
347:       assertFalse(node1.isNew());
348:       assertFalse(node1.isAdd());
349:       assertFalse(node1.isSetterDef());
350:       assertFalse(node1.hasOneChild());
351:       assertFalse(node1.isTry());
352:       assertFalse(node1.isFor());
353:       assertFalse(node1.isLabelName());
354:       assertFalse(node1.isRegExp());
355:       assertFalse(node1.isWith());
356:       assertFalse(node1.isIf());
357:       assertFalse(node1.isCatch());
358:       assertFalse(node1.isArrayLit());
359:       assertFalse(node1.isInstanceOf());
360:       assertFalse(node1.hasMoreThanOneChild());
361:       assertFalse(node1.isParamList());
362:       assertFalse(node1.isThis());
363:       assertFalse(node1.isGetterDef());
364:       assertFalse(node1.isNumber());
365:       assertFalse(node1.isScript());
366:       assertFalse(node1.isCase());
367:       assertEquals((-1), int0);
368:       assertEquals(43, Node.IS_CONSTANT_NAME);
369:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
371:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
372:       assertEquals(4095, Node.COLUMN_MASK);
373:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
374:       assertEquals(47, Node.IS_DISPATCHER);
375:       assertEquals(56, Node.CHANGE_TIME);
376:       assertEquals(29, Node.JSDOC_INFO_PROP);
377:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
378:       assertEquals(37, Node.OPT_ARG_NAME);
379:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
380:       assertEquals(39, Node.EMPTY_BLOCK);
381:       assertEquals(48, Node.DIRECTIVES);
382:       assertEquals(52, Node.LENGTH);
383:       assertEquals(53, Node.INPUT_ID);
384:       assertEquals(57, Node.REFLECTED_OBJECT);
385:       assertEquals(55, Node.INFERRED_FUNCTION);
386:       assertEquals(8, Node.FLAG_NO_THROWS);
387:       assertEquals(36, Node.QUOTED_PROP);
388:       assertEquals(15, Node.NO_SIDE_EFFECTS);
389:       assertEquals(57, Node.LAST_PROP);
390:       assertEquals(49, Node.DIRECT_EVAL);
391:       assertEquals(32, Node.INCRDECR_PROP);
392:       assertEquals(1, Node.DECR_FLAG);
393:       assertEquals(12, Node.COLUMN_BITS);
394:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
395:       assertEquals(2, Node.POST_FLAG);
396:       assertEquals(30, Node.VAR_ARGS_NAME);
397:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
398:       assertEquals(40, Node.ORIGINALNAME_PROP);
399:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
400:       assertEquals(46, Node.IS_NAMESPACE);
401:       assertEquals(54, Node.SLASH_V);
402:       assertEquals(51, Node.STATIC_SOURCE_FILE);
403:       assertEquals(50, Node.FREE_CALL);
404:       assertEquals(55, Node.INFERRED_FUNCTION);
405:       assertEquals(4095, Node.COLUMN_MASK);
406:       assertEquals(43, Node.IS_CONSTANT_NAME);
407:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
408:       assertEquals(8, Node.FLAG_NO_THROWS);
409:       assertEquals(39, Node.EMPTY_BLOCK);
410:       assertEquals(36, Node.QUOTED_PROP);
411:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
412:       assertEquals(53, Node.INPUT_ID);
413:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
414:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
415:       assertEquals(56, Node.CHANGE_TIME);
416:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
417:       assertEquals(57, Node.REFLECTED_OBJECT);
418:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
419:       assertEquals(37, Node.OPT_ARG_NAME);
420:       assertEquals(48, Node.DIRECTIVES);
421:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
423:       assertEquals(1, Node.DECR_FLAG);
424:       assertEquals(49, Node.DIRECT_EVAL);
425:       assertEquals(32, Node.INCRDECR_PROP);
426:       assertEquals(30, Node.VAR_ARGS_NAME);
427:       assertEquals(57, Node.LAST_PROP);
428:       assertEquals(12, Node.COLUMN_BITS);
429:       assertEquals(46, Node.IS_NAMESPACE);
430:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
431:       assertEquals(52, Node.LENGTH);
432:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
434:       assertEquals(29, Node.JSDOC_INFO_PROP);
435:       assertEquals(40, Node.ORIGINALNAME_PROP);
436:       assertEquals(50, Node.FREE_CALL);
437:       assertEquals(47, Node.IS_DISPATCHER);
438:       assertEquals(54, Node.SLASH_V);
439:       assertEquals(2, Node.POST_FLAG);
440:       
441:       Iterable<Node> iterable0 = node1.children();
442:       assertFalse(node1.equals((Object)node0));
443:       assertEquals((-1), node1.getCharno());
444:       assertFalse(node1.isThrow());
445:       assertFalse(node1.isHook());
446:       assertFalse(node1.isBreak());
447:       assertFalse(node1.isFalse());
448:       assertFalse(node1.isSwitch());
449:       assertFalse(node1.isIn());
450:       assertFalse(node1.isNE());
451:       assertEquals(54, node1.getType());
452:       assertFalse(node1.isEmpty());
453:       assertFalse(node1.isInc());
454:       assertFalse(node1.isTrue());
455:       assertFalse(node1.isDebugger());
456:       assertFalse(node1.isDelProp());
457:       assertFalse(node1.hasChildren());
458:       assertFalse(node1.isDec());
459:       assertFalse(node1.isAssign());
460:       assertFalse(node1.isTypeOf());
461:       assertFalse(node1.isFunction());
462:       assertFalse(node1.isExprResult());
463:       assertFalse(node1.isVoid());
464:       assertFalse(node1.isCast());
465:       assertFalse(node1.isGetElem());
466:       assertFalse(node1.isObjectLit());
467:       assertFalse(node1.isAnd());
468:       assertFalse(node1.isComma());
469:       assertEquals((-1), node1.getSourcePosition());
470:       assertFalse(node1.isReturn());
471:       assertFalse(node1.isString());
472:       assertFalse(node1.isWhile());
473:       assertFalse(node1.isNot());
474:       assertFalse(node1.isGetProp());
475:       assertFalse(node1.isStringKey());
476:       assertFalse(node1.isBlock());
477:       assertFalse(node1.isVar());
478:       assertFalse(node1.isName());
479:       assertFalse(node1.isContinue());
480:       assertFalse(node1.isCall());
481:       assertEquals(0, node1.getChildCount());
482:       assertFalse(node1.isOr());
483:       assertEquals((-1), node1.getLineno());
484:       assertFalse(node1.isAssignAdd());
485:       assertFalse(node1.isLabel());
486:       assertFalse(node1.isNull());
487:       assertFalse(node1.isDo());
488:       assertFalse(node1.isDefaultCase());
489:       assertFalse(node1.isNew());
490:       assertFalse(node1.isAdd());
491:       assertFalse(node1.isSetterDef());
492:       assertFalse(node1.hasOneChild());
493:       assertFalse(node1.isTry());
494:       assertFalse(node1.isFor());
495:       assertFalse(node1.isLabelName());
496:       assertFalse(node1.isRegExp());
497:       assertFalse(node1.isWith());
498:       assertFalse(node1.isIf());
499:       assertFalse(node1.isCatch());
500:       assertFalse(node1.isArrayLit());
501:       assertFalse(node1.isInstanceOf());
502:       assertFalse(node1.hasMoreThanOneChild());
503:       assertFalse(node1.isParamList());
504:       assertFalse(node1.isThis());
505:       assertFalse(node1.isGetterDef());
506:       assertFalse(node1.isNumber());
507:       assertFalse(node1.isScript());
508:       assertFalse(node1.isCase());
509:       assertFalse(iterable0.contains(node0));
510:       assertNotNull(iterable0);
511:       assertEquals(55, Node.INFERRED_FUNCTION);
512:       assertEquals(4095, Node.COLUMN_MASK);
513:       assertEquals(43, Node.IS_CONSTANT_NAME);
514:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
515:       assertEquals(8, Node.FLAG_NO_THROWS);
516:       assertEquals(39, Node.EMPTY_BLOCK);
517:       assertEquals(36, Node.QUOTED_PROP);
518:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
519:       assertEquals(53, Node.INPUT_ID);
520:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
521:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
522:       assertEquals(56, Node.CHANGE_TIME);
523:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
524:       assertEquals(57, Node.REFLECTED_OBJECT);
525:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
526:       assertEquals(37, Node.OPT_ARG_NAME);
527:       assertEquals(48, Node.DIRECTIVES);
528:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
529:       assertEquals(51, Node.STATIC_SOURCE_FILE);
530:       assertEquals(1, Node.DECR_FLAG);
531:       assertEquals(49, Node.DIRECT_EVAL);
532:       assertEquals(32, Node.INCRDECR_PROP);
533:       assertEquals(30, Node.VAR_ARGS_NAME);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(12, Node.COLUMN_BITS);
536:       assertEquals(46, Node.IS_NAMESPACE);
537:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
538:       assertEquals(52, Node.LENGTH);
539:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
540:       assertEquals(15, Node.NO_SIDE_EFFECTS);
541:       assertEquals(29, Node.JSDOC_INFO_PROP);
542:       assertEquals(40, Node.ORIGINALNAME_PROP);
543:       assertEquals(50, Node.FREE_CALL);
544:       assertEquals(47, Node.IS_DISPATCHER);
545:       assertEquals(54, Node.SLASH_V);
546:       assertEquals(2, Node.POST_FLAG);
547:       
548:       boolean boolean0 = node1.isComma();
549:       assertFalse(node1.equals((Object)node0));
550:       assertEquals((-1), node1.getCharno());
551:       assertFalse(node1.isThrow());
552:       assertFalse(node1.isHook());
553:       assertFalse(node1.isBreak());
554:       assertFalse(node1.isFalse());
555:       assertFalse(node1.isSwitch());
556:       assertFalse(node1.isIn());
557:       assertFalse(node1.isNE());
558:       assertEquals(54, node1.getType());
559:       assertFalse(node1.isEmpty());
560:       assertFalse(node1.isInc());
561:       assertFalse(node1.isTrue());
562:       assertFalse(node1.isDebugger());
563:       assertFalse(node1.isDelProp());
564:       assertFalse(node1.hasChildren());
565:       assertFalse(node1.isDec());
566:       assertFalse(node1.isAssign());
567:       assertFalse(node1.isTypeOf());
568:       assertFalse(node1.isFunction());
569:       assertFalse(node1.isExprResult());
570:       assertFalse(node1.isVoid());
571:       assertFalse(node1.isCast());
572:       assertFalse(node1.isGetElem());
573:       assertFalse(node1.isObjectLit());
574:       assertFalse(node1.isAnd());
575:       assertFalse(node1.isComma());
576:       assertEquals((-1), node1.getSourcePosition());
577:       assertFalse(node1.isReturn());
578:       assertFalse(node1.isString());
579:       assertFalse(node1.isWhile());
580:       assertFalse(node1.isNot());
581:       assertFalse(node1.isGetProp());
582:       assertFalse(node1.isStringKey());
583:       assertFalse(node1.isBlock());
584:       assertFalse(node1.isVar());
585:       assertFalse(node1.isName());
586:       assertFalse(node1.isContinue());
587:       assertFalse(node1.isCall());
588:       assertEquals(0, node1.getChildCount());
589:       assertFalse(node1.isOr());
590:       assertEquals((-1), node1.getLineno());
591:       assertFalse(node1.isAssignAdd());
592:       assertFalse(node1.isLabel());
593:       assertFalse(node1.isNull());
594:       assertFalse(node1.isDo());
595:       assertFalse(node1.isDefaultCase());
596:       assertFalse(node1.isNew());
597:       assertFalse(node1.isAdd());
598:       assertFalse(node1.isSetterDef());
599:       assertFalse(node1.hasOneChild());
600:       assertFalse(node1.isTry());
601:       assertFalse(node1.isFor());
602:       assertFalse(node1.isLabelName());
603:       assertFalse(node1.isRegExp());
604:       assertFalse(node1.isWith());
605:       assertFalse(node1.isIf());
606:       assertFalse(node1.isCatch());
607:       assertFalse(node1.isArrayLit());
608:       assertFalse(node1.isInstanceOf());
609:       assertFalse(node1.hasMoreThanOneChild());
610:       assertFalse(node1.isParamList());
611:       assertFalse(node1.isThis());
612:       assertFalse(node1.isGetterDef());
613:       assertFalse(node1.isNumber());
614:       assertFalse(node1.isScript());
615:       assertFalse(node1.isCase());
616:       assertFalse(boolean0);
617:       assertEquals(55, Node.INFERRED_FUNCTION);
618:       assertEquals(4095, Node.COLUMN_MASK);
619:       assertEquals(43, Node.IS_CONSTANT_NAME);
620:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
621:       assertEquals(8, Node.FLAG_NO_THROWS);
622:       assertEquals(39, Node.EMPTY_BLOCK);
623:       assertEquals(36, Node.QUOTED_PROP);
624:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
625:       assertEquals(53, Node.INPUT_ID);
626:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
627:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
628:       assertEquals(56, Node.CHANGE_TIME);
629:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
630:       assertEquals(57, Node.REFLECTED_OBJECT);
631:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
632:       assertEquals(37, Node.OPT_ARG_NAME);
633:       assertEquals(48, Node.DIRECTIVES);
634:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
635:       assertEquals(51, Node.STATIC_SOURCE_FILE);
636:       assertEquals(1, Node.DECR_FLAG);
637:       assertEquals(49, Node.DIRECT_EVAL);
638:       assertEquals(32, Node.INCRDECR_PROP);
639:       assertEquals(30, Node.VAR_ARGS_NAME);
640:       assertEquals(57, Node.LAST_PROP);
641:       assertEquals(12, Node.COLUMN_BITS);
642:       assertEquals(46, Node.IS_NAMESPACE);
643:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
644:       assertEquals(52, Node.LENGTH);
645:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
646:       assertEquals(15, Node.NO_SIDE_EFFECTS);
647:       assertEquals(29, Node.JSDOC_INFO_PROP);
648:       assertEquals(40, Node.ORIGINALNAME_PROP);
649:       assertEquals(50, Node.FREE_CALL);
650:       assertEquals(47, Node.IS_DISPATCHER);
651:       assertEquals(54, Node.SLASH_V);
652:       assertEquals(2, Node.POST_FLAG);
653:       
654:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
655:       assertFalse(node0.equals((Object)node1));
656:       assertFalse(node1.equals((Object)node0));
657:       assertFalse(node0.isThrow());
658:       assertFalse(node0.isHook());
659:       assertFalse(node0.isBreak());
660:       assertEquals((-1), node0.getCharno());
661:       assertFalse(node0.isGetProp());
662:       assertFalse(node0.isInc());
663:       assertFalse(node0.isString());
664:       assertFalse(node0.isObjectLit());
665:       assertFalse(node0.isAnd());
666:       assertFalse(node0.isSwitch());
667:       assertFalse(node0.isFalse());
668:       assertFalse(node0.isCast());
669:       assertFalse(node0.isEmpty());
670:       assertFalse(node0.isGetElem());
671:       assertFalse(node0.isDelProp());
672:       assertFalse(node0.isDebugger());
673:       assertFalse(node0.isTrue());
674:       assertEquals((-1), node0.getSourcePosition());
675:       assertFalse(node0.isNot());
676:       assertFalse(node0.isOr());
677:       assertFalse(node0.isWhile());
678:       assertFalse(node0.isExprResult());
679:       assertFalse(node0.isVoid());
680:       assertFalse(node0.isComma());
681:       assertEquals(0, node0.getType());
682:       assertFalse(node0.isReturn());
683:       assertFalse(node0.hasChildren());
684:       assertFalse(node0.isDec());
685:       assertFalse(node0.isTypeOf());
686:       assertFalse(node0.isAssign());
687:       assertFalse(node0.isCall());
688:       assertFalse(node0.isStringKey());
689:       assertFalse(node0.isVar());
690:       assertFalse(node0.isName());
691:       assertFalse(node0.isParamList());
692:       assertFalse(node0.isNew());
693:       assertFalse(node0.isNull());
694:       assertFalse(node0.isAdd());
695:       assertFalse(node0.isSetterDef());
696:       assertFalse(node0.isContinue());
697:       assertFalse(node0.isAssignAdd());
698:       assertFalse(node0.isDo());
699:       assertFalse(node0.isDefaultCase());
700:       assertFalse(node0.isLabel());
701:       assertEquals(0, node0.getChildCount());
702:       assertFalse(node0.isFunction());
703:       assertFalse(node0.isArrayLit());
704:       assertFalse(node0.isFor());
705:       assertFalse(node0.isIf());
706:       assertFalse(node0.hasOneChild());
707:       assertFalse(node0.isLabelName());
708:       assertFalse(node0.isTry());
709:       assertFalse(node0.isScript());
710:       assertFalse(node0.isNE());
711:       assertFalse(node0.isGetterDef());
712:       assertFalse(node0.isIn());
713:       assertFalse(node0.isNumber());
714:       assertFalse(node0.isCatch());
715:       assertFalse(node0.isCase());
716:       assertEquals((-1), node0.getLineno());
717:       assertFalse(node0.isBlock());
718:       assertFalse(node0.isThis());
719:       assertFalse(node0.isInstanceOf());
720:       assertFalse(node0.isRegExp());
721:       assertFalse(node0.hasMoreThanOneChild());
722:       assertFalse(node0.isWith());
723:       assertEquals((-1), node1.getCharno());
724:       assertFalse(node1.isThrow());
725:       assertFalse(node1.isHook());
726:       assertFalse(node1.isBreak());
727:       assertFalse(node1.isFalse());
728:       assertFalse(node1.isSwitch());
729:       assertFalse(node1.isIn());
730:       assertFalse(node1.isNE());
731:       assertEquals(54, node1.getType());
732:       assertFalse(node1.isEmpty());
733:       assertFalse(node1.isInc());
734:       assertFalse(node1.isTrue());
735:       assertFalse(node1.isDebugger());
736:       assertFalse(node1.isDelProp());
737:       assertFalse(node1.hasChildren());
738:       assertFalse(node1.isDec());
739:       assertFalse(node1.isAssign());
740:       assertFalse(node1.isTypeOf());
741:       assertFalse(node1.isFunction());
742:       assertFalse(node1.isExprResult());
743:       assertFalse(node1.isVoid());
744:       assertFalse(node1.isCast());
745:       assertFalse(node1.isGetElem());
746:       assertFalse(node1.isObjectLit());
747:       assertFalse(node1.isAnd());
748:       assertFalse(node1.isComma());
749:       assertEquals((-1), node1.getSourcePosition());
750:       assertFalse(node1.isReturn());
751:       assertFalse(node1.isString());
752:       assertFalse(node1.isWhile());
753:       assertFalse(node1.isNot());
754:       assertFalse(node1.isGetProp());
755:       assertFalse(node1.isStringKey());
756:       assertFalse(node1.isBlock());
757:       assertFalse(node1.isVar());
758:       assertFalse(node1.isName());
759:       assertFalse(node1.isContinue());
760:       assertFalse(node1.isCall());
761:       assertEquals(0, node1.getChildCount());
762:       assertFalse(node1.isOr());
763:       assertEquals((-1), node1.getLineno());
764:       assertFalse(node1.isAssignAdd());
765:       assertFalse(node1.isLabel());
766:       assertFalse(node1.isNull());
767:       assertFalse(node1.isDo());
768:       assertFalse(node1.isDefaultCase());
769:       assertFalse(node1.isNew());
770:       assertFalse(node1.isAdd());
771:       assertFalse(node1.isSetterDef());
772:       assertFalse(node1.hasOneChild());
773:       assertFalse(node1.isTry());
774:       assertFalse(node1.isFor());
775:       assertFalse(node1.isLabelName());
776:       assertFalse(node1.isRegExp());
777:       assertFalse(node1.isWith());
778:       assertFalse(node1.isIf());
779:       assertFalse(node1.isCatch());
780:       assertFalse(node1.isArrayLit());
781:       assertFalse(node1.isInstanceOf());
782:       assertFalse(node1.hasMoreThanOneChild());
783:       assertFalse(node1.isParamList());
784:       assertFalse(node1.isThis());
785:       assertFalse(node1.isGetterDef());
786:       assertFalse(node1.isNumber());
787:       assertFalse(node1.isScript());
788:       assertFalse(node1.isCase());
789:       assertNotNull(node_NodeMismatch0);
790:       assertEquals(43, Node.IS_CONSTANT_NAME);
791:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
792:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
793:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
794:       assertEquals(4095, Node.COLUMN_MASK);
795:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
796:       assertEquals(47, Node.IS_DISPATCHER);
797:       assertEquals(56, Node.CHANGE_TIME);
798:       assertEquals(29, Node.JSDOC_INFO_PROP);
799:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
800:       assertEquals(37, Node.OPT_ARG_NAME);
801:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
802:       assertEquals(39, Node.EMPTY_BLOCK);
803:       assertEquals(48, Node.DIRECTIVES);
804:       assertEquals(52, Node.LENGTH);
805:       assertEquals(53, Node.INPUT_ID);
806:       assertEquals(57, Node.REFLECTED_OBJECT);
807:       assertEquals(55, Node.INFERRED_FUNCTION);
808:       assertEquals(8, Node.FLAG_NO_THROWS);
809:       assertEquals(36, Node.QUOTED_PROP);
810:       assertEquals(15, Node.NO_SIDE_EFFECTS);
811:       assertEquals(57, Node.LAST_PROP);
812:       assertEquals(49, Node.DIRECT_EVAL);
813:       assertEquals(32, Node.INCRDECR_PROP);
814:       assertEquals(1, Node.DECR_FLAG);
815:       assertEquals(12, Node.COLUMN_BITS);
816:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
817:       assertEquals(2, Node.POST_FLAG);
818:       assertEquals(30, Node.VAR_ARGS_NAME);
819:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
820:       assertEquals(40, Node.ORIGINALNAME_PROP);
821:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
822:       assertEquals(46, Node.IS_NAMESPACE);
823:       assertEquals(54, Node.SLASH_V);
824:       assertEquals(51, Node.STATIC_SOURCE_FILE);
825:       assertEquals(50, Node.FREE_CALL);
826:       assertEquals(55, Node.INFERRED_FUNCTION);
827:       assertEquals(4095, Node.COLUMN_MASK);
828:       assertEquals(43, Node.IS_CONSTANT_NAME);
829:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
830:       assertEquals(8, Node.FLAG_NO_THROWS);
831:       assertEquals(39, Node.EMPTY_BLOCK);
832:       assertEquals(36, Node.QUOTED_PROP);
833:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
834:       assertEquals(53, Node.INPUT_ID);
835:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
836:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
837:       assertEquals(56, Node.CHANGE_TIME);
838:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
839:       assertEquals(57, Node.REFLECTED_OBJECT);
840:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
841:       assertEquals(37, Node.OPT_ARG_NAME);
842:       assertEquals(48, Node.DIRECTIVES);
843:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
844:       assertEquals(51, Node.STATIC_SOURCE_FILE);
845:       assertEquals(1, Node.DECR_FLAG);
846:       assertEquals(49, Node.DIRECT_EVAL);
847:       assertEquals(32, Node.INCRDECR_PROP);
848:       assertEquals(30, Node.VAR_ARGS_NAME);
849:       assertEquals(57, Node.LAST_PROP);
850:       assertEquals(12, Node.COLUMN_BITS);
851:       assertEquals(46, Node.IS_NAMESPACE);
852:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
853:       assertEquals(52, Node.LENGTH);
854:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
855:       assertEquals(15, Node.NO_SIDE_EFFECTS);
856:       assertEquals(29, Node.JSDOC_INFO_PROP);
857:       assertEquals(40, Node.ORIGINALNAME_PROP);
858:       assertEquals(50, Node.FREE_CALL);
859:       assertEquals(47, Node.IS_DISPATCHER);
860:       assertEquals(54, Node.SLASH_V);
861:       assertEquals(2, Node.POST_FLAG);
862:       
863:       Node node2 = new Node(208, node0, node1);
864:       assertFalse(node0.equals((Object)node1));
865:       assertFalse(node1.equals((Object)node0));
866:       assertFalse(node2.equals((Object)node0));
867:       assertFalse(node2.equals((Object)node1));
868:       assertFalse(node0.isThrow());
869:       assertFalse(node0.isHook());
870:       assertFalse(node0.isBreak());
871:       assertEquals((-1), node0.getCharno());
872:       assertFalse(node0.isGetProp());
873:       assertFalse(node0.isInc());
874:       assertFalse(node0.isString());
875:       assertFalse(node0.isObjectLit());
876:       assertFalse(node0.isAnd());
877:       assertFalse(node0.isSwitch());
878:       assertFalse(node0.isFalse());
879:       assertFalse(node0.isCast());
880:       assertFalse(node0.isEmpty());
881:       assertFalse(node0.isGetElem());
882:       assertFalse(node0.isDelProp());
883:       assertFalse(node0.isDebugger());
884:       assertFalse(node0.isTrue());
885:       assertEquals((-1), node0.getSourcePosition());
886:       assertFalse(node0.isNot());
887:       assertFalse(node0.isOr());
888:       assertFalse(node0.isWhile());
889:       assertFalse(node0.isExprResult());
890:       assertFalse(node0.isVoid());
891:       assertFalse(node0.isComma());
892:       assertEquals(0, node0.getType());
893:       assertFalse(node0.isReturn());
894:       assertFalse(node0.hasChildren());
895:       assertFalse(node0.isDec());
896:       assertFalse(node0.isTypeOf());
897:       assertFalse(node0.isAssign());
898:       assertFalse(node0.isCall());
899:       assertFalse(node0.isStringKey());
900:       assertFalse(node0.isVar());
901:       assertFalse(node0.isName());
902:       assertFalse(node0.isParamList());
903:       assertFalse(node0.isNew());
904:       assertFalse(node0.isNull());
905:       assertFalse(node0.isAdd());
906:       assertFalse(node0.isSetterDef());
907:       assertFalse(node0.isContinue());
908:       assertFalse(node0.isAssignAdd());
909:       assertFalse(node0.isDo());
910:       assertFalse(node0.isDefaultCase());
911:       assertFalse(node0.isLabel());
912:       assertEquals(0, node0.getChildCount());
913:       assertFalse(node0.isFunction());
914:       assertFalse(node0.isArrayLit());
915:       assertFalse(node0.isFor());
916:       assertFalse(node0.isIf());
917:       assertFalse(node0.hasOneChild());
918:       assertFalse(node0.isLabelName());
919:       assertFalse(node0.isTry());
920:       assertFalse(node0.isScript());
921:       assertFalse(node0.isNE());
922:       assertFalse(node0.isGetterDef());
923:       assertFalse(node0.isIn());
924:       assertFalse(node0.isNumber());
925:       assertFalse(node0.isCatch());
926:       assertFalse(node0.isCase());
927:       assertEquals((-1), node0.getLineno());
928:       assertFalse(node0.isBlock());
929:       assertFalse(node0.isThis());
930:       assertFalse(node0.isInstanceOf());
931:       assertFalse(node0.isRegExp());
932:       assertFalse(node0.hasMoreThanOneChild());
933:       assertFalse(node0.isWith());
934:       assertEquals((-1), node1.getCharno());
935:       assertFalse(node1.isThrow());
936:       assertFalse(node1.isHook());
937:       assertFalse(node1.isBreak());
938:       assertFalse(node1.isFalse());
939:       assertFalse(node1.isSwitch());
940:       assertFalse(node1.isIn());
941:       assertFalse(node1.isNE());
942:       assertEquals(54, node1.getType());
943:       assertFalse(node1.isEmpty());
944:       assertFalse(node1.isInc());
945:       assertFalse(node1.isTrue());
946:       assertFalse(node1.isDebugger());
947:       assertFalse(node1.isDelProp());
948:       assertFalse(node1.hasChildren());
949:       assertFalse(node1.isDec());
950:       assertFalse(node1.isAssign());
951:       assertFalse(node1.isTypeOf());
952:       assertFalse(node1.isFunction());
953:       assertFalse(node1.isExprResult());
954:       assertFalse(node1.isVoid());
955:       assertFalse(node1.isCast());
956:       assertFalse(node1.isGetElem());
957:       assertFalse(node1.isObjectLit());
958:       assertFalse(node1.isAnd());
959:       assertFalse(node1.isComma());
960:       assertEquals((-1), node1.getSourcePosition());
961:       assertFalse(node1.isReturn());
962:       assertFalse(node1.isString());
963:       assertFalse(node1.isWhile());
964:       assertFalse(node1.isNot());
965:       assertFalse(node1.isGetProp());
966:       assertFalse(node1.isStringKey());
967:       assertFalse(node1.isBlock());
968:       assertFalse(node1.isVar());
969:       assertFalse(node1.isName());
970:       assertFalse(node1.isContinue());
971:       assertFalse(node1.isCall());
972:       assertEquals(0, node1.getChildCount());
973:       assertFalse(node1.isOr());
974:       assertEquals((-1), node1.getLineno());
975:       assertFalse(node1.isAssignAdd());
976:       assertFalse(node1.isLabel());
977:       assertFalse(node1.isNull());
978:       assertFalse(node1.isDo());
979:       assertFalse(node1.isDefaultCase());
980:       assertFalse(node1.isNew());
981:       assertFalse(node1.isAdd());
982:       assertFalse(node1.isSetterDef());
983:       assertFalse(node1.hasOneChild());
984:       assertFalse(node1.isTry());
985:       assertFalse(node1.isFor());
986:       assertFalse(node1.isLabelName());
987:       assertFalse(node1.isRegExp());
988:       assertFalse(node1.isWith());
989:       assertFalse(node1.isIf());
990:       assertFalse(node1.isCatch());
991:       assertFalse(node1.isArrayLit());
992:       assertFalse(node1.isInstanceOf());
993:       assertFalse(node1.hasMoreThanOneChild());
994:       assertFalse(node1.isParamList());
995:       assertFalse(node1.isThis());
996:       assertFalse(node1.isGetterDef());
997:       assertFalse(node1.isNumber());
998:       assertFalse(node1.isScript());
999:       assertFalse(node1.isCase());
1000:       assertFalse(node2.isString());
1001:       assertTrue(node2.hasMoreThanOneChild());
1002:       assertFalse(node2.isSwitch());
1003:       assertFalse(node2.isInc());
1004:       assertFalse(node2.isCase());
1005:       assertTrue(node2.hasChildren());
1006:       assertFalse(node2.isThrow());
1007:       assertFalse(node2.isHook());
1008:       assertFalse(node2.isGetterDef());
1009:       assertFalse(node2.isFalse());
1010:       assertFalse(node2.isArrayLit());
1011:       assertFalse(node2.isGetProp());
1012:       assertFalse(node2.isObjectLit());
1013:       assertFalse(node2.isAnd());
1014:       assertEquals((-1), node2.getCharno());
1015:       assertFalse(node2.isDebugger());
1016:       assertFalse(node2.isRegExp());
1017:       assertFalse(node2.isWith());
1018:       assertFalse(node2.isCatch());
1019:       assertFalse(node2.isScript());
1020:       assertFalse(node2.hasOneChild());
1021:       assertFalse(node2.isInstanceOf());
1022:       assertFalse(node2.isTry());
1023:       assertFalse(node2.isFunction());
1024:       assertFalse(node2.isFor());
1025:       assertEquals(2, node2.getChildCount());
1026:       assertFalse(node2.isThis());
1027:       assertFalse(node2.isIf());
1028:       assertFalse(node2.isSetterDef());
1029:       assertEquals((-1), node2.getLineno());
1030:       assertFalse(node2.isIn());
1031:       assertFalse(node2.isNE());
1032:       assertFalse(node2.isWhile());
1033:       assertFalse(node2.isDo());
1034:       assertFalse(node2.isContinue());
1035:       assertFalse(node2.isNew());
1036:       assertFalse(node2.isAdd());
1037:       assertFalse(node2.isAssignAdd());
1038:       assertFalse(node2.isLabel());
1039:       assertFalse(node2.isBlock());
1040:       assertFalse(node2.isVar());
1041:       assertFalse(node2.isReturn());
1042:       assertFalse(node2.isLabelName());
1043:       assertFalse(node2.isNumber());
1044:       assertFalse(node2.isCast());
1045:       assertEquals(208, node2.getType());
1046:       assertFalse(node2.isParamList());
1047:       assertFalse(node2.isStringKey());
1048:       assertEquals((-1), node2.getSourcePosition());
1049:       assertFalse(node2.isNot());
1050:       assertFalse(node2.isDefaultCase());
1051:       assertFalse(node2.isExprResult());
1052:       assertFalse(node2.isVoid());
1053:       assertFalse(node2.isComma());
1054:       assertFalse(node2.isBreak());
1055:       assertFalse(node2.isDelProp());
1056:       assertFalse(node2.isDec());
1057:       assertFalse(node2.isAssign());
1058:       assertFalse(node2.isName());
1059:       assertFalse(node2.isTypeOf());
1060:       assertFalse(node2.isCall());
1061:       assertFalse(node2.isEmpty());
1062:       assertFalse(node2.isGetElem());
1063:       assertFalse(node2.isOr());
1064:       assertFalse(node2.isTrue());
1065:       assertFalse(node2.isNull());
1066:       assertNotNull(node2);
1067:       assertEquals(43, Node.IS_CONSTANT_NAME);
1068:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1069:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1070:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1071:       assertEquals(4095, Node.COLUMN_MASK);
1072:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1073:       assertEquals(47, Node.IS_DISPATCHER);
1074:       assertEquals(56, Node.CHANGE_TIME);
1075:       assertEquals(29, Node.JSDOC_INFO_PROP);
1076:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1077:       assertEquals(37, Node.OPT_ARG_NAME);
1078:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1079:       assertEquals(39, Node.EMPTY_BLOCK);
1080:       assertEquals(48, Node.DIRECTIVES);
1081:       assertEquals(52, Node.LENGTH);
1082:       assertEquals(53, Node.INPUT_ID);
1083:       assertEquals(57, Node.REFLECTED_OBJECT);
1084:       assertEquals(55, Node.INFERRED_FUNCTION);
1085:       assertEquals(8, Node.FLAG_NO_THROWS);
1086:       assertEquals(36, Node.QUOTED_PROP);
1087:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1088:       assertEquals(57, Node.LAST_PROP);
1089:       assertEquals(49, Node.DIRECT_EVAL);
1090:       assertEquals(32, Node.INCRDECR_PROP);
1091:       assertEquals(1, Node.DECR_FLAG);
1092:       assertEquals(12, Node.COLUMN_BITS);
1093:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1094:       assertEquals(2, Node.POST_FLAG);
1095:       assertEquals(30, Node.VAR_ARGS_NAME);
1096:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1097:       assertEquals(40, Node.ORIGINALNAME_PROP);
1098:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1099:       assertEquals(46, Node.IS_NAMESPACE);
1100:       assertEquals(54, Node.SLASH_V);
1101:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1102:       assertEquals(50, Node.FREE_CALL);
1103:       assertEquals(55, Node.INFERRED_FUNCTION);
1104:       assertEquals(4095, Node.COLUMN_MASK);
1105:       assertEquals(43, Node.IS_CONSTANT_NAME);
1106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1107:       assertEquals(8, Node.FLAG_NO_THROWS);
1108:       assertEquals(39, Node.EMPTY_BLOCK);
1109:       assertEquals(36, Node.QUOTED_PROP);
1110:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1111:       assertEquals(53, Node.INPUT_ID);
1112:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1113:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1114:       assertEquals(56, Node.CHANGE_TIME);
1115:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1116:       assertEquals(57, Node.REFLECTED_OBJECT);
1117:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1118:       assertEquals(37, Node.OPT_ARG_NAME);
1119:       assertEquals(48, Node.DIRECTIVES);
1120:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1121:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1122:       assertEquals(1, Node.DECR_FLAG);
1123:       assertEquals(49, Node.DIRECT_EVAL);
1124:       assertEquals(32, Node.INCRDECR_PROP);
1125:       assertEquals(30, Node.VAR_ARGS_NAME);
1126:       assertEquals(57, Node.LAST_PROP);
1127:       assertEquals(12, Node.COLUMN_BITS);
1128:       assertEquals(46, Node.IS_NAMESPACE);
1129:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1130:       assertEquals(52, Node.LENGTH);
1131:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1132:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1133:       assertEquals(29, Node.JSDOC_INFO_PROP);
1134:       assertEquals(40, Node.ORIGINALNAME_PROP);
1135:       assertEquals(50, Node.FREE_CALL);
1136:       assertEquals(47, Node.IS_DISPATCHER);
1137:       assertEquals(54, Node.SLASH_V);
1138:       assertEquals(2, Node.POST_FLAG);
1139:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1140:       assertEquals(8, Node.FLAG_NO_THROWS);
1141:       assertEquals(39, Node.EMPTY_BLOCK);
1142:       assertEquals(48, Node.DIRECTIVES);
1143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1144:       assertEquals(40, Node.ORIGINALNAME_PROP);
1145:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1146:       assertEquals(55, Node.INFERRED_FUNCTION);
1147:       assertEquals(50, Node.FREE_CALL);
1148:       assertEquals(43, Node.IS_CONSTANT_NAME);
1149:       assertEquals(57, Node.REFLECTED_OBJECT);
1150:       assertEquals(54, Node.SLASH_V);
1151:       assertEquals(36, Node.QUOTED_PROP);
1152:       assertEquals(52, Node.LENGTH);
1153:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1154:       assertEquals(53, Node.INPUT_ID);
1155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1156:       assertEquals(30, Node.VAR_ARGS_NAME);
1157:       assertEquals(57, Node.LAST_PROP);
1158:       assertEquals(47, Node.IS_DISPATCHER);
1159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1160:       assertEquals(37, Node.OPT_ARG_NAME);
1161:       assertEquals(2, Node.POST_FLAG);
1162:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1163:       assertEquals(29, Node.JSDOC_INFO_PROP);
1164:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1165:       assertEquals(49, Node.DIRECT_EVAL);
1166:       assertEquals(56, Node.CHANGE_TIME);
1167:       assertEquals(46, Node.IS_NAMESPACE);
1168:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1170:       assertEquals(4095, Node.COLUMN_MASK);
1171:       assertEquals(1, Node.DECR_FLAG);
1172:       assertEquals(32, Node.INCRDECR_PROP);
1173:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1174:       assertEquals(12, Node.COLUMN_BITS);
1175:       
1176:       // Undeclared exception!
1177:       try { 
1178:         node1.addChildBefore(node0, node2);
1179:         fail("Expecting exception: IllegalArgumentException");
1180:       
1181:       } catch(IllegalArgumentException e) {
1182:          //
1183:          // The existing child node of the parent should not be null.
1184:          //
1185:          verifyException("com.google.common.base.Preconditions", e);
1186:       }
1187:   }
1188: }
RegularFileObject[/tmp/EvoSuite_75_1628161372593/com/google/javascript/rhino/Node_75_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:02:52 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_75_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_75_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_75_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:02:52.710 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertEquals(0, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertNotNull(node0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);

Node node1 = Node.newString(54, "<");
assertFalse(node1.equals((Object)node0));
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(54, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertNotNull(node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);

int int0 = node1.getIndexOfChild(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertEquals(0, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(54, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertEquals((-1), int0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.equals((Object)node0));
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(54, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);

boolean boolean0 = node1.isComma();
assertFalse(node1.equals((Object)node0));
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(54, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(boolean0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertEquals(0, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(54, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertNotNull(node_NodeMismatch0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);

Node node2 = new Node(208, node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isComma());
assertEquals(0, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(54, node1.getType());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node2.isString());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertTrue(node2.hasChildren());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isReturn());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isCast());
assertEquals(208, node2.getType());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertNotNull(node2);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

node1.addChildBefore(node0, node2);

[MASTER] 11:02:54.195 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_85_1628161374129/com/google/javascript/rhino/Node_85_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_85_1628161374129/com/google/javascript/rhino/Node_85_tmp__ESTest_scaffolding.java]]
[MASTER] 11:02:54.195 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:54.195 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:54.195 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 404
[MASTER] 11:02:54.197 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_85_1628161374129/com/google/javascript/rhino/Node_85_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:02:54 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_85_tmp__ESTest extends Node_85_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(21, "ALL_TYPE");
22:       assertFalse(node0.isSetterDef());
23:       assertFalse(node0.isParamList());
24:       assertFalse(node0.isStringKey());
25:       assertFalse(node0.isNull());
26:       assertFalse(node0.isTrue());
27:       assertFalse(node0.isRegExp());
28:       assertFalse(node0.isTry());
29:       assertFalse(node0.isVoid());
30:       assertFalse(node0.isWhile());
31:       assertFalse(node0.isBlock());
32:       assertFalse(node0.hasMoreThanOneChild());
33:       assertFalse(node0.isCatch());
34:       assertFalse(node0.isCall());
35:       assertFalse(node0.isName());
36:       assertEquals((-1), node0.getLineno());
37:       assertFalse(node0.isNumber());
38:       assertFalse(node0.isOr());
39:       assertFalse(node0.isGetterDef());
40:       assertFalse(node0.isDelProp());
41:       assertFalse(node0.isLabel());
42:       assertFalse(node0.isAssignAdd());
43:       assertFalse(node0.isFor());
44:       assertFalse(node0.hasOneChild());
45:       assertFalse(node0.isCase());
46:       assertFalse(node0.isDo());
47:       assertFalse(node0.isEmpty());
48:       assertEquals((-1), node0.getCharno());
49:       assertFalse(node0.isSwitch());
50:       assertFalse(node0.isNew());
51:       assertFalse(node0.isDefaultCase());
52:       assertFalse(node0.isVar());
53:       assertFalse(node0.isArrayLit());
54:       assertFalse(node0.isLabelName());
55:       assertEquals(0, node0.getChildCount());
56:       assertFalse(node0.isThis());
57:       assertFalse(node0.isComma());
58:       assertFalse(node0.isGetProp());
59:       assertEquals(21, node0.getType());
60:       assertFalse(node0.isThrow());
61:       assertTrue(node0.isAdd());
62:       assertFalse(node0.isNot());
63:       assertFalse(node0.isObjectLit());
64:       assertFalse(node0.isScript());
65:       assertFalse(node0.isExprResult());
66:       assertFalse(node0.isHook());
67:       assertFalse(node0.isAssign());
68:       assertFalse(node0.isWith());
69:       assertFalse(node0.isBreak());
70:       assertFalse(node0.isInstanceOf());
71:       assertFalse(node0.isGetElem());
72:       assertEquals((-1), node0.getSourcePosition());
73:       assertFalse(node0.isTypeOf());
74:       assertFalse(node0.isDec());
75:       assertFalse(node0.isReturn());
76:       assertFalse(node0.isIf());
77:       assertFalse(node0.hasChildren());
78:       assertFalse(node0.isNE());
79:       assertFalse(node0.isString());
80:       assertFalse(node0.isIn());
81:       assertFalse(node0.isInc());
82:       assertFalse(node0.isFunction());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isAnd());
85:       assertFalse(node0.isContinue());
86:       assertFalse(node0.isFalse());
87:       assertFalse(node0.isCast());
88:       assertNotNull(node0);
89:       assertEquals(53, Node.INPUT_ID);
90:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
91:       assertEquals(43, Node.IS_CONSTANT_NAME);
92:       assertEquals(47, Node.IS_DISPATCHER);
93:       assertEquals(2, Node.POST_FLAG);
94:       assertEquals(4095, Node.COLUMN_MASK);
95:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
96:       assertEquals(32, Node.INCRDECR_PROP);
97:       assertEquals(51, Node.STATIC_SOURCE_FILE);
98:       assertEquals(12, Node.COLUMN_BITS);
99:       assertEquals(46, Node.IS_NAMESPACE);
100:       assertEquals(50, Node.FREE_CALL);
101:       assertEquals(1, Node.DECR_FLAG);
102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
103:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
104:       assertEquals(52, Node.LENGTH);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(57, Node.REFLECTED_OBJECT);
107:       assertEquals(57, Node.LAST_PROP);
108:       assertEquals(54, Node.SLASH_V);
109:       assertEquals(30, Node.VAR_ARGS_NAME);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(40, Node.ORIGINALNAME_PROP);
112:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
113:       assertEquals(48, Node.DIRECTIVES);
114:       assertEquals(37, Node.OPT_ARG_NAME);
115:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
116:       assertEquals(56, Node.CHANGE_TIME);
117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
118:       assertEquals(29, Node.JSDOC_INFO_PROP);
119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
120:       assertEquals(36, Node.QUOTED_PROP);
121:       assertEquals(55, Node.INFERRED_FUNCTION);
122:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
123:       assertEquals(8, Node.FLAG_NO_THROWS);
124:       assertEquals(39, Node.EMPTY_BLOCK);
125:       
126:       boolean boolean0 = node0.isFromExterns();
127:       assertFalse(node0.isSetterDef());
128:       assertFalse(node0.isParamList());
129:       assertFalse(node0.isStringKey());
130:       assertFalse(node0.isNull());
131:       assertFalse(node0.isTrue());
132:       assertFalse(node0.isRegExp());
133:       assertFalse(node0.isTry());
134:       assertFalse(node0.isVoid());
135:       assertFalse(node0.isWhile());
136:       assertFalse(node0.isBlock());
137:       assertFalse(node0.hasMoreThanOneChild());
138:       assertFalse(node0.isCatch());
139:       assertFalse(node0.isCall());
140:       assertFalse(node0.isName());
141:       assertEquals((-1), node0.getLineno());
142:       assertFalse(node0.isNumber());
143:       assertFalse(node0.isOr());
144:       assertFalse(node0.isGetterDef());
145:       assertFalse(node0.isDelProp());
146:       assertFalse(node0.isLabel());
147:       assertFalse(node0.isAssignAdd());
148:       assertFalse(node0.isFor());
149:       assertFalse(node0.hasOneChild());
150:       assertFalse(node0.isCase());
151:       assertFalse(node0.isDo());
152:       assertFalse(node0.isEmpty());
153:       assertEquals((-1), node0.getCharno());
154:       assertFalse(node0.isSwitch());
155:       assertFalse(node0.isNew());
156:       assertFalse(node0.isDefaultCase());
157:       assertFalse(node0.isVar());
158:       assertFalse(node0.isArrayLit());
159:       assertFalse(node0.isLabelName());
160:       assertEquals(0, node0.getChildCount());
161:       assertFalse(node0.isThis());
162:       assertFalse(node0.isComma());
163:       assertFalse(node0.isGetProp());
164:       assertEquals(21, node0.getType());
165:       assertFalse(node0.isThrow());
166:       assertTrue(node0.isAdd());
167:       assertFalse(node0.isNot());
168:       assertFalse(node0.isObjectLit());
169:       assertFalse(node0.isScript());
170:       assertFalse(node0.isExprResult());
171:       assertFalse(node0.isHook());
172:       assertFalse(node0.isAssign());
173:       assertFalse(node0.isWith());
174:       assertFalse(node0.isBreak());
175:       assertFalse(node0.isInstanceOf());
176:       assertFalse(node0.isGetElem());
177:       assertEquals((-1), node0.getSourcePosition());
178:       assertFalse(node0.isTypeOf());
179:       assertFalse(node0.isDec());
180:       assertFalse(node0.isReturn());
181:       assertFalse(node0.isIf());
182:       assertFalse(node0.hasChildren());
183:       assertFalse(node0.isNE());
184:       assertFalse(node0.isString());
185:       assertFalse(node0.isIn());
186:       assertFalse(node0.isInc());
187:       assertFalse(node0.isFunction());
188:       assertFalse(node0.isDebugger());
189:       assertFalse(node0.isAnd());
190:       assertFalse(node0.isContinue());
191:       assertFalse(node0.isFalse());
192:       assertFalse(node0.isCast());
193:       assertFalse(boolean0);
194:       assertEquals(53, Node.INPUT_ID);
195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(2, Node.POST_FLAG);
199:       assertEquals(4095, Node.COLUMN_MASK);
200:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
201:       assertEquals(32, Node.INCRDECR_PROP);
202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
203:       assertEquals(12, Node.COLUMN_BITS);
204:       assertEquals(46, Node.IS_NAMESPACE);
205:       assertEquals(50, Node.FREE_CALL);
206:       assertEquals(1, Node.DECR_FLAG);
207:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
208:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
209:       assertEquals(52, Node.LENGTH);
210:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
211:       assertEquals(57, Node.REFLECTED_OBJECT);
212:       assertEquals(57, Node.LAST_PROP);
213:       assertEquals(54, Node.SLASH_V);
214:       assertEquals(30, Node.VAR_ARGS_NAME);
215:       assertEquals(49, Node.DIRECT_EVAL);
216:       assertEquals(40, Node.ORIGINALNAME_PROP);
217:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
218:       assertEquals(48, Node.DIRECTIVES);
219:       assertEquals(37, Node.OPT_ARG_NAME);
220:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
221:       assertEquals(56, Node.CHANGE_TIME);
222:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
223:       assertEquals(29, Node.JSDOC_INFO_PROP);
224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
225:       assertEquals(36, Node.QUOTED_PROP);
226:       assertEquals(55, Node.INFERRED_FUNCTION);
227:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
228:       assertEquals(8, Node.FLAG_NO_THROWS);
229:       assertEquals(39, Node.EMPTY_BLOCK);
230:       
231:       boolean boolean1 = node0.isObjectLit();
232:       assertTrue(boolean1 == boolean0);
233:       assertFalse(node0.isSetterDef());
234:       assertFalse(node0.isParamList());
235:       assertFalse(node0.isStringKey());
236:       assertFalse(node0.isNull());
237:       assertFalse(node0.isTrue());
238:       assertFalse(node0.isRegExp());
239:       assertFalse(node0.isTry());
240:       assertFalse(node0.isVoid());
241:       assertFalse(node0.isWhile());
242:       assertFalse(node0.isBlock());
243:       assertFalse(node0.hasMoreThanOneChild());
244:       assertFalse(node0.isCatch());
245:       assertFalse(node0.isCall());
246:       assertFalse(node0.isName());
247:       assertEquals((-1), node0.getLineno());
248:       assertFalse(node0.isNumber());
249:       assertFalse(node0.isOr());
250:       assertFalse(node0.isGetterDef());
251:       assertFalse(node0.isDelProp());
252:       assertFalse(node0.isLabel());
253:       assertFalse(node0.isAssignAdd());
254:       assertFalse(node0.isFor());
255:       assertFalse(node0.hasOneChild());
256:       assertFalse(node0.isCase());
257:       assertFalse(node0.isDo());
258:       assertFalse(node0.isEmpty());
259:       assertEquals((-1), node0.getCharno());
260:       assertFalse(node0.isSwitch());
261:       assertFalse(node0.isNew());
262:       assertFalse(node0.isDefaultCase());
263:       assertFalse(node0.isVar());
264:       assertFalse(node0.isArrayLit());
265:       assertFalse(node0.isLabelName());
266:       assertEquals(0, node0.getChildCount());
267:       assertFalse(node0.isThis());
268:       assertFalse(node0.isComma());
269:       assertFalse(node0.isGetProp());
270:       assertEquals(21, node0.getType());
271:       assertFalse(node0.isThrow());
272:       assertTrue(node0.isAdd());
273:       assertFalse(node0.isNot());
274:       assertFalse(node0.isObjectLit());
275:       assertFalse(node0.isScript());
276:       assertFalse(node0.isExprResult());
277:       assertFalse(node0.isHook());
278:       assertFalse(node0.isAssign());
279:       assertFalse(node0.isWith());
280:       assertFalse(node0.isBreak());
281:       assertFalse(node0.isInstanceOf());
282:       assertFalse(node0.isGetElem());
283:       assertEquals((-1), node0.getSourcePosition());
284:       assertFalse(node0.isTypeOf());
285:       assertFalse(node0.isDec());
286:       assertFalse(node0.isReturn());
287:       assertFalse(node0.isIf());
288:       assertFalse(node0.hasChildren());
289:       assertFalse(node0.isNE());
290:       assertFalse(node0.isString());
291:       assertFalse(node0.isIn());
292:       assertFalse(node0.isInc());
293:       assertFalse(node0.isFunction());
294:       assertFalse(node0.isDebugger());
295:       assertFalse(node0.isAnd());
296:       assertFalse(node0.isContinue());
297:       assertFalse(node0.isFalse());
298:       assertFalse(node0.isCast());
299:       assertFalse(boolean1);
300:       assertEquals(53, Node.INPUT_ID);
301:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
302:       assertEquals(43, Node.IS_CONSTANT_NAME);
303:       assertEquals(47, Node.IS_DISPATCHER);
304:       assertEquals(2, Node.POST_FLAG);
305:       assertEquals(4095, Node.COLUMN_MASK);
306:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
307:       assertEquals(32, Node.INCRDECR_PROP);
308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
309:       assertEquals(12, Node.COLUMN_BITS);
310:       assertEquals(46, Node.IS_NAMESPACE);
311:       assertEquals(50, Node.FREE_CALL);
312:       assertEquals(1, Node.DECR_FLAG);
313:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
314:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
315:       assertEquals(52, Node.LENGTH);
316:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
317:       assertEquals(57, Node.REFLECTED_OBJECT);
318:       assertEquals(57, Node.LAST_PROP);
319:       assertEquals(54, Node.SLASH_V);
320:       assertEquals(30, Node.VAR_ARGS_NAME);
321:       assertEquals(49, Node.DIRECT_EVAL);
322:       assertEquals(40, Node.ORIGINALNAME_PROP);
323:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
324:       assertEquals(48, Node.DIRECTIVES);
325:       assertEquals(37, Node.OPT_ARG_NAME);
326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
327:       assertEquals(56, Node.CHANGE_TIME);
328:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
329:       assertEquals(29, Node.JSDOC_INFO_PROP);
330:       assertEquals(15, Node.NO_SIDE_EFFECTS);
331:       assertEquals(36, Node.QUOTED_PROP);
332:       assertEquals(55, Node.INFERRED_FUNCTION);
333:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
334:       assertEquals(8, Node.FLAG_NO_THROWS);
335:       assertEquals(39, Node.EMPTY_BLOCK);
336:       
337:       Iterable<Node> iterable0 = node0.children();
338:       assertFalse(node0.isSetterDef());
339:       assertFalse(node0.isParamList());
340:       assertFalse(node0.isStringKey());
341:       assertFalse(node0.isNull());
342:       assertFalse(node0.isTrue());
343:       assertFalse(node0.isRegExp());
344:       assertFalse(node0.isTry());
345:       assertFalse(node0.isVoid());
346:       assertFalse(node0.isWhile());
347:       assertFalse(node0.isBlock());
348:       assertFalse(node0.hasMoreThanOneChild());
349:       assertFalse(node0.isCatch());
350:       assertFalse(node0.isCall());
351:       assertFalse(node0.isName());
352:       assertEquals((-1), node0.getLineno());
353:       assertFalse(node0.isNumber());
354:       assertFalse(node0.isOr());
355:       assertFalse(node0.isGetterDef());
356:       assertFalse(node0.isDelProp());
357:       assertFalse(node0.isLabel());
358:       assertFalse(node0.isAssignAdd());
359:       assertFalse(node0.isFor());
360:       assertFalse(node0.hasOneChild());
361:       assertFalse(node0.isCase());
362:       assertFalse(node0.isDo());
363:       assertFalse(node0.isEmpty());
364:       assertEquals((-1), node0.getCharno());
365:       assertFalse(node0.isSwitch());
366:       assertFalse(node0.isNew());
367:       assertFalse(node0.isDefaultCase());
368:       assertFalse(node0.isVar());
369:       assertFalse(node0.isArrayLit());
370:       assertFalse(node0.isLabelName());
371:       assertEquals(0, node0.getChildCount());
372:       assertFalse(node0.isThis());
373:       assertFalse(node0.isComma());
374:       assertFalse(node0.isGetProp());
375:       assertEquals(21, node0.getType());
376:       assertFalse(node0.isThrow());
377:       assertTrue(node0.isAdd());
378:       assertFalse(node0.isNot());
379:       assertFalse(node0.isObjectLit());
380:       assertFalse(node0.isScript());
381:       assertFalse(node0.isExprResult());
382:       assertFalse(node0.isHook());
383:       assertFalse(node0.isAssign());
384:       assertFalse(node0.isWith());
385:       assertFalse(node0.isBreak());
386:       assertFalse(node0.isInstanceOf());
387:       assertFalse(node0.isGetElem());
388:       assertEquals((-1), node0.getSourcePosition());
389:       assertFalse(node0.isTypeOf());
390:       assertFalse(node0.isDec());
391:       assertFalse(node0.isReturn());
392:       assertFalse(node0.isIf());
393:       assertFalse(node0.hasChildren());
394:       assertFalse(node0.isNE());
395:       assertFalse(node0.isString());
396:       assertFalse(node0.isIn());
397:       assertFalse(node0.isInc());
398:       assertFalse(node0.isFunction());
399:       assertFalse(node0.isDebugger());
400:       assertFalse(node0.isAnd());
401:       assertFalse(node0.isContinue());
402:       assertFalse(node0.isFalse());
403:       assertFalse(node0.isCast());
404:       assertFalse(iterable0.contains(node0));
405:       assertNotNull(iterable0);
406:       assertEquals(53, Node.INPUT_ID);
407:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
408:       assertEquals(43, Node.IS_CONSTANT_NAME);
409:       assertEquals(47, Node.IS_DISPATCHER);
410:       assertEquals(2, Node.POST_FLAG);
411:       assertEquals(4095, Node.COLUMN_MASK);
412:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
413:       assertEquals(32, Node.INCRDECR_PROP);
414:       assertEquals(51, Node.STATIC_SOURCE_FILE);
415:       assertEquals(12, Node.COLUMN_BITS);
416:       assertEquals(46, Node.IS_NAMESPACE);
417:       assertEquals(50, Node.FREE_CALL);
418:       assertEquals(1, Node.DECR_FLAG);
419:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
420:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
421:       assertEquals(52, Node.LENGTH);
422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
423:       assertEquals(57, Node.REFLECTED_OBJECT);
424:       assertEquals(57, Node.LAST_PROP);
425:       assertEquals(54, Node.SLASH_V);
426:       assertEquals(30, Node.VAR_ARGS_NAME);
427:       assertEquals(49, Node.DIRECT_EVAL);
428:       assertEquals(40, Node.ORIGINALNAME_PROP);
429:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
430:       assertEquals(48, Node.DIRECTIVES);
431:       assertEquals(37, Node.OPT_ARG_NAME);
432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
433:       assertEquals(56, Node.CHANGE_TIME);
434:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
435:       assertEquals(29, Node.JSDOC_INFO_PROP);
436:       assertEquals(15, Node.NO_SIDE_EFFECTS);
437:       assertEquals(36, Node.QUOTED_PROP);
438:       assertEquals(55, Node.INFERRED_FUNCTION);
439:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
440:       assertEquals(8, Node.FLAG_NO_THROWS);
441:       assertEquals(39, Node.EMPTY_BLOCK);
442:       
443:       boolean boolean2 = node0.isNew();
444:       assertTrue(boolean2 == boolean0);
445:       assertTrue(boolean2 == boolean1);
446:       assertFalse(node0.isSetterDef());
447:       assertFalse(node0.isParamList());
448:       assertFalse(node0.isStringKey());
449:       assertFalse(node0.isNull());
450:       assertFalse(node0.isTrue());
451:       assertFalse(node0.isRegExp());
452:       assertFalse(node0.isTry());
453:       assertFalse(node0.isVoid());
454:       assertFalse(node0.isWhile());
455:       assertFalse(node0.isBlock());
456:       assertFalse(node0.hasMoreThanOneChild());
457:       assertFalse(node0.isCatch());
458:       assertFalse(node0.isCall());
459:       assertFalse(node0.isName());
460:       assertEquals((-1), node0.getLineno());
461:       assertFalse(node0.isNumber());
462:       assertFalse(node0.isOr());
463:       assertFalse(node0.isGetterDef());
464:       assertFalse(node0.isDelProp());
465:       assertFalse(node0.isLabel());
466:       assertFalse(node0.isAssignAdd());
467:       assertFalse(node0.isFor());
468:       assertFalse(node0.hasOneChild());
469:       assertFalse(node0.isCase());
470:       assertFalse(node0.isDo());
471:       assertFalse(node0.isEmpty());
472:       assertEquals((-1), node0.getCharno());
473:       assertFalse(node0.isSwitch());
474:       assertFalse(node0.isNew());
475:       assertFalse(node0.isDefaultCase());
476:       assertFalse(node0.isVar());
477:       assertFalse(node0.isArrayLit());
478:       assertFalse(node0.isLabelName());
479:       assertEquals(0, node0.getChildCount());
480:       assertFalse(node0.isThis());
481:       assertFalse(node0.isComma());
482:       assertFalse(node0.isGetProp());
483:       assertEquals(21, node0.getType());
484:       assertFalse(node0.isThrow());
485:       assertTrue(node0.isAdd());
486:       assertFalse(node0.isNot());
487:       assertFalse(node0.isObjectLit());
488:       assertFalse(node0.isScript());
489:       assertFalse(node0.isExprResult());
490:       assertFalse(node0.isHook());
491:       assertFalse(node0.isAssign());
492:       assertFalse(node0.isWith());
493:       assertFalse(node0.isBreak());
494:       assertFalse(node0.isInstanceOf());
495:       assertFalse(node0.isGetElem());
496:       assertEquals((-1), node0.getSourcePosition());
497:       assertFalse(node0.isTypeOf());
498:       assertFalse(node0.isDec());
499:       assertFalse(node0.isReturn());
500:       assertFalse(node0.isIf());
501:       assertFalse(node0.hasChildren());
502:       assertFalse(node0.isNE());
503:       assertFalse(node0.isString());
504:       assertFalse(node0.isIn());
505:       assertFalse(node0.isInc());
506:       assertFalse(node0.isFunction());
507:       assertFalse(node0.isDebugger());
508:       assertFalse(node0.isAnd());
509:       assertFalse(node0.isContinue());
510:       assertFalse(node0.isFalse());
511:       assertFalse(node0.isCast());
512:       assertFalse(boolean2);
513:       assertEquals(53, Node.INPUT_ID);
514:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
515:       assertEquals(43, Node.IS_CONSTANT_NAME);
516:       assertEquals(47, Node.IS_DISPATCHER);
517:       assertEquals(2, Node.POST_FLAG);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
520:       assertEquals(32, Node.INCRDECR_PROP);
521:       assertEquals(51, Node.STATIC_SOURCE_FILE);
522:       assertEquals(12, Node.COLUMN_BITS);
523:       assertEquals(46, Node.IS_NAMESPACE);
524:       assertEquals(50, Node.FREE_CALL);
525:       assertEquals(1, Node.DECR_FLAG);
526:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
527:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
528:       assertEquals(52, Node.LENGTH);
529:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
530:       assertEquals(57, Node.REFLECTED_OBJECT);
531:       assertEquals(57, Node.LAST_PROP);
532:       assertEquals(54, Node.SLASH_V);
533:       assertEquals(30, Node.VAR_ARGS_NAME);
534:       assertEquals(49, Node.DIRECT_EVAL);
535:       assertEquals(40, Node.ORIGINALNAME_PROP);
536:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
537:       assertEquals(48, Node.DIRECTIVES);
538:       assertEquals(37, Node.OPT_ARG_NAME);
539:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
540:       assertEquals(56, Node.CHANGE_TIME);
541:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
542:       assertEquals(29, Node.JSDOC_INFO_PROP);
543:       assertEquals(15, Node.NO_SIDE_EFFECTS);
544:       assertEquals(36, Node.QUOTED_PROP);
545:       assertEquals(55, Node.INFERRED_FUNCTION);
546:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
547:       assertEquals(8, Node.FLAG_NO_THROWS);
548:       assertEquals(39, Node.EMPTY_BLOCK);
549:       
550:       String string0 = "";
551:       node0.setSourceFileForTesting("");
552:       assertFalse(node0.isSetterDef());
553:       assertFalse(node0.isParamList());
554:       assertFalse(node0.isStringKey());
555:       assertFalse(node0.isNull());
556:       assertFalse(node0.isTrue());
557:       assertFalse(node0.isRegExp());
558:       assertFalse(node0.isTry());
559:       assertFalse(node0.isVoid());
560:       assertFalse(node0.isWhile());
561:       assertFalse(node0.isBlock());
562:       assertFalse(node0.hasMoreThanOneChild());
563:       assertFalse(node0.isCatch());
564:       assertFalse(node0.isCall());
565:       assertFalse(node0.isName());
566:       assertEquals((-1), node0.getLineno());
567:       assertFalse(node0.isNumber());
568:       assertFalse(node0.isOr());
569:       assertFalse(node0.isGetterDef());
570:       assertFalse(node0.isDelProp());
571:       assertFalse(node0.isLabel());
572:       assertFalse(node0.isAssignAdd());
573:       assertFalse(node0.isFor());
574:       assertFalse(node0.hasOneChild());
575:       assertFalse(node0.isCase());
576:       assertFalse(node0.isDo());
577:       assertFalse(node0.isEmpty());
578:       assertEquals((-1), node0.getCharno());
579:       assertFalse(node0.isSwitch());
580:       assertFalse(node0.isNew());
581:       assertFalse(node0.isDefaultCase());
582:       assertFalse(node0.isVar());
583:       assertFalse(node0.isArrayLit());
584:       assertFalse(node0.isLabelName());
585:       assertEquals(0, node0.getChildCount());
586:       assertFalse(node0.isThis());
587:       assertFalse(node0.isComma());
588:       assertFalse(node0.isGetProp());
589:       assertEquals(21, node0.getType());
590:       assertFalse(node0.isThrow());
591:       assertTrue(node0.isAdd());
592:       assertFalse(node0.isNot());
593:       assertFalse(node0.isObjectLit());
594:       assertFalse(node0.isScript());
595:       assertFalse(node0.isExprResult());
596:       assertFalse(node0.isHook());
597:       assertFalse(node0.isAssign());
598:       assertFalse(node0.isWith());
599:       assertFalse(node0.isBreak());
600:       assertFalse(node0.isInstanceOf());
601:       assertFalse(node0.isGetElem());
602:       assertEquals((-1), node0.getSourcePosition());
603:       assertFalse(node0.isTypeOf());
604:       assertFalse(node0.isDec());
605:       assertFalse(node0.isReturn());
606:       assertFalse(node0.isIf());
607:       assertFalse(node0.hasChildren());
608:       assertFalse(node0.isNE());
609:       assertFalse(node0.isString());
610:       assertFalse(node0.isIn());
611:       assertFalse(node0.isInc());
612:       assertFalse(node0.isFunction());
613:       assertFalse(node0.isDebugger());
614:       assertFalse(node0.isAnd());
615:       assertFalse(node0.isContinue());
616:       assertFalse(node0.isFalse());
617:       assertFalse(node0.isCast());
618:       assertEquals(53, Node.INPUT_ID);
619:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
620:       assertEquals(43, Node.IS_CONSTANT_NAME);
621:       assertEquals(47, Node.IS_DISPATCHER);
622:       assertEquals(2, Node.POST_FLAG);
623:       assertEquals(4095, Node.COLUMN_MASK);
624:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
625:       assertEquals(32, Node.INCRDECR_PROP);
626:       assertEquals(51, Node.STATIC_SOURCE_FILE);
627:       assertEquals(12, Node.COLUMN_BITS);
628:       assertEquals(46, Node.IS_NAMESPACE);
629:       assertEquals(50, Node.FREE_CALL);
630:       assertEquals(1, Node.DECR_FLAG);
631:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
632:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
633:       assertEquals(52, Node.LENGTH);
634:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
635:       assertEquals(57, Node.REFLECTED_OBJECT);
636:       assertEquals(57, Node.LAST_PROP);
637:       assertEquals(54, Node.SLASH_V);
638:       assertEquals(30, Node.VAR_ARGS_NAME);
639:       assertEquals(49, Node.DIRECT_EVAL);
640:       assertEquals(40, Node.ORIGINALNAME_PROP);
641:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
642:       assertEquals(48, Node.DIRECTIVES);
643:       assertEquals(37, Node.OPT_ARG_NAME);
644:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
645:       assertEquals(56, Node.CHANGE_TIME);
646:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
647:       assertEquals(29, Node.JSDOC_INFO_PROP);
648:       assertEquals(15, Node.NO_SIDE_EFFECTS);
649:       assertEquals(36, Node.QUOTED_PROP);
650:       assertEquals(55, Node.INFERRED_FUNCTION);
651:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
652:       assertEquals(8, Node.FLAG_NO_THROWS);
653:       assertEquals(39, Node.EMPTY_BLOCK);
654:       
655:       Node node1 = null;
656:       // Undeclared exception!
657:       try { 
658:         node0.useSourceInfoIfMissingFromForTree((Node) null);
659:         fail("Expecting exception: NullPointerException");
660:       
661:       } catch(NullPointerException e) {
662:          //
663:          // no message in exception (getMessage() returned null)
664:          //
665:          verifyException("com.google.javascript.rhino.Node", e);
666:       }
667:   }
668: }
RegularFileObject[/tmp/EvoSuite_85_1628161374129/com/google/javascript/rhino/Node_85_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:02:54 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_85_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_85_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_85_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:02:54.207 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(21, "ALL_TYPE");
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertEquals(21, node0.getType());
assertFalse(node0.isThrow());
assertTrue(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertNotNull(node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean0 = node0.isFromExterns();
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertEquals(21, node0.getType());
assertFalse(node0.isThrow());
assertTrue(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean1 = node0.isObjectLit();
assertTrue(boolean1 == boolean0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertEquals(21, node0.getType());
assertFalse(node0.isThrow());
assertTrue(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertEquals(21, node0.getType());
assertFalse(node0.isThrow());
assertTrue(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean2 = node0.isNew();
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertEquals(21, node0.getType());
assertFalse(node0.isThrow());
assertTrue(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(boolean2);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);

String string0 = "";
node0.setSourceFileForTesting("");
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertEquals(21, node0.getType());
assertFalse(node0.isThrow());
assertTrue(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);

Node node1 = null;
node0.useSourceInfoIfMissingFromForTree((Node) null);

[MASTER] 11:02:57.250 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_103_1628161377064/com/google/javascript/rhino/Node_103_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_103_1628161377064/com/google/javascript/rhino/Node_103_tmp__ESTest_scaffolding.java]]
[MASTER] 11:02:57.250 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:57.250 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:57.251 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 840
[MASTER] 11:02:57.252 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_103_1628161377064/com/google/javascript/rhino/Node_103_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:02:57 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.EnumElementType;
14: import com.google.javascript.rhino.jstype.EnumType;
15: import com.google.javascript.rhino.jstype.JSType;
16: import com.google.javascript.rhino.jstype.JSTypeRegistry;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_103_tmp__ESTest extends Node_103_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Node node0 = Node.newNumber(1.0);
27:       assertEquals((-1), node0.getLineno());
28:       assertFalse(node0.isReturn());
29:       assertFalse(node0.isDo());
30:       assertFalse(node0.isWhile());
31:       assertFalse(node0.isAssignAdd());
32:       assertEquals((-1), node0.getSourcePosition());
33:       assertFalse(node0.isAdd());
34:       assertFalse(node0.isOr());
35:       assertFalse(node0.hasOneChild());
36:       assertFalse(node0.isCall());
37:       assertFalse(node0.isGetElem());
38:       assertFalse(node0.isBlock());
39:       assertFalse(node0.isName());
40:       assertFalse(node0.isTypeOf());
41:       assertFalse(node0.isDec());
42:       assertFalse(node0.isExprResult());
43:       assertEquals(39, node0.getType());
44:       assertFalse(node0.hasChildren());
45:       assertFalse(node0.isAssign());
46:       assertFalse(node0.hasMoreThanOneChild());
47:       assertFalse(node0.isWith());
48:       assertEquals(0, node0.getChildCount());
49:       assertFalse(node0.isParamList());
50:       assertFalse(node0.isDefaultCase());
51:       assertFalse(node0.isScript());
52:       assertFalse(node0.isNull());
53:       assertFalse(node0.isTrue());
54:       assertFalse(node0.isArrayLit());
55:       assertFalse(node0.isVar());
56:       assertFalse(node0.isNew());
57:       assertFalse(node0.isLabelName());
58:       assertFalse(node0.isStringKey());
59:       assertFalse(node0.isSwitch());
60:       assertFalse(node0.isLabel());
61:       assertFalse(node0.isCase());
62:       assertTrue(node0.isNumber());
63:       assertFalse(node0.isNE());
64:       assertFalse(node0.isInc());
65:       assertEquals((-1), node0.getCharno());
66:       assertFalse(node0.isEmpty());
67:       assertFalse(node0.isGetterDef());
68:       assertFalse(node0.isString());
69:       assertFalse(node0.isIn());
70:       assertFalse(node0.isHook());
71:       assertFalse(node0.isFor());
72:       assertFalse(node0.isTry());
73:       assertFalse(node0.isDelProp());
74:       assertFalse(node0.isVoid());
75:       assertFalse(node0.isIf());
76:       assertFalse(node0.isRegExp());
77:       assertFalse(node0.isComma());
78:       assertFalse(node0.isThis());
79:       assertFalse(node0.isBreak());
80:       assertFalse(node0.isCatch());
81:       assertFalse(node0.isInstanceOf());
82:       assertFalse(node0.isAnd());
83:       assertFalse(node0.isDebugger());
84:       assertFalse(node0.isSetterDef());
85:       assertFalse(node0.isGetProp());
86:       assertFalse(node0.isNot());
87:       assertFalse(node0.isObjectLit());
88:       assertFalse(node0.isCast());
89:       assertFalse(node0.isThrow());
90:       assertFalse(node0.isContinue());
91:       assertFalse(node0.isFunction());
92:       assertFalse(node0.isFalse());
93:       assertNotNull(node0);
94:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
95:       assertEquals(40, Node.ORIGINALNAME_PROP);
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(48, Node.DIRECTIVES);
98:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
99:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
100:       assertEquals(4095, Node.COLUMN_MASK);
101:       assertEquals(30, Node.VAR_ARGS_NAME);
102:       assertEquals(1, Node.DECR_FLAG);
103:       assertEquals(12, Node.COLUMN_BITS);
104:       assertEquals(43, Node.IS_CONSTANT_NAME);
105:       assertEquals(32, Node.INCRDECR_PROP);
106:       assertEquals(46, Node.IS_NAMESPACE);
107:       assertEquals(54, Node.SLASH_V);
108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
109:       assertEquals(50, Node.FREE_CALL);
110:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
111:       assertEquals(29, Node.JSDOC_INFO_PROP);
112:       assertEquals(56, Node.CHANGE_TIME);
113:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
114:       assertEquals(37, Node.OPT_ARG_NAME);
115:       assertEquals(47, Node.IS_DISPATCHER);
116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
117:       assertEquals(2, Node.POST_FLAG);
118:       assertEquals(55, Node.INFERRED_FUNCTION);
119:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
120:       assertEquals(15, Node.NO_SIDE_EFFECTS);
121:       assertEquals(57, Node.LAST_PROP);
122:       assertEquals(49, Node.DIRECT_EVAL);
123:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
124:       assertEquals(39, Node.EMPTY_BLOCK);
125:       assertEquals(53, Node.INPUT_ID);
126:       assertEquals(36, Node.QUOTED_PROP);
127:       assertEquals(57, Node.REFLECTED_OBJECT);
128:       assertEquals(52, Node.LENGTH);
129:       assertEquals(8, Node.FLAG_NO_THROWS);
130:       
131:       Node node1 = new Node(407, 5177, 149);
132:       assertFalse(node1.equals((Object)node0));
133:       assertFalse(node1.isCast());
134:       assertFalse(node1.isAssign());
135:       assertFalse(node1.isWith());
136:       assertFalse(node1.isGetElem());
137:       assertFalse(node1.isExprResult());
138:       assertFalse(node1.isAnd());
139:       assertEquals(21205141, node1.getSourcePosition());
140:       assertFalse(node1.isLabelName());
141:       assertFalse(node1.isLabel());
142:       assertFalse(node1.isAssignAdd());
143:       assertFalse(node1.isContinue());
144:       assertFalse(node1.isOr());
145:       assertEquals(5177, node1.getLineno());
146:       assertFalse(node1.isThrow());
147:       assertFalse(node1.isNew());
148:       assertFalse(node1.isDo());
149:       assertEquals(149, node1.getCharno());
150:       assertFalse(node1.isHook());
151:       assertFalse(node1.isBlock());
152:       assertFalse(node1.isVar());
153:       assertEquals(407, node1.getType());
154:       assertFalse(node1.isStringKey());
155:       assertFalse(node1.isParamList());
156:       assertFalse(node1.isSwitch());
157:       assertFalse(node1.isInstanceOf());
158:       assertFalse(node1.isCatch());
159:       assertFalse(node1.isThis());
160:       assertFalse(node1.hasMoreThanOneChild());
161:       assertFalse(node1.isNumber());
162:       assertFalse(node1.isGetterDef());
163:       assertFalse(node1.isScript());
164:       assertFalse(node1.isFor());
165:       assertFalse(node1.hasOneChild());
166:       assertFalse(node1.isCase());
167:       assertFalse(node1.isTry());
168:       assertFalse(node1.isTrue());
169:       assertFalse(node1.isDebugger());
170:       assertFalse(node1.isFunction());
171:       assertFalse(node1.isRegExp());
172:       assertFalse(node1.isIf());
173:       assertFalse(node1.isNE());
174:       assertFalse(node1.isArrayLit());
175:       assertFalse(node1.isDelProp());
176:       assertFalse(node1.isVoid());
177:       assertFalse(node1.isIn());
178:       assertEquals(0, node1.getChildCount());
179:       assertFalse(node1.isDefaultCase());
180:       assertFalse(node1.isEmpty());
181:       assertFalse(node1.isSetterDef());
182:       assertFalse(node1.isInc());
183:       assertFalse(node1.isAdd());
184:       assertFalse(node1.isFalse());
185:       assertFalse(node1.isBreak());
186:       assertFalse(node1.isNull());
187:       assertFalse(node1.isCall());
188:       assertFalse(node1.isName());
189:       assertFalse(node1.isReturn());
190:       assertFalse(node1.isObjectLit());
191:       assertFalse(node1.isComma());
192:       assertFalse(node1.isTypeOf());
193:       assertFalse(node1.isDec());
194:       assertFalse(node1.isNot());
195:       assertFalse(node1.isString());
196:       assertFalse(node1.isWhile());
197:       assertFalse(node1.hasChildren());
198:       assertFalse(node1.isGetProp());
199:       assertNotNull(node1);
200:       assertEquals(12, Node.COLUMN_BITS);
201:       assertEquals(30, Node.VAR_ARGS_NAME);
202:       assertEquals(46, Node.IS_NAMESPACE);
203:       assertEquals(51, Node.STATIC_SOURCE_FILE);
204:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
205:       assertEquals(57, Node.LAST_PROP);
206:       assertEquals(29, Node.JSDOC_INFO_PROP);
207:       assertEquals(32, Node.INCRDECR_PROP);
208:       assertEquals(15, Node.NO_SIDE_EFFECTS);
209:       assertEquals(1, Node.DECR_FLAG);
210:       assertEquals(57, Node.REFLECTED_OBJECT);
211:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
212:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
213:       assertEquals(52, Node.LENGTH);
214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
215:       assertEquals(56, Node.CHANGE_TIME);
216:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
217:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
218:       assertEquals(49, Node.DIRECT_EVAL);
219:       assertEquals(48, Node.DIRECTIVES);
220:       assertEquals(37, Node.OPT_ARG_NAME);
221:       assertEquals(55, Node.INFERRED_FUNCTION);
222:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
223:       assertEquals(4095, Node.COLUMN_MASK);
224:       assertEquals(36, Node.QUOTED_PROP);
225:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
226:       assertEquals(8, Node.FLAG_NO_THROWS);
227:       assertEquals(39, Node.EMPTY_BLOCK);
228:       assertEquals(53, Node.INPUT_ID);
229:       assertEquals(40, Node.ORIGINALNAME_PROP);
230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
231:       assertEquals(50, Node.FREE_CALL);
232:       assertEquals(47, Node.IS_DISPATCHER);
233:       assertEquals(2, Node.POST_FLAG);
234:       assertEquals(54, Node.SLASH_V);
235:       assertEquals(43, Node.IS_CONSTANT_NAME);
236:       
237:       Node node2 = new Node(16, node0);
238:       assertFalse(node0.equals((Object)node1));
239:       assertFalse(node2.equals((Object)node0));
240:       assertFalse(node2.equals((Object)node1));
241:       assertEquals((-1), node0.getLineno());
242:       assertFalse(node0.isReturn());
243:       assertFalse(node0.isDo());
244:       assertFalse(node0.isWhile());
245:       assertFalse(node0.isAssignAdd());
246:       assertEquals((-1), node0.getSourcePosition());
247:       assertFalse(node0.isAdd());
248:       assertFalse(node0.isOr());
249:       assertFalse(node0.hasOneChild());
250:       assertFalse(node0.isCall());
251:       assertFalse(node0.isGetElem());
252:       assertFalse(node0.isBlock());
253:       assertFalse(node0.isName());
254:       assertFalse(node0.isTypeOf());
255:       assertFalse(node0.isDec());
256:       assertFalse(node0.isExprResult());
257:       assertEquals(39, node0.getType());
258:       assertFalse(node0.hasChildren());
259:       assertFalse(node0.isAssign());
260:       assertFalse(node0.hasMoreThanOneChild());
261:       assertFalse(node0.isWith());
262:       assertEquals(0, node0.getChildCount());
263:       assertFalse(node0.isParamList());
264:       assertFalse(node0.isDefaultCase());
265:       assertFalse(node0.isScript());
266:       assertFalse(node0.isNull());
267:       assertFalse(node0.isTrue());
268:       assertFalse(node0.isArrayLit());
269:       assertFalse(node0.isVar());
270:       assertFalse(node0.isNew());
271:       assertFalse(node0.isLabelName());
272:       assertFalse(node0.isStringKey());
273:       assertFalse(node0.isSwitch());
274:       assertFalse(node0.isLabel());
275:       assertFalse(node0.isCase());
276:       assertTrue(node0.isNumber());
277:       assertFalse(node0.isNE());
278:       assertFalse(node0.isInc());
279:       assertEquals((-1), node0.getCharno());
280:       assertFalse(node0.isEmpty());
281:       assertFalse(node0.isGetterDef());
282:       assertFalse(node0.isString());
283:       assertFalse(node0.isIn());
284:       assertFalse(node0.isHook());
285:       assertFalse(node0.isFor());
286:       assertFalse(node0.isTry());
287:       assertFalse(node0.isDelProp());
288:       assertFalse(node0.isVoid());
289:       assertFalse(node0.isIf());
290:       assertFalse(node0.isRegExp());
291:       assertFalse(node0.isComma());
292:       assertFalse(node0.isThis());
293:       assertFalse(node0.isBreak());
294:       assertFalse(node0.isCatch());
295:       assertFalse(node0.isInstanceOf());
296:       assertFalse(node0.isAnd());
297:       assertFalse(node0.isDebugger());
298:       assertFalse(node0.isSetterDef());
299:       assertFalse(node0.isGetProp());
300:       assertFalse(node0.isNot());
301:       assertFalse(node0.isObjectLit());
302:       assertFalse(node0.isCast());
303:       assertFalse(node0.isThrow());
304:       assertFalse(node0.isContinue());
305:       assertFalse(node0.isFunction());
306:       assertFalse(node0.isFalse());
307:       assertFalse(node2.isWith());
308:       assertFalse(node2.isObjectLit());
309:       assertFalse(node2.isNot());
310:       assertFalse(node2.isAnd());
311:       assertFalse(node2.isComma());
312:       assertFalse(node2.isInstanceOf());
313:       assertFalse(node2.isBreak());
314:       assertFalse(node2.isExprResult());
315:       assertFalse(node2.isCast());
316:       assertFalse(node2.isFalse());
317:       assertFalse(node2.isGetElem());
318:       assertFalse(node2.isThrow());
319:       assertFalse(node2.isAssignAdd());
320:       assertFalse(node2.isOr());
321:       assertFalse(node2.isInc());
322:       assertFalse(node2.isCase());
323:       assertFalse(node2.isDo());
324:       assertFalse(node2.isSwitch());
325:       assertFalse(node2.isBlock());
326:       assertFalse(node2.isLabel());
327:       assertEquals(1, node2.getChildCount());
328:       assertEquals((-1), node2.getLineno());
329:       assertFalse(node2.hasMoreThanOneChild());
330:       assertTrue(node2.hasChildren());
331:       assertFalse(node2.isStringKey());
332:       assertFalse(node2.isLabelName());
333:       assertFalse(node2.isGetterDef());
334:       assertFalse(node2.isHook());
335:       assertFalse(node2.isThis());
336:       assertFalse(node2.isParamList());
337:       assertFalse(node2.isFor());
338:       assertEquals((-1), node2.getCharno());
339:       assertFalse(node2.isTry());
340:       assertFalse(node2.isNumber());
341:       assertFalse(node2.isScript());
342:       assertFalse(node2.isDefaultCase());
343:       assertFalse(node2.isTrue());
344:       assertFalse(node2.isFunction());
345:       assertFalse(node2.isVoid());
346:       assertFalse(node2.isRegExp());
347:       assertFalse(node2.isArrayLit());
348:       assertFalse(node2.isCatch());
349:       assertFalse(node2.isName());
350:       assertFalse(node2.isDelProp());
351:       assertFalse(node2.isNull());
352:       assertFalse(node2.isIf());
353:       assertFalse(node2.isNE());
354:       assertFalse(node2.isVar());
355:       assertFalse(node2.isNew());
356:       assertFalse(node2.isAdd());
357:       assertFalse(node2.isIn());
358:       assertFalse(node2.isSetterDef());
359:       assertFalse(node2.isEmpty());
360:       assertFalse(node2.isContinue());
361:       assertFalse(node2.isReturn());
362:       assertFalse(node2.isWhile());
363:       assertFalse(node2.isTypeOf());
364:       assertFalse(node2.isCall());
365:       assertFalse(node2.isDec());
366:       assertFalse(node2.isAssign());
367:       assertEquals((-1), node2.getSourcePosition());
368:       assertTrue(node2.hasOneChild());
369:       assertEquals(16, node2.getType());
370:       assertFalse(node2.isGetProp());
371:       assertFalse(node2.isDebugger());
372:       assertFalse(node2.isString());
373:       assertNotNull(node2);
374:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
375:       assertEquals(40, Node.ORIGINALNAME_PROP);
376:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
377:       assertEquals(48, Node.DIRECTIVES);
378:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
379:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
380:       assertEquals(4095, Node.COLUMN_MASK);
381:       assertEquals(30, Node.VAR_ARGS_NAME);
382:       assertEquals(1, Node.DECR_FLAG);
383:       assertEquals(12, Node.COLUMN_BITS);
384:       assertEquals(43, Node.IS_CONSTANT_NAME);
385:       assertEquals(32, Node.INCRDECR_PROP);
386:       assertEquals(46, Node.IS_NAMESPACE);
387:       assertEquals(54, Node.SLASH_V);
388:       assertEquals(51, Node.STATIC_SOURCE_FILE);
389:       assertEquals(50, Node.FREE_CALL);
390:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
391:       assertEquals(29, Node.JSDOC_INFO_PROP);
392:       assertEquals(56, Node.CHANGE_TIME);
393:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
394:       assertEquals(37, Node.OPT_ARG_NAME);
395:       assertEquals(47, Node.IS_DISPATCHER);
396:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
397:       assertEquals(2, Node.POST_FLAG);
398:       assertEquals(55, Node.INFERRED_FUNCTION);
399:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
400:       assertEquals(15, Node.NO_SIDE_EFFECTS);
401:       assertEquals(57, Node.LAST_PROP);
402:       assertEquals(49, Node.DIRECT_EVAL);
403:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
404:       assertEquals(39, Node.EMPTY_BLOCK);
405:       assertEquals(53, Node.INPUT_ID);
406:       assertEquals(36, Node.QUOTED_PROP);
407:       assertEquals(57, Node.REFLECTED_OBJECT);
408:       assertEquals(52, Node.LENGTH);
409:       assertEquals(8, Node.FLAG_NO_THROWS);
410:       assertEquals(56, Node.CHANGE_TIME);
411:       assertEquals(47, Node.IS_DISPATCHER);
412:       assertEquals(2, Node.POST_FLAG);
413:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
414:       assertEquals(37, Node.OPT_ARG_NAME);
415:       assertEquals(32, Node.INCRDECR_PROP);
416:       assertEquals(46, Node.IS_NAMESPACE);
417:       assertEquals(51, Node.STATIC_SOURCE_FILE);
418:       assertEquals(29, Node.JSDOC_INFO_PROP);
419:       assertEquals(53, Node.INPUT_ID);
420:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
421:       assertEquals(36, Node.QUOTED_PROP);
422:       assertEquals(1, Node.DECR_FLAG);
423:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
424:       assertEquals(49, Node.DIRECT_EVAL);
425:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
426:       assertEquals(12, Node.COLUMN_BITS);
427:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
428:       assertEquals(4095, Node.COLUMN_MASK);
429:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
430:       assertEquals(39, Node.EMPTY_BLOCK);
431:       assertEquals(48, Node.DIRECTIVES);
432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
433:       assertEquals(57, Node.REFLECTED_OBJECT);
434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
435:       assertEquals(50, Node.FREE_CALL);
436:       assertEquals(55, Node.INFERRED_FUNCTION);
437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
438:       assertEquals(52, Node.LENGTH);
439:       assertEquals(8, Node.FLAG_NO_THROWS);
440:       assertEquals(15, Node.NO_SIDE_EFFECTS);
441:       assertEquals(57, Node.LAST_PROP);
442:       assertEquals(30, Node.VAR_ARGS_NAME);
443:       assertEquals(54, Node.SLASH_V);
444:       assertEquals(43, Node.IS_CONSTANT_NAME);
445:       assertEquals(40, Node.ORIGINALNAME_PROP);
446:       
447:       double double0 = node0.getDouble();
448:       assertFalse(node0.equals((Object)node1));
449:       assertFalse(node0.equals((Object)node2));
450:       assertEquals((-1), node0.getLineno());
451:       assertFalse(node0.isReturn());
452:       assertFalse(node0.isDo());
453:       assertFalse(node0.isWhile());
454:       assertFalse(node0.isAssignAdd());
455:       assertEquals((-1), node0.getSourcePosition());
456:       assertFalse(node0.isAdd());
457:       assertFalse(node0.isOr());
458:       assertFalse(node0.hasOneChild());
459:       assertFalse(node0.isCall());
460:       assertFalse(node0.isGetElem());
461:       assertFalse(node0.isBlock());
462:       assertFalse(node0.isName());
463:       assertFalse(node0.isTypeOf());
464:       assertFalse(node0.isDec());
465:       assertFalse(node0.isExprResult());
466:       assertEquals(39, node0.getType());
467:       assertFalse(node0.hasChildren());
468:       assertFalse(node0.isAssign());
469:       assertFalse(node0.hasMoreThanOneChild());
470:       assertFalse(node0.isWith());
471:       assertEquals(0, node0.getChildCount());
472:       assertFalse(node0.isParamList());
473:       assertFalse(node0.isDefaultCase());
474:       assertFalse(node0.isScript());
475:       assertFalse(node0.isNull());
476:       assertFalse(node0.isTrue());
477:       assertFalse(node0.isArrayLit());
478:       assertFalse(node0.isVar());
479:       assertFalse(node0.isNew());
480:       assertFalse(node0.isLabelName());
481:       assertFalse(node0.isStringKey());
482:       assertFalse(node0.isSwitch());
483:       assertFalse(node0.isLabel());
484:       assertFalse(node0.isCase());
485:       assertTrue(node0.isNumber());
486:       assertFalse(node0.isNE());
487:       assertFalse(node0.isInc());
488:       assertEquals((-1), node0.getCharno());
489:       assertFalse(node0.isEmpty());
490:       assertFalse(node0.isGetterDef());
491:       assertFalse(node0.isString());
492:       assertFalse(node0.isIn());
493:       assertFalse(node0.isHook());
494:       assertFalse(node0.isFor());
495:       assertFalse(node0.isTry());
496:       assertFalse(node0.isDelProp());
497:       assertFalse(node0.isVoid());
498:       assertFalse(node0.isIf());
499:       assertFalse(node0.isRegExp());
500:       assertFalse(node0.isComma());
501:       assertFalse(node0.isThis());
502:       assertFalse(node0.isBreak());
503:       assertFalse(node0.isCatch());
504:       assertFalse(node0.isInstanceOf());
505:       assertFalse(node0.isAnd());
506:       assertFalse(node0.isDebugger());
507:       assertFalse(node0.isSetterDef());
508:       assertFalse(node0.isGetProp());
509:       assertFalse(node0.isNot());
510:       assertFalse(node0.isObjectLit());
511:       assertFalse(node0.isCast());
512:       assertFalse(node0.isThrow());
513:       assertFalse(node0.isContinue());
514:       assertFalse(node0.isFunction());
515:       assertFalse(node0.isFalse());
516:       assertEquals(1.0, double0, 0.01);
517:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
518:       assertEquals(40, Node.ORIGINALNAME_PROP);
519:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
520:       assertEquals(48, Node.DIRECTIVES);
521:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
522:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
523:       assertEquals(4095, Node.COLUMN_MASK);
524:       assertEquals(30, Node.VAR_ARGS_NAME);
525:       assertEquals(1, Node.DECR_FLAG);
526:       assertEquals(12, Node.COLUMN_BITS);
527:       assertEquals(43, Node.IS_CONSTANT_NAME);
528:       assertEquals(32, Node.INCRDECR_PROP);
529:       assertEquals(46, Node.IS_NAMESPACE);
530:       assertEquals(54, Node.SLASH_V);
531:       assertEquals(51, Node.STATIC_SOURCE_FILE);
532:       assertEquals(50, Node.FREE_CALL);
533:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
534:       assertEquals(29, Node.JSDOC_INFO_PROP);
535:       assertEquals(56, Node.CHANGE_TIME);
536:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
537:       assertEquals(37, Node.OPT_ARG_NAME);
538:       assertEquals(47, Node.IS_DISPATCHER);
539:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
540:       assertEquals(2, Node.POST_FLAG);
541:       assertEquals(55, Node.INFERRED_FUNCTION);
542:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
543:       assertEquals(15, Node.NO_SIDE_EFFECTS);
544:       assertEquals(57, Node.LAST_PROP);
545:       assertEquals(49, Node.DIRECT_EVAL);
546:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
547:       assertEquals(39, Node.EMPTY_BLOCK);
548:       assertEquals(53, Node.INPUT_ID);
549:       assertEquals(36, Node.QUOTED_PROP);
550:       assertEquals(57, Node.REFLECTED_OBJECT);
551:       assertEquals(52, Node.LENGTH);
552:       assertEquals(8, Node.FLAG_NO_THROWS);
553:       
554:       Node node3 = Node.newString((-125), "me");
555:       assertFalse(node3.equals((Object)node1));
556:       assertFalse(node3.equals((Object)node0));
557:       assertFalse(node3.equals((Object)node2));
558:       assertEquals((-1), node3.getCharno());
559:       assertFalse(node3.isInc());
560:       assertFalse(node3.isHook());
561:       assertFalse(node3.isSwitch());
562:       assertFalse(node3.isThrow());
563:       assertFalse(node3.isFalse());
564:       assertFalse(node3.isBreak());
565:       assertFalse(node3.isGetProp());
566:       assertFalse(node3.isThis());
567:       assertFalse(node3.isComma());
568:       assertFalse(node3.isFor());
569:       assertFalse(node3.isAnd());
570:       assertFalse(node3.isObjectLit());
571:       assertFalse(node3.isNot());
572:       assertFalse(node3.isCase());
573:       assertFalse(node3.isGetterDef());
574:       assertFalse(node3.isScript());
575:       assertFalse(node3.isString());
576:       assertFalse(node3.isVoid());
577:       assertFalse(node3.isTrue());
578:       assertFalse(node3.isExprResult());
579:       assertFalse(node3.isDefaultCase());
580:       assertFalse(node3.isGetElem());
581:       assertFalse(node3.isLabelName());
582:       assertFalse(node3.isAssign());
583:       assertFalse(node3.isArrayLit());
584:       assertEquals(0, node3.getChildCount());
585:       assertFalse(node3.isDec());
586:       assertFalse(node3.isTypeOf());
587:       assertFalse(node3.isOr());
588:       assertFalse(node3.isLabel());
589:       assertFalse(node3.isNull());
590:       assertFalse(node3.isDelProp());
591:       assertFalse(node3.isAssignAdd());
592:       assertFalse(node3.isDo());
593:       assertFalse(node3.isEmpty());
594:       assertFalse(node3.isBlock());
595:       assertFalse(node3.isAdd());
596:       assertFalse(node3.isNew());
597:       assertFalse(node3.isVar());
598:       assertFalse(node3.isWhile());
599:       assertFalse(node3.isContinue());
600:       assertFalse(node3.isCall());
601:       assertFalse(node3.isName());
602:       assertFalse(node3.hasMoreThanOneChild());
603:       assertEquals((-1), node3.getSourcePosition());
604:       assertFalse(node3.hasChildren());
605:       assertFalse(node3.isReturn());
606:       assertFalse(node3.isStringKey());
607:       assertFalse(node3.isParamList());
608:       assertFalse(node3.hasOneChild());
609:       assertFalse(node3.isNumber());
610:       assertFalse(node3.isFunction());
611:       assertFalse(node3.isTry());
612:       assertFalse(node3.isDebugger());
613:       assertFalse(node3.isRegExp());
614:       assertFalse(node3.isCast());
615:       assertEquals((-125), node3.getType());
616:       assertFalse(node3.isCatch());
617:       assertFalse(node3.isWith());
618:       assertFalse(node3.isInstanceOf());
619:       assertFalse(node3.isSetterDef());
620:       assertEquals((-1), node3.getLineno());
621:       assertFalse(node3.isIf());
622:       assertFalse(node3.isNE());
623:       assertFalse(node3.isIn());
624:       assertNotNull(node3);
625:       assertEquals(48, Node.DIRECTIVES);
626:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
627:       assertEquals(36, Node.QUOTED_PROP);
628:       assertEquals(39, Node.EMPTY_BLOCK);
629:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
630:       assertEquals(55, Node.INFERRED_FUNCTION);
631:       assertEquals(50, Node.FREE_CALL);
632:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
633:       assertEquals(8, Node.FLAG_NO_THROWS);
634:       assertEquals(53, Node.INPUT_ID);
635:       assertEquals(54, Node.SLASH_V);
636:       assertEquals(43, Node.IS_CONSTANT_NAME);
637:       assertEquals(57, Node.LAST_PROP);
638:       assertEquals(30, Node.VAR_ARGS_NAME);
639:       assertEquals(47, Node.IS_DISPATCHER);
640:       assertEquals(40, Node.ORIGINALNAME_PROP);
641:       assertEquals(2, Node.POST_FLAG);
642:       assertEquals(32, Node.INCRDECR_PROP);
643:       assertEquals(46, Node.IS_NAMESPACE);
644:       assertEquals(51, Node.STATIC_SOURCE_FILE);
645:       assertEquals(12, Node.COLUMN_BITS);
646:       assertEquals(37, Node.OPT_ARG_NAME);
647:       assertEquals(1, Node.DECR_FLAG);
648:       assertEquals(49, Node.DIRECT_EVAL);
649:       assertEquals(56, Node.CHANGE_TIME);
650:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
651:       assertEquals(29, Node.JSDOC_INFO_PROP);
652:       assertEquals(15, Node.NO_SIDE_EFFECTS);
653:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
654:       assertEquals(52, Node.LENGTH);
655:       assertEquals(57, Node.REFLECTED_OBJECT);
656:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
657:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
658:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
659:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
660:       assertEquals(4095, Node.COLUMN_MASK);
661:       
662:       node3.setType(36);
663:       assertFalse(node3.equals((Object)node1));
664:       assertFalse(node3.equals((Object)node0));
665:       assertFalse(node3.equals((Object)node2));
666:       assertEquals((-1), node3.getCharno());
667:       assertFalse(node3.isInc());
668:       assertFalse(node3.isHook());
669:       assertFalse(node3.isSwitch());
670:       assertFalse(node3.isThrow());
671:       assertFalse(node3.isFalse());
672:       assertFalse(node3.isBreak());
673:       assertFalse(node3.isGetProp());
674:       assertFalse(node3.isThis());
675:       assertFalse(node3.isComma());
676:       assertFalse(node3.isFor());
677:       assertFalse(node3.isAnd());
678:       assertFalse(node3.isObjectLit());
679:       assertFalse(node3.isNot());
680:       assertFalse(node3.isCase());
681:       assertFalse(node3.isGetterDef());
682:       assertFalse(node3.isScript());
683:       assertFalse(node3.isString());
684:       assertFalse(node3.isVoid());
685:       assertFalse(node3.isTrue());
686:       assertFalse(node3.isExprResult());
687:       assertFalse(node3.isDefaultCase());
688:       assertFalse(node3.isGetElem());
689:       assertFalse(node3.isLabelName());
690:       assertFalse(node3.isAssign());
691:       assertFalse(node3.isArrayLit());
692:       assertEquals(0, node3.getChildCount());
693:       assertFalse(node3.isDec());
694:       assertFalse(node3.isTypeOf());
695:       assertFalse(node3.isOr());
696:       assertFalse(node3.isLabel());
697:       assertFalse(node3.isNull());
698:       assertFalse(node3.isDelProp());
699:       assertFalse(node3.isAssignAdd());
700:       assertFalse(node3.isDo());
701:       assertFalse(node3.isEmpty());
702:       assertFalse(node3.isBlock());
703:       assertFalse(node3.isAdd());
704:       assertFalse(node3.isNew());
705:       assertFalse(node3.isVar());
706:       assertFalse(node3.isWhile());
707:       assertFalse(node3.isContinue());
708:       assertFalse(node3.isCall());
709:       assertFalse(node3.isName());
710:       assertFalse(node3.hasMoreThanOneChild());
711:       assertEquals((-1), node3.getSourcePosition());
712:       assertFalse(node3.hasChildren());
713:       assertFalse(node3.isReturn());
714:       assertFalse(node3.isStringKey());
715:       assertFalse(node3.isParamList());
716:       assertFalse(node3.hasOneChild());
717:       assertFalse(node3.isNumber());
718:       assertFalse(node3.isFunction());
719:       assertFalse(node3.isTry());
720:       assertFalse(node3.isDebugger());
721:       assertEquals(36, node3.getType());
722:       assertFalse(node3.isRegExp());
723:       assertFalse(node3.isCast());
724:       assertFalse(node3.isCatch());
725:       assertFalse(node3.isWith());
726:       assertFalse(node3.isInstanceOf());
727:       assertFalse(node3.isSetterDef());
728:       assertEquals((-1), node3.getLineno());
729:       assertFalse(node3.isIf());
730:       assertFalse(node3.isNE());
731:       assertFalse(node3.isIn());
732:       assertEquals(48, Node.DIRECTIVES);
733:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
734:       assertEquals(36, Node.QUOTED_PROP);
735:       assertEquals(39, Node.EMPTY_BLOCK);
736:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
737:       assertEquals(55, Node.INFERRED_FUNCTION);
738:       assertEquals(50, Node.FREE_CALL);
739:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
740:       assertEquals(8, Node.FLAG_NO_THROWS);
741:       assertEquals(53, Node.INPUT_ID);
742:       assertEquals(54, Node.SLASH_V);
743:       assertEquals(43, Node.IS_CONSTANT_NAME);
744:       assertEquals(57, Node.LAST_PROP);
745:       assertEquals(30, Node.VAR_ARGS_NAME);
746:       assertEquals(47, Node.IS_DISPATCHER);
747:       assertEquals(40, Node.ORIGINALNAME_PROP);
748:       assertEquals(2, Node.POST_FLAG);
749:       assertEquals(32, Node.INCRDECR_PROP);
750:       assertEquals(46, Node.IS_NAMESPACE);
751:       assertEquals(51, Node.STATIC_SOURCE_FILE);
752:       assertEquals(12, Node.COLUMN_BITS);
753:       assertEquals(37, Node.OPT_ARG_NAME);
754:       assertEquals(1, Node.DECR_FLAG);
755:       assertEquals(49, Node.DIRECT_EVAL);
756:       assertEquals(56, Node.CHANGE_TIME);
757:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
758:       assertEquals(29, Node.JSDOC_INFO_PROP);
759:       assertEquals(15, Node.NO_SIDE_EFFECTS);
760:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
761:       assertEquals(52, Node.LENGTH);
762:       assertEquals(57, Node.REFLECTED_OBJECT);
763:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
764:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
765:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
766:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
767:       assertEquals(4095, Node.COLUMN_MASK);
768:       
769:       Iterable<Node> iterable0 = node1.children();
770:       assertFalse(node1.equals((Object)node3));
771:       assertFalse(node1.equals((Object)node0));
772:       assertFalse(node1.equals((Object)node2));
773:       assertNotSame(node1, node2);
774:       assertFalse(node1.isCast());
775:       assertFalse(node1.isAssign());
776:       assertFalse(node1.isWith());
777:       assertFalse(node1.isGetElem());
778:       assertFalse(node1.isExprResult());
779:       assertFalse(node1.isAnd());
780:       assertEquals(21205141, node1.getSourcePosition());
781:       assertFalse(node1.isLabelName());
782:       assertFalse(node1.isLabel());
783:       assertFalse(node1.isAssignAdd());
784:       assertFalse(node1.isContinue());
785:       assertFalse(node1.isOr());
786:       assertEquals(5177, node1.getLineno());
787:       assertFalse(node1.isThrow());
788:       assertFalse(node1.isNew());
789:       assertFalse(node1.isDo());
790:       assertEquals(149, node1.getCharno());
791:       assertFalse(node1.isHook());
792:       assertFalse(node1.isBlock());
793:       assertFalse(node1.isVar());
794:       assertEquals(407, node1.getType());
795:       assertFalse(node1.isStringKey());
796:       assertFalse(node1.isParamList());
797:       assertFalse(node1.isSwitch());
798:       assertFalse(node1.isInstanceOf());
799:       assertFalse(node1.isCatch());
800:       assertFalse(node1.isThis());
801:       assertFalse(node1.hasMoreThanOneChild());
802:       assertFalse(node1.isNumber());
803:       assertFalse(node1.isGetterDef());
804:       assertFalse(node1.isScript());
805:       assertFalse(node1.isFor());
806:       assertFalse(node1.hasOneChild());
807:       assertFalse(node1.isCase());
808:       assertFalse(node1.isTry());
809:       assertFalse(node1.isTrue());
810:       assertFalse(node1.isDebugger());
811:       assertFalse(node1.isFunction());
812:       assertFalse(node1.isRegExp());
813:       assertFalse(node1.isIf());
814:       assertFalse(node1.isNE());
815:       assertFalse(node1.isArrayLit());
816:       assertFalse(node1.isDelProp());
817:       assertFalse(node1.isVoid());
818:       assertFalse(node1.isIn());
819:       assertEquals(0, node1.getChildCount());
820:       assertFalse(node1.isDefaultCase());
821:       assertFalse(node1.isEmpty());
822:       assertFalse(node1.isSetterDef());
823:       assertFalse(node1.isInc());
824:       assertFalse(node1.isAdd());
825:       assertFalse(node1.isFalse());
826:       assertFalse(node1.isBreak());
827:       assertFalse(node1.isNull());
828:       assertFalse(node1.isCall());
829:       assertFalse(node1.isName());
830:       assertFalse(node1.isReturn());
831:       assertFalse(node1.isObjectLit());
832:       assertFalse(node1.isComma());
833:       assertFalse(node1.isTypeOf());
834:       assertFalse(node1.isDec());
835:       assertFalse(node1.isNot());
836:       assertFalse(node1.isString());
837:       assertFalse(node1.isWhile());
838:       assertFalse(node1.hasChildren());
839:       assertFalse(node1.isGetProp());
840:       assertFalse(iterable0.contains(node1));
841:       assertNotNull(iterable0);
842:       assertEquals(12, Node.COLUMN_BITS);
843:       assertEquals(30, Node.VAR_ARGS_NAME);
844:       assertEquals(46, Node.IS_NAMESPACE);
845:       assertEquals(51, Node.STATIC_SOURCE_FILE);
846:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
847:       assertEquals(57, Node.LAST_PROP);
848:       assertEquals(29, Node.JSDOC_INFO_PROP);
849:       assertEquals(32, Node.INCRDECR_PROP);
850:       assertEquals(15, Node.NO_SIDE_EFFECTS);
851:       assertEquals(1, Node.DECR_FLAG);
852:       assertEquals(57, Node.REFLECTED_OBJECT);
853:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
854:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
855:       assertEquals(52, Node.LENGTH);
856:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
857:       assertEquals(56, Node.CHANGE_TIME);
858:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
859:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
860:       assertEquals(49, Node.DIRECT_EVAL);
861:       assertEquals(48, Node.DIRECTIVES);
862:       assertEquals(37, Node.OPT_ARG_NAME);
863:       assertEquals(55, Node.INFERRED_FUNCTION);
864:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
865:       assertEquals(4095, Node.COLUMN_MASK);
866:       assertEquals(36, Node.QUOTED_PROP);
867:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
868:       assertEquals(8, Node.FLAG_NO_THROWS);
869:       assertEquals(39, Node.EMPTY_BLOCK);
870:       assertEquals(53, Node.INPUT_ID);
871:       assertEquals(40, Node.ORIGINALNAME_PROP);
872:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
873:       assertEquals(50, Node.FREE_CALL);
874:       assertEquals(47, Node.IS_DISPATCHER);
875:       assertEquals(2, Node.POST_FLAG);
876:       assertEquals(54, Node.SLASH_V);
877:       assertEquals(43, Node.IS_CONSTANT_NAME);
878:       
879:       boolean boolean0 = node3.isNew();
880:       assertFalse(node3.equals((Object)node1));
881:       assertFalse(node3.equals((Object)node0));
882:       assertFalse(node3.equals((Object)node2));
883:       assertEquals((-1), node3.getCharno());
884:       assertFalse(node3.isInc());
885:       assertFalse(node3.isHook());
886:       assertFalse(node3.isSwitch());
887:       assertFalse(node3.isThrow());
888:       assertFalse(node3.isFalse());
889:       assertFalse(node3.isBreak());
890:       assertFalse(node3.isGetProp());
891:       assertFalse(node3.isThis());
892:       assertFalse(node3.isComma());
893:       assertFalse(node3.isFor());
894:       assertFalse(node3.isAnd());
895:       assertFalse(node3.isObjectLit());
896:       assertFalse(node3.isNot());
897:       assertFalse(node3.isCase());
898:       assertFalse(node3.isGetterDef());
899:       assertFalse(node3.isScript());
900:       assertFalse(node3.isString());
901:       assertFalse(node3.isVoid());
902:       assertFalse(node3.isTrue());
903:       assertFalse(node3.isExprResult());
904:       assertFalse(node3.isDefaultCase());
905:       assertFalse(node3.isGetElem());
906:       assertFalse(node3.isLabelName());
907:       assertFalse(node3.isAssign());
908:       assertFalse(node3.isArrayLit());
909:       assertEquals(0, node3.getChildCount());
910:       assertFalse(node3.isDec());
911:       assertFalse(node3.isTypeOf());
912:       assertFalse(node3.isOr());
913:       assertFalse(node3.isLabel());
914:       assertFalse(node3.isNull());
915:       assertFalse(node3.isDelProp());
916:       assertFalse(node3.isAssignAdd());
917:       assertFalse(node3.isDo());
918:       assertFalse(node3.isEmpty());
919:       assertFalse(node3.isBlock());
920:       assertFalse(node3.isAdd());
921:       assertFalse(node3.isNew());
922:       assertFalse(node3.isVar());
923:       assertFalse(node3.isWhile());
924:       assertFalse(node3.isContinue());
925:       assertFalse(node3.isCall());
926:       assertFalse(node3.isName());
927:       assertFalse(node3.hasMoreThanOneChild());
928:       assertEquals((-1), node3.getSourcePosition());
929:       assertFalse(node3.hasChildren());
930:       assertFalse(node3.isReturn());
931:       assertFalse(node3.isStringKey());
932:       assertFalse(node3.isParamList());
933:       assertFalse(node3.hasOneChild());
934:       assertFalse(node3.isNumber());
935:       assertFalse(node3.isFunction());
936:       assertFalse(node3.isTry());
937:       assertFalse(node3.isDebugger());
938:       assertEquals(36, node3.getType());
939:       assertFalse(node3.isRegExp());
940:       assertFalse(node3.isCast());
941:       assertFalse(node3.isCatch());
942:       assertFalse(node3.isWith());
943:       assertFalse(node3.isInstanceOf());
944:       assertFalse(node3.isSetterDef());
945:       assertEquals((-1), node3.getLineno());
946:       assertFalse(node3.isIf());
947:       assertFalse(node3.isNE());
948:       assertFalse(node3.isIn());
949:       assertFalse(boolean0);
950:       assertEquals(48, Node.DIRECTIVES);
951:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
952:       assertEquals(36, Node.QUOTED_PROP);
953:       assertEquals(39, Node.EMPTY_BLOCK);
954:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
955:       assertEquals(55, Node.INFERRED_FUNCTION);
956:       assertEquals(50, Node.FREE_CALL);
957:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
958:       assertEquals(8, Node.FLAG_NO_THROWS);
959:       assertEquals(53, Node.INPUT_ID);
960:       assertEquals(54, Node.SLASH_V);
961:       assertEquals(43, Node.IS_CONSTANT_NAME);
962:       assertEquals(57, Node.LAST_PROP);
963:       assertEquals(30, Node.VAR_ARGS_NAME);
964:       assertEquals(47, Node.IS_DISPATCHER);
965:       assertEquals(40, Node.ORIGINALNAME_PROP);
966:       assertEquals(2, Node.POST_FLAG);
967:       assertEquals(32, Node.INCRDECR_PROP);
968:       assertEquals(46, Node.IS_NAMESPACE);
969:       assertEquals(51, Node.STATIC_SOURCE_FILE);
970:       assertEquals(12, Node.COLUMN_BITS);
971:       assertEquals(37, Node.OPT_ARG_NAME);
972:       assertEquals(1, Node.DECR_FLAG);
973:       assertEquals(49, Node.DIRECT_EVAL);
974:       assertEquals(56, Node.CHANGE_TIME);
975:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
976:       assertEquals(29, Node.JSDOC_INFO_PROP);
977:       assertEquals(15, Node.NO_SIDE_EFFECTS);
978:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
979:       assertEquals(52, Node.LENGTH);
980:       assertEquals(57, Node.REFLECTED_OBJECT);
981:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
982:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
983:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
984:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
985:       assertEquals(4095, Node.COLUMN_MASK);
986:       
987:       node2.setSourceFileForTesting((String) null);
988:       assertFalse(node0.equals((Object)node3));
989:       assertFalse(node0.equals((Object)node1));
990:       assertFalse(node0.equals((Object)node2));
991:       assertFalse(node2.equals((Object)node0));
992:       assertFalse(node2.equals((Object)node3));
993:       assertFalse(node2.equals((Object)node1));
994:       assertNotSame(node2, node1);
995:       assertEquals((-1), node0.getLineno());
996:       assertFalse(node0.isReturn());
997:       assertFalse(node0.isDo());
998:       assertFalse(node0.isWhile());
999:       assertFalse(node0.isAssignAdd());
1000:       assertEquals((-1), node0.getSourcePosition());
1001:       assertFalse(node0.isAdd());
1002:       assertFalse(node0.isOr());
1003:       assertFalse(node0.hasOneChild());
1004:       assertFalse(node0.isCall());
1005:       assertFalse(node0.isGetElem());
1006:       assertFalse(node0.isBlock());
1007:       assertFalse(node0.isName());
1008:       assertFalse(node0.isTypeOf());
1009:       assertFalse(node0.isDec());
1010:       assertFalse(node0.isExprResult());
1011:       assertEquals(39, node0.getType());
1012:       assertFalse(node0.hasChildren());
1013:       assertFalse(node0.isAssign());
1014:       assertFalse(node0.hasMoreThanOneChild());
1015:       assertFalse(node0.isWith());
1016:       assertEquals(0, node0.getChildCount());
1017:       assertFalse(node0.isParamList());
1018:       assertFalse(node0.isDefaultCase());
1019:       assertFalse(node0.isScript());
1020:       assertFalse(node0.isNull());
1021:       assertFalse(node0.isTrue());
1022:       assertFalse(node0.isArrayLit());
1023:       assertFalse(node0.isVar());
1024:       assertFalse(node0.isNew());
1025:       assertFalse(node0.isLabelName());
1026:       assertFalse(node0.isStringKey());
1027:       assertFalse(node0.isSwitch());
1028:       assertFalse(node0.isLabel());
1029:       assertFalse(node0.isCase());
1030:       assertTrue(node0.isNumber());
1031:       assertFalse(node0.isNE());
1032:       assertFalse(node0.isInc());
1033:       assertEquals((-1), node0.getCharno());
1034:       assertFalse(node0.isEmpty());
1035:       assertFalse(node0.isGetterDef());
1036:       assertFalse(node0.isString());
1037:       assertFalse(node0.isIn());
1038:       assertFalse(node0.isHook());
1039:       assertFalse(node0.isFor());
1040:       assertFalse(node0.isTry());
1041:       assertFalse(node0.isDelProp());
1042:       assertFalse(node0.isVoid());
1043:       assertFalse(node0.isIf());
1044:       assertFalse(node0.isRegExp());
1045:       assertFalse(node0.isComma());
1046:       assertFalse(node0.isThis());
1047:       assertFalse(node0.isBreak());
1048:       assertFalse(node0.isCatch());
1049:       assertFalse(node0.isInstanceOf());
1050:       assertFalse(node0.isAnd());
1051:       assertFalse(node0.isDebugger());
1052:       assertFalse(node0.isSetterDef());
1053:       assertFalse(node0.isGetProp());
1054:       assertFalse(node0.isNot());
1055:       assertFalse(node0.isObjectLit());
1056:       assertFalse(node0.isCast());
1057:       assertFalse(node0.isThrow());
1058:       assertFalse(node0.isContinue());
1059:       assertFalse(node0.isFunction());
1060:       assertFalse(node0.isFalse());
1061:       assertFalse(node2.isWith());
1062:       assertFalse(node2.isObjectLit());
1063:       assertFalse(node2.isNot());
1064:       assertFalse(node2.isAnd());
1065:       assertFalse(node2.isComma());
1066:       assertFalse(node2.isInstanceOf());
1067:       assertFalse(node2.isBreak());
1068:       assertFalse(node2.isExprResult());
1069:       assertFalse(node2.isCast());
1070:       assertFalse(node2.isFalse());
1071:       assertFalse(node2.isGetElem());
1072:       assertFalse(node2.isThrow());
1073:       assertFalse(node2.isAssignAdd());
1074:       assertFalse(node2.isOr());
1075:       assertFalse(node2.isInc());
1076:       assertFalse(node2.isCase());
1077:       assertFalse(node2.isDo());
1078:       assertFalse(node2.isSwitch());
1079:       assertFalse(node2.isBlock());
1080:       assertFalse(node2.isLabel());
1081:       assertEquals(1, node2.getChildCount());
1082:       assertEquals((-1), node2.getLineno());
1083:       assertFalse(node2.hasMoreThanOneChild());
1084:       assertTrue(node2.hasChildren());
1085:       assertFalse(node2.isStringKey());
1086:       assertFalse(node2.isLabelName());
1087:       assertFalse(node2.isGetterDef());
1088:       assertFalse(node2.isHook());
1089:       assertFalse(node2.isThis());
1090:       assertFalse(node2.isParamList());
1091:       assertFalse(node2.isFor());
1092:       assertEquals((-1), node2.getCharno());
1093:       assertFalse(node2.isTry());
1094:       assertFalse(node2.isNumber());
1095:       assertFalse(node2.isScript());
1096:       assertFalse(node2.isDefaultCase());
1097:       assertFalse(node2.isTrue());
1098:       assertFalse(node2.isFunction());
1099:       assertFalse(node2.isVoid());
1100:       assertFalse(node2.isRegExp());
1101:       assertFalse(node2.isArrayLit());
1102:       assertFalse(node2.isCatch());
1103:       assertFalse(node2.isName());
1104:       assertFalse(node2.isDelProp());
1105:       assertFalse(node2.isNull());
1106:       assertFalse(node2.isIf());
1107:       assertFalse(node2.isNE());
1108:       assertFalse(node2.isVar());
1109:       assertFalse(node2.isNew());
1110:       assertFalse(node2.isAdd());
1111:       assertFalse(node2.isIn());
1112:       assertFalse(node2.isSetterDef());
1113:       assertFalse(node2.isEmpty());
1114:       assertFalse(node2.isContinue());
1115:       assertFalse(node2.isReturn());
1116:       assertFalse(node2.isWhile());
1117:       assertFalse(node2.isTypeOf());
1118:       assertFalse(node2.isCall());
1119:       assertFalse(node2.isDec());
1120:       assertFalse(node2.isAssign());
1121:       assertEquals((-1), node2.getSourcePosition());
1122:       assertTrue(node2.hasOneChild());
1123:       assertEquals(16, node2.getType());
1124:       assertFalse(node2.isGetProp());
1125:       assertFalse(node2.isDebugger());
1126:       assertFalse(node2.isString());
1127:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1128:       assertEquals(40, Node.ORIGINALNAME_PROP);
1129:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1130:       assertEquals(48, Node.DIRECTIVES);
1131:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1132:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1133:       assertEquals(4095, Node.COLUMN_MASK);
1134:       assertEquals(30, Node.VAR_ARGS_NAME);
1135:       assertEquals(1, Node.DECR_FLAG);
1136:       assertEquals(12, Node.COLUMN_BITS);
1137:       assertEquals(43, Node.IS_CONSTANT_NAME);
1138:       assertEquals(32, Node.INCRDECR_PROP);
1139:       assertEquals(46, Node.IS_NAMESPACE);
1140:       assertEquals(54, Node.SLASH_V);
1141:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1142:       assertEquals(50, Node.FREE_CALL);
1143:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1144:       assertEquals(29, Node.JSDOC_INFO_PROP);
1145:       assertEquals(56, Node.CHANGE_TIME);
1146:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1147:       assertEquals(37, Node.OPT_ARG_NAME);
1148:       assertEquals(47, Node.IS_DISPATCHER);
1149:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1150:       assertEquals(2, Node.POST_FLAG);
1151:       assertEquals(55, Node.INFERRED_FUNCTION);
1152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1153:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1154:       assertEquals(57, Node.LAST_PROP);
1155:       assertEquals(49, Node.DIRECT_EVAL);
1156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1157:       assertEquals(39, Node.EMPTY_BLOCK);
1158:       assertEquals(53, Node.INPUT_ID);
1159:       assertEquals(36, Node.QUOTED_PROP);
1160:       assertEquals(57, Node.REFLECTED_OBJECT);
1161:       assertEquals(52, Node.LENGTH);
1162:       assertEquals(8, Node.FLAG_NO_THROWS);
1163:       assertEquals(56, Node.CHANGE_TIME);
1164:       assertEquals(47, Node.IS_DISPATCHER);
1165:       assertEquals(2, Node.POST_FLAG);
1166:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1167:       assertEquals(37, Node.OPT_ARG_NAME);
1168:       assertEquals(32, Node.INCRDECR_PROP);
1169:       assertEquals(46, Node.IS_NAMESPACE);
1170:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1171:       assertEquals(29, Node.JSDOC_INFO_PROP);
1172:       assertEquals(53, Node.INPUT_ID);
1173:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1174:       assertEquals(36, Node.QUOTED_PROP);
1175:       assertEquals(1, Node.DECR_FLAG);
1176:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1177:       assertEquals(49, Node.DIRECT_EVAL);
1178:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1179:       assertEquals(12, Node.COLUMN_BITS);
1180:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1181:       assertEquals(4095, Node.COLUMN_MASK);
1182:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1183:       assertEquals(39, Node.EMPTY_BLOCK);
1184:       assertEquals(48, Node.DIRECTIVES);
1185:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1186:       assertEquals(57, Node.REFLECTED_OBJECT);
1187:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1188:       assertEquals(50, Node.FREE_CALL);
1189:       assertEquals(55, Node.INFERRED_FUNCTION);
1190:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1191:       assertEquals(52, Node.LENGTH);
1192:       assertEquals(8, Node.FLAG_NO_THROWS);
1193:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1194:       assertEquals(57, Node.LAST_PROP);
1195:       assertEquals(30, Node.VAR_ARGS_NAME);
1196:       assertEquals(54, Node.SLASH_V);
1197:       assertEquals(43, Node.IS_CONSTANT_NAME);
1198:       assertEquals(40, Node.ORIGINALNAME_PROP);
1199:       
1200:       Node node4 = node1.useSourceInfoIfMissingFromForTree(node3);
1201:       assertFalse(node1.equals((Object)node3));
1202:       assertFalse(node1.equals((Object)node0));
1203:       assertFalse(node1.equals((Object)node2));
1204:       assertFalse(node3.equals((Object)node1));
1205:       assertFalse(node3.equals((Object)node0));
1206:       assertFalse(node3.equals((Object)node2));
1207:       assertFalse(node4.equals((Object)node0));
1208:       assertFalse(node4.equals((Object)node3));
1209:       assertFalse(node4.equals((Object)node2));
1210:       assertSame(node1, node4);
1211:       assertNotSame(node1, node2);
1212:       assertSame(node4, node1);
1213:       assertNotSame(node4, node2);
1214:       assertFalse(node1.isCast());
1215:       assertFalse(node1.isAssign());
1216:       assertFalse(node1.isWith());
1217:       assertFalse(node1.isGetElem());
1218:       assertFalse(node1.isExprResult());
1219:       assertFalse(node1.isAnd());
1220:       assertFalse(node1.isLabelName());
1221:       assertFalse(node1.isLabel());
1222:       assertFalse(node1.isAssignAdd());
1223:       assertFalse(node1.isContinue());
1224:       assertFalse(node1.isOr());
1225:       assertFalse(node1.isThrow());
1226:       assertFalse(node1.isNew());
1227:       assertFalse(node1.isDo());
1228:       assertFalse(node1.isHook());
1229:       assertFalse(node1.isBlock());
1230:       assertFalse(node1.isVar());
1231:       assertEquals((-1), node1.getCharno());
1232:       assertEquals(407, node1.getType());
1233:       assertFalse(node1.isStringKey());
1234:       assertFalse(node1.isParamList());
1235:       assertFalse(node1.isSwitch());
1236:       assertEquals((-1), node1.getLineno());
1237:       assertFalse(node1.isInstanceOf());
1238:       assertFalse(node1.isCatch());
1239:       assertFalse(node1.isThis());
1240:       assertFalse(node1.hasMoreThanOneChild());
1241:       assertFalse(node1.isNumber());
1242:       assertFalse(node1.isGetterDef());
1243:       assertFalse(node1.isScript());
1244:       assertFalse(node1.isFor());
1245:       assertFalse(node1.hasOneChild());
1246:       assertFalse(node1.isCase());
1247:       assertFalse(node1.isTry());
1248:       assertFalse(node1.isTrue());
1249:       assertFalse(node1.isDebugger());
1250:       assertFalse(node1.isFunction());
1251:       assertFalse(node1.isRegExp());
1252:       assertFalse(node1.isIf());
1253:       assertFalse(node1.isNE());
1254:       assertFalse(node1.isArrayLit());
1255:       assertFalse(node1.isDelProp());
1256:       assertFalse(node1.isVoid());
1257:       assertFalse(node1.isIn());
1258:       assertEquals(0, node1.getChildCount());
1259:       assertFalse(node1.isDefaultCase());
1260:       assertFalse(node1.isEmpty());
1261:       assertFalse(node1.isSetterDef());
1262:       assertFalse(node1.isInc());
1263:       assertFalse(node1.isAdd());
1264:       assertFalse(node1.isFalse());
1265:       assertFalse(node1.isBreak());
1266:       assertFalse(node1.isNull());
1267:       assertFalse(node1.isCall());
1268:       assertFalse(node1.isName());
1269:       assertFalse(node1.isReturn());
1270:       assertFalse(node1.isObjectLit());
1271:       assertFalse(node1.isComma());
1272:       assertEquals((-1), node1.getSourcePosition());
1273:       assertFalse(node1.isTypeOf());
1274:       assertFalse(node1.isDec());
1275:       assertFalse(node1.isNot());
1276:       assertFalse(node1.isString());
1277:       assertFalse(node1.isWhile());
1278:       assertFalse(node1.hasChildren());
1279:       assertFalse(node1.isGetProp());
1280:       assertEquals((-1), node3.getCharno());
1281:       assertFalse(node3.isInc());
1282:       assertFalse(node3.isHook());
1283:       assertFalse(node3.isSwitch());
1284:       assertFalse(node3.isThrow());
1285:       assertFalse(node3.isFalse());
1286:       assertFalse(node3.isBreak());
1287:       assertFalse(node3.isGetProp());
1288:       assertFalse(node3.isThis());
1289:       assertFalse(node3.isComma());
1290:       assertFalse(node3.isFor());
1291:       assertFalse(node3.isAnd());
1292:       assertFalse(node3.isObjectLit());
1293:       assertFalse(node3.isNot());
1294:       assertFalse(node3.isCase());
1295:       assertFalse(node3.isGetterDef());
1296:       assertFalse(node3.isScript());
1297:       assertFalse(node3.isString());
1298:       assertFalse(node3.isVoid());
1299:       assertFalse(node3.isTrue());
1300:       assertFalse(node3.isExprResult());
1301:       assertFalse(node3.isDefaultCase());
1302:       assertFalse(node3.isGetElem());
1303:       assertFalse(node3.isLabelName());
1304:       assertFalse(node3.isAssign());
1305:       assertFalse(node3.isArrayLit());
1306:       assertEquals(0, node3.getChildCount());
1307:       assertFalse(node3.isDec());
1308:       assertFalse(node3.isTypeOf());
1309:       assertFalse(node3.isOr());
1310:       assertFalse(node3.isLabel());
1311:       assertFalse(node3.isNull());
1312:       assertFalse(node3.isDelProp());
1313:       assertFalse(node3.isAssignAdd());
1314:       assertFalse(node3.isDo());
1315:       assertFalse(node3.isEmpty());
1316:       assertFalse(node3.isBlock());
1317:       assertFalse(node3.isAdd());
1318:       assertFalse(node3.isNew());
1319:       assertFalse(node3.isVar());
1320:       assertFalse(node3.isWhile());
1321:       assertFalse(node3.isContinue());
1322:       assertFalse(node3.isCall());
1323:       assertFalse(node3.isName());
1324:       assertFalse(node3.hasMoreThanOneChild());
1325:       assertEquals((-1), node3.getSourcePosition());
1326:       assertFalse(node3.hasChildren());
1327:       assertFalse(node3.isReturn());
1328:       assertFalse(node3.isStringKey());
1329:       assertFalse(node3.isParamList());
1330:       assertFalse(node3.hasOneChild());
1331:       assertFalse(node3.isNumber());
1332:       assertFalse(node3.isFunction());
1333:       assertFalse(node3.isTry());
1334:       assertFalse(node3.isDebugger());
1335:       assertEquals(36, node3.getType());
1336:       assertFalse(node3.isRegExp());
1337:       assertFalse(node3.isCast());
1338:       assertFalse(node3.isCatch());
1339:       assertFalse(node3.isWith());
1340:       assertFalse(node3.isInstanceOf());
1341:       assertFalse(node3.isSetterDef());
1342:       assertEquals((-1), node3.getLineno());
1343:       assertFalse(node3.isIf());
1344:       assertFalse(node3.isNE());
1345:       assertFalse(node3.isIn());
1346:       assertEquals((-1), node4.getCharno());
1347:       assertFalse(node4.isInc());
1348:       assertFalse(node4.isHook());
1349:       assertFalse(node4.isSwitch());
1350:       assertFalse(node4.isThrow());
1351:       assertFalse(node4.isFalse());
1352:       assertFalse(node4.isBreak());
1353:       assertFalse(node4.isGetProp());
1354:       assertFalse(node4.isThis());
1355:       assertFalse(node4.isComma());
1356:       assertFalse(node4.isAnd());
1357:       assertFalse(node4.isObjectLit());
1358:       assertFalse(node4.isNot());
1359:       assertFalse(node4.isCase());
1360:       assertFalse(node4.isGetterDef());
1361:       assertFalse(node4.isScript());
1362:       assertFalse(node4.isString());
1363:       assertFalse(node4.isVoid());
1364:       assertFalse(node4.isTrue());
1365:       assertFalse(node4.isExprResult());
1366:       assertFalse(node4.isDefaultCase());
1367:       assertFalse(node4.isGetElem());
1368:       assertFalse(node4.isLabelName());
1369:       assertFalse(node4.isAssign());
1370:       assertFalse(node4.isArrayLit());
1371:       assertEquals(0, node4.getChildCount());
1372:       assertFalse(node4.isDec());
1373:       assertFalse(node4.isTypeOf());
1374:       assertFalse(node4.isOr());
1375:       assertFalse(node4.isLabel());
1376:       assertFalse(node4.isNull());
1377:       assertFalse(node4.isDelProp());
1378:       assertFalse(node4.isAssignAdd());
1379:       assertFalse(node4.isDo());
1380:       assertFalse(node4.isEmpty());
1381:       assertFalse(node4.isBlock());
1382:       assertFalse(node4.isAdd());
1383:       assertFalse(node4.isNew());
1384:       assertFalse(node4.isVar());
1385:       assertFalse(node4.isWhile());
1386:       assertFalse(node4.isContinue());
1387:       assertFalse(node4.isCall());
1388:       assertFalse(node4.isName());
1389:       assertFalse(node4.hasMoreThanOneChild());
1390:       assertEquals((-1), node4.getSourcePosition());
1391:       assertFalse(node4.hasChildren());
1392:       assertFalse(node4.isReturn());
1393:       assertFalse(node4.isStringKey());
1394:       assertFalse(node4.isParamList());
1395:       assertFalse(node4.hasOneChild());
1396:       assertFalse(node4.isNumber());
1397:       assertFalse(node4.isFunction());
1398:       assertFalse(node4.isTry());
1399:       assertFalse(node4.isDebugger());
1400:       assertFalse(node4.isFor());
1401:       assertFalse(node4.isRegExp());
1402:       assertFalse(node4.isCast());
1403:       assertFalse(node4.isCatch());
1404:       assertFalse(node4.isWith());
1405:       assertFalse(node4.isInstanceOf());
1406:       assertFalse(node4.isSetterDef());
1407:       assertEquals((-1), node4.getLineno());
1408:       assertFalse(node4.isIf());
1409:       assertFalse(node4.isNE());
1410:       assertEquals(407, node4.getType());
1411:       assertFalse(node4.isIn());
1412:       assertNotNull(node4);
1413:       assertEquals(12, Node.COLUMN_BITS);
1414:       assertEquals(30, Node.VAR_ARGS_NAME);
1415:       assertEquals(46, Node.IS_NAMESPACE);
1416:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1417:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1418:       assertEquals(57, Node.LAST_PROP);
1419:       assertEquals(29, Node.JSDOC_INFO_PROP);
1420:       assertEquals(32, Node.INCRDECR_PROP);
1421:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1422:       assertEquals(1, Node.DECR_FLAG);
1423:       assertEquals(57, Node.REFLECTED_OBJECT);
1424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1425:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1426:       assertEquals(52, Node.LENGTH);
1427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1428:       assertEquals(56, Node.CHANGE_TIME);
1429:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1430:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1431:       assertEquals(49, Node.DIRECT_EVAL);
1432:       assertEquals(48, Node.DIRECTIVES);
1433:       assertEquals(37, Node.OPT_ARG_NAME);
1434:       assertEquals(55, Node.INFERRED_FUNCTION);
1435:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1436:       assertEquals(4095, Node.COLUMN_MASK);
1437:       assertEquals(36, Node.QUOTED_PROP);
1438:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1439:       assertEquals(8, Node.FLAG_NO_THROWS);
1440:       assertEquals(39, Node.EMPTY_BLOCK);
1441:       assertEquals(53, Node.INPUT_ID);
1442:       assertEquals(40, Node.ORIGINALNAME_PROP);
1443:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1444:       assertEquals(50, Node.FREE_CALL);
1445:       assertEquals(47, Node.IS_DISPATCHER);
1446:       assertEquals(2, Node.POST_FLAG);
1447:       assertEquals(54, Node.SLASH_V);
1448:       assertEquals(43, Node.IS_CONSTANT_NAME);
1449:       assertEquals(48, Node.DIRECTIVES);
1450:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1451:       assertEquals(36, Node.QUOTED_PROP);
1452:       assertEquals(39, Node.EMPTY_BLOCK);
1453:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1454:       assertEquals(55, Node.INFERRED_FUNCTION);
1455:       assertEquals(50, Node.FREE_CALL);
1456:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1457:       assertEquals(8, Node.FLAG_NO_THROWS);
1458:       assertEquals(53, Node.INPUT_ID);
1459:       assertEquals(54, Node.SLASH_V);
1460:       assertEquals(43, Node.IS_CONSTANT_NAME);
1461:       assertEquals(57, Node.LAST_PROP);
1462:       assertEquals(30, Node.VAR_ARGS_NAME);
1463:       assertEquals(47, Node.IS_DISPATCHER);
1464:       assertEquals(40, Node.ORIGINALNAME_PROP);
1465:       assertEquals(2, Node.POST_FLAG);
1466:       assertEquals(32, Node.INCRDECR_PROP);
1467:       assertEquals(46, Node.IS_NAMESPACE);
1468:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1469:       assertEquals(12, Node.COLUMN_BITS);
1470:       assertEquals(37, Node.OPT_ARG_NAME);
1471:       assertEquals(1, Node.DECR_FLAG);
1472:       assertEquals(49, Node.DIRECT_EVAL);
1473:       assertEquals(56, Node.CHANGE_TIME);
1474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1475:       assertEquals(29, Node.JSDOC_INFO_PROP);
1476:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1477:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1478:       assertEquals(52, Node.LENGTH);
1479:       assertEquals(57, Node.REFLECTED_OBJECT);
1480:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1481:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1482:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1483:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1484:       assertEquals(4095, Node.COLUMN_MASK);
1485:       assertEquals(48, Node.DIRECTIVES);
1486:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1487:       assertEquals(36, Node.QUOTED_PROP);
1488:       assertEquals(39, Node.EMPTY_BLOCK);
1489:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1490:       assertEquals(55, Node.INFERRED_FUNCTION);
1491:       assertEquals(50, Node.FREE_CALL);
1492:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1493:       assertEquals(8, Node.FLAG_NO_THROWS);
1494:       assertEquals(53, Node.INPUT_ID);
1495:       assertEquals(54, Node.SLASH_V);
1496:       assertEquals(43, Node.IS_CONSTANT_NAME);
1497:       assertEquals(57, Node.LAST_PROP);
1498:       assertEquals(30, Node.VAR_ARGS_NAME);
1499:       assertEquals(47, Node.IS_DISPATCHER);
1500:       assertEquals(40, Node.ORIGINALNAME_PROP);
1501:       assertEquals(2, Node.POST_FLAG);
1502:       assertEquals(32, Node.INCRDECR_PROP);
1503:       assertEquals(46, Node.IS_NAMESPACE);
1504:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1505:       assertEquals(12, Node.COLUMN_BITS);
1506:       assertEquals(37, Node.OPT_ARG_NAME);
1507:       assertEquals(1, Node.DECR_FLAG);
1508:       assertEquals(49, Node.DIRECT_EVAL);
1509:       assertEquals(56, Node.CHANGE_TIME);
1510:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1511:       assertEquals(29, Node.JSDOC_INFO_PROP);
1512:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1513:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1514:       assertEquals(52, Node.LENGTH);
1515:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1516:       assertEquals(57, Node.REFLECTED_OBJECT);
1517:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1518:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1519:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1520:       assertEquals(4095, Node.COLUMN_MASK);
1521:       
1522:       Node node5 = Node.newString("me", 5177, 49);
1523:       assertFalse(node5.equals((Object)node2));
1524:       assertFalse(node5.equals((Object)node1));
1525:       assertFalse(node5.equals((Object)node0));
1526:       assertFalse(node5.equals((Object)node4));
1527:       assertFalse(node5.equals((Object)node3));
1528:       assertNotSame(node5, node3);
1529:       assertFalse(node5.isFor());
1530:       assertFalse(node5.isEmpty());
1531:       assertFalse(node5.isArrayLit());
1532:       assertFalse(node5.isGetterDef());
1533:       assertFalse(node5.isTry());
1534:       assertFalse(node5.isFunction());
1535:       assertFalse(node5.isDefaultCase());
1536:       assertEquals(40, node5.getType());
1537:       assertFalse(node5.isCase());
1538:       assertEquals(0, node5.getChildCount());
1539:       assertFalse(node5.isDebugger());
1540:       assertFalse(node5.isSwitch());
1541:       assertFalse(node5.isParamList());
1542:       assertFalse(node5.isFalse());
1543:       assertFalse(node5.isThrow());
1544:       assertFalse(node5.isStringKey());
1545:       assertFalse(node5.isBlock());
1546:       assertFalse(node5.isInc());
1547:       assertTrue(node5.isString());
1548:       assertFalse(node5.isSetterDef());
1549:       assertFalse(node5.isThis());
1550:       assertFalse(node5.isHook());
1551:       assertEquals(49, node5.getCharno());
1552:       assertEquals(5177, node5.getLineno());
1553:       assertFalse(node5.isInstanceOf());
1554:       assertFalse(node5.isIn());
1555:       assertFalse(node5.isRegExp());
1556:       assertFalse(node5.hasMoreThanOneChild());
1557:       assertFalse(node5.isCatch());
1558:       assertFalse(node5.isWith());
1559:       assertFalse(node5.isIf());
1560:       assertFalse(node5.isNE());
1561:       assertFalse(node5.isGetElem());
1562:       assertFalse(node5.isLabelName());
1563:       assertFalse(node5.isAssign());
1564:       assertFalse(node5.isNumber());
1565:       assertFalse(node5.isDec());
1566:       assertFalse(node5.isTypeOf());
1567:       assertFalse(node5.isCast());
1568:       assertFalse(node5.isReturn());
1569:       assertFalse(node5.isLabel());
1570:       assertFalse(node5.hasOneChild());
1571:       assertFalse(node5.hasChildren());
1572:       assertFalse(node5.isAssignAdd());
1573:       assertFalse(node5.isObjectLit());
1574:       assertFalse(node5.isNot());
1575:       assertFalse(node5.isScript());
1576:       assertFalse(node5.isContinue());
1577:       assertEquals(21205041, node5.getSourcePosition());
1578:       assertFalse(node5.isAnd());
1579:       assertFalse(node5.isCall());
1580:       assertFalse(node5.isName());
1581:       assertFalse(node5.isBreak());
1582:       assertFalse(node5.isGetProp());
1583:       assertFalse(node5.isAdd());
1584:       assertFalse(node5.isComma());
1585:       assertFalse(node5.isNew());
1586:       assertFalse(node5.isVar());
1587:       assertFalse(node5.isWhile());
1588:       assertFalse(node5.isDo());
1589:       assertFalse(node5.isTrue());
1590:       assertFalse(node5.isExprResult());
1591:       assertFalse(node5.isVoid());
1592:       assertFalse(node5.isOr());
1593:       assertFalse(node5.isNull());
1594:       assertFalse(node5.isDelProp());
1595:       assertNotNull(node5);
1596:       assertEquals(30, Node.VAR_ARGS_NAME);
1597:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1598:       assertEquals(52, Node.LENGTH);
1599:       assertEquals(46, Node.IS_NAMESPACE);
1600:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1601:       assertEquals(57, Node.REFLECTED_OBJECT);
1602:       assertEquals(37, Node.OPT_ARG_NAME);
1603:       assertEquals(54, Node.SLASH_V);
1604:       assertEquals(49, Node.DIRECT_EVAL);
1605:       assertEquals(56, Node.CHANGE_TIME);
1606:       assertEquals(29, Node.JSDOC_INFO_PROP);
1607:       assertEquals(39, Node.EMPTY_BLOCK);
1608:       assertEquals(47, Node.IS_DISPATCHER);
1609:       assertEquals(40, Node.ORIGINALNAME_PROP);
1610:       assertEquals(2, Node.POST_FLAG);
1611:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1612:       assertEquals(8, Node.FLAG_NO_THROWS);
1613:       assertEquals(53, Node.INPUT_ID);
1614:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1615:       assertEquals(57, Node.LAST_PROP);
1616:       assertEquals(43, Node.IS_CONSTANT_NAME);
1617:       assertEquals(36, Node.QUOTED_PROP);
1618:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1619:       assertEquals(55, Node.INFERRED_FUNCTION);
1620:       assertEquals(4095, Node.COLUMN_MASK);
1621:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1622:       assertEquals(48, Node.DIRECTIVES);
1623:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1624:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1625:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1626:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1627:       assertEquals(50, Node.FREE_CALL);
1628:       assertEquals(32, Node.INCRDECR_PROP);
1629:       assertEquals(12, Node.COLUMN_BITS);
1630:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1631:       assertEquals(1, Node.DECR_FLAG);
1632:       
1633:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
1634:       assertNotNull(simpleErrorReporter0);
1635:       
1636:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
1637:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1638:       assertNotNull(jSTypeRegistry0);
1639:       
1640:       // Undeclared exception!
1641:       try { 
1642:         jSTypeRegistry0.createEnumType("zTf{[37q`ufF97", node0, (JSType) null);
1643:         fail("Expecting exception: NullPointerException");
1644:       
1645:       } catch(NullPointerException e) {
1646:          //
1647:          // no message in exception (getMessage() returned null)
1648:          //
1649:          verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
1650:       }
1651:   }
1652: }
RegularFileObject[/tmp/EvoSuite_103_1628161377064/com/google/javascript/rhino/Node_103_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:02:57 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_103_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_103_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_103_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:02:57.348 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertEquals(39, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertNotNull(node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

Node node1 = new Node(407, 5177, 149);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertEquals(21205141, node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertEquals(5177, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertEquals(149, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertEquals(407, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertNotNull(node1);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node2 = new Node(16, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertEquals(39, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isComma());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isGetElem());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isFor());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCatch());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isContinue());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertTrue(node2.hasOneChild());
assertEquals(16, node2.getType());
assertFalse(node2.isGetProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertNotNull(node2);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

double double0 = node0.getDouble();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertEquals(39, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(1.0, double0, 0.01);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

Node node3 = Node.newString((-125), "me");
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals((-1), node3.getCharno());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isFor());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isString());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isEmpty());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.hasMoreThanOneChild());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.hasOneChild());
assertFalse(node3.isNumber());
assertFalse(node3.isFunction());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isRegExp());
assertFalse(node3.isCast());
assertEquals((-125), node3.getType());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertNotNull(node3);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

node3.setType(36);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals((-1), node3.getCharno());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isFor());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isString());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isEmpty());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.hasMoreThanOneChild());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.hasOneChild());
assertFalse(node3.isNumber());
assertFalse(node3.isFunction());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertEquals(36, node3.getType());
assertFalse(node3.isRegExp());
assertFalse(node3.isCast());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertEquals(21205141, node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertEquals(5177, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertEquals(149, node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertEquals(407, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

boolean boolean0 = node3.isNew();
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals((-1), node3.getCharno());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isFor());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isString());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isEmpty());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.hasMoreThanOneChild());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.hasOneChild());
assertFalse(node3.isNumber());
assertFalse(node3.isFunction());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertEquals(36, node3.getType());
assertFalse(node3.isRegExp());
assertFalse(node3.isCast());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(boolean0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

node2.setSourceFileForTesting((String) null);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isExprResult());
assertEquals(39, node0.getType());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabel());
assertFalse(node0.isCase());
assertTrue(node0.isNumber());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isComma());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isGetElem());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertEquals(1, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertTrue(node2.hasChildren());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isFor());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCatch());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isContinue());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertTrue(node2.hasOneChild());
assertEquals(16, node2.getType());
assertFalse(node2.isGetProp());
assertFalse(node2.isDebugger());
assertFalse(node2.isString());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node4 = node1.useSourceInfoIfMissingFromForTree(node3);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertSame(node1, node4);
assertNotSame(node1, node2);
assertSame(node4, node1);
assertNotSame(node4, node2);
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isThrow());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertEquals(407, node1.getType());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetProp());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isFor());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isCase());
assertFalse(node3.isGetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isString());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isArrayLit());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isDelProp());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isEmpty());
assertFalse(node3.isBlock());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.hasMoreThanOneChild());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.hasOneChild());
assertFalse(node3.isNumber());
assertFalse(node3.isFunction());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertEquals(36, node3.getType());
assertFalse(node3.isRegExp());
assertFalse(node3.isCast());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isSetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isInc());
assertFalse(node4.isHook());
assertFalse(node4.isSwitch());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isCase());
assertFalse(node4.isGetterDef());
assertFalse(node4.isScript());
assertFalse(node4.isString());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isExprResult());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isAssign());
assertFalse(node4.isArrayLit());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.isOr());
assertFalse(node4.isLabel());
assertFalse(node4.isNull());
assertFalse(node4.isDelProp());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertFalse(node4.isEmpty());
assertFalse(node4.isBlock());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isVar());
assertFalse(node4.isWhile());
assertFalse(node4.isContinue());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertFalse(node4.hasMoreThanOneChild());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.hasChildren());
assertFalse(node4.isReturn());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertFalse(node4.hasOneChild());
assertFalse(node4.isNumber());
assertFalse(node4.isFunction());
assertFalse(node4.isTry());
assertFalse(node4.isDebugger());
assertFalse(node4.isFor());
assertFalse(node4.isRegExp());
assertFalse(node4.isCast());
assertFalse(node4.isCatch());
assertFalse(node4.isWith());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isSetterDef());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertEquals(407, node4.getType());
assertFalse(node4.isIn());
assertNotNull(node4);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Node node5 = Node.newString("me", 5177, 49);
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertNotSame(node5, node3);
assertFalse(node5.isFor());
assertFalse(node5.isEmpty());
assertFalse(node5.isArrayLit());
assertFalse(node5.isGetterDef());
assertFalse(node5.isTry());
assertFalse(node5.isFunction());
assertFalse(node5.isDefaultCase());
assertEquals(40, node5.getType());
assertFalse(node5.isCase());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isDebugger());
assertFalse(node5.isSwitch());
assertFalse(node5.isParamList());
assertFalse(node5.isFalse());
assertFalse(node5.isThrow());
assertFalse(node5.isStringKey());
assertFalse(node5.isBlock());
assertFalse(node5.isInc());
assertTrue(node5.isString());
assertFalse(node5.isSetterDef());
assertFalse(node5.isThis());
assertFalse(node5.isHook());
assertEquals(49, node5.getCharno());
assertEquals(5177, node5.getLineno());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isIn());
assertFalse(node5.isRegExp());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCatch());
assertFalse(node5.isWith());
assertFalse(node5.isIf());
assertFalse(node5.isNE());
assertFalse(node5.isGetElem());
assertFalse(node5.isLabelName());
assertFalse(node5.isAssign());
assertFalse(node5.isNumber());
assertFalse(node5.isDec());
assertFalse(node5.isTypeOf());
assertFalse(node5.isCast());
assertFalse(node5.isReturn());
assertFalse(node5.isLabel());
assertFalse(node5.hasOneChild());
assertFalse(node5.hasChildren());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isObjectLit());
assertFalse(node5.isNot());
assertFalse(node5.isScript());
assertFalse(node5.isContinue());
assertEquals(21205041, node5.getSourcePosition());
assertFalse(node5.isAnd());
assertFalse(node5.isCall());
assertFalse(node5.isName());
assertFalse(node5.isBreak());
assertFalse(node5.isGetProp());
assertFalse(node5.isAdd());
assertFalse(node5.isComma());
assertFalse(node5.isNew());
assertFalse(node5.isVar());
assertFalse(node5.isWhile());
assertFalse(node5.isDo());
assertFalse(node5.isTrue());
assertFalse(node5.isExprResult());
assertFalse(node5.isVoid());
assertFalse(node5.isOr());
assertFalse(node5.isNull());
assertFalse(node5.isDelProp());
assertNotNull(node5);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

jSTypeRegistry0.createEnumType("zTf{[37q`ufF97", node0, (JSType) null);

[MASTER] 11:02:58.815 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_109_1628161378438/com/google/javascript/rhino/Node_109_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_109_1628161378438/com/google/javascript/rhino/Node_109_tmp__ESTest_scaffolding.java]]
[MASTER] 11:02:58.815 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:58.815 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:02:58.815 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1048
[MASTER] 11:02:58.817 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_109_1628161378438/com/google/javascript/rhino/Node_109_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:02:58 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_109_tmp__ESTest extends Node_109_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(1.0);
23:       assertFalse(node0.isTry());
24:       assertFalse(node0.isVoid());
25:       assertFalse(node0.isArrayLit());
26:       assertFalse(node0.isFor());
27:       assertFalse(node0.isRegExp());
28:       assertFalse(node0.isDefaultCase());
29:       assertFalse(node0.isFunction());
30:       assertTrue(node0.isNumber());
31:       assertEquals(0, node0.getChildCount());
32:       assertFalse(node0.isCase());
33:       assertFalse(node0.isString());
34:       assertFalse(node0.isGetterDef());
35:       assertFalse(node0.isStringKey());
36:       assertFalse(node0.isSwitch());
37:       assertFalse(node0.isDebugger());
38:       assertFalse(node0.isParamList());
39:       assertEquals((-1), node0.getCharno());
40:       assertFalse(node0.isInc());
41:       assertFalse(node0.isFalse());
42:       assertFalse(node0.isContinue());
43:       assertFalse(node0.isThis());
44:       assertFalse(node0.isThrow());
45:       assertFalse(node0.isHook());
46:       assertFalse(node0.isBlock());
47:       assertEquals(39, node0.getType());
48:       assertEquals((-1), node0.getLineno());
49:       assertFalse(node0.isInstanceOf());
50:       assertFalse(node0.hasMoreThanOneChild());
51:       assertFalse(node0.isIn());
52:       assertFalse(node0.isSetterDef());
53:       assertFalse(node0.isCatch());
54:       assertFalse(node0.isIf());
55:       assertFalse(node0.isNE());
56:       assertFalse(node0.isExprResult());
57:       assertFalse(node0.isCast());
58:       assertFalse(node0.isScript());
59:       assertFalse(node0.hasOneChild());
60:       assertFalse(node0.isGetElem());
61:       assertFalse(node0.isAssign());
62:       assertFalse(node0.isTypeOf());
63:       assertFalse(node0.isWith());
64:       assertFalse(node0.isDec());
65:       assertFalse(node0.isLabel());
66:       assertFalse(node0.hasChildren());
67:       assertFalse(node0.isReturn());
68:       assertFalse(node0.isGetProp());
69:       assertFalse(node0.isLabelName());
70:       assertFalse(node0.isNot());
71:       assertFalse(node0.isAnd());
72:       assertFalse(node0.isObjectLit());
73:       assertEquals((-1), node0.getSourcePosition());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isAdd());
77:       assertFalse(node0.isWhile());
78:       assertFalse(node0.isDo());
79:       assertFalse(node0.isComma());
80:       assertFalse(node0.isVar());
81:       assertFalse(node0.isOr());
82:       assertFalse(node0.isAssignAdd());
83:       assertFalse(node0.isBreak());
84:       assertFalse(node0.isDelProp());
85:       assertFalse(node0.isEmpty());
86:       assertFalse(node0.isName());
87:       assertFalse(node0.isTrue());
88:       assertFalse(node0.isNull());
89:       assertNotNull(node0);
90:       assertEquals(51, Node.STATIC_SOURCE_FILE);
91:       assertEquals(1, Node.DECR_FLAG);
92:       assertEquals(49, Node.DIRECT_EVAL);
93:       assertEquals(32, Node.INCRDECR_PROP);
94:       assertEquals(15, Node.NO_SIDE_EFFECTS);
95:       assertEquals(37, Node.OPT_ARG_NAME);
96:       assertEquals(56, Node.CHANGE_TIME);
97:       assertEquals(46, Node.IS_NAMESPACE);
98:       assertEquals(54, Node.SLASH_V);
99:       assertEquals(57, Node.REFLECTED_OBJECT);
100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
101:       assertEquals(52, Node.LENGTH);
102:       assertEquals(40, Node.ORIGINALNAME_PROP);
103:       assertEquals(29, Node.JSDOC_INFO_PROP);
104:       assertEquals(53, Node.INPUT_ID);
105:       assertEquals(2, Node.POST_FLAG);
106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
107:       assertEquals(39, Node.EMPTY_BLOCK);
108:       assertEquals(57, Node.LAST_PROP);
109:       assertEquals(30, Node.VAR_ARGS_NAME);
110:       assertEquals(47, Node.IS_DISPATCHER);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(4095, Node.COLUMN_MASK);
113:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
114:       assertEquals(8, Node.FLAG_NO_THROWS);
115:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
116:       assertEquals(43, Node.IS_CONSTANT_NAME);
117:       assertEquals(36, Node.QUOTED_PROP);
118:       assertEquals(48, Node.DIRECTIVES);
119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
120:       assertEquals(50, Node.FREE_CALL);
121:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
122:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
123:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
125:       assertEquals(12, Node.COLUMN_BITS);
126:       
127:       Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
128:       assertFalse(node1.equals((Object)node0));
129:       assertFalse(node1.isInc());
130:       assertFalse(node1.isSwitch());
131:       assertFalse(node1.isCase());
132:       assertFalse(node1.isIn());
133:       assertFalse(node1.isString());
134:       assertFalse(node1.isFalse());
135:       assertFalse(node1.isThrow());
136:       assertEquals(0, node1.getCharno());
137:       assertFalse(node1.isScript());
138:       assertFalse(node1.hasOneChild());
139:       assertEquals((-1122), node1.getType());
140:       assertFalse(node1.isArrayLit());
141:       assertFalse(node1.isTry());
142:       assertFalse(node1.isNumber());
143:       assertFalse(node1.isGetterDef());
144:       assertEquals(32, node1.getLineno());
145:       assertEquals(131072, node1.getSourcePosition());
146:       assertFalse(node1.isThis());
147:       assertFalse(node1.isNE());
148:       assertFalse(node1.isIf());
149:       assertFalse(node1.isCatch());
150:       assertFalse(node1.isFor());
151:       assertFalse(node1.isHook());
152:       assertFalse(node1.isInstanceOf());
153:       assertFalse(node1.hasMoreThanOneChild());
154:       assertFalse(node1.isWith());
155:       assertFalse(node1.isRegExp());
156:       assertFalse(node1.isNew());
157:       assertFalse(node1.isBlock());
158:       assertFalse(node1.isAdd());
159:       assertFalse(node1.isWhile());
160:       assertFalse(node1.isDo());
161:       assertFalse(node1.isStringKey());
162:       assertFalse(node1.isOr());
163:       assertFalse(node1.isLabel());
164:       assertFalse(node1.isParamList());
165:       assertFalse(node1.isSetterDef());
166:       assertFalse(node1.isLabelName());
167:       assertFalse(node1.isAssignAdd());
168:       assertFalse(node1.isContinue());
169:       assertFalse(node1.isCast());
170:       assertFalse(node1.isVar());
171:       assertEquals(0, node1.getChildCount());
172:       assertFalse(node1.isFunction());
173:       assertFalse(node1.isDebugger());
174:       assertFalse(node1.isTrue());
175:       assertFalse(node1.isExprResult());
176:       assertFalse(node1.isDefaultCase());
177:       assertFalse(node1.isVoid());
178:       assertFalse(node1.isAnd());
179:       assertFalse(node1.isEmpty());
180:       assertFalse(node1.isNot());
181:       assertFalse(node1.isObjectLit());
182:       assertFalse(node1.isGetProp());
183:       assertFalse(node1.isReturn());
184:       assertFalse(node1.isNull());
185:       assertFalse(node1.isBreak());
186:       assertFalse(node1.isName());
187:       assertFalse(node1.isDelProp());
188:       assertFalse(node1.isGetElem());
189:       assertFalse(node1.isCall());
190:       assertFalse(node1.hasChildren());
191:       assertFalse(node1.isDec());
192:       assertFalse(node1.isComma());
193:       assertFalse(node1.isAssign());
194:       assertFalse(node1.isTypeOf());
195:       assertNotNull(node1);
196:       assertEquals(4095, Node.COLUMN_MASK);
197:       assertEquals(55, Node.INFERRED_FUNCTION);
198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
199:       assertEquals(48, Node.DIRECTIVES);
200:       assertEquals(39, Node.EMPTY_BLOCK);
201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
202:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
203:       assertEquals(52, Node.LENGTH);
204:       assertEquals(57, Node.REFLECTED_OBJECT);
205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
206:       assertEquals(53, Node.INPUT_ID);
207:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
208:       assertEquals(15, Node.NO_SIDE_EFFECTS);
209:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
210:       assertEquals(29, Node.JSDOC_INFO_PROP);
211:       assertEquals(56, Node.CHANGE_TIME);
212:       assertEquals(8, Node.FLAG_NO_THROWS);
213:       assertEquals(36, Node.QUOTED_PROP);
214:       assertEquals(32, Node.INCRDECR_PROP);
215:       assertEquals(46, Node.IS_NAMESPACE);
216:       assertEquals(12, Node.COLUMN_BITS);
217:       assertEquals(37, Node.OPT_ARG_NAME);
218:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
219:       assertEquals(49, Node.DIRECT_EVAL);
220:       assertEquals(1, Node.DECR_FLAG);
221:       assertEquals(57, Node.LAST_PROP);
222:       assertEquals(47, Node.IS_DISPATCHER);
223:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
224:       assertEquals(2, Node.POST_FLAG);
225:       assertEquals(30, Node.VAR_ARGS_NAME);
226:       assertEquals(40, Node.ORIGINALNAME_PROP);
227:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
228:       assertEquals(43, Node.IS_CONSTANT_NAME);
229:       assertEquals(54, Node.SLASH_V);
230:       assertEquals(50, Node.FREE_CALL);
231:       assertEquals(51, Node.STATIC_SOURCE_FILE);
232:       
233:       Object object0 = node1.getProp(0);
234:       assertFalse(node1.equals((Object)node0));
235:       assertFalse(node1.isInc());
236:       assertFalse(node1.isSwitch());
237:       assertFalse(node1.isCase());
238:       assertFalse(node1.isIn());
239:       assertFalse(node1.isString());
240:       assertFalse(node1.isFalse());
241:       assertFalse(node1.isThrow());
242:       assertEquals(0, node1.getCharno());
243:       assertFalse(node1.isScript());
244:       assertFalse(node1.hasOneChild());
245:       assertEquals((-1122), node1.getType());
246:       assertFalse(node1.isArrayLit());
247:       assertFalse(node1.isTry());
248:       assertFalse(node1.isNumber());
249:       assertFalse(node1.isGetterDef());
250:       assertEquals(32, node1.getLineno());
251:       assertEquals(131072, node1.getSourcePosition());
252:       assertFalse(node1.isThis());
253:       assertFalse(node1.isNE());
254:       assertFalse(node1.isIf());
255:       assertFalse(node1.isCatch());
256:       assertFalse(node1.isFor());
257:       assertFalse(node1.isHook());
258:       assertFalse(node1.isInstanceOf());
259:       assertFalse(node1.hasMoreThanOneChild());
260:       assertFalse(node1.isWith());
261:       assertFalse(node1.isRegExp());
262:       assertFalse(node1.isNew());
263:       assertFalse(node1.isBlock());
264:       assertFalse(node1.isAdd());
265:       assertFalse(node1.isWhile());
266:       assertFalse(node1.isDo());
267:       assertFalse(node1.isStringKey());
268:       assertFalse(node1.isOr());
269:       assertFalse(node1.isLabel());
270:       assertFalse(node1.isParamList());
271:       assertFalse(node1.isSetterDef());
272:       assertFalse(node1.isLabelName());
273:       assertFalse(node1.isAssignAdd());
274:       assertFalse(node1.isContinue());
275:       assertFalse(node1.isCast());
276:       assertFalse(node1.isVar());
277:       assertEquals(0, node1.getChildCount());
278:       assertFalse(node1.isFunction());
279:       assertFalse(node1.isDebugger());
280:       assertFalse(node1.isTrue());
281:       assertFalse(node1.isExprResult());
282:       assertFalse(node1.isDefaultCase());
283:       assertFalse(node1.isVoid());
284:       assertFalse(node1.isAnd());
285:       assertFalse(node1.isEmpty());
286:       assertFalse(node1.isNot());
287:       assertFalse(node1.isObjectLit());
288:       assertFalse(node1.isGetProp());
289:       assertFalse(node1.isReturn());
290:       assertFalse(node1.isNull());
291:       assertFalse(node1.isBreak());
292:       assertFalse(node1.isName());
293:       assertFalse(node1.isDelProp());
294:       assertFalse(node1.isGetElem());
295:       assertFalse(node1.isCall());
296:       assertFalse(node1.hasChildren());
297:       assertFalse(node1.isDec());
298:       assertFalse(node1.isComma());
299:       assertFalse(node1.isAssign());
300:       assertFalse(node1.isTypeOf());
301:       assertNull(object0);
302:       assertEquals(4095, Node.COLUMN_MASK);
303:       assertEquals(55, Node.INFERRED_FUNCTION);
304:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
305:       assertEquals(48, Node.DIRECTIVES);
306:       assertEquals(39, Node.EMPTY_BLOCK);
307:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
309:       assertEquals(52, Node.LENGTH);
310:       assertEquals(57, Node.REFLECTED_OBJECT);
311:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
312:       assertEquals(53, Node.INPUT_ID);
313:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
314:       assertEquals(15, Node.NO_SIDE_EFFECTS);
315:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
316:       assertEquals(29, Node.JSDOC_INFO_PROP);
317:       assertEquals(56, Node.CHANGE_TIME);
318:       assertEquals(8, Node.FLAG_NO_THROWS);
319:       assertEquals(36, Node.QUOTED_PROP);
320:       assertEquals(32, Node.INCRDECR_PROP);
321:       assertEquals(46, Node.IS_NAMESPACE);
322:       assertEquals(12, Node.COLUMN_BITS);
323:       assertEquals(37, Node.OPT_ARG_NAME);
324:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
325:       assertEquals(49, Node.DIRECT_EVAL);
326:       assertEquals(1, Node.DECR_FLAG);
327:       assertEquals(57, Node.LAST_PROP);
328:       assertEquals(47, Node.IS_DISPATCHER);
329:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
330:       assertEquals(2, Node.POST_FLAG);
331:       assertEquals(30, Node.VAR_ARGS_NAME);
332:       assertEquals(40, Node.ORIGINALNAME_PROP);
333:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
334:       assertEquals(43, Node.IS_CONSTANT_NAME);
335:       assertEquals(54, Node.SLASH_V);
336:       assertEquals(50, Node.FREE_CALL);
337:       assertEquals(51, Node.STATIC_SOURCE_FILE);
338:       
339:       Node node2 = Node.newString(46, "UNKNOWN");
340:       assertFalse(node2.equals((Object)node1));
341:       assertFalse(node2.equals((Object)node0));
342:       assertNotSame(node2, node1);
343:       assertFalse(node2.isNE());
344:       assertFalse(node2.isIn());
345:       assertFalse(node2.isGetterDef());
346:       assertFalse(node2.isArrayLit());
347:       assertFalse(node2.isIf());
348:       assertFalse(node2.isSwitch());
349:       assertFalse(node2.isDelProp());
350:       assertFalse(node2.isTry());
351:       assertFalse(node2.isRegExp());
352:       assertFalse(node2.isHook());
353:       assertEquals((-1), node2.getCharno());
354:       assertFalse(node2.isDebugger());
355:       assertFalse(node2.isCase());
356:       assertFalse(node2.isFor());
357:       assertFalse(node2.isString());
358:       assertFalse(node2.isParamList());
359:       assertFalse(node2.isNull());
360:       assertEquals(0, node2.getChildCount());
361:       assertFalse(node2.isComma());
362:       assertFalse(node2.isName());
363:       assertFalse(node2.isCall());
364:       assertFalse(node2.isStringKey());
365:       assertFalse(node2.isBreak());
366:       assertFalse(node2.isVoid());
367:       assertFalse(node2.isNew());
368:       assertFalse(node2.isAdd());
369:       assertFalse(node2.isTrue());
370:       assertFalse(node2.isVar());
371:       assertFalse(node2.isEmpty());
372:       assertFalse(node2.isDefaultCase());
373:       assertEquals(46, node2.getType());
374:       assertFalse(node2.isDo());
375:       assertFalse(node2.isLabel());
376:       assertFalse(node2.isAssignAdd());
377:       assertFalse(node2.isReturn());
378:       assertEquals((-1), node2.getSourcePosition());
379:       assertFalse(node2.isTypeOf());
380:       assertFalse(node2.isNumber());
381:       assertFalse(node2.hasMoreThanOneChild());
382:       assertFalse(node2.hasChildren());
383:       assertFalse(node2.isOr());
384:       assertFalse(node2.isDec());
385:       assertFalse(node2.isAssign());
386:       assertFalse(node2.isGetElem());
387:       assertFalse(node2.isContinue());
388:       assertFalse(node2.isCast());
389:       assertEquals((-1), node2.getLineno());
390:       assertFalse(node2.isLabelName());
391:       assertFalse(node2.isBlock());
392:       assertFalse(node2.isExprResult());
393:       assertFalse(node2.isNot());
394:       assertFalse(node2.isWhile());
395:       assertFalse(node2.isScript());
396:       assertFalse(node2.hasOneChild());
397:       assertFalse(node2.isGetProp());
398:       assertFalse(node2.isInstanceOf());
399:       assertFalse(node2.isThis());
400:       assertFalse(node2.isObjectLit());
401:       assertFalse(node2.isFalse());
402:       assertFalse(node2.isWith());
403:       assertFalse(node2.isAnd());
404:       assertFalse(node2.isCatch());
405:       assertFalse(node2.isInc());
406:       assertFalse(node2.isFunction());
407:       assertFalse(node2.isThrow());
408:       assertFalse(node2.isSetterDef());
409:       assertNotNull(node2);
410:       assertEquals(57, Node.REFLECTED_OBJECT);
411:       assertEquals(52, Node.LENGTH);
412:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
413:       assertEquals(50, Node.FREE_CALL);
414:       assertEquals(54, Node.SLASH_V);
415:       assertEquals(15, Node.NO_SIDE_EFFECTS);
416:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
417:       assertEquals(8, Node.FLAG_NO_THROWS);
418:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
419:       assertEquals(57, Node.LAST_PROP);
420:       assertEquals(1, Node.DECR_FLAG);
421:       assertEquals(39, Node.EMPTY_BLOCK);
422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
423:       assertEquals(46, Node.IS_NAMESPACE);
424:       assertEquals(30, Node.VAR_ARGS_NAME);
425:       assertEquals(43, Node.IS_CONSTANT_NAME);
426:       assertEquals(2, Node.POST_FLAG);
427:       assertEquals(40, Node.ORIGINALNAME_PROP);
428:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
429:       assertEquals(36, Node.QUOTED_PROP);
430:       assertEquals(47, Node.IS_DISPATCHER);
431:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
432:       assertEquals(29, Node.JSDOC_INFO_PROP);
433:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
434:       assertEquals(53, Node.INPUT_ID);
435:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
436:       assertEquals(12, Node.COLUMN_BITS);
437:       assertEquals(32, Node.INCRDECR_PROP);
438:       assertEquals(55, Node.INFERRED_FUNCTION);
439:       assertEquals(4095, Node.COLUMN_MASK);
440:       assertEquals(56, Node.CHANGE_TIME);
441:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
442:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
443:       assertEquals(48, Node.DIRECTIVES);
444:       assertEquals(49, Node.DIRECT_EVAL);
445:       assertEquals(37, Node.OPT_ARG_NAME);
446:       
447:       boolean boolean0 = node1.isNull();
448:       assertFalse(node1.equals((Object)node2));
449:       assertFalse(node1.equals((Object)node0));
450:       assertNotSame(node1, node2);
451:       assertFalse(node1.isInc());
452:       assertFalse(node1.isSwitch());
453:       assertFalse(node1.isCase());
454:       assertFalse(node1.isIn());
455:       assertFalse(node1.isString());
456:       assertFalse(node1.isFalse());
457:       assertFalse(node1.isThrow());
458:       assertEquals(0, node1.getCharno());
459:       assertFalse(node1.isScript());
460:       assertFalse(node1.hasOneChild());
461:       assertEquals((-1122), node1.getType());
462:       assertFalse(node1.isArrayLit());
463:       assertFalse(node1.isTry());
464:       assertFalse(node1.isNumber());
465:       assertFalse(node1.isGetterDef());
466:       assertEquals(32, node1.getLineno());
467:       assertEquals(131072, node1.getSourcePosition());
468:       assertFalse(node1.isThis());
469:       assertFalse(node1.isNE());
470:       assertFalse(node1.isIf());
471:       assertFalse(node1.isCatch());
472:       assertFalse(node1.isFor());
473:       assertFalse(node1.isHook());
474:       assertFalse(node1.isInstanceOf());
475:       assertFalse(node1.hasMoreThanOneChild());
476:       assertFalse(node1.isWith());
477:       assertFalse(node1.isRegExp());
478:       assertFalse(node1.isNew());
479:       assertFalse(node1.isBlock());
480:       assertFalse(node1.isAdd());
481:       assertFalse(node1.isWhile());
482:       assertFalse(node1.isDo());
483:       assertFalse(node1.isStringKey());
484:       assertFalse(node1.isOr());
485:       assertFalse(node1.isLabel());
486:       assertFalse(node1.isParamList());
487:       assertFalse(node1.isSetterDef());
488:       assertFalse(node1.isLabelName());
489:       assertFalse(node1.isAssignAdd());
490:       assertFalse(node1.isContinue());
491:       assertFalse(node1.isCast());
492:       assertFalse(node1.isVar());
493:       assertEquals(0, node1.getChildCount());
494:       assertFalse(node1.isFunction());
495:       assertFalse(node1.isDebugger());
496:       assertFalse(node1.isTrue());
497:       assertFalse(node1.isExprResult());
498:       assertFalse(node1.isDefaultCase());
499:       assertFalse(node1.isVoid());
500:       assertFalse(node1.isAnd());
501:       assertFalse(node1.isEmpty());
502:       assertFalse(node1.isNot());
503:       assertFalse(node1.isObjectLit());
504:       assertFalse(node1.isGetProp());
505:       assertFalse(node1.isReturn());
506:       assertFalse(node1.isNull());
507:       assertFalse(node1.isBreak());
508:       assertFalse(node1.isName());
509:       assertFalse(node1.isDelProp());
510:       assertFalse(node1.isGetElem());
511:       assertFalse(node1.isCall());
512:       assertFalse(node1.hasChildren());
513:       assertFalse(node1.isDec());
514:       assertFalse(node1.isComma());
515:       assertFalse(node1.isAssign());
516:       assertFalse(node1.isTypeOf());
517:       assertFalse(boolean0);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertEquals(55, Node.INFERRED_FUNCTION);
520:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
521:       assertEquals(48, Node.DIRECTIVES);
522:       assertEquals(39, Node.EMPTY_BLOCK);
523:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
524:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
525:       assertEquals(52, Node.LENGTH);
526:       assertEquals(57, Node.REFLECTED_OBJECT);
527:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
528:       assertEquals(53, Node.INPUT_ID);
529:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
530:       assertEquals(15, Node.NO_SIDE_EFFECTS);
531:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
532:       assertEquals(29, Node.JSDOC_INFO_PROP);
533:       assertEquals(56, Node.CHANGE_TIME);
534:       assertEquals(8, Node.FLAG_NO_THROWS);
535:       assertEquals(36, Node.QUOTED_PROP);
536:       assertEquals(32, Node.INCRDECR_PROP);
537:       assertEquals(46, Node.IS_NAMESPACE);
538:       assertEquals(12, Node.COLUMN_BITS);
539:       assertEquals(37, Node.OPT_ARG_NAME);
540:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
541:       assertEquals(49, Node.DIRECT_EVAL);
542:       assertEquals(1, Node.DECR_FLAG);
543:       assertEquals(57, Node.LAST_PROP);
544:       assertEquals(47, Node.IS_DISPATCHER);
545:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
546:       assertEquals(2, Node.POST_FLAG);
547:       assertEquals(30, Node.VAR_ARGS_NAME);
548:       assertEquals(40, Node.ORIGINALNAME_PROP);
549:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
550:       assertEquals(43, Node.IS_CONSTANT_NAME);
551:       assertEquals(54, Node.SLASH_V);
552:       assertEquals(50, Node.FREE_CALL);
553:       assertEquals(51, Node.STATIC_SOURCE_FILE);
554:       
555:       node0.setLineno(39);
556:       assertFalse(node0.equals((Object)node1));
557:       assertFalse(node0.equals((Object)node2));
558:       assertFalse(node0.isTry());
559:       assertFalse(node0.isVoid());
560:       assertFalse(node0.isArrayLit());
561:       assertFalse(node0.isFor());
562:       assertFalse(node0.isRegExp());
563:       assertFalse(node0.isDefaultCase());
564:       assertFalse(node0.isFunction());
565:       assertTrue(node0.isNumber());
566:       assertEquals(0, node0.getChildCount());
567:       assertFalse(node0.isCase());
568:       assertFalse(node0.isString());
569:       assertFalse(node0.isGetterDef());
570:       assertFalse(node0.isStringKey());
571:       assertFalse(node0.isSwitch());
572:       assertFalse(node0.isDebugger());
573:       assertFalse(node0.isParamList());
574:       assertEquals(159744, node0.getSourcePosition());
575:       assertFalse(node0.isInc());
576:       assertFalse(node0.isFalse());
577:       assertFalse(node0.isContinue());
578:       assertFalse(node0.isThis());
579:       assertFalse(node0.isThrow());
580:       assertFalse(node0.isHook());
581:       assertFalse(node0.isBlock());
582:       assertEquals(39, node0.getType());
583:       assertFalse(node0.isInstanceOf());
584:       assertFalse(node0.hasMoreThanOneChild());
585:       assertFalse(node0.isIn());
586:       assertFalse(node0.isSetterDef());
587:       assertFalse(node0.isCatch());
588:       assertFalse(node0.isIf());
589:       assertEquals(0, node0.getCharno());
590:       assertFalse(node0.isNE());
591:       assertFalse(node0.isExprResult());
592:       assertFalse(node0.isCast());
593:       assertFalse(node0.isScript());
594:       assertFalse(node0.hasOneChild());
595:       assertFalse(node0.isGetElem());
596:       assertFalse(node0.isAssign());
597:       assertFalse(node0.isTypeOf());
598:       assertFalse(node0.isWith());
599:       assertFalse(node0.isDec());
600:       assertFalse(node0.isLabel());
601:       assertFalse(node0.hasChildren());
602:       assertFalse(node0.isReturn());
603:       assertFalse(node0.isGetProp());
604:       assertFalse(node0.isLabelName());
605:       assertFalse(node0.isNot());
606:       assertFalse(node0.isAnd());
607:       assertFalse(node0.isObjectLit());
608:       assertFalse(node0.isCall());
609:       assertFalse(node0.isNew());
610:       assertFalse(node0.isAdd());
611:       assertEquals(39, node0.getLineno());
612:       assertFalse(node0.isWhile());
613:       assertFalse(node0.isDo());
614:       assertFalse(node0.isComma());
615:       assertFalse(node0.isVar());
616:       assertFalse(node0.isOr());
617:       assertFalse(node0.isAssignAdd());
618:       assertFalse(node0.isBreak());
619:       assertFalse(node0.isDelProp());
620:       assertFalse(node0.isEmpty());
621:       assertFalse(node0.isName());
622:       assertFalse(node0.isTrue());
623:       assertFalse(node0.isNull());
624:       assertEquals(51, Node.STATIC_SOURCE_FILE);
625:       assertEquals(1, Node.DECR_FLAG);
626:       assertEquals(49, Node.DIRECT_EVAL);
627:       assertEquals(32, Node.INCRDECR_PROP);
628:       assertEquals(15, Node.NO_SIDE_EFFECTS);
629:       assertEquals(37, Node.OPT_ARG_NAME);
630:       assertEquals(56, Node.CHANGE_TIME);
631:       assertEquals(46, Node.IS_NAMESPACE);
632:       assertEquals(54, Node.SLASH_V);
633:       assertEquals(57, Node.REFLECTED_OBJECT);
634:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
635:       assertEquals(52, Node.LENGTH);
636:       assertEquals(40, Node.ORIGINALNAME_PROP);
637:       assertEquals(29, Node.JSDOC_INFO_PROP);
638:       assertEquals(53, Node.INPUT_ID);
639:       assertEquals(2, Node.POST_FLAG);
640:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
641:       assertEquals(39, Node.EMPTY_BLOCK);
642:       assertEquals(57, Node.LAST_PROP);
643:       assertEquals(30, Node.VAR_ARGS_NAME);
644:       assertEquals(47, Node.IS_DISPATCHER);
645:       assertEquals(55, Node.INFERRED_FUNCTION);
646:       assertEquals(4095, Node.COLUMN_MASK);
647:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
648:       assertEquals(8, Node.FLAG_NO_THROWS);
649:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
650:       assertEquals(43, Node.IS_CONSTANT_NAME);
651:       assertEquals(36, Node.QUOTED_PROP);
652:       assertEquals(48, Node.DIRECTIVES);
653:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
654:       assertEquals(50, Node.FREE_CALL);
655:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
656:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
657:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
658:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
659:       assertEquals(12, Node.COLUMN_BITS);
660:       
661:       node0.putProp(4095, (Object) null);
662:       assertFalse(node0.equals((Object)node1));
663:       assertFalse(node0.equals((Object)node2));
664:       assertFalse(node0.isTry());
665:       assertFalse(node0.isVoid());
666:       assertFalse(node0.isArrayLit());
667:       assertFalse(node0.isFor());
668:       assertFalse(node0.isRegExp());
669:       assertFalse(node0.isDefaultCase());
670:       assertFalse(node0.isFunction());
671:       assertTrue(node0.isNumber());
672:       assertEquals(0, node0.getChildCount());
673:       assertFalse(node0.isCase());
674:       assertFalse(node0.isString());
675:       assertFalse(node0.isGetterDef());
676:       assertFalse(node0.isStringKey());
677:       assertFalse(node0.isSwitch());
678:       assertFalse(node0.isDebugger());
679:       assertFalse(node0.isParamList());
680:       assertEquals(159744, node0.getSourcePosition());
681:       assertFalse(node0.isInc());
682:       assertFalse(node0.isFalse());
683:       assertFalse(node0.isContinue());
684:       assertFalse(node0.isThis());
685:       assertFalse(node0.isThrow());
686:       assertFalse(node0.isHook());
687:       assertFalse(node0.isBlock());
688:       assertEquals(39, node0.getType());
689:       assertFalse(node0.isInstanceOf());
690:       assertFalse(node0.hasMoreThanOneChild());
691:       assertFalse(node0.isIn());
692:       assertFalse(node0.isSetterDef());
693:       assertFalse(node0.isCatch());
694:       assertFalse(node0.isIf());
695:       assertEquals(0, node0.getCharno());
696:       assertFalse(node0.isNE());
697:       assertFalse(node0.isExprResult());
698:       assertFalse(node0.isCast());
699:       assertFalse(node0.isScript());
700:       assertFalse(node0.hasOneChild());
701:       assertFalse(node0.isGetElem());
702:       assertFalse(node0.isAssign());
703:       assertFalse(node0.isTypeOf());
704:       assertFalse(node0.isWith());
705:       assertFalse(node0.isDec());
706:       assertFalse(node0.isLabel());
707:       assertFalse(node0.hasChildren());
708:       assertFalse(node0.isReturn());
709:       assertFalse(node0.isGetProp());
710:       assertFalse(node0.isLabelName());
711:       assertFalse(node0.isNot());
712:       assertFalse(node0.isAnd());
713:       assertFalse(node0.isObjectLit());
714:       assertFalse(node0.isCall());
715:       assertFalse(node0.isNew());
716:       assertFalse(node0.isAdd());
717:       assertEquals(39, node0.getLineno());
718:       assertFalse(node0.isWhile());
719:       assertFalse(node0.isDo());
720:       assertFalse(node0.isComma());
721:       assertFalse(node0.isVar());
722:       assertFalse(node0.isOr());
723:       assertFalse(node0.isAssignAdd());
724:       assertFalse(node0.isBreak());
725:       assertFalse(node0.isDelProp());
726:       assertFalse(node0.isEmpty());
727:       assertFalse(node0.isName());
728:       assertFalse(node0.isTrue());
729:       assertFalse(node0.isNull());
730:       assertEquals(51, Node.STATIC_SOURCE_FILE);
731:       assertEquals(1, Node.DECR_FLAG);
732:       assertEquals(49, Node.DIRECT_EVAL);
733:       assertEquals(32, Node.INCRDECR_PROP);
734:       assertEquals(15, Node.NO_SIDE_EFFECTS);
735:       assertEquals(37, Node.OPT_ARG_NAME);
736:       assertEquals(56, Node.CHANGE_TIME);
737:       assertEquals(46, Node.IS_NAMESPACE);
738:       assertEquals(54, Node.SLASH_V);
739:       assertEquals(57, Node.REFLECTED_OBJECT);
740:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
741:       assertEquals(52, Node.LENGTH);
742:       assertEquals(40, Node.ORIGINALNAME_PROP);
743:       assertEquals(29, Node.JSDOC_INFO_PROP);
744:       assertEquals(53, Node.INPUT_ID);
745:       assertEquals(2, Node.POST_FLAG);
746:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
747:       assertEquals(39, Node.EMPTY_BLOCK);
748:       assertEquals(57, Node.LAST_PROP);
749:       assertEquals(30, Node.VAR_ARGS_NAME);
750:       assertEquals(47, Node.IS_DISPATCHER);
751:       assertEquals(55, Node.INFERRED_FUNCTION);
752:       assertEquals(4095, Node.COLUMN_MASK);
753:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
754:       assertEquals(8, Node.FLAG_NO_THROWS);
755:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
756:       assertEquals(43, Node.IS_CONSTANT_NAME);
757:       assertEquals(36, Node.QUOTED_PROP);
758:       assertEquals(48, Node.DIRECTIVES);
759:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
760:       assertEquals(50, Node.FREE_CALL);
761:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
762:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
763:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
764:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
765:       assertEquals(12, Node.COLUMN_BITS);
766:       
767:       int int0 = node0.getIndexOfChild(node1);
768:       assertFalse(node0.equals((Object)node1));
769:       assertFalse(node0.equals((Object)node2));
770:       assertFalse(node1.equals((Object)node2));
771:       assertFalse(node1.equals((Object)node0));
772:       assertNotSame(node1, node2);
773:       assertFalse(node0.isTry());
774:       assertFalse(node0.isVoid());
775:       assertFalse(node0.isArrayLit());
776:       assertFalse(node0.isFor());
777:       assertFalse(node0.isRegExp());
778:       assertFalse(node0.isDefaultCase());
779:       assertFalse(node0.isFunction());
780:       assertTrue(node0.isNumber());
781:       assertEquals(0, node0.getChildCount());
782:       assertFalse(node0.isCase());
783:       assertFalse(node0.isString());
784:       assertFalse(node0.isGetterDef());
785:       assertFalse(node0.isStringKey());
786:       assertFalse(node0.isSwitch());
787:       assertFalse(node0.isDebugger());
788:       assertFalse(node0.isParamList());
789:       assertEquals(159744, node0.getSourcePosition());
790:       assertFalse(node0.isInc());
791:       assertFalse(node0.isFalse());
792:       assertFalse(node0.isContinue());
793:       assertFalse(node0.isThis());
794:       assertFalse(node0.isThrow());
795:       assertFalse(node0.isHook());
796:       assertFalse(node0.isBlock());
797:       assertEquals(39, node0.getType());
798:       assertFalse(node0.isInstanceOf());
799:       assertFalse(node0.hasMoreThanOneChild());
800:       assertFalse(node0.isIn());
801:       assertFalse(node0.isSetterDef());
802:       assertFalse(node0.isCatch());
803:       assertFalse(node0.isIf());
804:       assertEquals(0, node0.getCharno());
805:       assertFalse(node0.isNE());
806:       assertFalse(node0.isExprResult());
807:       assertFalse(node0.isCast());
808:       assertFalse(node0.isScript());
809:       assertFalse(node0.hasOneChild());
810:       assertFalse(node0.isGetElem());
811:       assertFalse(node0.isAssign());
812:       assertFalse(node0.isTypeOf());
813:       assertFalse(node0.isWith());
814:       assertFalse(node0.isDec());
815:       assertFalse(node0.isLabel());
816:       assertFalse(node0.hasChildren());
817:       assertFalse(node0.isReturn());
818:       assertFalse(node0.isGetProp());
819:       assertFalse(node0.isLabelName());
820:       assertFalse(node0.isNot());
821:       assertFalse(node0.isAnd());
822:       assertFalse(node0.isObjectLit());
823:       assertFalse(node0.isCall());
824:       assertFalse(node0.isNew());
825:       assertFalse(node0.isAdd());
826:       assertEquals(39, node0.getLineno());
827:       assertFalse(node0.isWhile());
828:       assertFalse(node0.isDo());
829:       assertFalse(node0.isComma());
830:       assertFalse(node0.isVar());
831:       assertFalse(node0.isOr());
832:       assertFalse(node0.isAssignAdd());
833:       assertFalse(node0.isBreak());
834:       assertFalse(node0.isDelProp());
835:       assertFalse(node0.isEmpty());
836:       assertFalse(node0.isName());
837:       assertFalse(node0.isTrue());
838:       assertFalse(node0.isNull());
839:       assertFalse(node1.isInc());
840:       assertFalse(node1.isSwitch());
841:       assertFalse(node1.isCase());
842:       assertFalse(node1.isIn());
843:       assertFalse(node1.isString());
844:       assertFalse(node1.isFalse());
845:       assertFalse(node1.isThrow());
846:       assertEquals(0, node1.getCharno());
847:       assertFalse(node1.isScript());
848:       assertFalse(node1.hasOneChild());
849:       assertEquals((-1122), node1.getType());
850:       assertFalse(node1.isArrayLit());
851:       assertFalse(node1.isTry());
852:       assertFalse(node1.isNumber());
853:       assertFalse(node1.isGetterDef());
854:       assertEquals(32, node1.getLineno());
855:       assertEquals(131072, node1.getSourcePosition());
856:       assertFalse(node1.isThis());
857:       assertFalse(node1.isNE());
858:       assertFalse(node1.isIf());
859:       assertFalse(node1.isCatch());
860:       assertFalse(node1.isFor());
861:       assertFalse(node1.isHook());
862:       assertFalse(node1.isInstanceOf());
863:       assertFalse(node1.hasMoreThanOneChild());
864:       assertFalse(node1.isWith());
865:       assertFalse(node1.isRegExp());
866:       assertFalse(node1.isNew());
867:       assertFalse(node1.isBlock());
868:       assertFalse(node1.isAdd());
869:       assertFalse(node1.isWhile());
870:       assertFalse(node1.isDo());
871:       assertFalse(node1.isStringKey());
872:       assertFalse(node1.isOr());
873:       assertFalse(node1.isLabel());
874:       assertFalse(node1.isParamList());
875:       assertFalse(node1.isSetterDef());
876:       assertFalse(node1.isLabelName());
877:       assertFalse(node1.isAssignAdd());
878:       assertFalse(node1.isContinue());
879:       assertFalse(node1.isCast());
880:       assertFalse(node1.isVar());
881:       assertEquals(0, node1.getChildCount());
882:       assertFalse(node1.isFunction());
883:       assertFalse(node1.isDebugger());
884:       assertFalse(node1.isTrue());
885:       assertFalse(node1.isExprResult());
886:       assertFalse(node1.isDefaultCase());
887:       assertFalse(node1.isVoid());
888:       assertFalse(node1.isAnd());
889:       assertFalse(node1.isEmpty());
890:       assertFalse(node1.isNot());
891:       assertFalse(node1.isObjectLit());
892:       assertFalse(node1.isGetProp());
893:       assertFalse(node1.isReturn());
894:       assertFalse(node1.isNull());
895:       assertFalse(node1.isBreak());
896:       assertFalse(node1.isName());
897:       assertFalse(node1.isDelProp());
898:       assertFalse(node1.isGetElem());
899:       assertFalse(node1.isCall());
900:       assertFalse(node1.hasChildren());
901:       assertFalse(node1.isDec());
902:       assertFalse(node1.isComma());
903:       assertFalse(node1.isAssign());
904:       assertFalse(node1.isTypeOf());
905:       assertEquals((-1), int0);
906:       assertEquals(51, Node.STATIC_SOURCE_FILE);
907:       assertEquals(1, Node.DECR_FLAG);
908:       assertEquals(49, Node.DIRECT_EVAL);
909:       assertEquals(32, Node.INCRDECR_PROP);
910:       assertEquals(15, Node.NO_SIDE_EFFECTS);
911:       assertEquals(37, Node.OPT_ARG_NAME);
912:       assertEquals(56, Node.CHANGE_TIME);
913:       assertEquals(46, Node.IS_NAMESPACE);
914:       assertEquals(54, Node.SLASH_V);
915:       assertEquals(57, Node.REFLECTED_OBJECT);
916:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
917:       assertEquals(52, Node.LENGTH);
918:       assertEquals(40, Node.ORIGINALNAME_PROP);
919:       assertEquals(29, Node.JSDOC_INFO_PROP);
920:       assertEquals(53, Node.INPUT_ID);
921:       assertEquals(2, Node.POST_FLAG);
922:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
923:       assertEquals(39, Node.EMPTY_BLOCK);
924:       assertEquals(57, Node.LAST_PROP);
925:       assertEquals(30, Node.VAR_ARGS_NAME);
926:       assertEquals(47, Node.IS_DISPATCHER);
927:       assertEquals(55, Node.INFERRED_FUNCTION);
928:       assertEquals(4095, Node.COLUMN_MASK);
929:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
930:       assertEquals(8, Node.FLAG_NO_THROWS);
931:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
932:       assertEquals(43, Node.IS_CONSTANT_NAME);
933:       assertEquals(36, Node.QUOTED_PROP);
934:       assertEquals(48, Node.DIRECTIVES);
935:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
936:       assertEquals(50, Node.FREE_CALL);
937:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
938:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
939:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
940:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
941:       assertEquals(12, Node.COLUMN_BITS);
942:       assertEquals(4095, Node.COLUMN_MASK);
943:       assertEquals(55, Node.INFERRED_FUNCTION);
944:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
945:       assertEquals(48, Node.DIRECTIVES);
946:       assertEquals(39, Node.EMPTY_BLOCK);
947:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
948:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
949:       assertEquals(52, Node.LENGTH);
950:       assertEquals(57, Node.REFLECTED_OBJECT);
951:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
952:       assertEquals(53, Node.INPUT_ID);
953:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
954:       assertEquals(15, Node.NO_SIDE_EFFECTS);
955:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
956:       assertEquals(29, Node.JSDOC_INFO_PROP);
957:       assertEquals(56, Node.CHANGE_TIME);
958:       assertEquals(8, Node.FLAG_NO_THROWS);
959:       assertEquals(36, Node.QUOTED_PROP);
960:       assertEquals(32, Node.INCRDECR_PROP);
961:       assertEquals(46, Node.IS_NAMESPACE);
962:       assertEquals(12, Node.COLUMN_BITS);
963:       assertEquals(37, Node.OPT_ARG_NAME);
964:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
965:       assertEquals(49, Node.DIRECT_EVAL);
966:       assertEquals(1, Node.DECR_FLAG);
967:       assertEquals(57, Node.LAST_PROP);
968:       assertEquals(47, Node.IS_DISPATCHER);
969:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
970:       assertEquals(2, Node.POST_FLAG);
971:       assertEquals(30, Node.VAR_ARGS_NAME);
972:       assertEquals(40, Node.ORIGINALNAME_PROP);
973:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
974:       assertEquals(43, Node.IS_CONSTANT_NAME);
975:       assertEquals(54, Node.SLASH_V);
976:       assertEquals(50, Node.FREE_CALL);
977:       assertEquals(51, Node.STATIC_SOURCE_FILE);
978:       
979:       Iterable<Node> iterable0 = node0.children();
980:       assertFalse(node0.equals((Object)node1));
981:       assertFalse(node0.equals((Object)node2));
982:       assertFalse(node0.isTry());
983:       assertFalse(node0.isVoid());
984:       assertFalse(node0.isArrayLit());
985:       assertFalse(node0.isFor());
986:       assertFalse(node0.isRegExp());
987:       assertFalse(node0.isDefaultCase());
988:       assertFalse(node0.isFunction());
989:       assertTrue(node0.isNumber());
990:       assertEquals(0, node0.getChildCount());
991:       assertFalse(node0.isCase());
992:       assertFalse(node0.isString());
993:       assertFalse(node0.isGetterDef());
994:       assertFalse(node0.isStringKey());
995:       assertFalse(node0.isSwitch());
996:       assertFalse(node0.isDebugger());
997:       assertFalse(node0.isParamList());
998:       assertEquals(159744, node0.getSourcePosition());
999:       assertFalse(node0.isInc());
1000:       assertFalse(node0.isFalse());
1001:       assertFalse(node0.isContinue());
1002:       assertFalse(node0.isThis());
1003:       assertFalse(node0.isThrow());
1004:       assertFalse(node0.isHook());
1005:       assertFalse(node0.isBlock());
1006:       assertEquals(39, node0.getType());
1007:       assertFalse(node0.isInstanceOf());
1008:       assertFalse(node0.hasMoreThanOneChild());
1009:       assertFalse(node0.isIn());
1010:       assertFalse(node0.isSetterDef());
1011:       assertFalse(node0.isCatch());
1012:       assertFalse(node0.isIf());
1013:       assertEquals(0, node0.getCharno());
1014:       assertFalse(node0.isNE());
1015:       assertFalse(node0.isExprResult());
1016:       assertFalse(node0.isCast());
1017:       assertFalse(node0.isScript());
1018:       assertFalse(node0.hasOneChild());
1019:       assertFalse(node0.isGetElem());
1020:       assertFalse(node0.isAssign());
1021:       assertFalse(node0.isTypeOf());
1022:       assertFalse(node0.isWith());
1023:       assertFalse(node0.isDec());
1024:       assertFalse(node0.isLabel());
1025:       assertFalse(node0.hasChildren());
1026:       assertFalse(node0.isReturn());
1027:       assertFalse(node0.isGetProp());
1028:       assertFalse(node0.isLabelName());
1029:       assertFalse(node0.isNot());
1030:       assertFalse(node0.isAnd());
1031:       assertFalse(node0.isObjectLit());
1032:       assertFalse(node0.isCall());
1033:       assertFalse(node0.isNew());
1034:       assertFalse(node0.isAdd());
1035:       assertEquals(39, node0.getLineno());
1036:       assertFalse(node0.isWhile());
1037:       assertFalse(node0.isDo());
1038:       assertFalse(node0.isComma());
1039:       assertFalse(node0.isVar());
1040:       assertFalse(node0.isOr());
1041:       assertFalse(node0.isAssignAdd());
1042:       assertFalse(node0.isBreak());
1043:       assertFalse(node0.isDelProp());
1044:       assertFalse(node0.isEmpty());
1045:       assertFalse(node0.isName());
1046:       assertFalse(node0.isTrue());
1047:       assertFalse(node0.isNull());
1048:       assertFalse(iterable0.contains(node1));
1049:       assertNotNull(iterable0);
1050:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1051:       assertEquals(1, Node.DECR_FLAG);
1052:       assertEquals(49, Node.DIRECT_EVAL);
1053:       assertEquals(32, Node.INCRDECR_PROP);
1054:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1055:       assertEquals(37, Node.OPT_ARG_NAME);
1056:       assertEquals(56, Node.CHANGE_TIME);
1057:       assertEquals(46, Node.IS_NAMESPACE);
1058:       assertEquals(54, Node.SLASH_V);
1059:       assertEquals(57, Node.REFLECTED_OBJECT);
1060:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1061:       assertEquals(52, Node.LENGTH);
1062:       assertEquals(40, Node.ORIGINALNAME_PROP);
1063:       assertEquals(29, Node.JSDOC_INFO_PROP);
1064:       assertEquals(53, Node.INPUT_ID);
1065:       assertEquals(2, Node.POST_FLAG);
1066:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1067:       assertEquals(39, Node.EMPTY_BLOCK);
1068:       assertEquals(57, Node.LAST_PROP);
1069:       assertEquals(30, Node.VAR_ARGS_NAME);
1070:       assertEquals(47, Node.IS_DISPATCHER);
1071:       assertEquals(55, Node.INFERRED_FUNCTION);
1072:       assertEquals(4095, Node.COLUMN_MASK);
1073:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1074:       assertEquals(8, Node.FLAG_NO_THROWS);
1075:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1076:       assertEquals(43, Node.IS_CONSTANT_NAME);
1077:       assertEquals(36, Node.QUOTED_PROP);
1078:       assertEquals(48, Node.DIRECTIVES);
1079:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1080:       assertEquals(50, Node.FREE_CALL);
1081:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1082:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1083:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1084:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1085:       assertEquals(12, Node.COLUMN_BITS);
1086:       
1087:       boolean boolean1 = node2.isIn();
1088:       assertFalse(node2.equals((Object)node1));
1089:       assertFalse(node2.equals((Object)node0));
1090:       assertTrue(boolean1 == boolean0);
1091:       assertNotSame(node2, node1);
1092:       assertFalse(node2.isNE());
1093:       assertFalse(node2.isIn());
1094:       assertFalse(node2.isGetterDef());
1095:       assertFalse(node2.isArrayLit());
1096:       assertFalse(node2.isIf());
1097:       assertFalse(node2.isSwitch());
1098:       assertFalse(node2.isDelProp());
1099:       assertFalse(node2.isTry());
1100:       assertFalse(node2.isRegExp());
1101:       assertFalse(node2.isHook());
1102:       assertEquals((-1), node2.getCharno());
1103:       assertFalse(node2.isDebugger());
1104:       assertFalse(node2.isCase());
1105:       assertFalse(node2.isFor());
1106:       assertFalse(node2.isString());
1107:       assertFalse(node2.isParamList());
1108:       assertFalse(node2.isNull());
1109:       assertEquals(0, node2.getChildCount());
1110:       assertFalse(node2.isComma());
1111:       assertFalse(node2.isName());
1112:       assertFalse(node2.isCall());
1113:       assertFalse(node2.isStringKey());
1114:       assertFalse(node2.isBreak());
1115:       assertFalse(node2.isVoid());
1116:       assertFalse(node2.isNew());
1117:       assertFalse(node2.isAdd());
1118:       assertFalse(node2.isTrue());
1119:       assertFalse(node2.isVar());
1120:       assertFalse(node2.isEmpty());
1121:       assertFalse(node2.isDefaultCase());
1122:       assertEquals(46, node2.getType());
1123:       assertFalse(node2.isDo());
1124:       assertFalse(node2.isLabel());
1125:       assertFalse(node2.isAssignAdd());
1126:       assertFalse(node2.isReturn());
1127:       assertEquals((-1), node2.getSourcePosition());
1128:       assertFalse(node2.isTypeOf());
1129:       assertFalse(node2.isNumber());
1130:       assertFalse(node2.hasMoreThanOneChild());
1131:       assertFalse(node2.hasChildren());
1132:       assertFalse(node2.isOr());
1133:       assertFalse(node2.isDec());
1134:       assertFalse(node2.isAssign());
1135:       assertFalse(node2.isGetElem());
1136:       assertFalse(node2.isContinue());
1137:       assertFalse(node2.isCast());
1138:       assertEquals((-1), node2.getLineno());
1139:       assertFalse(node2.isLabelName());
1140:       assertFalse(node2.isBlock());
1141:       assertFalse(node2.isExprResult());
1142:       assertFalse(node2.isNot());
1143:       assertFalse(node2.isWhile());
1144:       assertFalse(node2.isScript());
1145:       assertFalse(node2.hasOneChild());
1146:       assertFalse(node2.isGetProp());
1147:       assertFalse(node2.isInstanceOf());
1148:       assertFalse(node2.isThis());
1149:       assertFalse(node2.isObjectLit());
1150:       assertFalse(node2.isFalse());
1151:       assertFalse(node2.isWith());
1152:       assertFalse(node2.isAnd());
1153:       assertFalse(node2.isCatch());
1154:       assertFalse(node2.isInc());
1155:       assertFalse(node2.isFunction());
1156:       assertFalse(node2.isThrow());
1157:       assertFalse(node2.isSetterDef());
1158:       assertFalse(boolean1);
1159:       assertEquals(57, Node.REFLECTED_OBJECT);
1160:       assertEquals(52, Node.LENGTH);
1161:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1162:       assertEquals(50, Node.FREE_CALL);
1163:       assertEquals(54, Node.SLASH_V);
1164:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1165:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1166:       assertEquals(8, Node.FLAG_NO_THROWS);
1167:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1168:       assertEquals(57, Node.LAST_PROP);
1169:       assertEquals(1, Node.DECR_FLAG);
1170:       assertEquals(39, Node.EMPTY_BLOCK);
1171:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1172:       assertEquals(46, Node.IS_NAMESPACE);
1173:       assertEquals(30, Node.VAR_ARGS_NAME);
1174:       assertEquals(43, Node.IS_CONSTANT_NAME);
1175:       assertEquals(2, Node.POST_FLAG);
1176:       assertEquals(40, Node.ORIGINALNAME_PROP);
1177:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1178:       assertEquals(36, Node.QUOTED_PROP);
1179:       assertEquals(47, Node.IS_DISPATCHER);
1180:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1181:       assertEquals(29, Node.JSDOC_INFO_PROP);
1182:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1183:       assertEquals(53, Node.INPUT_ID);
1184:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1185:       assertEquals(12, Node.COLUMN_BITS);
1186:       assertEquals(32, Node.INCRDECR_PROP);
1187:       assertEquals(55, Node.INFERRED_FUNCTION);
1188:       assertEquals(4095, Node.COLUMN_MASK);
1189:       assertEquals(56, Node.CHANGE_TIME);
1190:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1191:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1192:       assertEquals(48, Node.DIRECTIVES);
1193:       assertEquals(49, Node.DIRECT_EVAL);
1194:       assertEquals(37, Node.OPT_ARG_NAME);
1195:       
1196:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
1197:       assertFalse(node0.equals((Object)node1));
1198:       assertFalse(node0.equals((Object)node2));
1199:       assertFalse(node2.equals((Object)node1));
1200:       assertFalse(node2.equals((Object)node0));
1201:       assertNotSame(node2, node1);
1202:       assertFalse(node0.isTry());
1203:       assertFalse(node0.isVoid());
1204:       assertFalse(node0.isArrayLit());
1205:       assertFalse(node0.isFor());
1206:       assertFalse(node0.isRegExp());
1207:       assertFalse(node0.isDefaultCase());
1208:       assertFalse(node0.isFunction());
1209:       assertTrue(node0.isNumber());
1210:       assertEquals(0, node0.getChildCount());
1211:       assertFalse(node0.isCase());
1212:       assertFalse(node0.isString());
1213:       assertFalse(node0.isGetterDef());
1214:       assertFalse(node0.isStringKey());
1215:       assertFalse(node0.isSwitch());
1216:       assertFalse(node0.isDebugger());
1217:       assertFalse(node0.isParamList());
1218:       assertEquals(159744, node0.getSourcePosition());
1219:       assertFalse(node0.isInc());
1220:       assertFalse(node0.isFalse());
1221:       assertFalse(node0.isContinue());
1222:       assertFalse(node0.isThis());
1223:       assertFalse(node0.isThrow());
1224:       assertFalse(node0.isHook());
1225:       assertFalse(node0.isBlock());
1226:       assertEquals(39, node0.getType());
1227:       assertFalse(node0.isInstanceOf());
1228:       assertFalse(node0.hasMoreThanOneChild());
1229:       assertFalse(node0.isIn());
1230:       assertFalse(node0.isSetterDef());
1231:       assertFalse(node0.isCatch());
1232:       assertFalse(node0.isIf());
1233:       assertEquals(0, node0.getCharno());
1234:       assertFalse(node0.isNE());
1235:       assertFalse(node0.isExprResult());
1236:       assertFalse(node0.isCast());
1237:       assertFalse(node0.isScript());
1238:       assertFalse(node0.hasOneChild());
1239:       assertFalse(node0.isGetElem());
1240:       assertFalse(node0.isAssign());
1241:       assertFalse(node0.isTypeOf());
1242:       assertFalse(node0.isWith());
1243:       assertFalse(node0.isDec());
1244:       assertFalse(node0.isLabel());
1245:       assertFalse(node0.hasChildren());
1246:       assertFalse(node0.isReturn());
1247:       assertFalse(node0.isGetProp());
1248:       assertFalse(node0.isLabelName());
1249:       assertFalse(node0.isNot());
1250:       assertFalse(node0.isAnd());
1251:       assertFalse(node0.isObjectLit());
1252:       assertFalse(node0.isCall());
1253:       assertFalse(node0.isNew());
1254:       assertFalse(node0.isAdd());
1255:       assertEquals(39, node0.getLineno());
1256:       assertFalse(node0.isWhile());
1257:       assertFalse(node0.isDo());
1258:       assertFalse(node0.isComma());
1259:       assertFalse(node0.isVar());
1260:       assertFalse(node0.isOr());
1261:       assertFalse(node0.isAssignAdd());
1262:       assertFalse(node0.isBreak());
1263:       assertFalse(node0.isDelProp());
1264:       assertFalse(node0.isEmpty());
1265:       assertFalse(node0.isName());
1266:       assertFalse(node0.isTrue());
1267:       assertFalse(node0.isNull());
1268:       assertFalse(node2.isNE());
1269:       assertFalse(node2.isIn());
1270:       assertFalse(node2.isGetterDef());
1271:       assertFalse(node2.isArrayLit());
1272:       assertFalse(node2.isIf());
1273:       assertFalse(node2.isSwitch());
1274:       assertFalse(node2.isDelProp());
1275:       assertFalse(node2.isTry());
1276:       assertFalse(node2.isRegExp());
1277:       assertFalse(node2.isHook());
1278:       assertEquals((-1), node2.getCharno());
1279:       assertFalse(node2.isDebugger());
1280:       assertFalse(node2.isCase());
1281:       assertFalse(node2.isFor());
1282:       assertFalse(node2.isString());
1283:       assertFalse(node2.isParamList());
1284:       assertFalse(node2.isNull());
1285:       assertEquals(0, node2.getChildCount());
1286:       assertFalse(node2.isComma());
1287:       assertFalse(node2.isName());
1288:       assertFalse(node2.isCall());
1289:       assertFalse(node2.isStringKey());
1290:       assertFalse(node2.isBreak());
1291:       assertFalse(node2.isVoid());
1292:       assertFalse(node2.isNew());
1293:       assertFalse(node2.isAdd());
1294:       assertFalse(node2.isTrue());
1295:       assertFalse(node2.isVar());
1296:       assertFalse(node2.isEmpty());
1297:       assertFalse(node2.isDefaultCase());
1298:       assertEquals(46, node2.getType());
1299:       assertFalse(node2.isDo());
1300:       assertFalse(node2.isLabel());
1301:       assertFalse(node2.isAssignAdd());
1302:       assertFalse(node2.isReturn());
1303:       assertEquals((-1), node2.getSourcePosition());
1304:       assertFalse(node2.isTypeOf());
1305:       assertFalse(node2.isNumber());
1306:       assertFalse(node2.hasMoreThanOneChild());
1307:       assertFalse(node2.hasChildren());
1308:       assertFalse(node2.isOr());
1309:       assertFalse(node2.isDec());
1310:       assertFalse(node2.isAssign());
1311:       assertFalse(node2.isGetElem());
1312:       assertFalse(node2.isContinue());
1313:       assertFalse(node2.isCast());
1314:       assertEquals((-1), node2.getLineno());
1315:       assertFalse(node2.isLabelName());
1316:       assertFalse(node2.isBlock());
1317:       assertFalse(node2.isExprResult());
1318:       assertFalse(node2.isNot());
1319:       assertFalse(node2.isWhile());
1320:       assertFalse(node2.isScript());
1321:       assertFalse(node2.hasOneChild());
1322:       assertFalse(node2.isGetProp());
1323:       assertFalse(node2.isInstanceOf());
1324:       assertFalse(node2.isThis());
1325:       assertFalse(node2.isObjectLit());
1326:       assertFalse(node2.isFalse());
1327:       assertFalse(node2.isWith());
1328:       assertFalse(node2.isAnd());
1329:       assertFalse(node2.isCatch());
1330:       assertFalse(node2.isInc());
1331:       assertFalse(node2.isFunction());
1332:       assertFalse(node2.isThrow());
1333:       assertFalse(node2.isSetterDef());
1334:       assertNotNull(node_NodeMismatch0);
1335:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1336:       assertEquals(1, Node.DECR_FLAG);
1337:       assertEquals(49, Node.DIRECT_EVAL);
1338:       assertEquals(32, Node.INCRDECR_PROP);
1339:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1340:       assertEquals(37, Node.OPT_ARG_NAME);
1341:       assertEquals(56, Node.CHANGE_TIME);
1342:       assertEquals(46, Node.IS_NAMESPACE);
1343:       assertEquals(54, Node.SLASH_V);
1344:       assertEquals(57, Node.REFLECTED_OBJECT);
1345:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1346:       assertEquals(52, Node.LENGTH);
1347:       assertEquals(40, Node.ORIGINALNAME_PROP);
1348:       assertEquals(29, Node.JSDOC_INFO_PROP);
1349:       assertEquals(53, Node.INPUT_ID);
1350:       assertEquals(2, Node.POST_FLAG);
1351:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1352:       assertEquals(39, Node.EMPTY_BLOCK);
1353:       assertEquals(57, Node.LAST_PROP);
1354:       assertEquals(30, Node.VAR_ARGS_NAME);
1355:       assertEquals(47, Node.IS_DISPATCHER);
1356:       assertEquals(55, Node.INFERRED_FUNCTION);
1357:       assertEquals(4095, Node.COLUMN_MASK);
1358:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1359:       assertEquals(8, Node.FLAG_NO_THROWS);
1360:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1361:       assertEquals(43, Node.IS_CONSTANT_NAME);
1362:       assertEquals(36, Node.QUOTED_PROP);
1363:       assertEquals(48, Node.DIRECTIVES);
1364:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1365:       assertEquals(50, Node.FREE_CALL);
1366:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1367:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1368:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1369:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1370:       assertEquals(12, Node.COLUMN_BITS);
1371:       assertEquals(57, Node.REFLECTED_OBJECT);
1372:       assertEquals(52, Node.LENGTH);
1373:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1374:       assertEquals(50, Node.FREE_CALL);
1375:       assertEquals(54, Node.SLASH_V);
1376:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1377:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1378:       assertEquals(8, Node.FLAG_NO_THROWS);
1379:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1380:       assertEquals(57, Node.LAST_PROP);
1381:       assertEquals(1, Node.DECR_FLAG);
1382:       assertEquals(39, Node.EMPTY_BLOCK);
1383:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1384:       assertEquals(46, Node.IS_NAMESPACE);
1385:       assertEquals(30, Node.VAR_ARGS_NAME);
1386:       assertEquals(43, Node.IS_CONSTANT_NAME);
1387:       assertEquals(2, Node.POST_FLAG);
1388:       assertEquals(40, Node.ORIGINALNAME_PROP);
1389:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1390:       assertEquals(36, Node.QUOTED_PROP);
1391:       assertEquals(47, Node.IS_DISPATCHER);
1392:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1393:       assertEquals(29, Node.JSDOC_INFO_PROP);
1394:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1395:       assertEquals(53, Node.INPUT_ID);
1396:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1397:       assertEquals(12, Node.COLUMN_BITS);
1398:       assertEquals(32, Node.INCRDECR_PROP);
1399:       assertEquals(55, Node.INFERRED_FUNCTION);
1400:       assertEquals(4095, Node.COLUMN_MASK);
1401:       assertEquals(56, Node.CHANGE_TIME);
1402:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1403:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1404:       assertEquals(48, Node.DIRECTIVES);
1405:       assertEquals(49, Node.DIRECT_EVAL);
1406:       assertEquals(37, Node.OPT_ARG_NAME);
1407:       
1408:       Node node3 = new Node(39, node1, node2);
1409:       assertFalse(node1.equals((Object)node2));
1410:       assertFalse(node1.equals((Object)node0));
1411:       assertFalse(node2.equals((Object)node1));
1412:       assertFalse(node2.equals((Object)node0));
1413:       assertFalse(node3.equals((Object)node2));
1414:       assertFalse(node3.equals((Object)node0));
1415:       assertFalse(node3.equals((Object)node1));
1416:       assertFalse(node1.isInc());
1417:       assertFalse(node1.isSwitch());
1418:       assertFalse(node1.isCase());
1419:       assertFalse(node1.isIn());
1420:       assertFalse(node1.isString());
1421:       assertFalse(node1.isFalse());
1422:       assertFalse(node1.isThrow());
1423:       assertEquals(0, node1.getCharno());
1424:       assertFalse(node1.isScript());
1425:       assertFalse(node1.hasOneChild());
1426:       assertEquals((-1122), node1.getType());
1427:       assertFalse(node1.isArrayLit());
1428:       assertFalse(node1.isTry());
1429:       assertFalse(node1.isNumber());
1430:       assertFalse(node1.isGetterDef());
1431:       assertEquals(32, node1.getLineno());
1432:       assertEquals(131072, node1.getSourcePosition());
1433:       assertFalse(node1.isThis());
1434:       assertFalse(node1.isNE());
1435:       assertFalse(node1.isIf());
1436:       assertFalse(node1.isCatch());
1437:       assertFalse(node1.isFor());
1438:       assertFalse(node1.isHook());
1439:       assertFalse(node1.isInstanceOf());
1440:       assertFalse(node1.hasMoreThanOneChild());
1441:       assertFalse(node1.isWith());
1442:       assertFalse(node1.isRegExp());
1443:       assertFalse(node1.isNew());
1444:       assertFalse(node1.isBlock());
1445:       assertFalse(node1.isAdd());
1446:       assertFalse(node1.isWhile());
1447:       assertFalse(node1.isDo());
1448:       assertFalse(node1.isStringKey());
1449:       assertFalse(node1.isOr());
1450:       assertFalse(node1.isLabel());
1451:       assertFalse(node1.isParamList());
1452:       assertFalse(node1.isSetterDef());
1453:       assertFalse(node1.isLabelName());
1454:       assertFalse(node1.isAssignAdd());
1455:       assertFalse(node1.isContinue());
1456:       assertFalse(node1.isCast());
1457:       assertFalse(node1.isVar());
1458:       assertEquals(0, node1.getChildCount());
1459:       assertFalse(node1.isFunction());
1460:       assertFalse(node1.isDebugger());
1461:       assertFalse(node1.isTrue());
1462:       assertFalse(node1.isExprResult());
1463:       assertFalse(node1.isDefaultCase());
1464:       assertFalse(node1.isVoid());
1465:       assertFalse(node1.isAnd());
1466:       assertFalse(node1.isEmpty());
1467:       assertFalse(node1.isNot());
1468:       assertFalse(node1.isObjectLit());
1469:       assertFalse(node1.isGetProp());
1470:       assertFalse(node1.isReturn());
1471:       assertFalse(node1.isNull());
1472:       assertFalse(node1.isBreak());
1473:       assertFalse(node1.isName());
1474:       assertFalse(node1.isDelProp());
1475:       assertFalse(node1.isGetElem());
1476:       assertFalse(node1.isCall());
1477:       assertFalse(node1.hasChildren());
1478:       assertFalse(node1.isDec());
1479:       assertFalse(node1.isComma());
1480:       assertFalse(node1.isAssign());
1481:       assertFalse(node1.isTypeOf());
1482:       assertFalse(node2.isNE());
1483:       assertFalse(node2.isIn());
1484:       assertFalse(node2.isGetterDef());
1485:       assertFalse(node2.isArrayLit());
1486:       assertFalse(node2.isIf());
1487:       assertFalse(node2.isSwitch());
1488:       assertFalse(node2.isDelProp());
1489:       assertFalse(node2.isTry());
1490:       assertFalse(node2.isRegExp());
1491:       assertFalse(node2.isHook());
1492:       assertEquals((-1), node2.getCharno());
1493:       assertFalse(node2.isDebugger());
1494:       assertFalse(node2.isCase());
1495:       assertFalse(node2.isFor());
1496:       assertFalse(node2.isString());
1497:       assertFalse(node2.isParamList());
1498:       assertFalse(node2.isNull());
1499:       assertEquals(0, node2.getChildCount());
1500:       assertFalse(node2.isComma());
1501:       assertFalse(node2.isName());
1502:       assertFalse(node2.isCall());
1503:       assertFalse(node2.isStringKey());
1504:       assertFalse(node2.isBreak());
1505:       assertFalse(node2.isVoid());
1506:       assertFalse(node2.isNew());
1507:       assertFalse(node2.isAdd());
1508:       assertFalse(node2.isTrue());
1509:       assertFalse(node2.isVar());
1510:       assertFalse(node2.isEmpty());
1511:       assertFalse(node2.isDefaultCase());
1512:       assertEquals(46, node2.getType());
1513:       assertFalse(node2.isDo());
1514:       assertFalse(node2.isLabel());
1515:       assertFalse(node2.isAssignAdd());
1516:       assertFalse(node2.isReturn());
1517:       assertEquals((-1), node2.getSourcePosition());
1518:       assertFalse(node2.isTypeOf());
1519:       assertFalse(node2.isNumber());
1520:       assertFalse(node2.hasMoreThanOneChild());
1521:       assertFalse(node2.hasChildren());
1522:       assertFalse(node2.isOr());
1523:       assertFalse(node2.isDec());
1524:       assertFalse(node2.isAssign());
1525:       assertFalse(node2.isGetElem());
1526:       assertFalse(node2.isContinue());
1527:       assertFalse(node2.isCast());
1528:       assertEquals((-1), node2.getLineno());
1529:       assertFalse(node2.isLabelName());
1530:       assertFalse(node2.isBlock());
1531:       assertFalse(node2.isExprResult());
1532:       assertFalse(node2.isNot());
1533:       assertFalse(node2.isWhile());
1534:       assertFalse(node2.isScript());
1535:       assertFalse(node2.hasOneChild());
1536:       assertFalse(node2.isGetProp());
1537:       assertFalse(node2.isInstanceOf());
1538:       assertFalse(node2.isThis());
1539:       assertFalse(node2.isObjectLit());
1540:       assertFalse(node2.isFalse());
1541:       assertFalse(node2.isWith());
1542:       assertFalse(node2.isAnd());
1543:       assertFalse(node2.isCatch());
1544:       assertFalse(node2.isInc());
1545:       assertFalse(node2.isFunction());
1546:       assertFalse(node2.isThrow());
1547:       assertFalse(node2.isSetterDef());
1548:       assertFalse(node3.isScript());
1549:       assertFalse(node3.isObjectLit());
1550:       assertFalse(node3.isExprResult());
1551:       assertFalse(node3.isNot());
1552:       assertFalse(node3.isWith());
1553:       assertFalse(node3.isInstanceOf());
1554:       assertFalse(node3.isAnd());
1555:       assertFalse(node3.isLabelName());
1556:       assertFalse(node3.isBreak());
1557:       assertEquals((-1), node3.getSourcePosition());
1558:       assertFalse(node3.isDec());
1559:       assertFalse(node3.isThis());
1560:       assertFalse(node3.isGetElem());
1561:       assertFalse(node3.isComma());
1562:       assertFalse(node3.isTypeOf());
1563:       assertFalse(node3.isAssign());
1564:       assertFalse(node3.hasOneChild());
1565:       assertFalse(node3.isHook());
1566:       assertFalse(node3.isGetProp());
1567:       assertFalse(node3.isReturn());
1568:       assertFalse(node3.isString());
1569:       assertFalse(node3.isInc());
1570:       assertEquals(39, node3.getType());
1571:       assertFalse(node3.isContinue());
1572:       assertEquals((-1), node3.getLineno());
1573:       assertTrue(node3.hasChildren());
1574:       assertFalse(node3.isIf());
1575:       assertFalse(node3.isNE());
1576:       assertFalse(node3.isSetterDef());
1577:       assertFalse(node3.isCast());
1578:       assertFalse(node3.isFalse());
1579:       assertFalse(node3.isIn());
1580:       assertEquals(2, node3.getChildCount());
1581:       assertFalse(node3.isThrow());
1582:       assertFalse(node3.isDebugger());
1583:       assertFalse(node3.isCatch());
1584:       assertFalse(node3.isRegExp());
1585:       assertFalse(node3.isFunction());
1586:       assertFalse(node3.isArrayLit());
1587:       assertFalse(node3.isTrue());
1588:       assertFalse(node3.isVoid());
1589:       assertFalse(node3.isParamList());
1590:       assertFalse(node3.isGetterDef());
1591:       assertFalse(node3.isDelProp());
1592:       assertFalse(node3.isFor());
1593:       assertFalse(node3.isCall());
1594:       assertTrue(node3.isNumber());
1595:       assertFalse(node3.isBlock());
1596:       assertFalse(node3.isTry());
1597:       assertTrue(node3.hasMoreThanOneChild());
1598:       assertFalse(node3.isWhile());
1599:       assertFalse(node3.isCase());
1600:       assertEquals((-1), node3.getCharno());
1601:       assertFalse(node3.isStringKey());
1602:       assertFalse(node3.isName());
1603:       assertFalse(node3.isSwitch());
1604:       assertFalse(node3.isEmpty());
1605:       assertFalse(node3.isNull());
1606:       assertFalse(node3.isOr());
1607:       assertFalse(node3.isLabel());
1608:       assertFalse(node3.isVar());
1609:       assertFalse(node3.isAdd());
1610:       assertFalse(node3.isNew());
1611:       assertFalse(node3.isAssignAdd());
1612:       assertFalse(node3.isDo());
1613:       assertFalse(node3.isDefaultCase());
1614:       assertNotNull(node3);
1615:       assertEquals(4095, Node.COLUMN_MASK);
1616:       assertEquals(55, Node.INFERRED_FUNCTION);
1617:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1618:       assertEquals(48, Node.DIRECTIVES);
1619:       assertEquals(39, Node.EMPTY_BLOCK);
1620:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1621:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1622:       assertEquals(52, Node.LENGTH);
1623:       assertEquals(57, Node.REFLECTED_OBJECT);
1624:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1625:       assertEquals(53, Node.INPUT_ID);
1626:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1627:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1628:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1629:       assertEquals(29, Node.JSDOC_INFO_PROP);
1630:       assertEquals(56, Node.CHANGE_TIME);
1631:       assertEquals(8, Node.FLAG_NO_THROWS);
1632:       assertEquals(36, Node.QUOTED_PROP);
1633:       assertEquals(32, Node.INCRDECR_PROP);
1634:       assertEquals(46, Node.IS_NAMESPACE);
1635:       assertEquals(12, Node.COLUMN_BITS);
1636:       assertEquals(37, Node.OPT_ARG_NAME);
1637:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1638:       assertEquals(49, Node.DIRECT_EVAL);
1639:       assertEquals(1, Node.DECR_FLAG);
1640:       assertEquals(57, Node.LAST_PROP);
1641:       assertEquals(47, Node.IS_DISPATCHER);
1642:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1643:       assertEquals(2, Node.POST_FLAG);
1644:       assertEquals(30, Node.VAR_ARGS_NAME);
1645:       assertEquals(40, Node.ORIGINALNAME_PROP);
1646:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1647:       assertEquals(43, Node.IS_CONSTANT_NAME);
1648:       assertEquals(54, Node.SLASH_V);
1649:       assertEquals(50, Node.FREE_CALL);
1650:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1651:       assertEquals(57, Node.REFLECTED_OBJECT);
1652:       assertEquals(52, Node.LENGTH);
1653:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1654:       assertEquals(50, Node.FREE_CALL);
1655:       assertEquals(54, Node.SLASH_V);
1656:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1657:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1658:       assertEquals(8, Node.FLAG_NO_THROWS);
1659:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1660:       assertEquals(57, Node.LAST_PROP);
1661:       assertEquals(1, Node.DECR_FLAG);
1662:       assertEquals(39, Node.EMPTY_BLOCK);
1663:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1664:       assertEquals(46, Node.IS_NAMESPACE);
1665:       assertEquals(30, Node.VAR_ARGS_NAME);
1666:       assertEquals(43, Node.IS_CONSTANT_NAME);
1667:       assertEquals(2, Node.POST_FLAG);
1668:       assertEquals(40, Node.ORIGINALNAME_PROP);
1669:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1670:       assertEquals(36, Node.QUOTED_PROP);
1671:       assertEquals(47, Node.IS_DISPATCHER);
1672:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1673:       assertEquals(29, Node.JSDOC_INFO_PROP);
1674:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1675:       assertEquals(53, Node.INPUT_ID);
1676:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1677:       assertEquals(12, Node.COLUMN_BITS);
1678:       assertEquals(32, Node.INCRDECR_PROP);
1679:       assertEquals(55, Node.INFERRED_FUNCTION);
1680:       assertEquals(4095, Node.COLUMN_MASK);
1681:       assertEquals(56, Node.CHANGE_TIME);
1682:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1683:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1684:       assertEquals(48, Node.DIRECTIVES);
1685:       assertEquals(49, Node.DIRECT_EVAL);
1686:       assertEquals(37, Node.OPT_ARG_NAME);
1687:       assertEquals(37, Node.OPT_ARG_NAME);
1688:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1689:       assertEquals(56, Node.CHANGE_TIME);
1690:       assertEquals(47, Node.IS_DISPATCHER);
1691:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1692:       assertEquals(2, Node.POST_FLAG);
1693:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1694:       assertEquals(29, Node.JSDOC_INFO_PROP);
1695:       assertEquals(12, Node.COLUMN_BITS);
1696:       assertEquals(57, Node.LAST_PROP);
1697:       assertEquals(1, Node.DECR_FLAG);
1698:       assertEquals(32, Node.INCRDECR_PROP);
1699:       assertEquals(43, Node.IS_CONSTANT_NAME);
1700:       assertEquals(54, Node.SLASH_V);
1701:       assertEquals(30, Node.VAR_ARGS_NAME);
1702:       assertEquals(40, Node.ORIGINALNAME_PROP);
1703:       assertEquals(46, Node.IS_NAMESPACE);
1704:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1705:       assertEquals(8, Node.FLAG_NO_THROWS);
1706:       assertEquals(39, Node.EMPTY_BLOCK);
1707:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1708:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1709:       assertEquals(50, Node.FREE_CALL);
1710:       assertEquals(55, Node.INFERRED_FUNCTION);
1711:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1712:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1713:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1714:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1715:       assertEquals(53, Node.INPUT_ID);
1716:       assertEquals(52, Node.LENGTH);
1717:       assertEquals(36, Node.QUOTED_PROP);
1718:       assertEquals(4095, Node.COLUMN_MASK);
1719:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1720:       assertEquals(57, Node.REFLECTED_OBJECT);
1721:       assertEquals(48, Node.DIRECTIVES);
1722:       assertEquals(49, Node.DIRECT_EVAL);
1723:       
1724:       node3.addChildBefore(node0, node2);
1725:       assertFalse(node0.equals((Object)node3));
1726:       assertFalse(node0.equals((Object)node1));
1727:       assertFalse(node0.equals((Object)node2));
1728:       assertFalse(node1.equals((Object)node3));
1729:       assertFalse(node1.equals((Object)node2));
1730:       assertFalse(node1.equals((Object)node0));
1731:       assertFalse(node2.equals((Object)node3));
1732:       assertFalse(node2.equals((Object)node1));
1733:       assertFalse(node2.equals((Object)node0));
1734:       assertFalse(node3.equals((Object)node2));
1735:       assertFalse(node3.equals((Object)node0));
1736:       assertFalse(node3.equals((Object)node1));
1737:       assertNotSame(node1, node2);
1738:       assertNotSame(node2, node1);
1739:       assertFalse(node0.isTry());
1740:       assertFalse(node0.isVoid());
1741:       assertFalse(node0.isArrayLit());
1742:       assertFalse(node0.isFor());
1743:       assertFalse(node0.isRegExp());
1744:       assertFalse(node0.isDefaultCase());
1745:       assertFalse(node0.isFunction());
1746:       assertTrue(node0.isNumber());
1747:       assertEquals(0, node0.getChildCount());
1748:       assertFalse(node0.isCase());
1749:       assertFalse(node0.isString());
1750:       assertFalse(node0.isGetterDef());
1751:       assertFalse(node0.isStringKey());
1752:       assertFalse(node0.isSwitch());
1753:       assertFalse(node0.isDebugger());
1754:       assertFalse(node0.isParamList());
1755:       assertEquals(159744, node0.getSourcePosition());
1756:       assertFalse(node0.isInc());
1757:       assertFalse(node0.isFalse());
1758:       assertFalse(node0.isContinue());
1759:       assertFalse(node0.isThis());
1760:       assertFalse(node0.isThrow());
1761:       assertFalse(node0.isHook());
1762:       assertFalse(node0.isBlock());
1763:       assertEquals(39, node0.getType());
1764:       assertFalse(node0.isInstanceOf());
1765:       assertFalse(node0.hasMoreThanOneChild());
1766:       assertFalse(node0.isIn());
1767:       assertFalse(node0.isSetterDef());
1768:       assertFalse(node0.isCatch());
1769:       assertFalse(node0.isIf());
1770:       assertEquals(0, node0.getCharno());
1771:       assertFalse(node0.isNE());
1772:       assertFalse(node0.isExprResult());
1773:       assertFalse(node0.isCast());
1774:       assertFalse(node0.isScript());
1775:       assertFalse(node0.hasOneChild());
1776:       assertFalse(node0.isGetElem());
1777:       assertFalse(node0.isAssign());
1778:       assertFalse(node0.isTypeOf());
1779:       assertFalse(node0.isWith());
1780:       assertFalse(node0.isDec());
1781:       assertFalse(node0.isLabel());
1782:       assertFalse(node0.hasChildren());
1783:       assertFalse(node0.isReturn());
1784:       assertFalse(node0.isGetProp());
1785:       assertFalse(node0.isLabelName());
1786:       assertFalse(node0.isNot());
1787:       assertFalse(node0.isAnd());
1788:       assertFalse(node0.isObjectLit());
1789:       assertFalse(node0.isCall());
1790:       assertFalse(node0.isNew());
1791:       assertFalse(node0.isAdd());
1792:       assertEquals(39, node0.getLineno());
1793:       assertFalse(node0.isWhile());
1794:       assertFalse(node0.isDo());
1795:       assertFalse(node0.isComma());
1796:       assertFalse(node0.isVar());
1797:       assertFalse(node0.isOr());
1798:       assertFalse(node0.isAssignAdd());
1799:       assertFalse(node0.isBreak());
1800:       assertFalse(node0.isDelProp());
1801:       assertFalse(node0.isEmpty());
1802:       assertFalse(node0.isName());
1803:       assertFalse(node0.isTrue());
1804:       assertFalse(node0.isNull());
1805:       assertFalse(node1.isInc());
1806:       assertFalse(node1.isSwitch());
1807:       assertFalse(node1.isCase());
1808:       assertFalse(node1.isIn());
1809:       assertFalse(node1.isString());
1810:       assertFalse(node1.isFalse());
1811:       assertFalse(node1.isThrow());
1812:       assertEquals(0, node1.getCharno());
1813:       assertFalse(node1.isScript());
1814:       assertFalse(node1.hasOneChild());
1815:       assertEquals((-1122), node1.getType());
1816:       assertFalse(node1.isArrayLit());
1817:       assertFalse(node1.isTry());
1818:       assertFalse(node1.isNumber());
1819:       assertFalse(node1.isGetterDef());
1820:       assertEquals(32, node1.getLineno());
1821:       assertEquals(131072, node1.getSourcePosition());
1822:       assertFalse(node1.isThis());
1823:       assertFalse(node1.isNE());
1824:       assertFalse(node1.isIf());
1825:       assertFalse(node1.isCatch());
1826:       assertFalse(node1.isFor());
1827:       assertFalse(node1.isHook());
1828:       assertFalse(node1.isInstanceOf());
1829:       assertFalse(node1.hasMoreThanOneChild());
1830:       assertFalse(node1.isWith());
1831:       assertFalse(node1.isRegExp());
1832:       assertFalse(node1.isNew());
1833:       assertFalse(node1.isBlock());
1834:       assertFalse(node1.isAdd());
1835:       assertFalse(node1.isWhile());
1836:       assertFalse(node1.isDo());
1837:       assertFalse(node1.isStringKey());
1838:       assertFalse(node1.isOr());
1839:       assertFalse(node1.isLabel());
1840:       assertFalse(node1.isParamList());
1841:       assertFalse(node1.isSetterDef());
1842:       assertFalse(node1.isLabelName());
1843:       assertFalse(node1.isAssignAdd());
1844:       assertFalse(node1.isContinue());
1845:       assertFalse(node1.isCast());
1846:       assertFalse(node1.isVar());
1847:       assertEquals(0, node1.getChildCount());
1848:       assertFalse(node1.isFunction());
1849:       assertFalse(node1.isDebugger());
1850:       assertFalse(node1.isTrue());
1851:       assertFalse(node1.isExprResult());
1852:       assertFalse(node1.isDefaultCase());
1853:       assertFalse(node1.isVoid());
1854:       assertFalse(node1.isAnd());
1855:       assertFalse(node1.isEmpty());
1856:       assertFalse(node1.isNot());
1857:       assertFalse(node1.isObjectLit());
1858:       assertFalse(node1.isGetProp());
1859:       assertFalse(node1.isReturn());
1860:       assertFalse(node1.isNull());
1861:       assertFalse(node1.isBreak());
1862:       assertFalse(node1.isName());
1863:       assertFalse(node1.isDelProp());
1864:       assertFalse(node1.isGetElem());
1865:       assertFalse(node1.isCall());
1866:       assertFalse(node1.hasChildren());
1867:       assertFalse(node1.isDec());
1868:       assertFalse(node1.isComma());
1869:       assertFalse(node1.isAssign());
1870:       assertFalse(node1.isTypeOf());
1871:       assertFalse(node2.isNE());
1872:       assertFalse(node2.isIn());
1873:       assertFalse(node2.isGetterDef());
1874:       assertFalse(node2.isArrayLit());
1875:       assertFalse(node2.isIf());
1876:       assertFalse(node2.isSwitch());
1877:       assertFalse(node2.isDelProp());
1878:       assertFalse(node2.isTry());
1879:       assertFalse(node2.isRegExp());
1880:       assertFalse(node2.isHook());
1881:       assertEquals((-1), node2.getCharno());
1882:       assertFalse(node2.isDebugger());
1883:       assertFalse(node2.isCase());
1884:       assertFalse(node2.isFor());
1885:       assertFalse(node2.isString());
1886:       assertFalse(node2.isParamList());
1887:       assertFalse(node2.isNull());
1888:       assertEquals(0, node2.getChildCount());
1889:       assertFalse(node2.isComma());
1890:       assertFalse(node2.isName());
1891:       assertFalse(node2.isCall());
1892:       assertFalse(node2.isStringKey());
1893:       assertFalse(node2.isBreak());
1894:       assertFalse(node2.isVoid());
1895:       assertFalse(node2.isNew());
1896:       assertFalse(node2.isAdd());
1897:       assertFalse(node2.isTrue());
1898:       assertFalse(node2.isVar());
1899:       assertFalse(node2.isEmpty());
1900:       assertFalse(node2.isDefaultCase());
1901:       assertEquals(46, node2.getType());
1902:       assertFalse(node2.isDo());
1903:       assertFalse(node2.isLabel());
1904:       assertFalse(node2.isAssignAdd());
1905:       assertFalse(node2.isReturn());
1906:       assertEquals((-1), node2.getSourcePosition());
1907:       assertFalse(node2.isTypeOf());
1908:       assertFalse(node2.isNumber());
1909:       assertFalse(node2.hasMoreThanOneChild());
1910:       assertFalse(node2.hasChildren());
1911:       assertFalse(node2.isOr());
1912:       assertFalse(node2.isDec());
1913:       assertFalse(node2.isAssign());
1914:       assertFalse(node2.isGetElem());
1915:       assertFalse(node2.isContinue());
1916:       assertFalse(node2.isCast());
1917:       assertEquals((-1), node2.getLineno());
1918:       assertFalse(node2.isLabelName());
1919:       assertFalse(node2.isBlock());
1920:       assertFalse(node2.isExprResult());
1921:       assertFalse(node2.isNot());
1922:       assertFalse(node2.isWhile());
1923:       assertFalse(node2.isScript());
1924:       assertFalse(node2.hasOneChild());
1925:       assertFalse(node2.isGetProp());
1926:       assertFalse(node2.isInstanceOf());
1927:       assertFalse(node2.isThis());
1928:       assertFalse(node2.isObjectLit());
1929:       assertFalse(node2.isFalse());
1930:       assertFalse(node2.isWith());
1931:       assertFalse(node2.isAnd());
1932:       assertFalse(node2.isCatch());
1933:       assertFalse(node2.isInc());
1934:       assertFalse(node2.isFunction());
1935:       assertFalse(node2.isThrow());
1936:       assertFalse(node2.isSetterDef());
1937:       assertFalse(node3.isScript());
1938:       assertFalse(node3.isObjectLit());
1939:       assertFalse(node3.isExprResult());
1940:       assertFalse(node3.isNot());
1941:       assertFalse(node3.isWith());
1942:       assertFalse(node3.isInstanceOf());
1943:       assertFalse(node3.isAnd());
1944:       assertFalse(node3.isLabelName());
1945:       assertFalse(node3.isBreak());
1946:       assertEquals((-1), node3.getSourcePosition());
1947:       assertFalse(node3.isDec());
1948:       assertFalse(node3.isThis());
1949:       assertFalse(node3.isGetElem());
1950:       assertFalse(node3.isComma());
1951:       assertFalse(node3.isTypeOf());
1952:       assertFalse(node3.isAssign());
1953:       assertFalse(node3.hasOneChild());
1954:       assertEquals(3, node3.getChildCount());
1955:       assertFalse(node3.isHook());
1956:       assertFalse(node3.isGetProp());
1957:       assertFalse(node3.isReturn());
1958:       assertFalse(node3.isString());
1959:       assertFalse(node3.isInc());
1960:       assertEquals(39, node3.getType());
1961:       assertFalse(node3.isContinue());
1962:       assertEquals((-1), node3.getLineno());
1963:       assertTrue(node3.hasChildren());
1964:       assertFalse(node3.isIf());
1965:       assertFalse(node3.isNE());
1966:       assertFalse(node3.isSetterDef());
1967:       assertFalse(node3.isCast());
1968:       assertFalse(node3.isFalse());
1969:       assertFalse(node3.isIn());
1970:       assertFalse(node3.isThrow());
1971:       assertFalse(node3.isDebugger());
1972:       assertFalse(node3.isCatch());
1973:       assertFalse(node3.isRegExp());
1974:       assertFalse(node3.isFunction());
1975:       assertFalse(node3.isArrayLit());
1976:       assertFalse(node3.isTrue());
1977:       assertFalse(node3.isVoid());
1978:       assertFalse(node3.isParamList());
1979:       assertFalse(node3.isGetterDef());
1980:       assertFalse(node3.isDelProp());
1981:       assertFalse(node3.isFor());
1982:       assertFalse(node3.isCall());
1983:       assertTrue(node3.isNumber());
1984:       assertFalse(node3.isBlock());
1985:       assertFalse(node3.isTry());
1986:       assertTrue(node3.hasMoreThanOneChild());
1987:       assertFalse(node3.isWhile());
1988:       assertFalse(node3.isCase());
1989:       assertEquals((-1), node3.getCharno());
1990:       assertFalse(node3.isStringKey());
1991:       assertFalse(node3.isName());
1992:       assertFalse(node3.isSwitch());
1993:       assertFalse(node3.isEmpty());
1994:       assertFalse(node3.isNull());
1995:       assertFalse(node3.isOr());
1996:       assertFalse(node3.isLabel());
1997:       assertFalse(node3.isVar());
1998:       assertFalse(node3.isAdd());
1999:       assertFalse(node3.isNew());
2000:       assertFalse(node3.isAssignAdd());
2001:       assertFalse(node3.isDo());
2002:       assertFalse(node3.isDefaultCase());
2003:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2004:       assertEquals(1, Node.DECR_FLAG);
2005:       assertEquals(49, Node.DIRECT_EVAL);
2006:       assertEquals(32, Node.INCRDECR_PROP);
2007:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2008:       assertEquals(37, Node.OPT_ARG_NAME);
2009:       assertEquals(56, Node.CHANGE_TIME);
2010:       assertEquals(46, Node.IS_NAMESPACE);
2011:       assertEquals(54, Node.SLASH_V);
2012:       assertEquals(57, Node.REFLECTED_OBJECT);
2013:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2014:       assertEquals(52, Node.LENGTH);
2015:       assertEquals(40, Node.ORIGINALNAME_PROP);
2016:       assertEquals(29, Node.JSDOC_INFO_PROP);
2017:       assertEquals(53, Node.INPUT_ID);
2018:       assertEquals(2, Node.POST_FLAG);
2019:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2020:       assertEquals(39, Node.EMPTY_BLOCK);
2021:       assertEquals(57, Node.LAST_PROP);
2022:       assertEquals(30, Node.VAR_ARGS_NAME);
2023:       assertEquals(47, Node.IS_DISPATCHER);
2024:       assertEquals(55, Node.INFERRED_FUNCTION);
2025:       assertEquals(4095, Node.COLUMN_MASK);
2026:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2027:       assertEquals(8, Node.FLAG_NO_THROWS);
2028:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2029:       assertEquals(43, Node.IS_CONSTANT_NAME);
2030:       assertEquals(36, Node.QUOTED_PROP);
2031:       assertEquals(48, Node.DIRECTIVES);
2032:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2033:       assertEquals(50, Node.FREE_CALL);
2034:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2035:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2036:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2037:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2038:       assertEquals(12, Node.COLUMN_BITS);
2039:       assertEquals(4095, Node.COLUMN_MASK);
2040:       assertEquals(55, Node.INFERRED_FUNCTION);
2041:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2042:       assertEquals(48, Node.DIRECTIVES);
2043:       assertEquals(39, Node.EMPTY_BLOCK);
2044:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2045:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2046:       assertEquals(52, Node.LENGTH);
2047:       assertEquals(57, Node.REFLECTED_OBJECT);
2048:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2049:       assertEquals(53, Node.INPUT_ID);
2050:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2051:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2052:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2053:       assertEquals(29, Node.JSDOC_INFO_PROP);
2054:       assertEquals(56, Node.CHANGE_TIME);
2055:       assertEquals(8, Node.FLAG_NO_THROWS);
2056:       assertEquals(36, Node.QUOTED_PROP);
2057:       assertEquals(32, Node.INCRDECR_PROP);
2058:       assertEquals(46, Node.IS_NAMESPACE);
2059:       assertEquals(12, Node.COLUMN_BITS);
2060:       assertEquals(37, Node.OPT_ARG_NAME);
2061:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2062:       assertEquals(49, Node.DIRECT_EVAL);
2063:       assertEquals(1, Node.DECR_FLAG);
2064:       assertEquals(57, Node.LAST_PROP);
2065:       assertEquals(47, Node.IS_DISPATCHER);
2066:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2067:       assertEquals(2, Node.POST_FLAG);
2068:       assertEquals(30, Node.VAR_ARGS_NAME);
2069:       assertEquals(40, Node.ORIGINALNAME_PROP);
2070:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2071:       assertEquals(43, Node.IS_CONSTANT_NAME);
2072:       assertEquals(54, Node.SLASH_V);
2073:       assertEquals(50, Node.FREE_CALL);
2074:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2075:       assertEquals(57, Node.REFLECTED_OBJECT);
2076:       assertEquals(52, Node.LENGTH);
2077:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2078:       assertEquals(50, Node.FREE_CALL);
2079:       assertEquals(54, Node.SLASH_V);
2080:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2081:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2082:       assertEquals(8, Node.FLAG_NO_THROWS);
2083:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2084:       assertEquals(57, Node.LAST_PROP);
2085:       assertEquals(1, Node.DECR_FLAG);
2086:       assertEquals(39, Node.EMPTY_BLOCK);
2087:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2088:       assertEquals(46, Node.IS_NAMESPACE);
2089:       assertEquals(30, Node.VAR_ARGS_NAME);
2090:       assertEquals(43, Node.IS_CONSTANT_NAME);
2091:       assertEquals(2, Node.POST_FLAG);
2092:       assertEquals(40, Node.ORIGINALNAME_PROP);
2093:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2094:       assertEquals(36, Node.QUOTED_PROP);
2095:       assertEquals(47, Node.IS_DISPATCHER);
2096:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2097:       assertEquals(29, Node.JSDOC_INFO_PROP);
2098:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2099:       assertEquals(53, Node.INPUT_ID);
2100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2101:       assertEquals(12, Node.COLUMN_BITS);
2102:       assertEquals(32, Node.INCRDECR_PROP);
2103:       assertEquals(55, Node.INFERRED_FUNCTION);
2104:       assertEquals(4095, Node.COLUMN_MASK);
2105:       assertEquals(56, Node.CHANGE_TIME);
2106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2107:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2108:       assertEquals(48, Node.DIRECTIVES);
2109:       assertEquals(49, Node.DIRECT_EVAL);
2110:       assertEquals(37, Node.OPT_ARG_NAME);
2111:       assertEquals(37, Node.OPT_ARG_NAME);
2112:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2113:       assertEquals(56, Node.CHANGE_TIME);
2114:       assertEquals(47, Node.IS_DISPATCHER);
2115:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2116:       assertEquals(2, Node.POST_FLAG);
2117:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2118:       assertEquals(29, Node.JSDOC_INFO_PROP);
2119:       assertEquals(12, Node.COLUMN_BITS);
2120:       assertEquals(57, Node.LAST_PROP);
2121:       assertEquals(1, Node.DECR_FLAG);
2122:       assertEquals(32, Node.INCRDECR_PROP);
2123:       assertEquals(43, Node.IS_CONSTANT_NAME);
2124:       assertEquals(54, Node.SLASH_V);
2125:       assertEquals(30, Node.VAR_ARGS_NAME);
2126:       assertEquals(40, Node.ORIGINALNAME_PROP);
2127:       assertEquals(46, Node.IS_NAMESPACE);
2128:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2129:       assertEquals(8, Node.FLAG_NO_THROWS);
2130:       assertEquals(39, Node.EMPTY_BLOCK);
2131:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2132:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2133:       assertEquals(50, Node.FREE_CALL);
2134:       assertEquals(55, Node.INFERRED_FUNCTION);
2135:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2137:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2139:       assertEquals(53, Node.INPUT_ID);
2140:       assertEquals(52, Node.LENGTH);
2141:       assertEquals(36, Node.QUOTED_PROP);
2142:       assertEquals(4095, Node.COLUMN_MASK);
2143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2144:       assertEquals(57, Node.REFLECTED_OBJECT);
2145:       assertEquals(48, Node.DIRECTIVES);
2146:       assertEquals(49, Node.DIRECT_EVAL);
2147:       
2148:       InputId inputId0 = node3.getInputId();
2149:       assertFalse(node1.equals((Object)node3));
2150:       assertFalse(node1.equals((Object)node2));
2151:       assertFalse(node1.equals((Object)node0));
2152:       assertFalse(node2.equals((Object)node3));
2153:       assertFalse(node2.equals((Object)node1));
2154:       assertFalse(node2.equals((Object)node0));
2155:       assertFalse(node3.equals((Object)node2));
2156:       assertFalse(node3.equals((Object)node0));
2157:       assertFalse(node3.equals((Object)node1));
2158:       assertNotSame(node1, node2);
2159:       assertNotSame(node2, node1);
2160:       assertFalse(node1.isInc());
2161:       assertFalse(node1.isSwitch());
2162:       assertFalse(node1.isCase());
2163:       assertFalse(node1.isIn());
2164:       assertFalse(node1.isString());
2165:       assertFalse(node1.isFalse());
2166:       assertFalse(node1.isThrow());
2167:       assertEquals(0, node1.getCharno());
2168:       assertFalse(node1.isScript());
2169:       assertFalse(node1.hasOneChild());
2170:       assertEquals((-1122), node1.getType());
2171:       assertFalse(node1.isArrayLit());
2172:       assertFalse(node1.isTry());
2173:       assertFalse(node1.isNumber());
2174:       assertFalse(node1.isGetterDef());
2175:       assertEquals(32, node1.getLineno());
2176:       assertEquals(131072, node1.getSourcePosition());
2177:       assertFalse(node1.isThis());
2178:       assertFalse(node1.isNE());
2179:       assertFalse(node1.isIf());
2180:       assertFalse(node1.isCatch());
2181:       assertFalse(node1.isFor());
2182:       assertFalse(node1.isHook());
2183:       assertFalse(node1.isInstanceOf());
2184:       assertFalse(node1.hasMoreThanOneChild());
2185:       assertFalse(node1.isWith());
2186:       assertFalse(node1.isRegExp());
2187:       assertFalse(node1.isNew());
2188:       assertFalse(node1.isBlock());
2189:       assertFalse(node1.isAdd());
2190:       assertFalse(node1.isWhile());
2191:       assertFalse(node1.isDo());
2192:       assertFalse(node1.isStringKey());
2193:       assertFalse(node1.isOr());
2194:       assertFalse(node1.isLabel());
2195:       assertFalse(node1.isParamList());
2196:       assertFalse(node1.isSetterDef());
2197:       assertFalse(node1.isLabelName());
2198:       assertFalse(node1.isAssignAdd());
2199:       assertFalse(node1.isContinue());
2200:       assertFalse(node1.isCast());
2201:       assertFalse(node1.isVar());
2202:       assertEquals(0, node1.getChildCount());
2203:       assertFalse(node1.isFunction());
2204:       assertFalse(node1.isDebugger());
2205:       assertFalse(node1.isTrue());
2206:       assertFalse(node1.isExprResult());
2207:       assertFalse(node1.isDefaultCase());
2208:       assertFalse(node1.isVoid());
2209:       assertFalse(node1.isAnd());
2210:       assertFalse(node1.isEmpty());
2211:       assertFalse(node1.isNot());
2212:       assertFalse(node1.isObjectLit());
2213:       assertFalse(node1.isGetProp());
2214:       assertFalse(node1.isReturn());
2215:       assertFalse(node1.isNull());
2216:       assertFalse(node1.isBreak());
2217:       assertFalse(node1.isName());
2218:       assertFalse(node1.isDelProp());
2219:       assertFalse(node1.isGetElem());
2220:       assertFalse(node1.isCall());
2221:       assertFalse(node1.hasChildren());
2222:       assertFalse(node1.isDec());
2223:       assertFalse(node1.isComma());
2224:       assertFalse(node1.isAssign());
2225:       assertFalse(node1.isTypeOf());
2226:       assertFalse(node2.isNE());
2227:       assertFalse(node2.isIn());
2228:       assertFalse(node2.isGetterDef());
2229:       assertFalse(node2.isArrayLit());
2230:       assertFalse(node2.isIf());
2231:       assertFalse(node2.isSwitch());
2232:       assertFalse(node2.isDelProp());
2233:       assertFalse(node2.isTry());
2234:       assertFalse(node2.isRegExp());
2235:       assertFalse(node2.isHook());
2236:       assertEquals((-1), node2.getCharno());
2237:       assertFalse(node2.isDebugger());
2238:       assertFalse(node2.isCase());
2239:       assertFalse(node2.isFor());
2240:       assertFalse(node2.isString());
2241:       assertFalse(node2.isParamList());
2242:       assertFalse(node2.isNull());
2243:       assertEquals(0, node2.getChildCount());
2244:       assertFalse(node2.isComma());
2245:       assertFalse(node2.isName());
2246:       assertFalse(node2.isCall());
2247:       assertFalse(node2.isStringKey());
2248:       assertFalse(node2.isBreak());
2249:       assertFalse(node2.isVoid());
2250:       assertFalse(node2.isNew());
2251:       assertFalse(node2.isAdd());
2252:       assertFalse(node2.isTrue());
2253:       assertFalse(node2.isVar());
2254:       assertFalse(node2.isEmpty());
2255:       assertFalse(node2.isDefaultCase());
2256:       assertEquals(46, node2.getType());
2257:       assertFalse(node2.isDo());
2258:       assertFalse(node2.isLabel());
2259:       assertFalse(node2.isAssignAdd());
2260:       assertFalse(node2.isReturn());
2261:       assertEquals((-1), node2.getSourcePosition());
2262:       assertFalse(node2.isTypeOf());
2263:       assertFalse(node2.isNumber());
2264:       assertFalse(node2.hasMoreThanOneChild());
2265:       assertFalse(node2.hasChildren());
2266:       assertFalse(node2.isOr());
2267:       assertFalse(node2.isDec());
2268:       assertFalse(node2.isAssign());
2269:       assertFalse(node2.isGetElem());
2270:       assertFalse(node2.isContinue());
2271:       assertFalse(node2.isCast());
2272:       assertEquals((-1), node2.getLineno());
2273:       assertFalse(node2.isLabelName());
2274:       assertFalse(node2.isBlock());
2275:       assertFalse(node2.isExprResult());
2276:       assertFalse(node2.isNot());
2277:       assertFalse(node2.isWhile());
2278:       assertFalse(node2.isScript());
2279:       assertFalse(node2.hasOneChild());
2280:       assertFalse(node2.isGetProp());
2281:       assertFalse(node2.isInstanceOf());
2282:       assertFalse(node2.isThis());
2283:       assertFalse(node2.isObjectLit());
2284:       assertFalse(node2.isFalse());
2285:       assertFalse(node2.isWith());
2286:       assertFalse(node2.isAnd());
2287:       assertFalse(node2.isCatch());
2288:       assertFalse(node2.isInc());
2289:       assertFalse(node2.isFunction());
2290:       assertFalse(node2.isThrow());
2291:       assertFalse(node2.isSetterDef());
2292:       assertFalse(node3.isScript());
2293:       assertFalse(node3.isObjectLit());
2294:       assertFalse(node3.isExprResult());
2295:       assertFalse(node3.isNot());
2296:       assertFalse(node3.isWith());
2297:       assertFalse(node3.isInstanceOf());
2298:       assertFalse(node3.isAnd());
2299:       assertFalse(node3.isLabelName());
2300:       assertFalse(node3.isBreak());
2301:       assertEquals((-1), node3.getSourcePosition());
2302:       assertFalse(node3.isDec());
2303:       assertFalse(node3.isThis());
2304:       assertFalse(node3.isGetElem());
2305:       assertFalse(node3.isComma());
2306:       assertFalse(node3.isTypeOf());
2307:       assertFalse(node3.isAssign());
2308:       assertFalse(node3.hasOneChild());
2309:       assertEquals(3, node3.getChildCount());
2310:       assertFalse(node3.isHook());
2311:       assertFalse(node3.isGetProp());
2312:       assertFalse(node3.isReturn());
2313:       assertFalse(node3.isString());
2314:       assertFalse(node3.isInc());
2315:       assertEquals(39, node3.getType());
2316:       assertFalse(node3.isContinue());
2317:       assertEquals((-1), node3.getLineno());
2318:       assertTrue(node3.hasChildren());
2319:       assertFalse(node3.isIf());
2320:       assertFalse(node3.isNE());
2321:       assertFalse(node3.isSetterDef());
2322:       assertFalse(node3.isCast());
2323:       assertFalse(node3.isFalse());
2324:       assertFalse(node3.isIn());
2325:       assertFalse(node3.isThrow());
2326:       assertFalse(node3.isDebugger());
2327:       assertFalse(node3.isCatch());
2328:       assertFalse(node3.isRegExp());
2329:       assertFalse(node3.isFunction());
2330:       assertFalse(node3.isArrayLit());
2331:       assertFalse(node3.isTrue());
2332:       assertFalse(node3.isVoid());
2333:       assertFalse(node3.isParamList());
2334:       assertFalse(node3.isGetterDef());
2335:       assertFalse(node3.isDelProp());
2336:       assertFalse(node3.isFor());
2337:       assertFalse(node3.isCall());
2338:       assertTrue(node3.isNumber());
2339:       assertFalse(node3.isBlock());
2340:       assertFalse(node3.isTry());
2341:       assertTrue(node3.hasMoreThanOneChild());
2342:       assertFalse(node3.isWhile());
2343:       assertFalse(node3.isCase());
2344:       assertEquals((-1), node3.getCharno());
2345:       assertFalse(node3.isStringKey());
2346:       assertFalse(node3.isName());
2347:       assertFalse(node3.isSwitch());
2348:       assertFalse(node3.isEmpty());
2349:       assertFalse(node3.isNull());
2350:       assertFalse(node3.isOr());
2351:       assertFalse(node3.isLabel());
2352:       assertFalse(node3.isVar());
2353:       assertFalse(node3.isAdd());
2354:       assertFalse(node3.isNew());
2355:       assertFalse(node3.isAssignAdd());
2356:       assertFalse(node3.isDo());
2357:       assertFalse(node3.isDefaultCase());
2358:       assertNull(inputId0);
2359:       assertEquals(4095, Node.COLUMN_MASK);
2360:       assertEquals(55, Node.INFERRED_FUNCTION);
2361:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2362:       assertEquals(48, Node.DIRECTIVES);
2363:       assertEquals(39, Node.EMPTY_BLOCK);
2364:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2365:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2366:       assertEquals(52, Node.LENGTH);
2367:       assertEquals(57, Node.REFLECTED_OBJECT);
2368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2369:       assertEquals(53, Node.INPUT_ID);
2370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2371:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2372:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2373:       assertEquals(29, Node.JSDOC_INFO_PROP);
2374:       assertEquals(56, Node.CHANGE_TIME);
2375:       assertEquals(8, Node.FLAG_NO_THROWS);
2376:       assertEquals(36, Node.QUOTED_PROP);
2377:       assertEquals(32, Node.INCRDECR_PROP);
2378:       assertEquals(46, Node.IS_NAMESPACE);
2379:       assertEquals(12, Node.COLUMN_BITS);
2380:       assertEquals(37, Node.OPT_ARG_NAME);
2381:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2382:       assertEquals(49, Node.DIRECT_EVAL);
2383:       assertEquals(1, Node.DECR_FLAG);
2384:       assertEquals(57, Node.LAST_PROP);
2385:       assertEquals(47, Node.IS_DISPATCHER);
2386:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2387:       assertEquals(2, Node.POST_FLAG);
2388:       assertEquals(30, Node.VAR_ARGS_NAME);
2389:       assertEquals(40, Node.ORIGINALNAME_PROP);
2390:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2391:       assertEquals(43, Node.IS_CONSTANT_NAME);
2392:       assertEquals(54, Node.SLASH_V);
2393:       assertEquals(50, Node.FREE_CALL);
2394:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2395:       assertEquals(57, Node.REFLECTED_OBJECT);
2396:       assertEquals(52, Node.LENGTH);
2397:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2398:       assertEquals(50, Node.FREE_CALL);
2399:       assertEquals(54, Node.SLASH_V);
2400:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2401:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2402:       assertEquals(8, Node.FLAG_NO_THROWS);
2403:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2404:       assertEquals(57, Node.LAST_PROP);
2405:       assertEquals(1, Node.DECR_FLAG);
2406:       assertEquals(39, Node.EMPTY_BLOCK);
2407:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2408:       assertEquals(46, Node.IS_NAMESPACE);
2409:       assertEquals(30, Node.VAR_ARGS_NAME);
2410:       assertEquals(43, Node.IS_CONSTANT_NAME);
2411:       assertEquals(2, Node.POST_FLAG);
2412:       assertEquals(40, Node.ORIGINALNAME_PROP);
2413:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2414:       assertEquals(36, Node.QUOTED_PROP);
2415:       assertEquals(47, Node.IS_DISPATCHER);
2416:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2417:       assertEquals(29, Node.JSDOC_INFO_PROP);
2418:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2419:       assertEquals(53, Node.INPUT_ID);
2420:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2421:       assertEquals(12, Node.COLUMN_BITS);
2422:       assertEquals(32, Node.INCRDECR_PROP);
2423:       assertEquals(55, Node.INFERRED_FUNCTION);
2424:       assertEquals(4095, Node.COLUMN_MASK);
2425:       assertEquals(56, Node.CHANGE_TIME);
2426:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2427:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2428:       assertEquals(48, Node.DIRECTIVES);
2429:       assertEquals(49, Node.DIRECT_EVAL);
2430:       assertEquals(37, Node.OPT_ARG_NAME);
2431:       assertEquals(37, Node.OPT_ARG_NAME);
2432:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2433:       assertEquals(56, Node.CHANGE_TIME);
2434:       assertEquals(47, Node.IS_DISPATCHER);
2435:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2436:       assertEquals(2, Node.POST_FLAG);
2437:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2438:       assertEquals(29, Node.JSDOC_INFO_PROP);
2439:       assertEquals(12, Node.COLUMN_BITS);
2440:       assertEquals(57, Node.LAST_PROP);
2441:       assertEquals(1, Node.DECR_FLAG);
2442:       assertEquals(32, Node.INCRDECR_PROP);
2443:       assertEquals(43, Node.IS_CONSTANT_NAME);
2444:       assertEquals(54, Node.SLASH_V);
2445:       assertEquals(30, Node.VAR_ARGS_NAME);
2446:       assertEquals(40, Node.ORIGINALNAME_PROP);
2447:       assertEquals(46, Node.IS_NAMESPACE);
2448:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2449:       assertEquals(8, Node.FLAG_NO_THROWS);
2450:       assertEquals(39, Node.EMPTY_BLOCK);
2451:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2452:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2453:       assertEquals(50, Node.FREE_CALL);
2454:       assertEquals(55, Node.INFERRED_FUNCTION);
2455:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2456:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2457:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2458:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2459:       assertEquals(53, Node.INPUT_ID);
2460:       assertEquals(52, Node.LENGTH);
2461:       assertEquals(36, Node.QUOTED_PROP);
2462:       assertEquals(4095, Node.COLUMN_MASK);
2463:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2464:       assertEquals(57, Node.REFLECTED_OBJECT);
2465:       assertEquals(48, Node.DIRECTIVES);
2466:       assertEquals(49, Node.DIRECT_EVAL);
2467:       
2468:       // Undeclared exception!
2469:       try { 
2470:         node1.replaceChildAfter(node2, node3);
2471:         fail("Expecting exception: IllegalArgumentException");
2472:       
2473:       } catch(IllegalArgumentException e) {
2474:          //
2475:          // prev is not a child of this node.
2476:          //
2477:          verifyException("com.google.common.base.Preconditions", e);
2478:       }
2479:   }
2480: }
RegularFileObject[/tmp/EvoSuite_109_1628161378438/com/google/javascript/rhino/Node_109_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:02:58 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_109_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_109_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_109_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:02:58.952 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotNull(node0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(0, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertNotNull(node1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Object object0 = node1.getProp(0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(0, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertNull(object0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node node2 = Node.newString(46, "UNKNOWN");
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node1);
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isString());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertEquals(46, node2.getType());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertNotNull(node2);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

boolean boolean0 = node1.isNull();
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node2);
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(0, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node0.setLineno(39);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

node0.putProp(4095, (Object) null);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

int int0 = node0.getIndexOfChild(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node2);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(0, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals((-1), int0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean1 = node2.isIn();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertNotSame(node2, node1);
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isString());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertEquals(46, node2.getType());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(boolean1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node1);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isString());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertEquals(46, node2.getType());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertNotNull(node_NodeMismatch0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

Node node3 = new Node(39, node1, node2);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(0, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isString());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertEquals(46, node2.getType());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isExprResult());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isAnd());
assertFalse(node3.isLabelName());
assertFalse(node3.isBreak());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isThis());
assertFalse(node3.isGetElem());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isGetProp());
assertFalse(node3.isReturn());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertEquals(39, node3.getType());
assertFalse(node3.isContinue());
assertEquals((-1), node3.getLineno());
assertTrue(node3.hasChildren());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isIn());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isThrow());
assertFalse(node3.isDebugger());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isFor());
assertFalse(node3.isCall());
assertTrue(node3.isNumber());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isCase());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isSwitch());
assertFalse(node3.isEmpty());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertNotNull(node3);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

node3.addChildBefore(node0, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertTrue(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isDec());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(0, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isString());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertEquals(46, node2.getType());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isExprResult());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isAnd());
assertFalse(node3.isLabelName());
assertFalse(node3.isBreak());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isThis());
assertFalse(node3.isGetElem());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.hasOneChild());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isHook());
assertFalse(node3.isGetProp());
assertFalse(node3.isReturn());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertEquals(39, node3.getType());
assertFalse(node3.isContinue());
assertEquals((-1), node3.getLineno());
assertTrue(node3.hasChildren());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isIn());
assertFalse(node3.isThrow());
assertFalse(node3.isDebugger());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isFor());
assertFalse(node3.isCall());
assertTrue(node3.isNumber());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isCase());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isSwitch());
assertFalse(node3.isEmpty());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

InputId inputId0 = node3.getInputId();
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(0, node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertEquals((-1122), node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isSwitch());
assertFalse(node2.isDelProp());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isString());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertEquals(46, node2.getType());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isExprResult());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isAnd());
assertFalse(node3.isLabelName());
assertFalse(node3.isBreak());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isThis());
assertFalse(node3.isGetElem());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.hasOneChild());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isHook());
assertFalse(node3.isGetProp());
assertFalse(node3.isReturn());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertEquals(39, node3.getType());
assertFalse(node3.isContinue());
assertEquals((-1), node3.getLineno());
assertTrue(node3.hasChildren());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isIn());
assertFalse(node3.isThrow());
assertFalse(node3.isDebugger());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isFor());
assertFalse(node3.isCall());
assertTrue(node3.isNumber());
assertFalse(node3.isBlock());
assertFalse(node3.isTry());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isCase());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isSwitch());
assertFalse(node3.isEmpty());
assertFalse(node3.isNull());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertNull(inputId0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

node1.replaceChildAfter(node2, node3);

[MASTER] 11:03:00.704 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_117_1628161380292/com/google/javascript/rhino/Node_117_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_117_1628161380292/com/google/javascript/rhino/Node_117_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:00.704 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:00.704 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:00.705 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1046
[MASTER] 11:03:00.706 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_117_1628161380292/com/google/javascript/rhino/Node_117_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_117_tmp__ESTest extends Node_117_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(1.0);
21:       assertFalse(node0.isScript());
22:       assertFalse(node0.isExprResult());
23:       assertFalse(node0.isWith());
24:       assertFalse(node0.isNot());
25:       assertFalse(node0.isCast());
26:       assertFalse(node0.isInstanceOf());
27:       assertFalse(node0.isAnd());
28:       assertFalse(node0.isLabelName());
29:       assertFalse(node0.isGetElem());
30:       assertFalse(node0.isAssignAdd());
31:       assertFalse(node0.isOr());
32:       assertFalse(node0.isLabel());
33:       assertFalse(node0.isThrow());
34:       assertFalse(node0.isDo());
35:       assertFalse(node0.isString());
36:       assertFalse(node0.isWhile());
37:       assertFalse(node0.isCall());
38:       assertFalse(node0.isFalse());
39:       assertFalse(node0.isContinue());
40:       assertFalse(node0.isName());
41:       assertFalse(node0.isBreak());
42:       assertFalse(node0.isComma());
43:       assertFalse(node0.isTypeOf());
44:       assertFalse(node0.isReturn());
45:       assertFalse(node0.isAssign());
46:       assertFalse(node0.isDec());
47:       assertEquals((-1), node0.getSourcePosition());
48:       assertFalse(node0.hasChildren());
49:       assertFalse(node0.isObjectLit());
50:       assertTrue(node0.isNumber());
51:       assertFalse(node0.isGetProp());
52:       assertFalse(node0.isFunction());
53:       assertFalse(node0.isRegExp());
54:       assertFalse(node0.isTrue());
55:       assertFalse(node0.isVoid());
56:       assertFalse(node0.isDefaultCase());
57:       assertFalse(node0.isDebugger());
58:       assertFalse(node0.isCatch());
59:       assertFalse(node0.isDelProp());
60:       assertFalse(node0.isArrayLit());
61:       assertFalse(node0.isSetterDef());
62:       assertFalse(node0.isNE());
63:       assertFalse(node0.isNull());
64:       assertFalse(node0.isIf());
65:       assertEquals(0, node0.getChildCount());
66:       assertFalse(node0.isVar());
67:       assertFalse(node0.isIn());
68:       assertFalse(node0.isEmpty());
69:       assertFalse(node0.isAdd());
70:       assertFalse(node0.isNew());
71:       assertFalse(node0.isInc());
72:       assertFalse(node0.isSwitch());
73:       assertEquals(39, node0.getType());
74:       assertFalse(node0.isBlock());
75:       assertFalse(node0.isHook());
76:       assertEquals((-1), node0.getCharno());
77:       assertFalse(node0.hasMoreThanOneChild());
78:       assertFalse(node0.isStringKey());
79:       assertEquals((-1), node0.getLineno());
80:       assertFalse(node0.isThis());
81:       assertFalse(node0.isParamList());
82:       assertFalse(node0.isFor());
83:       assertFalse(node0.isGetterDef());
84:       assertFalse(node0.isTry());
85:       assertFalse(node0.hasOneChild());
86:       assertFalse(node0.isCase());
87:       assertNotNull(node0);
88:       assertEquals(32, Node.INCRDECR_PROP);
89:       assertEquals(2, Node.POST_FLAG);
90:       assertEquals(12, Node.COLUMN_BITS);
91:       assertEquals(56, Node.CHANGE_TIME);
92:       assertEquals(51, Node.STATIC_SOURCE_FILE);
93:       assertEquals(46, Node.IS_NAMESPACE);
94:       assertEquals(47, Node.IS_DISPATCHER);
95:       assertEquals(29, Node.JSDOC_INFO_PROP);
96:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
97:       assertEquals(1, Node.DECR_FLAG);
98:       assertEquals(57, Node.LAST_PROP);
99:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
100:       assertEquals(15, Node.NO_SIDE_EFFECTS);
101:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
102:       assertEquals(52, Node.LENGTH);
103:       assertEquals(36, Node.QUOTED_PROP);
104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
105:       assertEquals(57, Node.REFLECTED_OBJECT);
106:       assertEquals(49, Node.DIRECT_EVAL);
107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
108:       assertEquals(4095, Node.COLUMN_MASK);
109:       assertEquals(37, Node.OPT_ARG_NAME);
110:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
111:       assertEquals(48, Node.DIRECTIVES);
112:       assertEquals(8, Node.FLAG_NO_THROWS);
113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
115:       assertEquals(50, Node.FREE_CALL);
116:       assertEquals(55, Node.INFERRED_FUNCTION);
117:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
118:       assertEquals(39, Node.EMPTY_BLOCK);
119:       assertEquals(53, Node.INPUT_ID);
120:       assertEquals(43, Node.IS_CONSTANT_NAME);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertEquals(40, Node.ORIGINALNAME_PROP);
124:       
125:       Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
126:       assertFalse(node1.equals((Object)node0));
127:       assertFalse(node1.hasOneChild());
128:       assertFalse(node1.isLabelName());
129:       assertFalse(node1.isAssign());
130:       assertEquals((-1122), node1.getType());
131:       assertFalse(node1.isGetElem());
132:       assertFalse(node1.isCast());
133:       assertFalse(node1.isExprResult());
134:       assertEquals(0, node1.getCharno());
135:       assertFalse(node1.isNumber());
136:       assertFalse(node1.isOr());
137:       assertFalse(node1.isAnd());
138:       assertFalse(node1.isContinue());
139:       assertFalse(node1.isDo());
140:       assertFalse(node1.isNew());
141:       assertFalse(node1.isLabel());
142:       assertFalse(node1.isAssignAdd());
143:       assertFalse(node1.isThrow());
144:       assertFalse(node1.isVar());
145:       assertFalse(node1.isCall());
146:       assertFalse(node1.isFalse());
147:       assertFalse(node1.isName());
148:       assertFalse(node1.isBreak());
149:       assertFalse(node1.isAdd());
150:       assertFalse(node1.isNull());
151:       assertFalse(node1.isNot());
152:       assertFalse(node1.isObjectLit());
153:       assertFalse(node1.isString());
154:       assertFalse(node1.isComma());
155:       assertFalse(node1.isGetProp());
156:       assertFalse(node1.isDec());
157:       assertFalse(node1.isTypeOf());
158:       assertFalse(node1.isReturn());
159:       assertFalse(node1.isWhile());
160:       assertFalse(node1.hasChildren());
161:       assertFalse(node1.isArrayLit());
162:       assertFalse(node1.isEmpty());
163:       assertFalse(node1.isTrue());
164:       assertFalse(node1.isDebugger());
165:       assertFalse(node1.isGetterDef());
166:       assertFalse(node1.isDelProp());
167:       assertFalse(node1.isVoid());
168:       assertFalse(node1.isIf());
169:       assertFalse(node1.isNE());
170:       assertEquals(0, node1.getChildCount());
171:       assertFalse(node1.isIn());
172:       assertFalse(node1.isSetterDef());
173:       assertFalse(node1.isInc());
174:       assertFalse(node1.isFunction());
175:       assertFalse(node1.isDefaultCase());
176:       assertFalse(node1.isParamList());
177:       assertFalse(node1.isSwitch());
178:       assertFalse(node1.isStringKey());
179:       assertEquals(131072, node1.getSourcePosition());
180:       assertFalse(node1.hasMoreThanOneChild());
181:       assertFalse(node1.isCatch());
182:       assertFalse(node1.isCase());
183:       assertFalse(node1.isWith());
184:       assertEquals(32, node1.getLineno());
185:       assertFalse(node1.isInstanceOf());
186:       assertFalse(node1.isScript());
187:       assertFalse(node1.isThis());
188:       assertFalse(node1.isRegExp());
189:       assertFalse(node1.isTry());
190:       assertFalse(node1.isHook());
191:       assertFalse(node1.isBlock());
192:       assertFalse(node1.isFor());
193:       assertNotNull(node1);
194:       assertEquals(30, Node.VAR_ARGS_NAME);
195:       assertEquals(49, Node.DIRECT_EVAL);
196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
197:       assertEquals(1, Node.DECR_FLAG);
198:       assertEquals(32, Node.INCRDECR_PROP);
199:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
200:       assertEquals(12, Node.COLUMN_BITS);
201:       assertEquals(57, Node.LAST_PROP);
202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
203:       assertEquals(29, Node.JSDOC_INFO_PROP);
204:       assertEquals(8, Node.FLAG_NO_THROWS);
205:       assertEquals(39, Node.EMPTY_BLOCK);
206:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
208:       assertEquals(52, Node.LENGTH);
209:       assertEquals(48, Node.DIRECTIVES);
210:       assertEquals(37, Node.OPT_ARG_NAME);
211:       assertEquals(57, Node.REFLECTED_OBJECT);
212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
213:       assertEquals(56, Node.CHANGE_TIME);
214:       assertEquals(36, Node.QUOTED_PROP);
215:       assertEquals(55, Node.INFERRED_FUNCTION);
216:       assertEquals(4095, Node.COLUMN_MASK);
217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
218:       assertEquals(53, Node.INPUT_ID);
219:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
220:       assertEquals(50, Node.FREE_CALL);
221:       assertEquals(47, Node.IS_DISPATCHER);
222:       assertEquals(2, Node.POST_FLAG);
223:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
224:       assertEquals(40, Node.ORIGINALNAME_PROP);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(51, Node.STATIC_SOURCE_FILE);
227:       assertEquals(46, Node.IS_NAMESPACE);
228:       assertEquals(54, Node.SLASH_V);
229:       assertEquals(43, Node.IS_CONSTANT_NAME);
230:       
231:       Object object0 = node1.getProp(0);
232:       assertFalse(node1.equals((Object)node0));
233:       assertFalse(node1.hasOneChild());
234:       assertFalse(node1.isLabelName());
235:       assertFalse(node1.isAssign());
236:       assertEquals((-1122), node1.getType());
237:       assertFalse(node1.isGetElem());
238:       assertFalse(node1.isCast());
239:       assertFalse(node1.isExprResult());
240:       assertEquals(0, node1.getCharno());
241:       assertFalse(node1.isNumber());
242:       assertFalse(node1.isOr());
243:       assertFalse(node1.isAnd());
244:       assertFalse(node1.isContinue());
245:       assertFalse(node1.isDo());
246:       assertFalse(node1.isNew());
247:       assertFalse(node1.isLabel());
248:       assertFalse(node1.isAssignAdd());
249:       assertFalse(node1.isThrow());
250:       assertFalse(node1.isVar());
251:       assertFalse(node1.isCall());
252:       assertFalse(node1.isFalse());
253:       assertFalse(node1.isName());
254:       assertFalse(node1.isBreak());
255:       assertFalse(node1.isAdd());
256:       assertFalse(node1.isNull());
257:       assertFalse(node1.isNot());
258:       assertFalse(node1.isObjectLit());
259:       assertFalse(node1.isString());
260:       assertFalse(node1.isComma());
261:       assertFalse(node1.isGetProp());
262:       assertFalse(node1.isDec());
263:       assertFalse(node1.isTypeOf());
264:       assertFalse(node1.isReturn());
265:       assertFalse(node1.isWhile());
266:       assertFalse(node1.hasChildren());
267:       assertFalse(node1.isArrayLit());
268:       assertFalse(node1.isEmpty());
269:       assertFalse(node1.isTrue());
270:       assertFalse(node1.isDebugger());
271:       assertFalse(node1.isGetterDef());
272:       assertFalse(node1.isDelProp());
273:       assertFalse(node1.isVoid());
274:       assertFalse(node1.isIf());
275:       assertFalse(node1.isNE());
276:       assertEquals(0, node1.getChildCount());
277:       assertFalse(node1.isIn());
278:       assertFalse(node1.isSetterDef());
279:       assertFalse(node1.isInc());
280:       assertFalse(node1.isFunction());
281:       assertFalse(node1.isDefaultCase());
282:       assertFalse(node1.isParamList());
283:       assertFalse(node1.isSwitch());
284:       assertFalse(node1.isStringKey());
285:       assertEquals(131072, node1.getSourcePosition());
286:       assertFalse(node1.hasMoreThanOneChild());
287:       assertFalse(node1.isCatch());
288:       assertFalse(node1.isCase());
289:       assertFalse(node1.isWith());
290:       assertEquals(32, node1.getLineno());
291:       assertFalse(node1.isInstanceOf());
292:       assertFalse(node1.isScript());
293:       assertFalse(node1.isThis());
294:       assertFalse(node1.isRegExp());
295:       assertFalse(node1.isTry());
296:       assertFalse(node1.isHook());
297:       assertFalse(node1.isBlock());
298:       assertFalse(node1.isFor());
299:       assertNull(object0);
300:       assertEquals(30, Node.VAR_ARGS_NAME);
301:       assertEquals(49, Node.DIRECT_EVAL);
302:       assertEquals(15, Node.NO_SIDE_EFFECTS);
303:       assertEquals(1, Node.DECR_FLAG);
304:       assertEquals(32, Node.INCRDECR_PROP);
305:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
306:       assertEquals(12, Node.COLUMN_BITS);
307:       assertEquals(57, Node.LAST_PROP);
308:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
309:       assertEquals(29, Node.JSDOC_INFO_PROP);
310:       assertEquals(8, Node.FLAG_NO_THROWS);
311:       assertEquals(39, Node.EMPTY_BLOCK);
312:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
313:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
314:       assertEquals(52, Node.LENGTH);
315:       assertEquals(48, Node.DIRECTIVES);
316:       assertEquals(37, Node.OPT_ARG_NAME);
317:       assertEquals(57, Node.REFLECTED_OBJECT);
318:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
319:       assertEquals(56, Node.CHANGE_TIME);
320:       assertEquals(36, Node.QUOTED_PROP);
321:       assertEquals(55, Node.INFERRED_FUNCTION);
322:       assertEquals(4095, Node.COLUMN_MASK);
323:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
324:       assertEquals(53, Node.INPUT_ID);
325:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
326:       assertEquals(50, Node.FREE_CALL);
327:       assertEquals(47, Node.IS_DISPATCHER);
328:       assertEquals(2, Node.POST_FLAG);
329:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
330:       assertEquals(40, Node.ORIGINALNAME_PROP);
331:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
332:       assertEquals(51, Node.STATIC_SOURCE_FILE);
333:       assertEquals(46, Node.IS_NAMESPACE);
334:       assertEquals(54, Node.SLASH_V);
335:       assertEquals(43, Node.IS_CONSTANT_NAME);
336:       
337:       Node node2 = Node.newString(46, "UNKNOWN");
338:       assertFalse(node2.equals((Object)node0));
339:       assertFalse(node2.equals((Object)node1));
340:       assertNotSame(node2, node1);
341:       assertEquals((-1), node2.getLineno());
342:       assertFalse(node2.isReturn());
343:       assertFalse(node2.isOr());
344:       assertFalse(node2.isLabel());
345:       assertFalse(node2.hasMoreThanOneChild());
346:       assertFalse(node2.isTypeOf());
347:       assertFalse(node2.isNumber());
348:       assertFalse(node2.isContinue());
349:       assertFalse(node2.isLabelName());
350:       assertEquals((-1), node2.getSourcePosition());
351:       assertFalse(node2.isGetElem());
352:       assertFalse(node2.hasOneChild());
353:       assertFalse(node2.isBlock());
354:       assertFalse(node2.isCall());
355:       assertFalse(node2.isExprResult());
356:       assertFalse(node2.isScript());
357:       assertFalse(node2.isWith());
358:       assertFalse(node2.isWhile());
359:       assertFalse(node2.isAssign());
360:       assertFalse(node2.isDec());
361:       assertFalse(node2.hasChildren());
362:       assertEquals(46, node2.getType());
363:       assertEquals(0, node2.getChildCount());
364:       assertFalse(node2.isComma());
365:       assertFalse(node2.isNull());
366:       assertFalse(node2.isBreak());
367:       assertFalse(node2.isTrue());
368:       assertFalse(node2.isParamList());
369:       assertFalse(node2.isVoid());
370:       assertFalse(node2.isStringKey());
371:       assertFalse(node2.isName());
372:       assertFalse(node2.isAdd());
373:       assertFalse(node2.isNew());
374:       assertFalse(node2.isArrayLit());
375:       assertFalse(node2.isDo());
376:       assertFalse(node2.isEmpty());
377:       assertFalse(node2.isVar());
378:       assertFalse(node2.isAssignAdd());
379:       assertFalse(node2.isDefaultCase());
380:       assertFalse(node2.isIn());
381:       assertFalse(node2.isGetterDef());
382:       assertFalse(node2.isDelProp());
383:       assertFalse(node2.isSwitch());
384:       assertFalse(node2.isNE());
385:       assertFalse(node2.isIf());
386:       assertFalse(node2.isTry());
387:       assertFalse(node2.isHook());
388:       assertEquals((-1), node2.getCharno());
389:       assertFalse(node2.isDebugger());
390:       assertFalse(node2.isRegExp());
391:       assertFalse(node2.isString());
392:       assertFalse(node2.isFor());
393:       assertFalse(node2.isCase());
394:       assertFalse(node2.isThis());
395:       assertFalse(node2.isGetProp());
396:       assertFalse(node2.isSetterDef());
397:       assertFalse(node2.isCatch());
398:       assertFalse(node2.isObjectLit());
399:       assertFalse(node2.isInstanceOf());
400:       assertFalse(node2.isNot());
401:       assertFalse(node2.isAnd());
402:       assertFalse(node2.isInc());
403:       assertFalse(node2.isFunction());
404:       assertFalse(node2.isCast());
405:       assertFalse(node2.isFalse());
406:       assertFalse(node2.isThrow());
407:       assertNotNull(node2);
408:       assertEquals(40, Node.ORIGINALNAME_PROP);
409:       assertEquals(57, Node.REFLECTED_OBJECT);
410:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
411:       assertEquals(52, Node.LENGTH);
412:       assertEquals(50, Node.FREE_CALL);
413:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
414:       assertEquals(15, Node.NO_SIDE_EFFECTS);
415:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
416:       assertEquals(39, Node.EMPTY_BLOCK);
417:       assertEquals(57, Node.LAST_PROP);
418:       assertEquals(1, Node.DECR_FLAG);
419:       assertEquals(51, Node.STATIC_SOURCE_FILE);
420:       assertEquals(46, Node.IS_NAMESPACE);
421:       assertEquals(30, Node.VAR_ARGS_NAME);
422:       assertEquals(43, Node.IS_CONSTANT_NAME);
423:       assertEquals(54, Node.SLASH_V);
424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
425:       assertEquals(29, Node.JSDOC_INFO_PROP);
426:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
427:       assertEquals(2, Node.POST_FLAG);
428:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
429:       assertEquals(47, Node.IS_DISPATCHER);
430:       assertEquals(53, Node.INPUT_ID);
431:       assertEquals(32, Node.INCRDECR_PROP);
432:       assertEquals(55, Node.INFERRED_FUNCTION);
433:       assertEquals(4095, Node.COLUMN_MASK);
434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
435:       assertEquals(12, Node.COLUMN_BITS);
436:       assertEquals(8, Node.FLAG_NO_THROWS);
437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
438:       assertEquals(37, Node.OPT_ARG_NAME);
439:       assertEquals(56, Node.CHANGE_TIME);
440:       assertEquals(36, Node.QUOTED_PROP);
441:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
442:       assertEquals(49, Node.DIRECT_EVAL);
443:       assertEquals(48, Node.DIRECTIVES);
444:       
445:       boolean boolean0 = node1.isNull();
446:       assertFalse(node1.equals((Object)node0));
447:       assertFalse(node1.equals((Object)node2));
448:       assertNotSame(node1, node2);
449:       assertFalse(node1.hasOneChild());
450:       assertFalse(node1.isLabelName());
451:       assertFalse(node1.isAssign());
452:       assertEquals((-1122), node1.getType());
453:       assertFalse(node1.isGetElem());
454:       assertFalse(node1.isCast());
455:       assertFalse(node1.isExprResult());
456:       assertEquals(0, node1.getCharno());
457:       assertFalse(node1.isNumber());
458:       assertFalse(node1.isOr());
459:       assertFalse(node1.isAnd());
460:       assertFalse(node1.isContinue());
461:       assertFalse(node1.isDo());
462:       assertFalse(node1.isNew());
463:       assertFalse(node1.isLabel());
464:       assertFalse(node1.isAssignAdd());
465:       assertFalse(node1.isThrow());
466:       assertFalse(node1.isVar());
467:       assertFalse(node1.isCall());
468:       assertFalse(node1.isFalse());
469:       assertFalse(node1.isName());
470:       assertFalse(node1.isBreak());
471:       assertFalse(node1.isAdd());
472:       assertFalse(node1.isNull());
473:       assertFalse(node1.isNot());
474:       assertFalse(node1.isObjectLit());
475:       assertFalse(node1.isString());
476:       assertFalse(node1.isComma());
477:       assertFalse(node1.isGetProp());
478:       assertFalse(node1.isDec());
479:       assertFalse(node1.isTypeOf());
480:       assertFalse(node1.isReturn());
481:       assertFalse(node1.isWhile());
482:       assertFalse(node1.hasChildren());
483:       assertFalse(node1.isArrayLit());
484:       assertFalse(node1.isEmpty());
485:       assertFalse(node1.isTrue());
486:       assertFalse(node1.isDebugger());
487:       assertFalse(node1.isGetterDef());
488:       assertFalse(node1.isDelProp());
489:       assertFalse(node1.isVoid());
490:       assertFalse(node1.isIf());
491:       assertFalse(node1.isNE());
492:       assertEquals(0, node1.getChildCount());
493:       assertFalse(node1.isIn());
494:       assertFalse(node1.isSetterDef());
495:       assertFalse(node1.isInc());
496:       assertFalse(node1.isFunction());
497:       assertFalse(node1.isDefaultCase());
498:       assertFalse(node1.isParamList());
499:       assertFalse(node1.isSwitch());
500:       assertFalse(node1.isStringKey());
501:       assertEquals(131072, node1.getSourcePosition());
502:       assertFalse(node1.hasMoreThanOneChild());
503:       assertFalse(node1.isCatch());
504:       assertFalse(node1.isCase());
505:       assertFalse(node1.isWith());
506:       assertEquals(32, node1.getLineno());
507:       assertFalse(node1.isInstanceOf());
508:       assertFalse(node1.isScript());
509:       assertFalse(node1.isThis());
510:       assertFalse(node1.isRegExp());
511:       assertFalse(node1.isTry());
512:       assertFalse(node1.isHook());
513:       assertFalse(node1.isBlock());
514:       assertFalse(node1.isFor());
515:       assertFalse(boolean0);
516:       assertEquals(30, Node.VAR_ARGS_NAME);
517:       assertEquals(49, Node.DIRECT_EVAL);
518:       assertEquals(15, Node.NO_SIDE_EFFECTS);
519:       assertEquals(1, Node.DECR_FLAG);
520:       assertEquals(32, Node.INCRDECR_PROP);
521:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
522:       assertEquals(12, Node.COLUMN_BITS);
523:       assertEquals(57, Node.LAST_PROP);
524:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
525:       assertEquals(29, Node.JSDOC_INFO_PROP);
526:       assertEquals(8, Node.FLAG_NO_THROWS);
527:       assertEquals(39, Node.EMPTY_BLOCK);
528:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
529:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
530:       assertEquals(52, Node.LENGTH);
531:       assertEquals(48, Node.DIRECTIVES);
532:       assertEquals(37, Node.OPT_ARG_NAME);
533:       assertEquals(57, Node.REFLECTED_OBJECT);
534:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
535:       assertEquals(56, Node.CHANGE_TIME);
536:       assertEquals(36, Node.QUOTED_PROP);
537:       assertEquals(55, Node.INFERRED_FUNCTION);
538:       assertEquals(4095, Node.COLUMN_MASK);
539:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
540:       assertEquals(53, Node.INPUT_ID);
541:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
542:       assertEquals(50, Node.FREE_CALL);
543:       assertEquals(47, Node.IS_DISPATCHER);
544:       assertEquals(2, Node.POST_FLAG);
545:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
546:       assertEquals(40, Node.ORIGINALNAME_PROP);
547:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
548:       assertEquals(51, Node.STATIC_SOURCE_FILE);
549:       assertEquals(46, Node.IS_NAMESPACE);
550:       assertEquals(54, Node.SLASH_V);
551:       assertEquals(43, Node.IS_CONSTANT_NAME);
552:       
553:       node0.setLineno(39);
554:       assertFalse(node0.equals((Object)node2));
555:       assertFalse(node0.equals((Object)node1));
556:       assertEquals(0, node0.getCharno());
557:       assertFalse(node0.isScript());
558:       assertFalse(node0.isExprResult());
559:       assertFalse(node0.isWith());
560:       assertFalse(node0.isNot());
561:       assertFalse(node0.isCast());
562:       assertFalse(node0.isInstanceOf());
563:       assertFalse(node0.isAnd());
564:       assertFalse(node0.isLabelName());
565:       assertFalse(node0.isGetElem());
566:       assertFalse(node0.isAssignAdd());
567:       assertFalse(node0.isOr());
568:       assertEquals(39, node0.getLineno());
569:       assertFalse(node0.isLabel());
570:       assertFalse(node0.isThrow());
571:       assertFalse(node0.isDo());
572:       assertEquals(159744, node0.getSourcePosition());
573:       assertFalse(node0.isString());
574:       assertFalse(node0.isWhile());
575:       assertFalse(node0.isCall());
576:       assertFalse(node0.isFalse());
577:       assertFalse(node0.isContinue());
578:       assertFalse(node0.isName());
579:       assertFalse(node0.isBreak());
580:       assertFalse(node0.isComma());
581:       assertFalse(node0.isTypeOf());
582:       assertFalse(node0.isReturn());
583:       assertFalse(node0.isAssign());
584:       assertFalse(node0.isDec());
585:       assertFalse(node0.hasChildren());
586:       assertFalse(node0.isObjectLit());
587:       assertTrue(node0.isNumber());
588:       assertFalse(node0.isGetProp());
589:       assertFalse(node0.isFunction());
590:       assertFalse(node0.isRegExp());
591:       assertFalse(node0.isTrue());
592:       assertFalse(node0.isVoid());
593:       assertFalse(node0.isDefaultCase());
594:       assertFalse(node0.isDebugger());
595:       assertFalse(node0.isCatch());
596:       assertFalse(node0.isDelProp());
597:       assertFalse(node0.isArrayLit());
598:       assertFalse(node0.isSetterDef());
599:       assertFalse(node0.isNE());
600:       assertFalse(node0.isNull());
601:       assertFalse(node0.isIf());
602:       assertEquals(0, node0.getChildCount());
603:       assertFalse(node0.isVar());
604:       assertFalse(node0.isIn());
605:       assertFalse(node0.isEmpty());
606:       assertFalse(node0.isAdd());
607:       assertFalse(node0.isNew());
608:       assertFalse(node0.isInc());
609:       assertFalse(node0.isSwitch());
610:       assertEquals(39, node0.getType());
611:       assertFalse(node0.isBlock());
612:       assertFalse(node0.isHook());
613:       assertFalse(node0.hasMoreThanOneChild());
614:       assertFalse(node0.isStringKey());
615:       assertFalse(node0.isThis());
616:       assertFalse(node0.isParamList());
617:       assertFalse(node0.isFor());
618:       assertFalse(node0.isGetterDef());
619:       assertFalse(node0.isTry());
620:       assertFalse(node0.hasOneChild());
621:       assertFalse(node0.isCase());
622:       assertEquals(32, Node.INCRDECR_PROP);
623:       assertEquals(2, Node.POST_FLAG);
624:       assertEquals(12, Node.COLUMN_BITS);
625:       assertEquals(56, Node.CHANGE_TIME);
626:       assertEquals(51, Node.STATIC_SOURCE_FILE);
627:       assertEquals(46, Node.IS_NAMESPACE);
628:       assertEquals(47, Node.IS_DISPATCHER);
629:       assertEquals(29, Node.JSDOC_INFO_PROP);
630:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
631:       assertEquals(1, Node.DECR_FLAG);
632:       assertEquals(57, Node.LAST_PROP);
633:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
634:       assertEquals(15, Node.NO_SIDE_EFFECTS);
635:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
636:       assertEquals(52, Node.LENGTH);
637:       assertEquals(36, Node.QUOTED_PROP);
638:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
639:       assertEquals(57, Node.REFLECTED_OBJECT);
640:       assertEquals(49, Node.DIRECT_EVAL);
641:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
642:       assertEquals(4095, Node.COLUMN_MASK);
643:       assertEquals(37, Node.OPT_ARG_NAME);
644:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
645:       assertEquals(48, Node.DIRECTIVES);
646:       assertEquals(8, Node.FLAG_NO_THROWS);
647:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
648:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
649:       assertEquals(50, Node.FREE_CALL);
650:       assertEquals(55, Node.INFERRED_FUNCTION);
651:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
652:       assertEquals(39, Node.EMPTY_BLOCK);
653:       assertEquals(53, Node.INPUT_ID);
654:       assertEquals(43, Node.IS_CONSTANT_NAME);
655:       assertEquals(54, Node.SLASH_V);
656:       assertEquals(30, Node.VAR_ARGS_NAME);
657:       assertEquals(40, Node.ORIGINALNAME_PROP);
658:       
659:       node0.putProp(4095, (Object) null);
660:       assertFalse(node0.equals((Object)node2));
661:       assertFalse(node0.equals((Object)node1));
662:       assertEquals(0, node0.getCharno());
663:       assertFalse(node0.isScript());
664:       assertFalse(node0.isExprResult());
665:       assertFalse(node0.isWith());
666:       assertFalse(node0.isNot());
667:       assertFalse(node0.isCast());
668:       assertFalse(node0.isInstanceOf());
669:       assertFalse(node0.isAnd());
670:       assertFalse(node0.isLabelName());
671:       assertFalse(node0.isGetElem());
672:       assertFalse(node0.isAssignAdd());
673:       assertFalse(node0.isOr());
674:       assertEquals(39, node0.getLineno());
675:       assertFalse(node0.isLabel());
676:       assertFalse(node0.isThrow());
677:       assertFalse(node0.isDo());
678:       assertEquals(159744, node0.getSourcePosition());
679:       assertFalse(node0.isString());
680:       assertFalse(node0.isWhile());
681:       assertFalse(node0.isCall());
682:       assertFalse(node0.isFalse());
683:       assertFalse(node0.isContinue());
684:       assertFalse(node0.isName());
685:       assertFalse(node0.isBreak());
686:       assertFalse(node0.isComma());
687:       assertFalse(node0.isTypeOf());
688:       assertFalse(node0.isReturn());
689:       assertFalse(node0.isAssign());
690:       assertFalse(node0.isDec());
691:       assertFalse(node0.hasChildren());
692:       assertFalse(node0.isObjectLit());
693:       assertTrue(node0.isNumber());
694:       assertFalse(node0.isGetProp());
695:       assertFalse(node0.isFunction());
696:       assertFalse(node0.isRegExp());
697:       assertFalse(node0.isTrue());
698:       assertFalse(node0.isVoid());
699:       assertFalse(node0.isDefaultCase());
700:       assertFalse(node0.isDebugger());
701:       assertFalse(node0.isCatch());
702:       assertFalse(node0.isDelProp());
703:       assertFalse(node0.isArrayLit());
704:       assertFalse(node0.isSetterDef());
705:       assertFalse(node0.isNE());
706:       assertFalse(node0.isNull());
707:       assertFalse(node0.isIf());
708:       assertEquals(0, node0.getChildCount());
709:       assertFalse(node0.isVar());
710:       assertFalse(node0.isIn());
711:       assertFalse(node0.isEmpty());
712:       assertFalse(node0.isAdd());
713:       assertFalse(node0.isNew());
714:       assertFalse(node0.isInc());
715:       assertFalse(node0.isSwitch());
716:       assertEquals(39, node0.getType());
717:       assertFalse(node0.isBlock());
718:       assertFalse(node0.isHook());
719:       assertFalse(node0.hasMoreThanOneChild());
720:       assertFalse(node0.isStringKey());
721:       assertFalse(node0.isThis());
722:       assertFalse(node0.isParamList());
723:       assertFalse(node0.isFor());
724:       assertFalse(node0.isGetterDef());
725:       assertFalse(node0.isTry());
726:       assertFalse(node0.hasOneChild());
727:       assertFalse(node0.isCase());
728:       assertEquals(32, Node.INCRDECR_PROP);
729:       assertEquals(2, Node.POST_FLAG);
730:       assertEquals(12, Node.COLUMN_BITS);
731:       assertEquals(56, Node.CHANGE_TIME);
732:       assertEquals(51, Node.STATIC_SOURCE_FILE);
733:       assertEquals(46, Node.IS_NAMESPACE);
734:       assertEquals(47, Node.IS_DISPATCHER);
735:       assertEquals(29, Node.JSDOC_INFO_PROP);
736:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
737:       assertEquals(1, Node.DECR_FLAG);
738:       assertEquals(57, Node.LAST_PROP);
739:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
740:       assertEquals(15, Node.NO_SIDE_EFFECTS);
741:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
742:       assertEquals(52, Node.LENGTH);
743:       assertEquals(36, Node.QUOTED_PROP);
744:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
745:       assertEquals(57, Node.REFLECTED_OBJECT);
746:       assertEquals(49, Node.DIRECT_EVAL);
747:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
748:       assertEquals(4095, Node.COLUMN_MASK);
749:       assertEquals(37, Node.OPT_ARG_NAME);
750:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
751:       assertEquals(48, Node.DIRECTIVES);
752:       assertEquals(8, Node.FLAG_NO_THROWS);
753:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
754:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
755:       assertEquals(50, Node.FREE_CALL);
756:       assertEquals(55, Node.INFERRED_FUNCTION);
757:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
758:       assertEquals(39, Node.EMPTY_BLOCK);
759:       assertEquals(53, Node.INPUT_ID);
760:       assertEquals(43, Node.IS_CONSTANT_NAME);
761:       assertEquals(54, Node.SLASH_V);
762:       assertEquals(30, Node.VAR_ARGS_NAME);
763:       assertEquals(40, Node.ORIGINALNAME_PROP);
764:       
765:       int int0 = node0.getIndexOfChild(node1);
766:       assertFalse(node0.equals((Object)node2));
767:       assertFalse(node0.equals((Object)node1));
768:       assertFalse(node1.equals((Object)node0));
769:       assertFalse(node1.equals((Object)node2));
770:       assertNotSame(node1, node2);
771:       assertEquals(0, node0.getCharno());
772:       assertFalse(node0.isScript());
773:       assertFalse(node0.isExprResult());
774:       assertFalse(node0.isWith());
775:       assertFalse(node0.isNot());
776:       assertFalse(node0.isCast());
777:       assertFalse(node0.isInstanceOf());
778:       assertFalse(node0.isAnd());
779:       assertFalse(node0.isLabelName());
780:       assertFalse(node0.isGetElem());
781:       assertFalse(node0.isAssignAdd());
782:       assertFalse(node0.isOr());
783:       assertEquals(39, node0.getLineno());
784:       assertFalse(node0.isLabel());
785:       assertFalse(node0.isThrow());
786:       assertFalse(node0.isDo());
787:       assertEquals(159744, node0.getSourcePosition());
788:       assertFalse(node0.isString());
789:       assertFalse(node0.isWhile());
790:       assertFalse(node0.isCall());
791:       assertFalse(node0.isFalse());
792:       assertFalse(node0.isContinue());
793:       assertFalse(node0.isName());
794:       assertFalse(node0.isBreak());
795:       assertFalse(node0.isComma());
796:       assertFalse(node0.isTypeOf());
797:       assertFalse(node0.isReturn());
798:       assertFalse(node0.isAssign());
799:       assertFalse(node0.isDec());
800:       assertFalse(node0.hasChildren());
801:       assertFalse(node0.isObjectLit());
802:       assertTrue(node0.isNumber());
803:       assertFalse(node0.isGetProp());
804:       assertFalse(node0.isFunction());
805:       assertFalse(node0.isRegExp());
806:       assertFalse(node0.isTrue());
807:       assertFalse(node0.isVoid());
808:       assertFalse(node0.isDefaultCase());
809:       assertFalse(node0.isDebugger());
810:       assertFalse(node0.isCatch());
811:       assertFalse(node0.isDelProp());
812:       assertFalse(node0.isArrayLit());
813:       assertFalse(node0.isSetterDef());
814:       assertFalse(node0.isNE());
815:       assertFalse(node0.isNull());
816:       assertFalse(node0.isIf());
817:       assertEquals(0, node0.getChildCount());
818:       assertFalse(node0.isVar());
819:       assertFalse(node0.isIn());
820:       assertFalse(node0.isEmpty());
821:       assertFalse(node0.isAdd());
822:       assertFalse(node0.isNew());
823:       assertFalse(node0.isInc());
824:       assertFalse(node0.isSwitch());
825:       assertEquals(39, node0.getType());
826:       assertFalse(node0.isBlock());
827:       assertFalse(node0.isHook());
828:       assertFalse(node0.hasMoreThanOneChild());
829:       assertFalse(node0.isStringKey());
830:       assertFalse(node0.isThis());
831:       assertFalse(node0.isParamList());
832:       assertFalse(node0.isFor());
833:       assertFalse(node0.isGetterDef());
834:       assertFalse(node0.isTry());
835:       assertFalse(node0.hasOneChild());
836:       assertFalse(node0.isCase());
837:       assertFalse(node1.hasOneChild());
838:       assertFalse(node1.isLabelName());
839:       assertFalse(node1.isAssign());
840:       assertEquals((-1122), node1.getType());
841:       assertFalse(node1.isGetElem());
842:       assertFalse(node1.isCast());
843:       assertFalse(node1.isExprResult());
844:       assertEquals(0, node1.getCharno());
845:       assertFalse(node1.isNumber());
846:       assertFalse(node1.isOr());
847:       assertFalse(node1.isAnd());
848:       assertFalse(node1.isContinue());
849:       assertFalse(node1.isDo());
850:       assertFalse(node1.isNew());
851:       assertFalse(node1.isLabel());
852:       assertFalse(node1.isAssignAdd());
853:       assertFalse(node1.isThrow());
854:       assertFalse(node1.isVar());
855:       assertFalse(node1.isCall());
856:       assertFalse(node1.isFalse());
857:       assertFalse(node1.isName());
858:       assertFalse(node1.isBreak());
859:       assertFalse(node1.isAdd());
860:       assertFalse(node1.isNull());
861:       assertFalse(node1.isNot());
862:       assertFalse(node1.isObjectLit());
863:       assertFalse(node1.isString());
864:       assertFalse(node1.isComma());
865:       assertFalse(node1.isGetProp());
866:       assertFalse(node1.isDec());
867:       assertFalse(node1.isTypeOf());
868:       assertFalse(node1.isReturn());
869:       assertFalse(node1.isWhile());
870:       assertFalse(node1.hasChildren());
871:       assertFalse(node1.isArrayLit());
872:       assertFalse(node1.isEmpty());
873:       assertFalse(node1.isTrue());
874:       assertFalse(node1.isDebugger());
875:       assertFalse(node1.isGetterDef());
876:       assertFalse(node1.isDelProp());
877:       assertFalse(node1.isVoid());
878:       assertFalse(node1.isIf());
879:       assertFalse(node1.isNE());
880:       assertEquals(0, node1.getChildCount());
881:       assertFalse(node1.isIn());
882:       assertFalse(node1.isSetterDef());
883:       assertFalse(node1.isInc());
884:       assertFalse(node1.isFunction());
885:       assertFalse(node1.isDefaultCase());
886:       assertFalse(node1.isParamList());
887:       assertFalse(node1.isSwitch());
888:       assertFalse(node1.isStringKey());
889:       assertEquals(131072, node1.getSourcePosition());
890:       assertFalse(node1.hasMoreThanOneChild());
891:       assertFalse(node1.isCatch());
892:       assertFalse(node1.isCase());
893:       assertFalse(node1.isWith());
894:       assertEquals(32, node1.getLineno());
895:       assertFalse(node1.isInstanceOf());
896:       assertFalse(node1.isScript());
897:       assertFalse(node1.isThis());
898:       assertFalse(node1.isRegExp());
899:       assertFalse(node1.isTry());
900:       assertFalse(node1.isHook());
901:       assertFalse(node1.isBlock());
902:       assertFalse(node1.isFor());
903:       assertEquals((-1), int0);
904:       assertEquals(32, Node.INCRDECR_PROP);
905:       assertEquals(2, Node.POST_FLAG);
906:       assertEquals(12, Node.COLUMN_BITS);
907:       assertEquals(56, Node.CHANGE_TIME);
908:       assertEquals(51, Node.STATIC_SOURCE_FILE);
909:       assertEquals(46, Node.IS_NAMESPACE);
910:       assertEquals(47, Node.IS_DISPATCHER);
911:       assertEquals(29, Node.JSDOC_INFO_PROP);
912:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
913:       assertEquals(1, Node.DECR_FLAG);
914:       assertEquals(57, Node.LAST_PROP);
915:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
916:       assertEquals(15, Node.NO_SIDE_EFFECTS);
917:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
918:       assertEquals(52, Node.LENGTH);
919:       assertEquals(36, Node.QUOTED_PROP);
920:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
921:       assertEquals(57, Node.REFLECTED_OBJECT);
922:       assertEquals(49, Node.DIRECT_EVAL);
923:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
924:       assertEquals(4095, Node.COLUMN_MASK);
925:       assertEquals(37, Node.OPT_ARG_NAME);
926:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
927:       assertEquals(48, Node.DIRECTIVES);
928:       assertEquals(8, Node.FLAG_NO_THROWS);
929:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
930:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
931:       assertEquals(50, Node.FREE_CALL);
932:       assertEquals(55, Node.INFERRED_FUNCTION);
933:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
934:       assertEquals(39, Node.EMPTY_BLOCK);
935:       assertEquals(53, Node.INPUT_ID);
936:       assertEquals(43, Node.IS_CONSTANT_NAME);
937:       assertEquals(54, Node.SLASH_V);
938:       assertEquals(30, Node.VAR_ARGS_NAME);
939:       assertEquals(40, Node.ORIGINALNAME_PROP);
940:       assertEquals(30, Node.VAR_ARGS_NAME);
941:       assertEquals(49, Node.DIRECT_EVAL);
942:       assertEquals(15, Node.NO_SIDE_EFFECTS);
943:       assertEquals(1, Node.DECR_FLAG);
944:       assertEquals(32, Node.INCRDECR_PROP);
945:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
946:       assertEquals(12, Node.COLUMN_BITS);
947:       assertEquals(57, Node.LAST_PROP);
948:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
949:       assertEquals(29, Node.JSDOC_INFO_PROP);
950:       assertEquals(8, Node.FLAG_NO_THROWS);
951:       assertEquals(39, Node.EMPTY_BLOCK);
952:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
953:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
954:       assertEquals(52, Node.LENGTH);
955:       assertEquals(48, Node.DIRECTIVES);
956:       assertEquals(37, Node.OPT_ARG_NAME);
957:       assertEquals(57, Node.REFLECTED_OBJECT);
958:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
959:       assertEquals(56, Node.CHANGE_TIME);
960:       assertEquals(36, Node.QUOTED_PROP);
961:       assertEquals(55, Node.INFERRED_FUNCTION);
962:       assertEquals(4095, Node.COLUMN_MASK);
963:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
964:       assertEquals(53, Node.INPUT_ID);
965:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
966:       assertEquals(50, Node.FREE_CALL);
967:       assertEquals(47, Node.IS_DISPATCHER);
968:       assertEquals(2, Node.POST_FLAG);
969:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
970:       assertEquals(40, Node.ORIGINALNAME_PROP);
971:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
972:       assertEquals(51, Node.STATIC_SOURCE_FILE);
973:       assertEquals(46, Node.IS_NAMESPACE);
974:       assertEquals(54, Node.SLASH_V);
975:       assertEquals(43, Node.IS_CONSTANT_NAME);
976:       
977:       Iterable<Node> iterable0 = node0.children();
978:       assertFalse(node0.equals((Object)node2));
979:       assertFalse(node0.equals((Object)node1));
980:       assertEquals(0, node0.getCharno());
981:       assertFalse(node0.isScript());
982:       assertFalse(node0.isExprResult());
983:       assertFalse(node0.isWith());
984:       assertFalse(node0.isNot());
985:       assertFalse(node0.isCast());
986:       assertFalse(node0.isInstanceOf());
987:       assertFalse(node0.isAnd());
988:       assertFalse(node0.isLabelName());
989:       assertFalse(node0.isGetElem());
990:       assertFalse(node0.isAssignAdd());
991:       assertFalse(node0.isOr());
992:       assertEquals(39, node0.getLineno());
993:       assertFalse(node0.isLabel());
994:       assertFalse(node0.isThrow());
995:       assertFalse(node0.isDo());
996:       assertEquals(159744, node0.getSourcePosition());
997:       assertFalse(node0.isString());
998:       assertFalse(node0.isWhile());
999:       assertFalse(node0.isCall());
1000:       assertFalse(node0.isFalse());
1001:       assertFalse(node0.isContinue());
1002:       assertFalse(node0.isName());
1003:       assertFalse(node0.isBreak());
1004:       assertFalse(node0.isComma());
1005:       assertFalse(node0.isTypeOf());
1006:       assertFalse(node0.isReturn());
1007:       assertFalse(node0.isAssign());
1008:       assertFalse(node0.isDec());
1009:       assertFalse(node0.hasChildren());
1010:       assertFalse(node0.isObjectLit());
1011:       assertTrue(node0.isNumber());
1012:       assertFalse(node0.isGetProp());
1013:       assertFalse(node0.isFunction());
1014:       assertFalse(node0.isRegExp());
1015:       assertFalse(node0.isTrue());
1016:       assertFalse(node0.isVoid());
1017:       assertFalse(node0.isDefaultCase());
1018:       assertFalse(node0.isDebugger());
1019:       assertFalse(node0.isCatch());
1020:       assertFalse(node0.isDelProp());
1021:       assertFalse(node0.isArrayLit());
1022:       assertFalse(node0.isSetterDef());
1023:       assertFalse(node0.isNE());
1024:       assertFalse(node0.isNull());
1025:       assertFalse(node0.isIf());
1026:       assertEquals(0, node0.getChildCount());
1027:       assertFalse(node0.isVar());
1028:       assertFalse(node0.isIn());
1029:       assertFalse(node0.isEmpty());
1030:       assertFalse(node0.isAdd());
1031:       assertFalse(node0.isNew());
1032:       assertFalse(node0.isInc());
1033:       assertFalse(node0.isSwitch());
1034:       assertEquals(39, node0.getType());
1035:       assertFalse(node0.isBlock());
1036:       assertFalse(node0.isHook());
1037:       assertFalse(node0.hasMoreThanOneChild());
1038:       assertFalse(node0.isStringKey());
1039:       assertFalse(node0.isThis());
1040:       assertFalse(node0.isParamList());
1041:       assertFalse(node0.isFor());
1042:       assertFalse(node0.isGetterDef());
1043:       assertFalse(node0.isTry());
1044:       assertFalse(node0.hasOneChild());
1045:       assertFalse(node0.isCase());
1046:       assertFalse(iterable0.contains(node0));
1047:       assertNotNull(iterable0);
1048:       assertEquals(32, Node.INCRDECR_PROP);
1049:       assertEquals(2, Node.POST_FLAG);
1050:       assertEquals(12, Node.COLUMN_BITS);
1051:       assertEquals(56, Node.CHANGE_TIME);
1052:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1053:       assertEquals(46, Node.IS_NAMESPACE);
1054:       assertEquals(47, Node.IS_DISPATCHER);
1055:       assertEquals(29, Node.JSDOC_INFO_PROP);
1056:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1057:       assertEquals(1, Node.DECR_FLAG);
1058:       assertEquals(57, Node.LAST_PROP);
1059:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1060:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1061:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1062:       assertEquals(52, Node.LENGTH);
1063:       assertEquals(36, Node.QUOTED_PROP);
1064:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1065:       assertEquals(57, Node.REFLECTED_OBJECT);
1066:       assertEquals(49, Node.DIRECT_EVAL);
1067:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1068:       assertEquals(4095, Node.COLUMN_MASK);
1069:       assertEquals(37, Node.OPT_ARG_NAME);
1070:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1071:       assertEquals(48, Node.DIRECTIVES);
1072:       assertEquals(8, Node.FLAG_NO_THROWS);
1073:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1074:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1075:       assertEquals(50, Node.FREE_CALL);
1076:       assertEquals(55, Node.INFERRED_FUNCTION);
1077:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1078:       assertEquals(39, Node.EMPTY_BLOCK);
1079:       assertEquals(53, Node.INPUT_ID);
1080:       assertEquals(43, Node.IS_CONSTANT_NAME);
1081:       assertEquals(54, Node.SLASH_V);
1082:       assertEquals(30, Node.VAR_ARGS_NAME);
1083:       assertEquals(40, Node.ORIGINALNAME_PROP);
1084:       
1085:       boolean boolean1 = node2.isIn();
1086:       assertFalse(node2.equals((Object)node0));
1087:       assertFalse(node2.equals((Object)node1));
1088:       assertTrue(boolean1 == boolean0);
1089:       assertNotSame(node2, node1);
1090:       assertEquals((-1), node2.getLineno());
1091:       assertFalse(node2.isReturn());
1092:       assertFalse(node2.isOr());
1093:       assertFalse(node2.isLabel());
1094:       assertFalse(node2.hasMoreThanOneChild());
1095:       assertFalse(node2.isTypeOf());
1096:       assertFalse(node2.isNumber());
1097:       assertFalse(node2.isContinue());
1098:       assertFalse(node2.isLabelName());
1099:       assertEquals((-1), node2.getSourcePosition());
1100:       assertFalse(node2.isGetElem());
1101:       assertFalse(node2.hasOneChild());
1102:       assertFalse(node2.isBlock());
1103:       assertFalse(node2.isCall());
1104:       assertFalse(node2.isExprResult());
1105:       assertFalse(node2.isScript());
1106:       assertFalse(node2.isWith());
1107:       assertFalse(node2.isWhile());
1108:       assertFalse(node2.isAssign());
1109:       assertFalse(node2.isDec());
1110:       assertFalse(node2.hasChildren());
1111:       assertEquals(46, node2.getType());
1112:       assertEquals(0, node2.getChildCount());
1113:       assertFalse(node2.isComma());
1114:       assertFalse(node2.isNull());
1115:       assertFalse(node2.isBreak());
1116:       assertFalse(node2.isTrue());
1117:       assertFalse(node2.isParamList());
1118:       assertFalse(node2.isVoid());
1119:       assertFalse(node2.isStringKey());
1120:       assertFalse(node2.isName());
1121:       assertFalse(node2.isAdd());
1122:       assertFalse(node2.isNew());
1123:       assertFalse(node2.isArrayLit());
1124:       assertFalse(node2.isDo());
1125:       assertFalse(node2.isEmpty());
1126:       assertFalse(node2.isVar());
1127:       assertFalse(node2.isAssignAdd());
1128:       assertFalse(node2.isDefaultCase());
1129:       assertFalse(node2.isIn());
1130:       assertFalse(node2.isGetterDef());
1131:       assertFalse(node2.isDelProp());
1132:       assertFalse(node2.isSwitch());
1133:       assertFalse(node2.isNE());
1134:       assertFalse(node2.isIf());
1135:       assertFalse(node2.isTry());
1136:       assertFalse(node2.isHook());
1137:       assertEquals((-1), node2.getCharno());
1138:       assertFalse(node2.isDebugger());
1139:       assertFalse(node2.isRegExp());
1140:       assertFalse(node2.isString());
1141:       assertFalse(node2.isFor());
1142:       assertFalse(node2.isCase());
1143:       assertFalse(node2.isThis());
1144:       assertFalse(node2.isGetProp());
1145:       assertFalse(node2.isSetterDef());
1146:       assertFalse(node2.isCatch());
1147:       assertFalse(node2.isObjectLit());
1148:       assertFalse(node2.isInstanceOf());
1149:       assertFalse(node2.isNot());
1150:       assertFalse(node2.isAnd());
1151:       assertFalse(node2.isInc());
1152:       assertFalse(node2.isFunction());
1153:       assertFalse(node2.isCast());
1154:       assertFalse(node2.isFalse());
1155:       assertFalse(node2.isThrow());
1156:       assertFalse(boolean1);
1157:       assertEquals(40, Node.ORIGINALNAME_PROP);
1158:       assertEquals(57, Node.REFLECTED_OBJECT);
1159:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1160:       assertEquals(52, Node.LENGTH);
1161:       assertEquals(50, Node.FREE_CALL);
1162:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1163:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1164:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1165:       assertEquals(39, Node.EMPTY_BLOCK);
1166:       assertEquals(57, Node.LAST_PROP);
1167:       assertEquals(1, Node.DECR_FLAG);
1168:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1169:       assertEquals(46, Node.IS_NAMESPACE);
1170:       assertEquals(30, Node.VAR_ARGS_NAME);
1171:       assertEquals(43, Node.IS_CONSTANT_NAME);
1172:       assertEquals(54, Node.SLASH_V);
1173:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1174:       assertEquals(29, Node.JSDOC_INFO_PROP);
1175:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1176:       assertEquals(2, Node.POST_FLAG);
1177:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1178:       assertEquals(47, Node.IS_DISPATCHER);
1179:       assertEquals(53, Node.INPUT_ID);
1180:       assertEquals(32, Node.INCRDECR_PROP);
1181:       assertEquals(55, Node.INFERRED_FUNCTION);
1182:       assertEquals(4095, Node.COLUMN_MASK);
1183:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1184:       assertEquals(12, Node.COLUMN_BITS);
1185:       assertEquals(8, Node.FLAG_NO_THROWS);
1186:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1187:       assertEquals(37, Node.OPT_ARG_NAME);
1188:       assertEquals(56, Node.CHANGE_TIME);
1189:       assertEquals(36, Node.QUOTED_PROP);
1190:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1191:       assertEquals(49, Node.DIRECT_EVAL);
1192:       assertEquals(48, Node.DIRECTIVES);
1193:       
1194:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
1195:       assertFalse(node0.equals((Object)node2));
1196:       assertFalse(node0.equals((Object)node1));
1197:       assertFalse(node2.equals((Object)node0));
1198:       assertFalse(node2.equals((Object)node1));
1199:       assertNotSame(node2, node1);
1200:       assertEquals(0, node0.getCharno());
1201:       assertFalse(node0.isScript());
1202:       assertFalse(node0.isExprResult());
1203:       assertFalse(node0.isWith());
1204:       assertFalse(node0.isNot());
1205:       assertFalse(node0.isCast());
1206:       assertFalse(node0.isInstanceOf());
1207:       assertFalse(node0.isAnd());
1208:       assertFalse(node0.isLabelName());
1209:       assertFalse(node0.isGetElem());
1210:       assertFalse(node0.isAssignAdd());
1211:       assertFalse(node0.isOr());
1212:       assertEquals(39, node0.getLineno());
1213:       assertFalse(node0.isLabel());
1214:       assertFalse(node0.isThrow());
1215:       assertFalse(node0.isDo());
1216:       assertEquals(159744, node0.getSourcePosition());
1217:       assertFalse(node0.isString());
1218:       assertFalse(node0.isWhile());
1219:       assertFalse(node0.isCall());
1220:       assertFalse(node0.isFalse());
1221:       assertFalse(node0.isContinue());
1222:       assertFalse(node0.isName());
1223:       assertFalse(node0.isBreak());
1224:       assertFalse(node0.isComma());
1225:       assertFalse(node0.isTypeOf());
1226:       assertFalse(node0.isReturn());
1227:       assertFalse(node0.isAssign());
1228:       assertFalse(node0.isDec());
1229:       assertFalse(node0.hasChildren());
1230:       assertFalse(node0.isObjectLit());
1231:       assertTrue(node0.isNumber());
1232:       assertFalse(node0.isGetProp());
1233:       assertFalse(node0.isFunction());
1234:       assertFalse(node0.isRegExp());
1235:       assertFalse(node0.isTrue());
1236:       assertFalse(node0.isVoid());
1237:       assertFalse(node0.isDefaultCase());
1238:       assertFalse(node0.isDebugger());
1239:       assertFalse(node0.isCatch());
1240:       assertFalse(node0.isDelProp());
1241:       assertFalse(node0.isArrayLit());
1242:       assertFalse(node0.isSetterDef());
1243:       assertFalse(node0.isNE());
1244:       assertFalse(node0.isNull());
1245:       assertFalse(node0.isIf());
1246:       assertEquals(0, node0.getChildCount());
1247:       assertFalse(node0.isVar());
1248:       assertFalse(node0.isIn());
1249:       assertFalse(node0.isEmpty());
1250:       assertFalse(node0.isAdd());
1251:       assertFalse(node0.isNew());
1252:       assertFalse(node0.isInc());
1253:       assertFalse(node0.isSwitch());
1254:       assertEquals(39, node0.getType());
1255:       assertFalse(node0.isBlock());
1256:       assertFalse(node0.isHook());
1257:       assertFalse(node0.hasMoreThanOneChild());
1258:       assertFalse(node0.isStringKey());
1259:       assertFalse(node0.isThis());
1260:       assertFalse(node0.isParamList());
1261:       assertFalse(node0.isFor());
1262:       assertFalse(node0.isGetterDef());
1263:       assertFalse(node0.isTry());
1264:       assertFalse(node0.hasOneChild());
1265:       assertFalse(node0.isCase());
1266:       assertEquals((-1), node2.getLineno());
1267:       assertFalse(node2.isReturn());
1268:       assertFalse(node2.isOr());
1269:       assertFalse(node2.isLabel());
1270:       assertFalse(node2.hasMoreThanOneChild());
1271:       assertFalse(node2.isTypeOf());
1272:       assertFalse(node2.isNumber());
1273:       assertFalse(node2.isContinue());
1274:       assertFalse(node2.isLabelName());
1275:       assertEquals((-1), node2.getSourcePosition());
1276:       assertFalse(node2.isGetElem());
1277:       assertFalse(node2.hasOneChild());
1278:       assertFalse(node2.isBlock());
1279:       assertFalse(node2.isCall());
1280:       assertFalse(node2.isExprResult());
1281:       assertFalse(node2.isScript());
1282:       assertFalse(node2.isWith());
1283:       assertFalse(node2.isWhile());
1284:       assertFalse(node2.isAssign());
1285:       assertFalse(node2.isDec());
1286:       assertFalse(node2.hasChildren());
1287:       assertEquals(46, node2.getType());
1288:       assertEquals(0, node2.getChildCount());
1289:       assertFalse(node2.isComma());
1290:       assertFalse(node2.isNull());
1291:       assertFalse(node2.isBreak());
1292:       assertFalse(node2.isTrue());
1293:       assertFalse(node2.isParamList());
1294:       assertFalse(node2.isVoid());
1295:       assertFalse(node2.isStringKey());
1296:       assertFalse(node2.isName());
1297:       assertFalse(node2.isAdd());
1298:       assertFalse(node2.isNew());
1299:       assertFalse(node2.isArrayLit());
1300:       assertFalse(node2.isDo());
1301:       assertFalse(node2.isEmpty());
1302:       assertFalse(node2.isVar());
1303:       assertFalse(node2.isAssignAdd());
1304:       assertFalse(node2.isDefaultCase());
1305:       assertFalse(node2.isIn());
1306:       assertFalse(node2.isGetterDef());
1307:       assertFalse(node2.isDelProp());
1308:       assertFalse(node2.isSwitch());
1309:       assertFalse(node2.isNE());
1310:       assertFalse(node2.isIf());
1311:       assertFalse(node2.isTry());
1312:       assertFalse(node2.isHook());
1313:       assertEquals((-1), node2.getCharno());
1314:       assertFalse(node2.isDebugger());
1315:       assertFalse(node2.isRegExp());
1316:       assertFalse(node2.isString());
1317:       assertFalse(node2.isFor());
1318:       assertFalse(node2.isCase());
1319:       assertFalse(node2.isThis());
1320:       assertFalse(node2.isGetProp());
1321:       assertFalse(node2.isSetterDef());
1322:       assertFalse(node2.isCatch());
1323:       assertFalse(node2.isObjectLit());
1324:       assertFalse(node2.isInstanceOf());
1325:       assertFalse(node2.isNot());
1326:       assertFalse(node2.isAnd());
1327:       assertFalse(node2.isInc());
1328:       assertFalse(node2.isFunction());
1329:       assertFalse(node2.isCast());
1330:       assertFalse(node2.isFalse());
1331:       assertFalse(node2.isThrow());
1332:       assertNotNull(node_NodeMismatch0);
1333:       assertEquals(32, Node.INCRDECR_PROP);
1334:       assertEquals(2, Node.POST_FLAG);
1335:       assertEquals(12, Node.COLUMN_BITS);
1336:       assertEquals(56, Node.CHANGE_TIME);
1337:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1338:       assertEquals(46, Node.IS_NAMESPACE);
1339:       assertEquals(47, Node.IS_DISPATCHER);
1340:       assertEquals(29, Node.JSDOC_INFO_PROP);
1341:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1342:       assertEquals(1, Node.DECR_FLAG);
1343:       assertEquals(57, Node.LAST_PROP);
1344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1346:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1347:       assertEquals(52, Node.LENGTH);
1348:       assertEquals(36, Node.QUOTED_PROP);
1349:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1350:       assertEquals(57, Node.REFLECTED_OBJECT);
1351:       assertEquals(49, Node.DIRECT_EVAL);
1352:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1353:       assertEquals(4095, Node.COLUMN_MASK);
1354:       assertEquals(37, Node.OPT_ARG_NAME);
1355:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1356:       assertEquals(48, Node.DIRECTIVES);
1357:       assertEquals(8, Node.FLAG_NO_THROWS);
1358:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1359:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1360:       assertEquals(50, Node.FREE_CALL);
1361:       assertEquals(55, Node.INFERRED_FUNCTION);
1362:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1363:       assertEquals(39, Node.EMPTY_BLOCK);
1364:       assertEquals(53, Node.INPUT_ID);
1365:       assertEquals(43, Node.IS_CONSTANT_NAME);
1366:       assertEquals(54, Node.SLASH_V);
1367:       assertEquals(30, Node.VAR_ARGS_NAME);
1368:       assertEquals(40, Node.ORIGINALNAME_PROP);
1369:       assertEquals(40, Node.ORIGINALNAME_PROP);
1370:       assertEquals(57, Node.REFLECTED_OBJECT);
1371:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1372:       assertEquals(52, Node.LENGTH);
1373:       assertEquals(50, Node.FREE_CALL);
1374:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1375:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1376:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1377:       assertEquals(39, Node.EMPTY_BLOCK);
1378:       assertEquals(57, Node.LAST_PROP);
1379:       assertEquals(1, Node.DECR_FLAG);
1380:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1381:       assertEquals(46, Node.IS_NAMESPACE);
1382:       assertEquals(30, Node.VAR_ARGS_NAME);
1383:       assertEquals(43, Node.IS_CONSTANT_NAME);
1384:       assertEquals(54, Node.SLASH_V);
1385:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1386:       assertEquals(29, Node.JSDOC_INFO_PROP);
1387:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1388:       assertEquals(2, Node.POST_FLAG);
1389:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1390:       assertEquals(47, Node.IS_DISPATCHER);
1391:       assertEquals(53, Node.INPUT_ID);
1392:       assertEquals(32, Node.INCRDECR_PROP);
1393:       assertEquals(55, Node.INFERRED_FUNCTION);
1394:       assertEquals(4095, Node.COLUMN_MASK);
1395:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1396:       assertEquals(12, Node.COLUMN_BITS);
1397:       assertEquals(8, Node.FLAG_NO_THROWS);
1398:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1399:       assertEquals(37, Node.OPT_ARG_NAME);
1400:       assertEquals(56, Node.CHANGE_TIME);
1401:       assertEquals(36, Node.QUOTED_PROP);
1402:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1403:       assertEquals(49, Node.DIRECT_EVAL);
1404:       assertEquals(48, Node.DIRECTIVES);
1405:       
1406:       Node node3 = new Node(39, node1, node2);
1407:       assertFalse(node1.equals((Object)node0));
1408:       assertFalse(node1.equals((Object)node2));
1409:       assertFalse(node2.equals((Object)node0));
1410:       assertFalse(node2.equals((Object)node1));
1411:       assertFalse(node3.equals((Object)node2));
1412:       assertFalse(node3.equals((Object)node1));
1413:       assertFalse(node3.equals((Object)node0));
1414:       assertFalse(node1.hasOneChild());
1415:       assertFalse(node1.isLabelName());
1416:       assertFalse(node1.isAssign());
1417:       assertEquals((-1122), node1.getType());
1418:       assertFalse(node1.isGetElem());
1419:       assertFalse(node1.isCast());
1420:       assertFalse(node1.isExprResult());
1421:       assertEquals(0, node1.getCharno());
1422:       assertFalse(node1.isNumber());
1423:       assertFalse(node1.isOr());
1424:       assertFalse(node1.isAnd());
1425:       assertFalse(node1.isContinue());
1426:       assertFalse(node1.isDo());
1427:       assertFalse(node1.isNew());
1428:       assertFalse(node1.isLabel());
1429:       assertFalse(node1.isAssignAdd());
1430:       assertFalse(node1.isThrow());
1431:       assertFalse(node1.isVar());
1432:       assertFalse(node1.isCall());
1433:       assertFalse(node1.isFalse());
1434:       assertFalse(node1.isName());
1435:       assertFalse(node1.isBreak());
1436:       assertFalse(node1.isAdd());
1437:       assertFalse(node1.isNull());
1438:       assertFalse(node1.isNot());
1439:       assertFalse(node1.isObjectLit());
1440:       assertFalse(node1.isString());
1441:       assertFalse(node1.isComma());
1442:       assertFalse(node1.isGetProp());
1443:       assertFalse(node1.isDec());
1444:       assertFalse(node1.isTypeOf());
1445:       assertFalse(node1.isReturn());
1446:       assertFalse(node1.isWhile());
1447:       assertFalse(node1.hasChildren());
1448:       assertFalse(node1.isArrayLit());
1449:       assertFalse(node1.isEmpty());
1450:       assertFalse(node1.isTrue());
1451:       assertFalse(node1.isDebugger());
1452:       assertFalse(node1.isGetterDef());
1453:       assertFalse(node1.isDelProp());
1454:       assertFalse(node1.isVoid());
1455:       assertFalse(node1.isIf());
1456:       assertFalse(node1.isNE());
1457:       assertEquals(0, node1.getChildCount());
1458:       assertFalse(node1.isIn());
1459:       assertFalse(node1.isSetterDef());
1460:       assertFalse(node1.isInc());
1461:       assertFalse(node1.isFunction());
1462:       assertFalse(node1.isDefaultCase());
1463:       assertFalse(node1.isParamList());
1464:       assertFalse(node1.isSwitch());
1465:       assertFalse(node1.isStringKey());
1466:       assertEquals(131072, node1.getSourcePosition());
1467:       assertFalse(node1.hasMoreThanOneChild());
1468:       assertFalse(node1.isCatch());
1469:       assertFalse(node1.isCase());
1470:       assertFalse(node1.isWith());
1471:       assertEquals(32, node1.getLineno());
1472:       assertFalse(node1.isInstanceOf());
1473:       assertFalse(node1.isScript());
1474:       assertFalse(node1.isThis());
1475:       assertFalse(node1.isRegExp());
1476:       assertFalse(node1.isTry());
1477:       assertFalse(node1.isHook());
1478:       assertFalse(node1.isBlock());
1479:       assertFalse(node1.isFor());
1480:       assertEquals((-1), node2.getLineno());
1481:       assertFalse(node2.isReturn());
1482:       assertFalse(node2.isOr());
1483:       assertFalse(node2.isLabel());
1484:       assertFalse(node2.hasMoreThanOneChild());
1485:       assertFalse(node2.isTypeOf());
1486:       assertFalse(node2.isNumber());
1487:       assertFalse(node2.isContinue());
1488:       assertFalse(node2.isLabelName());
1489:       assertEquals((-1), node2.getSourcePosition());
1490:       assertFalse(node2.isGetElem());
1491:       assertFalse(node2.hasOneChild());
1492:       assertFalse(node2.isBlock());
1493:       assertFalse(node2.isCall());
1494:       assertFalse(node2.isExprResult());
1495:       assertFalse(node2.isScript());
1496:       assertFalse(node2.isWith());
1497:       assertFalse(node2.isWhile());
1498:       assertFalse(node2.isAssign());
1499:       assertFalse(node2.isDec());
1500:       assertFalse(node2.hasChildren());
1501:       assertEquals(46, node2.getType());
1502:       assertEquals(0, node2.getChildCount());
1503:       assertFalse(node2.isComma());
1504:       assertFalse(node2.isNull());
1505:       assertFalse(node2.isBreak());
1506:       assertFalse(node2.isTrue());
1507:       assertFalse(node2.isParamList());
1508:       assertFalse(node2.isVoid());
1509:       assertFalse(node2.isStringKey());
1510:       assertFalse(node2.isName());
1511:       assertFalse(node2.isAdd());
1512:       assertFalse(node2.isNew());
1513:       assertFalse(node2.isArrayLit());
1514:       assertFalse(node2.isDo());
1515:       assertFalse(node2.isEmpty());
1516:       assertFalse(node2.isVar());
1517:       assertFalse(node2.isAssignAdd());
1518:       assertFalse(node2.isDefaultCase());
1519:       assertFalse(node2.isIn());
1520:       assertFalse(node2.isGetterDef());
1521:       assertFalse(node2.isDelProp());
1522:       assertFalse(node2.isSwitch());
1523:       assertFalse(node2.isNE());
1524:       assertFalse(node2.isIf());
1525:       assertFalse(node2.isTry());
1526:       assertFalse(node2.isHook());
1527:       assertEquals((-1), node2.getCharno());
1528:       assertFalse(node2.isDebugger());
1529:       assertFalse(node2.isRegExp());
1530:       assertFalse(node2.isString());
1531:       assertFalse(node2.isFor());
1532:       assertFalse(node2.isCase());
1533:       assertFalse(node2.isThis());
1534:       assertFalse(node2.isGetProp());
1535:       assertFalse(node2.isSetterDef());
1536:       assertFalse(node2.isCatch());
1537:       assertFalse(node2.isObjectLit());
1538:       assertFalse(node2.isInstanceOf());
1539:       assertFalse(node2.isNot());
1540:       assertFalse(node2.isAnd());
1541:       assertFalse(node2.isInc());
1542:       assertFalse(node2.isFunction());
1543:       assertFalse(node2.isCast());
1544:       assertFalse(node2.isFalse());
1545:       assertFalse(node2.isThrow());
1546:       assertEquals((-1), node3.getCharno());
1547:       assertFalse(node3.isSwitch());
1548:       assertFalse(node3.isHook());
1549:       assertFalse(node3.isFalse());
1550:       assertTrue(node3.hasMoreThanOneChild());
1551:       assertFalse(node3.isBreak());
1552:       assertTrue(node3.hasChildren());
1553:       assertFalse(node3.isGetProp());
1554:       assertFalse(node3.isComma());
1555:       assertFalse(node3.isGetterDef());
1556:       assertFalse(node3.isFor());
1557:       assertFalse(node3.isThis());
1558:       assertFalse(node3.isCase());
1559:       assertFalse(node3.isNot());
1560:       assertFalse(node3.isObjectLit());
1561:       assertTrue(node3.isNumber());
1562:       assertFalse(node3.isString());
1563:       assertFalse(node3.isScript());
1564:       assertFalse(node3.isDebugger());
1565:       assertFalse(node3.isTry());
1566:       assertFalse(node3.isRegExp());
1567:       assertFalse(node3.isFunction());
1568:       assertFalse(node3.isAnd());
1569:       assertFalse(node3.isWith());
1570:       assertFalse(node3.isInstanceOf());
1571:       assertFalse(node3.isCast());
1572:       assertFalse(node3.isCatch());
1573:       assertFalse(node3.isIf());
1574:       assertEquals(2, node3.getChildCount());
1575:       assertFalse(node3.isNE());
1576:       assertFalse(node3.isThrow());
1577:       assertFalse(node3.isIn());
1578:       assertFalse(node3.isSetterDef());
1579:       assertFalse(node3.isInc());
1580:       assertFalse(node3.isNew());
1581:       assertFalse(node3.isWhile());
1582:       assertEquals(39, node3.getType());
1583:       assertFalse(node3.isVar());
1584:       assertFalse(node3.isBlock());
1585:       assertFalse(node3.isContinue());
1586:       assertFalse(node3.isStringKey());
1587:       assertFalse(node3.isName());
1588:       assertEquals((-1), node3.getLineno());
1589:       assertFalse(node3.isCall());
1590:       assertFalse(node3.isParamList());
1591:       assertFalse(node3.isTypeOf());
1592:       assertEquals((-1), node3.getSourcePosition());
1593:       assertFalse(node3.isDec());
1594:       assertFalse(node3.isReturn());
1595:       assertFalse(node3.hasOneChild());
1596:       assertFalse(node3.isVoid());
1597:       assertFalse(node3.isDefaultCase());
1598:       assertFalse(node3.isTrue());
1599:       assertFalse(node3.isLabelName());
1600:       assertFalse(node3.isAssign());
1601:       assertFalse(node3.isDelProp());
1602:       assertFalse(node3.isArrayLit());
1603:       assertFalse(node3.isExprResult());
1604:       assertFalse(node3.isGetElem());
1605:       assertFalse(node3.isOr());
1606:       assertFalse(node3.isAssignAdd());
1607:       assertFalse(node3.isLabel());
1608:       assertFalse(node3.isNull());
1609:       assertFalse(node3.isDo());
1610:       assertFalse(node3.isEmpty());
1611:       assertFalse(node3.isAdd());
1612:       assertNotNull(node3);
1613:       assertEquals(30, Node.VAR_ARGS_NAME);
1614:       assertEquals(49, Node.DIRECT_EVAL);
1615:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1616:       assertEquals(1, Node.DECR_FLAG);
1617:       assertEquals(32, Node.INCRDECR_PROP);
1618:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1619:       assertEquals(12, Node.COLUMN_BITS);
1620:       assertEquals(57, Node.LAST_PROP);
1621:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1622:       assertEquals(29, Node.JSDOC_INFO_PROP);
1623:       assertEquals(8, Node.FLAG_NO_THROWS);
1624:       assertEquals(39, Node.EMPTY_BLOCK);
1625:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1626:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1627:       assertEquals(52, Node.LENGTH);
1628:       assertEquals(48, Node.DIRECTIVES);
1629:       assertEquals(37, Node.OPT_ARG_NAME);
1630:       assertEquals(57, Node.REFLECTED_OBJECT);
1631:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1632:       assertEquals(56, Node.CHANGE_TIME);
1633:       assertEquals(36, Node.QUOTED_PROP);
1634:       assertEquals(55, Node.INFERRED_FUNCTION);
1635:       assertEquals(4095, Node.COLUMN_MASK);
1636:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1637:       assertEquals(53, Node.INPUT_ID);
1638:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1639:       assertEquals(50, Node.FREE_CALL);
1640:       assertEquals(47, Node.IS_DISPATCHER);
1641:       assertEquals(2, Node.POST_FLAG);
1642:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1643:       assertEquals(40, Node.ORIGINALNAME_PROP);
1644:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1645:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1646:       assertEquals(46, Node.IS_NAMESPACE);
1647:       assertEquals(54, Node.SLASH_V);
1648:       assertEquals(43, Node.IS_CONSTANT_NAME);
1649:       assertEquals(40, Node.ORIGINALNAME_PROP);
1650:       assertEquals(57, Node.REFLECTED_OBJECT);
1651:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1652:       assertEquals(52, Node.LENGTH);
1653:       assertEquals(50, Node.FREE_CALL);
1654:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1655:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1656:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1657:       assertEquals(39, Node.EMPTY_BLOCK);
1658:       assertEquals(57, Node.LAST_PROP);
1659:       assertEquals(1, Node.DECR_FLAG);
1660:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1661:       assertEquals(46, Node.IS_NAMESPACE);
1662:       assertEquals(30, Node.VAR_ARGS_NAME);
1663:       assertEquals(43, Node.IS_CONSTANT_NAME);
1664:       assertEquals(54, Node.SLASH_V);
1665:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1666:       assertEquals(29, Node.JSDOC_INFO_PROP);
1667:       
1668:       node3.addChildBefore(node0, node2);
1669:       assertFalse(node0.equals((Object)node2));
1670:       assertFalse(node0.equals((Object)node1));
1671:       assertFalse(node0.equals((Object)node3));
1672:       assertFalse(node1.equals((Object)node0));
1673:       assertFalse(node1.equals((Object)node3));
1674:       assertFalse(node1.equals((Object)node2));
1675:       assertFalse(node2.equals((Object)node0));
1676:       assertFalse(node2.equals((Object)node3));
1677:       assertFalse(node2.equals((Object)node1));
1678:       assertFalse(node3.equals((Object)node2));
1679:       assertFalse(node3.equals((Object)node1));
1680:       assertFalse(node3.equals((Object)node0));
1681:       assertNotSame(node1, node2);
1682:       assertNotSame(node2, node1);
1683:       assertEquals(0, node0.getCharno());
1684:       assertFalse(node0.isScript());
1685:       assertFalse(node0.isExprResult());
1686:       assertFalse(node0.isWith());
1687:       assertFalse(node0.isNot());
1688:       assertFalse(node0.isCast());
1689:       assertFalse(node0.isInstanceOf());
1690:       assertFalse(node0.isAnd());
1691:       assertFalse(node0.isLabelName());
1692:       assertFalse(node0.isGetElem());
1693:       assertFalse(node0.isAssignAdd());
1694:       assertFalse(node0.isOr());
1695:       assertEquals(39, node0.getLineno());
1696:       assertFalse(node0.isLabel());
1697:       assertFalse(node0.isThrow());
1698:       assertFalse(node0.isDo());
1699:       assertEquals(159744, node0.getSourcePosition());
1700:       assertFalse(node0.isString());
1701:       assertFalse(node0.isWhile());
1702:       assertFalse(node0.isCall());
1703:       assertFalse(node0.isFalse());
1704:       assertFalse(node0.isContinue());
1705:       assertFalse(node0.isName());
1706:       assertFalse(node0.isBreak());
1707:       assertFalse(node0.isComma());
1708:       assertFalse(node0.isTypeOf());
1709:       assertFalse(node0.isReturn());
1710:       assertFalse(node0.isAssign());
1711:       assertFalse(node0.isDec());
1712:       assertFalse(node0.hasChildren());
1713:       assertFalse(node0.isObjectLit());
1714:       assertTrue(node0.isNumber());
1715:       assertFalse(node0.isGetProp());
1716:       assertFalse(node0.isFunction());
1717:       assertFalse(node0.isRegExp());
1718:       assertFalse(node0.isTrue());
1719:       assertFalse(node0.isVoid());
1720:       assertFalse(node0.isDefaultCase());
1721:       assertFalse(node0.isDebugger());
1722:       assertFalse(node0.isCatch());
1723:       assertFalse(node0.isDelProp());
1724:       assertFalse(node0.isArrayLit());
1725:       assertFalse(node0.isSetterDef());
1726:       assertFalse(node0.isNE());
1727:       assertFalse(node0.isNull());
1728:       assertFalse(node0.isIf());
1729:       assertEquals(0, node0.getChildCount());
1730:       assertFalse(node0.isVar());
1731:       assertFalse(node0.isIn());
1732:       assertFalse(node0.isEmpty());
1733:       assertFalse(node0.isAdd());
1734:       assertFalse(node0.isNew());
1735:       assertFalse(node0.isInc());
1736:       assertFalse(node0.isSwitch());
1737:       assertEquals(39, node0.getType());
1738:       assertFalse(node0.isBlock());
1739:       assertFalse(node0.isHook());
1740:       assertFalse(node0.hasMoreThanOneChild());
1741:       assertFalse(node0.isStringKey());
1742:       assertFalse(node0.isThis());
1743:       assertFalse(node0.isParamList());
1744:       assertFalse(node0.isFor());
1745:       assertFalse(node0.isGetterDef());
1746:       assertFalse(node0.isTry());
1747:       assertFalse(node0.hasOneChild());
1748:       assertFalse(node0.isCase());
1749:       assertFalse(node1.hasOneChild());
1750:       assertFalse(node1.isLabelName());
1751:       assertFalse(node1.isAssign());
1752:       assertEquals((-1122), node1.getType());
1753:       assertFalse(node1.isGetElem());
1754:       assertFalse(node1.isCast());
1755:       assertFalse(node1.isExprResult());
1756:       assertEquals(0, node1.getCharno());
1757:       assertFalse(node1.isNumber());
1758:       assertFalse(node1.isOr());
1759:       assertFalse(node1.isAnd());
1760:       assertFalse(node1.isContinue());
1761:       assertFalse(node1.isDo());
1762:       assertFalse(node1.isNew());
1763:       assertFalse(node1.isLabel());
1764:       assertFalse(node1.isAssignAdd());
1765:       assertFalse(node1.isThrow());
1766:       assertFalse(node1.isVar());
1767:       assertFalse(node1.isCall());
1768:       assertFalse(node1.isFalse());
1769:       assertFalse(node1.isName());
1770:       assertFalse(node1.isBreak());
1771:       assertFalse(node1.isAdd());
1772:       assertFalse(node1.isNull());
1773:       assertFalse(node1.isNot());
1774:       assertFalse(node1.isObjectLit());
1775:       assertFalse(node1.isString());
1776:       assertFalse(node1.isComma());
1777:       assertFalse(node1.isGetProp());
1778:       assertFalse(node1.isDec());
1779:       assertFalse(node1.isTypeOf());
1780:       assertFalse(node1.isReturn());
1781:       assertFalse(node1.isWhile());
1782:       assertFalse(node1.hasChildren());
1783:       assertFalse(node1.isArrayLit());
1784:       assertFalse(node1.isEmpty());
1785:       assertFalse(node1.isTrue());
1786:       assertFalse(node1.isDebugger());
1787:       assertFalse(node1.isGetterDef());
1788:       assertFalse(node1.isDelProp());
1789:       assertFalse(node1.isVoid());
1790:       assertFalse(node1.isIf());
1791:       assertFalse(node1.isNE());
1792:       assertEquals(0, node1.getChildCount());
1793:       assertFalse(node1.isIn());
1794:       assertFalse(node1.isSetterDef());
1795:       assertFalse(node1.isInc());
1796:       assertFalse(node1.isFunction());
1797:       assertFalse(node1.isDefaultCase());
1798:       assertFalse(node1.isParamList());
1799:       assertFalse(node1.isSwitch());
1800:       assertFalse(node1.isStringKey());
1801:       assertEquals(131072, node1.getSourcePosition());
1802:       assertFalse(node1.hasMoreThanOneChild());
1803:       assertFalse(node1.isCatch());
1804:       assertFalse(node1.isCase());
1805:       assertFalse(node1.isWith());
1806:       assertEquals(32, node1.getLineno());
1807:       assertFalse(node1.isInstanceOf());
1808:       assertFalse(node1.isScript());
1809:       assertFalse(node1.isThis());
1810:       assertFalse(node1.isRegExp());
1811:       assertFalse(node1.isTry());
1812:       assertFalse(node1.isHook());
1813:       assertFalse(node1.isBlock());
1814:       assertFalse(node1.isFor());
1815:       assertEquals((-1), node2.getLineno());
1816:       assertFalse(node2.isReturn());
1817:       assertFalse(node2.isOr());
1818:       assertFalse(node2.isLabel());
1819:       assertFalse(node2.hasMoreThanOneChild());
1820:       assertFalse(node2.isTypeOf());
1821:       assertFalse(node2.isNumber());
1822:       assertFalse(node2.isContinue());
1823:       assertFalse(node2.isLabelName());
1824:       assertEquals((-1), node2.getSourcePosition());
1825:       assertFalse(node2.isGetElem());
1826:       assertFalse(node2.hasOneChild());
1827:       assertFalse(node2.isBlock());
1828:       assertFalse(node2.isCall());
1829:       assertFalse(node2.isExprResult());
1830:       assertFalse(node2.isScript());
1831:       assertFalse(node2.isWith());
1832:       assertFalse(node2.isWhile());
1833:       assertFalse(node2.isAssign());
1834:       assertFalse(node2.isDec());
1835:       assertFalse(node2.hasChildren());
1836:       assertEquals(46, node2.getType());
1837:       assertEquals(0, node2.getChildCount());
1838:       assertFalse(node2.isComma());
1839:       assertFalse(node2.isNull());
1840:       assertFalse(node2.isBreak());
1841:       assertFalse(node2.isTrue());
1842:       assertFalse(node2.isParamList());
1843:       assertFalse(node2.isVoid());
1844:       assertFalse(node2.isStringKey());
1845:       assertFalse(node2.isName());
1846:       assertFalse(node2.isAdd());
1847:       assertFalse(node2.isNew());
1848:       assertFalse(node2.isArrayLit());
1849:       assertFalse(node2.isDo());
1850:       assertFalse(node2.isEmpty());
1851:       assertFalse(node2.isVar());
1852:       assertFalse(node2.isAssignAdd());
1853:       assertFalse(node2.isDefaultCase());
1854:       assertFalse(node2.isIn());
1855:       assertFalse(node2.isGetterDef());
1856:       assertFalse(node2.isDelProp());
1857:       assertFalse(node2.isSwitch());
1858:       assertFalse(node2.isNE());
1859:       assertFalse(node2.isIf());
1860:       assertFalse(node2.isTry());
1861:       assertFalse(node2.isHook());
1862:       assertEquals((-1), node2.getCharno());
1863:       assertFalse(node2.isDebugger());
1864:       assertFalse(node2.isRegExp());
1865:       assertFalse(node2.isString());
1866:       assertFalse(node2.isFor());
1867:       assertFalse(node2.isCase());
1868:       assertFalse(node2.isThis());
1869:       assertFalse(node2.isGetProp());
1870:       assertFalse(node2.isSetterDef());
1871:       assertFalse(node2.isCatch());
1872:       assertFalse(node2.isObjectLit());
1873:       assertFalse(node2.isInstanceOf());
1874:       assertFalse(node2.isNot());
1875:       assertFalse(node2.isAnd());
1876:       assertFalse(node2.isInc());
1877:       assertFalse(node2.isFunction());
1878:       assertFalse(node2.isCast());
1879:       assertFalse(node2.isFalse());
1880:       assertFalse(node2.isThrow());
1881:       assertEquals((-1), node3.getCharno());
1882:       assertFalse(node3.isSwitch());
1883:       assertFalse(node3.isHook());
1884:       assertFalse(node3.isFalse());
1885:       assertTrue(node3.hasMoreThanOneChild());
1886:       assertFalse(node3.isBreak());
1887:       assertTrue(node3.hasChildren());
1888:       assertFalse(node3.isGetProp());
1889:       assertFalse(node3.isComma());
1890:       assertFalse(node3.isGetterDef());
1891:       assertFalse(node3.isFor());
1892:       assertFalse(node3.isThis());
1893:       assertFalse(node3.isCase());
1894:       assertFalse(node3.isNot());
1895:       assertFalse(node3.isObjectLit());
1896:       assertTrue(node3.isNumber());
1897:       assertFalse(node3.isString());
1898:       assertFalse(node3.isScript());
1899:       assertFalse(node3.isDebugger());
1900:       assertFalse(node3.isTry());
1901:       assertFalse(node3.isRegExp());
1902:       assertFalse(node3.isFunction());
1903:       assertFalse(node3.isAnd());
1904:       assertFalse(node3.isWith());
1905:       assertFalse(node3.isInstanceOf());
1906:       assertFalse(node3.isCast());
1907:       assertFalse(node3.isCatch());
1908:       assertFalse(node3.isIf());
1909:       assertFalse(node3.isNE());
1910:       assertFalse(node3.isThrow());
1911:       assertFalse(node3.isIn());
1912:       assertFalse(node3.isSetterDef());
1913:       assertFalse(node3.isInc());
1914:       assertFalse(node3.isNew());
1915:       assertFalse(node3.isWhile());
1916:       assertEquals(39, node3.getType());
1917:       assertFalse(node3.isVar());
1918:       assertFalse(node3.isBlock());
1919:       assertFalse(node3.isContinue());
1920:       assertFalse(node3.isStringKey());
1921:       assertFalse(node3.isName());
1922:       assertEquals((-1), node3.getLineno());
1923:       assertFalse(node3.isCall());
1924:       assertFalse(node3.isParamList());
1925:       assertFalse(node3.isTypeOf());
1926:       assertEquals((-1), node3.getSourcePosition());
1927:       assertFalse(node3.isDec());
1928:       assertEquals(3, node3.getChildCount());
1929:       assertFalse(node3.isReturn());
1930:       assertFalse(node3.hasOneChild());
1931:       assertFalse(node3.isVoid());
1932:       assertFalse(node3.isDefaultCase());
1933:       assertFalse(node3.isTrue());
1934:       assertFalse(node3.isLabelName());
1935:       assertFalse(node3.isAssign());
1936:       assertFalse(node3.isDelProp());
1937:       assertFalse(node3.isArrayLit());
1938:       assertFalse(node3.isExprResult());
1939:       assertFalse(node3.isGetElem());
1940:       assertFalse(node3.isOr());
1941:       assertFalse(node3.isAssignAdd());
1942:       assertFalse(node3.isLabel());
1943:       assertFalse(node3.isNull());
1944:       assertFalse(node3.isDo());
1945:       assertFalse(node3.isEmpty());
1946:       assertFalse(node3.isAdd());
1947:       
1948:       boolean boolean2 = node1.isUnscopedQualifiedName();
1949:       assertFalse(node1.equals((Object)node0));
1950:       assertFalse(node1.equals((Object)node3));
1951:       assertFalse(node1.equals((Object)node2));
1952:       assertTrue(boolean2 == boolean0);
1953:       assertTrue(boolean2 == boolean1);
1954:       assertNotSame(node1, node2);
1955:       assertFalse(node1.hasOneChild());
1956:       assertFalse(node1.isLabelName());
1957:       assertFalse(node1.isAssign());
1958:       assertEquals((-1122), node1.getType());
1959:       assertFalse(node1.isGetElem());
1960:       assertFalse(node1.isCast());
1961:       assertFalse(node1.isExprResult());
1962:       assertEquals(0, node1.getCharno());
1963:       assertFalse(node1.isNumber());
1964:       assertFalse(node1.isOr());
1965:       assertFalse(node1.isAnd());
1966:       assertFalse(node1.isContinue());
1967:       assertFalse(node1.isDo());
1968:       assertFalse(node1.isNew());
1969:       assertFalse(node1.isLabel());
1970:       assertFalse(node1.isAssignAdd());
1971:       assertFalse(node1.isThrow());
1972:       assertFalse(node1.isVar());
1973:       assertFalse(node1.isCall());
1974:       assertFalse(node1.isFalse());
1975:       assertFalse(node1.isName());
1976:       assertFalse(node1.isBreak());
1977:       assertFalse(node1.isAdd());
1978:       assertFalse(node1.isNull());
1979:       assertFalse(node1.isNot());
1980:       assertFalse(node1.isObjectLit());
1981:       assertFalse(node1.isString());
1982:       assertFalse(node1.isComma());
1983:       assertFalse(node1.isGetProp());
1984:       assertFalse(node1.isDec());
1985:       assertFalse(node1.isTypeOf());
1986:       assertFalse(node1.isReturn());
1987:       assertFalse(node1.isWhile());
1988:       assertFalse(node1.hasChildren());
1989:       assertFalse(node1.isArrayLit());
1990:       assertFalse(node1.isEmpty());
1991:       assertFalse(node1.isTrue());
1992:       assertFalse(node1.isDebugger());
1993:       assertFalse(node1.isGetterDef());
1994:       assertFalse(node1.isDelProp());
1995:       assertFalse(node1.isVoid());
1996:       assertFalse(node1.isIf());
1997:       assertFalse(node1.isNE());
1998:       assertEquals(0, node1.getChildCount());
1999:       assertFalse(node1.isIn());
2000:       assertFalse(node1.isSetterDef());
2001:       assertFalse(node1.isInc());
2002:       assertFalse(node1.isFunction());
2003:       assertFalse(node1.isDefaultCase());
2004:       assertFalse(node1.isParamList());
2005:       assertFalse(node1.isSwitch());
2006:       assertFalse(node1.isStringKey());
2007:       assertEquals(131072, node1.getSourcePosition());
2008:       assertFalse(node1.hasMoreThanOneChild());
2009:       assertFalse(node1.isCatch());
2010:       assertFalse(node1.isCase());
2011:       assertFalse(node1.isWith());
2012:       assertEquals(32, node1.getLineno());
2013:       assertFalse(node1.isInstanceOf());
2014:       assertFalse(node1.isScript());
2015:       assertFalse(node1.isThis());
2016:       assertFalse(node1.isRegExp());
2017:       assertFalse(node1.isTry());
2018:       assertFalse(node1.isHook());
2019:       assertFalse(node1.isBlock());
2020:       assertFalse(node1.isFor());
2021:       assertFalse(boolean2);
2022:       
2023:       Node node4 = Node.newNumber(0.0);
2024:       assertFalse(node4.equals((Object)node0));
2025:       assertFalse(node4.equals((Object)node2));
2026:       assertFalse(node4.equals((Object)node3));
2027:       assertFalse(node4.equals((Object)node1));
2028:       assertNotSame(node4, node0);
2029:       assertTrue(node4.isNumber());
2030:       assertFalse(node4.isNE());
2031:       assertFalse(node4.isIf());
2032:       assertFalse(node4.isGetterDef());
2033:       assertFalse(node4.isEmpty());
2034:       assertFalse(node4.isCase());
2035:       assertFalse(node4.isInc());
2036:       assertFalse(node4.isIn());
2037:       assertFalse(node4.isString());
2038:       assertFalse(node4.isArrayLit());
2039:       assertEquals((-1), node4.getCharno());
2040:       assertFalse(node4.isDebugger());
2041:       assertFalse(node4.isSwitch());
2042:       assertFalse(node4.isThrow());
2043:       assertFalse(node4.isDefaultCase());
2044:       assertFalse(node4.isFunction());
2045:       assertFalse(node4.isFalse());
2046:       assertEquals(0, node4.getChildCount());
2047:       assertFalse(node4.isGetProp());
2048:       assertFalse(node4.isNull());
2049:       assertFalse(node4.isAnd());
2050:       assertFalse(node4.isNot());
2051:       assertFalse(node4.isObjectLit());
2052:       assertFalse(node4.isTrue());
2053:       assertFalse(node4.isVoid());
2054:       assertFalse(node4.isWhile());
2055:       assertFalse(node4.isAssign());
2056:       assertFalse(node4.isName());
2057:       assertFalse(node4.isDelProp());
2058:       assertFalse(node4.isDec());
2059:       assertFalse(node4.isGetElem());
2060:       assertFalse(node4.isBreak());
2061:       assertFalse(node4.hasChildren());
2062:       assertFalse(node4.isComma());
2063:       assertFalse(node4.isCall());
2064:       assertFalse(node4.isExprResult());
2065:       assertFalse(node4.isTypeOf());
2066:       assertFalse(node4.isOr());
2067:       assertEquals((-1), node4.getLineno());
2068:       assertFalse(node4.isAssignAdd());
2069:       assertFalse(node4.isReturn());
2070:       assertFalse(node4.isLabel());
2071:       assertFalse(node4.isDo());
2072:       assertEquals((-1), node4.getSourcePosition());
2073:       assertFalse(node4.isAdd());
2074:       assertFalse(node4.isNew());
2075:       assertFalse(node4.isVar());
2076:       assertFalse(node4.isStringKey());
2077:       assertFalse(node4.isLabelName());
2078:       assertFalse(node4.isCast());
2079:       assertFalse(node4.isContinue());
2080:       assertFalse(node4.isThis());
2081:       assertFalse(node4.isParamList());
2082:       assertFalse(node4.isSetterDef());
2083:       assertFalse(node4.isScript());
2084:       assertFalse(node4.isBlock());
2085:       assertFalse(node4.isTry());
2086:       assertFalse(node4.hasOneChild());
2087:       assertFalse(node4.isHook());
2088:       assertEquals(39, node4.getType());
2089:       assertFalse(node4.isWith());
2090:       assertFalse(node4.isFor());
2091:       assertFalse(node4.hasMoreThanOneChild());
2092:       assertFalse(node4.isCatch());
2093:       assertFalse(node4.isRegExp());
2094:       assertFalse(node4.isInstanceOf());
2095:       assertNotNull(node4);
2096:       
2097:       node3.setChangeTime(32);
2098:       assertFalse(node1.equals((Object)node4));
2099:       assertFalse(node1.equals((Object)node0));
2100:       assertFalse(node1.equals((Object)node3));
2101:       assertFalse(node1.equals((Object)node2));
2102:       assertFalse(node2.equals((Object)node0));
2103:       assertFalse(node2.equals((Object)node3));
2104:       assertFalse(node2.equals((Object)node4));
2105:       assertFalse(node2.equals((Object)node1));
2106:       assertFalse(node3.equals((Object)node2));
2107:       assertFalse(node3.equals((Object)node1));
2108:       assertFalse(node3.equals((Object)node4));
2109:       assertFalse(node3.equals((Object)node0));
2110:       assertNotSame(node1, node2);
2111:       assertNotSame(node2, node1);
2112:       assertFalse(node1.hasOneChild());
2113:       assertFalse(node1.isLabelName());
2114:       assertFalse(node1.isAssign());
2115:       assertEquals((-1122), node1.getType());
2116:       assertFalse(node1.isGetElem());
2117:       assertFalse(node1.isCast());
2118:       assertFalse(node1.isExprResult());
2119:       assertEquals(0, node1.getCharno());
2120:       assertFalse(node1.isNumber());
2121:       assertFalse(node1.isOr());
2122:       assertFalse(node1.isAnd());
2123:       assertFalse(node1.isContinue());
2124:       assertFalse(node1.isDo());
2125:       assertFalse(node1.isNew());
2126:       assertFalse(node1.isLabel());
2127:       assertFalse(node1.isAssignAdd());
2128:       assertFalse(node1.isThrow());
2129:       assertFalse(node1.isVar());
2130:       assertFalse(node1.isCall());
2131:       assertFalse(node1.isFalse());
2132:       assertFalse(node1.isName());
2133:       assertFalse(node1.isBreak());
2134:       assertFalse(node1.isAdd());
2135:       assertFalse(node1.isNull());
2136:       assertFalse(node1.isNot());
2137:       assertFalse(node1.isObjectLit());
2138:       assertFalse(node1.isString());
2139:       assertFalse(node1.isComma());
2140:       assertFalse(node1.isGetProp());
2141:       assertFalse(node1.isDec());
2142:       assertFalse(node1.isTypeOf());
2143:       assertFalse(node1.isReturn());
2144:       assertFalse(node1.isWhile());
2145:       assertFalse(node1.hasChildren());
2146:       assertFalse(node1.isArrayLit());
2147:       assertFalse(node1.isEmpty());
2148:       assertFalse(node1.isTrue());
2149:       assertFalse(node1.isDebugger());
2150:       assertFalse(node1.isGetterDef());
2151:       assertFalse(node1.isDelProp());
2152:       assertFalse(node1.isVoid());
2153:       assertFalse(node1.isIf());
2154:       assertFalse(node1.isNE());
2155:       assertEquals(0, node1.getChildCount());
2156:       assertFalse(node1.isIn());
2157:       assertFalse(node1.isSetterDef());
2158:       assertFalse(node1.isInc());
2159:       assertFalse(node1.isFunction());
2160:       assertFalse(node1.isDefaultCase());
2161:       assertFalse(node1.isParamList());
2162:       assertFalse(node1.isSwitch());
2163:       assertFalse(node1.isStringKey());
2164:       assertEquals(131072, node1.getSourcePosition());
2165:       assertFalse(node1.hasMoreThanOneChild());
2166:       assertFalse(node1.isCatch());
2167:       assertFalse(node1.isCase());
2168:       assertFalse(node1.isWith());
2169:       assertEquals(32, node1.getLineno());
2170:       assertFalse(node1.isInstanceOf());
2171:       assertFalse(node1.isScript());
2172:       assertFalse(node1.isThis());
2173:       assertFalse(node1.isRegExp());
2174:       assertFalse(node1.isTry());
2175:       assertFalse(node1.isHook());
2176:       assertFalse(node1.isBlock());
2177:       assertFalse(node1.isFor());
2178:       assertEquals((-1), node2.getLineno());
2179:       assertFalse(node2.isReturn());
2180:       assertFalse(node2.isOr());
2181:       assertFalse(node2.isLabel());
2182:       assertFalse(node2.hasMoreThanOneChild());
2183:       assertFalse(node2.isTypeOf());
2184:       assertFalse(node2.isNumber());
2185:       assertFalse(node2.isContinue());
2186:       assertFalse(node2.isLabelName());
2187:       assertEquals((-1), node2.getSourcePosition());
2188:       assertFalse(node2.isGetElem());
2189:       assertFalse(node2.hasOneChild());
2190:       assertFalse(node2.isBlock());
2191:       assertFalse(node2.isCall());
2192:       assertFalse(node2.isExprResult());
2193:       assertFalse(node2.isScript());
2194:       assertFalse(node2.isWith());
2195:       assertFalse(node2.isWhile());
2196:       assertFalse(node2.isAssign());
2197:       assertFalse(node2.isDec());
2198:       assertFalse(node2.hasChildren());
2199:       assertEquals(46, node2.getType());
2200:       assertEquals(0, node2.getChildCount());
2201:       assertFalse(node2.isComma());
2202:       assertFalse(node2.isNull());
2203:       assertFalse(node2.isBreak());
2204:       assertFalse(node2.isTrue());
2205:       assertFalse(node2.isParamList());
2206:       assertFalse(node2.isVoid());
2207:       assertFalse(node2.isStringKey());
2208:       assertFalse(node2.isName());
2209:       assertFalse(node2.isAdd());
2210:       assertFalse(node2.isNew());
2211:       assertFalse(node2.isArrayLit());
2212:       assertFalse(node2.isDo());
2213:       assertFalse(node2.isEmpty());
2214:       assertFalse(node2.isVar());
2215:       assertFalse(node2.isAssignAdd());
2216:       assertFalse(node2.isDefaultCase());
2217:       assertFalse(node2.isIn());
2218:       assertFalse(node2.isGetterDef());
2219:       assertFalse(node2.isDelProp());
2220:       assertFalse(node2.isSwitch());
2221:       assertFalse(node2.isNE());
2222:       assertFalse(node2.isIf());
2223:       assertFalse(node2.isTry());
2224:       assertFalse(node2.isHook());
2225:       assertEquals((-1), node2.getCharno());
2226:       assertFalse(node2.isDebugger());
2227:       assertFalse(node2.isRegExp());
2228:       assertFalse(node2.isString());
2229:       assertFalse(node2.isFor());
2230:       assertFalse(node2.isCase());
2231:       assertFalse(node2.isThis());
2232:       assertFalse(node2.isGetProp());
2233:       assertFalse(node2.isSetterDef());
2234:       assertFalse(node2.isCatch());
2235:       assertFalse(node2.isObjectLit());
2236:       assertFalse(node2.isInstanceOf());
2237:       assertFalse(node2.isNot());
2238:       assertFalse(node2.isAnd());
2239:       assertFalse(node2.isInc());
2240:       assertFalse(node2.isFunction());
2241:       assertFalse(node2.isCast());
2242:       assertFalse(node2.isFalse());
2243:       assertFalse(node2.isThrow());
2244:       assertEquals((-1), node3.getCharno());
2245:       assertFalse(node3.isSwitch());
2246:       assertFalse(node3.isHook());
2247:       assertFalse(node3.isFalse());
2248:       assertTrue(node3.hasMoreThanOneChild());
2249:       assertFalse(node3.isBreak());
2250:       assertTrue(node3.hasChildren());
2251:       assertFalse(node3.isGetProp());
2252:       assertFalse(node3.isComma());
2253:       assertFalse(node3.isGetterDef());
2254:       assertFalse(node3.isFor());
2255:       assertFalse(node3.isThis());
2256:       assertFalse(node3.isCase());
2257:       assertFalse(node3.isNot());
2258:       assertFalse(node3.isObjectLit());
2259:       assertTrue(node3.isNumber());
2260:       assertFalse(node3.isString());
2261:       assertFalse(node3.isScript());
2262:       assertFalse(node3.isDebugger());
2263:       assertFalse(node3.isTry());
2264:       assertFalse(node3.isRegExp());
2265:       assertFalse(node3.isFunction());
2266:       assertFalse(node3.isAnd());
2267:       assertFalse(node3.isWith());
2268:       assertFalse(node3.isInstanceOf());
2269:       assertFalse(node3.isCast());
2270:       assertFalse(node3.isCatch());
2271:       assertFalse(node3.isIf());
2272:       assertFalse(node3.isNE());
2273:       assertFalse(node3.isThrow());
2274:       assertFalse(node3.isIn());
2275:       assertFalse(node3.isSetterDef());
2276:       assertFalse(node3.isInc());
2277:       assertFalse(node3.isNew());
2278:       assertFalse(node3.isWhile());
2279:       assertEquals(39, node3.getType());
2280:       assertFalse(node3.isVar());
2281:       assertFalse(node3.isBlock());
2282:       assertFalse(node3.isContinue());
2283:       assertFalse(node3.isStringKey());
2284:       assertFalse(node3.isName());
2285:       assertEquals((-1), node3.getLineno());
2286:       assertFalse(node3.isCall());
2287:       assertFalse(node3.isParamList());
2288:       assertFalse(node3.isTypeOf());
2289:       assertEquals((-1), node3.getSourcePosition());
2290:       assertFalse(node3.isDec());
2291:       assertEquals(3, node3.getChildCount());
2292:       assertFalse(node3.isReturn());
2293:       assertFalse(node3.hasOneChild());
2294:       assertFalse(node3.isVoid());
2295:       assertFalse(node3.isDefaultCase());
2296:       assertFalse(node3.isTrue());
2297:       assertFalse(node3.isLabelName());
2298:       assertFalse(node3.isAssign());
2299:       assertFalse(node3.isDelProp());
2300:       assertFalse(node3.isArrayLit());
2301:       assertFalse(node3.isExprResult());
2302:       assertFalse(node3.isGetElem());
2303:       assertFalse(node3.isOr());
2304:       assertFalse(node3.isAssignAdd());
2305:       assertFalse(node3.isLabel());
2306:       assertFalse(node3.isNull());
2307:       assertFalse(node3.isDo());
2308:       assertFalse(node3.isEmpty());
2309:       assertFalse(node3.isAdd());
2310:       
2311:       boolean boolean3 = node1.isReturn();
2312:       assertTrue(boolean3 == boolean2);
2313:       assertTrue(boolean3 == boolean0);
2314:       assertTrue(boolean3 == boolean1);
2315:       assertFalse(node1.equals((Object)node4));
2316:       assertFalse(node1.equals((Object)node0));
2317:       assertFalse(node1.equals((Object)node3));
2318:       assertFalse(node1.equals((Object)node2));
2319:       assertNotSame(node1, node2);
2320:       assertFalse(node1.hasOneChild());
2321:       assertFalse(node1.isLabelName());
2322:       assertFalse(node1.isAssign());
2323:       assertEquals((-1122), node1.getType());
2324:       assertFalse(node1.isGetElem());
2325:       assertFalse(node1.isCast());
2326:       assertFalse(node1.isExprResult());
2327:       assertEquals(0, node1.getCharno());
2328:       assertFalse(node1.isNumber());
2329:       assertFalse(node1.isOr());
2330:       assertFalse(node1.isAnd());
2331:       assertFalse(node1.isContinue());
2332:       assertFalse(node1.isDo());
2333:       assertFalse(node1.isNew());
2334:       assertFalse(node1.isLabel());
2335:       assertFalse(node1.isAssignAdd());
2336:       assertFalse(node1.isThrow());
2337:       assertFalse(node1.isVar());
2338:       assertFalse(node1.isCall());
2339:       assertFalse(node1.isFalse());
2340:       assertFalse(node1.isName());
2341:       assertFalse(node1.isBreak());
2342:       assertFalse(node1.isAdd());
2343:       assertFalse(node1.isNull());
2344:       assertFalse(node1.isNot());
2345:       assertFalse(node1.isObjectLit());
2346:       assertFalse(node1.isString());
2347:       assertFalse(node1.isComma());
2348:       assertFalse(node1.isGetProp());
2349:       assertFalse(node1.isDec());
2350:       assertFalse(node1.isTypeOf());
2351:       assertFalse(node1.isReturn());
2352:       assertFalse(node1.isWhile());
2353:       assertFalse(node1.hasChildren());
2354:       assertFalse(node1.isArrayLit());
2355:       assertFalse(node1.isEmpty());
2356:       assertFalse(node1.isTrue());
2357:       assertFalse(node1.isDebugger());
2358:       assertFalse(node1.isGetterDef());
2359:       assertFalse(node1.isDelProp());
2360:       assertFalse(node1.isVoid());
2361:       assertFalse(node1.isIf());
2362:       assertFalse(node1.isNE());
2363:       assertEquals(0, node1.getChildCount());
2364:       assertFalse(node1.isIn());
2365:       assertFalse(node1.isSetterDef());
2366:       assertFalse(node1.isInc());
2367:       assertFalse(node1.isFunction());
2368:       assertFalse(node1.isDefaultCase());
2369:       assertFalse(node1.isParamList());
2370:       assertFalse(node1.isSwitch());
2371:       assertFalse(node1.isStringKey());
2372:       assertEquals(131072, node1.getSourcePosition());
2373:       assertFalse(node1.hasMoreThanOneChild());
2374:       assertFalse(node1.isCatch());
2375:       assertFalse(node1.isCase());
2376:       assertFalse(node1.isWith());
2377:       assertEquals(32, node1.getLineno());
2378:       assertFalse(node1.isInstanceOf());
2379:       assertFalse(node1.isScript());
2380:       assertFalse(node1.isThis());
2381:       assertFalse(node1.isRegExp());
2382:       assertFalse(node1.isTry());
2383:       assertFalse(node1.isHook());
2384:       assertFalse(node1.isBlock());
2385:       assertFalse(node1.isFor());
2386:       assertFalse(boolean3);
2387:       
2388:       boolean boolean4 = node1.isOr();
2389:       assertTrue(boolean4 == boolean2);
2390:       assertTrue(boolean4 == boolean3);
2391:       assertTrue(boolean4 == boolean0);
2392:       assertTrue(boolean4 == boolean1);
2393:       assertFalse(node1.equals((Object)node4));
2394:       assertFalse(node1.equals((Object)node0));
2395:       assertFalse(node1.equals((Object)node3));
2396:       assertFalse(node1.equals((Object)node2));
2397:       assertNotSame(node1, node2);
2398:       assertFalse(node1.hasOneChild());
2399:       assertFalse(node1.isLabelName());
2400:       assertFalse(node1.isAssign());
2401:       assertEquals((-1122), node1.getType());
2402:       assertFalse(node1.isGetElem());
2403:       assertFalse(node1.isCast());
2404:       assertFalse(node1.isExprResult());
2405:       assertEquals(0, node1.getCharno());
2406:       assertFalse(node1.isNumber());
2407:       assertFalse(node1.isOr());
2408:       assertFalse(node1.isAnd());
2409:       assertFalse(node1.isContinue());
2410:       assertFalse(node1.isDo());
2411:       assertFalse(node1.isNew());
2412:       assertFalse(node1.isLabel());
2413:       assertFalse(node1.isAssignAdd());
2414:       assertFalse(node1.isThrow());
2415:       assertFalse(node1.isVar());
2416:       assertFalse(node1.isCall());
2417:       assertFalse(node1.isFalse());
2418:       assertFalse(node1.isName());
2419:       assertFalse(node1.isBreak());
2420:       assertFalse(node1.isAdd());
2421:       assertFalse(node1.isNull());
2422:       assertFalse(node1.isNot());
2423:       assertFalse(node1.isObjectLit());
2424:       assertFalse(node1.isString());
2425:       assertFalse(node1.isComma());
2426:       assertFalse(node1.isGetProp());
2427:       assertFalse(node1.isDec());
2428:       assertFalse(node1.isTypeOf());
2429:       assertFalse(node1.isReturn());
2430:       assertFalse(node1.isWhile());
2431:       assertFalse(node1.hasChildren());
2432:       assertFalse(node1.isArrayLit());
2433:       assertFalse(node1.isEmpty());
2434:       assertFalse(node1.isTrue());
2435:       assertFalse(node1.isDebugger());
2436:       assertFalse(node1.isGetterDef());
2437:       assertFalse(node1.isDelProp());
2438:       assertFalse(node1.isVoid());
2439:       assertFalse(node1.isIf());
2440:       assertFalse(node1.isNE());
2441:       assertEquals(0, node1.getChildCount());
2442:       assertFalse(node1.isIn());
2443:       assertFalse(node1.isSetterDef());
2444:       assertFalse(node1.isInc());
2445:       assertFalse(node1.isFunction());
2446:       assertFalse(node1.isDefaultCase());
2447:       assertFalse(node1.isParamList());
2448:       assertFalse(node1.isSwitch());
2449:       assertFalse(node1.isStringKey());
2450:       assertEquals(131072, node1.getSourcePosition());
2451:       assertFalse(node1.hasMoreThanOneChild());
2452:       assertFalse(node1.isCatch());
2453:       assertFalse(node1.isCase());
2454:       assertFalse(node1.isWith());
2455:       assertEquals(32, node1.getLineno());
2456:       assertFalse(node1.isInstanceOf());
2457:       assertFalse(node1.isScript());
2458:       assertFalse(node1.isThis());
2459:       assertFalse(node1.isRegExp());
2460:       assertFalse(node1.isTry());
2461:       assertFalse(node1.isHook());
2462:       assertFalse(node1.isBlock());
2463:       assertFalse(node1.isFor());
2464:       assertFalse(boolean4);
2465:       
2466:       node4.setLength(37);
2467:       assertFalse(node4.equals((Object)node0));
2468:       assertFalse(node4.equals((Object)node2));
2469:       assertFalse(node4.equals((Object)node3));
2470:       assertFalse(node4.equals((Object)node1));
2471:       assertNotSame(node4, node0);
2472:       assertTrue(node4.isNumber());
2473:       assertFalse(node4.isNE());
2474:       assertFalse(node4.isIf());
2475:       assertFalse(node4.isGetterDef());
2476:       assertFalse(node4.isEmpty());
2477:       assertFalse(node4.isCase());
2478:       assertFalse(node4.isInc());
2479:       assertFalse(node4.isIn());
2480:       assertFalse(node4.isString());
2481:       assertFalse(node4.isArrayLit());
2482:       assertEquals((-1), node4.getCharno());
2483:       assertFalse(node4.isDebugger());
2484:       assertFalse(node4.isSwitch());
2485:       assertFalse(node4.isThrow());
2486:       assertFalse(node4.isDefaultCase());
2487:       assertFalse(node4.isFunction());
2488:       assertFalse(node4.isFalse());
2489:       assertEquals(0, node4.getChildCount());
2490:       assertFalse(node4.isGetProp());
2491:       assertFalse(node4.isNull());
2492:       assertFalse(node4.isAnd());
2493:       assertFalse(node4.isNot());
2494:       assertFalse(node4.isObjectLit());
2495:       assertFalse(node4.isTrue());
2496:       assertFalse(node4.isVoid());
2497:       assertFalse(node4.isWhile());
2498:       assertFalse(node4.isAssign());
2499:       assertFalse(node4.isName());
2500:       assertFalse(node4.isDelProp());
2501:       assertFalse(node4.isDec());
2502:       assertFalse(node4.isGetElem());
2503:       assertFalse(node4.isBreak());
2504:       assertFalse(node4.hasChildren());
2505:       assertFalse(node4.isComma());
2506:       assertFalse(node4.isCall());
2507:       assertFalse(node4.isExprResult());
2508:       assertFalse(node4.isTypeOf());
2509:       assertFalse(node4.isOr());
2510:       assertEquals((-1), node4.getLineno());
2511:       assertFalse(node4.isAssignAdd());
2512:       assertFalse(node4.isReturn());
2513:       assertFalse(node4.isLabel());
2514:       assertFalse(node4.isDo());
2515:       assertEquals((-1), node4.getSourcePosition());
2516:       assertFalse(node4.isAdd());
2517:       assertFalse(node4.isNew());
2518:       assertFalse(node4.isVar());
2519:       assertFalse(node4.isStringKey());
2520:       assertFalse(node4.isLabelName());
2521:       assertFalse(node4.isCast());
2522:       assertFalse(node4.isContinue());
2523:       assertFalse(node4.isThis());
2524:       assertFalse(node4.isParamList());
2525:       assertFalse(node4.isSetterDef());
2526:       assertFalse(node4.isScript());
2527:       assertFalse(node4.isBlock());
2528:       assertFalse(node4.isTry());
2529:       assertFalse(node4.hasOneChild());
2530:       assertFalse(node4.isHook());
2531:       assertEquals(39, node4.getType());
2532:       assertFalse(node4.isWith());
2533:       assertFalse(node4.isFor());
2534:       assertFalse(node4.hasMoreThanOneChild());
2535:       assertFalse(node4.isCatch());
2536:       assertFalse(node4.isRegExp());
2537:       assertFalse(node4.isInstanceOf());
2538:   }
2539: }
RegularFileObject[/tmp/EvoSuite_117_1628161380292/com/google/javascript/rhino/Node_117_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:00 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_117_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_117_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_117_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:03:00.900 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertNotNull(node0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node1 = Node.newString((-1122), "UNKNOWN", 32, 0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1122), node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertNotNull(node1);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Object object0 = node1.getProp(0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1122), node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertNull(object0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node2 = Node.newString(46, "UNKNOWN");
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals(46, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isString());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertNotNull(node2);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);

boolean boolean0 = node1.isNull();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1122), node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(boolean0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

node0.setLineno(39);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(39, node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

node0.putProp(4095, (Object) null);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(39, node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

int int0 = node0.getIndexOfChild(node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(39, node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1122), node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals((-1), int0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(39, node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean1 = node2.isIn();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertNotSame(node2, node1);
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals(46, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isString());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(boolean1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(39, node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals(46, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isString());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertNotNull(node_NodeMismatch0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);

Node node3 = new Node(39, node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1122), node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals(46, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isString());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isBreak());
assertTrue(node3.hasChildren());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertFalse(node3.isCase());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertTrue(node3.isNumber());
assertFalse(node3.isString());
assertFalse(node3.isScript());
assertFalse(node3.isDebugger());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isAnd());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCast());
assertFalse(node3.isCatch());
assertFalse(node3.isIf());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isNE());
assertFalse(node3.isThrow());
assertFalse(node3.isIn());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isNew());
assertFalse(node3.isWhile());
assertEquals(39, node3.getType());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isContinue());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCall());
assertFalse(node3.isParamList());
assertFalse(node3.isTypeOf());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isReturn());
assertFalse(node3.hasOneChild());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isDelProp());
assertFalse(node3.isArrayLit());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isDo());
assertFalse(node3.isEmpty());
assertFalse(node3.isAdd());
assertNotNull(node3);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);

node3.addChildBefore(node0, node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertEquals(0, node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertEquals(39, node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.isDo());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isObjectLit());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1122), node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals(46, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isString());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isBreak());
assertTrue(node3.hasChildren());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertFalse(node3.isCase());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertTrue(node3.isNumber());
assertFalse(node3.isString());
assertFalse(node3.isScript());
assertFalse(node3.isDebugger());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isAnd());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCast());
assertFalse(node3.isCatch());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isThrow());
assertFalse(node3.isIn());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isNew());
assertFalse(node3.isWhile());
assertEquals(39, node3.getType());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isContinue());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCall());
assertFalse(node3.isParamList());
assertFalse(node3.isTypeOf());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isReturn());
assertFalse(node3.hasOneChild());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isDelProp());
assertFalse(node3.isArrayLit());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isDo());
assertFalse(node3.isEmpty());
assertFalse(node3.isAdd());

boolean boolean2 = node1.isUnscopedQualifiedName();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertNotSame(node1, node2);
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1122), node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(boolean2);

Node node4 = Node.newNumber(0.0);
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertNotSame(node4, node0);
assertTrue(node4.isNumber());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isGetterDef());
assertFalse(node4.isEmpty());
assertFalse(node4.isCase());
assertFalse(node4.isInc());
assertFalse(node4.isIn());
assertFalse(node4.isString());
assertFalse(node4.isArrayLit());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isDebugger());
assertFalse(node4.isSwitch());
assertFalse(node4.isThrow());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isFunction());
assertFalse(node4.isFalse());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isGetProp());
assertFalse(node4.isNull());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isWhile());
assertFalse(node4.isAssign());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isDec());
assertFalse(node4.isGetElem());
assertFalse(node4.isBreak());
assertFalse(node4.hasChildren());
assertFalse(node4.isComma());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isTypeOf());
assertFalse(node4.isOr());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.isDo());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isVar());
assertFalse(node4.isStringKey());
assertFalse(node4.isLabelName());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isThis());
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertFalse(node4.isScript());
assertFalse(node4.isBlock());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isHook());
assertEquals(39, node4.getType());
assertFalse(node4.isWith());
assertFalse(node4.isFor());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCatch());
assertFalse(node4.isRegExp());
assertFalse(node4.isInstanceOf());
assertNotNull(node4);

node3.setChangeTime(32);
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node0));
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1122), node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals(46, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isString());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isBreak());
assertTrue(node3.hasChildren());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertFalse(node3.isCase());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertTrue(node3.isNumber());
assertFalse(node3.isString());
assertFalse(node3.isScript());
assertFalse(node3.isDebugger());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isAnd());
assertFalse(node3.isWith());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCast());
assertFalse(node3.isCatch());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isThrow());
assertFalse(node3.isIn());
assertFalse(node3.isSetterDef());
assertFalse(node3.isInc());
assertFalse(node3.isNew());
assertFalse(node3.isWhile());
assertEquals(39, node3.getType());
assertFalse(node3.isVar());
assertFalse(node3.isBlock());
assertFalse(node3.isContinue());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCall());
assertFalse(node3.isParamList());
assertFalse(node3.isTypeOf());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isReturn());
assertFalse(node3.hasOneChild());
assertFalse(node3.isVoid());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTrue());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isDelProp());
assertFalse(node3.isArrayLit());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isNull());
assertFalse(node3.isDo());
assertFalse(node3.isEmpty());
assertFalse(node3.isAdd());

boolean boolean3 = node1.isReturn();
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1122), node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(boolean3);

boolean boolean4 = node1.isOr();
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1122), node1.getType());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertEquals(0, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isFalse());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.hasChildren());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(boolean4);

node4.setLength(37);
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertNotSame(node4, node0);
assertTrue(node4.isNumber());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isGetterDef());
assertFalse(node4.isEmpty());
assertFalse(node4.isCase());
assertFalse(node4.isInc());
assertFalse(node4.isIn());
assertFalse(node4.isString());
assertFalse(node4.isArrayLit());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isDebugger());
assertFalse(node4.isSwitch());
assertFalse(node4.isThrow());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isFunction());
assertFalse(node4.isFalse());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isGetProp());
assertFalse(node4.isNull());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isWhile());
assertFalse(node4.isAssign());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isDec());
assertFalse(node4.isGetElem());
assertFalse(node4.isBreak());
assertFalse(node4.hasChildren());
assertFalse(node4.isComma());
assertFalse(node4.isCall());
assertFalse(node4.isExprResult());
assertFalse(node4.isTypeOf());
assertFalse(node4.isOr());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.isDo());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isVar());
assertFalse(node4.isStringKey());
assertFalse(node4.isLabelName());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isThis());
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertFalse(node4.isScript());
assertFalse(node4.isBlock());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isHook());
assertEquals(39, node4.getType());
assertFalse(node4.isWith());
assertFalse(node4.isFor());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isCatch());
assertFalse(node4.isRegExp());
assertFalse(node4.isInstanceOf());


[MASTER] 11:03:08.197 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_154_1628161387665/com/google/javascript/rhino/Node_154_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_154_1628161387665/com/google/javascript/rhino/Node_154_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:08.197 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:08.197 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:08.198 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1046
[MASTER] 11:03:08.199 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_154_1628161387665/com/google/javascript/rhino/Node_154_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:07 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_154_tmp__ESTest extends Node_154_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(1.0);
21:       assertFalse(node0.isDo());
22:       assertEquals(39, node0.getType());
23:       assertFalse(node0.isContinue());
24:       assertFalse(node0.isWhile());
25:       assertFalse(node0.hasMoreThanOneChild());
26:       assertFalse(node0.isOr());
27:       assertFalse(node0.isLabel());
28:       assertFalse(node0.isAssignAdd());
29:       assertFalse(node0.isBlock());
30:       assertFalse(node0.isAdd());
31:       assertFalse(node0.isReturn());
32:       assertFalse(node0.isNew());
33:       assertFalse(node0.isAssign());
34:       assertFalse(node0.isName());
35:       assertFalse(node0.isGetElem());
36:       assertFalse(node0.isNull());
37:       assertFalse(node0.isTypeOf());
38:       assertFalse(node0.hasChildren());
39:       assertFalse(node0.isDec());
40:       assertFalse(node0.isCatch());
41:       assertFalse(node0.isCall());
42:       assertFalse(node0.isExprResult());
43:       assertEquals((-1), node0.getLineno());
44:       assertFalse(node0.isNot());
45:       assertFalse(node0.isAnd());
46:       assertFalse(node0.isObjectLit());
47:       assertFalse(node0.isFunction());
48:       assertFalse(node0.isDebugger());
49:       assertFalse(node0.isSetterDef());
50:       assertFalse(node0.isGetProp());
51:       assertFalse(node0.isFalse());
52:       assertFalse(node0.isThrow());
53:       assertEquals((-1), node0.getSourcePosition());
54:       assertFalse(node0.isCast());
55:       assertFalse(node0.isString());
56:       assertEquals((-1), node0.getCharno());
57:       assertFalse(node0.isIn());
58:       assertFalse(node0.isInc());
59:       assertTrue(node0.isNumber());
60:       assertFalse(node0.isCase());
61:       assertFalse(node0.isFor());
62:       assertFalse(node0.isEmpty());
63:       assertFalse(node0.isDelProp());
64:       assertFalse(node0.isIf());
65:       assertFalse(node0.isNE());
66:       assertFalse(node0.isHook());
67:       assertFalse(node0.isThis());
68:       assertFalse(node0.isComma());
69:       assertFalse(node0.isInstanceOf());
70:       assertFalse(node0.isBreak());
71:       assertFalse(node0.isVoid());
72:       assertFalse(node0.isWith());
73:       assertFalse(node0.isDefaultCase());
74:       assertFalse(node0.isRegExp());
75:       assertFalse(node0.isTrue());
76:       assertEquals(0, node0.getChildCount());
77:       assertFalse(node0.isTry());
78:       assertFalse(node0.isScript());
79:       assertFalse(node0.hasOneChild());
80:       assertFalse(node0.isLabelName());
81:       assertFalse(node0.isStringKey());
82:       assertFalse(node0.isVar());
83:       assertFalse(node0.isGetterDef());
84:       assertFalse(node0.isParamList());
85:       assertFalse(node0.isSwitch());
86:       assertFalse(node0.isArrayLit());
87:       assertNotNull(node0);
88:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
89:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
90:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
91:       assertEquals(8, Node.FLAG_NO_THROWS);
92:       assertEquals(50, Node.FREE_CALL);
93:       assertEquals(4095, Node.COLUMN_MASK);
94:       assertEquals(57, Node.REFLECTED_OBJECT);
95:       assertEquals(48, Node.DIRECTIVES);
96:       assertEquals(40, Node.ORIGINALNAME_PROP);
97:       assertEquals(43, Node.IS_CONSTANT_NAME);
98:       assertEquals(54, Node.SLASH_V);
99:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
100:       assertEquals(51, Node.STATIC_SOURCE_FILE);
101:       assertEquals(12, Node.COLUMN_BITS);
102:       assertEquals(32, Node.INCRDECR_PROP);
103:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
104:       assertEquals(1, Node.DECR_FLAG);
105:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
106:       assertEquals(2, Node.POST_FLAG);
107:       assertEquals(56, Node.CHANGE_TIME);
108:       assertEquals(46, Node.IS_NAMESPACE);
109:       assertEquals(47, Node.IS_DISPATCHER);
110:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
111:       assertEquals(49, Node.DIRECT_EVAL);
112:       assertEquals(37, Node.OPT_ARG_NAME);
113:       assertEquals(36, Node.QUOTED_PROP);
114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
115:       assertEquals(57, Node.LAST_PROP);
116:       assertEquals(30, Node.VAR_ARGS_NAME);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(52, Node.LENGTH);
119:       assertEquals(29, Node.JSDOC_INFO_PROP);
120:       assertEquals(53, Node.INPUT_ID);
121:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
123:       assertEquals(39, Node.EMPTY_BLOCK);
124:       
125:       Node node1 = Node.newString(36, "UNKNOWN", 32, 0);
126:       assertFalse(node1.equals((Object)node0));
127:       assertFalse(node1.isGetterDef());
128:       assertFalse(node1.isDelProp());
129:       assertFalse(node1.isIf());
130:       assertFalse(node1.isFor());
131:       assertFalse(node1.isNE());
132:       assertFalse(node1.isArrayLit());
133:       assertFalse(node1.isFunction());
134:       assertFalse(node1.isString());
135:       assertFalse(node1.isCase());
136:       assertFalse(node1.isRegExp());
137:       assertFalse(node1.isDebugger());
138:       assertFalse(node1.isSwitch());
139:       assertFalse(node1.isTry());
140:       assertFalse(node1.isBreak());
141:       assertFalse(node1.isName());
142:       assertFalse(node1.isComma());
143:       assertFalse(node1.isParamList());
144:       assertFalse(node1.isVar());
145:       assertFalse(node1.isNull());
146:       assertFalse(node1.isStringKey());
147:       assertEquals(0, node1.getChildCount());
148:       assertFalse(node1.isCall());
149:       assertFalse(node1.isDefaultCase());
150:       assertFalse(node1.isDo());
151:       assertFalse(node1.isTrue());
152:       assertFalse(node1.isVoid());
153:       assertFalse(node1.isOr());
154:       assertFalse(node1.isNew());
155:       assertFalse(node1.isEmpty());
156:       assertFalse(node1.isAdd());
157:       assertFalse(node1.hasChildren());
158:       assertFalse(node1.isNumber());
159:       assertFalse(node1.isLabelName());
160:       assertFalse(node1.isTypeOf());
161:       assertFalse(node1.isDec());
162:       assertFalse(node1.isAssign());
163:       assertFalse(node1.isAssignAdd());
164:       assertFalse(node1.isReturn());
165:       assertEquals(32, node1.getLineno());
166:       assertFalse(node1.isLabel());
167:       assertFalse(node1.isContinue());
168:       assertFalse(node1.isExprResult());
169:       assertFalse(node1.hasMoreThanOneChild());
170:       assertFalse(node1.isGetElem());
171:       assertFalse(node1.isCast());
172:       assertFalse(node1.isWhile());
173:       assertFalse(node1.isWith());
174:       assertFalse(node1.isNot());
175:       assertFalse(node1.isAnd());
176:       assertFalse(node1.isBlock());
177:       assertFalse(node1.hasOneChild());
178:       assertFalse(node1.isObjectLit());
179:       assertFalse(node1.isGetProp());
180:       assertFalse(node1.isScript());
181:       assertFalse(node1.isThis());
182:       assertEquals(131072, node1.getSourcePosition());
183:       assertFalse(node1.isThrow());
184:       assertFalse(node1.isHook());
185:       assertFalse(node1.isFalse());
186:       assertFalse(node1.isCatch());
187:       assertFalse(node1.isInstanceOf());
188:       assertEquals(36, node1.getType());
189:       assertEquals(0, node1.getCharno());
190:       assertFalse(node1.isIn());
191:       assertFalse(node1.isSetterDef());
192:       assertFalse(node1.isInc());
193:       assertNotNull(node1);
194:       assertEquals(54, Node.SLASH_V);
195:       assertEquals(15, Node.NO_SIDE_EFFECTS);
196:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
197:       assertEquals(49, Node.DIRECT_EVAL);
198:       assertEquals(57, Node.LAST_PROP);
199:       assertEquals(51, Node.STATIC_SOURCE_FILE);
200:       assertEquals(1, Node.DECR_FLAG);
201:       assertEquals(57, Node.REFLECTED_OBJECT);
202:       assertEquals(52, Node.LENGTH);
203:       assertEquals(50, Node.FREE_CALL);
204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
205:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
206:       assertEquals(39, Node.EMPTY_BLOCK);
207:       assertEquals(2, Node.POST_FLAG);
208:       assertEquals(47, Node.IS_DISPATCHER);
209:       assertEquals(46, Node.IS_NAMESPACE);
210:       assertEquals(40, Node.ORIGINALNAME_PROP);
211:       assertEquals(30, Node.VAR_ARGS_NAME);
212:       assertEquals(36, Node.QUOTED_PROP);
213:       assertEquals(53, Node.INPUT_ID);
214:       assertEquals(43, Node.IS_CONSTANT_NAME);
215:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
216:       assertEquals(55, Node.INFERRED_FUNCTION);
217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
218:       assertEquals(29, Node.JSDOC_INFO_PROP);
219:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
220:       assertEquals(37, Node.OPT_ARG_NAME);
221:       assertEquals(8, Node.FLAG_NO_THROWS);
222:       assertEquals(48, Node.DIRECTIVES);
223:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
224:       assertEquals(32, Node.INCRDECR_PROP);
225:       assertEquals(56, Node.CHANGE_TIME);
226:       assertEquals(12, Node.COLUMN_BITS);
227:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
228:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
229:       assertEquals(4095, Node.COLUMN_MASK);
230:       
231:       Object object0 = node1.getProp(0);
232:       assertFalse(node1.equals((Object)node0));
233:       assertFalse(node1.isGetterDef());
234:       assertFalse(node1.isDelProp());
235:       assertFalse(node1.isIf());
236:       assertFalse(node1.isFor());
237:       assertFalse(node1.isNE());
238:       assertFalse(node1.isArrayLit());
239:       assertFalse(node1.isFunction());
240:       assertFalse(node1.isString());
241:       assertFalse(node1.isCase());
242:       assertFalse(node1.isRegExp());
243:       assertFalse(node1.isDebugger());
244:       assertFalse(node1.isSwitch());
245:       assertFalse(node1.isTry());
246:       assertFalse(node1.isBreak());
247:       assertFalse(node1.isName());
248:       assertFalse(node1.isComma());
249:       assertFalse(node1.isParamList());
250:       assertFalse(node1.isVar());
251:       assertFalse(node1.isNull());
252:       assertFalse(node1.isStringKey());
253:       assertEquals(0, node1.getChildCount());
254:       assertFalse(node1.isCall());
255:       assertFalse(node1.isDefaultCase());
256:       assertFalse(node1.isDo());
257:       assertFalse(node1.isTrue());
258:       assertFalse(node1.isVoid());
259:       assertFalse(node1.isOr());
260:       assertFalse(node1.isNew());
261:       assertFalse(node1.isEmpty());
262:       assertFalse(node1.isAdd());
263:       assertFalse(node1.hasChildren());
264:       assertFalse(node1.isNumber());
265:       assertFalse(node1.isLabelName());
266:       assertFalse(node1.isTypeOf());
267:       assertFalse(node1.isDec());
268:       assertFalse(node1.isAssign());
269:       assertFalse(node1.isAssignAdd());
270:       assertFalse(node1.isReturn());
271:       assertEquals(32, node1.getLineno());
272:       assertFalse(node1.isLabel());
273:       assertFalse(node1.isContinue());
274:       assertFalse(node1.isExprResult());
275:       assertFalse(node1.hasMoreThanOneChild());
276:       assertFalse(node1.isGetElem());
277:       assertFalse(node1.isCast());
278:       assertFalse(node1.isWhile());
279:       assertFalse(node1.isWith());
280:       assertFalse(node1.isNot());
281:       assertFalse(node1.isAnd());
282:       assertFalse(node1.isBlock());
283:       assertFalse(node1.hasOneChild());
284:       assertFalse(node1.isObjectLit());
285:       assertFalse(node1.isGetProp());
286:       assertFalse(node1.isScript());
287:       assertFalse(node1.isThis());
288:       assertEquals(131072, node1.getSourcePosition());
289:       assertFalse(node1.isThrow());
290:       assertFalse(node1.isHook());
291:       assertFalse(node1.isFalse());
292:       assertFalse(node1.isCatch());
293:       assertFalse(node1.isInstanceOf());
294:       assertEquals(36, node1.getType());
295:       assertEquals(0, node1.getCharno());
296:       assertFalse(node1.isIn());
297:       assertFalse(node1.isSetterDef());
298:       assertFalse(node1.isInc());
299:       assertNull(object0);
300:       assertEquals(54, Node.SLASH_V);
301:       assertEquals(15, Node.NO_SIDE_EFFECTS);
302:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
303:       assertEquals(49, Node.DIRECT_EVAL);
304:       assertEquals(57, Node.LAST_PROP);
305:       assertEquals(51, Node.STATIC_SOURCE_FILE);
306:       assertEquals(1, Node.DECR_FLAG);
307:       assertEquals(57, Node.REFLECTED_OBJECT);
308:       assertEquals(52, Node.LENGTH);
309:       assertEquals(50, Node.FREE_CALL);
310:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
311:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
312:       assertEquals(39, Node.EMPTY_BLOCK);
313:       assertEquals(2, Node.POST_FLAG);
314:       assertEquals(47, Node.IS_DISPATCHER);
315:       assertEquals(46, Node.IS_NAMESPACE);
316:       assertEquals(40, Node.ORIGINALNAME_PROP);
317:       assertEquals(30, Node.VAR_ARGS_NAME);
318:       assertEquals(36, Node.QUOTED_PROP);
319:       assertEquals(53, Node.INPUT_ID);
320:       assertEquals(43, Node.IS_CONSTANT_NAME);
321:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
322:       assertEquals(55, Node.INFERRED_FUNCTION);
323:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
324:       assertEquals(29, Node.JSDOC_INFO_PROP);
325:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
326:       assertEquals(37, Node.OPT_ARG_NAME);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(48, Node.DIRECTIVES);
329:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
330:       assertEquals(32, Node.INCRDECR_PROP);
331:       assertEquals(56, Node.CHANGE_TIME);
332:       assertEquals(12, Node.COLUMN_BITS);
333:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
334:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
335:       assertEquals(4095, Node.COLUMN_MASK);
336:       
337:       Node node2 = Node.newString(46, "UNKNOWN");
338:       assertFalse(node2.equals((Object)node1));
339:       assertFalse(node2.equals((Object)node0));
340:       assertNotSame(node2, node1);
341:       assertFalse(node2.isNE());
342:       assertFalse(node2.isIf());
343:       assertFalse(node2.isDelProp());
344:       assertFalse(node2.isFor());
345:       assertFalse(node2.isTrue());
346:       assertFalse(node2.isVoid());
347:       assertFalse(node2.isThrow());
348:       assertFalse(node2.isDefaultCase());
349:       assertFalse(node2.isEmpty());
350:       assertFalse(node2.isInc());
351:       assertFalse(node2.isIn());
352:       assertFalse(node2.isGetProp());
353:       assertFalse(node2.isAnd());
354:       assertFalse(node2.isBreak());
355:       assertFalse(node2.isCall());
356:       assertFalse(node2.isExprResult());
357:       assertFalse(node2.isComma());
358:       assertFalse(node2.isFalse());
359:       assertFalse(node2.isFunction());
360:       assertFalse(node2.isString());
361:       assertFalse(node2.isNot());
362:       assertEquals((-1), node2.getSourcePosition());
363:       assertFalse(node2.isObjectLit());
364:       assertFalse(node2.isDebugger());
365:       assertFalse(node2.isOr());
366:       assertEquals((-1), node2.getLineno());
367:       assertFalse(node2.isLabel());
368:       assertFalse(node2.isReturn());
369:       assertFalse(node2.isAssignAdd());
370:       assertFalse(node2.isWhile());
371:       assertFalse(node2.hasChildren());
372:       assertFalse(node2.isDec());
373:       assertFalse(node2.isAssign());
374:       assertFalse(node2.isGetElem());
375:       assertFalse(node2.isContinue());
376:       assertFalse(node2.isCast());
377:       assertFalse(node2.isTypeOf());
378:       assertFalse(node2.hasMoreThanOneChild());
379:       assertFalse(node2.isVar());
380:       assertFalse(node2.isNew());
381:       assertFalse(node2.isAdd());
382:       assertFalse(node2.isName());
383:       assertFalse(node2.isDo());
384:       assertFalse(node2.isNull());
385:       assertFalse(node2.isSetterDef());
386:       assertEquals(46, node2.getType());
387:       assertEquals(0, node2.getChildCount());
388:       assertFalse(node2.isInstanceOf());
389:       assertFalse(node2.isParamList());
390:       assertFalse(node2.isThis());
391:       assertFalse(node2.isCatch());
392:       assertFalse(node2.isRegExp());
393:       assertFalse(node2.isWith());
394:       assertFalse(node2.hasOneChild());
395:       assertFalse(node2.isBlock());
396:       assertFalse(node2.isArrayLit());
397:       assertFalse(node2.isHook());
398:       assertFalse(node2.isStringKey());
399:       assertFalse(node2.isLabelName());
400:       assertFalse(node2.isTry());
401:       assertFalse(node2.isSwitch());
402:       assertFalse(node2.isGetterDef());
403:       assertFalse(node2.isScript());
404:       assertFalse(node2.isCase());
405:       assertEquals((-1), node2.getCharno());
406:       assertFalse(node2.isNumber());
407:       assertNotNull(node2);
408:       assertEquals(40, Node.ORIGINALNAME_PROP);
409:       assertEquals(57, Node.REFLECTED_OBJECT);
410:       assertEquals(8, Node.FLAG_NO_THROWS);
411:       assertEquals(39, Node.EMPTY_BLOCK);
412:       assertEquals(15, Node.NO_SIDE_EFFECTS);
413:       assertEquals(54, Node.SLASH_V);
414:       assertEquals(52, Node.LENGTH);
415:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
416:       assertEquals(50, Node.FREE_CALL);
417:       assertEquals(4095, Node.COLUMN_MASK);
418:       assertEquals(12, Node.COLUMN_BITS);
419:       assertEquals(1, Node.DECR_FLAG);
420:       assertEquals(48, Node.DIRECTIVES);
421:       assertEquals(49, Node.DIRECT_EVAL);
422:       assertEquals(32, Node.INCRDECR_PROP);
423:       assertEquals(37, Node.OPT_ARG_NAME);
424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
425:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
427:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
428:       assertEquals(29, Node.JSDOC_INFO_PROP);
429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
430:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
431:       assertEquals(43, Node.IS_CONSTANT_NAME);
432:       assertEquals(56, Node.CHANGE_TIME);
433:       assertEquals(53, Node.INPUT_ID);
434:       assertEquals(51, Node.STATIC_SOURCE_FILE);
435:       assertEquals(36, Node.QUOTED_PROP);
436:       assertEquals(55, Node.INFERRED_FUNCTION);
437:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
438:       assertEquals(46, Node.IS_NAMESPACE);
439:       assertEquals(57, Node.LAST_PROP);
440:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
441:       assertEquals(47, Node.IS_DISPATCHER);
442:       assertEquals(30, Node.VAR_ARGS_NAME);
443:       assertEquals(2, Node.POST_FLAG);
444:       
445:       boolean boolean0 = node1.isNull();
446:       assertFalse(node1.equals((Object)node2));
447:       assertFalse(node1.equals((Object)node0));
448:       assertNotSame(node1, node2);
449:       assertFalse(node1.isGetterDef());
450:       assertFalse(node1.isDelProp());
451:       assertFalse(node1.isIf());
452:       assertFalse(node1.isFor());
453:       assertFalse(node1.isNE());
454:       assertFalse(node1.isArrayLit());
455:       assertFalse(node1.isFunction());
456:       assertFalse(node1.isString());
457:       assertFalse(node1.isCase());
458:       assertFalse(node1.isRegExp());
459:       assertFalse(node1.isDebugger());
460:       assertFalse(node1.isSwitch());
461:       assertFalse(node1.isTry());
462:       assertFalse(node1.isBreak());
463:       assertFalse(node1.isName());
464:       assertFalse(node1.isComma());
465:       assertFalse(node1.isParamList());
466:       assertFalse(node1.isVar());
467:       assertFalse(node1.isNull());
468:       assertFalse(node1.isStringKey());
469:       assertEquals(0, node1.getChildCount());
470:       assertFalse(node1.isCall());
471:       assertFalse(node1.isDefaultCase());
472:       assertFalse(node1.isDo());
473:       assertFalse(node1.isTrue());
474:       assertFalse(node1.isVoid());
475:       assertFalse(node1.isOr());
476:       assertFalse(node1.isNew());
477:       assertFalse(node1.isEmpty());
478:       assertFalse(node1.isAdd());
479:       assertFalse(node1.hasChildren());
480:       assertFalse(node1.isNumber());
481:       assertFalse(node1.isLabelName());
482:       assertFalse(node1.isTypeOf());
483:       assertFalse(node1.isDec());
484:       assertFalse(node1.isAssign());
485:       assertFalse(node1.isAssignAdd());
486:       assertFalse(node1.isReturn());
487:       assertEquals(32, node1.getLineno());
488:       assertFalse(node1.isLabel());
489:       assertFalse(node1.isContinue());
490:       assertFalse(node1.isExprResult());
491:       assertFalse(node1.hasMoreThanOneChild());
492:       assertFalse(node1.isGetElem());
493:       assertFalse(node1.isCast());
494:       assertFalse(node1.isWhile());
495:       assertFalse(node1.isWith());
496:       assertFalse(node1.isNot());
497:       assertFalse(node1.isAnd());
498:       assertFalse(node1.isBlock());
499:       assertFalse(node1.hasOneChild());
500:       assertFalse(node1.isObjectLit());
501:       assertFalse(node1.isGetProp());
502:       assertFalse(node1.isScript());
503:       assertFalse(node1.isThis());
504:       assertEquals(131072, node1.getSourcePosition());
505:       assertFalse(node1.isThrow());
506:       assertFalse(node1.isHook());
507:       assertFalse(node1.isFalse());
508:       assertFalse(node1.isCatch());
509:       assertFalse(node1.isInstanceOf());
510:       assertEquals(36, node1.getType());
511:       assertEquals(0, node1.getCharno());
512:       assertFalse(node1.isIn());
513:       assertFalse(node1.isSetterDef());
514:       assertFalse(node1.isInc());
515:       assertFalse(boolean0);
516:       assertEquals(54, Node.SLASH_V);
517:       assertEquals(15, Node.NO_SIDE_EFFECTS);
518:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
519:       assertEquals(49, Node.DIRECT_EVAL);
520:       assertEquals(57, Node.LAST_PROP);
521:       assertEquals(51, Node.STATIC_SOURCE_FILE);
522:       assertEquals(1, Node.DECR_FLAG);
523:       assertEquals(57, Node.REFLECTED_OBJECT);
524:       assertEquals(52, Node.LENGTH);
525:       assertEquals(50, Node.FREE_CALL);
526:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
527:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
528:       assertEquals(39, Node.EMPTY_BLOCK);
529:       assertEquals(2, Node.POST_FLAG);
530:       assertEquals(47, Node.IS_DISPATCHER);
531:       assertEquals(46, Node.IS_NAMESPACE);
532:       assertEquals(40, Node.ORIGINALNAME_PROP);
533:       assertEquals(30, Node.VAR_ARGS_NAME);
534:       assertEquals(36, Node.QUOTED_PROP);
535:       assertEquals(53, Node.INPUT_ID);
536:       assertEquals(43, Node.IS_CONSTANT_NAME);
537:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
538:       assertEquals(55, Node.INFERRED_FUNCTION);
539:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
540:       assertEquals(29, Node.JSDOC_INFO_PROP);
541:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
542:       assertEquals(37, Node.OPT_ARG_NAME);
543:       assertEquals(8, Node.FLAG_NO_THROWS);
544:       assertEquals(48, Node.DIRECTIVES);
545:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
546:       assertEquals(32, Node.INCRDECR_PROP);
547:       assertEquals(56, Node.CHANGE_TIME);
548:       assertEquals(12, Node.COLUMN_BITS);
549:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
550:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
551:       assertEquals(4095, Node.COLUMN_MASK);
552:       
553:       node0.setLineno(39);
554:       assertFalse(node0.equals((Object)node2));
555:       assertFalse(node0.equals((Object)node1));
556:       assertFalse(node0.isDo());
557:       assertEquals(39, node0.getType());
558:       assertFalse(node0.isContinue());
559:       assertFalse(node0.isWhile());
560:       assertFalse(node0.hasMoreThanOneChild());
561:       assertFalse(node0.isOr());
562:       assertFalse(node0.isLabel());
563:       assertFalse(node0.isAssignAdd());
564:       assertFalse(node0.isBlock());
565:       assertFalse(node0.isAdd());
566:       assertFalse(node0.isReturn());
567:       assertFalse(node0.isNew());
568:       assertFalse(node0.isAssign());
569:       assertFalse(node0.isName());
570:       assertFalse(node0.isGetElem());
571:       assertFalse(node0.isNull());
572:       assertFalse(node0.isTypeOf());
573:       assertFalse(node0.hasChildren());
574:       assertFalse(node0.isDec());
575:       assertFalse(node0.isCatch());
576:       assertFalse(node0.isCall());
577:       assertFalse(node0.isExprResult());
578:       assertFalse(node0.isNot());
579:       assertFalse(node0.isAnd());
580:       assertFalse(node0.isObjectLit());
581:       assertEquals(0, node0.getCharno());
582:       assertFalse(node0.isFunction());
583:       assertFalse(node0.isDebugger());
584:       assertFalse(node0.isSetterDef());
585:       assertFalse(node0.isGetProp());
586:       assertFalse(node0.isFalse());
587:       assertFalse(node0.isThrow());
588:       assertFalse(node0.isCast());
589:       assertFalse(node0.isString());
590:       assertEquals(159744, node0.getSourcePosition());
591:       assertFalse(node0.isIn());
592:       assertFalse(node0.isInc());
593:       assertTrue(node0.isNumber());
594:       assertFalse(node0.isCase());
595:       assertFalse(node0.isFor());
596:       assertFalse(node0.isEmpty());
597:       assertFalse(node0.isDelProp());
598:       assertFalse(node0.isIf());
599:       assertFalse(node0.isNE());
600:       assertFalse(node0.isHook());
601:       assertFalse(node0.isThis());
602:       assertFalse(node0.isComma());
603:       assertFalse(node0.isInstanceOf());
604:       assertFalse(node0.isBreak());
605:       assertFalse(node0.isVoid());
606:       assertFalse(node0.isWith());
607:       assertFalse(node0.isDefaultCase());
608:       assertFalse(node0.isRegExp());
609:       assertFalse(node0.isTrue());
610:       assertEquals(0, node0.getChildCount());
611:       assertFalse(node0.isTry());
612:       assertFalse(node0.isScript());
613:       assertFalse(node0.hasOneChild());
614:       assertFalse(node0.isLabelName());
615:       assertFalse(node0.isStringKey());
616:       assertFalse(node0.isVar());
617:       assertFalse(node0.isGetterDef());
618:       assertEquals(39, node0.getLineno());
619:       assertFalse(node0.isParamList());
620:       assertFalse(node0.isSwitch());
621:       assertFalse(node0.isArrayLit());
622:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
623:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
624:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
625:       assertEquals(8, Node.FLAG_NO_THROWS);
626:       assertEquals(50, Node.FREE_CALL);
627:       assertEquals(4095, Node.COLUMN_MASK);
628:       assertEquals(57, Node.REFLECTED_OBJECT);
629:       assertEquals(48, Node.DIRECTIVES);
630:       assertEquals(40, Node.ORIGINALNAME_PROP);
631:       assertEquals(43, Node.IS_CONSTANT_NAME);
632:       assertEquals(54, Node.SLASH_V);
633:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
634:       assertEquals(51, Node.STATIC_SOURCE_FILE);
635:       assertEquals(12, Node.COLUMN_BITS);
636:       assertEquals(32, Node.INCRDECR_PROP);
637:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
638:       assertEquals(1, Node.DECR_FLAG);
639:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
640:       assertEquals(2, Node.POST_FLAG);
641:       assertEquals(56, Node.CHANGE_TIME);
642:       assertEquals(46, Node.IS_NAMESPACE);
643:       assertEquals(47, Node.IS_DISPATCHER);
644:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
645:       assertEquals(49, Node.DIRECT_EVAL);
646:       assertEquals(37, Node.OPT_ARG_NAME);
647:       assertEquals(36, Node.QUOTED_PROP);
648:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
649:       assertEquals(57, Node.LAST_PROP);
650:       assertEquals(30, Node.VAR_ARGS_NAME);
651:       assertEquals(55, Node.INFERRED_FUNCTION);
652:       assertEquals(52, Node.LENGTH);
653:       assertEquals(29, Node.JSDOC_INFO_PROP);
654:       assertEquals(53, Node.INPUT_ID);
655:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
656:       assertEquals(15, Node.NO_SIDE_EFFECTS);
657:       assertEquals(39, Node.EMPTY_BLOCK);
658:       
659:       node0.putProp(4095, (Object) null);
660:       assertFalse(node0.equals((Object)node2));
661:       assertFalse(node0.equals((Object)node1));
662:       assertFalse(node0.isDo());
663:       assertEquals(39, node0.getType());
664:       assertFalse(node0.isContinue());
665:       assertFalse(node0.isWhile());
666:       assertFalse(node0.hasMoreThanOneChild());
667:       assertFalse(node0.isOr());
668:       assertFalse(node0.isLabel());
669:       assertFalse(node0.isAssignAdd());
670:       assertFalse(node0.isBlock());
671:       assertFalse(node0.isAdd());
672:       assertFalse(node0.isReturn());
673:       assertFalse(node0.isNew());
674:       assertFalse(node0.isAssign());
675:       assertFalse(node0.isName());
676:       assertFalse(node0.isGetElem());
677:       assertFalse(node0.isNull());
678:       assertFalse(node0.isTypeOf());
679:       assertFalse(node0.hasChildren());
680:       assertFalse(node0.isDec());
681:       assertFalse(node0.isCatch());
682:       assertFalse(node0.isCall());
683:       assertFalse(node0.isExprResult());
684:       assertFalse(node0.isNot());
685:       assertFalse(node0.isAnd());
686:       assertFalse(node0.isObjectLit());
687:       assertEquals(0, node0.getCharno());
688:       assertFalse(node0.isFunction());
689:       assertFalse(node0.isDebugger());
690:       assertFalse(node0.isSetterDef());
691:       assertFalse(node0.isGetProp());
692:       assertFalse(node0.isFalse());
693:       assertFalse(node0.isThrow());
694:       assertFalse(node0.isCast());
695:       assertFalse(node0.isString());
696:       assertEquals(159744, node0.getSourcePosition());
697:       assertFalse(node0.isIn());
698:       assertFalse(node0.isInc());
699:       assertTrue(node0.isNumber());
700:       assertFalse(node0.isCase());
701:       assertFalse(node0.isFor());
702:       assertFalse(node0.isEmpty());
703:       assertFalse(node0.isDelProp());
704:       assertFalse(node0.isIf());
705:       assertFalse(node0.isNE());
706:       assertFalse(node0.isHook());
707:       assertFalse(node0.isThis());
708:       assertFalse(node0.isComma());
709:       assertFalse(node0.isInstanceOf());
710:       assertFalse(node0.isBreak());
711:       assertFalse(node0.isVoid());
712:       assertFalse(node0.isWith());
713:       assertFalse(node0.isDefaultCase());
714:       assertFalse(node0.isRegExp());
715:       assertFalse(node0.isTrue());
716:       assertEquals(0, node0.getChildCount());
717:       assertFalse(node0.isTry());
718:       assertFalse(node0.isScript());
719:       assertFalse(node0.hasOneChild());
720:       assertFalse(node0.isLabelName());
721:       assertFalse(node0.isStringKey());
722:       assertFalse(node0.isVar());
723:       assertFalse(node0.isGetterDef());
724:       assertEquals(39, node0.getLineno());
725:       assertFalse(node0.isParamList());
726:       assertFalse(node0.isSwitch());
727:       assertFalse(node0.isArrayLit());
728:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
729:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
730:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
731:       assertEquals(8, Node.FLAG_NO_THROWS);
732:       assertEquals(50, Node.FREE_CALL);
733:       assertEquals(4095, Node.COLUMN_MASK);
734:       assertEquals(57, Node.REFLECTED_OBJECT);
735:       assertEquals(48, Node.DIRECTIVES);
736:       assertEquals(40, Node.ORIGINALNAME_PROP);
737:       assertEquals(43, Node.IS_CONSTANT_NAME);
738:       assertEquals(54, Node.SLASH_V);
739:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
740:       assertEquals(51, Node.STATIC_SOURCE_FILE);
741:       assertEquals(12, Node.COLUMN_BITS);
742:       assertEquals(32, Node.INCRDECR_PROP);
743:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
744:       assertEquals(1, Node.DECR_FLAG);
745:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
746:       assertEquals(2, Node.POST_FLAG);
747:       assertEquals(56, Node.CHANGE_TIME);
748:       assertEquals(46, Node.IS_NAMESPACE);
749:       assertEquals(47, Node.IS_DISPATCHER);
750:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
751:       assertEquals(49, Node.DIRECT_EVAL);
752:       assertEquals(37, Node.OPT_ARG_NAME);
753:       assertEquals(36, Node.QUOTED_PROP);
754:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
755:       assertEquals(57, Node.LAST_PROP);
756:       assertEquals(30, Node.VAR_ARGS_NAME);
757:       assertEquals(55, Node.INFERRED_FUNCTION);
758:       assertEquals(52, Node.LENGTH);
759:       assertEquals(29, Node.JSDOC_INFO_PROP);
760:       assertEquals(53, Node.INPUT_ID);
761:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
762:       assertEquals(15, Node.NO_SIDE_EFFECTS);
763:       assertEquals(39, Node.EMPTY_BLOCK);
764:       
765:       int int0 = node0.getIndexOfChild(node1);
766:       assertFalse(node0.equals((Object)node2));
767:       assertFalse(node0.equals((Object)node1));
768:       assertFalse(node1.equals((Object)node2));
769:       assertFalse(node1.equals((Object)node0));
770:       assertNotSame(node1, node2);
771:       assertFalse(node0.isDo());
772:       assertEquals(39, node0.getType());
773:       assertFalse(node0.isContinue());
774:       assertFalse(node0.isWhile());
775:       assertFalse(node0.hasMoreThanOneChild());
776:       assertFalse(node0.isOr());
777:       assertFalse(node0.isLabel());
778:       assertFalse(node0.isAssignAdd());
779:       assertFalse(node0.isBlock());
780:       assertFalse(node0.isAdd());
781:       assertFalse(node0.isReturn());
782:       assertFalse(node0.isNew());
783:       assertFalse(node0.isAssign());
784:       assertFalse(node0.isName());
785:       assertFalse(node0.isGetElem());
786:       assertFalse(node0.isNull());
787:       assertFalse(node0.isTypeOf());
788:       assertFalse(node0.hasChildren());
789:       assertFalse(node0.isDec());
790:       assertFalse(node0.isCatch());
791:       assertFalse(node0.isCall());
792:       assertFalse(node0.isExprResult());
793:       assertFalse(node0.isNot());
794:       assertFalse(node0.isAnd());
795:       assertFalse(node0.isObjectLit());
796:       assertEquals(0, node0.getCharno());
797:       assertFalse(node0.isFunction());
798:       assertFalse(node0.isDebugger());
799:       assertFalse(node0.isSetterDef());
800:       assertFalse(node0.isGetProp());
801:       assertFalse(node0.isFalse());
802:       assertFalse(node0.isThrow());
803:       assertFalse(node0.isCast());
804:       assertFalse(node0.isString());
805:       assertEquals(159744, node0.getSourcePosition());
806:       assertFalse(node0.isIn());
807:       assertFalse(node0.isInc());
808:       assertTrue(node0.isNumber());
809:       assertFalse(node0.isCase());
810:       assertFalse(node0.isFor());
811:       assertFalse(node0.isEmpty());
812:       assertFalse(node0.isDelProp());
813:       assertFalse(node0.isIf());
814:       assertFalse(node0.isNE());
815:       assertFalse(node0.isHook());
816:       assertFalse(node0.isThis());
817:       assertFalse(node0.isComma());
818:       assertFalse(node0.isInstanceOf());
819:       assertFalse(node0.isBreak());
820:       assertFalse(node0.isVoid());
821:       assertFalse(node0.isWith());
822:       assertFalse(node0.isDefaultCase());
823:       assertFalse(node0.isRegExp());
824:       assertFalse(node0.isTrue());
825:       assertEquals(0, node0.getChildCount());
826:       assertFalse(node0.isTry());
827:       assertFalse(node0.isScript());
828:       assertFalse(node0.hasOneChild());
829:       assertFalse(node0.isLabelName());
830:       assertFalse(node0.isStringKey());
831:       assertFalse(node0.isVar());
832:       assertFalse(node0.isGetterDef());
833:       assertEquals(39, node0.getLineno());
834:       assertFalse(node0.isParamList());
835:       assertFalse(node0.isSwitch());
836:       assertFalse(node0.isArrayLit());
837:       assertFalse(node1.isGetterDef());
838:       assertFalse(node1.isDelProp());
839:       assertFalse(node1.isIf());
840:       assertFalse(node1.isFor());
841:       assertFalse(node1.isNE());
842:       assertFalse(node1.isArrayLit());
843:       assertFalse(node1.isFunction());
844:       assertFalse(node1.isString());
845:       assertFalse(node1.isCase());
846:       assertFalse(node1.isRegExp());
847:       assertFalse(node1.isDebugger());
848:       assertFalse(node1.isSwitch());
849:       assertFalse(node1.isTry());
850:       assertFalse(node1.isBreak());
851:       assertFalse(node1.isName());
852:       assertFalse(node1.isComma());
853:       assertFalse(node1.isParamList());
854:       assertFalse(node1.isVar());
855:       assertFalse(node1.isNull());
856:       assertFalse(node1.isStringKey());
857:       assertEquals(0, node1.getChildCount());
858:       assertFalse(node1.isCall());
859:       assertFalse(node1.isDefaultCase());
860:       assertFalse(node1.isDo());
861:       assertFalse(node1.isTrue());
862:       assertFalse(node1.isVoid());
863:       assertFalse(node1.isOr());
864:       assertFalse(node1.isNew());
865:       assertFalse(node1.isEmpty());
866:       assertFalse(node1.isAdd());
867:       assertFalse(node1.hasChildren());
868:       assertFalse(node1.isNumber());
869:       assertFalse(node1.isLabelName());
870:       assertFalse(node1.isTypeOf());
871:       assertFalse(node1.isDec());
872:       assertFalse(node1.isAssign());
873:       assertFalse(node1.isAssignAdd());
874:       assertFalse(node1.isReturn());
875:       assertEquals(32, node1.getLineno());
876:       assertFalse(node1.isLabel());
877:       assertFalse(node1.isContinue());
878:       assertFalse(node1.isExprResult());
879:       assertFalse(node1.hasMoreThanOneChild());
880:       assertFalse(node1.isGetElem());
881:       assertFalse(node1.isCast());
882:       assertFalse(node1.isWhile());
883:       assertFalse(node1.isWith());
884:       assertFalse(node1.isNot());
885:       assertFalse(node1.isAnd());
886:       assertFalse(node1.isBlock());
887:       assertFalse(node1.hasOneChild());
888:       assertFalse(node1.isObjectLit());
889:       assertFalse(node1.isGetProp());
890:       assertFalse(node1.isScript());
891:       assertFalse(node1.isThis());
892:       assertEquals(131072, node1.getSourcePosition());
893:       assertFalse(node1.isThrow());
894:       assertFalse(node1.isHook());
895:       assertFalse(node1.isFalse());
896:       assertFalse(node1.isCatch());
897:       assertFalse(node1.isInstanceOf());
898:       assertEquals(36, node1.getType());
899:       assertEquals(0, node1.getCharno());
900:       assertFalse(node1.isIn());
901:       assertFalse(node1.isSetterDef());
902:       assertFalse(node1.isInc());
903:       assertEquals((-1), int0);
904:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
905:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
906:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
907:       assertEquals(8, Node.FLAG_NO_THROWS);
908:       assertEquals(50, Node.FREE_CALL);
909:       assertEquals(4095, Node.COLUMN_MASK);
910:       assertEquals(57, Node.REFLECTED_OBJECT);
911:       assertEquals(48, Node.DIRECTIVES);
912:       assertEquals(40, Node.ORIGINALNAME_PROP);
913:       assertEquals(43, Node.IS_CONSTANT_NAME);
914:       assertEquals(54, Node.SLASH_V);
915:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
916:       assertEquals(51, Node.STATIC_SOURCE_FILE);
917:       assertEquals(12, Node.COLUMN_BITS);
918:       assertEquals(32, Node.INCRDECR_PROP);
919:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
920:       assertEquals(1, Node.DECR_FLAG);
921:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
922:       assertEquals(2, Node.POST_FLAG);
923:       assertEquals(56, Node.CHANGE_TIME);
924:       assertEquals(46, Node.IS_NAMESPACE);
925:       assertEquals(47, Node.IS_DISPATCHER);
926:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
927:       assertEquals(49, Node.DIRECT_EVAL);
928:       assertEquals(37, Node.OPT_ARG_NAME);
929:       assertEquals(36, Node.QUOTED_PROP);
930:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
931:       assertEquals(57, Node.LAST_PROP);
932:       assertEquals(30, Node.VAR_ARGS_NAME);
933:       assertEquals(55, Node.INFERRED_FUNCTION);
934:       assertEquals(52, Node.LENGTH);
935:       assertEquals(29, Node.JSDOC_INFO_PROP);
936:       assertEquals(53, Node.INPUT_ID);
937:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
938:       assertEquals(15, Node.NO_SIDE_EFFECTS);
939:       assertEquals(39, Node.EMPTY_BLOCK);
940:       assertEquals(54, Node.SLASH_V);
941:       assertEquals(15, Node.NO_SIDE_EFFECTS);
942:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
943:       assertEquals(49, Node.DIRECT_EVAL);
944:       assertEquals(57, Node.LAST_PROP);
945:       assertEquals(51, Node.STATIC_SOURCE_FILE);
946:       assertEquals(1, Node.DECR_FLAG);
947:       assertEquals(57, Node.REFLECTED_OBJECT);
948:       assertEquals(52, Node.LENGTH);
949:       assertEquals(50, Node.FREE_CALL);
950:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
951:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
952:       assertEquals(39, Node.EMPTY_BLOCK);
953:       assertEquals(2, Node.POST_FLAG);
954:       assertEquals(47, Node.IS_DISPATCHER);
955:       assertEquals(46, Node.IS_NAMESPACE);
956:       assertEquals(40, Node.ORIGINALNAME_PROP);
957:       assertEquals(30, Node.VAR_ARGS_NAME);
958:       assertEquals(36, Node.QUOTED_PROP);
959:       assertEquals(53, Node.INPUT_ID);
960:       assertEquals(43, Node.IS_CONSTANT_NAME);
961:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
962:       assertEquals(55, Node.INFERRED_FUNCTION);
963:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
964:       assertEquals(29, Node.JSDOC_INFO_PROP);
965:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
966:       assertEquals(37, Node.OPT_ARG_NAME);
967:       assertEquals(8, Node.FLAG_NO_THROWS);
968:       assertEquals(48, Node.DIRECTIVES);
969:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
970:       assertEquals(32, Node.INCRDECR_PROP);
971:       assertEquals(56, Node.CHANGE_TIME);
972:       assertEquals(12, Node.COLUMN_BITS);
973:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
974:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
975:       assertEquals(4095, Node.COLUMN_MASK);
976:       
977:       Iterable<Node> iterable0 = node0.children();
978:       assertFalse(node0.equals((Object)node2));
979:       assertFalse(node0.equals((Object)node1));
980:       assertFalse(node0.isDo());
981:       assertEquals(39, node0.getType());
982:       assertFalse(node0.isContinue());
983:       assertFalse(node0.isWhile());
984:       assertFalse(node0.hasMoreThanOneChild());
985:       assertFalse(node0.isOr());
986:       assertFalse(node0.isLabel());
987:       assertFalse(node0.isAssignAdd());
988:       assertFalse(node0.isBlock());
989:       assertFalse(node0.isAdd());
990:       assertFalse(node0.isReturn());
991:       assertFalse(node0.isNew());
992:       assertFalse(node0.isAssign());
993:       assertFalse(node0.isName());
994:       assertFalse(node0.isGetElem());
995:       assertFalse(node0.isNull());
996:       assertFalse(node0.isTypeOf());
997:       assertFalse(node0.hasChildren());
998:       assertFalse(node0.isDec());
999:       assertFalse(node0.isCatch());
1000:       assertFalse(node0.isCall());
1001:       assertFalse(node0.isExprResult());
1002:       assertFalse(node0.isNot());
1003:       assertFalse(node0.isAnd());
1004:       assertFalse(node0.isObjectLit());
1005:       assertEquals(0, node0.getCharno());
1006:       assertFalse(node0.isFunction());
1007:       assertFalse(node0.isDebugger());
1008:       assertFalse(node0.isSetterDef());
1009:       assertFalse(node0.isGetProp());
1010:       assertFalse(node0.isFalse());
1011:       assertFalse(node0.isThrow());
1012:       assertFalse(node0.isCast());
1013:       assertFalse(node0.isString());
1014:       assertEquals(159744, node0.getSourcePosition());
1015:       assertFalse(node0.isIn());
1016:       assertFalse(node0.isInc());
1017:       assertTrue(node0.isNumber());
1018:       assertFalse(node0.isCase());
1019:       assertFalse(node0.isFor());
1020:       assertFalse(node0.isEmpty());
1021:       assertFalse(node0.isDelProp());
1022:       assertFalse(node0.isIf());
1023:       assertFalse(node0.isNE());
1024:       assertFalse(node0.isHook());
1025:       assertFalse(node0.isThis());
1026:       assertFalse(node0.isComma());
1027:       assertFalse(node0.isInstanceOf());
1028:       assertFalse(node0.isBreak());
1029:       assertFalse(node0.isVoid());
1030:       assertFalse(node0.isWith());
1031:       assertFalse(node0.isDefaultCase());
1032:       assertFalse(node0.isRegExp());
1033:       assertFalse(node0.isTrue());
1034:       assertEquals(0, node0.getChildCount());
1035:       assertFalse(node0.isTry());
1036:       assertFalse(node0.isScript());
1037:       assertFalse(node0.hasOneChild());
1038:       assertFalse(node0.isLabelName());
1039:       assertFalse(node0.isStringKey());
1040:       assertFalse(node0.isVar());
1041:       assertFalse(node0.isGetterDef());
1042:       assertEquals(39, node0.getLineno());
1043:       assertFalse(node0.isParamList());
1044:       assertFalse(node0.isSwitch());
1045:       assertFalse(node0.isArrayLit());
1046:       assertFalse(iterable0.contains(node2));
1047:       assertNotNull(iterable0);
1048:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1049:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1050:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1051:       assertEquals(8, Node.FLAG_NO_THROWS);
1052:       assertEquals(50, Node.FREE_CALL);
1053:       assertEquals(4095, Node.COLUMN_MASK);
1054:       assertEquals(57, Node.REFLECTED_OBJECT);
1055:       assertEquals(48, Node.DIRECTIVES);
1056:       assertEquals(40, Node.ORIGINALNAME_PROP);
1057:       assertEquals(43, Node.IS_CONSTANT_NAME);
1058:       assertEquals(54, Node.SLASH_V);
1059:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1060:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1061:       assertEquals(12, Node.COLUMN_BITS);
1062:       assertEquals(32, Node.INCRDECR_PROP);
1063:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1064:       assertEquals(1, Node.DECR_FLAG);
1065:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1066:       assertEquals(2, Node.POST_FLAG);
1067:       assertEquals(56, Node.CHANGE_TIME);
1068:       assertEquals(46, Node.IS_NAMESPACE);
1069:       assertEquals(47, Node.IS_DISPATCHER);
1070:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1071:       assertEquals(49, Node.DIRECT_EVAL);
1072:       assertEquals(37, Node.OPT_ARG_NAME);
1073:       assertEquals(36, Node.QUOTED_PROP);
1074:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1075:       assertEquals(57, Node.LAST_PROP);
1076:       assertEquals(30, Node.VAR_ARGS_NAME);
1077:       assertEquals(55, Node.INFERRED_FUNCTION);
1078:       assertEquals(52, Node.LENGTH);
1079:       assertEquals(29, Node.JSDOC_INFO_PROP);
1080:       assertEquals(53, Node.INPUT_ID);
1081:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1082:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1083:       assertEquals(39, Node.EMPTY_BLOCK);
1084:       
1085:       boolean boolean1 = node2.isIn();
1086:       assertFalse(node2.equals((Object)node1));
1087:       assertFalse(node2.equals((Object)node0));
1088:       assertTrue(boolean1 == boolean0);
1089:       assertNotSame(node2, node1);
1090:       assertFalse(node2.isNE());
1091:       assertFalse(node2.isIf());
1092:       assertFalse(node2.isDelProp());
1093:       assertFalse(node2.isFor());
1094:       assertFalse(node2.isTrue());
1095:       assertFalse(node2.isVoid());
1096:       assertFalse(node2.isThrow());
1097:       assertFalse(node2.isDefaultCase());
1098:       assertFalse(node2.isEmpty());
1099:       assertFalse(node2.isInc());
1100:       assertFalse(node2.isIn());
1101:       assertFalse(node2.isGetProp());
1102:       assertFalse(node2.isAnd());
1103:       assertFalse(node2.isBreak());
1104:       assertFalse(node2.isCall());
1105:       assertFalse(node2.isExprResult());
1106:       assertFalse(node2.isComma());
1107:       assertFalse(node2.isFalse());
1108:       assertFalse(node2.isFunction());
1109:       assertFalse(node2.isString());
1110:       assertFalse(node2.isNot());
1111:       assertEquals((-1), node2.getSourcePosition());
1112:       assertFalse(node2.isObjectLit());
1113:       assertFalse(node2.isDebugger());
1114:       assertFalse(node2.isOr());
1115:       assertEquals((-1), node2.getLineno());
1116:       assertFalse(node2.isLabel());
1117:       assertFalse(node2.isReturn());
1118:       assertFalse(node2.isAssignAdd());
1119:       assertFalse(node2.isWhile());
1120:       assertFalse(node2.hasChildren());
1121:       assertFalse(node2.isDec());
1122:       assertFalse(node2.isAssign());
1123:       assertFalse(node2.isGetElem());
1124:       assertFalse(node2.isContinue());
1125:       assertFalse(node2.isCast());
1126:       assertFalse(node2.isTypeOf());
1127:       assertFalse(node2.hasMoreThanOneChild());
1128:       assertFalse(node2.isVar());
1129:       assertFalse(node2.isNew());
1130:       assertFalse(node2.isAdd());
1131:       assertFalse(node2.isName());
1132:       assertFalse(node2.isDo());
1133:       assertFalse(node2.isNull());
1134:       assertFalse(node2.isSetterDef());
1135:       assertEquals(46, node2.getType());
1136:       assertEquals(0, node2.getChildCount());
1137:       assertFalse(node2.isInstanceOf());
1138:       assertFalse(node2.isParamList());
1139:       assertFalse(node2.isThis());
1140:       assertFalse(node2.isCatch());
1141:       assertFalse(node2.isRegExp());
1142:       assertFalse(node2.isWith());
1143:       assertFalse(node2.hasOneChild());
1144:       assertFalse(node2.isBlock());
1145:       assertFalse(node2.isArrayLit());
1146:       assertFalse(node2.isHook());
1147:       assertFalse(node2.isStringKey());
1148:       assertFalse(node2.isLabelName());
1149:       assertFalse(node2.isTry());
1150:       assertFalse(node2.isSwitch());
1151:       assertFalse(node2.isGetterDef());
1152:       assertFalse(node2.isScript());
1153:       assertFalse(node2.isCase());
1154:       assertEquals((-1), node2.getCharno());
1155:       assertFalse(node2.isNumber());
1156:       assertFalse(boolean1);
1157:       assertEquals(40, Node.ORIGINALNAME_PROP);
1158:       assertEquals(57, Node.REFLECTED_OBJECT);
1159:       assertEquals(8, Node.FLAG_NO_THROWS);
1160:       assertEquals(39, Node.EMPTY_BLOCK);
1161:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1162:       assertEquals(54, Node.SLASH_V);
1163:       assertEquals(52, Node.LENGTH);
1164:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1165:       assertEquals(50, Node.FREE_CALL);
1166:       assertEquals(4095, Node.COLUMN_MASK);
1167:       assertEquals(12, Node.COLUMN_BITS);
1168:       assertEquals(1, Node.DECR_FLAG);
1169:       assertEquals(48, Node.DIRECTIVES);
1170:       assertEquals(49, Node.DIRECT_EVAL);
1171:       assertEquals(32, Node.INCRDECR_PROP);
1172:       assertEquals(37, Node.OPT_ARG_NAME);
1173:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1174:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1175:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1176:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1177:       assertEquals(29, Node.JSDOC_INFO_PROP);
1178:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1179:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1180:       assertEquals(43, Node.IS_CONSTANT_NAME);
1181:       assertEquals(56, Node.CHANGE_TIME);
1182:       assertEquals(53, Node.INPUT_ID);
1183:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1184:       assertEquals(36, Node.QUOTED_PROP);
1185:       assertEquals(55, Node.INFERRED_FUNCTION);
1186:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1187:       assertEquals(46, Node.IS_NAMESPACE);
1188:       assertEquals(57, Node.LAST_PROP);
1189:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1190:       assertEquals(47, Node.IS_DISPATCHER);
1191:       assertEquals(30, Node.VAR_ARGS_NAME);
1192:       assertEquals(2, Node.POST_FLAG);
1193:       
1194:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
1195:       assertFalse(node0.equals((Object)node2));
1196:       assertFalse(node0.equals((Object)node1));
1197:       assertFalse(node2.equals((Object)node1));
1198:       assertFalse(node2.equals((Object)node0));
1199:       assertNotSame(node2, node1);
1200:       assertFalse(node0.isDo());
1201:       assertEquals(39, node0.getType());
1202:       assertFalse(node0.isContinue());
1203:       assertFalse(node0.isWhile());
1204:       assertFalse(node0.hasMoreThanOneChild());
1205:       assertFalse(node0.isOr());
1206:       assertFalse(node0.isLabel());
1207:       assertFalse(node0.isAssignAdd());
1208:       assertFalse(node0.isBlock());
1209:       assertFalse(node0.isAdd());
1210:       assertFalse(node0.isReturn());
1211:       assertFalse(node0.isNew());
1212:       assertFalse(node0.isAssign());
1213:       assertFalse(node0.isName());
1214:       assertFalse(node0.isGetElem());
1215:       assertFalse(node0.isNull());
1216:       assertFalse(node0.isTypeOf());
1217:       assertFalse(node0.hasChildren());
1218:       assertFalse(node0.isDec());
1219:       assertFalse(node0.isCatch());
1220:       assertFalse(node0.isCall());
1221:       assertFalse(node0.isExprResult());
1222:       assertFalse(node0.isNot());
1223:       assertFalse(node0.isAnd());
1224:       assertFalse(node0.isObjectLit());
1225:       assertEquals(0, node0.getCharno());
1226:       assertFalse(node0.isFunction());
1227:       assertFalse(node0.isDebugger());
1228:       assertFalse(node0.isSetterDef());
1229:       assertFalse(node0.isGetProp());
1230:       assertFalse(node0.isFalse());
1231:       assertFalse(node0.isThrow());
1232:       assertFalse(node0.isCast());
1233:       assertFalse(node0.isString());
1234:       assertEquals(159744, node0.getSourcePosition());
1235:       assertFalse(node0.isIn());
1236:       assertFalse(node0.isInc());
1237:       assertTrue(node0.isNumber());
1238:       assertFalse(node0.isCase());
1239:       assertFalse(node0.isFor());
1240:       assertFalse(node0.isEmpty());
1241:       assertFalse(node0.isDelProp());
1242:       assertFalse(node0.isIf());
1243:       assertFalse(node0.isNE());
1244:       assertFalse(node0.isHook());
1245:       assertFalse(node0.isThis());
1246:       assertFalse(node0.isComma());
1247:       assertFalse(node0.isInstanceOf());
1248:       assertFalse(node0.isBreak());
1249:       assertFalse(node0.isVoid());
1250:       assertFalse(node0.isWith());
1251:       assertFalse(node0.isDefaultCase());
1252:       assertFalse(node0.isRegExp());
1253:       assertFalse(node0.isTrue());
1254:       assertEquals(0, node0.getChildCount());
1255:       assertFalse(node0.isTry());
1256:       assertFalse(node0.isScript());
1257:       assertFalse(node0.hasOneChild());
1258:       assertFalse(node0.isLabelName());
1259:       assertFalse(node0.isStringKey());
1260:       assertFalse(node0.isVar());
1261:       assertFalse(node0.isGetterDef());
1262:       assertEquals(39, node0.getLineno());
1263:       assertFalse(node0.isParamList());
1264:       assertFalse(node0.isSwitch());
1265:       assertFalse(node0.isArrayLit());
1266:       assertFalse(node2.isNE());
1267:       assertFalse(node2.isIf());
1268:       assertFalse(node2.isDelProp());
1269:       assertFalse(node2.isFor());
1270:       assertFalse(node2.isTrue());
1271:       assertFalse(node2.isVoid());
1272:       assertFalse(node2.isThrow());
1273:       assertFalse(node2.isDefaultCase());
1274:       assertFalse(node2.isEmpty());
1275:       assertFalse(node2.isInc());
1276:       assertFalse(node2.isIn());
1277:       assertFalse(node2.isGetProp());
1278:       assertFalse(node2.isAnd());
1279:       assertFalse(node2.isBreak());
1280:       assertFalse(node2.isCall());
1281:       assertFalse(node2.isExprResult());
1282:       assertFalse(node2.isComma());
1283:       assertFalse(node2.isFalse());
1284:       assertFalse(node2.isFunction());
1285:       assertFalse(node2.isString());
1286:       assertFalse(node2.isNot());
1287:       assertEquals((-1), node2.getSourcePosition());
1288:       assertFalse(node2.isObjectLit());
1289:       assertFalse(node2.isDebugger());
1290:       assertFalse(node2.isOr());
1291:       assertEquals((-1), node2.getLineno());
1292:       assertFalse(node2.isLabel());
1293:       assertFalse(node2.isReturn());
1294:       assertFalse(node2.isAssignAdd());
1295:       assertFalse(node2.isWhile());
1296:       assertFalse(node2.hasChildren());
1297:       assertFalse(node2.isDec());
1298:       assertFalse(node2.isAssign());
1299:       assertFalse(node2.isGetElem());
1300:       assertFalse(node2.isContinue());
1301:       assertFalse(node2.isCast());
1302:       assertFalse(node2.isTypeOf());
1303:       assertFalse(node2.hasMoreThanOneChild());
1304:       assertFalse(node2.isVar());
1305:       assertFalse(node2.isNew());
1306:       assertFalse(node2.isAdd());
1307:       assertFalse(node2.isName());
1308:       assertFalse(node2.isDo());
1309:       assertFalse(node2.isNull());
1310:       assertFalse(node2.isSetterDef());
1311:       assertEquals(46, node2.getType());
1312:       assertEquals(0, node2.getChildCount());
1313:       assertFalse(node2.isInstanceOf());
1314:       assertFalse(node2.isParamList());
1315:       assertFalse(node2.isThis());
1316:       assertFalse(node2.isCatch());
1317:       assertFalse(node2.isRegExp());
1318:       assertFalse(node2.isWith());
1319:       assertFalse(node2.hasOneChild());
1320:       assertFalse(node2.isBlock());
1321:       assertFalse(node2.isArrayLit());
1322:       assertFalse(node2.isHook());
1323:       assertFalse(node2.isStringKey());
1324:       assertFalse(node2.isLabelName());
1325:       assertFalse(node2.isTry());
1326:       assertFalse(node2.isSwitch());
1327:       assertFalse(node2.isGetterDef());
1328:       assertFalse(node2.isScript());
1329:       assertFalse(node2.isCase());
1330:       assertEquals((-1), node2.getCharno());
1331:       assertFalse(node2.isNumber());
1332:       assertNotNull(node_NodeMismatch0);
1333:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1335:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1336:       assertEquals(8, Node.FLAG_NO_THROWS);
1337:       assertEquals(50, Node.FREE_CALL);
1338:       assertEquals(4095, Node.COLUMN_MASK);
1339:       assertEquals(57, Node.REFLECTED_OBJECT);
1340:       assertEquals(48, Node.DIRECTIVES);
1341:       assertEquals(40, Node.ORIGINALNAME_PROP);
1342:       assertEquals(43, Node.IS_CONSTANT_NAME);
1343:       assertEquals(54, Node.SLASH_V);
1344:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1345:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1346:       assertEquals(12, Node.COLUMN_BITS);
1347:       assertEquals(32, Node.INCRDECR_PROP);
1348:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1349:       assertEquals(1, Node.DECR_FLAG);
1350:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1351:       assertEquals(2, Node.POST_FLAG);
1352:       assertEquals(56, Node.CHANGE_TIME);
1353:       assertEquals(46, Node.IS_NAMESPACE);
1354:       assertEquals(47, Node.IS_DISPATCHER);
1355:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1356:       assertEquals(49, Node.DIRECT_EVAL);
1357:       assertEquals(37, Node.OPT_ARG_NAME);
1358:       assertEquals(36, Node.QUOTED_PROP);
1359:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1360:       assertEquals(57, Node.LAST_PROP);
1361:       assertEquals(30, Node.VAR_ARGS_NAME);
1362:       assertEquals(55, Node.INFERRED_FUNCTION);
1363:       assertEquals(52, Node.LENGTH);
1364:       assertEquals(29, Node.JSDOC_INFO_PROP);
1365:       assertEquals(53, Node.INPUT_ID);
1366:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1367:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1368:       assertEquals(39, Node.EMPTY_BLOCK);
1369:       assertEquals(40, Node.ORIGINALNAME_PROP);
1370:       assertEquals(57, Node.REFLECTED_OBJECT);
1371:       assertEquals(8, Node.FLAG_NO_THROWS);
1372:       assertEquals(39, Node.EMPTY_BLOCK);
1373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1374:       assertEquals(54, Node.SLASH_V);
1375:       assertEquals(52, Node.LENGTH);
1376:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1377:       assertEquals(50, Node.FREE_CALL);
1378:       assertEquals(4095, Node.COLUMN_MASK);
1379:       assertEquals(12, Node.COLUMN_BITS);
1380:       assertEquals(1, Node.DECR_FLAG);
1381:       assertEquals(48, Node.DIRECTIVES);
1382:       assertEquals(49, Node.DIRECT_EVAL);
1383:       assertEquals(32, Node.INCRDECR_PROP);
1384:       assertEquals(37, Node.OPT_ARG_NAME);
1385:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1386:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1387:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1388:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1389:       assertEquals(29, Node.JSDOC_INFO_PROP);
1390:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1391:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1392:       assertEquals(43, Node.IS_CONSTANT_NAME);
1393:       assertEquals(56, Node.CHANGE_TIME);
1394:       assertEquals(53, Node.INPUT_ID);
1395:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1396:       assertEquals(36, Node.QUOTED_PROP);
1397:       assertEquals(55, Node.INFERRED_FUNCTION);
1398:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1399:       assertEquals(46, Node.IS_NAMESPACE);
1400:       assertEquals(57, Node.LAST_PROP);
1401:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1402:       assertEquals(47, Node.IS_DISPATCHER);
1403:       assertEquals(30, Node.VAR_ARGS_NAME);
1404:       assertEquals(2, Node.POST_FLAG);
1405:       
1406:       Node node3 = new Node(39, node1, node2);
1407:       assertFalse(node1.equals((Object)node2));
1408:       assertFalse(node1.equals((Object)node0));
1409:       assertFalse(node2.equals((Object)node1));
1410:       assertFalse(node2.equals((Object)node0));
1411:       assertFalse(node3.equals((Object)node2));
1412:       assertFalse(node3.equals((Object)node0));
1413:       assertFalse(node3.equals((Object)node1));
1414:       assertFalse(node1.isGetterDef());
1415:       assertFalse(node1.isDelProp());
1416:       assertFalse(node1.isIf());
1417:       assertFalse(node1.isFor());
1418:       assertFalse(node1.isNE());
1419:       assertFalse(node1.isArrayLit());
1420:       assertFalse(node1.isFunction());
1421:       assertFalse(node1.isString());
1422:       assertFalse(node1.isCase());
1423:       assertFalse(node1.isRegExp());
1424:       assertFalse(node1.isDebugger());
1425:       assertFalse(node1.isSwitch());
1426:       assertFalse(node1.isTry());
1427:       assertFalse(node1.isBreak());
1428:       assertFalse(node1.isName());
1429:       assertFalse(node1.isComma());
1430:       assertFalse(node1.isParamList());
1431:       assertFalse(node1.isVar());
1432:       assertFalse(node1.isNull());
1433:       assertFalse(node1.isStringKey());
1434:       assertEquals(0, node1.getChildCount());
1435:       assertFalse(node1.isCall());
1436:       assertFalse(node1.isDefaultCase());
1437:       assertFalse(node1.isDo());
1438:       assertFalse(node1.isTrue());
1439:       assertFalse(node1.isVoid());
1440:       assertFalse(node1.isOr());
1441:       assertFalse(node1.isNew());
1442:       assertFalse(node1.isEmpty());
1443:       assertFalse(node1.isAdd());
1444:       assertFalse(node1.hasChildren());
1445:       assertFalse(node1.isNumber());
1446:       assertFalse(node1.isLabelName());
1447:       assertFalse(node1.isTypeOf());
1448:       assertFalse(node1.isDec());
1449:       assertFalse(node1.isAssign());
1450:       assertFalse(node1.isAssignAdd());
1451:       assertFalse(node1.isReturn());
1452:       assertEquals(32, node1.getLineno());
1453:       assertFalse(node1.isLabel());
1454:       assertFalse(node1.isContinue());
1455:       assertFalse(node1.isExprResult());
1456:       assertFalse(node1.hasMoreThanOneChild());
1457:       assertFalse(node1.isGetElem());
1458:       assertFalse(node1.isCast());
1459:       assertFalse(node1.isWhile());
1460:       assertFalse(node1.isWith());
1461:       assertFalse(node1.isNot());
1462:       assertFalse(node1.isAnd());
1463:       assertFalse(node1.isBlock());
1464:       assertFalse(node1.hasOneChild());
1465:       assertFalse(node1.isObjectLit());
1466:       assertFalse(node1.isGetProp());
1467:       assertFalse(node1.isScript());
1468:       assertFalse(node1.isThis());
1469:       assertEquals(131072, node1.getSourcePosition());
1470:       assertFalse(node1.isThrow());
1471:       assertFalse(node1.isHook());
1472:       assertFalse(node1.isFalse());
1473:       assertFalse(node1.isCatch());
1474:       assertFalse(node1.isInstanceOf());
1475:       assertEquals(36, node1.getType());
1476:       assertEquals(0, node1.getCharno());
1477:       assertFalse(node1.isIn());
1478:       assertFalse(node1.isSetterDef());
1479:       assertFalse(node1.isInc());
1480:       assertFalse(node2.isNE());
1481:       assertFalse(node2.isIf());
1482:       assertFalse(node2.isDelProp());
1483:       assertFalse(node2.isFor());
1484:       assertFalse(node2.isTrue());
1485:       assertFalse(node2.isVoid());
1486:       assertFalse(node2.isThrow());
1487:       assertFalse(node2.isDefaultCase());
1488:       assertFalse(node2.isEmpty());
1489:       assertFalse(node2.isInc());
1490:       assertFalse(node2.isIn());
1491:       assertFalse(node2.isGetProp());
1492:       assertFalse(node2.isAnd());
1493:       assertFalse(node2.isBreak());
1494:       assertFalse(node2.isCall());
1495:       assertFalse(node2.isExprResult());
1496:       assertFalse(node2.isComma());
1497:       assertFalse(node2.isFalse());
1498:       assertFalse(node2.isFunction());
1499:       assertFalse(node2.isString());
1500:       assertFalse(node2.isNot());
1501:       assertEquals((-1), node2.getSourcePosition());
1502:       assertFalse(node2.isObjectLit());
1503:       assertFalse(node2.isDebugger());
1504:       assertFalse(node2.isOr());
1505:       assertEquals((-1), node2.getLineno());
1506:       assertFalse(node2.isLabel());
1507:       assertFalse(node2.isReturn());
1508:       assertFalse(node2.isAssignAdd());
1509:       assertFalse(node2.isWhile());
1510:       assertFalse(node2.hasChildren());
1511:       assertFalse(node2.isDec());
1512:       assertFalse(node2.isAssign());
1513:       assertFalse(node2.isGetElem());
1514:       assertFalse(node2.isContinue());
1515:       assertFalse(node2.isCast());
1516:       assertFalse(node2.isTypeOf());
1517:       assertFalse(node2.hasMoreThanOneChild());
1518:       assertFalse(node2.isVar());
1519:       assertFalse(node2.isNew());
1520:       assertFalse(node2.isAdd());
1521:       assertFalse(node2.isName());
1522:       assertFalse(node2.isDo());
1523:       assertFalse(node2.isNull());
1524:       assertFalse(node2.isSetterDef());
1525:       assertEquals(46, node2.getType());
1526:       assertEquals(0, node2.getChildCount());
1527:       assertFalse(node2.isInstanceOf());
1528:       assertFalse(node2.isParamList());
1529:       assertFalse(node2.isThis());
1530:       assertFalse(node2.isCatch());
1531:       assertFalse(node2.isRegExp());
1532:       assertFalse(node2.isWith());
1533:       assertFalse(node2.hasOneChild());
1534:       assertFalse(node2.isBlock());
1535:       assertFalse(node2.isArrayLit());
1536:       assertFalse(node2.isHook());
1537:       assertFalse(node2.isStringKey());
1538:       assertFalse(node2.isLabelName());
1539:       assertFalse(node2.isTry());
1540:       assertFalse(node2.isSwitch());
1541:       assertFalse(node2.isGetterDef());
1542:       assertFalse(node2.isScript());
1543:       assertFalse(node2.isCase());
1544:       assertEquals((-1), node2.getCharno());
1545:       assertFalse(node2.isNumber());
1546:       assertFalse(node3.isScript());
1547:       assertFalse(node3.isExprResult());
1548:       assertFalse(node3.isNot());
1549:       assertFalse(node3.isWith());
1550:       assertFalse(node3.hasOneChild());
1551:       assertFalse(node3.isGetProp());
1552:       assertEquals(2, node3.getChildCount());
1553:       assertFalse(node3.isLabel());
1554:       assertEquals((-1), node3.getSourcePosition());
1555:       assertFalse(node3.isFalse());
1556:       assertFalse(node3.isObjectLit());
1557:       assertFalse(node3.isAnd());
1558:       assertFalse(node3.isContinue());
1559:       assertFalse(node3.isCast());
1560:       assertFalse(node3.isLabelName());
1561:       assertFalse(node3.isNew());
1562:       assertFalse(node3.isAdd());
1563:       assertFalse(node3.isString());
1564:       assertFalse(node3.isVar());
1565:       assertTrue(node3.isNumber());
1566:       assertFalse(node3.isWhile());
1567:       assertFalse(node3.isAssignAdd());
1568:       assertFalse(node3.isDo());
1569:       assertFalse(node3.isComma());
1570:       assertFalse(node3.isNull());
1571:       assertFalse(node3.isReturn());
1572:       assertFalse(node3.isDec());
1573:       assertFalse(node3.isOr());
1574:       assertFalse(node3.isTypeOf());
1575:       assertFalse(node3.isAssign());
1576:       assertFalse(node3.isCall());
1577:       assertFalse(node3.isGetElem());
1578:       assertFalse(node3.isBreak());
1579:       assertFalse(node3.isDelProp());
1580:       assertTrue(node3.hasMoreThanOneChild());
1581:       assertFalse(node3.isName());
1582:       assertFalse(node3.isDebugger());
1583:       assertFalse(node3.isVoid());
1584:       assertFalse(node3.isTrue());
1585:       assertFalse(node3.isRegExp());
1586:       assertFalse(node3.isFunction());
1587:       assertFalse(node3.isFor());
1588:       assertFalse(node3.isEmpty());
1589:       assertFalse(node3.isDefaultCase());
1590:       assertFalse(node3.isTry());
1591:       assertFalse(node3.isParamList());
1592:       assertFalse(node3.isGetterDef());
1593:       assertFalse(node3.isStringKey());
1594:       assertFalse(node3.isArrayLit());
1595:       assertFalse(node3.isSwitch());
1596:       assertEquals((-1), node3.getCharno());
1597:       assertFalse(node3.isBlock());
1598:       assertFalse(node3.isInc());
1599:       assertFalse(node3.isThrow());
1600:       assertFalse(node3.isCase());
1601:       assertEquals(39, node3.getType());
1602:       assertFalse(node3.isHook());
1603:       assertFalse(node3.isNE());
1604:       assertTrue(node3.hasChildren());
1605:       assertFalse(node3.isSetterDef());
1606:       assertFalse(node3.isThis());
1607:       assertFalse(node3.isIn());
1608:       assertFalse(node3.isInstanceOf());
1609:       assertFalse(node3.isCatch());
1610:       assertFalse(node3.isIf());
1611:       assertEquals((-1), node3.getLineno());
1612:       assertNotNull(node3);
1613:       assertEquals(54, Node.SLASH_V);
1614:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1615:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1616:       assertEquals(49, Node.DIRECT_EVAL);
1617:       assertEquals(57, Node.LAST_PROP);
1618:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1619:       assertEquals(1, Node.DECR_FLAG);
1620:       assertEquals(57, Node.REFLECTED_OBJECT);
1621:       assertEquals(52, Node.LENGTH);
1622:       assertEquals(50, Node.FREE_CALL);
1623:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1624:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1625:       assertEquals(39, Node.EMPTY_BLOCK);
1626:       assertEquals(2, Node.POST_FLAG);
1627:       assertEquals(47, Node.IS_DISPATCHER);
1628:       assertEquals(46, Node.IS_NAMESPACE);
1629:       assertEquals(40, Node.ORIGINALNAME_PROP);
1630:       assertEquals(30, Node.VAR_ARGS_NAME);
1631:       assertEquals(36, Node.QUOTED_PROP);
1632:       assertEquals(53, Node.INPUT_ID);
1633:       assertEquals(43, Node.IS_CONSTANT_NAME);
1634:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1635:       assertEquals(55, Node.INFERRED_FUNCTION);
1636:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1637:       assertEquals(29, Node.JSDOC_INFO_PROP);
1638:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1639:       assertEquals(37, Node.OPT_ARG_NAME);
1640:       assertEquals(8, Node.FLAG_NO_THROWS);
1641:       assertEquals(48, Node.DIRECTIVES);
1642:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1643:       assertEquals(32, Node.INCRDECR_PROP);
1644:       assertEquals(56, Node.CHANGE_TIME);
1645:       assertEquals(12, Node.COLUMN_BITS);
1646:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1647:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1648:       assertEquals(4095, Node.COLUMN_MASK);
1649:       assertEquals(40, Node.ORIGINALNAME_PROP);
1650:       assertEquals(57, Node.REFLECTED_OBJECT);
1651:       assertEquals(8, Node.FLAG_NO_THROWS);
1652:       assertEquals(39, Node.EMPTY_BLOCK);
1653:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1654:       assertEquals(54, Node.SLASH_V);
1655:       assertEquals(52, Node.LENGTH);
1656:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1657:       assertEquals(50, Node.FREE_CALL);
1658:       assertEquals(4095, Node.COLUMN_MASK);
1659:       assertEquals(12, Node.COLUMN_BITS);
1660:       assertEquals(1, Node.DECR_FLAG);
1661:       assertEquals(48, Node.DIRECTIVES);
1662:       assertEquals(49, Node.DIRECT_EVAL);
1663:       assertEquals(32, Node.INCRDECR_PROP);
1664:       assertEquals(37, Node.OPT_ARG_NAME);
1665:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1666:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1667:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1668:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1669:       assertEquals(29, Node.JSDOC_INFO_PROP);
1670:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1671:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1672:       assertEquals(43, Node.IS_CONSTANT_NAME);
1673:       assertEquals(56, Node.CHANGE_TIME);
1674:       assertEquals(53, Node.INPUT_ID);
1675:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1676:       assertEquals(36, Node.QUOTED_PROP);
1677:       assertEquals(55, Node.INFERRED_FUNCTION);
1678:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1679:       assertEquals(46, Node.IS_NAMESPACE);
1680:       assertEquals(57, Node.LAST_PROP);
1681:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1682:       assertEquals(47, Node.IS_DISPATCHER);
1683:       assertEquals(30, Node.VAR_ARGS_NAME);
1684:       assertEquals(2, Node.POST_FLAG);
1685:       assertEquals(32, Node.INCRDECR_PROP);
1686:       assertEquals(12, Node.COLUMN_BITS);
1687:       assertEquals(46, Node.IS_NAMESPACE);
1688:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1689:       assertEquals(2, Node.POST_FLAG);
1690:       assertEquals(30, Node.VAR_ARGS_NAME);
1691:       assertEquals(56, Node.CHANGE_TIME);
1692:       assertEquals(37, Node.OPT_ARG_NAME);
1693:       assertEquals(49, Node.DIRECT_EVAL);
1694:       assertEquals(52, Node.LENGTH);
1695:       assertEquals(53, Node.INPUT_ID);
1696:       assertEquals(57, Node.REFLECTED_OBJECT);
1697:       assertEquals(36, Node.QUOTED_PROP);
1698:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1699:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1700:       assertEquals(57, Node.LAST_PROP);
1701:       assertEquals(47, Node.IS_DISPATCHER);
1702:       assertEquals(29, Node.JSDOC_INFO_PROP);
1703:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1704:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1705:       assertEquals(39, Node.EMPTY_BLOCK);
1706:       assertEquals(55, Node.INFERRED_FUNCTION);
1707:       assertEquals(8, Node.FLAG_NO_THROWS);
1708:       assertEquals(4095, Node.COLUMN_MASK);
1709:       assertEquals(43, Node.IS_CONSTANT_NAME);
1710:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1711:       assertEquals(40, Node.ORIGINALNAME_PROP);
1712:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1713:       assertEquals(48, Node.DIRECTIVES);
1714:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1715:       assertEquals(54, Node.SLASH_V);
1716:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1717:       assertEquals(50, Node.FREE_CALL);
1718:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1719:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1720:       assertEquals(1, Node.DECR_FLAG);
1721:       
1722:       node3.addChildBefore(node0, node2);
1723:       assertFalse(node0.equals((Object)node3));
1724:       assertFalse(node0.equals((Object)node2));
1725:       assertFalse(node0.equals((Object)node1));
1726:       assertFalse(node1.equals((Object)node3));
1727:       assertFalse(node1.equals((Object)node2));
1728:       assertFalse(node1.equals((Object)node0));
1729:       assertFalse(node2.equals((Object)node1));
1730:       assertFalse(node2.equals((Object)node3));
1731:       assertFalse(node2.equals((Object)node0));
1732:       assertFalse(node3.equals((Object)node2));
1733:       assertFalse(node3.equals((Object)node0));
1734:       assertFalse(node3.equals((Object)node1));
1735:       assertNotSame(node1, node2);
1736:       assertNotSame(node2, node1);
1737:       assertFalse(node0.isDo());
1738:       assertEquals(39, node0.getType());
1739:       assertFalse(node0.isContinue());
1740:       assertFalse(node0.isWhile());
1741:       assertFalse(node0.hasMoreThanOneChild());
1742:       assertFalse(node0.isOr());
1743:       assertFalse(node0.isLabel());
1744:       assertFalse(node0.isAssignAdd());
1745:       assertFalse(node0.isBlock());
1746:       assertFalse(node0.isAdd());
1747:       assertFalse(node0.isReturn());
1748:       assertFalse(node0.isNew());
1749:       assertFalse(node0.isAssign());
1750:       assertFalse(node0.isName());
1751:       assertFalse(node0.isGetElem());
1752:       assertFalse(node0.isNull());
1753:       assertFalse(node0.isTypeOf());
1754:       assertFalse(node0.hasChildren());
1755:       assertFalse(node0.isDec());
1756:       assertFalse(node0.isCatch());
1757:       assertFalse(node0.isCall());
1758:       assertFalse(node0.isExprResult());
1759:       assertFalse(node0.isNot());
1760:       assertFalse(node0.isAnd());
1761:       assertFalse(node0.isObjectLit());
1762:       assertEquals(0, node0.getCharno());
1763:       assertFalse(node0.isFunction());
1764:       assertFalse(node0.isDebugger());
1765:       assertFalse(node0.isSetterDef());
1766:       assertFalse(node0.isGetProp());
1767:       assertFalse(node0.isFalse());
1768:       assertFalse(node0.isThrow());
1769:       assertFalse(node0.isCast());
1770:       assertFalse(node0.isString());
1771:       assertEquals(159744, node0.getSourcePosition());
1772:       assertFalse(node0.isIn());
1773:       assertFalse(node0.isInc());
1774:       assertTrue(node0.isNumber());
1775:       assertFalse(node0.isCase());
1776:       assertFalse(node0.isFor());
1777:       assertFalse(node0.isEmpty());
1778:       assertFalse(node0.isDelProp());
1779:       assertFalse(node0.isIf());
1780:       assertFalse(node0.isNE());
1781:       assertFalse(node0.isHook());
1782:       assertFalse(node0.isThis());
1783:       assertFalse(node0.isComma());
1784:       assertFalse(node0.isInstanceOf());
1785:       assertFalse(node0.isBreak());
1786:       assertFalse(node0.isVoid());
1787:       assertFalse(node0.isWith());
1788:       assertFalse(node0.isDefaultCase());
1789:       assertFalse(node0.isRegExp());
1790:       assertFalse(node0.isTrue());
1791:       assertEquals(0, node0.getChildCount());
1792:       assertFalse(node0.isTry());
1793:       assertFalse(node0.isScript());
1794:       assertFalse(node0.hasOneChild());
1795:       assertFalse(node0.isLabelName());
1796:       assertFalse(node0.isStringKey());
1797:       assertFalse(node0.isVar());
1798:       assertFalse(node0.isGetterDef());
1799:       assertEquals(39, node0.getLineno());
1800:       assertFalse(node0.isParamList());
1801:       assertFalse(node0.isSwitch());
1802:       assertFalse(node0.isArrayLit());
1803:       assertFalse(node1.isGetterDef());
1804:       assertFalse(node1.isDelProp());
1805:       assertFalse(node1.isIf());
1806:       assertFalse(node1.isFor());
1807:       assertFalse(node1.isNE());
1808:       assertFalse(node1.isArrayLit());
1809:       assertFalse(node1.isFunction());
1810:       assertFalse(node1.isString());
1811:       assertFalse(node1.isCase());
1812:       assertFalse(node1.isRegExp());
1813:       assertFalse(node1.isDebugger());
1814:       assertFalse(node1.isSwitch());
1815:       assertFalse(node1.isTry());
1816:       assertFalse(node1.isBreak());
1817:       assertFalse(node1.isName());
1818:       assertFalse(node1.isComma());
1819:       assertFalse(node1.isParamList());
1820:       assertFalse(node1.isVar());
1821:       assertFalse(node1.isNull());
1822:       assertFalse(node1.isStringKey());
1823:       assertEquals(0, node1.getChildCount());
1824:       assertFalse(node1.isCall());
1825:       assertFalse(node1.isDefaultCase());
1826:       assertFalse(node1.isDo());
1827:       assertFalse(node1.isTrue());
1828:       assertFalse(node1.isVoid());
1829:       assertFalse(node1.isOr());
1830:       assertFalse(node1.isNew());
1831:       assertFalse(node1.isEmpty());
1832:       assertFalse(node1.isAdd());
1833:       assertFalse(node1.hasChildren());
1834:       assertFalse(node1.isNumber());
1835:       assertFalse(node1.isLabelName());
1836:       assertFalse(node1.isTypeOf());
1837:       assertFalse(node1.isDec());
1838:       assertFalse(node1.isAssign());
1839:       assertFalse(node1.isAssignAdd());
1840:       assertFalse(node1.isReturn());
1841:       assertEquals(32, node1.getLineno());
1842:       assertFalse(node1.isLabel());
1843:       assertFalse(node1.isContinue());
1844:       assertFalse(node1.isExprResult());
1845:       assertFalse(node1.hasMoreThanOneChild());
1846:       assertFalse(node1.isGetElem());
1847:       assertFalse(node1.isCast());
1848:       assertFalse(node1.isWhile());
1849:       assertFalse(node1.isWith());
1850:       assertFalse(node1.isNot());
1851:       assertFalse(node1.isAnd());
1852:       assertFalse(node1.isBlock());
1853:       assertFalse(node1.hasOneChild());
1854:       assertFalse(node1.isObjectLit());
1855:       assertFalse(node1.isGetProp());
1856:       assertFalse(node1.isScript());
1857:       assertFalse(node1.isThis());
1858:       assertEquals(131072, node1.getSourcePosition());
1859:       assertFalse(node1.isThrow());
1860:       assertFalse(node1.isHook());
1861:       assertFalse(node1.isFalse());
1862:       assertFalse(node1.isCatch());
1863:       assertFalse(node1.isInstanceOf());
1864:       assertEquals(36, node1.getType());
1865:       assertEquals(0, node1.getCharno());
1866:       assertFalse(node1.isIn());
1867:       assertFalse(node1.isSetterDef());
1868:       assertFalse(node1.isInc());
1869:       assertFalse(node2.isNE());
1870:       assertFalse(node2.isIf());
1871:       assertFalse(node2.isDelProp());
1872:       assertFalse(node2.isFor());
1873:       assertFalse(node2.isTrue());
1874:       assertFalse(node2.isVoid());
1875:       assertFalse(node2.isThrow());
1876:       assertFalse(node2.isDefaultCase());
1877:       assertFalse(node2.isEmpty());
1878:       assertFalse(node2.isInc());
1879:       assertFalse(node2.isIn());
1880:       assertFalse(node2.isGetProp());
1881:       assertFalse(node2.isAnd());
1882:       assertFalse(node2.isBreak());
1883:       assertFalse(node2.isCall());
1884:       assertFalse(node2.isExprResult());
1885:       assertFalse(node2.isComma());
1886:       assertFalse(node2.isFalse());
1887:       assertFalse(node2.isFunction());
1888:       assertFalse(node2.isString());
1889:       assertFalse(node2.isNot());
1890:       assertEquals((-1), node2.getSourcePosition());
1891:       assertFalse(node2.isObjectLit());
1892:       assertFalse(node2.isDebugger());
1893:       assertFalse(node2.isOr());
1894:       assertEquals((-1), node2.getLineno());
1895:       assertFalse(node2.isLabel());
1896:       assertFalse(node2.isReturn());
1897:       assertFalse(node2.isAssignAdd());
1898:       assertFalse(node2.isWhile());
1899:       assertFalse(node2.hasChildren());
1900:       assertFalse(node2.isDec());
1901:       assertFalse(node2.isAssign());
1902:       assertFalse(node2.isGetElem());
1903:       assertFalse(node2.isContinue());
1904:       assertFalse(node2.isCast());
1905:       assertFalse(node2.isTypeOf());
1906:       assertFalse(node2.hasMoreThanOneChild());
1907:       assertFalse(node2.isVar());
1908:       assertFalse(node2.isNew());
1909:       assertFalse(node2.isAdd());
1910:       assertFalse(node2.isName());
1911:       assertFalse(node2.isDo());
1912:       assertFalse(node2.isNull());
1913:       assertFalse(node2.isSetterDef());
1914:       assertEquals(46, node2.getType());
1915:       assertEquals(0, node2.getChildCount());
1916:       assertFalse(node2.isInstanceOf());
1917:       assertFalse(node2.isParamList());
1918:       assertFalse(node2.isThis());
1919:       assertFalse(node2.isCatch());
1920:       assertFalse(node2.isRegExp());
1921:       assertFalse(node2.isWith());
1922:       assertFalse(node2.hasOneChild());
1923:       assertFalse(node2.isBlock());
1924:       assertFalse(node2.isArrayLit());
1925:       assertFalse(node2.isHook());
1926:       assertFalse(node2.isStringKey());
1927:       assertFalse(node2.isLabelName());
1928:       assertFalse(node2.isTry());
1929:       assertFalse(node2.isSwitch());
1930:       assertFalse(node2.isGetterDef());
1931:       assertFalse(node2.isScript());
1932:       assertFalse(node2.isCase());
1933:       assertEquals((-1), node2.getCharno());
1934:       assertFalse(node2.isNumber());
1935:       assertFalse(node3.isScript());
1936:       assertFalse(node3.isExprResult());
1937:       assertFalse(node3.isNot());
1938:       assertFalse(node3.isWith());
1939:       assertFalse(node3.hasOneChild());
1940:       assertFalse(node3.isGetProp());
1941:       assertFalse(node3.isLabel());
1942:       assertEquals((-1), node3.getSourcePosition());
1943:       assertFalse(node3.isFalse());
1944:       assertFalse(node3.isObjectLit());
1945:       assertFalse(node3.isAnd());
1946:       assertFalse(node3.isContinue());
1947:       assertFalse(node3.isCast());
1948:       assertFalse(node3.isLabelName());
1949:       assertFalse(node3.isNew());
1950:       assertFalse(node3.isAdd());
1951:       assertFalse(node3.isString());
1952:       assertFalse(node3.isVar());
1953:       assertTrue(node3.isNumber());
1954:       assertFalse(node3.isWhile());
1955:       assertFalse(node3.isAssignAdd());
1956:       assertFalse(node3.isDo());
1957:       assertFalse(node3.isComma());
1958:       assertEquals(3, node3.getChildCount());
1959:       assertFalse(node3.isNull());
1960:       assertFalse(node3.isReturn());
1961:       assertFalse(node3.isDec());
1962:       assertFalse(node3.isOr());
1963:       assertFalse(node3.isTypeOf());
1964:       assertFalse(node3.isAssign());
1965:       assertFalse(node3.isCall());
1966:       assertFalse(node3.isGetElem());
1967:       assertFalse(node3.isBreak());
1968:       assertFalse(node3.isDelProp());
1969:       assertTrue(node3.hasMoreThanOneChild());
1970:       assertFalse(node3.isName());
1971:       assertFalse(node3.isDebugger());
1972:       assertFalse(node3.isVoid());
1973:       assertFalse(node3.isTrue());
1974:       assertFalse(node3.isRegExp());
1975:       assertFalse(node3.isFunction());
1976:       assertFalse(node3.isFor());
1977:       assertFalse(node3.isEmpty());
1978:       assertFalse(node3.isDefaultCase());
1979:       assertFalse(node3.isTry());
1980:       assertFalse(node3.isParamList());
1981:       assertFalse(node3.isGetterDef());
1982:       assertFalse(node3.isStringKey());
1983:       assertFalse(node3.isArrayLit());
1984:       assertFalse(node3.isSwitch());
1985:       assertEquals((-1), node3.getCharno());
1986:       assertFalse(node3.isBlock());
1987:       assertFalse(node3.isInc());
1988:       assertFalse(node3.isThrow());
1989:       assertFalse(node3.isCase());
1990:       assertEquals(39, node3.getType());
1991:       assertFalse(node3.isHook());
1992:       assertFalse(node3.isNE());
1993:       assertTrue(node3.hasChildren());
1994:       assertFalse(node3.isSetterDef());
1995:       assertFalse(node3.isThis());
1996:       assertFalse(node3.isIn());
1997:       assertFalse(node3.isInstanceOf());
1998:       assertFalse(node3.isCatch());
1999:       assertFalse(node3.isIf());
2000:       assertEquals((-1), node3.getLineno());
2001:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2002:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2003:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2004:       assertEquals(8, Node.FLAG_NO_THROWS);
2005:       assertEquals(50, Node.FREE_CALL);
2006:       assertEquals(4095, Node.COLUMN_MASK);
2007:       assertEquals(57, Node.REFLECTED_OBJECT);
2008:       assertEquals(48, Node.DIRECTIVES);
2009:       assertEquals(40, Node.ORIGINALNAME_PROP);
2010:       
2011:       boolean boolean2 = node1.isUnscopedQualifiedName();
2012:       assertFalse(node1.equals((Object)node3));
2013:       assertFalse(node1.equals((Object)node2));
2014:       assertFalse(node1.equals((Object)node0));
2015:       assertTrue(boolean2 == boolean1);
2016:       assertTrue(boolean2 == boolean0);
2017:       assertNotSame(node1, node2);
2018:       assertFalse(node1.isGetterDef());
2019:       assertFalse(node1.isDelProp());
2020:       assertFalse(node1.isIf());
2021:       assertFalse(node1.isFor());
2022:       assertFalse(node1.isNE());
2023:       assertFalse(node1.isArrayLit());
2024:       assertFalse(node1.isFunction());
2025:       assertFalse(node1.isString());
2026:       assertFalse(node1.isCase());
2027:       assertFalse(node1.isRegExp());
2028:       assertFalse(node1.isDebugger());
2029:       assertFalse(node1.isSwitch());
2030:       assertFalse(node1.isTry());
2031:       assertFalse(node1.isBreak());
2032:       assertFalse(node1.isName());
2033:       assertFalse(node1.isComma());
2034:       assertFalse(node1.isParamList());
2035:       assertFalse(node1.isVar());
2036:       assertFalse(node1.isNull());
2037:       assertFalse(node1.isStringKey());
2038:       assertEquals(0, node1.getChildCount());
2039:       assertFalse(node1.isCall());
2040:       assertFalse(node1.isDefaultCase());
2041:       assertFalse(node1.isDo());
2042:       assertFalse(node1.isTrue());
2043:       assertFalse(node1.isVoid());
2044:       assertFalse(node1.isOr());
2045:       assertFalse(node1.isNew());
2046:       assertFalse(node1.isEmpty());
2047:       assertFalse(node1.isAdd());
2048:       assertFalse(node1.hasChildren());
2049:       assertFalse(node1.isNumber());
2050:       assertFalse(node1.isLabelName());
2051:       assertFalse(node1.isTypeOf());
2052:       assertFalse(node1.isDec());
2053:       assertFalse(node1.isAssign());
2054:       assertFalse(node1.isAssignAdd());
2055:       assertFalse(node1.isReturn());
2056:       assertEquals(32, node1.getLineno());
2057:       assertFalse(node1.isLabel());
2058:       assertFalse(node1.isContinue());
2059:       assertFalse(node1.isExprResult());
2060:       assertFalse(node1.hasMoreThanOneChild());
2061:       assertFalse(node1.isGetElem());
2062:       assertFalse(node1.isCast());
2063:       assertFalse(node1.isWhile());
2064:       assertFalse(node1.isWith());
2065:       assertFalse(node1.isNot());
2066:       assertFalse(node1.isAnd());
2067:       assertFalse(node1.isBlock());
2068:       assertFalse(node1.hasOneChild());
2069:       assertFalse(node1.isObjectLit());
2070:       assertFalse(node1.isGetProp());
2071:       assertFalse(node1.isScript());
2072:       assertFalse(node1.isThis());
2073:       assertEquals(131072, node1.getSourcePosition());
2074:       assertFalse(node1.isThrow());
2075:       assertFalse(node1.isHook());
2076:       assertFalse(node1.isFalse());
2077:       assertFalse(node1.isCatch());
2078:       assertFalse(node1.isInstanceOf());
2079:       assertEquals(36, node1.getType());
2080:       assertEquals(0, node1.getCharno());
2081:       assertFalse(node1.isIn());
2082:       assertFalse(node1.isSetterDef());
2083:       assertFalse(node1.isInc());
2084:       assertFalse(boolean2);
2085:       
2086:       Node node4 = Node.newString(36, "");
2087:       assertFalse(node4.equals((Object)node0));
2088:       assertFalse(node4.equals((Object)node1));
2089:       assertFalse(node4.equals((Object)node2));
2090:       assertFalse(node4.equals((Object)node3));
2091:       assertNotSame(node4, node1);
2092:       assertNotSame(node4, node2);
2093:       assertFalse(node4.isFalse());
2094:       assertFalse(node4.isThrow());
2095:       assertFalse(node4.isBreak());
2096:       assertEquals((-1), node4.getCharno());
2097:       assertFalse(node4.isAnd());
2098:       assertFalse(node4.isSwitch());
2099:       assertFalse(node4.isCase());
2100:       assertFalse(node4.isNot());
2101:       assertFalse(node4.isInstanceOf());
2102:       assertFalse(node4.isScript());
2103:       assertFalse(node4.isObjectLit());
2104:       assertFalse(node4.isString());
2105:       assertFalse(node4.isWith());
2106:       assertFalse(node4.isThis());
2107:       assertFalse(node4.isComma());
2108:       assertFalse(node4.isGetProp());
2109:       assertFalse(node4.hasOneChild());
2110:       assertFalse(node4.isHook());
2111:       assertFalse(node4.isGetElem());
2112:       assertFalse(node4.isLabelName());
2113:       assertFalse(node4.isEmpty());
2114:       assertFalse(node4.isAssign());
2115:       assertFalse(node4.hasChildren());
2116:       assertFalse(node4.isNumber());
2117:       assertFalse(node4.isTypeOf());
2118:       assertFalse(node4.isGetterDef());
2119:       assertFalse(node4.isDec());
2120:       assertFalse(node4.isOr());
2121:       assertFalse(node4.isVoid());
2122:       assertFalse(node4.isTrue());
2123:       assertFalse(node4.isExprResult());
2124:       assertFalse(node4.isArrayLit());
2125:       assertFalse(node4.isDelProp());
2126:       assertFalse(node4.isDo());
2127:       assertEquals(0, node4.getChildCount());
2128:       assertFalse(node4.isNew());
2129:       assertFalse(node4.isAdd());
2130:       assertFalse(node4.isLabel());
2131:       assertFalse(node4.isVar());
2132:       assertFalse(node4.isAssignAdd());
2133:       assertFalse(node4.isDefaultCase());
2134:       assertFalse(node4.isStringKey());
2135:       assertFalse(node4.isName());
2136:       assertFalse(node4.isCall());
2137:       assertFalse(node4.isNull());
2138:       assertFalse(node4.isParamList());
2139:       assertFalse(node4.isRegExp());
2140:       assertFalse(node4.isCatch());
2141:       assertFalse(node4.hasMoreThanOneChild());
2142:       assertFalse(node4.isBlock());
2143:       assertFalse(node4.isTry());
2144:       assertFalse(node4.isReturn());
2145:       assertFalse(node4.isWhile());
2146:       assertFalse(node4.isFor());
2147:       assertEquals((-1), node4.getSourcePosition());
2148:       assertFalse(node4.isCast());
2149:       assertEquals((-1), node4.getLineno());
2150:       assertFalse(node4.isDebugger());
2151:       assertFalse(node4.isNE());
2152:       assertFalse(node4.isIf());
2153:       assertEquals(36, node4.getType());
2154:       assertFalse(node4.isFunction());
2155:       assertFalse(node4.isContinue());
2156:       assertFalse(node4.isIn());
2157:       assertFalse(node4.isSetterDef());
2158:       assertFalse(node4.isInc());
2159:       assertNotNull(node4);
2160:       
2161:       boolean boolean3 = node0.isFor();
2162:       assertFalse(node0.equals((Object)node3));
2163:       assertFalse(node0.equals((Object)node2));
2164:       assertFalse(node0.equals((Object)node4));
2165:       assertFalse(node0.equals((Object)node1));
2166:       assertTrue(boolean3 == boolean0);
2167:       assertTrue(boolean3 == boolean1);
2168:       assertTrue(boolean3 == boolean2);
2169:       assertFalse(node0.isDo());
2170:       assertEquals(39, node0.getType());
2171:       assertFalse(node0.isContinue());
2172:       assertFalse(node0.isWhile());
2173:       assertFalse(node0.hasMoreThanOneChild());
2174:       assertFalse(node0.isOr());
2175:       assertFalse(node0.isLabel());
2176:       assertFalse(node0.isAssignAdd());
2177:       assertFalse(node0.isBlock());
2178:       assertFalse(node0.isAdd());
2179:       assertFalse(node0.isReturn());
2180:       assertFalse(node0.isNew());
2181:       assertFalse(node0.isAssign());
2182:       assertFalse(node0.isName());
2183:       assertFalse(node0.isGetElem());
2184:       assertFalse(node0.isNull());
2185:       assertFalse(node0.isTypeOf());
2186:       assertFalse(node0.hasChildren());
2187:       assertFalse(node0.isDec());
2188:       assertFalse(node0.isCatch());
2189:       assertFalse(node0.isCall());
2190:       assertFalse(node0.isExprResult());
2191:       assertFalse(node0.isNot());
2192:       assertFalse(node0.isAnd());
2193:       assertFalse(node0.isObjectLit());
2194:       assertEquals(0, node0.getCharno());
2195:       assertFalse(node0.isFunction());
2196:       assertFalse(node0.isDebugger());
2197:       assertFalse(node0.isSetterDef());
2198:       assertFalse(node0.isGetProp());
2199:       assertFalse(node0.isFalse());
2200:       assertFalse(node0.isThrow());
2201:       assertFalse(node0.isCast());
2202:       assertFalse(node0.isString());
2203:       assertEquals(159744, node0.getSourcePosition());
2204:       assertFalse(node0.isIn());
2205:       assertFalse(node0.isInc());
2206:       assertTrue(node0.isNumber());
2207:       assertFalse(node0.isCase());
2208:       assertFalse(node0.isFor());
2209:       assertFalse(node0.isEmpty());
2210:       assertFalse(node0.isDelProp());
2211:       assertFalse(node0.isIf());
2212:       assertFalse(node0.isNE());
2213:       assertFalse(node0.isHook());
2214:       assertFalse(node0.isThis());
2215:       assertFalse(node0.isComma());
2216:       assertFalse(node0.isInstanceOf());
2217:       assertFalse(node0.isBreak());
2218:       assertFalse(node0.isVoid());
2219:       assertFalse(node0.isWith());
2220:       assertFalse(node0.isDefaultCase());
2221:       assertFalse(node0.isRegExp());
2222:       assertFalse(node0.isTrue());
2223:       assertEquals(0, node0.getChildCount());
2224:       assertFalse(node0.isTry());
2225:       assertFalse(node0.isScript());
2226:       assertFalse(node0.hasOneChild());
2227:       assertFalse(node0.isLabelName());
2228:       assertFalse(node0.isStringKey());
2229:       assertFalse(node0.isVar());
2230:       assertFalse(node0.isGetterDef());
2231:       assertEquals(39, node0.getLineno());
2232:       assertFalse(node0.isParamList());
2233:       assertFalse(node0.isSwitch());
2234:       assertFalse(node0.isArrayLit());
2235:       assertFalse(boolean3);
2236:       
2237:       boolean boolean4 = node2.isDefaultCase();
2238:       assertTrue(boolean4 == boolean1);
2239:       assertTrue(boolean4 == boolean0);
2240:       assertTrue(boolean4 == boolean2);
2241:       assertTrue(boolean4 == boolean3);
2242:       assertFalse(node2.equals((Object)node1));
2243:       assertFalse(node2.equals((Object)node4));
2244:       assertFalse(node2.equals((Object)node3));
2245:       assertFalse(node2.equals((Object)node0));
2246:       assertNotSame(node2, node1);
2247:       assertNotSame(node2, node4);
2248:       assertFalse(node2.isNE());
2249:       assertFalse(node2.isIf());
2250:       assertFalse(node2.isDelProp());
2251:       assertFalse(node2.isFor());
2252:       assertFalse(node2.isTrue());
2253:       assertFalse(node2.isVoid());
2254:       assertFalse(node2.isThrow());
2255:       assertFalse(node2.isDefaultCase());
2256:       assertFalse(node2.isEmpty());
2257:       assertFalse(node2.isInc());
2258:       assertFalse(node2.isIn());
2259:       assertFalse(node2.isGetProp());
2260:       assertFalse(node2.isAnd());
2261:       assertFalse(node2.isBreak());
2262:       assertFalse(node2.isCall());
2263:       assertFalse(node2.isExprResult());
2264:       assertFalse(node2.isComma());
2265:       assertFalse(node2.isFalse());
2266:       assertFalse(node2.isFunction());
2267:       assertFalse(node2.isString());
2268:       assertFalse(node2.isNot());
2269:       assertEquals((-1), node2.getSourcePosition());
2270:       assertFalse(node2.isObjectLit());
2271:       assertFalse(node2.isDebugger());
2272:       assertFalse(node2.isOr());
2273:       assertEquals((-1), node2.getLineno());
2274:       assertFalse(node2.isLabel());
2275:       assertFalse(node2.isReturn());
2276:       assertFalse(node2.isAssignAdd());
2277:       assertFalse(node2.isWhile());
2278:       assertFalse(node2.hasChildren());
2279:       assertFalse(node2.isDec());
2280:       assertFalse(node2.isAssign());
2281:       assertFalse(node2.isGetElem());
2282:       assertFalse(node2.isContinue());
2283:       assertFalse(node2.isCast());
2284:       assertFalse(node2.isTypeOf());
2285:       assertFalse(node2.hasMoreThanOneChild());
2286:       assertFalse(node2.isVar());
2287:       assertFalse(node2.isNew());
2288:       assertFalse(node2.isAdd());
2289:       assertFalse(node2.isName());
2290:       assertFalse(node2.isDo());
2291:       assertFalse(node2.isNull());
2292:       assertFalse(node2.isSetterDef());
2293:       assertEquals(46, node2.getType());
2294:       assertEquals(0, node2.getChildCount());
2295:       assertFalse(node2.isInstanceOf());
2296:       assertFalse(node2.isParamList());
2297:       assertFalse(node2.isThis());
2298:       assertFalse(node2.isCatch());
2299:       assertFalse(node2.isRegExp());
2300:       assertFalse(node2.isWith());
2301:       assertFalse(node2.hasOneChild());
2302:       assertFalse(node2.isBlock());
2303:       assertFalse(node2.isArrayLit());
2304:       assertFalse(node2.isHook());
2305:       assertFalse(node2.isStringKey());
2306:       assertFalse(node2.isLabelName());
2307:       assertFalse(node2.isTry());
2308:       assertFalse(node2.isSwitch());
2309:       assertFalse(node2.isGetterDef());
2310:       assertFalse(node2.isScript());
2311:       assertFalse(node2.isCase());
2312:       assertEquals((-1), node2.getCharno());
2313:       assertFalse(node2.isNumber());
2314:       assertFalse(boolean4);
2315:       
2316:       boolean boolean5 = node3.isStringKey();
2317:       assertTrue(boolean5 == boolean4);
2318:       assertTrue(boolean5 == boolean2);
2319:       assertTrue(boolean5 == boolean1);
2320:       assertTrue(boolean5 == boolean3);
2321:       assertTrue(boolean5 == boolean0);
2322:       assertFalse(node1.equals((Object)node3));
2323:       assertFalse(node1.equals((Object)node4));
2324:       assertFalse(node1.equals((Object)node2));
2325:       assertFalse(node1.equals((Object)node0));
2326:       assertFalse(node2.equals((Object)node1));
2327:       assertFalse(node2.equals((Object)node4));
2328:       assertFalse(node2.equals((Object)node3));
2329:       assertFalse(node2.equals((Object)node0));
2330:       assertFalse(node3.equals((Object)node2));
2331:       assertFalse(node3.equals((Object)node0));
2332:       assertFalse(node3.equals((Object)node1));
2333:       assertFalse(node3.equals((Object)node4));
2334:       assertNotSame(node1, node4);
2335:       assertNotSame(node1, node2);
2336:       assertNotSame(node2, node1);
2337:       assertNotSame(node2, node4);
2338:       assertFalse(node1.isGetterDef());
2339:       assertFalse(node1.isDelProp());
2340:       assertFalse(node1.isIf());
2341:       assertFalse(node1.isFor());
2342:       assertFalse(node1.isNE());
2343:       assertFalse(node1.isArrayLit());
2344:       assertFalse(node1.isFunction());
2345:       assertFalse(node1.isString());
2346:       assertFalse(node1.isCase());
2347:       assertFalse(node1.isRegExp());
2348:       assertFalse(node1.isDebugger());
2349:       assertFalse(node1.isSwitch());
2350:       assertFalse(node1.isTry());
2351:       assertFalse(node1.isBreak());
2352:       assertFalse(node1.isName());
2353:       assertFalse(node1.isComma());
2354:       assertFalse(node1.isParamList());
2355:       assertFalse(node1.isVar());
2356:       assertFalse(node1.isNull());
2357:       assertFalse(node1.isStringKey());
2358:       assertEquals(0, node1.getChildCount());
2359:       assertFalse(node1.isCall());
2360:       assertFalse(node1.isDefaultCase());
2361:       assertFalse(node1.isDo());
2362:       assertFalse(node1.isTrue());
2363:       assertFalse(node1.isVoid());
2364:       assertFalse(node1.isOr());
2365:       assertFalse(node1.isNew());
2366:       assertFalse(node1.isEmpty());
2367:       assertFalse(node1.isAdd());
2368:       assertFalse(node1.hasChildren());
2369:       assertFalse(node1.isNumber());
2370:       assertFalse(node1.isLabelName());
2371:       assertFalse(node1.isTypeOf());
2372:       assertFalse(node1.isDec());
2373:       assertFalse(node1.isAssign());
2374:       assertFalse(node1.isAssignAdd());
2375:       assertFalse(node1.isReturn());
2376:       assertEquals(32, node1.getLineno());
2377:       assertFalse(node1.isLabel());
2378:       assertFalse(node1.isContinue());
2379:       assertFalse(node1.isExprResult());
2380:       assertFalse(node1.hasMoreThanOneChild());
2381:       assertFalse(node1.isGetElem());
2382:       assertFalse(node1.isCast());
2383:       assertFalse(node1.isWhile());
2384:       assertFalse(node1.isWith());
2385:       assertFalse(node1.isNot());
2386:       assertFalse(node1.isAnd());
2387:       assertFalse(node1.isBlock());
2388:       assertFalse(node1.hasOneChild());
2389:       assertFalse(node1.isObjectLit());
2390:       assertFalse(node1.isGetProp());
2391:       assertFalse(node1.isScript());
2392:       assertFalse(node1.isThis());
2393:       assertEquals(131072, node1.getSourcePosition());
2394:       assertFalse(node1.isThrow());
2395:       assertFalse(node1.isHook());
2396:       assertFalse(node1.isFalse());
2397:       assertFalse(node1.isCatch());
2398:       assertFalse(node1.isInstanceOf());
2399:       assertEquals(36, node1.getType());
2400:       assertEquals(0, node1.getCharno());
2401:       assertFalse(node1.isIn());
2402:       assertFalse(node1.isSetterDef());
2403:       assertFalse(node1.isInc());
2404:       assertFalse(node2.isNE());
2405:       assertFalse(node2.isIf());
2406:       assertFalse(node2.isDelProp());
2407:       assertFalse(node2.isFor());
2408:       assertFalse(node2.isTrue());
2409:       assertFalse(node2.isVoid());
2410:       assertFalse(node2.isThrow());
2411:       assertFalse(node2.isDefaultCase());
2412:       assertFalse(node2.isEmpty());
2413:       assertFalse(node2.isInc());
2414:       assertFalse(node2.isIn());
2415:       assertFalse(node2.isGetProp());
2416:       assertFalse(node2.isAnd());
2417:       assertFalse(node2.isBreak());
2418:       assertFalse(node2.isCall());
2419:       assertFalse(node2.isExprResult());
2420:       assertFalse(node2.isComma());
2421:       assertFalse(node2.isFalse());
2422:       assertFalse(node2.isFunction());
2423:       assertFalse(node2.isString());
2424:       assertFalse(node2.isNot());
2425:       assertEquals((-1), node2.getSourcePosition());
2426:       assertFalse(node2.isObjectLit());
2427:       assertFalse(node2.isDebugger());
2428:       assertFalse(node2.isOr());
2429:       assertEquals((-1), node2.getLineno());
2430:       assertFalse(node2.isLabel());
2431:       assertFalse(node2.isReturn());
2432:       assertFalse(node2.isAssignAdd());
2433:       assertFalse(node2.isWhile());
2434:       assertFalse(node2.hasChildren());
2435:       assertFalse(node2.isDec());
2436:       assertFalse(node2.isAssign());
2437:       assertFalse(node2.isGetElem());
2438:       assertFalse(node2.isContinue());
2439:       assertFalse(node2.isCast());
2440:       assertFalse(node2.isTypeOf());
2441:       assertFalse(node2.hasMoreThanOneChild());
2442:       assertFalse(node2.isVar());
2443:       assertFalse(node2.isNew());
2444:       assertFalse(node2.isAdd());
2445:       assertFalse(node2.isName());
2446:       assertFalse(node2.isDo());
2447:       assertFalse(node2.isNull());
2448:       assertFalse(node2.isSetterDef());
2449:       assertEquals(46, node2.getType());
2450:       assertEquals(0, node2.getChildCount());
2451:       assertFalse(node2.isInstanceOf());
2452:       assertFalse(node2.isParamList());
2453:       assertFalse(node2.isThis());
2454:       assertFalse(node2.isCatch());
2455:       assertFalse(node2.isRegExp());
2456:       assertFalse(node2.isWith());
2457:       assertFalse(node2.hasOneChild());
2458:       assertFalse(node2.isBlock());
2459:       assertFalse(node2.isArrayLit());
2460:       assertFalse(node2.isHook());
2461:       assertFalse(node2.isStringKey());
2462:       assertFalse(node2.isLabelName());
2463:       assertFalse(node2.isTry());
2464:       assertFalse(node2.isSwitch());
2465:       assertFalse(node2.isGetterDef());
2466:       assertFalse(node2.isScript());
2467:       assertFalse(node2.isCase());
2468:       assertEquals((-1), node2.getCharno());
2469:       assertFalse(node2.isNumber());
2470:       assertFalse(node3.isScript());
2471:       assertFalse(node3.isExprResult());
2472:       assertFalse(node3.isNot());
2473:       assertFalse(node3.isWith());
2474:       assertFalse(node3.hasOneChild());
2475:       assertFalse(node3.isGetProp());
2476:       assertFalse(node3.isLabel());
2477:       assertEquals((-1), node3.getSourcePosition());
2478:       assertFalse(node3.isFalse());
2479:       assertFalse(node3.isObjectLit());
2480:       assertFalse(node3.isAnd());
2481:       assertFalse(node3.isContinue());
2482:       assertFalse(node3.isCast());
2483:       assertFalse(node3.isLabelName());
2484:       assertFalse(node3.isNew());
2485:       assertFalse(node3.isAdd());
2486:       assertFalse(node3.isString());
2487:       assertFalse(node3.isVar());
2488:       assertTrue(node3.isNumber());
2489:       assertFalse(node3.isWhile());
2490:       assertFalse(node3.isAssignAdd());
2491:       assertFalse(node3.isDo());
2492:       assertFalse(node3.isComma());
2493:       assertEquals(3, node3.getChildCount());
2494:       assertFalse(node3.isNull());
2495:       assertFalse(node3.isReturn());
2496:       assertFalse(node3.isDec());
2497:       assertFalse(node3.isOr());
2498:       assertFalse(node3.isTypeOf());
2499:       assertFalse(node3.isAssign());
2500:       assertFalse(node3.isCall());
2501:       assertFalse(node3.isGetElem());
2502:       assertFalse(node3.isBreak());
2503:       assertFalse(node3.isDelProp());
2504:       assertTrue(node3.hasMoreThanOneChild());
2505:       assertFalse(node3.isName());
2506:       assertFalse(node3.isDebugger());
2507:       assertFalse(node3.isVoid());
2508:       assertFalse(node3.isTrue());
2509:       assertFalse(node3.isRegExp());
2510:       assertFalse(node3.isFunction());
2511:       assertFalse(node3.isFor());
2512:       assertFalse(node3.isEmpty());
2513:       assertFalse(node3.isDefaultCase());
2514:       assertFalse(node3.isTry());
2515:       assertFalse(node3.isParamList());
2516:       assertFalse(node3.isGetterDef());
2517:       assertFalse(node3.isStringKey());
2518:       assertFalse(node3.isArrayLit());
2519:       assertFalse(node3.isSwitch());
2520:       assertEquals((-1), node3.getCharno());
2521:       assertFalse(node3.isBlock());
2522:       assertFalse(node3.isInc());
2523:       assertFalse(node3.isThrow());
2524:       assertFalse(node3.isCase());
2525:       assertEquals(39, node3.getType());
2526:       assertFalse(node3.isHook());
2527:       assertFalse(node3.isNE());
2528:       assertTrue(node3.hasChildren());
2529:       assertFalse(node3.isSetterDef());
2530:       assertFalse(node3.isThis());
2531:       assertFalse(node3.isIn());
2532:       assertFalse(node3.isInstanceOf());
2533:       assertFalse(node3.isCatch());
2534:       assertFalse(node3.isIf());
2535:       assertEquals((-1), node3.getLineno());
2536:       assertFalse(boolean5);
2537:   }
2538: }
RegularFileObject[/tmp/EvoSuite_154_1628161387665/com/google/javascript/rhino/Node_154_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:08 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_154_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_154_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_154_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:03:08.411 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertNotNull(node0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

Node node1 = Node.newString(36, "UNKNOWN", 32, 0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(32, node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals(36, node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertNotNull(node1);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Object object0 = node1.getProp(0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(32, node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals(36, node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertNull(object0);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Node node2 = Node.newString(46, "UNKNOWN");
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node1);
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertEquals(46, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isSwitch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertNotNull(node2);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

boolean boolean0 = node1.isNull();
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node2);
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(32, node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals(36, node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(boolean0);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

node0.setLineno(39);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

node0.putProp(4095, (Object) null);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

int int0 = node0.getIndexOfChild(node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertNotSame(node1, node2);
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(32, node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals(36, node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals((-1), int0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(iterable0.contains(node2));
assertNotNull(iterable0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean1 = node2.isIn();
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertNotSame(node2, node1);
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertEquals(46, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isSwitch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(boolean1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node1);
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertEquals(46, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isSwitch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertNotNull(node_NodeMismatch0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

Node node3 = new Node(39, node1, node2);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(32, node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals(36, node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertEquals(46, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isSwitch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertFalse(node3.isLabelName());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isString());
assertFalse(node3.isVar());
assertTrue(node3.isNumber());
assertFalse(node3.isWhile());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isComma());
assertFalse(node3.isNull());
assertFalse(node3.isReturn());
assertFalse(node3.isDec());
assertFalse(node3.isOr());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isName());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isCase());
assertEquals(39, node3.getType());
assertFalse(node3.isHook());
assertFalse(node3.isNE());
assertTrue(node3.hasChildren());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThis());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isIf());
assertEquals((-1), node3.getLineno());
assertNotNull(node3);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);

node3.addChildBefore(node0, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(32, node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals(36, node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertEquals(46, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isSwitch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertFalse(node3.isLabelName());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isString());
assertFalse(node3.isVar());
assertTrue(node3.isNumber());
assertFalse(node3.isWhile());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isComma());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isNull());
assertFalse(node3.isReturn());
assertFalse(node3.isDec());
assertFalse(node3.isOr());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isName());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isCase());
assertEquals(39, node3.getType());
assertFalse(node3.isHook());
assertFalse(node3.isNE());
assertTrue(node3.hasChildren());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThis());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isIf());
assertEquals((-1), node3.getLineno());
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean2 = node1.isUnscopedQualifiedName();
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertNotSame(node1, node2);
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(32, node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals(36, node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(boolean2);

Node node4 = Node.newString(36, "");
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertNotSame(node4, node1);
assertNotSame(node4, node2);
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isBreak());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isAnd());
assertFalse(node4.isSwitch());
assertFalse(node4.isCase());
assertFalse(node4.isNot());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isScript());
assertFalse(node4.isObjectLit());
assertFalse(node4.isString());
assertFalse(node4.isWith());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isGetProp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isHook());
assertFalse(node4.isGetElem());
assertFalse(node4.isLabelName());
assertFalse(node4.isEmpty());
assertFalse(node4.isAssign());
assertFalse(node4.hasChildren());
assertFalse(node4.isNumber());
assertFalse(node4.isTypeOf());
assertFalse(node4.isGetterDef());
assertFalse(node4.isDec());
assertFalse(node4.isOr());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isExprResult());
assertFalse(node4.isArrayLit());
assertFalse(node4.isDelProp());
assertFalse(node4.isDo());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isVar());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isCall());
assertFalse(node4.isNull());
assertFalse(node4.isParamList());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isBlock());
assertFalse(node4.isTry());
assertFalse(node4.isReturn());
assertFalse(node4.isWhile());
assertFalse(node4.isFor());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isCast());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isDebugger());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(36, node4.getType());
assertFalse(node4.isFunction());
assertFalse(node4.isContinue());
assertFalse(node4.isIn());
assertFalse(node4.isSetterDef());
assertFalse(node4.isInc());
assertNotNull(node4);

boolean boolean3 = node0.isFor();
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTry());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isGetterDef());
assertEquals(39, node0.getLineno());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(boolean3);

boolean boolean4 = node2.isDefaultCase();
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node1);
assertNotSame(node2, node4);
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertEquals(46, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isSwitch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(boolean4);

boolean boolean5 = node3.isStringKey();
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertNotSame(node1, node4);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotSame(node2, node4);
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals(32, node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isExprResult());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals(36, node1.getType());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isThrow());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isName());
assertFalse(node2.isDo());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertEquals(46, node2.getType());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertFalse(node2.isSwitch());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertFalse(node3.isLabel());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertFalse(node3.isLabelName());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isString());
assertFalse(node3.isVar());
assertTrue(node3.isNumber());
assertFalse(node3.isWhile());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isComma());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isNull());
assertFalse(node3.isReturn());
assertFalse(node3.isDec());
assertFalse(node3.isOr());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isName());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isThrow());
assertFalse(node3.isCase());
assertEquals(39, node3.getType());
assertFalse(node3.isHook());
assertFalse(node3.isNE());
assertTrue(node3.hasChildren());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThis());
assertFalse(node3.isIn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isIf());
assertEquals((-1), node3.getLineno());
assertFalse(boolean5);


[MASTER] 11:03:11.841 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_170_1628161391802/com/google/javascript/rhino/Node_170_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_170_1628161391802/com/google/javascript/rhino/Node_170_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:11.841 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:11.841 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:11.841 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 128
[MASTER] 11:03:11.842 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_170_1628161391802/com/google/javascript/rhino/Node_170_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:11 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.HashSet;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_170_tmp__ESTest extends Node_170_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = new Node(905, 905, 905);
23:       assertFalse(node0.isHook());
24:       assertEquals(3707785, node0.getSourcePosition());
25:       assertFalse(node0.isFalse());
26:       assertFalse(node0.isString());
27:       assertFalse(node0.isThrow());
28:       assertFalse(node0.isInc());
29:       assertFalse(node0.isGetProp());
30:       assertFalse(node0.isCase());
31:       assertFalse(node0.isNot());
32:       assertFalse(node0.isObjectLit());
33:       assertFalse(node0.isGetterDef());
34:       assertFalse(node0.isSwitch());
35:       assertFalse(node0.isAnd());
36:       assertFalse(node0.isArrayLit());
37:       assertFalse(node0.isTrue());
38:       assertFalse(node0.isDebugger());
39:       assertFalse(node0.isAssign());
40:       assertFalse(node0.isDefaultCase());
41:       assertFalse(node0.hasChildren());
42:       assertEquals(905, node0.getLineno());
43:       assertEquals(905, node0.getType());
44:       assertFalse(node0.isEmpty());
45:       assertFalse(node0.isReturn());
46:       assertFalse(node0.isComma());
47:       assertFalse(node0.isDec());
48:       assertFalse(node0.isOr());
49:       assertFalse(node0.isTypeOf());
50:       assertFalse(node0.isBreak());
51:       assertFalse(node0.isGetElem());
52:       assertFalse(node0.isNull());
53:       assertFalse(node0.isCall());
54:       assertFalse(node0.isExprResult());
55:       assertFalse(node0.isName());
56:       assertFalse(node0.isDelProp());
57:       assertFalse(node0.isVoid());
58:       assertFalse(node0.isBlock());
59:       assertFalse(node0.isVar());
60:       assertFalse(node0.isAdd());
61:       assertFalse(node0.isWhile());
62:       assertFalse(node0.isSetterDef());
63:       assertFalse(node0.isNew());
64:       assertFalse(node0.isDo());
65:       assertFalse(node0.isLabel());
66:       assertFalse(node0.isAssignAdd());
67:       assertEquals(905, node0.getCharno());
68:       assertFalse(node0.isContinue());
69:       assertFalse(node0.isNumber());
70:       assertEquals(0, node0.getChildCount());
71:       assertFalse(node0.isStringKey());
72:       assertFalse(node0.isParamList());
73:       assertFalse(node0.isLabelName());
74:       assertFalse(node0.isCast());
75:       assertFalse(node0.isFunction());
76:       assertFalse(node0.isRegExp());
77:       assertFalse(node0.isScript());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.hasOneChild());
80:       assertFalse(node0.isTry());
81:       assertFalse(node0.isIn());
82:       assertFalse(node0.isInstanceOf());
83:       assertFalse(node0.hasMoreThanOneChild());
84:       assertFalse(node0.isCatch());
85:       assertFalse(node0.isThis());
86:       assertFalse(node0.isWith());
87:       assertFalse(node0.isIf());
88:       assertFalse(node0.isNE());
89:       assertNotNull(node0);
90:       assertEquals(55, Node.INFERRED_FUNCTION);
91:       assertEquals(4095, Node.COLUMN_MASK);
92:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
93:       assertEquals(36, Node.QUOTED_PROP);
94:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
95:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
96:       assertEquals(43, Node.IS_CONSTANT_NAME);
97:       assertEquals(48, Node.DIRECTIVES);
98:       assertEquals(40, Node.ORIGINALNAME_PROP);
99:       assertEquals(57, Node.REFLECTED_OBJECT);
100:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
101:       assertEquals(52, Node.LENGTH);
102:       assertEquals(47, Node.IS_DISPATCHER);
103:       assertEquals(8, Node.FLAG_NO_THROWS);
104:       assertEquals(39, Node.EMPTY_BLOCK);
105:       assertEquals(57, Node.LAST_PROP);
106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
107:       assertEquals(29, Node.JSDOC_INFO_PROP);
108:       assertEquals(53, Node.INPUT_ID);
109:       assertEquals(15, Node.NO_SIDE_EFFECTS);
110:       assertEquals(12, Node.COLUMN_BITS);
111:       assertEquals(46, Node.IS_NAMESPACE);
112:       assertEquals(30, Node.VAR_ARGS_NAME);
113:       assertEquals(51, Node.STATIC_SOURCE_FILE);
114:       assertEquals(2, Node.POST_FLAG);
115:       assertEquals(54, Node.SLASH_V);
116:       assertEquals(56, Node.CHANGE_TIME);
117:       assertEquals(49, Node.DIRECT_EVAL);
118:       assertEquals(37, Node.OPT_ARG_NAME);
119:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
121:       assertEquals(50, Node.FREE_CALL);
122:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
123:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
124:       assertEquals(32, Node.INCRDECR_PROP);
125:       assertEquals(1, Node.DECR_FLAG);
126:       
127:       Iterable<Node> iterable0 = new HashSet<Node>(2);
128:       assertFalse(iterable0.contains(node0));
129:       assertNotNull(iterable0);
130:       
131:       boolean boolean0 = node0.mayMutateArguments();
132:       assertFalse(node0.isHook());
133:       assertEquals(3707785, node0.getSourcePosition());
134:       assertFalse(node0.isFalse());
135:       assertFalse(node0.isString());
136:       assertFalse(node0.isThrow());
137:       assertFalse(node0.isInc());
138:       assertFalse(node0.isGetProp());
139:       assertFalse(node0.isCase());
140:       assertFalse(node0.isNot());
141:       assertFalse(node0.isObjectLit());
142:       assertFalse(node0.isGetterDef());
143:       assertFalse(node0.isSwitch());
144:       assertFalse(node0.isAnd());
145:       assertFalse(node0.isArrayLit());
146:       assertFalse(node0.isTrue());
147:       assertFalse(node0.isDebugger());
148:       assertFalse(node0.isAssign());
149:       assertFalse(node0.isDefaultCase());
150:       assertFalse(node0.hasChildren());
151:       assertEquals(905, node0.getLineno());
152:       assertEquals(905, node0.getType());
153:       assertFalse(node0.isEmpty());
154:       assertFalse(node0.isReturn());
155:       assertFalse(node0.isComma());
156:       assertFalse(node0.isDec());
157:       assertFalse(node0.isOr());
158:       assertFalse(node0.isTypeOf());
159:       assertFalse(node0.isBreak());
160:       assertFalse(node0.isGetElem());
161:       assertFalse(node0.isNull());
162:       assertFalse(node0.isCall());
163:       assertFalse(node0.isExprResult());
164:       assertFalse(node0.isName());
165:       assertFalse(node0.isDelProp());
166:       assertFalse(node0.isVoid());
167:       assertFalse(node0.isBlock());
168:       assertFalse(node0.isVar());
169:       assertFalse(node0.isAdd());
170:       assertFalse(node0.isWhile());
171:       assertFalse(node0.isSetterDef());
172:       assertFalse(node0.isNew());
173:       assertFalse(node0.isDo());
174:       assertFalse(node0.isLabel());
175:       assertFalse(node0.isAssignAdd());
176:       assertEquals(905, node0.getCharno());
177:       assertFalse(node0.isContinue());
178:       assertFalse(node0.isNumber());
179:       assertEquals(0, node0.getChildCount());
180:       assertFalse(node0.isStringKey());
181:       assertFalse(node0.isParamList());
182:       assertFalse(node0.isLabelName());
183:       assertFalse(node0.isCast());
184:       assertFalse(node0.isFunction());
185:       assertFalse(node0.isRegExp());
186:       assertFalse(node0.isScript());
187:       assertFalse(node0.isFor());
188:       assertFalse(node0.hasOneChild());
189:       assertFalse(node0.isTry());
190:       assertFalse(node0.isIn());
191:       assertFalse(node0.isInstanceOf());
192:       assertFalse(node0.hasMoreThanOneChild());
193:       assertFalse(node0.isCatch());
194:       assertFalse(node0.isThis());
195:       assertFalse(node0.isWith());
196:       assertFalse(node0.isIf());
197:       assertFalse(node0.isNE());
198:       assertTrue(boolean0);
199:       assertEquals(55, Node.INFERRED_FUNCTION);
200:       assertEquals(4095, Node.COLUMN_MASK);
201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
202:       assertEquals(36, Node.QUOTED_PROP);
203:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
204:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
205:       assertEquals(43, Node.IS_CONSTANT_NAME);
206:       assertEquals(48, Node.DIRECTIVES);
207:       assertEquals(40, Node.ORIGINALNAME_PROP);
208:       assertEquals(57, Node.REFLECTED_OBJECT);
209:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
210:       assertEquals(52, Node.LENGTH);
211:       assertEquals(47, Node.IS_DISPATCHER);
212:       assertEquals(8, Node.FLAG_NO_THROWS);
213:       assertEquals(39, Node.EMPTY_BLOCK);
214:       assertEquals(57, Node.LAST_PROP);
215:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
216:       assertEquals(29, Node.JSDOC_INFO_PROP);
217:       assertEquals(53, Node.INPUT_ID);
218:       assertEquals(15, Node.NO_SIDE_EFFECTS);
219:       assertEquals(12, Node.COLUMN_BITS);
220:       assertEquals(46, Node.IS_NAMESPACE);
221:       assertEquals(30, Node.VAR_ARGS_NAME);
222:       assertEquals(51, Node.STATIC_SOURCE_FILE);
223:       assertEquals(2, Node.POST_FLAG);
224:       assertEquals(54, Node.SLASH_V);
225:       assertEquals(56, Node.CHANGE_TIME);
226:       assertEquals(49, Node.DIRECT_EVAL);
227:       assertEquals(37, Node.OPT_ARG_NAME);
228:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
229:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
230:       assertEquals(50, Node.FREE_CALL);
231:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
232:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
233:       assertEquals(32, Node.INCRDECR_PROP);
234:       assertEquals(1, Node.DECR_FLAG);
235:       
236:       int int0 = node0.getIntProp(905);
237:       assertFalse(node0.isHook());
238:       assertEquals(3707785, node0.getSourcePosition());
239:       assertFalse(node0.isFalse());
240:       assertFalse(node0.isString());
241:       assertFalse(node0.isThrow());
242:       assertFalse(node0.isInc());
243:       assertFalse(node0.isGetProp());
244:       assertFalse(node0.isCase());
245:       assertFalse(node0.isNot());
246:       assertFalse(node0.isObjectLit());
247:       assertFalse(node0.isGetterDef());
248:       assertFalse(node0.isSwitch());
249:       assertFalse(node0.isAnd());
250:       assertFalse(node0.isArrayLit());
251:       assertFalse(node0.isTrue());
252:       assertFalse(node0.isDebugger());
253:       assertFalse(node0.isAssign());
254:       assertFalse(node0.isDefaultCase());
255:       assertFalse(node0.hasChildren());
256:       assertEquals(905, node0.getLineno());
257:       assertEquals(905, node0.getType());
258:       assertFalse(node0.isEmpty());
259:       assertFalse(node0.isReturn());
260:       assertFalse(node0.isComma());
261:       assertFalse(node0.isDec());
262:       assertFalse(node0.isOr());
263:       assertFalse(node0.isTypeOf());
264:       assertFalse(node0.isBreak());
265:       assertFalse(node0.isGetElem());
266:       assertFalse(node0.isNull());
267:       assertFalse(node0.isCall());
268:       assertFalse(node0.isExprResult());
269:       assertFalse(node0.isName());
270:       assertFalse(node0.isDelProp());
271:       assertFalse(node0.isVoid());
272:       assertFalse(node0.isBlock());
273:       assertFalse(node0.isVar());
274:       assertFalse(node0.isAdd());
275:       assertFalse(node0.isWhile());
276:       assertFalse(node0.isSetterDef());
277:       assertFalse(node0.isNew());
278:       assertFalse(node0.isDo());
279:       assertFalse(node0.isLabel());
280:       assertFalse(node0.isAssignAdd());
281:       assertEquals(905, node0.getCharno());
282:       assertFalse(node0.isContinue());
283:       assertFalse(node0.isNumber());
284:       assertEquals(0, node0.getChildCount());
285:       assertFalse(node0.isStringKey());
286:       assertFalse(node0.isParamList());
287:       assertFalse(node0.isLabelName());
288:       assertFalse(node0.isCast());
289:       assertFalse(node0.isFunction());
290:       assertFalse(node0.isRegExp());
291:       assertFalse(node0.isScript());
292:       assertFalse(node0.isFor());
293:       assertFalse(node0.hasOneChild());
294:       assertFalse(node0.isTry());
295:       assertFalse(node0.isIn());
296:       assertFalse(node0.isInstanceOf());
297:       assertFalse(node0.hasMoreThanOneChild());
298:       assertFalse(node0.isCatch());
299:       assertFalse(node0.isThis());
300:       assertFalse(node0.isWith());
301:       assertFalse(node0.isIf());
302:       assertFalse(node0.isNE());
303:       assertEquals(0, int0);
304:       assertEquals(55, Node.INFERRED_FUNCTION);
305:       assertEquals(4095, Node.COLUMN_MASK);
306:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
307:       assertEquals(36, Node.QUOTED_PROP);
308:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
309:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
310:       assertEquals(43, Node.IS_CONSTANT_NAME);
311:       assertEquals(48, Node.DIRECTIVES);
312:       assertEquals(40, Node.ORIGINALNAME_PROP);
313:       assertEquals(57, Node.REFLECTED_OBJECT);
314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
315:       assertEquals(52, Node.LENGTH);
316:       assertEquals(47, Node.IS_DISPATCHER);
317:       assertEquals(8, Node.FLAG_NO_THROWS);
318:       assertEquals(39, Node.EMPTY_BLOCK);
319:       assertEquals(57, Node.LAST_PROP);
320:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
321:       assertEquals(29, Node.JSDOC_INFO_PROP);
322:       assertEquals(53, Node.INPUT_ID);
323:       assertEquals(15, Node.NO_SIDE_EFFECTS);
324:       assertEquals(12, Node.COLUMN_BITS);
325:       assertEquals(46, Node.IS_NAMESPACE);
326:       assertEquals(30, Node.VAR_ARGS_NAME);
327:       assertEquals(51, Node.STATIC_SOURCE_FILE);
328:       assertEquals(2, Node.POST_FLAG);
329:       assertEquals(54, Node.SLASH_V);
330:       assertEquals(56, Node.CHANGE_TIME);
331:       assertEquals(49, Node.DIRECT_EVAL);
332:       assertEquals(37, Node.OPT_ARG_NAME);
333:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
334:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
335:       assertEquals(50, Node.FREE_CALL);
336:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
337:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
338:       assertEquals(32, Node.INCRDECR_PROP);
339:       assertEquals(1, Node.DECR_FLAG);
340:       
341:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
342:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
343:       assertEquals(4095, node_SideEffectFlags0.valueOf());
344:       assertNotNull(node_SideEffectFlags0);
345:       
346:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
347:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
348:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
349:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
350:       assertEquals(4093, node_SideEffectFlags0.valueOf());
351:       assertEquals(4093, node_SideEffectFlags1.valueOf());
352:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
353:       assertNotNull(node_SideEffectFlags1);
354:       
355:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
356:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
357:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
358:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
359:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
360:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
361:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
362:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
363:       assertEquals(4089, node_SideEffectFlags0.valueOf());
364:       assertEquals(4089, node_SideEffectFlags1.valueOf());
365:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
366:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
367:       assertEquals(4089, node_SideEffectFlags2.valueOf());
368:       assertNotNull(node_SideEffectFlags2);
369:       
370:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
371:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
372:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
373:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
374:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
375:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
376:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
377:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
378:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
379:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
380:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
381:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
382:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
383:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
384:       assertEquals(31, node_SideEffectFlags0.valueOf());
385:       assertEquals(31, node_SideEffectFlags1.valueOf());
386:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
387:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
388:       assertEquals(31, node_SideEffectFlags2.valueOf());
389:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
390:       assertEquals(31, node_SideEffectFlags3.valueOf());
391:       assertNotNull(node_SideEffectFlags3);
392:       
393:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
394:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
395:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
396:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
397:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
398:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
399:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
400:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
401:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
402:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
403:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
404:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
405:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
406:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
407:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
408:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
409:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
410:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
411:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
412:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
413:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
414:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
415:       assertEquals(0, node_SideEffectFlags0.valueOf());
416:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
417:       assertEquals(0, node_SideEffectFlags1.valueOf());
418:       assertEquals(0, node_SideEffectFlags2.valueOf());
419:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
420:       assertEquals(0, node_SideEffectFlags3.valueOf());
421:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
422:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
423:       assertEquals(0, node_SideEffectFlags4.valueOf());
424:       assertNotNull(node_SideEffectFlags4);
425:       
426:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setAllFlags();
427:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
428:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
429:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
430:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
431:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
432:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
433:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
434:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
435:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
436:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
437:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
438:       assertEquals(0, node_SideEffectFlags0.valueOf());
439:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
440:       assertEquals(0, node_SideEffectFlags5.valueOf());
441:       assertNotNull(node_SideEffectFlags5);
442:       
443:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesArguments();
444:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
445:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
446:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
447:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
448:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
449:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
450:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
451:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
452:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
453:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
454:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
455:       assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
456:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
457:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
458:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
459:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
460:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
461:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
462:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
463:       assertEquals(0, node_SideEffectFlags0.valueOf());
464:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
465:       assertEquals(0, node_SideEffectFlags5.valueOf());
466:       assertEquals(0, node_SideEffectFlags6.valueOf());
467:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
468:       assertNotNull(node_SideEffectFlags6);
469:       
470:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setAllFlags();
471:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
472:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
473:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
474:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
475:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
476:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
477:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
478:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
479:       assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
480:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
481:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
482:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
483:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
484:       assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
485:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
486:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
487:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
488:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
489:       assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
490:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
491:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
492:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
493:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
494:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
495:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
496:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
497:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
498:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
499:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
500:       assertEquals(0, node_SideEffectFlags0.valueOf());
501:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
502:       assertEquals(0, node_SideEffectFlags5.valueOf());
503:       assertEquals(0, node_SideEffectFlags6.valueOf());
504:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
505:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
506:       assertEquals(0, node_SideEffectFlags7.valueOf());
507:       assertNotNull(node_SideEffectFlags7);
508:       
509:       // Undeclared exception!
510:       try { 
511:         node0.setSideEffectFlags(node_SideEffectFlags5);
512:         fail("Expecting exception: IllegalStateException");
513:       
514:       } catch(IllegalStateException e) {
515:          //
516:          // 905
517:          //
518:          verifyException("com.google.javascript.rhino.Token", e);
519:       }
520:   }
521: }
RegularFileObject[/tmp/EvoSuite_170_1628161391802/com/google/javascript/rhino/Node_170_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:11 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_170_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_170_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_170_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:03:11.848 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(905, 905, 905);
assertFalse(node0.isHook());
assertEquals(3707785, node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasChildren());
assertEquals(905, node0.getLineno());
assertEquals(905, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(905, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertNotNull(node0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

Iterable<Node> iterable0 = new HashSet<Node>(2);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

boolean boolean0 = node0.mayMutateArguments();
assertFalse(node0.isHook());
assertEquals(3707785, node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasChildren());
assertEquals(905, node0.getLineno());
assertEquals(905, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(905, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertTrue(boolean0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

int int0 = node0.getIntProp(905);
assertFalse(node0.isHook());
assertEquals(3707785, node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasChildren());
assertEquals(905, node0.getLineno());
assertEquals(905, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertEquals(905, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, int0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(4095);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(4095, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(4093, node_SideEffectFlags0.valueOf());
assertEquals(4093, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(4089, node_SideEffectFlags0.valueOf());
assertEquals(4089, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(4089, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags7.valueOf());
assertNotNull(node_SideEffectFlags7);

node0.setSideEffectFlags(node_SideEffectFlags5);

[MASTER] 11:03:13.064 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_177_1628161392915/com/google/javascript/rhino/Node_177_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_177_1628161392915/com/google/javascript/rhino/Node_177_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:13.064 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:13.064 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:13.064 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 827
[MASTER] 11:03:13.065 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_177_1628161392915/com/google/javascript/rhino/Node_177_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:12 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_177_tmp__ESTest extends Node_177_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertFalse(node0.isInstanceOf());
23:       assertFalse(node0.isObjectLit());
24:       assertFalse(node0.isAnd());
25:       assertFalse(node0.isNot());
26:       assertFalse(node0.isThis());
27:       assertFalse(node0.isComma());
28:       assertFalse(node0.isWith());
29:       assertFalse(node0.isExprResult());
30:       assertFalse(node0.isBreak());
31:       assertFalse(node0.hasOneChild());
32:       assertFalse(node0.isAssign());
33:       assertEquals((-1), node0.getCharno());
34:       assertFalse(node0.isHook());
35:       assertFalse(node0.hasChildren());
36:       assertFalse(node0.isScript());
37:       assertEquals((-1), node0.getSourcePosition());
38:       assertFalse(node0.isString());
39:       assertFalse(node0.isCase());
40:       assertFalse(node0.isGetProp());
41:       assertFalse(node0.isContinue());
42:       assertFalse(node0.hasMoreThanOneChild());
43:       assertFalse(node0.isIn());
44:       assertEquals(39, node0.getType());
45:       assertFalse(node0.isNE());
46:       assertFalse(node0.isIf());
47:       assertEquals((-1), node0.getLineno());
48:       assertFalse(node0.isCast());
49:       assertFalse(node0.isFalse());
50:       assertFalse(node0.isThrow());
51:       assertFalse(node0.isInc());
52:       assertFalse(node0.isSetterDef());
53:       assertEquals(0, node0.getChildCount());
54:       assertFalse(node0.isCatch());
55:       assertFalse(node0.isRegExp());
56:       assertFalse(node0.isNull());
57:       assertFalse(node0.isParamList());
58:       assertFalse(node0.isFunction());
59:       assertFalse(node0.isVoid());
60:       assertFalse(node0.isName());
61:       assertFalse(node0.isCall());
62:       assertFalse(node0.isArrayLit());
63:       assertFalse(node0.isBlock());
64:       assertFalse(node0.isFor());
65:       assertFalse(node0.isStringKey());
66:       assertFalse(node0.isDebugger());
67:       assertFalse(node0.isGetterDef());
68:       assertFalse(node0.isWhile());
69:       assertTrue(node0.isNumber());
70:       assertFalse(node0.isTry());
71:       assertFalse(node0.isAssignAdd());
72:       assertFalse(node0.isLabel());
73:       assertFalse(node0.isOr());
74:       assertFalse(node0.isReturn());
75:       assertFalse(node0.isTypeOf());
76:       assertFalse(node0.isDec());
77:       assertFalse(node0.isDelProp());
78:       assertFalse(node0.isSwitch());
79:       assertFalse(node0.isGetElem());
80:       assertFalse(node0.isLabelName());
81:       assertFalse(node0.isVar());
82:       assertFalse(node0.isTrue());
83:       assertFalse(node0.isDefaultCase());
84:       assertFalse(node0.isEmpty());
85:       assertFalse(node0.isNew());
86:       assertFalse(node0.isAdd());
87:       assertFalse(node0.isDo());
88:       assertNotNull(node0);
89:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
90:       assertEquals(56, Node.CHANGE_TIME);
91:       assertEquals(47, Node.IS_DISPATCHER);
92:       assertEquals(32, Node.INCRDECR_PROP);
93:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
94:       assertEquals(29, Node.JSDOC_INFO_PROP);
95:       assertEquals(53, Node.INPUT_ID);
96:       assertEquals(30, Node.VAR_ARGS_NAME);
97:       assertEquals(43, Node.IS_CONSTANT_NAME);
98:       assertEquals(51, Node.STATIC_SOURCE_FILE);
99:       assertEquals(57, Node.LAST_PROP);
100:       assertEquals(46, Node.IS_NAMESPACE);
101:       assertEquals(54, Node.SLASH_V);
102:       assertEquals(2, Node.POST_FLAG);
103:       assertEquals(40, Node.ORIGINALNAME_PROP);
104:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
105:       assertEquals(50, Node.FREE_CALL);
106:       assertEquals(57, Node.REFLECTED_OBJECT);
107:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
108:       assertEquals(52, Node.LENGTH);
109:       assertEquals(8, Node.FLAG_NO_THROWS);
110:       assertEquals(15, Node.NO_SIDE_EFFECTS);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(39, Node.EMPTY_BLOCK);
113:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
114:       assertEquals(1, Node.DECR_FLAG);
115:       assertEquals(49, Node.DIRECT_EVAL);
116:       assertEquals(36, Node.QUOTED_PROP);
117:       assertEquals(12, Node.COLUMN_BITS);
118:       assertEquals(48, Node.DIRECTIVES);
119:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
120:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
121:       assertEquals(37, Node.OPT_ARG_NAME);
122:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
123:       assertEquals(4095, Node.COLUMN_MASK);
124:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
125:       
126:       Object object0 = node0.getProp(0);
127:       assertFalse(node0.isInstanceOf());
128:       assertFalse(node0.isObjectLit());
129:       assertFalse(node0.isAnd());
130:       assertFalse(node0.isNot());
131:       assertFalse(node0.isThis());
132:       assertFalse(node0.isComma());
133:       assertFalse(node0.isWith());
134:       assertFalse(node0.isExprResult());
135:       assertFalse(node0.isBreak());
136:       assertFalse(node0.hasOneChild());
137:       assertFalse(node0.isAssign());
138:       assertEquals((-1), node0.getCharno());
139:       assertFalse(node0.isHook());
140:       assertFalse(node0.hasChildren());
141:       assertFalse(node0.isScript());
142:       assertEquals((-1), node0.getSourcePosition());
143:       assertFalse(node0.isString());
144:       assertFalse(node0.isCase());
145:       assertFalse(node0.isGetProp());
146:       assertFalse(node0.isContinue());
147:       assertFalse(node0.hasMoreThanOneChild());
148:       assertFalse(node0.isIn());
149:       assertEquals(39, node0.getType());
150:       assertFalse(node0.isNE());
151:       assertFalse(node0.isIf());
152:       assertEquals((-1), node0.getLineno());
153:       assertFalse(node0.isCast());
154:       assertFalse(node0.isFalse());
155:       assertFalse(node0.isThrow());
156:       assertFalse(node0.isInc());
157:       assertFalse(node0.isSetterDef());
158:       assertEquals(0, node0.getChildCount());
159:       assertFalse(node0.isCatch());
160:       assertFalse(node0.isRegExp());
161:       assertFalse(node0.isNull());
162:       assertFalse(node0.isParamList());
163:       assertFalse(node0.isFunction());
164:       assertFalse(node0.isVoid());
165:       assertFalse(node0.isName());
166:       assertFalse(node0.isCall());
167:       assertFalse(node0.isArrayLit());
168:       assertFalse(node0.isBlock());
169:       assertFalse(node0.isFor());
170:       assertFalse(node0.isStringKey());
171:       assertFalse(node0.isDebugger());
172:       assertFalse(node0.isGetterDef());
173:       assertFalse(node0.isWhile());
174:       assertTrue(node0.isNumber());
175:       assertFalse(node0.isTry());
176:       assertFalse(node0.isAssignAdd());
177:       assertFalse(node0.isLabel());
178:       assertFalse(node0.isOr());
179:       assertFalse(node0.isReturn());
180:       assertFalse(node0.isTypeOf());
181:       assertFalse(node0.isDec());
182:       assertFalse(node0.isDelProp());
183:       assertFalse(node0.isSwitch());
184:       assertFalse(node0.isGetElem());
185:       assertFalse(node0.isLabelName());
186:       assertFalse(node0.isVar());
187:       assertFalse(node0.isTrue());
188:       assertFalse(node0.isDefaultCase());
189:       assertFalse(node0.isEmpty());
190:       assertFalse(node0.isNew());
191:       assertFalse(node0.isAdd());
192:       assertFalse(node0.isDo());
193:       assertNull(object0);
194:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
195:       assertEquals(56, Node.CHANGE_TIME);
196:       assertEquals(47, Node.IS_DISPATCHER);
197:       assertEquals(32, Node.INCRDECR_PROP);
198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
199:       assertEquals(29, Node.JSDOC_INFO_PROP);
200:       assertEquals(53, Node.INPUT_ID);
201:       assertEquals(30, Node.VAR_ARGS_NAME);
202:       assertEquals(43, Node.IS_CONSTANT_NAME);
203:       assertEquals(51, Node.STATIC_SOURCE_FILE);
204:       assertEquals(57, Node.LAST_PROP);
205:       assertEquals(46, Node.IS_NAMESPACE);
206:       assertEquals(54, Node.SLASH_V);
207:       assertEquals(2, Node.POST_FLAG);
208:       assertEquals(40, Node.ORIGINALNAME_PROP);
209:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
210:       assertEquals(50, Node.FREE_CALL);
211:       assertEquals(57, Node.REFLECTED_OBJECT);
212:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
213:       assertEquals(52, Node.LENGTH);
214:       assertEquals(8, Node.FLAG_NO_THROWS);
215:       assertEquals(15, Node.NO_SIDE_EFFECTS);
216:       assertEquals(55, Node.INFERRED_FUNCTION);
217:       assertEquals(39, Node.EMPTY_BLOCK);
218:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
219:       assertEquals(1, Node.DECR_FLAG);
220:       assertEquals(49, Node.DIRECT_EVAL);
221:       assertEquals(36, Node.QUOTED_PROP);
222:       assertEquals(12, Node.COLUMN_BITS);
223:       assertEquals(48, Node.DIRECTIVES);
224:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
225:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
226:       assertEquals(37, Node.OPT_ARG_NAME);
227:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
228:       assertEquals(4095, Node.COLUMN_MASK);
229:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
230:       
231:       Node node1 = Node.newString(46, "UNKNOWN");
232:       assertFalse(node1.equals((Object)node0));
233:       assertFalse(node1.isFalse());
234:       assertFalse(node1.isBreak());
235:       assertFalse(node1.isHook());
236:       assertFalse(node1.isThis());
237:       assertFalse(node1.isThrow());
238:       assertFalse(node1.isComma());
239:       assertFalse(node1.isInstanceOf());
240:       assertEquals(46, node1.getType());
241:       assertFalse(node1.isInc());
242:       assertFalse(node1.isIn());
243:       assertFalse(node1.isAssign());
244:       assertFalse(node1.isDelProp());
245:       assertFalse(node1.isGetElem());
246:       assertFalse(node1.hasChildren());
247:       assertEquals((-1), node1.getSourcePosition());
248:       assertFalse(node1.isDec());
249:       assertFalse(node1.isReturn());
250:       assertFalse(node1.isVoid());
251:       assertFalse(node1.isCast());
252:       assertFalse(node1.isFunction());
253:       assertFalse(node1.isExprResult());
254:       assertFalse(node1.isTypeOf());
255:       assertFalse(node1.isContinue());
256:       assertFalse(node1.isNot());
257:       assertFalse(node1.isAnd());
258:       assertFalse(node1.isWhile());
259:       assertFalse(node1.isGetProp());
260:       assertFalse(node1.isDebugger());
261:       assertFalse(node1.isObjectLit());
262:       assertFalse(node1.isString());
263:       assertFalse(node1.isName());
264:       assertFalse(node1.isVar());
265:       assertFalse(node1.isNull());
266:       assertFalse(node1.isStringKey());
267:       assertFalse(node1.isParamList());
268:       assertFalse(node1.isBlock());
269:       assertEquals(0, node1.getChildCount());
270:       assertFalse(node1.isCatch());
271:       assertFalse(node1.isCall());
272:       assertFalse(node1.isDo());
273:       assertFalse(node1.isTrue());
274:       assertFalse(node1.isDefaultCase());
275:       assertFalse(node1.isOr());
276:       assertFalse(node1.isAssignAdd());
277:       assertFalse(node1.isAdd());
278:       assertFalse(node1.isNew());
279:       assertFalse(node1.isSetterDef());
280:       assertFalse(node1.isLabelName());
281:       assertFalse(node1.isFor());
282:       assertFalse(node1.isEmpty());
283:       assertFalse(node1.isGetterDef());
284:       assertFalse(node1.isNE());
285:       assertFalse(node1.isIf());
286:       assertFalse(node1.isLabel());
287:       assertEquals((-1), node1.getLineno());
288:       assertFalse(node1.isArrayLit());
289:       assertFalse(node1.hasMoreThanOneChild());
290:       assertFalse(node1.isRegExp());
291:       assertFalse(node1.isWith());
292:       assertFalse(node1.isCase());
293:       assertFalse(node1.isSwitch());
294:       assertFalse(node1.isTry());
295:       assertEquals((-1), node1.getCharno());
296:       assertFalse(node1.hasOneChild());
297:       assertFalse(node1.isScript());
298:       assertFalse(node1.isNumber());
299:       assertNotNull(node1);
300:       assertEquals(43, Node.IS_CONSTANT_NAME);
301:       assertEquals(36, Node.QUOTED_PROP);
302:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
303:       assertEquals(55, Node.INFERRED_FUNCTION);
304:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
305:       assertEquals(29, Node.JSDOC_INFO_PROP);
306:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
307:       assertEquals(53, Node.INPUT_ID);
308:       assertEquals(8, Node.FLAG_NO_THROWS);
309:       assertEquals(56, Node.CHANGE_TIME);
310:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
311:       assertEquals(37, Node.OPT_ARG_NAME);
312:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
313:       assertEquals(48, Node.DIRECTIVES);
314:       assertEquals(32, Node.INCRDECR_PROP);
315:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
316:       assertEquals(12, Node.COLUMN_BITS);
317:       assertEquals(4095, Node.COLUMN_MASK);
318:       assertEquals(54, Node.SLASH_V);
319:       assertEquals(15, Node.NO_SIDE_EFFECTS);
320:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
321:       assertEquals(49, Node.DIRECT_EVAL);
322:       assertEquals(1, Node.DECR_FLAG);
323:       assertEquals(57, Node.LAST_PROP);
324:       assertEquals(51, Node.STATIC_SOURCE_FILE);
325:       assertEquals(57, Node.REFLECTED_OBJECT);
326:       assertEquals(46, Node.IS_NAMESPACE);
327:       assertEquals(50, Node.FREE_CALL);
328:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
329:       assertEquals(52, Node.LENGTH);
330:       assertEquals(2, Node.POST_FLAG);
331:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
332:       assertEquals(39, Node.EMPTY_BLOCK);
333:       assertEquals(47, Node.IS_DISPATCHER);
334:       assertEquals(40, Node.ORIGINALNAME_PROP);
335:       assertEquals(30, Node.VAR_ARGS_NAME);
336:       
337:       boolean boolean0 = node0.isNull();
338:       assertFalse(node0.equals((Object)node1));
339:       assertFalse(node0.isInstanceOf());
340:       assertFalse(node0.isObjectLit());
341:       assertFalse(node0.isAnd());
342:       assertFalse(node0.isNot());
343:       assertFalse(node0.isThis());
344:       assertFalse(node0.isComma());
345:       assertFalse(node0.isWith());
346:       assertFalse(node0.isExprResult());
347:       assertFalse(node0.isBreak());
348:       assertFalse(node0.hasOneChild());
349:       assertFalse(node0.isAssign());
350:       assertEquals((-1), node0.getCharno());
351:       assertFalse(node0.isHook());
352:       assertFalse(node0.hasChildren());
353:       assertFalse(node0.isScript());
354:       assertEquals((-1), node0.getSourcePosition());
355:       assertFalse(node0.isString());
356:       assertFalse(node0.isCase());
357:       assertFalse(node0.isGetProp());
358:       assertFalse(node0.isContinue());
359:       assertFalse(node0.hasMoreThanOneChild());
360:       assertFalse(node0.isIn());
361:       assertEquals(39, node0.getType());
362:       assertFalse(node0.isNE());
363:       assertFalse(node0.isIf());
364:       assertEquals((-1), node0.getLineno());
365:       assertFalse(node0.isCast());
366:       assertFalse(node0.isFalse());
367:       assertFalse(node0.isThrow());
368:       assertFalse(node0.isInc());
369:       assertFalse(node0.isSetterDef());
370:       assertEquals(0, node0.getChildCount());
371:       assertFalse(node0.isCatch());
372:       assertFalse(node0.isRegExp());
373:       assertFalse(node0.isNull());
374:       assertFalse(node0.isParamList());
375:       assertFalse(node0.isFunction());
376:       assertFalse(node0.isVoid());
377:       assertFalse(node0.isName());
378:       assertFalse(node0.isCall());
379:       assertFalse(node0.isArrayLit());
380:       assertFalse(node0.isBlock());
381:       assertFalse(node0.isFor());
382:       assertFalse(node0.isStringKey());
383:       assertFalse(node0.isDebugger());
384:       assertFalse(node0.isGetterDef());
385:       assertFalse(node0.isWhile());
386:       assertTrue(node0.isNumber());
387:       assertFalse(node0.isTry());
388:       assertFalse(node0.isAssignAdd());
389:       assertFalse(node0.isLabel());
390:       assertFalse(node0.isOr());
391:       assertFalse(node0.isReturn());
392:       assertFalse(node0.isTypeOf());
393:       assertFalse(node0.isDec());
394:       assertFalse(node0.isDelProp());
395:       assertFalse(node0.isSwitch());
396:       assertFalse(node0.isGetElem());
397:       assertFalse(node0.isLabelName());
398:       assertFalse(node0.isVar());
399:       assertFalse(node0.isTrue());
400:       assertFalse(node0.isDefaultCase());
401:       assertFalse(node0.isEmpty());
402:       assertFalse(node0.isNew());
403:       assertFalse(node0.isAdd());
404:       assertFalse(node0.isDo());
405:       assertFalse(boolean0);
406:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
407:       assertEquals(56, Node.CHANGE_TIME);
408:       assertEquals(47, Node.IS_DISPATCHER);
409:       assertEquals(32, Node.INCRDECR_PROP);
410:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
411:       assertEquals(29, Node.JSDOC_INFO_PROP);
412:       assertEquals(53, Node.INPUT_ID);
413:       assertEquals(30, Node.VAR_ARGS_NAME);
414:       assertEquals(43, Node.IS_CONSTANT_NAME);
415:       assertEquals(51, Node.STATIC_SOURCE_FILE);
416:       assertEquals(57, Node.LAST_PROP);
417:       assertEquals(46, Node.IS_NAMESPACE);
418:       assertEquals(54, Node.SLASH_V);
419:       assertEquals(2, Node.POST_FLAG);
420:       assertEquals(40, Node.ORIGINALNAME_PROP);
421:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
422:       assertEquals(50, Node.FREE_CALL);
423:       assertEquals(57, Node.REFLECTED_OBJECT);
424:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
425:       assertEquals(52, Node.LENGTH);
426:       assertEquals(8, Node.FLAG_NO_THROWS);
427:       assertEquals(15, Node.NO_SIDE_EFFECTS);
428:       assertEquals(55, Node.INFERRED_FUNCTION);
429:       assertEquals(39, Node.EMPTY_BLOCK);
430:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
431:       assertEquals(1, Node.DECR_FLAG);
432:       assertEquals(49, Node.DIRECT_EVAL);
433:       assertEquals(36, Node.QUOTED_PROP);
434:       assertEquals(12, Node.COLUMN_BITS);
435:       assertEquals(48, Node.DIRECTIVES);
436:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
438:       assertEquals(37, Node.OPT_ARG_NAME);
439:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
440:       assertEquals(4095, Node.COLUMN_MASK);
441:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
442:       
443:       node0.setLineno(39);
444:       assertFalse(node0.equals((Object)node1));
445:       assertFalse(node0.isInstanceOf());
446:       assertFalse(node0.isObjectLit());
447:       assertFalse(node0.isAnd());
448:       assertFalse(node0.isNot());
449:       assertFalse(node0.isThis());
450:       assertFalse(node0.isComma());
451:       assertFalse(node0.isWith());
452:       assertFalse(node0.isExprResult());
453:       assertFalse(node0.isBreak());
454:       assertFalse(node0.hasOneChild());
455:       assertFalse(node0.isAssign());
456:       assertFalse(node0.isHook());
457:       assertFalse(node0.hasChildren());
458:       assertFalse(node0.isScript());
459:       assertFalse(node0.isString());
460:       assertFalse(node0.isCase());
461:       assertFalse(node0.isGetProp());
462:       assertFalse(node0.isContinue());
463:       assertFalse(node0.hasMoreThanOneChild());
464:       assertFalse(node0.isIn());
465:       assertEquals(39, node0.getType());
466:       assertFalse(node0.isNE());
467:       assertFalse(node0.isIf());
468:       assertFalse(node0.isCast());
469:       assertFalse(node0.isFalse());
470:       assertFalse(node0.isThrow());
471:       assertEquals(0, node0.getCharno());
472:       assertEquals(159744, node0.getSourcePosition());
473:       assertFalse(node0.isInc());
474:       assertFalse(node0.isSetterDef());
475:       assertEquals(0, node0.getChildCount());
476:       assertFalse(node0.isCatch());
477:       assertFalse(node0.isRegExp());
478:       assertFalse(node0.isNull());
479:       assertFalse(node0.isParamList());
480:       assertFalse(node0.isFunction());
481:       assertFalse(node0.isVoid());
482:       assertFalse(node0.isName());
483:       assertFalse(node0.isCall());
484:       assertFalse(node0.isArrayLit());
485:       assertFalse(node0.isBlock());
486:       assertFalse(node0.isFor());
487:       assertFalse(node0.isStringKey());
488:       assertFalse(node0.isDebugger());
489:       assertFalse(node0.isGetterDef());
490:       assertFalse(node0.isWhile());
491:       assertTrue(node0.isNumber());
492:       assertFalse(node0.isTry());
493:       assertFalse(node0.isAssignAdd());
494:       assertFalse(node0.isLabel());
495:       assertFalse(node0.isOr());
496:       assertFalse(node0.isReturn());
497:       assertFalse(node0.isTypeOf());
498:       assertFalse(node0.isDec());
499:       assertFalse(node0.isDelProp());
500:       assertFalse(node0.isSwitch());
501:       assertFalse(node0.isGetElem());
502:       assertFalse(node0.isLabelName());
503:       assertFalse(node0.isVar());
504:       assertEquals(39, node0.getLineno());
505:       assertFalse(node0.isTrue());
506:       assertFalse(node0.isDefaultCase());
507:       assertFalse(node0.isEmpty());
508:       assertFalse(node0.isNew());
509:       assertFalse(node0.isAdd());
510:       assertFalse(node0.isDo());
511:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
512:       assertEquals(56, Node.CHANGE_TIME);
513:       assertEquals(47, Node.IS_DISPATCHER);
514:       assertEquals(32, Node.INCRDECR_PROP);
515:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
516:       assertEquals(29, Node.JSDOC_INFO_PROP);
517:       assertEquals(53, Node.INPUT_ID);
518:       assertEquals(30, Node.VAR_ARGS_NAME);
519:       assertEquals(43, Node.IS_CONSTANT_NAME);
520:       assertEquals(51, Node.STATIC_SOURCE_FILE);
521:       assertEquals(57, Node.LAST_PROP);
522:       assertEquals(46, Node.IS_NAMESPACE);
523:       assertEquals(54, Node.SLASH_V);
524:       assertEquals(2, Node.POST_FLAG);
525:       assertEquals(40, Node.ORIGINALNAME_PROP);
526:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
527:       assertEquals(50, Node.FREE_CALL);
528:       assertEquals(57, Node.REFLECTED_OBJECT);
529:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
530:       assertEquals(52, Node.LENGTH);
531:       assertEquals(8, Node.FLAG_NO_THROWS);
532:       assertEquals(15, Node.NO_SIDE_EFFECTS);
533:       assertEquals(55, Node.INFERRED_FUNCTION);
534:       assertEquals(39, Node.EMPTY_BLOCK);
535:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
536:       assertEquals(1, Node.DECR_FLAG);
537:       assertEquals(49, Node.DIRECT_EVAL);
538:       assertEquals(36, Node.QUOTED_PROP);
539:       assertEquals(12, Node.COLUMN_BITS);
540:       assertEquals(48, Node.DIRECTIVES);
541:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
542:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
543:       assertEquals(37, Node.OPT_ARG_NAME);
544:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
545:       assertEquals(4095, Node.COLUMN_MASK);
546:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
547:       
548:       node0.putProp(4095, (Object) null);
549:       assertFalse(node0.equals((Object)node1));
550:       assertFalse(node0.isInstanceOf());
551:       assertFalse(node0.isObjectLit());
552:       assertFalse(node0.isAnd());
553:       assertFalse(node0.isNot());
554:       assertFalse(node0.isThis());
555:       assertFalse(node0.isComma());
556:       assertFalse(node0.isWith());
557:       assertFalse(node0.isExprResult());
558:       assertFalse(node0.isBreak());
559:       assertFalse(node0.hasOneChild());
560:       assertFalse(node0.isAssign());
561:       assertFalse(node0.isHook());
562:       assertFalse(node0.hasChildren());
563:       assertFalse(node0.isScript());
564:       assertFalse(node0.isString());
565:       assertFalse(node0.isCase());
566:       assertFalse(node0.isGetProp());
567:       assertFalse(node0.isContinue());
568:       assertFalse(node0.hasMoreThanOneChild());
569:       assertFalse(node0.isIn());
570:       assertEquals(39, node0.getType());
571:       assertFalse(node0.isNE());
572:       assertFalse(node0.isIf());
573:       assertFalse(node0.isCast());
574:       assertFalse(node0.isFalse());
575:       assertFalse(node0.isThrow());
576:       assertEquals(0, node0.getCharno());
577:       assertEquals(159744, node0.getSourcePosition());
578:       assertFalse(node0.isInc());
579:       assertFalse(node0.isSetterDef());
580:       assertEquals(0, node0.getChildCount());
581:       assertFalse(node0.isCatch());
582:       assertFalse(node0.isRegExp());
583:       assertFalse(node0.isNull());
584:       assertFalse(node0.isParamList());
585:       assertFalse(node0.isFunction());
586:       assertFalse(node0.isVoid());
587:       assertFalse(node0.isName());
588:       assertFalse(node0.isCall());
589:       assertFalse(node0.isArrayLit());
590:       assertFalse(node0.isBlock());
591:       assertFalse(node0.isFor());
592:       assertFalse(node0.isStringKey());
593:       assertFalse(node0.isDebugger());
594:       assertFalse(node0.isGetterDef());
595:       assertFalse(node0.isWhile());
596:       assertTrue(node0.isNumber());
597:       assertFalse(node0.isTry());
598:       assertFalse(node0.isAssignAdd());
599:       assertFalse(node0.isLabel());
600:       assertFalse(node0.isOr());
601:       assertFalse(node0.isReturn());
602:       assertFalse(node0.isTypeOf());
603:       assertFalse(node0.isDec());
604:       assertFalse(node0.isDelProp());
605:       assertFalse(node0.isSwitch());
606:       assertFalse(node0.isGetElem());
607:       assertFalse(node0.isLabelName());
608:       assertFalse(node0.isVar());
609:       assertEquals(39, node0.getLineno());
610:       assertFalse(node0.isTrue());
611:       assertFalse(node0.isDefaultCase());
612:       assertFalse(node0.isEmpty());
613:       assertFalse(node0.isNew());
614:       assertFalse(node0.isAdd());
615:       assertFalse(node0.isDo());
616:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
617:       assertEquals(56, Node.CHANGE_TIME);
618:       assertEquals(47, Node.IS_DISPATCHER);
619:       assertEquals(32, Node.INCRDECR_PROP);
620:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
621:       assertEquals(29, Node.JSDOC_INFO_PROP);
622:       assertEquals(53, Node.INPUT_ID);
623:       assertEquals(30, Node.VAR_ARGS_NAME);
624:       assertEquals(43, Node.IS_CONSTANT_NAME);
625:       assertEquals(51, Node.STATIC_SOURCE_FILE);
626:       assertEquals(57, Node.LAST_PROP);
627:       assertEquals(46, Node.IS_NAMESPACE);
628:       assertEquals(54, Node.SLASH_V);
629:       assertEquals(2, Node.POST_FLAG);
630:       assertEquals(40, Node.ORIGINALNAME_PROP);
631:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
632:       assertEquals(50, Node.FREE_CALL);
633:       assertEquals(57, Node.REFLECTED_OBJECT);
634:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
635:       assertEquals(52, Node.LENGTH);
636:       assertEquals(8, Node.FLAG_NO_THROWS);
637:       assertEquals(15, Node.NO_SIDE_EFFECTS);
638:       assertEquals(55, Node.INFERRED_FUNCTION);
639:       assertEquals(39, Node.EMPTY_BLOCK);
640:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
641:       assertEquals(1, Node.DECR_FLAG);
642:       assertEquals(49, Node.DIRECT_EVAL);
643:       assertEquals(36, Node.QUOTED_PROP);
644:       assertEquals(12, Node.COLUMN_BITS);
645:       assertEquals(48, Node.DIRECTIVES);
646:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
647:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
648:       assertEquals(37, Node.OPT_ARG_NAME);
649:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
650:       assertEquals(4095, Node.COLUMN_MASK);
651:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
652:       
653:       int int0 = node0.getIndexOfChild(node0);
654:       assertFalse(node0.equals((Object)node1));
655:       assertFalse(node0.isInstanceOf());
656:       assertFalse(node0.isObjectLit());
657:       assertFalse(node0.isAnd());
658:       assertFalse(node0.isNot());
659:       assertFalse(node0.isThis());
660:       assertFalse(node0.isComma());
661:       assertFalse(node0.isWith());
662:       assertFalse(node0.isExprResult());
663:       assertFalse(node0.isBreak());
664:       assertFalse(node0.hasOneChild());
665:       assertFalse(node0.isAssign());
666:       assertFalse(node0.isHook());
667:       assertFalse(node0.hasChildren());
668:       assertFalse(node0.isScript());
669:       assertFalse(node0.isString());
670:       assertFalse(node0.isCase());
671:       assertFalse(node0.isGetProp());
672:       assertFalse(node0.isContinue());
673:       assertFalse(node0.hasMoreThanOneChild());
674:       assertFalse(node0.isIn());
675:       assertEquals(39, node0.getType());
676:       assertFalse(node0.isNE());
677:       assertFalse(node0.isIf());
678:       assertFalse(node0.isCast());
679:       assertFalse(node0.isFalse());
680:       assertFalse(node0.isThrow());
681:       assertEquals(0, node0.getCharno());
682:       assertEquals(159744, node0.getSourcePosition());
683:       assertFalse(node0.isInc());
684:       assertFalse(node0.isSetterDef());
685:       assertEquals(0, node0.getChildCount());
686:       assertFalse(node0.isCatch());
687:       assertFalse(node0.isRegExp());
688:       assertFalse(node0.isNull());
689:       assertFalse(node0.isParamList());
690:       assertFalse(node0.isFunction());
691:       assertFalse(node0.isVoid());
692:       assertFalse(node0.isName());
693:       assertFalse(node0.isCall());
694:       assertFalse(node0.isArrayLit());
695:       assertFalse(node0.isBlock());
696:       assertFalse(node0.isFor());
697:       assertFalse(node0.isStringKey());
698:       assertFalse(node0.isDebugger());
699:       assertFalse(node0.isGetterDef());
700:       assertFalse(node0.isWhile());
701:       assertTrue(node0.isNumber());
702:       assertFalse(node0.isTry());
703:       assertFalse(node0.isAssignAdd());
704:       assertFalse(node0.isLabel());
705:       assertFalse(node0.isOr());
706:       assertFalse(node0.isReturn());
707:       assertFalse(node0.isTypeOf());
708:       assertFalse(node0.isDec());
709:       assertFalse(node0.isDelProp());
710:       assertFalse(node0.isSwitch());
711:       assertFalse(node0.isGetElem());
712:       assertFalse(node0.isLabelName());
713:       assertFalse(node0.isVar());
714:       assertEquals(39, node0.getLineno());
715:       assertFalse(node0.isTrue());
716:       assertFalse(node0.isDefaultCase());
717:       assertFalse(node0.isEmpty());
718:       assertFalse(node0.isNew());
719:       assertFalse(node0.isAdd());
720:       assertFalse(node0.isDo());
721:       assertEquals((-1), int0);
722:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
723:       assertEquals(56, Node.CHANGE_TIME);
724:       assertEquals(47, Node.IS_DISPATCHER);
725:       assertEquals(32, Node.INCRDECR_PROP);
726:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
727:       assertEquals(29, Node.JSDOC_INFO_PROP);
728:       assertEquals(53, Node.INPUT_ID);
729:       assertEquals(30, Node.VAR_ARGS_NAME);
730:       assertEquals(43, Node.IS_CONSTANT_NAME);
731:       assertEquals(51, Node.STATIC_SOURCE_FILE);
732:       assertEquals(57, Node.LAST_PROP);
733:       assertEquals(46, Node.IS_NAMESPACE);
734:       assertEquals(54, Node.SLASH_V);
735:       assertEquals(2, Node.POST_FLAG);
736:       assertEquals(40, Node.ORIGINALNAME_PROP);
737:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
738:       assertEquals(50, Node.FREE_CALL);
739:       assertEquals(57, Node.REFLECTED_OBJECT);
740:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
741:       assertEquals(52, Node.LENGTH);
742:       assertEquals(8, Node.FLAG_NO_THROWS);
743:       assertEquals(15, Node.NO_SIDE_EFFECTS);
744:       assertEquals(55, Node.INFERRED_FUNCTION);
745:       assertEquals(39, Node.EMPTY_BLOCK);
746:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
747:       assertEquals(1, Node.DECR_FLAG);
748:       assertEquals(49, Node.DIRECT_EVAL);
749:       assertEquals(36, Node.QUOTED_PROP);
750:       assertEquals(12, Node.COLUMN_BITS);
751:       assertEquals(48, Node.DIRECTIVES);
752:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
753:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
754:       assertEquals(37, Node.OPT_ARG_NAME);
755:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
756:       assertEquals(4095, Node.COLUMN_MASK);
757:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
758:       
759:       Iterable<Node> iterable0 = node0.children();
760:       assertFalse(node0.equals((Object)node1));
761:       assertFalse(node0.isInstanceOf());
762:       assertFalse(node0.isObjectLit());
763:       assertFalse(node0.isAnd());
764:       assertFalse(node0.isNot());
765:       assertFalse(node0.isThis());
766:       assertFalse(node0.isComma());
767:       assertFalse(node0.isWith());
768:       assertFalse(node0.isExprResult());
769:       assertFalse(node0.isBreak());
770:       assertFalse(node0.hasOneChild());
771:       assertFalse(node0.isAssign());
772:       assertFalse(node0.isHook());
773:       assertFalse(node0.hasChildren());
774:       assertFalse(node0.isScript());
775:       assertFalse(node0.isString());
776:       assertFalse(node0.isCase());
777:       assertFalse(node0.isGetProp());
778:       assertFalse(node0.isContinue());
779:       assertFalse(node0.hasMoreThanOneChild());
780:       assertFalse(node0.isIn());
781:       assertEquals(39, node0.getType());
782:       assertFalse(node0.isNE());
783:       assertFalse(node0.isIf());
784:       assertFalse(node0.isCast());
785:       assertFalse(node0.isFalse());
786:       assertFalse(node0.isThrow());
787:       assertEquals(0, node0.getCharno());
788:       assertEquals(159744, node0.getSourcePosition());
789:       assertFalse(node0.isInc());
790:       assertFalse(node0.isSetterDef());
791:       assertEquals(0, node0.getChildCount());
792:       assertFalse(node0.isCatch());
793:       assertFalse(node0.isRegExp());
794:       assertFalse(node0.isNull());
795:       assertFalse(node0.isParamList());
796:       assertFalse(node0.isFunction());
797:       assertFalse(node0.isVoid());
798:       assertFalse(node0.isName());
799:       assertFalse(node0.isCall());
800:       assertFalse(node0.isArrayLit());
801:       assertFalse(node0.isBlock());
802:       assertFalse(node0.isFor());
803:       assertFalse(node0.isStringKey());
804:       assertFalse(node0.isDebugger());
805:       assertFalse(node0.isGetterDef());
806:       assertFalse(node0.isWhile());
807:       assertTrue(node0.isNumber());
808:       assertFalse(node0.isTry());
809:       assertFalse(node0.isAssignAdd());
810:       assertFalse(node0.isLabel());
811:       assertFalse(node0.isOr());
812:       assertFalse(node0.isReturn());
813:       assertFalse(node0.isTypeOf());
814:       assertFalse(node0.isDec());
815:       assertFalse(node0.isDelProp());
816:       assertFalse(node0.isSwitch());
817:       assertFalse(node0.isGetElem());
818:       assertFalse(node0.isLabelName());
819:       assertFalse(node0.isVar());
820:       assertEquals(39, node0.getLineno());
821:       assertFalse(node0.isTrue());
822:       assertFalse(node0.isDefaultCase());
823:       assertFalse(node0.isEmpty());
824:       assertFalse(node0.isNew());
825:       assertFalse(node0.isAdd());
826:       assertFalse(node0.isDo());
827:       assertFalse(iterable0.contains(node1));
828:       assertNotNull(iterable0);
829:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
830:       assertEquals(56, Node.CHANGE_TIME);
831:       assertEquals(47, Node.IS_DISPATCHER);
832:       assertEquals(32, Node.INCRDECR_PROP);
833:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
834:       assertEquals(29, Node.JSDOC_INFO_PROP);
835:       assertEquals(53, Node.INPUT_ID);
836:       assertEquals(30, Node.VAR_ARGS_NAME);
837:       assertEquals(43, Node.IS_CONSTANT_NAME);
838:       assertEquals(51, Node.STATIC_SOURCE_FILE);
839:       assertEquals(57, Node.LAST_PROP);
840:       assertEquals(46, Node.IS_NAMESPACE);
841:       assertEquals(54, Node.SLASH_V);
842:       assertEquals(2, Node.POST_FLAG);
843:       assertEquals(40, Node.ORIGINALNAME_PROP);
844:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
845:       assertEquals(50, Node.FREE_CALL);
846:       assertEquals(57, Node.REFLECTED_OBJECT);
847:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
848:       assertEquals(52, Node.LENGTH);
849:       assertEquals(8, Node.FLAG_NO_THROWS);
850:       assertEquals(15, Node.NO_SIDE_EFFECTS);
851:       assertEquals(55, Node.INFERRED_FUNCTION);
852:       assertEquals(39, Node.EMPTY_BLOCK);
853:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
854:       assertEquals(1, Node.DECR_FLAG);
855:       assertEquals(49, Node.DIRECT_EVAL);
856:       assertEquals(36, Node.QUOTED_PROP);
857:       assertEquals(12, Node.COLUMN_BITS);
858:       assertEquals(48, Node.DIRECTIVES);
859:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
860:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
861:       assertEquals(37, Node.OPT_ARG_NAME);
862:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
863:       assertEquals(4095, Node.COLUMN_MASK);
864:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
865:       
866:       boolean boolean1 = node1.isIn();
867:       assertFalse(node1.equals((Object)node0));
868:       assertTrue(boolean1 == boolean0);
869:       assertFalse(node1.isFalse());
870:       assertFalse(node1.isBreak());
871:       assertFalse(node1.isHook());
872:       assertFalse(node1.isThis());
873:       assertFalse(node1.isThrow());
874:       assertFalse(node1.isComma());
875:       assertFalse(node1.isInstanceOf());
876:       assertEquals(46, node1.getType());
877:       assertFalse(node1.isInc());
878:       assertFalse(node1.isIn());
879:       assertFalse(node1.isAssign());
880:       assertFalse(node1.isDelProp());
881:       assertFalse(node1.isGetElem());
882:       assertFalse(node1.hasChildren());
883:       assertEquals((-1), node1.getSourcePosition());
884:       assertFalse(node1.isDec());
885:       assertFalse(node1.isReturn());
886:       assertFalse(node1.isVoid());
887:       assertFalse(node1.isCast());
888:       assertFalse(node1.isFunction());
889:       assertFalse(node1.isExprResult());
890:       assertFalse(node1.isTypeOf());
891:       assertFalse(node1.isContinue());
892:       assertFalse(node1.isNot());
893:       assertFalse(node1.isAnd());
894:       assertFalse(node1.isWhile());
895:       assertFalse(node1.isGetProp());
896:       assertFalse(node1.isDebugger());
897:       assertFalse(node1.isObjectLit());
898:       assertFalse(node1.isString());
899:       assertFalse(node1.isName());
900:       assertFalse(node1.isVar());
901:       assertFalse(node1.isNull());
902:       assertFalse(node1.isStringKey());
903:       assertFalse(node1.isParamList());
904:       assertFalse(node1.isBlock());
905:       assertEquals(0, node1.getChildCount());
906:       assertFalse(node1.isCatch());
907:       assertFalse(node1.isCall());
908:       assertFalse(node1.isDo());
909:       assertFalse(node1.isTrue());
910:       assertFalse(node1.isDefaultCase());
911:       assertFalse(node1.isOr());
912:       assertFalse(node1.isAssignAdd());
913:       assertFalse(node1.isAdd());
914:       assertFalse(node1.isNew());
915:       assertFalse(node1.isSetterDef());
916:       assertFalse(node1.isLabelName());
917:       assertFalse(node1.isFor());
918:       assertFalse(node1.isEmpty());
919:       assertFalse(node1.isGetterDef());
920:       assertFalse(node1.isNE());
921:       assertFalse(node1.isIf());
922:       assertFalse(node1.isLabel());
923:       assertEquals((-1), node1.getLineno());
924:       assertFalse(node1.isArrayLit());
925:       assertFalse(node1.hasMoreThanOneChild());
926:       assertFalse(node1.isRegExp());
927:       assertFalse(node1.isWith());
928:       assertFalse(node1.isCase());
929:       assertFalse(node1.isSwitch());
930:       assertFalse(node1.isTry());
931:       assertEquals((-1), node1.getCharno());
932:       assertFalse(node1.hasOneChild());
933:       assertFalse(node1.isScript());
934:       assertFalse(node1.isNumber());
935:       assertFalse(boolean1);
936:       assertEquals(43, Node.IS_CONSTANT_NAME);
937:       assertEquals(36, Node.QUOTED_PROP);
938:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
939:       assertEquals(55, Node.INFERRED_FUNCTION);
940:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
941:       assertEquals(29, Node.JSDOC_INFO_PROP);
942:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
943:       assertEquals(53, Node.INPUT_ID);
944:       assertEquals(8, Node.FLAG_NO_THROWS);
945:       assertEquals(56, Node.CHANGE_TIME);
946:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
947:       assertEquals(37, Node.OPT_ARG_NAME);
948:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
949:       assertEquals(48, Node.DIRECTIVES);
950:       assertEquals(32, Node.INCRDECR_PROP);
951:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
952:       assertEquals(12, Node.COLUMN_BITS);
953:       assertEquals(4095, Node.COLUMN_MASK);
954:       assertEquals(54, Node.SLASH_V);
955:       assertEquals(15, Node.NO_SIDE_EFFECTS);
956:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
957:       assertEquals(49, Node.DIRECT_EVAL);
958:       assertEquals(1, Node.DECR_FLAG);
959:       assertEquals(57, Node.LAST_PROP);
960:       assertEquals(51, Node.STATIC_SOURCE_FILE);
961:       assertEquals(57, Node.REFLECTED_OBJECT);
962:       assertEquals(46, Node.IS_NAMESPACE);
963:       assertEquals(50, Node.FREE_CALL);
964:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
965:       assertEquals(52, Node.LENGTH);
966:       assertEquals(2, Node.POST_FLAG);
967:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
968:       assertEquals(39, Node.EMPTY_BLOCK);
969:       assertEquals(47, Node.IS_DISPATCHER);
970:       assertEquals(40, Node.ORIGINALNAME_PROP);
971:       assertEquals(30, Node.VAR_ARGS_NAME);
972:       
973:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
974:       assertFalse(node0.equals((Object)node1));
975:       assertFalse(node1.equals((Object)node0));
976:       assertFalse(node0.isInstanceOf());
977:       assertFalse(node0.isObjectLit());
978:       assertFalse(node0.isAnd());
979:       assertFalse(node0.isNot());
980:       assertFalse(node0.isThis());
981:       assertFalse(node0.isComma());
982:       assertFalse(node0.isWith());
983:       assertFalse(node0.isExprResult());
984:       assertFalse(node0.isBreak());
985:       assertFalse(node0.hasOneChild());
986:       assertFalse(node0.isAssign());
987:       assertFalse(node0.isHook());
988:       assertFalse(node0.hasChildren());
989:       assertFalse(node0.isScript());
990:       assertFalse(node0.isString());
991:       assertFalse(node0.isCase());
992:       assertFalse(node0.isGetProp());
993:       assertFalse(node0.isContinue());
994:       assertFalse(node0.hasMoreThanOneChild());
995:       assertFalse(node0.isIn());
996:       assertEquals(39, node0.getType());
997:       assertFalse(node0.isNE());
998:       assertFalse(node0.isIf());
999:       assertFalse(node0.isCast());
1000:       assertFalse(node0.isFalse());
1001:       assertFalse(node0.isThrow());
1002:       assertEquals(0, node0.getCharno());
1003:       assertEquals(159744, node0.getSourcePosition());
1004:       assertFalse(node0.isInc());
1005:       assertFalse(node0.isSetterDef());
1006:       assertEquals(0, node0.getChildCount());
1007:       assertFalse(node0.isCatch());
1008:       assertFalse(node0.isRegExp());
1009:       assertFalse(node0.isNull());
1010:       assertFalse(node0.isParamList());
1011:       assertFalse(node0.isFunction());
1012:       assertFalse(node0.isVoid());
1013:       assertFalse(node0.isName());
1014:       assertFalse(node0.isCall());
1015:       assertFalse(node0.isArrayLit());
1016:       assertFalse(node0.isBlock());
1017:       assertFalse(node0.isFor());
1018:       assertFalse(node0.isStringKey());
1019:       assertFalse(node0.isDebugger());
1020:       assertFalse(node0.isGetterDef());
1021:       assertFalse(node0.isWhile());
1022:       assertTrue(node0.isNumber());
1023:       assertFalse(node0.isTry());
1024:       assertFalse(node0.isAssignAdd());
1025:       assertFalse(node0.isLabel());
1026:       assertFalse(node0.isOr());
1027:       assertFalse(node0.isReturn());
1028:       assertFalse(node0.isTypeOf());
1029:       assertFalse(node0.isDec());
1030:       assertFalse(node0.isDelProp());
1031:       assertFalse(node0.isSwitch());
1032:       assertFalse(node0.isGetElem());
1033:       assertFalse(node0.isLabelName());
1034:       assertFalse(node0.isVar());
1035:       assertEquals(39, node0.getLineno());
1036:       assertFalse(node0.isTrue());
1037:       assertFalse(node0.isDefaultCase());
1038:       assertFalse(node0.isEmpty());
1039:       assertFalse(node0.isNew());
1040:       assertFalse(node0.isAdd());
1041:       assertFalse(node0.isDo());
1042:       assertFalse(node1.isFalse());
1043:       assertFalse(node1.isBreak());
1044:       assertFalse(node1.isHook());
1045:       assertFalse(node1.isThis());
1046:       assertFalse(node1.isThrow());
1047:       assertFalse(node1.isComma());
1048:       assertFalse(node1.isInstanceOf());
1049:       assertEquals(46, node1.getType());
1050:       assertFalse(node1.isInc());
1051:       assertFalse(node1.isIn());
1052:       assertFalse(node1.isAssign());
1053:       assertFalse(node1.isDelProp());
1054:       assertFalse(node1.isGetElem());
1055:       assertFalse(node1.hasChildren());
1056:       assertEquals((-1), node1.getSourcePosition());
1057:       assertFalse(node1.isDec());
1058:       assertFalse(node1.isReturn());
1059:       assertFalse(node1.isVoid());
1060:       assertFalse(node1.isCast());
1061:       assertFalse(node1.isFunction());
1062:       assertFalse(node1.isExprResult());
1063:       assertFalse(node1.isTypeOf());
1064:       assertFalse(node1.isContinue());
1065:       assertFalse(node1.isNot());
1066:       assertFalse(node1.isAnd());
1067:       assertFalse(node1.isWhile());
1068:       assertFalse(node1.isGetProp());
1069:       assertFalse(node1.isDebugger());
1070:       assertFalse(node1.isObjectLit());
1071:       assertFalse(node1.isString());
1072:       assertFalse(node1.isName());
1073:       assertFalse(node1.isVar());
1074:       assertFalse(node1.isNull());
1075:       assertFalse(node1.isStringKey());
1076:       assertFalse(node1.isParamList());
1077:       assertFalse(node1.isBlock());
1078:       assertEquals(0, node1.getChildCount());
1079:       assertFalse(node1.isCatch());
1080:       assertFalse(node1.isCall());
1081:       assertFalse(node1.isDo());
1082:       assertFalse(node1.isTrue());
1083:       assertFalse(node1.isDefaultCase());
1084:       assertFalse(node1.isOr());
1085:       assertFalse(node1.isAssignAdd());
1086:       assertFalse(node1.isAdd());
1087:       assertFalse(node1.isNew());
1088:       assertFalse(node1.isSetterDef());
1089:       assertFalse(node1.isLabelName());
1090:       assertFalse(node1.isFor());
1091:       assertFalse(node1.isEmpty());
1092:       assertFalse(node1.isGetterDef());
1093:       assertFalse(node1.isNE());
1094:       assertFalse(node1.isIf());
1095:       assertFalse(node1.isLabel());
1096:       assertEquals((-1), node1.getLineno());
1097:       assertFalse(node1.isArrayLit());
1098:       assertFalse(node1.hasMoreThanOneChild());
1099:       assertFalse(node1.isRegExp());
1100:       assertFalse(node1.isWith());
1101:       assertFalse(node1.isCase());
1102:       assertFalse(node1.isSwitch());
1103:       assertFalse(node1.isTry());
1104:       assertEquals((-1), node1.getCharno());
1105:       assertFalse(node1.hasOneChild());
1106:       assertFalse(node1.isScript());
1107:       assertFalse(node1.isNumber());
1108:       assertNotNull(node_NodeMismatch0);
1109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1110:       assertEquals(56, Node.CHANGE_TIME);
1111:       assertEquals(47, Node.IS_DISPATCHER);
1112:       assertEquals(32, Node.INCRDECR_PROP);
1113:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1114:       assertEquals(29, Node.JSDOC_INFO_PROP);
1115:       assertEquals(53, Node.INPUT_ID);
1116:       assertEquals(30, Node.VAR_ARGS_NAME);
1117:       assertEquals(43, Node.IS_CONSTANT_NAME);
1118:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1119:       assertEquals(57, Node.LAST_PROP);
1120:       assertEquals(46, Node.IS_NAMESPACE);
1121:       assertEquals(54, Node.SLASH_V);
1122:       assertEquals(2, Node.POST_FLAG);
1123:       assertEquals(40, Node.ORIGINALNAME_PROP);
1124:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1125:       assertEquals(50, Node.FREE_CALL);
1126:       assertEquals(57, Node.REFLECTED_OBJECT);
1127:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1128:       assertEquals(52, Node.LENGTH);
1129:       assertEquals(8, Node.FLAG_NO_THROWS);
1130:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1131:       assertEquals(55, Node.INFERRED_FUNCTION);
1132:       assertEquals(39, Node.EMPTY_BLOCK);
1133:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1134:       assertEquals(1, Node.DECR_FLAG);
1135:       assertEquals(49, Node.DIRECT_EVAL);
1136:       assertEquals(36, Node.QUOTED_PROP);
1137:       assertEquals(12, Node.COLUMN_BITS);
1138:       assertEquals(48, Node.DIRECTIVES);
1139:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1140:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1141:       assertEquals(37, Node.OPT_ARG_NAME);
1142:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1143:       assertEquals(4095, Node.COLUMN_MASK);
1144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1145:       assertEquals(43, Node.IS_CONSTANT_NAME);
1146:       assertEquals(36, Node.QUOTED_PROP);
1147:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1148:       assertEquals(55, Node.INFERRED_FUNCTION);
1149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1150:       assertEquals(29, Node.JSDOC_INFO_PROP);
1151:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1152:       assertEquals(53, Node.INPUT_ID);
1153:       assertEquals(8, Node.FLAG_NO_THROWS);
1154:       assertEquals(56, Node.CHANGE_TIME);
1155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1156:       assertEquals(37, Node.OPT_ARG_NAME);
1157:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1158:       assertEquals(48, Node.DIRECTIVES);
1159:       assertEquals(32, Node.INCRDECR_PROP);
1160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1161:       assertEquals(12, Node.COLUMN_BITS);
1162:       assertEquals(4095, Node.COLUMN_MASK);
1163:       assertEquals(54, Node.SLASH_V);
1164:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1165:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1166:       assertEquals(49, Node.DIRECT_EVAL);
1167:       assertEquals(1, Node.DECR_FLAG);
1168:       assertEquals(57, Node.LAST_PROP);
1169:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1170:       assertEquals(57, Node.REFLECTED_OBJECT);
1171:       assertEquals(46, Node.IS_NAMESPACE);
1172:       assertEquals(50, Node.FREE_CALL);
1173:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1174:       assertEquals(52, Node.LENGTH);
1175:       assertEquals(2, Node.POST_FLAG);
1176:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1177:       assertEquals(39, Node.EMPTY_BLOCK);
1178:       assertEquals(47, Node.IS_DISPATCHER);
1179:       assertEquals(40, Node.ORIGINALNAME_PROP);
1180:       assertEquals(30, Node.VAR_ARGS_NAME);
1181:       
1182:       Node node2 = new Node(39, node0, node1);
1183:       assertFalse(node0.equals((Object)node1));
1184:       assertFalse(node1.equals((Object)node0));
1185:       assertFalse(node2.equals((Object)node0));
1186:       assertFalse(node2.equals((Object)node1));
1187:       assertFalse(node0.isInstanceOf());
1188:       assertFalse(node0.isObjectLit());
1189:       assertFalse(node0.isAnd());
1190:       assertFalse(node0.isNot());
1191:       assertFalse(node0.isThis());
1192:       assertFalse(node0.isComma());
1193:       assertFalse(node0.isWith());
1194:       assertFalse(node0.isExprResult());
1195:       assertFalse(node0.isBreak());
1196:       assertFalse(node0.hasOneChild());
1197:       assertFalse(node0.isAssign());
1198:       assertFalse(node0.isHook());
1199:       assertFalse(node0.hasChildren());
1200:       assertFalse(node0.isScript());
1201:       assertFalse(node0.isString());
1202:       assertFalse(node0.isCase());
1203:       assertFalse(node0.isGetProp());
1204:       assertFalse(node0.isContinue());
1205:       assertFalse(node0.hasMoreThanOneChild());
1206:       assertFalse(node0.isIn());
1207:       assertEquals(39, node0.getType());
1208:       assertFalse(node0.isNE());
1209:       assertFalse(node0.isIf());
1210:       assertFalse(node0.isCast());
1211:       assertFalse(node0.isFalse());
1212:       assertFalse(node0.isThrow());
1213:       assertEquals(0, node0.getCharno());
1214:       assertEquals(159744, node0.getSourcePosition());
1215:       assertFalse(node0.isInc());
1216:       assertFalse(node0.isSetterDef());
1217:       assertEquals(0, node0.getChildCount());
1218:       assertFalse(node0.isCatch());
1219:       assertFalse(node0.isRegExp());
1220:       assertFalse(node0.isNull());
1221:       assertFalse(node0.isParamList());
1222:       assertFalse(node0.isFunction());
1223:       assertFalse(node0.isVoid());
1224:       assertFalse(node0.isName());
1225:       assertFalse(node0.isCall());
1226:       assertFalse(node0.isArrayLit());
1227:       assertFalse(node0.isBlock());
1228:       assertFalse(node0.isFor());
1229:       assertFalse(node0.isStringKey());
1230:       assertFalse(node0.isDebugger());
1231:       assertFalse(node0.isGetterDef());
1232:       assertFalse(node0.isWhile());
1233:       assertTrue(node0.isNumber());
1234:       assertFalse(node0.isTry());
1235:       assertFalse(node0.isAssignAdd());
1236:       assertFalse(node0.isLabel());
1237:       assertFalse(node0.isOr());
1238:       assertFalse(node0.isReturn());
1239:       assertFalse(node0.isTypeOf());
1240:       assertFalse(node0.isDec());
1241:       assertFalse(node0.isDelProp());
1242:       assertFalse(node0.isSwitch());
1243:       assertFalse(node0.isGetElem());
1244:       assertFalse(node0.isLabelName());
1245:       assertFalse(node0.isVar());
1246:       assertEquals(39, node0.getLineno());
1247:       assertFalse(node0.isTrue());
1248:       assertFalse(node0.isDefaultCase());
1249:       assertFalse(node0.isEmpty());
1250:       assertFalse(node0.isNew());
1251:       assertFalse(node0.isAdd());
1252:       assertFalse(node0.isDo());
1253:       assertFalse(node1.isFalse());
1254:       assertFalse(node1.isBreak());
1255:       assertFalse(node1.isHook());
1256:       assertFalse(node1.isThis());
1257:       assertFalse(node1.isThrow());
1258:       assertFalse(node1.isComma());
1259:       assertFalse(node1.isInstanceOf());
1260:       assertEquals(46, node1.getType());
1261:       assertFalse(node1.isInc());
1262:       assertFalse(node1.isIn());
1263:       assertFalse(node1.isAssign());
1264:       assertFalse(node1.isDelProp());
1265:       assertFalse(node1.isGetElem());
1266:       assertFalse(node1.hasChildren());
1267:       assertEquals((-1), node1.getSourcePosition());
1268:       assertFalse(node1.isDec());
1269:       assertFalse(node1.isReturn());
1270:       assertFalse(node1.isVoid());
1271:       assertFalse(node1.isCast());
1272:       assertFalse(node1.isFunction());
1273:       assertFalse(node1.isExprResult());
1274:       assertFalse(node1.isTypeOf());
1275:       assertFalse(node1.isContinue());
1276:       assertFalse(node1.isNot());
1277:       assertFalse(node1.isAnd());
1278:       assertFalse(node1.isWhile());
1279:       assertFalse(node1.isGetProp());
1280:       assertFalse(node1.isDebugger());
1281:       assertFalse(node1.isObjectLit());
1282:       assertFalse(node1.isString());
1283:       assertFalse(node1.isName());
1284:       assertFalse(node1.isVar());
1285:       assertFalse(node1.isNull());
1286:       assertFalse(node1.isStringKey());
1287:       assertFalse(node1.isParamList());
1288:       assertFalse(node1.isBlock());
1289:       assertEquals(0, node1.getChildCount());
1290:       assertFalse(node1.isCatch());
1291:       assertFalse(node1.isCall());
1292:       assertFalse(node1.isDo());
1293:       assertFalse(node1.isTrue());
1294:       assertFalse(node1.isDefaultCase());
1295:       assertFalse(node1.isOr());
1296:       assertFalse(node1.isAssignAdd());
1297:       assertFalse(node1.isAdd());
1298:       assertFalse(node1.isNew());
1299:       assertFalse(node1.isSetterDef());
1300:       assertFalse(node1.isLabelName());
1301:       assertFalse(node1.isFor());
1302:       assertFalse(node1.isEmpty());
1303:       assertFalse(node1.isGetterDef());
1304:       assertFalse(node1.isNE());
1305:       assertFalse(node1.isIf());
1306:       assertFalse(node1.isLabel());
1307:       assertEquals((-1), node1.getLineno());
1308:       assertFalse(node1.isArrayLit());
1309:       assertFalse(node1.hasMoreThanOneChild());
1310:       assertFalse(node1.isRegExp());
1311:       assertFalse(node1.isWith());
1312:       assertFalse(node1.isCase());
1313:       assertFalse(node1.isSwitch());
1314:       assertFalse(node1.isTry());
1315:       assertEquals((-1), node1.getCharno());
1316:       assertFalse(node1.hasOneChild());
1317:       assertFalse(node1.isScript());
1318:       assertFalse(node1.isNumber());
1319:       assertFalse(node2.isBlock());
1320:       assertFalse(node2.isAdd());
1321:       assertFalse(node2.isWhile());
1322:       assertFalse(node2.isNew());
1323:       assertFalse(node2.isDo());
1324:       assertFalse(node2.isContinue());
1325:       assertFalse(node2.isVar());
1326:       assertFalse(node2.isCall());
1327:       assertEquals(39, node2.getType());
1328:       assertFalse(node2.isReturn());
1329:       assertFalse(node2.isLabel());
1330:       assertFalse(node2.isParamList());
1331:       assertFalse(node2.isLabelName());
1332:       assertFalse(node2.isStringKey());
1333:       assertEquals((-1), node2.getSourcePosition());
1334:       assertFalse(node2.isFunction());
1335:       assertFalse(node2.isDebugger());
1336:       assertFalse(node2.isScript());
1337:       assertFalse(node2.hasOneChild());
1338:       assertFalse(node2.isTry());
1339:       assertFalse(node2.isCast());
1340:       assertFalse(node2.isCatch());
1341:       assertFalse(node2.isInstanceOf());
1342:       assertFalse(node2.isFor());
1343:       assertEquals(2, node2.getChildCount());
1344:       assertFalse(node2.isWith());
1345:       assertFalse(node2.isRegExp());
1346:       assertFalse(node2.isSetterDef());
1347:       assertFalse(node2.isNE());
1348:       assertTrue(node2.hasChildren());
1349:       assertEquals((-1), node2.getLineno());
1350:       assertFalse(node2.isIf());
1351:       assertFalse(node2.isIn());
1352:       assertFalse(node2.isInc());
1353:       assertFalse(node2.isSwitch());
1354:       assertEquals((-1), node2.getCharno());
1355:       assertFalse(node2.isCase());
1356:       assertTrue(node2.hasMoreThanOneChild());
1357:       assertFalse(node2.isHook());
1358:       assertFalse(node2.isThrow());
1359:       assertFalse(node2.isFalse());
1360:       assertFalse(node2.isThis());
1361:       assertFalse(node2.isComma());
1362:       assertFalse(node2.isGetProp());
1363:       assertTrue(node2.isNumber());
1364:       assertFalse(node2.isAnd());
1365:       assertFalse(node2.isString());
1366:       assertFalse(node2.isNot());
1367:       assertFalse(node2.isObjectLit());
1368:       assertFalse(node2.isGetterDef());
1369:       assertFalse(node2.isTrue());
1370:       assertFalse(node2.isExprResult());
1371:       assertFalse(node2.isDefaultCase());
1372:       assertFalse(node2.isVoid());
1373:       assertFalse(node2.isArrayLit());
1374:       assertFalse(node2.isGetElem());
1375:       assertFalse(node2.isDec());
1376:       assertFalse(node2.isTypeOf());
1377:       assertFalse(node2.isAssign());
1378:       assertFalse(node2.isNull());
1379:       assertFalse(node2.isAssignAdd());
1380:       assertFalse(node2.isBreak());
1381:       assertFalse(node2.isName());
1382:       assertFalse(node2.isDelProp());
1383:       assertFalse(node2.isEmpty());
1384:       assertFalse(node2.isOr());
1385:       assertNotNull(node2);
1386:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1387:       assertEquals(56, Node.CHANGE_TIME);
1388:       assertEquals(47, Node.IS_DISPATCHER);
1389:       assertEquals(32, Node.INCRDECR_PROP);
1390:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1391:       assertEquals(29, Node.JSDOC_INFO_PROP);
1392:       assertEquals(53, Node.INPUT_ID);
1393:       assertEquals(30, Node.VAR_ARGS_NAME);
1394:       assertEquals(43, Node.IS_CONSTANT_NAME);
1395:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1396:       assertEquals(57, Node.LAST_PROP);
1397:       assertEquals(46, Node.IS_NAMESPACE);
1398:       assertEquals(54, Node.SLASH_V);
1399:       assertEquals(2, Node.POST_FLAG);
1400:       assertEquals(40, Node.ORIGINALNAME_PROP);
1401:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1402:       assertEquals(50, Node.FREE_CALL);
1403:       assertEquals(57, Node.REFLECTED_OBJECT);
1404:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1405:       assertEquals(52, Node.LENGTH);
1406:       assertEquals(8, Node.FLAG_NO_THROWS);
1407:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1408:       assertEquals(55, Node.INFERRED_FUNCTION);
1409:       assertEquals(39, Node.EMPTY_BLOCK);
1410:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1411:       assertEquals(1, Node.DECR_FLAG);
1412:       assertEquals(49, Node.DIRECT_EVAL);
1413:       assertEquals(36, Node.QUOTED_PROP);
1414:       assertEquals(12, Node.COLUMN_BITS);
1415:       assertEquals(48, Node.DIRECTIVES);
1416:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1417:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1418:       assertEquals(37, Node.OPT_ARG_NAME);
1419:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1420:       assertEquals(4095, Node.COLUMN_MASK);
1421:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1422:       assertEquals(43, Node.IS_CONSTANT_NAME);
1423:       assertEquals(36, Node.QUOTED_PROP);
1424:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1425:       assertEquals(55, Node.INFERRED_FUNCTION);
1426:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1427:       assertEquals(29, Node.JSDOC_INFO_PROP);
1428:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1429:       assertEquals(53, Node.INPUT_ID);
1430:       assertEquals(8, Node.FLAG_NO_THROWS);
1431:       assertEquals(56, Node.CHANGE_TIME);
1432:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1433:       assertEquals(37, Node.OPT_ARG_NAME);
1434:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1435:       assertEquals(48, Node.DIRECTIVES);
1436:       assertEquals(32, Node.INCRDECR_PROP);
1437:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1438:       assertEquals(12, Node.COLUMN_BITS);
1439:       assertEquals(4095, Node.COLUMN_MASK);
1440:       assertEquals(54, Node.SLASH_V);
1441:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1442:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1443:       assertEquals(49, Node.DIRECT_EVAL);
1444:       assertEquals(1, Node.DECR_FLAG);
1445:       assertEquals(57, Node.LAST_PROP);
1446:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1447:       assertEquals(57, Node.REFLECTED_OBJECT);
1448:       assertEquals(46, Node.IS_NAMESPACE);
1449:       assertEquals(50, Node.FREE_CALL);
1450:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1451:       assertEquals(52, Node.LENGTH);
1452:       assertEquals(2, Node.POST_FLAG);
1453:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1454:       assertEquals(39, Node.EMPTY_BLOCK);
1455:       assertEquals(47, Node.IS_DISPATCHER);
1456:       assertEquals(40, Node.ORIGINALNAME_PROP);
1457:       assertEquals(30, Node.VAR_ARGS_NAME);
1458:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1459:       assertEquals(55, Node.INFERRED_FUNCTION);
1460:       assertEquals(39, Node.EMPTY_BLOCK);
1461:       assertEquals(48, Node.DIRECTIVES);
1462:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1463:       assertEquals(50, Node.FREE_CALL);
1464:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1465:       assertEquals(43, Node.IS_CONSTANT_NAME);
1466:       assertEquals(8, Node.FLAG_NO_THROWS);
1467:       assertEquals(57, Node.REFLECTED_OBJECT);
1468:       assertEquals(36, Node.QUOTED_PROP);
1469:       assertEquals(52, Node.LENGTH);
1470:       assertEquals(53, Node.INPUT_ID);
1471:       assertEquals(54, Node.SLASH_V);
1472:       assertEquals(40, Node.ORIGINALNAME_PROP);
1473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1474:       assertEquals(30, Node.VAR_ARGS_NAME);
1475:       assertEquals(57, Node.LAST_PROP);
1476:       assertEquals(2, Node.POST_FLAG);
1477:       assertEquals(47, Node.IS_DISPATCHER);
1478:       assertEquals(46, Node.IS_NAMESPACE);
1479:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1480:       assertEquals(32, Node.INCRDECR_PROP);
1481:       assertEquals(1, Node.DECR_FLAG);
1482:       assertEquals(37, Node.OPT_ARG_NAME);
1483:       assertEquals(29, Node.JSDOC_INFO_PROP);
1484:       assertEquals(49, Node.DIRECT_EVAL);
1485:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1486:       assertEquals(56, Node.CHANGE_TIME);
1487:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1488:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1489:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1490:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1491:       assertEquals(12, Node.COLUMN_BITS);
1492:       assertEquals(4095, Node.COLUMN_MASK);
1493:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1494:       
1495:       // Undeclared exception!
1496:       try { 
1497:         node2.addChildBefore(node0, node1);
1498:         fail("Expecting exception: IllegalArgumentException");
1499:       
1500:       } catch(IllegalArgumentException e) {
1501:          //
1502:          // The new child node has siblings.
1503:          //
1504:          verifyException("com.google.common.base.Preconditions", e);
1505:       }
1506:   }
1507: }
RegularFileObject[/tmp/EvoSuite_177_1628161392915/com/google/javascript/rhino/Node_177_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_177_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_177_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_177_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:03:13.143 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertNotNull(node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Object object0 = node0.getProp(0);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertNull(object0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Node node1 = Node.newString(46, "UNKNOWN");
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertEquals(46, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isBlock());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertNotNull(node1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean0 = node0.isNull();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(boolean0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

node0.setLineno(39);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(0, node0.getCharno());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(39, node0.getLineno());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

node0.putProp(4095, (Object) null);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(0, node0.getCharno());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(39, node0.getLineno());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

int int0 = node0.getIndexOfChild(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(0, node0.getCharno());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(39, node0.getLineno());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertEquals((-1), int0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(0, node0.getCharno());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(39, node0.getLineno());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean1 = node1.isIn();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertEquals(46, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isBlock());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(boolean1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(0, node0.getCharno());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(39, node0.getLineno());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertEquals(46, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isBlock());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertNotNull(node_NodeMismatch0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node2 = new Node(39, node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isHook());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals(39, node0.getType());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(0, node0.getCharno());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isWhile());
assertTrue(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isVar());
assertEquals(39, node0.getLineno());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertEquals(46, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isBlock());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertEquals(39, node2.getType());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isParamList());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isCast());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFor());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNE());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isAnd());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isNull());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertNotNull(node2);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

node2.addChildBefore(node0, node1);

[MASTER] 11:03:13.639 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_179_1628161393538/com/google/javascript/rhino/Node_179_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_179_1628161393538/com/google/javascript/rhino/Node_179_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:13.639 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:13.639 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:13.639 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 982
[MASTER] 11:03:13.640 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_179_1628161393538/com/google/javascript/rhino/Node_179_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:13 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.HashSet;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_179_tmp__ESTest extends Node_179_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(54);
22:       assertFalse(node0.isObjectLit());
23:       assertFalse(node0.isAnd());
24:       assertFalse(node0.isInstanceOf());
25:       assertFalse(node0.isThis());
26:       assertFalse(node0.isExprResult());
27:       assertFalse(node0.isWith());
28:       assertFalse(node0.isComma());
29:       assertFalse(node0.isFalse());
30:       assertFalse(node0.isCast());
31:       assertFalse(node0.isLabelName());
32:       assertFalse(node0.hasOneChild());
33:       assertEquals((-1), node0.getCharno());
34:       assertFalse(node0.isGetProp());
35:       assertFalse(node0.isScript());
36:       assertFalse(node0.isSwitch());
37:       assertFalse(node0.isNumber());
38:       assertFalse(node0.isNot());
39:       assertEquals((-1), node0.getSourcePosition());
40:       assertFalse(node0.isContinue());
41:       assertFalse(node0.hasMoreThanOneChild());
42:       assertEquals((-1), node0.getLineno());
43:       assertFalse(node0.isCase());
44:       assertFalse(node0.isBlock());
45:       assertFalse(node0.isHook());
46:       assertFalse(node0.isThrow());
47:       assertFalse(node0.isIf());
48:       assertFalse(node0.isSetterDef());
49:       assertFalse(node0.isInc());
50:       assertFalse(node0.isNE());
51:       assertFalse(node0.isIn());
52:       assertFalse(node0.isCatch());
53:       assertFalse(node0.isDefaultCase());
54:       assertFalse(node0.isFunction());
55:       assertEquals(0, node0.getChildCount());
56:       assertFalse(node0.isRegExp());
57:       assertFalse(node0.isFor());
58:       assertFalse(node0.isStringKey());
59:       assertFalse(node0.isArrayLit());
60:       assertFalse(node0.isTry());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isParamList());
63:       assertFalse(node0.isGetterDef());
64:       assertFalse(node0.isString());
65:       assertFalse(node0.isWhile());
66:       assertFalse(node0.isDo());
67:       assertFalse(node0.isAssignAdd());
68:       assertFalse(node0.hasChildren());
69:       assertFalse(node0.isReturn());
70:       assertFalse(node0.isTypeOf());
71:       assertFalse(node0.isLabel());
72:       assertFalse(node0.isAssign());
73:       assertFalse(node0.isDec());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isName());
76:       assertFalse(node0.isGetElem());
77:       assertFalse(node0.isEmpty());
78:       assertFalse(node0.isVar());
79:       assertFalse(node0.isBreak());
80:       assertFalse(node0.isDelProp());
81:       assertFalse(node0.isNew());
82:       assertFalse(node0.isVoid());
83:       assertFalse(node0.isTrue());
84:       assertFalse(node0.isAdd());
85:       assertFalse(node0.isNull());
86:       assertFalse(node0.isOr());
87:       assertEquals(54, node0.getType());
88:       assertNotNull(node0);
89:       assertEquals(29, Node.JSDOC_INFO_PROP);
90:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
91:       assertEquals(56, Node.CHANGE_TIME);
92:       assertEquals(37, Node.OPT_ARG_NAME);
93:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
94:       assertEquals(46, Node.IS_NAMESPACE);
95:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
96:       assertEquals(51, Node.STATIC_SOURCE_FILE);
97:       assertEquals(36, Node.QUOTED_PROP);
98:       assertEquals(30, Node.VAR_ARGS_NAME);
99:       assertEquals(43, Node.IS_CONSTANT_NAME);
100:       assertEquals(57, Node.LAST_PROP);
101:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
102:       assertEquals(55, Node.INFERRED_FUNCTION);
103:       assertEquals(53, Node.INPUT_ID);
104:       assertEquals(15, Node.NO_SIDE_EFFECTS);
105:       assertEquals(2, Node.POST_FLAG);
106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
107:       assertEquals(47, Node.IS_DISPATCHER);
108:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
109:       assertEquals(50, Node.FREE_CALL);
110:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
111:       assertEquals(40, Node.ORIGINALNAME_PROP);
112:       assertEquals(48, Node.DIRECTIVES);
113:       assertEquals(39, Node.EMPTY_BLOCK);
114:       assertEquals(52, Node.LENGTH);
115:       assertEquals(8, Node.FLAG_NO_THROWS);
116:       assertEquals(54, Node.SLASH_V);
117:       assertEquals(57, Node.REFLECTED_OBJECT);
118:       assertEquals(49, Node.DIRECT_EVAL);
119:       assertEquals(1, Node.DECR_FLAG);
120:       assertEquals(32, Node.INCRDECR_PROP);
121:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
122:       assertEquals(4095, Node.COLUMN_MASK);
123:       assertEquals(12, Node.COLUMN_BITS);
124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
125:       
126:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
127:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
128:       assertEquals(0, node_SideEffectFlags0.valueOf());
129:       assertNotNull(node_SideEffectFlags0);
130:       
131:       node_SideEffectFlags0.clearSideEffectFlags();
132:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
133:       assertEquals(15, node_SideEffectFlags0.valueOf());
134:       
135:       Node node1 = new Node(124, node0, node0, 4095, 4);
136:       assertFalse(node1.equals((Object)node0));
137:       assertFalse(node0.isObjectLit());
138:       assertFalse(node0.isAnd());
139:       assertFalse(node0.isInstanceOf());
140:       assertFalse(node0.isThis());
141:       assertFalse(node0.isExprResult());
142:       assertFalse(node0.isWith());
143:       assertFalse(node0.isComma());
144:       assertFalse(node0.isFalse());
145:       assertFalse(node0.isCast());
146:       assertFalse(node0.isLabelName());
147:       assertFalse(node0.hasOneChild());
148:       assertEquals((-1), node0.getCharno());
149:       assertFalse(node0.isGetProp());
150:       assertFalse(node0.isScript());
151:       assertFalse(node0.isSwitch());
152:       assertFalse(node0.isNumber());
153:       assertFalse(node0.isNot());
154:       assertEquals((-1), node0.getSourcePosition());
155:       assertFalse(node0.isContinue());
156:       assertFalse(node0.hasMoreThanOneChild());
157:       assertEquals((-1), node0.getLineno());
158:       assertFalse(node0.isCase());
159:       assertFalse(node0.isBlock());
160:       assertFalse(node0.isHook());
161:       assertFalse(node0.isThrow());
162:       assertFalse(node0.isIf());
163:       assertFalse(node0.isSetterDef());
164:       assertFalse(node0.isInc());
165:       assertFalse(node0.isNE());
166:       assertFalse(node0.isIn());
167:       assertFalse(node0.isCatch());
168:       assertFalse(node0.isDefaultCase());
169:       assertFalse(node0.isFunction());
170:       assertEquals(0, node0.getChildCount());
171:       assertFalse(node0.isRegExp());
172:       assertFalse(node0.isFor());
173:       assertFalse(node0.isStringKey());
174:       assertFalse(node0.isArrayLit());
175:       assertFalse(node0.isTry());
176:       assertFalse(node0.isDebugger());
177:       assertFalse(node0.isParamList());
178:       assertFalse(node0.isGetterDef());
179:       assertFalse(node0.isString());
180:       assertFalse(node0.isWhile());
181:       assertFalse(node0.isDo());
182:       assertFalse(node0.isAssignAdd());
183:       assertFalse(node0.hasChildren());
184:       assertFalse(node0.isReturn());
185:       assertFalse(node0.isTypeOf());
186:       assertFalse(node0.isLabel());
187:       assertFalse(node0.isAssign());
188:       assertFalse(node0.isDec());
189:       assertFalse(node0.isCall());
190:       assertFalse(node0.isName());
191:       assertFalse(node0.isGetElem());
192:       assertFalse(node0.isEmpty());
193:       assertFalse(node0.isVar());
194:       assertFalse(node0.isBreak());
195:       assertFalse(node0.isDelProp());
196:       assertFalse(node0.isNew());
197:       assertFalse(node0.isVoid());
198:       assertFalse(node0.isTrue());
199:       assertFalse(node0.isAdd());
200:       assertFalse(node0.isNull());
201:       assertFalse(node0.isOr());
202:       assertEquals(54, node0.getType());
203:       assertFalse(node1.isNot());
204:       assertFalse(node1.isObjectLit());
205:       assertFalse(node1.isWith());
206:       assertEquals(4, node1.getCharno());
207:       assertFalse(node1.isAnd());
208:       assertFalse(node1.isScript());
209:       assertFalse(node1.isGetProp());
210:       assertFalse(node1.isFalse());
211:       assertFalse(node1.isLabelName());
212:       assertFalse(node1.isThrow());
213:       assertFalse(node1.isNumber());
214:       assertFalse(node1.isSwitch());
215:       assertFalse(node1.isCast());
216:       assertFalse(node1.isDo());
217:       assertFalse(node1.isString());
218:       assertFalse(node1.isWhile());
219:       assertFalse(node1.isReturn());
220:       assertFalse(node1.isLabel());
221:       assertFalse(node1.isNew());
222:       assertFalse(node1.isOr());
223:       assertFalse(node1.isAdd());
224:       assertFalse(node1.isAssignAdd());
225:       assertFalse(node1.isName());
226:       assertFalse(node1.isGetElem());
227:       assertEquals(16773124, node1.getSourcePosition());
228:       assertFalse(node1.isAssign());
229:       assertFalse(node1.isDec());
230:       assertFalse(node1.isNull());
231:       assertFalse(node1.isTypeOf());
232:       assertTrue(node1.hasOneChild());
233:       assertFalse(node1.isComma());
234:       assertFalse(node1.isVoid());
235:       assertEquals(124, node1.getType());
236:       assertFalse(node1.isDelProp());
237:       assertFalse(node1.isCall());
238:       assertFalse(node1.isExprResult());
239:       assertFalse(node1.isBreak());
240:       assertFalse(node1.isCatch());
241:       assertFalse(node1.isDefaultCase());
242:       assertFalse(node1.isRegExp());
243:       assertFalse(node1.isTrue());
244:       assertFalse(node1.isDebugger());
245:       assertFalse(node1.isTry());
246:       assertFalse(node1.isSetterDef());
247:       assertFalse(node1.isStringKey());
248:       assertFalse(node1.isGetterDef());
249:       assertFalse(node1.isVar());
250:       assertFalse(node1.isParamList());
251:       assertFalse(node1.isFunction());
252:       assertFalse(node1.isArrayLit());
253:       assertFalse(node1.isCase());
254:       assertFalse(node1.hasMoreThanOneChild());
255:       assertFalse(node1.isContinue());
256:       assertEquals(1, node1.getChildCount());
257:       assertFalse(node1.isBlock());
258:       assertTrue(node1.isEmpty());
259:       assertFalse(node1.isIn());
260:       assertFalse(node1.isInc());
261:       assertFalse(node1.isFor());
262:       assertFalse(node1.isIf());
263:       assertFalse(node1.isHook());
264:       assertFalse(node1.isNE());
265:       assertFalse(node1.isThis());
266:       assertEquals(4095, node1.getLineno());
267:       assertTrue(node1.hasChildren());
268:       assertFalse(node1.isInstanceOf());
269:       assertNotNull(node1);
270:       assertEquals(29, Node.JSDOC_INFO_PROP);
271:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
272:       assertEquals(56, Node.CHANGE_TIME);
273:       assertEquals(37, Node.OPT_ARG_NAME);
274:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
275:       assertEquals(46, Node.IS_NAMESPACE);
276:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
277:       assertEquals(51, Node.STATIC_SOURCE_FILE);
278:       assertEquals(36, Node.QUOTED_PROP);
279:       assertEquals(30, Node.VAR_ARGS_NAME);
280:       assertEquals(43, Node.IS_CONSTANT_NAME);
281:       assertEquals(57, Node.LAST_PROP);
282:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
283:       assertEquals(55, Node.INFERRED_FUNCTION);
284:       assertEquals(53, Node.INPUT_ID);
285:       assertEquals(15, Node.NO_SIDE_EFFECTS);
286:       assertEquals(2, Node.POST_FLAG);
287:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
288:       assertEquals(47, Node.IS_DISPATCHER);
289:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
290:       assertEquals(50, Node.FREE_CALL);
291:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
292:       assertEquals(40, Node.ORIGINALNAME_PROP);
293:       assertEquals(48, Node.DIRECTIVES);
294:       assertEquals(39, Node.EMPTY_BLOCK);
295:       assertEquals(52, Node.LENGTH);
296:       assertEquals(8, Node.FLAG_NO_THROWS);
297:       assertEquals(54, Node.SLASH_V);
298:       assertEquals(57, Node.REFLECTED_OBJECT);
299:       assertEquals(49, Node.DIRECT_EVAL);
300:       assertEquals(1, Node.DECR_FLAG);
301:       assertEquals(32, Node.INCRDECR_PROP);
302:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
303:       assertEquals(4095, Node.COLUMN_MASK);
304:       assertEquals(12, Node.COLUMN_BITS);
305:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
306:       assertEquals(47, Node.IS_DISPATCHER);
307:       assertEquals(56, Node.CHANGE_TIME);
308:       assertEquals(2, Node.POST_FLAG);
309:       assertEquals(46, Node.IS_NAMESPACE);
310:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
311:       assertEquals(37, Node.OPT_ARG_NAME);
312:       assertEquals(15, Node.NO_SIDE_EFFECTS);
313:       assertEquals(57, Node.LAST_PROP);
314:       assertEquals(36, Node.QUOTED_PROP);
315:       assertEquals(30, Node.VAR_ARGS_NAME);
316:       assertEquals(49, Node.DIRECT_EVAL);
317:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
318:       assertEquals(52, Node.LENGTH);
319:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
320:       assertEquals(55, Node.INFERRED_FUNCTION);
321:       assertEquals(29, Node.JSDOC_INFO_PROP);
322:       assertEquals(39, Node.EMPTY_BLOCK);
323:       assertEquals(53, Node.INPUT_ID);
324:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
325:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
326:       assertEquals(50, Node.FREE_CALL);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
329:       assertEquals(57, Node.REFLECTED_OBJECT);
330:       assertEquals(4095, Node.COLUMN_MASK);
331:       assertEquals(48, Node.DIRECTIVES);
332:       assertEquals(40, Node.ORIGINALNAME_PROP);
333:       assertEquals(43, Node.IS_CONSTANT_NAME);
334:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
335:       assertEquals(54, Node.SLASH_V);
336:       assertEquals(12, Node.COLUMN_BITS);
337:       assertEquals(32, Node.INCRDECR_PROP);
338:       assertEquals(51, Node.STATIC_SOURCE_FILE);
339:       assertEquals(1, Node.DECR_FLAG);
340:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
341:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
342:       
343:       boolean boolean0 = node1.isEquivalentTo(node0, false, true, false);
344:       assertFalse(node0.equals((Object)node1));
345:       assertFalse(node1.equals((Object)node0));
346:       assertNotSame(node0, node1);
347:       assertNotSame(node1, node0);
348:       assertFalse(node0.isObjectLit());
349:       assertFalse(node0.isAnd());
350:       assertFalse(node0.isInstanceOf());
351:       assertFalse(node0.isThis());
352:       assertFalse(node0.isExprResult());
353:       assertFalse(node0.isWith());
354:       assertFalse(node0.isComma());
355:       assertFalse(node0.isFalse());
356:       assertFalse(node0.isCast());
357:       assertFalse(node0.isLabelName());
358:       assertFalse(node0.hasOneChild());
359:       assertEquals((-1), node0.getCharno());
360:       assertFalse(node0.isGetProp());
361:       assertFalse(node0.isScript());
362:       assertFalse(node0.isSwitch());
363:       assertFalse(node0.isNumber());
364:       assertFalse(node0.isNot());
365:       assertEquals((-1), node0.getSourcePosition());
366:       assertFalse(node0.isContinue());
367:       assertFalse(node0.hasMoreThanOneChild());
368:       assertEquals((-1), node0.getLineno());
369:       assertFalse(node0.isCase());
370:       assertFalse(node0.isBlock());
371:       assertFalse(node0.isHook());
372:       assertFalse(node0.isThrow());
373:       assertFalse(node0.isIf());
374:       assertFalse(node0.isSetterDef());
375:       assertFalse(node0.isInc());
376:       assertFalse(node0.isNE());
377:       assertFalse(node0.isIn());
378:       assertFalse(node0.isCatch());
379:       assertFalse(node0.isDefaultCase());
380:       assertFalse(node0.isFunction());
381:       assertEquals(0, node0.getChildCount());
382:       assertFalse(node0.isRegExp());
383:       assertFalse(node0.isFor());
384:       assertFalse(node0.isStringKey());
385:       assertFalse(node0.isArrayLit());
386:       assertFalse(node0.isTry());
387:       assertFalse(node0.isDebugger());
388:       assertFalse(node0.isParamList());
389:       assertFalse(node0.isGetterDef());
390:       assertFalse(node0.isString());
391:       assertFalse(node0.isWhile());
392:       assertFalse(node0.isDo());
393:       assertFalse(node0.isAssignAdd());
394:       assertFalse(node0.hasChildren());
395:       assertFalse(node0.isReturn());
396:       assertFalse(node0.isTypeOf());
397:       assertFalse(node0.isLabel());
398:       assertFalse(node0.isAssign());
399:       assertFalse(node0.isDec());
400:       assertFalse(node0.isCall());
401:       assertFalse(node0.isName());
402:       assertFalse(node0.isGetElem());
403:       assertFalse(node0.isEmpty());
404:       assertFalse(node0.isVar());
405:       assertFalse(node0.isBreak());
406:       assertFalse(node0.isDelProp());
407:       assertFalse(node0.isNew());
408:       assertFalse(node0.isVoid());
409:       assertFalse(node0.isTrue());
410:       assertFalse(node0.isAdd());
411:       assertFalse(node0.isNull());
412:       assertFalse(node0.isOr());
413:       assertEquals(54, node0.getType());
414:       assertFalse(node1.isNot());
415:       assertFalse(node1.isObjectLit());
416:       assertFalse(node1.isWith());
417:       assertEquals(4, node1.getCharno());
418:       assertFalse(node1.isAnd());
419:       assertFalse(node1.isScript());
420:       assertFalse(node1.isGetProp());
421:       assertFalse(node1.isFalse());
422:       assertFalse(node1.isLabelName());
423:       assertFalse(node1.isThrow());
424:       assertFalse(node1.isNumber());
425:       assertFalse(node1.isSwitch());
426:       assertFalse(node1.isCast());
427:       assertFalse(node1.isDo());
428:       assertFalse(node1.isString());
429:       assertFalse(node1.isWhile());
430:       assertFalse(node1.isReturn());
431:       assertFalse(node1.isLabel());
432:       assertFalse(node1.isNew());
433:       assertFalse(node1.isOr());
434:       assertFalse(node1.isAdd());
435:       assertFalse(node1.isAssignAdd());
436:       assertFalse(node1.isName());
437:       assertFalse(node1.isGetElem());
438:       assertEquals(16773124, node1.getSourcePosition());
439:       assertFalse(node1.isAssign());
440:       assertFalse(node1.isDec());
441:       assertFalse(node1.isNull());
442:       assertFalse(node1.isTypeOf());
443:       assertTrue(node1.hasOneChild());
444:       assertFalse(node1.isComma());
445:       assertFalse(node1.isVoid());
446:       assertEquals(124, node1.getType());
447:       assertFalse(node1.isDelProp());
448:       assertFalse(node1.isCall());
449:       assertFalse(node1.isExprResult());
450:       assertFalse(node1.isBreak());
451:       assertFalse(node1.isCatch());
452:       assertFalse(node1.isDefaultCase());
453:       assertFalse(node1.isRegExp());
454:       assertFalse(node1.isTrue());
455:       assertFalse(node1.isDebugger());
456:       assertFalse(node1.isTry());
457:       assertFalse(node1.isSetterDef());
458:       assertFalse(node1.isStringKey());
459:       assertFalse(node1.isGetterDef());
460:       assertFalse(node1.isVar());
461:       assertFalse(node1.isParamList());
462:       assertFalse(node1.isFunction());
463:       assertFalse(node1.isArrayLit());
464:       assertFalse(node1.isCase());
465:       assertFalse(node1.hasMoreThanOneChild());
466:       assertFalse(node1.isContinue());
467:       assertEquals(1, node1.getChildCount());
468:       assertFalse(node1.isBlock());
469:       assertTrue(node1.isEmpty());
470:       assertFalse(node1.isIn());
471:       assertFalse(node1.isInc());
472:       assertFalse(node1.isFor());
473:       assertFalse(node1.isIf());
474:       assertFalse(node1.isHook());
475:       assertFalse(node1.isNE());
476:       assertFalse(node1.isThis());
477:       assertEquals(4095, node1.getLineno());
478:       assertTrue(node1.hasChildren());
479:       assertFalse(node1.isInstanceOf());
480:       assertFalse(boolean0);
481:       assertEquals(29, Node.JSDOC_INFO_PROP);
482:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
483:       assertEquals(56, Node.CHANGE_TIME);
484:       assertEquals(37, Node.OPT_ARG_NAME);
485:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
486:       assertEquals(46, Node.IS_NAMESPACE);
487:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
488:       assertEquals(51, Node.STATIC_SOURCE_FILE);
489:       assertEquals(36, Node.QUOTED_PROP);
490:       assertEquals(30, Node.VAR_ARGS_NAME);
491:       assertEquals(43, Node.IS_CONSTANT_NAME);
492:       assertEquals(57, Node.LAST_PROP);
493:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
494:       assertEquals(55, Node.INFERRED_FUNCTION);
495:       assertEquals(53, Node.INPUT_ID);
496:       assertEquals(15, Node.NO_SIDE_EFFECTS);
497:       assertEquals(2, Node.POST_FLAG);
498:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
499:       assertEquals(47, Node.IS_DISPATCHER);
500:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
501:       assertEquals(50, Node.FREE_CALL);
502:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
503:       assertEquals(40, Node.ORIGINALNAME_PROP);
504:       assertEquals(48, Node.DIRECTIVES);
505:       assertEquals(39, Node.EMPTY_BLOCK);
506:       assertEquals(52, Node.LENGTH);
507:       assertEquals(8, Node.FLAG_NO_THROWS);
508:       assertEquals(54, Node.SLASH_V);
509:       assertEquals(57, Node.REFLECTED_OBJECT);
510:       assertEquals(49, Node.DIRECT_EVAL);
511:       assertEquals(1, Node.DECR_FLAG);
512:       assertEquals(32, Node.INCRDECR_PROP);
513:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
514:       assertEquals(4095, Node.COLUMN_MASK);
515:       assertEquals(12, Node.COLUMN_BITS);
516:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
517:       assertEquals(47, Node.IS_DISPATCHER);
518:       assertEquals(56, Node.CHANGE_TIME);
519:       assertEquals(2, Node.POST_FLAG);
520:       assertEquals(46, Node.IS_NAMESPACE);
521:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
522:       assertEquals(37, Node.OPT_ARG_NAME);
523:       assertEquals(15, Node.NO_SIDE_EFFECTS);
524:       assertEquals(57, Node.LAST_PROP);
525:       assertEquals(36, Node.QUOTED_PROP);
526:       assertEquals(30, Node.VAR_ARGS_NAME);
527:       assertEquals(49, Node.DIRECT_EVAL);
528:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
529:       assertEquals(52, Node.LENGTH);
530:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
531:       assertEquals(55, Node.INFERRED_FUNCTION);
532:       assertEquals(29, Node.JSDOC_INFO_PROP);
533:       assertEquals(39, Node.EMPTY_BLOCK);
534:       assertEquals(53, Node.INPUT_ID);
535:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
536:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
537:       assertEquals(50, Node.FREE_CALL);
538:       assertEquals(8, Node.FLAG_NO_THROWS);
539:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
540:       assertEquals(57, Node.REFLECTED_OBJECT);
541:       assertEquals(4095, Node.COLUMN_MASK);
542:       assertEquals(48, Node.DIRECTIVES);
543:       assertEquals(40, Node.ORIGINALNAME_PROP);
544:       assertEquals(43, Node.IS_CONSTANT_NAME);
545:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
546:       assertEquals(54, Node.SLASH_V);
547:       assertEquals(12, Node.COLUMN_BITS);
548:       assertEquals(32, Node.INCRDECR_PROP);
549:       assertEquals(51, Node.STATIC_SOURCE_FILE);
550:       assertEquals(1, Node.DECR_FLAG);
551:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
552:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
553:       
554:       Node node2 = node0.getParent();
555:       assertFalse(node0.equals((Object)node1));
556:       assertFalse(node2.equals((Object)node0));
557:       assertNotSame(node0, node2);
558:       assertNotSame(node0, node1);
559:       assertNotSame(node2, node0);
560:       assertSame(node2, node1);
561:       assertFalse(node0.isObjectLit());
562:       assertFalse(node0.isAnd());
563:       assertFalse(node0.isInstanceOf());
564:       assertFalse(node0.isThis());
565:       assertFalse(node0.isExprResult());
566:       assertFalse(node0.isWith());
567:       assertFalse(node0.isComma());
568:       assertFalse(node0.isFalse());
569:       assertFalse(node0.isCast());
570:       assertFalse(node0.isLabelName());
571:       assertFalse(node0.hasOneChild());
572:       assertEquals((-1), node0.getCharno());
573:       assertFalse(node0.isGetProp());
574:       assertFalse(node0.isScript());
575:       assertFalse(node0.isSwitch());
576:       assertFalse(node0.isNumber());
577:       assertFalse(node0.isNot());
578:       assertEquals((-1), node0.getSourcePosition());
579:       assertFalse(node0.isContinue());
580:       assertFalse(node0.hasMoreThanOneChild());
581:       assertEquals((-1), node0.getLineno());
582:       assertFalse(node0.isCase());
583:       assertFalse(node0.isBlock());
584:       assertFalse(node0.isHook());
585:       assertFalse(node0.isThrow());
586:       assertFalse(node0.isIf());
587:       assertFalse(node0.isSetterDef());
588:       assertFalse(node0.isInc());
589:       assertFalse(node0.isNE());
590:       assertFalse(node0.isIn());
591:       assertFalse(node0.isCatch());
592:       assertFalse(node0.isDefaultCase());
593:       assertFalse(node0.isFunction());
594:       assertEquals(0, node0.getChildCount());
595:       assertFalse(node0.isRegExp());
596:       assertFalse(node0.isFor());
597:       assertFalse(node0.isStringKey());
598:       assertFalse(node0.isArrayLit());
599:       assertFalse(node0.isTry());
600:       assertFalse(node0.isDebugger());
601:       assertFalse(node0.isParamList());
602:       assertFalse(node0.isGetterDef());
603:       assertFalse(node0.isString());
604:       assertFalse(node0.isWhile());
605:       assertFalse(node0.isDo());
606:       assertFalse(node0.isAssignAdd());
607:       assertFalse(node0.hasChildren());
608:       assertFalse(node0.isReturn());
609:       assertFalse(node0.isTypeOf());
610:       assertFalse(node0.isLabel());
611:       assertFalse(node0.isAssign());
612:       assertFalse(node0.isDec());
613:       assertFalse(node0.isCall());
614:       assertFalse(node0.isName());
615:       assertFalse(node0.isGetElem());
616:       assertFalse(node0.isEmpty());
617:       assertFalse(node0.isVar());
618:       assertFalse(node0.isBreak());
619:       assertFalse(node0.isDelProp());
620:       assertFalse(node0.isNew());
621:       assertFalse(node0.isVoid());
622:       assertFalse(node0.isTrue());
623:       assertFalse(node0.isAdd());
624:       assertFalse(node0.isNull());
625:       assertFalse(node0.isOr());
626:       assertEquals(54, node0.getType());
627:       assertFalse(node2.isNE());
628:       assertTrue(node2.hasChildren());
629:       assertFalse(node2.isIf());
630:       assertFalse(node2.isDelProp());
631:       assertFalse(node2.isArrayLit());
632:       assertFalse(node2.isFor());
633:       assertTrue(node2.hasOneChild());
634:       assertEquals(1, node2.getChildCount());
635:       assertFalse(node2.isInc());
636:       assertFalse(node2.isTrue());
637:       assertFalse(node2.isDefaultCase());
638:       assertEquals(124, node2.getType());
639:       assertFalse(node2.isVoid());
640:       assertFalse(node2.isIn());
641:       assertFalse(node2.isSetterDef());
642:       assertFalse(node2.isComma());
643:       assertFalse(node2.isGetProp());
644:       assertFalse(node2.isNull());
645:       assertFalse(node2.isBreak());
646:       assertEquals(16773124, node2.getSourcePosition());
647:       assertFalse(node2.isName());
648:       assertFalse(node2.isThrow());
649:       assertFalse(node2.isCall());
650:       assertFalse(node2.isFalse());
651:       assertFalse(node2.isFunction());
652:       assertFalse(node2.isDebugger());
653:       assertFalse(node2.isWhile());
654:       assertFalse(node2.isAnd());
655:       assertFalse(node2.isString());
656:       assertFalse(node2.isNot());
657:       assertFalse(node2.isObjectLit());
658:       assertTrue(node2.isEmpty());
659:       assertFalse(node2.isAssignAdd());
660:       assertEquals(4095, node2.getLineno());
661:       assertFalse(node2.isLabelName());
662:       assertFalse(node2.isCast());
663:       assertFalse(node2.hasMoreThanOneChild());
664:       assertFalse(node2.isContinue());
665:       assertFalse(node2.isGetElem());
666:       assertFalse(node2.isReturn());
667:       assertFalse(node2.isLabel());
668:       assertFalse(node2.isDec());
669:       assertFalse(node2.isTypeOf());
670:       assertFalse(node2.isAssign());
671:       assertFalse(node2.isAdd());
672:       assertFalse(node2.isExprResult());
673:       assertEquals(4, node2.getCharno());
674:       assertFalse(node2.isNew());
675:       assertFalse(node2.isDo());
676:       assertFalse(node2.isOr());
677:       assertFalse(node2.isThis());
678:       assertFalse(node2.isParamList());
679:       assertFalse(node2.isCatch());
680:       assertFalse(node2.isHook());
681:       assertFalse(node2.isInstanceOf());
682:       assertFalse(node2.isVar());
683:       assertFalse(node2.isWith());
684:       assertFalse(node2.isRegExp());
685:       assertFalse(node2.isSwitch());
686:       assertFalse(node2.isBlock());
687:       assertFalse(node2.isScript());
688:       assertFalse(node2.isCase());
689:       assertFalse(node2.isTry());
690:       assertFalse(node2.isStringKey());
691:       assertFalse(node2.isNumber());
692:       assertFalse(node2.isGetterDef());
693:       assertNotNull(node2);
694:       assertEquals(29, Node.JSDOC_INFO_PROP);
695:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
696:       assertEquals(56, Node.CHANGE_TIME);
697:       assertEquals(37, Node.OPT_ARG_NAME);
698:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
699:       assertEquals(46, Node.IS_NAMESPACE);
700:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
701:       assertEquals(51, Node.STATIC_SOURCE_FILE);
702:       assertEquals(36, Node.QUOTED_PROP);
703:       assertEquals(30, Node.VAR_ARGS_NAME);
704:       assertEquals(43, Node.IS_CONSTANT_NAME);
705:       assertEquals(57, Node.LAST_PROP);
706:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
707:       assertEquals(55, Node.INFERRED_FUNCTION);
708:       assertEquals(53, Node.INPUT_ID);
709:       assertEquals(15, Node.NO_SIDE_EFFECTS);
710:       assertEquals(2, Node.POST_FLAG);
711:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
712:       assertEquals(47, Node.IS_DISPATCHER);
713:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
714:       assertEquals(50, Node.FREE_CALL);
715:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
716:       assertEquals(40, Node.ORIGINALNAME_PROP);
717:       assertEquals(48, Node.DIRECTIVES);
718:       assertEquals(39, Node.EMPTY_BLOCK);
719:       assertEquals(52, Node.LENGTH);
720:       assertEquals(8, Node.FLAG_NO_THROWS);
721:       assertEquals(54, Node.SLASH_V);
722:       assertEquals(57, Node.REFLECTED_OBJECT);
723:       assertEquals(49, Node.DIRECT_EVAL);
724:       assertEquals(1, Node.DECR_FLAG);
725:       assertEquals(32, Node.INCRDECR_PROP);
726:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
727:       assertEquals(4095, Node.COLUMN_MASK);
728:       assertEquals(12, Node.COLUMN_BITS);
729:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
730:       assertEquals(52, Node.LENGTH);
731:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
732:       assertEquals(54, Node.SLASH_V);
733:       assertEquals(40, Node.ORIGINALNAME_PROP);
734:       assertEquals(15, Node.NO_SIDE_EFFECTS);
735:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
736:       assertEquals(49, Node.DIRECT_EVAL);
737:       assertEquals(50, Node.FREE_CALL);
738:       assertEquals(8, Node.FLAG_NO_THROWS);
739:       assertEquals(57, Node.REFLECTED_OBJECT);
740:       assertEquals(51, Node.STATIC_SOURCE_FILE);
741:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
742:       assertEquals(48, Node.DIRECTIVES);
743:       assertEquals(32, Node.INCRDECR_PROP);
744:       assertEquals(37, Node.OPT_ARG_NAME);
745:       assertEquals(1, Node.DECR_FLAG);
746:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
747:       assertEquals(12, Node.COLUMN_BITS);
748:       assertEquals(4095, Node.COLUMN_MASK);
749:       assertEquals(53, Node.INPUT_ID);
750:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
751:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
752:       assertEquals(29, Node.JSDOC_INFO_PROP);
753:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
754:       assertEquals(55, Node.INFERRED_FUNCTION);
755:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
756:       assertEquals(43, Node.IS_CONSTANT_NAME);
757:       assertEquals(56, Node.CHANGE_TIME);
758:       assertEquals(36, Node.QUOTED_PROP);
759:       assertEquals(46, Node.IS_NAMESPACE);
760:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
761:       assertEquals(39, Node.EMPTY_BLOCK);
762:       assertEquals(30, Node.VAR_ARGS_NAME);
763:       assertEquals(57, Node.LAST_PROP);
764:       assertEquals(2, Node.POST_FLAG);
765:       assertEquals(47, Node.IS_DISPATCHER);
766:       
767:       int int0 = node1.getChildCount();
768:       assertFalse(node0.equals((Object)node2));
769:       assertFalse(node0.equals((Object)node1));
770:       assertFalse(node1.equals((Object)node0));
771:       assertNotSame(node0, node2);
772:       assertNotSame(node0, node1);
773:       assertSame(node1, node2);
774:       assertNotSame(node1, node0);
775:       assertFalse(node0.isObjectLit());
776:       assertFalse(node0.isAnd());
777:       assertFalse(node0.isInstanceOf());
778:       assertFalse(node0.isThis());
779:       assertFalse(node0.isExprResult());
780:       assertFalse(node0.isWith());
781:       assertFalse(node0.isComma());
782:       assertFalse(node0.isFalse());
783:       assertFalse(node0.isCast());
784:       assertFalse(node0.isLabelName());
785:       assertFalse(node0.hasOneChild());
786:       assertEquals((-1), node0.getCharno());
787:       assertFalse(node0.isGetProp());
788:       assertFalse(node0.isScript());
789:       assertFalse(node0.isSwitch());
790:       assertFalse(node0.isNumber());
791:       assertFalse(node0.isNot());
792:       assertEquals((-1), node0.getSourcePosition());
793:       assertFalse(node0.isContinue());
794:       assertFalse(node0.hasMoreThanOneChild());
795:       assertEquals((-1), node0.getLineno());
796:       assertFalse(node0.isCase());
797:       assertFalse(node0.isBlock());
798:       assertFalse(node0.isHook());
799:       assertFalse(node0.isThrow());
800:       assertFalse(node0.isIf());
801:       assertFalse(node0.isSetterDef());
802:       assertFalse(node0.isInc());
803:       assertFalse(node0.isNE());
804:       assertFalse(node0.isIn());
805:       assertFalse(node0.isCatch());
806:       assertFalse(node0.isDefaultCase());
807:       assertFalse(node0.isFunction());
808:       assertEquals(0, node0.getChildCount());
809:       assertFalse(node0.isRegExp());
810:       assertFalse(node0.isFor());
811:       assertFalse(node0.isStringKey());
812:       assertFalse(node0.isArrayLit());
813:       assertFalse(node0.isTry());
814:       assertFalse(node0.isDebugger());
815:       assertFalse(node0.isParamList());
816:       assertFalse(node0.isGetterDef());
817:       assertFalse(node0.isString());
818:       assertFalse(node0.isWhile());
819:       assertFalse(node0.isDo());
820:       assertFalse(node0.isAssignAdd());
821:       assertFalse(node0.hasChildren());
822:       assertFalse(node0.isReturn());
823:       assertFalse(node0.isTypeOf());
824:       assertFalse(node0.isLabel());
825:       assertFalse(node0.isAssign());
826:       assertFalse(node0.isDec());
827:       assertFalse(node0.isCall());
828:       assertFalse(node0.isName());
829:       assertFalse(node0.isGetElem());
830:       assertFalse(node0.isEmpty());
831:       assertFalse(node0.isVar());
832:       assertFalse(node0.isBreak());
833:       assertFalse(node0.isDelProp());
834:       assertFalse(node0.isNew());
835:       assertFalse(node0.isVoid());
836:       assertFalse(node0.isTrue());
837:       assertFalse(node0.isAdd());
838:       assertFalse(node0.isNull());
839:       assertFalse(node0.isOr());
840:       assertEquals(54, node0.getType());
841:       assertFalse(node1.isNot());
842:       assertFalse(node1.isObjectLit());
843:       assertFalse(node1.isWith());
844:       assertEquals(4, node1.getCharno());
845:       assertFalse(node1.isAnd());
846:       assertFalse(node1.isScript());
847:       assertFalse(node1.isGetProp());
848:       assertFalse(node1.isFalse());
849:       assertFalse(node1.isLabelName());
850:       assertFalse(node1.isThrow());
851:       assertFalse(node1.isNumber());
852:       assertFalse(node1.isSwitch());
853:       assertFalse(node1.isCast());
854:       assertFalse(node1.isDo());
855:       assertFalse(node1.isString());
856:       assertFalse(node1.isWhile());
857:       assertFalse(node1.isReturn());
858:       assertFalse(node1.isLabel());
859:       assertFalse(node1.isNew());
860:       assertFalse(node1.isOr());
861:       assertFalse(node1.isAdd());
862:       assertFalse(node1.isAssignAdd());
863:       assertFalse(node1.isName());
864:       assertFalse(node1.isGetElem());
865:       assertEquals(16773124, node1.getSourcePosition());
866:       assertFalse(node1.isAssign());
867:       assertFalse(node1.isDec());
868:       assertFalse(node1.isNull());
869:       assertFalse(node1.isTypeOf());
870:       assertTrue(node1.hasOneChild());
871:       assertFalse(node1.isComma());
872:       assertFalse(node1.isVoid());
873:       assertEquals(124, node1.getType());
874:       assertFalse(node1.isDelProp());
875:       assertFalse(node1.isCall());
876:       assertFalse(node1.isExprResult());
877:       assertFalse(node1.isBreak());
878:       assertFalse(node1.isCatch());
879:       assertFalse(node1.isDefaultCase());
880:       assertFalse(node1.isRegExp());
881:       assertFalse(node1.isTrue());
882:       assertFalse(node1.isDebugger());
883:       assertFalse(node1.isTry());
884:       assertFalse(node1.isSetterDef());
885:       assertFalse(node1.isStringKey());
886:       assertFalse(node1.isGetterDef());
887:       assertFalse(node1.isVar());
888:       assertFalse(node1.isParamList());
889:       assertFalse(node1.isFunction());
890:       assertFalse(node1.isArrayLit());
891:       assertFalse(node1.isCase());
892:       assertFalse(node1.hasMoreThanOneChild());
893:       assertFalse(node1.isContinue());
894:       assertEquals(1, node1.getChildCount());
895:       assertFalse(node1.isBlock());
896:       assertTrue(node1.isEmpty());
897:       assertFalse(node1.isIn());
898:       assertFalse(node1.isInc());
899:       assertFalse(node1.isFor());
900:       assertFalse(node1.isIf());
901:       assertFalse(node1.isHook());
902:       assertFalse(node1.isNE());
903:       assertFalse(node1.isThis());
904:       assertEquals(4095, node1.getLineno());
905:       assertTrue(node1.hasChildren());
906:       assertFalse(node1.isInstanceOf());
907:       assertEquals(1, int0);
908:       assertEquals(29, Node.JSDOC_INFO_PROP);
909:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
910:       assertEquals(56, Node.CHANGE_TIME);
911:       assertEquals(37, Node.OPT_ARG_NAME);
912:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
913:       assertEquals(46, Node.IS_NAMESPACE);
914:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
915:       assertEquals(51, Node.STATIC_SOURCE_FILE);
916:       assertEquals(36, Node.QUOTED_PROP);
917:       assertEquals(30, Node.VAR_ARGS_NAME);
918:       assertEquals(43, Node.IS_CONSTANT_NAME);
919:       assertEquals(57, Node.LAST_PROP);
920:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
921:       assertEquals(55, Node.INFERRED_FUNCTION);
922:       assertEquals(53, Node.INPUT_ID);
923:       assertEquals(15, Node.NO_SIDE_EFFECTS);
924:       assertEquals(2, Node.POST_FLAG);
925:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
926:       assertEquals(47, Node.IS_DISPATCHER);
927:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
928:       assertEquals(50, Node.FREE_CALL);
929:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
930:       assertEquals(40, Node.ORIGINALNAME_PROP);
931:       assertEquals(48, Node.DIRECTIVES);
932:       assertEquals(39, Node.EMPTY_BLOCK);
933:       assertEquals(52, Node.LENGTH);
934:       assertEquals(8, Node.FLAG_NO_THROWS);
935:       assertEquals(54, Node.SLASH_V);
936:       assertEquals(57, Node.REFLECTED_OBJECT);
937:       assertEquals(49, Node.DIRECT_EVAL);
938:       assertEquals(1, Node.DECR_FLAG);
939:       assertEquals(32, Node.INCRDECR_PROP);
940:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
941:       assertEquals(4095, Node.COLUMN_MASK);
942:       assertEquals(12, Node.COLUMN_BITS);
943:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
944:       assertEquals(47, Node.IS_DISPATCHER);
945:       assertEquals(56, Node.CHANGE_TIME);
946:       assertEquals(2, Node.POST_FLAG);
947:       assertEquals(46, Node.IS_NAMESPACE);
948:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
949:       assertEquals(37, Node.OPT_ARG_NAME);
950:       assertEquals(15, Node.NO_SIDE_EFFECTS);
951:       assertEquals(57, Node.LAST_PROP);
952:       assertEquals(36, Node.QUOTED_PROP);
953:       assertEquals(30, Node.VAR_ARGS_NAME);
954:       assertEquals(49, Node.DIRECT_EVAL);
955:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
956:       assertEquals(52, Node.LENGTH);
957:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
958:       assertEquals(55, Node.INFERRED_FUNCTION);
959:       assertEquals(29, Node.JSDOC_INFO_PROP);
960:       assertEquals(39, Node.EMPTY_BLOCK);
961:       assertEquals(53, Node.INPUT_ID);
962:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
963:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
964:       assertEquals(50, Node.FREE_CALL);
965:       assertEquals(8, Node.FLAG_NO_THROWS);
966:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
967:       assertEquals(57, Node.REFLECTED_OBJECT);
968:       assertEquals(4095, Node.COLUMN_MASK);
969:       assertEquals(48, Node.DIRECTIVES);
970:       assertEquals(40, Node.ORIGINALNAME_PROP);
971:       assertEquals(43, Node.IS_CONSTANT_NAME);
972:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
973:       assertEquals(54, Node.SLASH_V);
974:       assertEquals(12, Node.COLUMN_BITS);
975:       assertEquals(32, Node.INCRDECR_PROP);
976:       assertEquals(51, Node.STATIC_SOURCE_FILE);
977:       assertEquals(1, Node.DECR_FLAG);
978:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
979:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
980:       
981:       Iterable<Node> iterable0 = new HashSet<Node>(8);
982:       assertFalse(iterable0.contains(node2));
983:       assertNotNull(iterable0);
984:       
985:       boolean boolean1 = node0.isComma();
986:       assertFalse(node0.equals((Object)node2));
987:       assertFalse(node0.equals((Object)node1));
988:       assertTrue(boolean1 == boolean0);
989:       assertNotSame(node0, node2);
990:       assertNotSame(node0, node1);
991:       assertFalse(node0.isObjectLit());
992:       assertFalse(node0.isAnd());
993:       assertFalse(node0.isInstanceOf());
994:       assertFalse(node0.isThis());
995:       assertFalse(node0.isExprResult());
996:       assertFalse(node0.isWith());
997:       assertFalse(node0.isComma());
998:       assertFalse(node0.isFalse());
999:       assertFalse(node0.isCast());
1000:       assertFalse(node0.isLabelName());
1001:       assertFalse(node0.hasOneChild());
1002:       assertEquals((-1), node0.getCharno());
1003:       assertFalse(node0.isGetProp());
1004:       assertFalse(node0.isScript());
1005:       assertFalse(node0.isSwitch());
1006:       assertFalse(node0.isNumber());
1007:       assertFalse(node0.isNot());
1008:       assertEquals((-1), node0.getSourcePosition());
1009:       assertFalse(node0.isContinue());
1010:       assertFalse(node0.hasMoreThanOneChild());
1011:       assertEquals((-1), node0.getLineno());
1012:       assertFalse(node0.isCase());
1013:       assertFalse(node0.isBlock());
1014:       assertFalse(node0.isHook());
1015:       assertFalse(node0.isThrow());
1016:       assertFalse(node0.isIf());
1017:       assertFalse(node0.isSetterDef());
1018:       assertFalse(node0.isInc());
1019:       assertFalse(node0.isNE());
1020:       assertFalse(node0.isIn());
1021:       assertFalse(node0.isCatch());
1022:       assertFalse(node0.isDefaultCase());
1023:       assertFalse(node0.isFunction());
1024:       assertEquals(0, node0.getChildCount());
1025:       assertFalse(node0.isRegExp());
1026:       assertFalse(node0.isFor());
1027:       assertFalse(node0.isStringKey());
1028:       assertFalse(node0.isArrayLit());
1029:       assertFalse(node0.isTry());
1030:       assertFalse(node0.isDebugger());
1031:       assertFalse(node0.isParamList());
1032:       assertFalse(node0.isGetterDef());
1033:       assertFalse(node0.isString());
1034:       assertFalse(node0.isWhile());
1035:       assertFalse(node0.isDo());
1036:       assertFalse(node0.isAssignAdd());
1037:       assertFalse(node0.hasChildren());
1038:       assertFalse(node0.isReturn());
1039:       assertFalse(node0.isTypeOf());
1040:       assertFalse(node0.isLabel());
1041:       assertFalse(node0.isAssign());
1042:       assertFalse(node0.isDec());
1043:       assertFalse(node0.isCall());
1044:       assertFalse(node0.isName());
1045:       assertFalse(node0.isGetElem());
1046:       assertFalse(node0.isEmpty());
1047:       assertFalse(node0.isVar());
1048:       assertFalse(node0.isBreak());
1049:       assertFalse(node0.isDelProp());
1050:       assertFalse(node0.isNew());
1051:       assertFalse(node0.isVoid());
1052:       assertFalse(node0.isTrue());
1053:       assertFalse(node0.isAdd());
1054:       assertFalse(node0.isNull());
1055:       assertFalse(node0.isOr());
1056:       assertEquals(54, node0.getType());
1057:       assertFalse(boolean1);
1058:       assertEquals(29, Node.JSDOC_INFO_PROP);
1059:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1060:       assertEquals(56, Node.CHANGE_TIME);
1061:       assertEquals(37, Node.OPT_ARG_NAME);
1062:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1063:       assertEquals(46, Node.IS_NAMESPACE);
1064:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1065:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1066:       assertEquals(36, Node.QUOTED_PROP);
1067:       assertEquals(30, Node.VAR_ARGS_NAME);
1068:       assertEquals(43, Node.IS_CONSTANT_NAME);
1069:       assertEquals(57, Node.LAST_PROP);
1070:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1071:       assertEquals(55, Node.INFERRED_FUNCTION);
1072:       assertEquals(53, Node.INPUT_ID);
1073:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1074:       assertEquals(2, Node.POST_FLAG);
1075:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1076:       assertEquals(47, Node.IS_DISPATCHER);
1077:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1078:       assertEquals(50, Node.FREE_CALL);
1079:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1080:       assertEquals(40, Node.ORIGINALNAME_PROP);
1081:       assertEquals(48, Node.DIRECTIVES);
1082:       assertEquals(39, Node.EMPTY_BLOCK);
1083:       assertEquals(52, Node.LENGTH);
1084:       assertEquals(8, Node.FLAG_NO_THROWS);
1085:       assertEquals(54, Node.SLASH_V);
1086:       assertEquals(57, Node.REFLECTED_OBJECT);
1087:       assertEquals(49, Node.DIRECT_EVAL);
1088:       assertEquals(1, Node.DECR_FLAG);
1089:       assertEquals(32, Node.INCRDECR_PROP);
1090:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1091:       assertEquals(4095, Node.COLUMN_MASK);
1092:       assertEquals(12, Node.COLUMN_BITS);
1093:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1094:       
1095:       node1.putIntProp((-497), 56);
1096:       assertFalse(node0.equals((Object)node2));
1097:       assertFalse(node0.equals((Object)node1));
1098:       assertFalse(node1.equals((Object)node0));
1099:       assertNotSame(node0, node2);
1100:       assertNotSame(node0, node1);
1101:       assertSame(node1, node2);
1102:       assertNotSame(node1, node0);
1103:       assertFalse(node0.isObjectLit());
1104:       assertFalse(node0.isAnd());
1105:       assertFalse(node0.isInstanceOf());
1106:       assertFalse(node0.isThis());
1107:       assertFalse(node0.isExprResult());
1108:       assertFalse(node0.isWith());
1109:       assertFalse(node0.isComma());
1110:       assertFalse(node0.isFalse());
1111:       assertFalse(node0.isCast());
1112:       assertFalse(node0.isLabelName());
1113:       assertFalse(node0.hasOneChild());
1114:       assertEquals((-1), node0.getCharno());
1115:       assertFalse(node0.isGetProp());
1116:       assertFalse(node0.isScript());
1117:       assertFalse(node0.isSwitch());
1118:       assertFalse(node0.isNumber());
1119:       assertFalse(node0.isNot());
1120:       assertEquals((-1), node0.getSourcePosition());
1121:       assertFalse(node0.isContinue());
1122:       assertFalse(node0.hasMoreThanOneChild());
1123:       assertEquals((-1), node0.getLineno());
1124:       assertFalse(node0.isCase());
1125:       assertFalse(node0.isBlock());
1126:       assertFalse(node0.isHook());
1127:       assertFalse(node0.isThrow());
1128:       assertFalse(node0.isIf());
1129:       assertFalse(node0.isSetterDef());
1130:       assertFalse(node0.isInc());
1131:       assertFalse(node0.isNE());
1132:       assertFalse(node0.isIn());
1133:       assertFalse(node0.isCatch());
1134:       assertFalse(node0.isDefaultCase());
1135:       assertFalse(node0.isFunction());
1136:       assertEquals(0, node0.getChildCount());
1137:       assertFalse(node0.isRegExp());
1138:       assertFalse(node0.isFor());
1139:       assertFalse(node0.isStringKey());
1140:       assertFalse(node0.isArrayLit());
1141:       assertFalse(node0.isTry());
1142:       assertFalse(node0.isDebugger());
1143:       assertFalse(node0.isParamList());
1144:       assertFalse(node0.isGetterDef());
1145:       assertFalse(node0.isString());
1146:       assertFalse(node0.isWhile());
1147:       assertFalse(node0.isDo());
1148:       assertFalse(node0.isAssignAdd());
1149:       assertFalse(node0.hasChildren());
1150:       assertFalse(node0.isReturn());
1151:       assertFalse(node0.isTypeOf());
1152:       assertFalse(node0.isLabel());
1153:       assertFalse(node0.isAssign());
1154:       assertFalse(node0.isDec());
1155:       assertFalse(node0.isCall());
1156:       assertFalse(node0.isName());
1157:       assertFalse(node0.isGetElem());
1158:       assertFalse(node0.isEmpty());
1159:       assertFalse(node0.isVar());
1160:       assertFalse(node0.isBreak());
1161:       assertFalse(node0.isDelProp());
1162:       assertFalse(node0.isNew());
1163:       assertFalse(node0.isVoid());
1164:       assertFalse(node0.isTrue());
1165:       assertFalse(node0.isAdd());
1166:       assertFalse(node0.isNull());
1167:       assertFalse(node0.isOr());
1168:       assertEquals(54, node0.getType());
1169:       assertFalse(node1.isNot());
1170:       assertFalse(node1.isObjectLit());
1171:       assertFalse(node1.isWith());
1172:       assertEquals(4, node1.getCharno());
1173:       assertFalse(node1.isAnd());
1174:       assertFalse(node1.isScript());
1175:       assertFalse(node1.isGetProp());
1176:       assertFalse(node1.isFalse());
1177:       assertFalse(node1.isLabelName());
1178:       assertFalse(node1.isThrow());
1179:       assertFalse(node1.isNumber());
1180:       assertFalse(node1.isSwitch());
1181:       assertFalse(node1.isCast());
1182:       assertFalse(node1.isDo());
1183:       assertFalse(node1.isString());
1184:       assertFalse(node1.isWhile());
1185:       assertFalse(node1.isReturn());
1186:       assertFalse(node1.isLabel());
1187:       assertFalse(node1.isNew());
1188:       assertFalse(node1.isOr());
1189:       assertFalse(node1.isAdd());
1190:       assertFalse(node1.isAssignAdd());
1191:       assertFalse(node1.isName());
1192:       assertFalse(node1.isGetElem());
1193:       assertEquals(16773124, node1.getSourcePosition());
1194:       assertFalse(node1.isAssign());
1195:       assertFalse(node1.isDec());
1196:       assertFalse(node1.isNull());
1197:       assertFalse(node1.isTypeOf());
1198:       assertTrue(node1.hasOneChild());
1199:       assertFalse(node1.isComma());
1200:       assertFalse(node1.isVoid());
1201:       assertEquals(124, node1.getType());
1202:       assertFalse(node1.isDelProp());
1203:       assertFalse(node1.isCall());
1204:       assertFalse(node1.isExprResult());
1205:       assertFalse(node1.isBreak());
1206:       assertFalse(node1.isCatch());
1207:       assertFalse(node1.isDefaultCase());
1208:       assertFalse(node1.isRegExp());
1209:       assertFalse(node1.isTrue());
1210:       assertFalse(node1.isDebugger());
1211:       assertFalse(node1.isTry());
1212:       assertFalse(node1.isSetterDef());
1213:       assertFalse(node1.isStringKey());
1214:       assertFalse(node1.isGetterDef());
1215:       assertFalse(node1.isVar());
1216:       assertFalse(node1.isParamList());
1217:       assertFalse(node1.isFunction());
1218:       assertFalse(node1.isArrayLit());
1219:       assertFalse(node1.isCase());
1220:       assertFalse(node1.hasMoreThanOneChild());
1221:       assertFalse(node1.isContinue());
1222:       assertEquals(1, node1.getChildCount());
1223:       assertFalse(node1.isBlock());
1224:       assertTrue(node1.isEmpty());
1225:       assertFalse(node1.isIn());
1226:       assertFalse(node1.isInc());
1227:       assertFalse(node1.isFor());
1228:       assertFalse(node1.isIf());
1229:       assertFalse(node1.isHook());
1230:       assertFalse(node1.isNE());
1231:       assertFalse(node1.isThis());
1232:       assertEquals(4095, node1.getLineno());
1233:       assertTrue(node1.hasChildren());
1234:       assertFalse(node1.isInstanceOf());
1235:       assertEquals(29, Node.JSDOC_INFO_PROP);
1236:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1237:       assertEquals(56, Node.CHANGE_TIME);
1238:       assertEquals(37, Node.OPT_ARG_NAME);
1239:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1240:       assertEquals(46, Node.IS_NAMESPACE);
1241:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1242:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1243:       assertEquals(36, Node.QUOTED_PROP);
1244:       assertEquals(30, Node.VAR_ARGS_NAME);
1245:       assertEquals(43, Node.IS_CONSTANT_NAME);
1246:       assertEquals(57, Node.LAST_PROP);
1247:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1248:       assertEquals(55, Node.INFERRED_FUNCTION);
1249:       assertEquals(53, Node.INPUT_ID);
1250:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1251:       assertEquals(2, Node.POST_FLAG);
1252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1253:       assertEquals(47, Node.IS_DISPATCHER);
1254:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1255:       assertEquals(50, Node.FREE_CALL);
1256:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1257:       assertEquals(40, Node.ORIGINALNAME_PROP);
1258:       assertEquals(48, Node.DIRECTIVES);
1259:       assertEquals(39, Node.EMPTY_BLOCK);
1260:       assertEquals(52, Node.LENGTH);
1261:       assertEquals(8, Node.FLAG_NO_THROWS);
1262:       assertEquals(54, Node.SLASH_V);
1263:       assertEquals(57, Node.REFLECTED_OBJECT);
1264:       assertEquals(49, Node.DIRECT_EVAL);
1265:       assertEquals(1, Node.DECR_FLAG);
1266:       assertEquals(32, Node.INCRDECR_PROP);
1267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1268:       assertEquals(4095, Node.COLUMN_MASK);
1269:       assertEquals(12, Node.COLUMN_BITS);
1270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1271:       assertEquals(47, Node.IS_DISPATCHER);
1272:       assertEquals(56, Node.CHANGE_TIME);
1273:       assertEquals(2, Node.POST_FLAG);
1274:       assertEquals(46, Node.IS_NAMESPACE);
1275:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1276:       assertEquals(37, Node.OPT_ARG_NAME);
1277:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1278:       assertEquals(57, Node.LAST_PROP);
1279:       assertEquals(36, Node.QUOTED_PROP);
1280:       assertEquals(30, Node.VAR_ARGS_NAME);
1281:       assertEquals(49, Node.DIRECT_EVAL);
1282:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1283:       assertEquals(52, Node.LENGTH);
1284:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1285:       assertEquals(55, Node.INFERRED_FUNCTION);
1286:       assertEquals(29, Node.JSDOC_INFO_PROP);
1287:       assertEquals(39, Node.EMPTY_BLOCK);
1288:       assertEquals(53, Node.INPUT_ID);
1289:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1290:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1291:       assertEquals(50, Node.FREE_CALL);
1292:       assertEquals(8, Node.FLAG_NO_THROWS);
1293:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1294:       assertEquals(57, Node.REFLECTED_OBJECT);
1295:       assertEquals(4095, Node.COLUMN_MASK);
1296:       assertEquals(48, Node.DIRECTIVES);
1297:       assertEquals(40, Node.ORIGINALNAME_PROP);
1298:       assertEquals(43, Node.IS_CONSTANT_NAME);
1299:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1300:       assertEquals(54, Node.SLASH_V);
1301:       assertEquals(12, Node.COLUMN_BITS);
1302:       assertEquals(32, Node.INCRDECR_PROP);
1303:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1304:       assertEquals(1, Node.DECR_FLAG);
1305:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1306:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1307:   }
1308: }
RegularFileObject[/tmp/EvoSuite_179_1628161393538/com/google/javascript/rhino/Node_179_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_179_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_179_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_179_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:03:13.730 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(54);
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(54, node0.getType());
assertNotNull(node0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

node_SideEffectFlags0.clearSideEffectFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());

Node node1 = new Node(124, node0, node0, 4095, 4);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(54, node0.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertEquals(4, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertEquals(16773124, node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertEquals(124, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertTrue(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertEquals(4095, node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertNotNull(node1);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean0 = node1.isEquivalentTo(node0, false, true, false);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(54, node0.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertEquals(4, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertEquals(16773124, node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertEquals(124, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertTrue(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertEquals(4095, node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertFalse(boolean0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node node2 = node0.getParent();
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node2, node0);
assertSame(node2, node1);
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(54, node0.getType());
assertFalse(node2.isNE());
assertTrue(node2.hasChildren());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertEquals(124, node2.getType());
assertFalse(node2.isVoid());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertEquals(16773124, node2.getSourcePosition());
assertFalse(node2.isName());
assertFalse(node2.isThrow());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertTrue(node2.isEmpty());
assertFalse(node2.isAssignAdd());
assertEquals(4095, node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isAdd());
assertFalse(node2.isExprResult());
assertEquals(4, node2.getCharno());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isCatch());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isVar());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isStringKey());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertNotNull(node2);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);

int int0 = node1.getChildCount();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(54, node0.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertEquals(4, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertEquals(16773124, node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertEquals(124, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertTrue(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertEquals(4095, node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertEquals(1, int0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Iterable<Node> iterable0 = new HashSet<Node>(8);
assertFalse(iterable0.contains(node2));
assertNotNull(iterable0);

boolean boolean1 = node0.isComma();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(54, node0.getType());
assertFalse(boolean1);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

node1.putIntProp((-497), 56);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotSame(node0, node2);
assertNotSame(node0, node1);
assertSame(node1, node2);
assertNotSame(node1, node0);
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertEquals(54, node0.getType());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertEquals(4, node1.getCharno());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertEquals(16773124, node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertEquals(124, node1.getType());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isBlock());
assertTrue(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertEquals(4095, node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.isInstanceOf());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);


[MASTER] 11:03:15.158 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_182_1628161394645/com/google/javascript/rhino/Node_182_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_182_1628161394645/com/google/javascript/rhino/Node_182_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:15.158 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:15.158 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:15.159 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1046
[MASTER] 11:03:15.160 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_182_1628161394645/com/google/javascript/rhino/Node_182_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:14 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_182_tmp__ESTest extends Node_182_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(1.0);
21:       assertFalse(node0.isWith());
22:       assertFalse(node0.isScript());
23:       assertFalse(node0.isObjectLit());
24:       assertFalse(node0.isNot());
25:       assertFalse(node0.isGetProp());
26:       assertFalse(node0.hasOneChild());
27:       assertFalse(node0.isBreak());
28:       assertFalse(node0.hasChildren());
29:       assertFalse(node0.isTypeOf());
30:       assertFalse(node0.isThis());
31:       assertFalse(node0.isOr());
32:       assertFalse(node0.isAssign());
33:       assertFalse(node0.isComma());
34:       assertFalse(node0.isDec());
35:       assertFalse(node0.isInstanceOf());
36:       assertFalse(node0.isExprResult());
37:       assertFalse(node0.isGetElem());
38:       assertEquals((-1), node0.getLineno());
39:       assertFalse(node0.isSwitch());
40:       assertEquals((-1), node0.getCharno());
41:       assertFalse(node0.isBlock());
42:       assertFalse(node0.hasMoreThanOneChild());
43:       assertEquals(39, node0.getType());
44:       assertFalse(node0.isHook());
45:       assertFalse(node0.isAssignAdd());
46:       assertFalse(node0.isVar());
47:       assertFalse(node0.isAdd());
48:       assertFalse(node0.isDo());
49:       assertFalse(node0.isCase());
50:       assertFalse(node0.isNew());
51:       assertFalse(node0.isGetterDef());
52:       assertFalse(node0.isStringKey());
53:       assertFalse(node0.isParamList());
54:       assertFalse(node0.isLabel());
55:       assertEquals(0, node0.getChildCount());
56:       assertFalse(node0.isLabelName());
57:       assertFalse(node0.isArrayLit());
58:       assertFalse(node0.isDefaultCase());
59:       assertFalse(node0.isDebugger());
60:       assertFalse(node0.isTrue());
61:       assertFalse(node0.isFunction());
62:       assertFalse(node0.isRegExp());
63:       assertFalse(node0.isSetterDef());
64:       assertFalse(node0.isTry());
65:       assertFalse(node0.isIf());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isNull());
68:       assertFalse(node0.isFor());
69:       assertFalse(node0.isNE());
70:       assertFalse(node0.isEmpty());
71:       assertFalse(node0.isCatch());
72:       assertFalse(node0.isVoid());
73:       assertFalse(node0.isCall());
74:       assertFalse(node0.isName());
75:       assertFalse(node0.isString());
76:       assertFalse(node0.isWhile());
77:       assertFalse(node0.isContinue());
78:       assertFalse(node0.isIn());
79:       assertFalse(node0.isReturn());
80:       assertFalse(node0.isInc());
81:       assertTrue(node0.isNumber());
82:       assertFalse(node0.isThrow());
83:       assertFalse(node0.isFalse());
84:       assertEquals((-1), node0.getSourcePosition());
85:       assertFalse(node0.isCast());
86:       assertFalse(node0.isAnd());
87:       assertNotNull(node0);
88:       assertEquals(37, Node.OPT_ARG_NAME);
89:       assertEquals(2, Node.POST_FLAG);
90:       assertEquals(56, Node.CHANGE_TIME);
91:       assertEquals(46, Node.IS_NAMESPACE);
92:       assertEquals(51, Node.STATIC_SOURCE_FILE);
93:       assertEquals(12, Node.COLUMN_BITS);
94:       assertEquals(47, Node.IS_DISPATCHER);
95:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
96:       assertEquals(49, Node.DIRECT_EVAL);
97:       assertEquals(54, Node.SLASH_V);
98:       assertEquals(43, Node.IS_CONSTANT_NAME);
99:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
100:       assertEquals(1, Node.DECR_FLAG);
101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
102:       assertEquals(32, Node.INCRDECR_PROP);
103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
104:       assertEquals(8, Node.FLAG_NO_THROWS);
105:       assertEquals(48, Node.DIRECTIVES);
106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
107:       assertEquals(50, Node.FREE_CALL);
108:       assertEquals(40, Node.ORIGINALNAME_PROP);
109:       assertEquals(4095, Node.COLUMN_MASK);
110:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
111:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
112:       assertEquals(52, Node.LENGTH);
113:       assertEquals(57, Node.LAST_PROP);
114:       assertEquals(30, Node.VAR_ARGS_NAME);
115:       assertEquals(36, Node.QUOTED_PROP);
116:       assertEquals(57, Node.REFLECTED_OBJECT);
117:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
118:       assertEquals(55, Node.INFERRED_FUNCTION);
119:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
120:       assertEquals(29, Node.JSDOC_INFO_PROP);
121:       assertEquals(53, Node.INPUT_ID);
122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
123:       assertEquals(39, Node.EMPTY_BLOCK);
124:       
125:       Node node1 = Node.newString(36, "UNKNOWN", 32, 0);
126:       assertFalse(node1.equals((Object)node0));
127:       assertEquals(0, node1.getChildCount());
128:       assertFalse(node1.isCatch());
129:       assertFalse(node1.isDefaultCase());
130:       assertEquals(36, node1.getType());
131:       assertFalse(node1.isRegExp());
132:       assertFalse(node1.isFunction());
133:       assertFalse(node1.isArrayLit());
134:       assertFalse(node1.isFor());
135:       assertFalse(node1.isTry());
136:       assertFalse(node1.isStringKey());
137:       assertFalse(node1.isParamList());
138:       assertFalse(node1.isDebugger());
139:       assertFalse(node1.isGetterDef());
140:       assertEquals(32, node1.getLineno());
141:       assertFalse(node1.isCase());
142:       assertFalse(node1.isBlock());
143:       assertFalse(node1.isContinue());
144:       assertFalse(node1.hasMoreThanOneChild());
145:       assertFalse(node1.isThrow());
146:       assertFalse(node1.isIf());
147:       assertEquals(131072, node1.getSourcePosition());
148:       assertFalse(node1.isNE());
149:       assertFalse(node1.isSetterDef());
150:       assertFalse(node1.isInc());
151:       assertEquals(0, node1.getCharno());
152:       assertFalse(node1.isIn());
153:       assertFalse(node1.isInstanceOf());
154:       assertFalse(node1.isAnd());
155:       assertFalse(node1.isComma());
156:       assertFalse(node1.isExprResult());
157:       assertFalse(node1.isBreak());
158:       assertFalse(node1.isThis());
159:       assertFalse(node1.isFalse());
160:       assertFalse(node1.isWith());
161:       assertFalse(node1.isCast());
162:       assertFalse(node1.hasOneChild());
163:       assertFalse(node1.isHook());
164:       assertFalse(node1.isLabelName());
165:       assertFalse(node1.isSwitch());
166:       assertFalse(node1.isScript());
167:       assertFalse(node1.isGetProp());
168:       assertFalse(node1.isNot());
169:       assertFalse(node1.isObjectLit());
170:       assertFalse(node1.isString());
171:       assertFalse(node1.isNumber());
172:       assertFalse(node1.isReturn());
173:       assertFalse(node1.isAssignAdd());
174:       assertFalse(node1.isDo());
175:       assertFalse(node1.isWhile());
176:       assertFalse(node1.isTypeOf());
177:       assertFalse(node1.isDec());
178:       assertFalse(node1.hasChildren());
179:       assertFalse(node1.isLabel());
180:       assertFalse(node1.isAssign());
181:       assertFalse(node1.isVar());
182:       assertFalse(node1.isCall());
183:       assertFalse(node1.isGetElem());
184:       assertFalse(node1.isName());
185:       assertFalse(node1.isNew());
186:       assertFalse(node1.isDelProp());
187:       assertFalse(node1.isVoid());
188:       assertFalse(node1.isNull());
189:       assertFalse(node1.isTrue());
190:       assertFalse(node1.isEmpty());
191:       assertFalse(node1.isAdd());
192:       assertFalse(node1.isOr());
193:       assertNotNull(node1);
194:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
195:       assertEquals(29, Node.JSDOC_INFO_PROP);
196:       assertEquals(56, Node.CHANGE_TIME);
197:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
198:       assertEquals(37, Node.OPT_ARG_NAME);
199:       assertEquals(53, Node.INPUT_ID);
200:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
201:       assertEquals(46, Node.IS_NAMESPACE);
202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
203:       assertEquals(36, Node.QUOTED_PROP);
204:       assertEquals(55, Node.INFERRED_FUNCTION);
205:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
206:       assertEquals(43, Node.IS_CONSTANT_NAME);
207:       assertEquals(15, Node.NO_SIDE_EFFECTS);
208:       assertEquals(57, Node.LAST_PROP);
209:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
210:       assertEquals(47, Node.IS_DISPATCHER);
211:       assertEquals(2, Node.POST_FLAG);
212:       assertEquals(30, Node.VAR_ARGS_NAME);
213:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
214:       assertEquals(40, Node.ORIGINALNAME_PROP);
215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
216:       assertEquals(48, Node.DIRECTIVES);
217:       assertEquals(39, Node.EMPTY_BLOCK);
218:       assertEquals(54, Node.SLASH_V);
219:       assertEquals(57, Node.REFLECTED_OBJECT);
220:       assertEquals(52, Node.LENGTH);
221:       assertEquals(8, Node.FLAG_NO_THROWS);
222:       assertEquals(50, Node.FREE_CALL);
223:       assertEquals(1, Node.DECR_FLAG);
224:       assertEquals(12, Node.COLUMN_BITS);
225:       assertEquals(49, Node.DIRECT_EVAL);
226:       assertEquals(32, Node.INCRDECR_PROP);
227:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
228:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
229:       assertEquals(4095, Node.COLUMN_MASK);
230:       
231:       Object object0 = node1.getProp(0);
232:       assertFalse(node1.equals((Object)node0));
233:       assertEquals(0, node1.getChildCount());
234:       assertFalse(node1.isCatch());
235:       assertFalse(node1.isDefaultCase());
236:       assertEquals(36, node1.getType());
237:       assertFalse(node1.isRegExp());
238:       assertFalse(node1.isFunction());
239:       assertFalse(node1.isArrayLit());
240:       assertFalse(node1.isFor());
241:       assertFalse(node1.isTry());
242:       assertFalse(node1.isStringKey());
243:       assertFalse(node1.isParamList());
244:       assertFalse(node1.isDebugger());
245:       assertFalse(node1.isGetterDef());
246:       assertEquals(32, node1.getLineno());
247:       assertFalse(node1.isCase());
248:       assertFalse(node1.isBlock());
249:       assertFalse(node1.isContinue());
250:       assertFalse(node1.hasMoreThanOneChild());
251:       assertFalse(node1.isThrow());
252:       assertFalse(node1.isIf());
253:       assertEquals(131072, node1.getSourcePosition());
254:       assertFalse(node1.isNE());
255:       assertFalse(node1.isSetterDef());
256:       assertFalse(node1.isInc());
257:       assertEquals(0, node1.getCharno());
258:       assertFalse(node1.isIn());
259:       assertFalse(node1.isInstanceOf());
260:       assertFalse(node1.isAnd());
261:       assertFalse(node1.isComma());
262:       assertFalse(node1.isExprResult());
263:       assertFalse(node1.isBreak());
264:       assertFalse(node1.isThis());
265:       assertFalse(node1.isFalse());
266:       assertFalse(node1.isWith());
267:       assertFalse(node1.isCast());
268:       assertFalse(node1.hasOneChild());
269:       assertFalse(node1.isHook());
270:       assertFalse(node1.isLabelName());
271:       assertFalse(node1.isSwitch());
272:       assertFalse(node1.isScript());
273:       assertFalse(node1.isGetProp());
274:       assertFalse(node1.isNot());
275:       assertFalse(node1.isObjectLit());
276:       assertFalse(node1.isString());
277:       assertFalse(node1.isNumber());
278:       assertFalse(node1.isReturn());
279:       assertFalse(node1.isAssignAdd());
280:       assertFalse(node1.isDo());
281:       assertFalse(node1.isWhile());
282:       assertFalse(node1.isTypeOf());
283:       assertFalse(node1.isDec());
284:       assertFalse(node1.hasChildren());
285:       assertFalse(node1.isLabel());
286:       assertFalse(node1.isAssign());
287:       assertFalse(node1.isVar());
288:       assertFalse(node1.isCall());
289:       assertFalse(node1.isGetElem());
290:       assertFalse(node1.isName());
291:       assertFalse(node1.isNew());
292:       assertFalse(node1.isDelProp());
293:       assertFalse(node1.isVoid());
294:       assertFalse(node1.isNull());
295:       assertFalse(node1.isTrue());
296:       assertFalse(node1.isEmpty());
297:       assertFalse(node1.isAdd());
298:       assertFalse(node1.isOr());
299:       assertNull(object0);
300:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
301:       assertEquals(29, Node.JSDOC_INFO_PROP);
302:       assertEquals(56, Node.CHANGE_TIME);
303:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
304:       assertEquals(37, Node.OPT_ARG_NAME);
305:       assertEquals(53, Node.INPUT_ID);
306:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
307:       assertEquals(46, Node.IS_NAMESPACE);
308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
309:       assertEquals(36, Node.QUOTED_PROP);
310:       assertEquals(55, Node.INFERRED_FUNCTION);
311:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
312:       assertEquals(43, Node.IS_CONSTANT_NAME);
313:       assertEquals(15, Node.NO_SIDE_EFFECTS);
314:       assertEquals(57, Node.LAST_PROP);
315:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
316:       assertEquals(47, Node.IS_DISPATCHER);
317:       assertEquals(2, Node.POST_FLAG);
318:       assertEquals(30, Node.VAR_ARGS_NAME);
319:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
320:       assertEquals(40, Node.ORIGINALNAME_PROP);
321:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
322:       assertEquals(48, Node.DIRECTIVES);
323:       assertEquals(39, Node.EMPTY_BLOCK);
324:       assertEquals(54, Node.SLASH_V);
325:       assertEquals(57, Node.REFLECTED_OBJECT);
326:       assertEquals(52, Node.LENGTH);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(50, Node.FREE_CALL);
329:       assertEquals(1, Node.DECR_FLAG);
330:       assertEquals(12, Node.COLUMN_BITS);
331:       assertEquals(49, Node.DIRECT_EVAL);
332:       assertEquals(32, Node.INCRDECR_PROP);
333:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
334:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
335:       assertEquals(4095, Node.COLUMN_MASK);
336:       
337:       Node node2 = Node.newString(46, "UNKNOWN");
338:       assertFalse(node2.equals((Object)node0));
339:       assertFalse(node2.equals((Object)node1));
340:       assertNotSame(node2, node1);
341:       assertFalse(node2.isThis());
342:       assertFalse(node2.isFalse());
343:       assertFalse(node2.isComma());
344:       assertFalse(node2.isHook());
345:       assertFalse(node2.isThrow());
346:       assertFalse(node2.isGetProp());
347:       assertEquals(46, node2.getType());
348:       assertFalse(node2.isScript());
349:       assertFalse(node2.isSwitch());
350:       assertFalse(node2.isString());
351:       assertFalse(node2.isNot());
352:       assertFalse(node2.isObjectLit());
353:       assertEquals((-1), node2.getCharno());
354:       assertFalse(node2.isAnd());
355:       assertFalse(node2.isCast());
356:       assertFalse(node2.isLabelName());
357:       assertFalse(node2.isNE());
358:       assertFalse(node2.isNumber());
359:       assertFalse(node2.isIf());
360:       assertFalse(node2.isFor());
361:       assertFalse(node2.isGetterDef());
362:       assertFalse(node2.isIn());
363:       assertFalse(node2.isCase());
364:       assertFalse(node2.isTry());
365:       assertFalse(node2.hasOneChild());
366:       assertFalse(node2.isRegExp());
367:       assertFalse(node2.isInc());
368:       assertFalse(node2.isBlock());
369:       assertFalse(node2.isWith());
370:       assertFalse(node2.hasMoreThanOneChild());
371:       assertFalse(node2.isCatch());
372:       assertFalse(node2.isInstanceOf());
373:       assertEquals((-1), node2.getLineno());
374:       assertFalse(node2.isNull());
375:       assertFalse(node2.isSetterDef());
376:       assertFalse(node2.isParamList());
377:       assertEquals(0, node2.getChildCount());
378:       assertFalse(node2.isVar());
379:       assertFalse(node2.isAdd());
380:       assertFalse(node2.isNew());
381:       assertFalse(node2.isDefaultCase());
382:       assertFalse(node2.isFunction());
383:       assertFalse(node2.isDebugger());
384:       assertFalse(node2.isArrayLit());
385:       assertFalse(node2.isContinue());
386:       assertFalse(node2.isStringKey());
387:       assertEquals((-1), node2.getSourcePosition());
388:       assertFalse(node2.isTypeOf());
389:       assertFalse(node2.isOr());
390:       assertFalse(node2.isLabel());
391:       assertFalse(node2.isAssign());
392:       assertFalse(node2.isReturn());
393:       assertFalse(node2.hasChildren());
394:       assertFalse(node2.isDec());
395:       assertFalse(node2.isAssignAdd());
396:       assertFalse(node2.isDo());
397:       assertFalse(node2.isEmpty());
398:       assertFalse(node2.isTrue());
399:       assertFalse(node2.isWhile());
400:       assertFalse(node2.isExprResult());
401:       assertFalse(node2.isCall());
402:       assertFalse(node2.isName());
403:       assertFalse(node2.isGetElem());
404:       assertFalse(node2.isBreak());
405:       assertFalse(node2.isDelProp());
406:       assertFalse(node2.isVoid());
407:       assertNotNull(node2);
408:       assertEquals(53, Node.INPUT_ID);
409:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
410:       assertEquals(43, Node.IS_CONSTANT_NAME);
411:       assertEquals(36, Node.QUOTED_PROP);
412:       assertEquals(4095, Node.COLUMN_MASK);
413:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
414:       assertEquals(37, Node.OPT_ARG_NAME);
415:       assertEquals(48, Node.DIRECTIVES);
416:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
417:       assertEquals(8, Node.FLAG_NO_THROWS);
418:       assertEquals(56, Node.CHANGE_TIME);
419:       assertEquals(2, Node.POST_FLAG);
420:       assertEquals(47, Node.IS_DISPATCHER);
421:       assertEquals(29, Node.JSDOC_INFO_PROP);
422:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
423:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
424:       assertEquals(57, Node.LAST_PROP);
425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
426:       assertEquals(55, Node.INFERRED_FUNCTION);
427:       assertEquals(39, Node.EMPTY_BLOCK);
428:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
429:       assertEquals(54, Node.SLASH_V);
430:       assertEquals(52, Node.LENGTH);
431:       assertEquals(57, Node.REFLECTED_OBJECT);
432:       assertEquals(30, Node.VAR_ARGS_NAME);
433:       assertEquals(49, Node.DIRECT_EVAL);
434:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
435:       assertEquals(40, Node.ORIGINALNAME_PROP);
436:       assertEquals(51, Node.STATIC_SOURCE_FILE);
437:       assertEquals(12, Node.COLUMN_BITS);
438:       assertEquals(46, Node.IS_NAMESPACE);
439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
440:       assertEquals(1, Node.DECR_FLAG);
441:       assertEquals(50, Node.FREE_CALL);
442:       assertEquals(32, Node.INCRDECR_PROP);
443:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
444:       
445:       boolean boolean0 = node1.isNull();
446:       assertFalse(node1.equals((Object)node0));
447:       assertFalse(node1.equals((Object)node2));
448:       assertNotSame(node1, node2);
449:       assertEquals(0, node1.getChildCount());
450:       assertFalse(node1.isCatch());
451:       assertFalse(node1.isDefaultCase());
452:       assertEquals(36, node1.getType());
453:       assertFalse(node1.isRegExp());
454:       assertFalse(node1.isFunction());
455:       assertFalse(node1.isArrayLit());
456:       assertFalse(node1.isFor());
457:       assertFalse(node1.isTry());
458:       assertFalse(node1.isStringKey());
459:       assertFalse(node1.isParamList());
460:       assertFalse(node1.isDebugger());
461:       assertFalse(node1.isGetterDef());
462:       assertEquals(32, node1.getLineno());
463:       assertFalse(node1.isCase());
464:       assertFalse(node1.isBlock());
465:       assertFalse(node1.isContinue());
466:       assertFalse(node1.hasMoreThanOneChild());
467:       assertFalse(node1.isThrow());
468:       assertFalse(node1.isIf());
469:       assertEquals(131072, node1.getSourcePosition());
470:       assertFalse(node1.isNE());
471:       assertFalse(node1.isSetterDef());
472:       assertFalse(node1.isInc());
473:       assertEquals(0, node1.getCharno());
474:       assertFalse(node1.isIn());
475:       assertFalse(node1.isInstanceOf());
476:       assertFalse(node1.isAnd());
477:       assertFalse(node1.isComma());
478:       assertFalse(node1.isExprResult());
479:       assertFalse(node1.isBreak());
480:       assertFalse(node1.isThis());
481:       assertFalse(node1.isFalse());
482:       assertFalse(node1.isWith());
483:       assertFalse(node1.isCast());
484:       assertFalse(node1.hasOneChild());
485:       assertFalse(node1.isHook());
486:       assertFalse(node1.isLabelName());
487:       assertFalse(node1.isSwitch());
488:       assertFalse(node1.isScript());
489:       assertFalse(node1.isGetProp());
490:       assertFalse(node1.isNot());
491:       assertFalse(node1.isObjectLit());
492:       assertFalse(node1.isString());
493:       assertFalse(node1.isNumber());
494:       assertFalse(node1.isReturn());
495:       assertFalse(node1.isAssignAdd());
496:       assertFalse(node1.isDo());
497:       assertFalse(node1.isWhile());
498:       assertFalse(node1.isTypeOf());
499:       assertFalse(node1.isDec());
500:       assertFalse(node1.hasChildren());
501:       assertFalse(node1.isLabel());
502:       assertFalse(node1.isAssign());
503:       assertFalse(node1.isVar());
504:       assertFalse(node1.isCall());
505:       assertFalse(node1.isGetElem());
506:       assertFalse(node1.isName());
507:       assertFalse(node1.isNew());
508:       assertFalse(node1.isDelProp());
509:       assertFalse(node1.isVoid());
510:       assertFalse(node1.isNull());
511:       assertFalse(node1.isTrue());
512:       assertFalse(node1.isEmpty());
513:       assertFalse(node1.isAdd());
514:       assertFalse(node1.isOr());
515:       assertFalse(boolean0);
516:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
517:       assertEquals(29, Node.JSDOC_INFO_PROP);
518:       assertEquals(56, Node.CHANGE_TIME);
519:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
520:       assertEquals(37, Node.OPT_ARG_NAME);
521:       assertEquals(53, Node.INPUT_ID);
522:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
523:       assertEquals(46, Node.IS_NAMESPACE);
524:       assertEquals(51, Node.STATIC_SOURCE_FILE);
525:       assertEquals(36, Node.QUOTED_PROP);
526:       assertEquals(55, Node.INFERRED_FUNCTION);
527:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
528:       assertEquals(43, Node.IS_CONSTANT_NAME);
529:       assertEquals(15, Node.NO_SIDE_EFFECTS);
530:       assertEquals(57, Node.LAST_PROP);
531:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
532:       assertEquals(47, Node.IS_DISPATCHER);
533:       assertEquals(2, Node.POST_FLAG);
534:       assertEquals(30, Node.VAR_ARGS_NAME);
535:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
536:       assertEquals(40, Node.ORIGINALNAME_PROP);
537:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
538:       assertEquals(48, Node.DIRECTIVES);
539:       assertEquals(39, Node.EMPTY_BLOCK);
540:       assertEquals(54, Node.SLASH_V);
541:       assertEquals(57, Node.REFLECTED_OBJECT);
542:       assertEquals(52, Node.LENGTH);
543:       assertEquals(8, Node.FLAG_NO_THROWS);
544:       assertEquals(50, Node.FREE_CALL);
545:       assertEquals(1, Node.DECR_FLAG);
546:       assertEquals(12, Node.COLUMN_BITS);
547:       assertEquals(49, Node.DIRECT_EVAL);
548:       assertEquals(32, Node.INCRDECR_PROP);
549:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
550:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
551:       assertEquals(4095, Node.COLUMN_MASK);
552:       
553:       node0.setLineno(39);
554:       assertFalse(node0.equals((Object)node2));
555:       assertFalse(node0.equals((Object)node1));
556:       assertFalse(node0.isWith());
557:       assertFalse(node0.isScript());
558:       assertFalse(node0.isObjectLit());
559:       assertEquals(0, node0.getCharno());
560:       assertFalse(node0.isNot());
561:       assertFalse(node0.isGetProp());
562:       assertFalse(node0.hasOneChild());
563:       assertFalse(node0.isBreak());
564:       assertFalse(node0.hasChildren());
565:       assertFalse(node0.isTypeOf());
566:       assertFalse(node0.isThis());
567:       assertFalse(node0.isOr());
568:       assertFalse(node0.isAssign());
569:       assertFalse(node0.isComma());
570:       assertFalse(node0.isDec());
571:       assertFalse(node0.isInstanceOf());
572:       assertFalse(node0.isExprResult());
573:       assertFalse(node0.isGetElem());
574:       assertFalse(node0.isSwitch());
575:       assertFalse(node0.isBlock());
576:       assertFalse(node0.hasMoreThanOneChild());
577:       assertEquals(39, node0.getType());
578:       assertFalse(node0.isHook());
579:       assertFalse(node0.isAssignAdd());
580:       assertFalse(node0.isVar());
581:       assertFalse(node0.isAdd());
582:       assertFalse(node0.isDo());
583:       assertFalse(node0.isCase());
584:       assertFalse(node0.isNew());
585:       assertFalse(node0.isGetterDef());
586:       assertFalse(node0.isStringKey());
587:       assertFalse(node0.isParamList());
588:       assertFalse(node0.isLabel());
589:       assertEquals(39, node0.getLineno());
590:       assertEquals(0, node0.getChildCount());
591:       assertFalse(node0.isLabelName());
592:       assertFalse(node0.isArrayLit());
593:       assertFalse(node0.isDefaultCase());
594:       assertFalse(node0.isDebugger());
595:       assertFalse(node0.isTrue());
596:       assertFalse(node0.isFunction());
597:       assertFalse(node0.isRegExp());
598:       assertFalse(node0.isSetterDef());
599:       assertFalse(node0.isTry());
600:       assertFalse(node0.isIf());
601:       assertFalse(node0.isDelProp());
602:       assertFalse(node0.isNull());
603:       assertFalse(node0.isFor());
604:       assertFalse(node0.isNE());
605:       assertFalse(node0.isEmpty());
606:       assertFalse(node0.isCatch());
607:       assertFalse(node0.isVoid());
608:       assertFalse(node0.isCall());
609:       assertFalse(node0.isName());
610:       assertFalse(node0.isString());
611:       assertFalse(node0.isWhile());
612:       assertFalse(node0.isContinue());
613:       assertFalse(node0.isIn());
614:       assertFalse(node0.isReturn());
615:       assertEquals(159744, node0.getSourcePosition());
616:       assertFalse(node0.isInc());
617:       assertTrue(node0.isNumber());
618:       assertFalse(node0.isThrow());
619:       assertFalse(node0.isFalse());
620:       assertFalse(node0.isCast());
621:       assertFalse(node0.isAnd());
622:       assertEquals(37, Node.OPT_ARG_NAME);
623:       assertEquals(2, Node.POST_FLAG);
624:       assertEquals(56, Node.CHANGE_TIME);
625:       assertEquals(46, Node.IS_NAMESPACE);
626:       assertEquals(51, Node.STATIC_SOURCE_FILE);
627:       assertEquals(12, Node.COLUMN_BITS);
628:       assertEquals(47, Node.IS_DISPATCHER);
629:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
630:       assertEquals(49, Node.DIRECT_EVAL);
631:       assertEquals(54, Node.SLASH_V);
632:       assertEquals(43, Node.IS_CONSTANT_NAME);
633:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
634:       assertEquals(1, Node.DECR_FLAG);
635:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
636:       assertEquals(32, Node.INCRDECR_PROP);
637:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
638:       assertEquals(8, Node.FLAG_NO_THROWS);
639:       assertEquals(48, Node.DIRECTIVES);
640:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
641:       assertEquals(50, Node.FREE_CALL);
642:       assertEquals(40, Node.ORIGINALNAME_PROP);
643:       assertEquals(4095, Node.COLUMN_MASK);
644:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
645:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
646:       assertEquals(52, Node.LENGTH);
647:       assertEquals(57, Node.LAST_PROP);
648:       assertEquals(30, Node.VAR_ARGS_NAME);
649:       assertEquals(36, Node.QUOTED_PROP);
650:       assertEquals(57, Node.REFLECTED_OBJECT);
651:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
652:       assertEquals(55, Node.INFERRED_FUNCTION);
653:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
654:       assertEquals(29, Node.JSDOC_INFO_PROP);
655:       assertEquals(53, Node.INPUT_ID);
656:       assertEquals(15, Node.NO_SIDE_EFFECTS);
657:       assertEquals(39, Node.EMPTY_BLOCK);
658:       
659:       node0.putProp(4095, (Object) null);
660:       assertFalse(node0.equals((Object)node2));
661:       assertFalse(node0.equals((Object)node1));
662:       assertFalse(node0.isWith());
663:       assertFalse(node0.isScript());
664:       assertFalse(node0.isObjectLit());
665:       assertEquals(0, node0.getCharno());
666:       assertFalse(node0.isNot());
667:       assertFalse(node0.isGetProp());
668:       assertFalse(node0.hasOneChild());
669:       assertFalse(node0.isBreak());
670:       assertFalse(node0.hasChildren());
671:       assertFalse(node0.isTypeOf());
672:       assertFalse(node0.isThis());
673:       assertFalse(node0.isOr());
674:       assertFalse(node0.isAssign());
675:       assertFalse(node0.isComma());
676:       assertFalse(node0.isDec());
677:       assertFalse(node0.isInstanceOf());
678:       assertFalse(node0.isExprResult());
679:       assertFalse(node0.isGetElem());
680:       assertFalse(node0.isSwitch());
681:       assertFalse(node0.isBlock());
682:       assertFalse(node0.hasMoreThanOneChild());
683:       assertEquals(39, node0.getType());
684:       assertFalse(node0.isHook());
685:       assertFalse(node0.isAssignAdd());
686:       assertFalse(node0.isVar());
687:       assertFalse(node0.isAdd());
688:       assertFalse(node0.isDo());
689:       assertFalse(node0.isCase());
690:       assertFalse(node0.isNew());
691:       assertFalse(node0.isGetterDef());
692:       assertFalse(node0.isStringKey());
693:       assertFalse(node0.isParamList());
694:       assertFalse(node0.isLabel());
695:       assertEquals(39, node0.getLineno());
696:       assertEquals(0, node0.getChildCount());
697:       assertFalse(node0.isLabelName());
698:       assertFalse(node0.isArrayLit());
699:       assertFalse(node0.isDefaultCase());
700:       assertFalse(node0.isDebugger());
701:       assertFalse(node0.isTrue());
702:       assertFalse(node0.isFunction());
703:       assertFalse(node0.isRegExp());
704:       assertFalse(node0.isSetterDef());
705:       assertFalse(node0.isTry());
706:       assertFalse(node0.isIf());
707:       assertFalse(node0.isDelProp());
708:       assertFalse(node0.isNull());
709:       assertFalse(node0.isFor());
710:       assertFalse(node0.isNE());
711:       assertFalse(node0.isEmpty());
712:       assertFalse(node0.isCatch());
713:       assertFalse(node0.isVoid());
714:       assertFalse(node0.isCall());
715:       assertFalse(node0.isName());
716:       assertFalse(node0.isString());
717:       assertFalse(node0.isWhile());
718:       assertFalse(node0.isContinue());
719:       assertFalse(node0.isIn());
720:       assertFalse(node0.isReturn());
721:       assertEquals(159744, node0.getSourcePosition());
722:       assertFalse(node0.isInc());
723:       assertTrue(node0.isNumber());
724:       assertFalse(node0.isThrow());
725:       assertFalse(node0.isFalse());
726:       assertFalse(node0.isCast());
727:       assertFalse(node0.isAnd());
728:       assertEquals(37, Node.OPT_ARG_NAME);
729:       assertEquals(2, Node.POST_FLAG);
730:       assertEquals(56, Node.CHANGE_TIME);
731:       assertEquals(46, Node.IS_NAMESPACE);
732:       assertEquals(51, Node.STATIC_SOURCE_FILE);
733:       assertEquals(12, Node.COLUMN_BITS);
734:       assertEquals(47, Node.IS_DISPATCHER);
735:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
736:       assertEquals(49, Node.DIRECT_EVAL);
737:       assertEquals(54, Node.SLASH_V);
738:       assertEquals(43, Node.IS_CONSTANT_NAME);
739:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
740:       assertEquals(1, Node.DECR_FLAG);
741:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
742:       assertEquals(32, Node.INCRDECR_PROP);
743:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
744:       assertEquals(8, Node.FLAG_NO_THROWS);
745:       assertEquals(48, Node.DIRECTIVES);
746:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
747:       assertEquals(50, Node.FREE_CALL);
748:       assertEquals(40, Node.ORIGINALNAME_PROP);
749:       assertEquals(4095, Node.COLUMN_MASK);
750:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
751:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
752:       assertEquals(52, Node.LENGTH);
753:       assertEquals(57, Node.LAST_PROP);
754:       assertEquals(30, Node.VAR_ARGS_NAME);
755:       assertEquals(36, Node.QUOTED_PROP);
756:       assertEquals(57, Node.REFLECTED_OBJECT);
757:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
758:       assertEquals(55, Node.INFERRED_FUNCTION);
759:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
760:       assertEquals(29, Node.JSDOC_INFO_PROP);
761:       assertEquals(53, Node.INPUT_ID);
762:       assertEquals(15, Node.NO_SIDE_EFFECTS);
763:       assertEquals(39, Node.EMPTY_BLOCK);
764:       
765:       int int0 = node0.getIndexOfChild(node1);
766:       assertFalse(node0.equals((Object)node2));
767:       assertFalse(node0.equals((Object)node1));
768:       assertFalse(node1.equals((Object)node0));
769:       assertFalse(node1.equals((Object)node2));
770:       assertNotSame(node1, node2);
771:       assertFalse(node0.isWith());
772:       assertFalse(node0.isScript());
773:       assertFalse(node0.isObjectLit());
774:       assertEquals(0, node0.getCharno());
775:       assertFalse(node0.isNot());
776:       assertFalse(node0.isGetProp());
777:       assertFalse(node0.hasOneChild());
778:       assertFalse(node0.isBreak());
779:       assertFalse(node0.hasChildren());
780:       assertFalse(node0.isTypeOf());
781:       assertFalse(node0.isThis());
782:       assertFalse(node0.isOr());
783:       assertFalse(node0.isAssign());
784:       assertFalse(node0.isComma());
785:       assertFalse(node0.isDec());
786:       assertFalse(node0.isInstanceOf());
787:       assertFalse(node0.isExprResult());
788:       assertFalse(node0.isGetElem());
789:       assertFalse(node0.isSwitch());
790:       assertFalse(node0.isBlock());
791:       assertFalse(node0.hasMoreThanOneChild());
792:       assertEquals(39, node0.getType());
793:       assertFalse(node0.isHook());
794:       assertFalse(node0.isAssignAdd());
795:       assertFalse(node0.isVar());
796:       assertFalse(node0.isAdd());
797:       assertFalse(node0.isDo());
798:       assertFalse(node0.isCase());
799:       assertFalse(node0.isNew());
800:       assertFalse(node0.isGetterDef());
801:       assertFalse(node0.isStringKey());
802:       assertFalse(node0.isParamList());
803:       assertFalse(node0.isLabel());
804:       assertEquals(39, node0.getLineno());
805:       assertEquals(0, node0.getChildCount());
806:       assertFalse(node0.isLabelName());
807:       assertFalse(node0.isArrayLit());
808:       assertFalse(node0.isDefaultCase());
809:       assertFalse(node0.isDebugger());
810:       assertFalse(node0.isTrue());
811:       assertFalse(node0.isFunction());
812:       assertFalse(node0.isRegExp());
813:       assertFalse(node0.isSetterDef());
814:       assertFalse(node0.isTry());
815:       assertFalse(node0.isIf());
816:       assertFalse(node0.isDelProp());
817:       assertFalse(node0.isNull());
818:       assertFalse(node0.isFor());
819:       assertFalse(node0.isNE());
820:       assertFalse(node0.isEmpty());
821:       assertFalse(node0.isCatch());
822:       assertFalse(node0.isVoid());
823:       assertFalse(node0.isCall());
824:       assertFalse(node0.isName());
825:       assertFalse(node0.isString());
826:       assertFalse(node0.isWhile());
827:       assertFalse(node0.isContinue());
828:       assertFalse(node0.isIn());
829:       assertFalse(node0.isReturn());
830:       assertEquals(159744, node0.getSourcePosition());
831:       assertFalse(node0.isInc());
832:       assertTrue(node0.isNumber());
833:       assertFalse(node0.isThrow());
834:       assertFalse(node0.isFalse());
835:       assertFalse(node0.isCast());
836:       assertFalse(node0.isAnd());
837:       assertEquals(0, node1.getChildCount());
838:       assertFalse(node1.isCatch());
839:       assertFalse(node1.isDefaultCase());
840:       assertEquals(36, node1.getType());
841:       assertFalse(node1.isRegExp());
842:       assertFalse(node1.isFunction());
843:       assertFalse(node1.isArrayLit());
844:       assertFalse(node1.isFor());
845:       assertFalse(node1.isTry());
846:       assertFalse(node1.isStringKey());
847:       assertFalse(node1.isParamList());
848:       assertFalse(node1.isDebugger());
849:       assertFalse(node1.isGetterDef());
850:       assertEquals(32, node1.getLineno());
851:       assertFalse(node1.isCase());
852:       assertFalse(node1.isBlock());
853:       assertFalse(node1.isContinue());
854:       assertFalse(node1.hasMoreThanOneChild());
855:       assertFalse(node1.isThrow());
856:       assertFalse(node1.isIf());
857:       assertEquals(131072, node1.getSourcePosition());
858:       assertFalse(node1.isNE());
859:       assertFalse(node1.isSetterDef());
860:       assertFalse(node1.isInc());
861:       assertEquals(0, node1.getCharno());
862:       assertFalse(node1.isIn());
863:       assertFalse(node1.isInstanceOf());
864:       assertFalse(node1.isAnd());
865:       assertFalse(node1.isComma());
866:       assertFalse(node1.isExprResult());
867:       assertFalse(node1.isBreak());
868:       assertFalse(node1.isThis());
869:       assertFalse(node1.isFalse());
870:       assertFalse(node1.isWith());
871:       assertFalse(node1.isCast());
872:       assertFalse(node1.hasOneChild());
873:       assertFalse(node1.isHook());
874:       assertFalse(node1.isLabelName());
875:       assertFalse(node1.isSwitch());
876:       assertFalse(node1.isScript());
877:       assertFalse(node1.isGetProp());
878:       assertFalse(node1.isNot());
879:       assertFalse(node1.isObjectLit());
880:       assertFalse(node1.isString());
881:       assertFalse(node1.isNumber());
882:       assertFalse(node1.isReturn());
883:       assertFalse(node1.isAssignAdd());
884:       assertFalse(node1.isDo());
885:       assertFalse(node1.isWhile());
886:       assertFalse(node1.isTypeOf());
887:       assertFalse(node1.isDec());
888:       assertFalse(node1.hasChildren());
889:       assertFalse(node1.isLabel());
890:       assertFalse(node1.isAssign());
891:       assertFalse(node1.isVar());
892:       assertFalse(node1.isCall());
893:       assertFalse(node1.isGetElem());
894:       assertFalse(node1.isName());
895:       assertFalse(node1.isNew());
896:       assertFalse(node1.isDelProp());
897:       assertFalse(node1.isVoid());
898:       assertFalse(node1.isNull());
899:       assertFalse(node1.isTrue());
900:       assertFalse(node1.isEmpty());
901:       assertFalse(node1.isAdd());
902:       assertFalse(node1.isOr());
903:       assertEquals((-1), int0);
904:       assertEquals(37, Node.OPT_ARG_NAME);
905:       assertEquals(2, Node.POST_FLAG);
906:       assertEquals(56, Node.CHANGE_TIME);
907:       assertEquals(46, Node.IS_NAMESPACE);
908:       assertEquals(51, Node.STATIC_SOURCE_FILE);
909:       assertEquals(12, Node.COLUMN_BITS);
910:       assertEquals(47, Node.IS_DISPATCHER);
911:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
912:       assertEquals(49, Node.DIRECT_EVAL);
913:       assertEquals(54, Node.SLASH_V);
914:       assertEquals(43, Node.IS_CONSTANT_NAME);
915:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
916:       assertEquals(1, Node.DECR_FLAG);
917:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
918:       assertEquals(32, Node.INCRDECR_PROP);
919:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
920:       assertEquals(8, Node.FLAG_NO_THROWS);
921:       assertEquals(48, Node.DIRECTIVES);
922:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
923:       assertEquals(50, Node.FREE_CALL);
924:       assertEquals(40, Node.ORIGINALNAME_PROP);
925:       assertEquals(4095, Node.COLUMN_MASK);
926:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
927:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
928:       assertEquals(52, Node.LENGTH);
929:       assertEquals(57, Node.LAST_PROP);
930:       assertEquals(30, Node.VAR_ARGS_NAME);
931:       assertEquals(36, Node.QUOTED_PROP);
932:       assertEquals(57, Node.REFLECTED_OBJECT);
933:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
934:       assertEquals(55, Node.INFERRED_FUNCTION);
935:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
936:       assertEquals(29, Node.JSDOC_INFO_PROP);
937:       assertEquals(53, Node.INPUT_ID);
938:       assertEquals(15, Node.NO_SIDE_EFFECTS);
939:       assertEquals(39, Node.EMPTY_BLOCK);
940:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
941:       assertEquals(29, Node.JSDOC_INFO_PROP);
942:       assertEquals(56, Node.CHANGE_TIME);
943:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
944:       assertEquals(37, Node.OPT_ARG_NAME);
945:       assertEquals(53, Node.INPUT_ID);
946:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
947:       assertEquals(46, Node.IS_NAMESPACE);
948:       assertEquals(51, Node.STATIC_SOURCE_FILE);
949:       assertEquals(36, Node.QUOTED_PROP);
950:       assertEquals(55, Node.INFERRED_FUNCTION);
951:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
952:       assertEquals(43, Node.IS_CONSTANT_NAME);
953:       assertEquals(15, Node.NO_SIDE_EFFECTS);
954:       assertEquals(57, Node.LAST_PROP);
955:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
956:       assertEquals(47, Node.IS_DISPATCHER);
957:       assertEquals(2, Node.POST_FLAG);
958:       assertEquals(30, Node.VAR_ARGS_NAME);
959:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
960:       assertEquals(40, Node.ORIGINALNAME_PROP);
961:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
962:       assertEquals(48, Node.DIRECTIVES);
963:       assertEquals(39, Node.EMPTY_BLOCK);
964:       assertEquals(54, Node.SLASH_V);
965:       assertEquals(57, Node.REFLECTED_OBJECT);
966:       assertEquals(52, Node.LENGTH);
967:       assertEquals(8, Node.FLAG_NO_THROWS);
968:       assertEquals(50, Node.FREE_CALL);
969:       assertEquals(1, Node.DECR_FLAG);
970:       assertEquals(12, Node.COLUMN_BITS);
971:       assertEquals(49, Node.DIRECT_EVAL);
972:       assertEquals(32, Node.INCRDECR_PROP);
973:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
974:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
975:       assertEquals(4095, Node.COLUMN_MASK);
976:       
977:       Iterable<Node> iterable0 = node0.children();
978:       assertFalse(node0.equals((Object)node2));
979:       assertFalse(node0.equals((Object)node1));
980:       assertFalse(node0.isWith());
981:       assertFalse(node0.isScript());
982:       assertFalse(node0.isObjectLit());
983:       assertEquals(0, node0.getCharno());
984:       assertFalse(node0.isNot());
985:       assertFalse(node0.isGetProp());
986:       assertFalse(node0.hasOneChild());
987:       assertFalse(node0.isBreak());
988:       assertFalse(node0.hasChildren());
989:       assertFalse(node0.isTypeOf());
990:       assertFalse(node0.isThis());
991:       assertFalse(node0.isOr());
992:       assertFalse(node0.isAssign());
993:       assertFalse(node0.isComma());
994:       assertFalse(node0.isDec());
995:       assertFalse(node0.isInstanceOf());
996:       assertFalse(node0.isExprResult());
997:       assertFalse(node0.isGetElem());
998:       assertFalse(node0.isSwitch());
999:       assertFalse(node0.isBlock());
1000:       assertFalse(node0.hasMoreThanOneChild());
1001:       assertEquals(39, node0.getType());
1002:       assertFalse(node0.isHook());
1003:       assertFalse(node0.isAssignAdd());
1004:       assertFalse(node0.isVar());
1005:       assertFalse(node0.isAdd());
1006:       assertFalse(node0.isDo());
1007:       assertFalse(node0.isCase());
1008:       assertFalse(node0.isNew());
1009:       assertFalse(node0.isGetterDef());
1010:       assertFalse(node0.isStringKey());
1011:       assertFalse(node0.isParamList());
1012:       assertFalse(node0.isLabel());
1013:       assertEquals(39, node0.getLineno());
1014:       assertEquals(0, node0.getChildCount());
1015:       assertFalse(node0.isLabelName());
1016:       assertFalse(node0.isArrayLit());
1017:       assertFalse(node0.isDefaultCase());
1018:       assertFalse(node0.isDebugger());
1019:       assertFalse(node0.isTrue());
1020:       assertFalse(node0.isFunction());
1021:       assertFalse(node0.isRegExp());
1022:       assertFalse(node0.isSetterDef());
1023:       assertFalse(node0.isTry());
1024:       assertFalse(node0.isIf());
1025:       assertFalse(node0.isDelProp());
1026:       assertFalse(node0.isNull());
1027:       assertFalse(node0.isFor());
1028:       assertFalse(node0.isNE());
1029:       assertFalse(node0.isEmpty());
1030:       assertFalse(node0.isCatch());
1031:       assertFalse(node0.isVoid());
1032:       assertFalse(node0.isCall());
1033:       assertFalse(node0.isName());
1034:       assertFalse(node0.isString());
1035:       assertFalse(node0.isWhile());
1036:       assertFalse(node0.isContinue());
1037:       assertFalse(node0.isIn());
1038:       assertFalse(node0.isReturn());
1039:       assertEquals(159744, node0.getSourcePosition());
1040:       assertFalse(node0.isInc());
1041:       assertTrue(node0.isNumber());
1042:       assertFalse(node0.isThrow());
1043:       assertFalse(node0.isFalse());
1044:       assertFalse(node0.isCast());
1045:       assertFalse(node0.isAnd());
1046:       assertFalse(iterable0.contains(node0));
1047:       assertNotNull(iterable0);
1048:       assertEquals(37, Node.OPT_ARG_NAME);
1049:       assertEquals(2, Node.POST_FLAG);
1050:       assertEquals(56, Node.CHANGE_TIME);
1051:       assertEquals(46, Node.IS_NAMESPACE);
1052:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1053:       assertEquals(12, Node.COLUMN_BITS);
1054:       assertEquals(47, Node.IS_DISPATCHER);
1055:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1056:       assertEquals(49, Node.DIRECT_EVAL);
1057:       assertEquals(54, Node.SLASH_V);
1058:       assertEquals(43, Node.IS_CONSTANT_NAME);
1059:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1060:       assertEquals(1, Node.DECR_FLAG);
1061:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1062:       assertEquals(32, Node.INCRDECR_PROP);
1063:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1064:       assertEquals(8, Node.FLAG_NO_THROWS);
1065:       assertEquals(48, Node.DIRECTIVES);
1066:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1067:       assertEquals(50, Node.FREE_CALL);
1068:       assertEquals(40, Node.ORIGINALNAME_PROP);
1069:       assertEquals(4095, Node.COLUMN_MASK);
1070:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1071:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1072:       assertEquals(52, Node.LENGTH);
1073:       assertEquals(57, Node.LAST_PROP);
1074:       assertEquals(30, Node.VAR_ARGS_NAME);
1075:       assertEquals(36, Node.QUOTED_PROP);
1076:       assertEquals(57, Node.REFLECTED_OBJECT);
1077:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1078:       assertEquals(55, Node.INFERRED_FUNCTION);
1079:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1080:       assertEquals(29, Node.JSDOC_INFO_PROP);
1081:       assertEquals(53, Node.INPUT_ID);
1082:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1083:       assertEquals(39, Node.EMPTY_BLOCK);
1084:       
1085:       boolean boolean1 = node2.isIn();
1086:       assertFalse(node2.equals((Object)node0));
1087:       assertFalse(node2.equals((Object)node1));
1088:       assertTrue(boolean1 == boolean0);
1089:       assertNotSame(node2, node1);
1090:       assertFalse(node2.isThis());
1091:       assertFalse(node2.isFalse());
1092:       assertFalse(node2.isComma());
1093:       assertFalse(node2.isHook());
1094:       assertFalse(node2.isThrow());
1095:       assertFalse(node2.isGetProp());
1096:       assertEquals(46, node2.getType());
1097:       assertFalse(node2.isScript());
1098:       assertFalse(node2.isSwitch());
1099:       assertFalse(node2.isString());
1100:       assertFalse(node2.isNot());
1101:       assertFalse(node2.isObjectLit());
1102:       assertEquals((-1), node2.getCharno());
1103:       assertFalse(node2.isAnd());
1104:       assertFalse(node2.isCast());
1105:       assertFalse(node2.isLabelName());
1106:       assertFalse(node2.isNE());
1107:       assertFalse(node2.isNumber());
1108:       assertFalse(node2.isIf());
1109:       assertFalse(node2.isFor());
1110:       assertFalse(node2.isGetterDef());
1111:       assertFalse(node2.isIn());
1112:       assertFalse(node2.isCase());
1113:       assertFalse(node2.isTry());
1114:       assertFalse(node2.hasOneChild());
1115:       assertFalse(node2.isRegExp());
1116:       assertFalse(node2.isInc());
1117:       assertFalse(node2.isBlock());
1118:       assertFalse(node2.isWith());
1119:       assertFalse(node2.hasMoreThanOneChild());
1120:       assertFalse(node2.isCatch());
1121:       assertFalse(node2.isInstanceOf());
1122:       assertEquals((-1), node2.getLineno());
1123:       assertFalse(node2.isNull());
1124:       assertFalse(node2.isSetterDef());
1125:       assertFalse(node2.isParamList());
1126:       assertEquals(0, node2.getChildCount());
1127:       assertFalse(node2.isVar());
1128:       assertFalse(node2.isAdd());
1129:       assertFalse(node2.isNew());
1130:       assertFalse(node2.isDefaultCase());
1131:       assertFalse(node2.isFunction());
1132:       assertFalse(node2.isDebugger());
1133:       assertFalse(node2.isArrayLit());
1134:       assertFalse(node2.isContinue());
1135:       assertFalse(node2.isStringKey());
1136:       assertEquals((-1), node2.getSourcePosition());
1137:       assertFalse(node2.isTypeOf());
1138:       assertFalse(node2.isOr());
1139:       assertFalse(node2.isLabel());
1140:       assertFalse(node2.isAssign());
1141:       assertFalse(node2.isReturn());
1142:       assertFalse(node2.hasChildren());
1143:       assertFalse(node2.isDec());
1144:       assertFalse(node2.isAssignAdd());
1145:       assertFalse(node2.isDo());
1146:       assertFalse(node2.isEmpty());
1147:       assertFalse(node2.isTrue());
1148:       assertFalse(node2.isWhile());
1149:       assertFalse(node2.isExprResult());
1150:       assertFalse(node2.isCall());
1151:       assertFalse(node2.isName());
1152:       assertFalse(node2.isGetElem());
1153:       assertFalse(node2.isBreak());
1154:       assertFalse(node2.isDelProp());
1155:       assertFalse(node2.isVoid());
1156:       assertFalse(boolean1);
1157:       assertEquals(53, Node.INPUT_ID);
1158:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1159:       assertEquals(43, Node.IS_CONSTANT_NAME);
1160:       assertEquals(36, Node.QUOTED_PROP);
1161:       assertEquals(4095, Node.COLUMN_MASK);
1162:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1163:       assertEquals(37, Node.OPT_ARG_NAME);
1164:       assertEquals(48, Node.DIRECTIVES);
1165:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1166:       assertEquals(8, Node.FLAG_NO_THROWS);
1167:       assertEquals(56, Node.CHANGE_TIME);
1168:       assertEquals(2, Node.POST_FLAG);
1169:       assertEquals(47, Node.IS_DISPATCHER);
1170:       assertEquals(29, Node.JSDOC_INFO_PROP);
1171:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1172:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1173:       assertEquals(57, Node.LAST_PROP);
1174:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1175:       assertEquals(55, Node.INFERRED_FUNCTION);
1176:       assertEquals(39, Node.EMPTY_BLOCK);
1177:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1178:       assertEquals(54, Node.SLASH_V);
1179:       assertEquals(52, Node.LENGTH);
1180:       assertEquals(57, Node.REFLECTED_OBJECT);
1181:       assertEquals(30, Node.VAR_ARGS_NAME);
1182:       assertEquals(49, Node.DIRECT_EVAL);
1183:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1184:       assertEquals(40, Node.ORIGINALNAME_PROP);
1185:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1186:       assertEquals(12, Node.COLUMN_BITS);
1187:       assertEquals(46, Node.IS_NAMESPACE);
1188:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1189:       assertEquals(1, Node.DECR_FLAG);
1190:       assertEquals(50, Node.FREE_CALL);
1191:       assertEquals(32, Node.INCRDECR_PROP);
1192:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1193:       
1194:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
1195:       assertFalse(node0.equals((Object)node2));
1196:       assertFalse(node0.equals((Object)node1));
1197:       assertFalse(node2.equals((Object)node0));
1198:       assertFalse(node2.equals((Object)node1));
1199:       assertNotSame(node2, node1);
1200:       assertFalse(node0.isWith());
1201:       assertFalse(node0.isScript());
1202:       assertFalse(node0.isObjectLit());
1203:       assertEquals(0, node0.getCharno());
1204:       assertFalse(node0.isNot());
1205:       assertFalse(node0.isGetProp());
1206:       assertFalse(node0.hasOneChild());
1207:       assertFalse(node0.isBreak());
1208:       assertFalse(node0.hasChildren());
1209:       assertFalse(node0.isTypeOf());
1210:       assertFalse(node0.isThis());
1211:       assertFalse(node0.isOr());
1212:       assertFalse(node0.isAssign());
1213:       assertFalse(node0.isComma());
1214:       assertFalse(node0.isDec());
1215:       assertFalse(node0.isInstanceOf());
1216:       assertFalse(node0.isExprResult());
1217:       assertFalse(node0.isGetElem());
1218:       assertFalse(node0.isSwitch());
1219:       assertFalse(node0.isBlock());
1220:       assertFalse(node0.hasMoreThanOneChild());
1221:       assertEquals(39, node0.getType());
1222:       assertFalse(node0.isHook());
1223:       assertFalse(node0.isAssignAdd());
1224:       assertFalse(node0.isVar());
1225:       assertFalse(node0.isAdd());
1226:       assertFalse(node0.isDo());
1227:       assertFalse(node0.isCase());
1228:       assertFalse(node0.isNew());
1229:       assertFalse(node0.isGetterDef());
1230:       assertFalse(node0.isStringKey());
1231:       assertFalse(node0.isParamList());
1232:       assertFalse(node0.isLabel());
1233:       assertEquals(39, node0.getLineno());
1234:       assertEquals(0, node0.getChildCount());
1235:       assertFalse(node0.isLabelName());
1236:       assertFalse(node0.isArrayLit());
1237:       assertFalse(node0.isDefaultCase());
1238:       assertFalse(node0.isDebugger());
1239:       assertFalse(node0.isTrue());
1240:       assertFalse(node0.isFunction());
1241:       assertFalse(node0.isRegExp());
1242:       assertFalse(node0.isSetterDef());
1243:       assertFalse(node0.isTry());
1244:       assertFalse(node0.isIf());
1245:       assertFalse(node0.isDelProp());
1246:       assertFalse(node0.isNull());
1247:       assertFalse(node0.isFor());
1248:       assertFalse(node0.isNE());
1249:       assertFalse(node0.isEmpty());
1250:       assertFalse(node0.isCatch());
1251:       assertFalse(node0.isVoid());
1252:       assertFalse(node0.isCall());
1253:       assertFalse(node0.isName());
1254:       assertFalse(node0.isString());
1255:       assertFalse(node0.isWhile());
1256:       assertFalse(node0.isContinue());
1257:       assertFalse(node0.isIn());
1258:       assertFalse(node0.isReturn());
1259:       assertEquals(159744, node0.getSourcePosition());
1260:       assertFalse(node0.isInc());
1261:       assertTrue(node0.isNumber());
1262:       assertFalse(node0.isThrow());
1263:       assertFalse(node0.isFalse());
1264:       assertFalse(node0.isCast());
1265:       assertFalse(node0.isAnd());
1266:       assertFalse(node2.isThis());
1267:       assertFalse(node2.isFalse());
1268:       assertFalse(node2.isComma());
1269:       assertFalse(node2.isHook());
1270:       assertFalse(node2.isThrow());
1271:       assertFalse(node2.isGetProp());
1272:       assertEquals(46, node2.getType());
1273:       assertFalse(node2.isScript());
1274:       assertFalse(node2.isSwitch());
1275:       assertFalse(node2.isString());
1276:       assertFalse(node2.isNot());
1277:       assertFalse(node2.isObjectLit());
1278:       assertEquals((-1), node2.getCharno());
1279:       assertFalse(node2.isAnd());
1280:       assertFalse(node2.isCast());
1281:       assertFalse(node2.isLabelName());
1282:       assertFalse(node2.isNE());
1283:       assertFalse(node2.isNumber());
1284:       assertFalse(node2.isIf());
1285:       assertFalse(node2.isFor());
1286:       assertFalse(node2.isGetterDef());
1287:       assertFalse(node2.isIn());
1288:       assertFalse(node2.isCase());
1289:       assertFalse(node2.isTry());
1290:       assertFalse(node2.hasOneChild());
1291:       assertFalse(node2.isRegExp());
1292:       assertFalse(node2.isInc());
1293:       assertFalse(node2.isBlock());
1294:       assertFalse(node2.isWith());
1295:       assertFalse(node2.hasMoreThanOneChild());
1296:       assertFalse(node2.isCatch());
1297:       assertFalse(node2.isInstanceOf());
1298:       assertEquals((-1), node2.getLineno());
1299:       assertFalse(node2.isNull());
1300:       assertFalse(node2.isSetterDef());
1301:       assertFalse(node2.isParamList());
1302:       assertEquals(0, node2.getChildCount());
1303:       assertFalse(node2.isVar());
1304:       assertFalse(node2.isAdd());
1305:       assertFalse(node2.isNew());
1306:       assertFalse(node2.isDefaultCase());
1307:       assertFalse(node2.isFunction());
1308:       assertFalse(node2.isDebugger());
1309:       assertFalse(node2.isArrayLit());
1310:       assertFalse(node2.isContinue());
1311:       assertFalse(node2.isStringKey());
1312:       assertEquals((-1), node2.getSourcePosition());
1313:       assertFalse(node2.isTypeOf());
1314:       assertFalse(node2.isOr());
1315:       assertFalse(node2.isLabel());
1316:       assertFalse(node2.isAssign());
1317:       assertFalse(node2.isReturn());
1318:       assertFalse(node2.hasChildren());
1319:       assertFalse(node2.isDec());
1320:       assertFalse(node2.isAssignAdd());
1321:       assertFalse(node2.isDo());
1322:       assertFalse(node2.isEmpty());
1323:       assertFalse(node2.isTrue());
1324:       assertFalse(node2.isWhile());
1325:       assertFalse(node2.isExprResult());
1326:       assertFalse(node2.isCall());
1327:       assertFalse(node2.isName());
1328:       assertFalse(node2.isGetElem());
1329:       assertFalse(node2.isBreak());
1330:       assertFalse(node2.isDelProp());
1331:       assertFalse(node2.isVoid());
1332:       assertNotNull(node_NodeMismatch0);
1333:       assertEquals(37, Node.OPT_ARG_NAME);
1334:       assertEquals(2, Node.POST_FLAG);
1335:       assertEquals(56, Node.CHANGE_TIME);
1336:       assertEquals(46, Node.IS_NAMESPACE);
1337:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1338:       assertEquals(12, Node.COLUMN_BITS);
1339:       assertEquals(47, Node.IS_DISPATCHER);
1340:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1341:       assertEquals(49, Node.DIRECT_EVAL);
1342:       assertEquals(54, Node.SLASH_V);
1343:       assertEquals(43, Node.IS_CONSTANT_NAME);
1344:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1345:       assertEquals(1, Node.DECR_FLAG);
1346:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1347:       assertEquals(32, Node.INCRDECR_PROP);
1348:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1349:       assertEquals(8, Node.FLAG_NO_THROWS);
1350:       assertEquals(48, Node.DIRECTIVES);
1351:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1352:       assertEquals(50, Node.FREE_CALL);
1353:       assertEquals(40, Node.ORIGINALNAME_PROP);
1354:       assertEquals(4095, Node.COLUMN_MASK);
1355:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1356:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1357:       assertEquals(52, Node.LENGTH);
1358:       assertEquals(57, Node.LAST_PROP);
1359:       assertEquals(30, Node.VAR_ARGS_NAME);
1360:       assertEquals(36, Node.QUOTED_PROP);
1361:       assertEquals(57, Node.REFLECTED_OBJECT);
1362:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1363:       assertEquals(55, Node.INFERRED_FUNCTION);
1364:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1365:       assertEquals(29, Node.JSDOC_INFO_PROP);
1366:       assertEquals(53, Node.INPUT_ID);
1367:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1368:       assertEquals(39, Node.EMPTY_BLOCK);
1369:       assertEquals(53, Node.INPUT_ID);
1370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1371:       assertEquals(43, Node.IS_CONSTANT_NAME);
1372:       assertEquals(36, Node.QUOTED_PROP);
1373:       assertEquals(4095, Node.COLUMN_MASK);
1374:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1375:       assertEquals(37, Node.OPT_ARG_NAME);
1376:       assertEquals(48, Node.DIRECTIVES);
1377:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1378:       assertEquals(8, Node.FLAG_NO_THROWS);
1379:       assertEquals(56, Node.CHANGE_TIME);
1380:       assertEquals(2, Node.POST_FLAG);
1381:       assertEquals(47, Node.IS_DISPATCHER);
1382:       assertEquals(29, Node.JSDOC_INFO_PROP);
1383:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1384:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1385:       assertEquals(57, Node.LAST_PROP);
1386:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1387:       assertEquals(55, Node.INFERRED_FUNCTION);
1388:       assertEquals(39, Node.EMPTY_BLOCK);
1389:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1390:       assertEquals(54, Node.SLASH_V);
1391:       assertEquals(52, Node.LENGTH);
1392:       assertEquals(57, Node.REFLECTED_OBJECT);
1393:       assertEquals(30, Node.VAR_ARGS_NAME);
1394:       assertEquals(49, Node.DIRECT_EVAL);
1395:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1396:       assertEquals(40, Node.ORIGINALNAME_PROP);
1397:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1398:       assertEquals(12, Node.COLUMN_BITS);
1399:       assertEquals(46, Node.IS_NAMESPACE);
1400:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1401:       assertEquals(1, Node.DECR_FLAG);
1402:       assertEquals(50, Node.FREE_CALL);
1403:       assertEquals(32, Node.INCRDECR_PROP);
1404:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1405:       
1406:       Node node3 = new Node(39, node1, node2);
1407:       assertFalse(node1.equals((Object)node0));
1408:       assertFalse(node1.equals((Object)node2));
1409:       assertFalse(node2.equals((Object)node0));
1410:       assertFalse(node2.equals((Object)node1));
1411:       assertFalse(node3.equals((Object)node0));
1412:       assertFalse(node3.equals((Object)node2));
1413:       assertFalse(node3.equals((Object)node1));
1414:       assertEquals(0, node1.getChildCount());
1415:       assertFalse(node1.isCatch());
1416:       assertFalse(node1.isDefaultCase());
1417:       assertEquals(36, node1.getType());
1418:       assertFalse(node1.isRegExp());
1419:       assertFalse(node1.isFunction());
1420:       assertFalse(node1.isArrayLit());
1421:       assertFalse(node1.isFor());
1422:       assertFalse(node1.isTry());
1423:       assertFalse(node1.isStringKey());
1424:       assertFalse(node1.isParamList());
1425:       assertFalse(node1.isDebugger());
1426:       assertFalse(node1.isGetterDef());
1427:       assertEquals(32, node1.getLineno());
1428:       assertFalse(node1.isCase());
1429:       assertFalse(node1.isBlock());
1430:       assertFalse(node1.isContinue());
1431:       assertFalse(node1.hasMoreThanOneChild());
1432:       assertFalse(node1.isThrow());
1433:       assertFalse(node1.isIf());
1434:       assertEquals(131072, node1.getSourcePosition());
1435:       assertFalse(node1.isNE());
1436:       assertFalse(node1.isSetterDef());
1437:       assertFalse(node1.isInc());
1438:       assertEquals(0, node1.getCharno());
1439:       assertFalse(node1.isIn());
1440:       assertFalse(node1.isInstanceOf());
1441:       assertFalse(node1.isAnd());
1442:       assertFalse(node1.isComma());
1443:       assertFalse(node1.isExprResult());
1444:       assertFalse(node1.isBreak());
1445:       assertFalse(node1.isThis());
1446:       assertFalse(node1.isFalse());
1447:       assertFalse(node1.isWith());
1448:       assertFalse(node1.isCast());
1449:       assertFalse(node1.hasOneChild());
1450:       assertFalse(node1.isHook());
1451:       assertFalse(node1.isLabelName());
1452:       assertFalse(node1.isSwitch());
1453:       assertFalse(node1.isScript());
1454:       assertFalse(node1.isGetProp());
1455:       assertFalse(node1.isNot());
1456:       assertFalse(node1.isObjectLit());
1457:       assertFalse(node1.isString());
1458:       assertFalse(node1.isNumber());
1459:       assertFalse(node1.isReturn());
1460:       assertFalse(node1.isAssignAdd());
1461:       assertFalse(node1.isDo());
1462:       assertFalse(node1.isWhile());
1463:       assertFalse(node1.isTypeOf());
1464:       assertFalse(node1.isDec());
1465:       assertFalse(node1.hasChildren());
1466:       assertFalse(node1.isLabel());
1467:       assertFalse(node1.isAssign());
1468:       assertFalse(node1.isVar());
1469:       assertFalse(node1.isCall());
1470:       assertFalse(node1.isGetElem());
1471:       assertFalse(node1.isName());
1472:       assertFalse(node1.isNew());
1473:       assertFalse(node1.isDelProp());
1474:       assertFalse(node1.isVoid());
1475:       assertFalse(node1.isNull());
1476:       assertFalse(node1.isTrue());
1477:       assertFalse(node1.isEmpty());
1478:       assertFalse(node1.isAdd());
1479:       assertFalse(node1.isOr());
1480:       assertFalse(node2.isThis());
1481:       assertFalse(node2.isFalse());
1482:       assertFalse(node2.isComma());
1483:       assertFalse(node2.isHook());
1484:       assertFalse(node2.isThrow());
1485:       assertFalse(node2.isGetProp());
1486:       assertEquals(46, node2.getType());
1487:       assertFalse(node2.isScript());
1488:       assertFalse(node2.isSwitch());
1489:       assertFalse(node2.isString());
1490:       assertFalse(node2.isNot());
1491:       assertFalse(node2.isObjectLit());
1492:       assertEquals((-1), node2.getCharno());
1493:       assertFalse(node2.isAnd());
1494:       assertFalse(node2.isCast());
1495:       assertFalse(node2.isLabelName());
1496:       assertFalse(node2.isNE());
1497:       assertFalse(node2.isNumber());
1498:       assertFalse(node2.isIf());
1499:       assertFalse(node2.isFor());
1500:       assertFalse(node2.isGetterDef());
1501:       assertFalse(node2.isIn());
1502:       assertFalse(node2.isCase());
1503:       assertFalse(node2.isTry());
1504:       assertFalse(node2.hasOneChild());
1505:       assertFalse(node2.isRegExp());
1506:       assertFalse(node2.isInc());
1507:       assertFalse(node2.isBlock());
1508:       assertFalse(node2.isWith());
1509:       assertFalse(node2.hasMoreThanOneChild());
1510:       assertFalse(node2.isCatch());
1511:       assertFalse(node2.isInstanceOf());
1512:       assertEquals((-1), node2.getLineno());
1513:       assertFalse(node2.isNull());
1514:       assertFalse(node2.isSetterDef());
1515:       assertFalse(node2.isParamList());
1516:       assertEquals(0, node2.getChildCount());
1517:       assertFalse(node2.isVar());
1518:       assertFalse(node2.isAdd());
1519:       assertFalse(node2.isNew());
1520:       assertFalse(node2.isDefaultCase());
1521:       assertFalse(node2.isFunction());
1522:       assertFalse(node2.isDebugger());
1523:       assertFalse(node2.isArrayLit());
1524:       assertFalse(node2.isContinue());
1525:       assertFalse(node2.isStringKey());
1526:       assertEquals((-1), node2.getSourcePosition());
1527:       assertFalse(node2.isTypeOf());
1528:       assertFalse(node2.isOr());
1529:       assertFalse(node2.isLabel());
1530:       assertFalse(node2.isAssign());
1531:       assertFalse(node2.isReturn());
1532:       assertFalse(node2.hasChildren());
1533:       assertFalse(node2.isDec());
1534:       assertFalse(node2.isAssignAdd());
1535:       assertFalse(node2.isDo());
1536:       assertFalse(node2.isEmpty());
1537:       assertFalse(node2.isTrue());
1538:       assertFalse(node2.isWhile());
1539:       assertFalse(node2.isExprResult());
1540:       assertFalse(node2.isCall());
1541:       assertFalse(node2.isName());
1542:       assertFalse(node2.isGetElem());
1543:       assertFalse(node2.isBreak());
1544:       assertFalse(node2.isDelProp());
1545:       assertFalse(node2.isVoid());
1546:       assertFalse(node3.isCatch());
1547:       assertFalse(node3.isRegExp());
1548:       assertFalse(node3.isSetterDef());
1549:       assertFalse(node3.isDefaultCase());
1550:       assertFalse(node3.isFunction());
1551:       assertFalse(node3.isTry());
1552:       assertFalse(node3.isArrayLit());
1553:       assertFalse(node3.isVar());
1554:       assertFalse(node3.isGetterDef());
1555:       assertFalse(node3.isDebugger());
1556:       assertFalse(node3.isParamList());
1557:       assertFalse(node3.isStringKey());
1558:       assertFalse(node3.isIn());
1559:       assertEquals((-1), node3.getLineno());
1560:       assertFalse(node3.isCase());
1561:       assertTrue(node3.hasChildren());
1562:       assertFalse(node3.isContinue());
1563:       assertFalse(node3.isInc());
1564:       assertFalse(node3.isBlock());
1565:       assertFalse(node3.isFor());
1566:       assertEquals(39, node3.getType());
1567:       assertFalse(node3.isHook());
1568:       assertFalse(node3.isIf());
1569:       assertFalse(node3.isNE());
1570:       assertFalse(node3.isObjectLit());
1571:       assertFalse(node3.isNot());
1572:       assertFalse(node3.isWith());
1573:       assertFalse(node3.isGetProp());
1574:       assertFalse(node3.isInstanceOf());
1575:       assertFalse(node3.isScript());
1576:       assertFalse(node3.isThis());
1577:       assertFalse(node3.isComma());
1578:       assertEquals(2, node3.getChildCount());
1579:       assertFalse(node3.isThrow());
1580:       assertFalse(node3.hasOneChild());
1581:       assertFalse(node3.isFalse());
1582:       assertFalse(node3.isCast());
1583:       assertEquals((-1), node3.getSourcePosition());
1584:       assertFalse(node3.isSwitch());
1585:       assertEquals((-1), node3.getCharno());
1586:       assertFalse(node3.isLabelName());
1587:       assertFalse(node3.isAnd());
1588:       assertTrue(node3.isNumber());
1589:       assertFalse(node3.isOr());
1590:       assertFalse(node3.isString());
1591:       assertFalse(node3.isTypeOf());
1592:       assertFalse(node3.isDo());
1593:       assertFalse(node3.isNew());
1594:       assertFalse(node3.isDec());
1595:       assertFalse(node3.isAssign());
1596:       assertFalse(node3.isLabel());
1597:       assertFalse(node3.isAssignAdd());
1598:       assertFalse(node3.isReturn());
1599:       assertFalse(node3.isWhile());
1600:       assertFalse(node3.isEmpty());
1601:       assertFalse(node3.isAdd());
1602:       assertFalse(node3.isGetElem());
1603:       assertFalse(node3.isCall());
1604:       assertFalse(node3.isExprResult());
1605:       assertFalse(node3.isNull());
1606:       assertFalse(node3.isBreak());
1607:       assertFalse(node3.isDelProp());
1608:       assertFalse(node3.isVoid());
1609:       assertTrue(node3.hasMoreThanOneChild());
1610:       assertFalse(node3.isName());
1611:       assertFalse(node3.isTrue());
1612:       assertNotNull(node3);
1613:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1614:       assertEquals(29, Node.JSDOC_INFO_PROP);
1615:       assertEquals(56, Node.CHANGE_TIME);
1616:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1617:       assertEquals(37, Node.OPT_ARG_NAME);
1618:       assertEquals(53, Node.INPUT_ID);
1619:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1620:       assertEquals(46, Node.IS_NAMESPACE);
1621:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1622:       assertEquals(36, Node.QUOTED_PROP);
1623:       assertEquals(55, Node.INFERRED_FUNCTION);
1624:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1625:       assertEquals(43, Node.IS_CONSTANT_NAME);
1626:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1627:       assertEquals(57, Node.LAST_PROP);
1628:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1629:       assertEquals(47, Node.IS_DISPATCHER);
1630:       assertEquals(2, Node.POST_FLAG);
1631:       assertEquals(30, Node.VAR_ARGS_NAME);
1632:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1633:       assertEquals(40, Node.ORIGINALNAME_PROP);
1634:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1635:       assertEquals(48, Node.DIRECTIVES);
1636:       assertEquals(39, Node.EMPTY_BLOCK);
1637:       assertEquals(54, Node.SLASH_V);
1638:       assertEquals(57, Node.REFLECTED_OBJECT);
1639:       assertEquals(52, Node.LENGTH);
1640:       assertEquals(8, Node.FLAG_NO_THROWS);
1641:       assertEquals(50, Node.FREE_CALL);
1642:       assertEquals(1, Node.DECR_FLAG);
1643:       assertEquals(12, Node.COLUMN_BITS);
1644:       assertEquals(49, Node.DIRECT_EVAL);
1645:       assertEquals(32, Node.INCRDECR_PROP);
1646:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1647:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1648:       assertEquals(4095, Node.COLUMN_MASK);
1649:       assertEquals(53, Node.INPUT_ID);
1650:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1651:       assertEquals(43, Node.IS_CONSTANT_NAME);
1652:       assertEquals(36, Node.QUOTED_PROP);
1653:       assertEquals(4095, Node.COLUMN_MASK);
1654:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1655:       assertEquals(37, Node.OPT_ARG_NAME);
1656:       assertEquals(48, Node.DIRECTIVES);
1657:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1658:       assertEquals(8, Node.FLAG_NO_THROWS);
1659:       assertEquals(56, Node.CHANGE_TIME);
1660:       assertEquals(2, Node.POST_FLAG);
1661:       assertEquals(47, Node.IS_DISPATCHER);
1662:       assertEquals(29, Node.JSDOC_INFO_PROP);
1663:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1664:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1665:       assertEquals(57, Node.LAST_PROP);
1666:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1667:       assertEquals(55, Node.INFERRED_FUNCTION);
1668:       assertEquals(39, Node.EMPTY_BLOCK);
1669:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1670:       assertEquals(54, Node.SLASH_V);
1671:       assertEquals(52, Node.LENGTH);
1672:       assertEquals(57, Node.REFLECTED_OBJECT);
1673:       assertEquals(30, Node.VAR_ARGS_NAME);
1674:       assertEquals(49, Node.DIRECT_EVAL);
1675:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1676:       assertEquals(40, Node.ORIGINALNAME_PROP);
1677:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1678:       assertEquals(12, Node.COLUMN_BITS);
1679:       assertEquals(46, Node.IS_NAMESPACE);
1680:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1681:       assertEquals(1, Node.DECR_FLAG);
1682:       assertEquals(50, Node.FREE_CALL);
1683:       assertEquals(32, Node.INCRDECR_PROP);
1684:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1685:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1686:       assertEquals(29, Node.JSDOC_INFO_PROP);
1687:       assertEquals(2, Node.POST_FLAG);
1688:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1689:       assertEquals(37, Node.OPT_ARG_NAME);
1690:       assertEquals(43, Node.IS_CONSTANT_NAME);
1691:       assertEquals(56, Node.CHANGE_TIME);
1692:       assertEquals(46, Node.IS_NAMESPACE);
1693:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1694:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1695:       assertEquals(30, Node.VAR_ARGS_NAME);
1696:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1697:       assertEquals(36, Node.QUOTED_PROP);
1698:       assertEquals(55, Node.INFERRED_FUNCTION);
1699:       assertEquals(53, Node.INPUT_ID);
1700:       assertEquals(39, Node.EMPTY_BLOCK);
1701:       assertEquals(47, Node.IS_DISPATCHER);
1702:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1703:       assertEquals(57, Node.LAST_PROP);
1704:       assertEquals(50, Node.FREE_CALL);
1705:       assertEquals(40, Node.ORIGINALNAME_PROP);
1706:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1707:       assertEquals(52, Node.LENGTH);
1708:       assertEquals(8, Node.FLAG_NO_THROWS);
1709:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1710:       assertEquals(48, Node.DIRECTIVES);
1711:       assertEquals(54, Node.SLASH_V);
1712:       assertEquals(57, Node.REFLECTED_OBJECT);
1713:       assertEquals(1, Node.DECR_FLAG);
1714:       assertEquals(49, Node.DIRECT_EVAL);
1715:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1716:       assertEquals(4095, Node.COLUMN_MASK);
1717:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1718:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1719:       assertEquals(12, Node.COLUMN_BITS);
1720:       assertEquals(32, Node.INCRDECR_PROP);
1721:       
1722:       node3.addChildBefore(node0, node2);
1723:       assertFalse(node0.equals((Object)node3));
1724:       assertFalse(node0.equals((Object)node2));
1725:       assertFalse(node0.equals((Object)node1));
1726:       assertFalse(node1.equals((Object)node0));
1727:       assertFalse(node1.equals((Object)node2));
1728:       assertFalse(node1.equals((Object)node3));
1729:       assertFalse(node2.equals((Object)node0));
1730:       assertFalse(node2.equals((Object)node3));
1731:       assertFalse(node2.equals((Object)node1));
1732:       assertFalse(node3.equals((Object)node0));
1733:       assertFalse(node3.equals((Object)node2));
1734:       assertFalse(node3.equals((Object)node1));
1735:       assertNotSame(node1, node2);
1736:       assertNotSame(node2, node1);
1737:       assertFalse(node0.isWith());
1738:       assertFalse(node0.isScript());
1739:       assertFalse(node0.isObjectLit());
1740:       assertEquals(0, node0.getCharno());
1741:       assertFalse(node0.isNot());
1742:       assertFalse(node0.isGetProp());
1743:       assertFalse(node0.hasOneChild());
1744:       assertFalse(node0.isBreak());
1745:       assertFalse(node0.hasChildren());
1746:       assertFalse(node0.isTypeOf());
1747:       assertFalse(node0.isThis());
1748:       assertFalse(node0.isOr());
1749:       assertFalse(node0.isAssign());
1750:       assertFalse(node0.isComma());
1751:       assertFalse(node0.isDec());
1752:       assertFalse(node0.isInstanceOf());
1753:       assertFalse(node0.isExprResult());
1754:       assertFalse(node0.isGetElem());
1755:       assertFalse(node0.isSwitch());
1756:       assertFalse(node0.isBlock());
1757:       assertFalse(node0.hasMoreThanOneChild());
1758:       assertEquals(39, node0.getType());
1759:       assertFalse(node0.isHook());
1760:       assertFalse(node0.isAssignAdd());
1761:       assertFalse(node0.isVar());
1762:       assertFalse(node0.isAdd());
1763:       assertFalse(node0.isDo());
1764:       assertFalse(node0.isCase());
1765:       assertFalse(node0.isNew());
1766:       assertFalse(node0.isGetterDef());
1767:       assertFalse(node0.isStringKey());
1768:       assertFalse(node0.isParamList());
1769:       assertFalse(node0.isLabel());
1770:       assertEquals(39, node0.getLineno());
1771:       assertEquals(0, node0.getChildCount());
1772:       assertFalse(node0.isLabelName());
1773:       assertFalse(node0.isArrayLit());
1774:       assertFalse(node0.isDefaultCase());
1775:       assertFalse(node0.isDebugger());
1776:       assertFalse(node0.isTrue());
1777:       assertFalse(node0.isFunction());
1778:       assertFalse(node0.isRegExp());
1779:       assertFalse(node0.isSetterDef());
1780:       assertFalse(node0.isTry());
1781:       assertFalse(node0.isIf());
1782:       assertFalse(node0.isDelProp());
1783:       assertFalse(node0.isNull());
1784:       assertFalse(node0.isFor());
1785:       assertFalse(node0.isNE());
1786:       assertFalse(node0.isEmpty());
1787:       assertFalse(node0.isCatch());
1788:       assertFalse(node0.isVoid());
1789:       assertFalse(node0.isCall());
1790:       assertFalse(node0.isName());
1791:       assertFalse(node0.isString());
1792:       assertFalse(node0.isWhile());
1793:       assertFalse(node0.isContinue());
1794:       assertFalse(node0.isIn());
1795:       assertFalse(node0.isReturn());
1796:       assertEquals(159744, node0.getSourcePosition());
1797:       assertFalse(node0.isInc());
1798:       assertTrue(node0.isNumber());
1799:       assertFalse(node0.isThrow());
1800:       assertFalse(node0.isFalse());
1801:       assertFalse(node0.isCast());
1802:       assertFalse(node0.isAnd());
1803:       assertEquals(0, node1.getChildCount());
1804:       assertFalse(node1.isCatch());
1805:       assertFalse(node1.isDefaultCase());
1806:       assertEquals(36, node1.getType());
1807:       assertFalse(node1.isRegExp());
1808:       assertFalse(node1.isFunction());
1809:       assertFalse(node1.isArrayLit());
1810:       assertFalse(node1.isFor());
1811:       assertFalse(node1.isTry());
1812:       assertFalse(node1.isStringKey());
1813:       assertFalse(node1.isParamList());
1814:       assertFalse(node1.isDebugger());
1815:       assertFalse(node1.isGetterDef());
1816:       assertEquals(32, node1.getLineno());
1817:       assertFalse(node1.isCase());
1818:       assertFalse(node1.isBlock());
1819:       assertFalse(node1.isContinue());
1820:       assertFalse(node1.hasMoreThanOneChild());
1821:       assertFalse(node1.isThrow());
1822:       assertFalse(node1.isIf());
1823:       assertEquals(131072, node1.getSourcePosition());
1824:       assertFalse(node1.isNE());
1825:       assertFalse(node1.isSetterDef());
1826:       assertFalse(node1.isInc());
1827:       assertEquals(0, node1.getCharno());
1828:       assertFalse(node1.isIn());
1829:       assertFalse(node1.isInstanceOf());
1830:       assertFalse(node1.isAnd());
1831:       assertFalse(node1.isComma());
1832:       assertFalse(node1.isExprResult());
1833:       assertFalse(node1.isBreak());
1834:       assertFalse(node1.isThis());
1835:       assertFalse(node1.isFalse());
1836:       assertFalse(node1.isWith());
1837:       assertFalse(node1.isCast());
1838:       assertFalse(node1.hasOneChild());
1839:       assertFalse(node1.isHook());
1840:       assertFalse(node1.isLabelName());
1841:       assertFalse(node1.isSwitch());
1842:       assertFalse(node1.isScript());
1843:       assertFalse(node1.isGetProp());
1844:       assertFalse(node1.isNot());
1845:       assertFalse(node1.isObjectLit());
1846:       assertFalse(node1.isString());
1847:       assertFalse(node1.isNumber());
1848:       assertFalse(node1.isReturn());
1849:       assertFalse(node1.isAssignAdd());
1850:       assertFalse(node1.isDo());
1851:       assertFalse(node1.isWhile());
1852:       assertFalse(node1.isTypeOf());
1853:       assertFalse(node1.isDec());
1854:       assertFalse(node1.hasChildren());
1855:       assertFalse(node1.isLabel());
1856:       assertFalse(node1.isAssign());
1857:       assertFalse(node1.isVar());
1858:       assertFalse(node1.isCall());
1859:       assertFalse(node1.isGetElem());
1860:       assertFalse(node1.isName());
1861:       assertFalse(node1.isNew());
1862:       assertFalse(node1.isDelProp());
1863:       assertFalse(node1.isVoid());
1864:       assertFalse(node1.isNull());
1865:       assertFalse(node1.isTrue());
1866:       assertFalse(node1.isEmpty());
1867:       assertFalse(node1.isAdd());
1868:       assertFalse(node1.isOr());
1869:       assertFalse(node2.isThis());
1870:       assertFalse(node2.isFalse());
1871:       assertFalse(node2.isComma());
1872:       assertFalse(node2.isHook());
1873:       assertFalse(node2.isThrow());
1874:       assertFalse(node2.isGetProp());
1875:       assertEquals(46, node2.getType());
1876:       assertFalse(node2.isScript());
1877:       assertFalse(node2.isSwitch());
1878:       assertFalse(node2.isString());
1879:       assertFalse(node2.isNot());
1880:       assertFalse(node2.isObjectLit());
1881:       assertEquals((-1), node2.getCharno());
1882:       assertFalse(node2.isAnd());
1883:       assertFalse(node2.isCast());
1884:       assertFalse(node2.isLabelName());
1885:       assertFalse(node2.isNE());
1886:       assertFalse(node2.isNumber());
1887:       assertFalse(node2.isIf());
1888:       assertFalse(node2.isFor());
1889:       assertFalse(node2.isGetterDef());
1890:       assertFalse(node2.isIn());
1891:       assertFalse(node2.isCase());
1892:       assertFalse(node2.isTry());
1893:       assertFalse(node2.hasOneChild());
1894:       assertFalse(node2.isRegExp());
1895:       assertFalse(node2.isInc());
1896:       assertFalse(node2.isBlock());
1897:       assertFalse(node2.isWith());
1898:       assertFalse(node2.hasMoreThanOneChild());
1899:       assertFalse(node2.isCatch());
1900:       assertFalse(node2.isInstanceOf());
1901:       assertEquals((-1), node2.getLineno());
1902:       assertFalse(node2.isNull());
1903:       assertFalse(node2.isSetterDef());
1904:       assertFalse(node2.isParamList());
1905:       assertEquals(0, node2.getChildCount());
1906:       assertFalse(node2.isVar());
1907:       assertFalse(node2.isAdd());
1908:       assertFalse(node2.isNew());
1909:       assertFalse(node2.isDefaultCase());
1910:       assertFalse(node2.isFunction());
1911:       assertFalse(node2.isDebugger());
1912:       assertFalse(node2.isArrayLit());
1913:       assertFalse(node2.isContinue());
1914:       assertFalse(node2.isStringKey());
1915:       assertEquals((-1), node2.getSourcePosition());
1916:       assertFalse(node2.isTypeOf());
1917:       assertFalse(node2.isOr());
1918:       assertFalse(node2.isLabel());
1919:       assertFalse(node2.isAssign());
1920:       assertFalse(node2.isReturn());
1921:       assertFalse(node2.hasChildren());
1922:       assertFalse(node2.isDec());
1923:       assertFalse(node2.isAssignAdd());
1924:       assertFalse(node2.isDo());
1925:       assertFalse(node2.isEmpty());
1926:       assertFalse(node2.isTrue());
1927:       assertFalse(node2.isWhile());
1928:       assertFalse(node2.isExprResult());
1929:       assertFalse(node2.isCall());
1930:       assertFalse(node2.isName());
1931:       assertFalse(node2.isGetElem());
1932:       assertFalse(node2.isBreak());
1933:       assertFalse(node2.isDelProp());
1934:       assertFalse(node2.isVoid());
1935:       assertFalse(node3.isCatch());
1936:       assertFalse(node3.isRegExp());
1937:       assertFalse(node3.isSetterDef());
1938:       assertFalse(node3.isDefaultCase());
1939:       assertFalse(node3.isFunction());
1940:       assertFalse(node3.isTry());
1941:       assertFalse(node3.isArrayLit());
1942:       assertFalse(node3.isVar());
1943:       assertFalse(node3.isGetterDef());
1944:       assertFalse(node3.isDebugger());
1945:       assertFalse(node3.isParamList());
1946:       assertFalse(node3.isStringKey());
1947:       assertFalse(node3.isIn());
1948:       assertEquals((-1), node3.getLineno());
1949:       assertFalse(node3.isCase());
1950:       assertTrue(node3.hasChildren());
1951:       assertFalse(node3.isContinue());
1952:       assertFalse(node3.isInc());
1953:       assertFalse(node3.isBlock());
1954:       assertFalse(node3.isFor());
1955:       assertEquals(39, node3.getType());
1956:       assertFalse(node3.isHook());
1957:       assertFalse(node3.isIf());
1958:       assertFalse(node3.isNE());
1959:       assertFalse(node3.isObjectLit());
1960:       assertFalse(node3.isNot());
1961:       assertFalse(node3.isWith());
1962:       assertFalse(node3.isGetProp());
1963:       assertFalse(node3.isInstanceOf());
1964:       assertFalse(node3.isScript());
1965:       assertFalse(node3.isThis());
1966:       assertFalse(node3.isComma());
1967:       assertFalse(node3.isThrow());
1968:       assertFalse(node3.hasOneChild());
1969:       assertFalse(node3.isFalse());
1970:       assertFalse(node3.isCast());
1971:       assertEquals((-1), node3.getSourcePosition());
1972:       assertFalse(node3.isSwitch());
1973:       assertEquals((-1), node3.getCharno());
1974:       assertFalse(node3.isLabelName());
1975:       assertFalse(node3.isAnd());
1976:       assertTrue(node3.isNumber());
1977:       assertFalse(node3.isOr());
1978:       assertFalse(node3.isString());
1979:       assertFalse(node3.isTypeOf());
1980:       assertFalse(node3.isDo());
1981:       assertFalse(node3.isNew());
1982:       assertFalse(node3.isDec());
1983:       assertFalse(node3.isAssign());
1984:       assertEquals(3, node3.getChildCount());
1985:       assertFalse(node3.isLabel());
1986:       assertFalse(node3.isAssignAdd());
1987:       assertFalse(node3.isReturn());
1988:       assertFalse(node3.isWhile());
1989:       assertFalse(node3.isEmpty());
1990:       assertFalse(node3.isAdd());
1991:       assertFalse(node3.isGetElem());
1992:       assertFalse(node3.isCall());
1993:       assertFalse(node3.isExprResult());
1994:       assertFalse(node3.isNull());
1995:       assertFalse(node3.isBreak());
1996:       assertFalse(node3.isDelProp());
1997:       assertFalse(node3.isVoid());
1998:       assertTrue(node3.hasMoreThanOneChild());
1999:       assertFalse(node3.isName());
2000:       assertFalse(node3.isTrue());
2001:       assertEquals(37, Node.OPT_ARG_NAME);
2002:       assertEquals(2, Node.POST_FLAG);
2003:       assertEquals(56, Node.CHANGE_TIME);
2004:       assertEquals(46, Node.IS_NAMESPACE);
2005:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2006:       assertEquals(12, Node.COLUMN_BITS);
2007:       assertEquals(47, Node.IS_DISPATCHER);
2008:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2009:       assertEquals(49, Node.DIRECT_EVAL);
2010:       assertEquals(54, Node.SLASH_V);
2011:       assertEquals(43, Node.IS_CONSTANT_NAME);
2012:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2013:       assertEquals(1, Node.DECR_FLAG);
2014:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2015:       assertEquals(32, Node.INCRDECR_PROP);
2016:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2017:       assertEquals(8, Node.FLAG_NO_THROWS);
2018:       assertEquals(48, Node.DIRECTIVES);
2019:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2020:       assertEquals(50, Node.FREE_CALL);
2021:       assertEquals(40, Node.ORIGINALNAME_PROP);
2022:       assertEquals(4095, Node.COLUMN_MASK);
2023:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2024:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2025:       assertEquals(52, Node.LENGTH);
2026:       assertEquals(57, Node.LAST_PROP);
2027:       assertEquals(30, Node.VAR_ARGS_NAME);
2028:       assertEquals(36, Node.QUOTED_PROP);
2029:       assertEquals(57, Node.REFLECTED_OBJECT);
2030:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2031:       assertEquals(55, Node.INFERRED_FUNCTION);
2032:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2033:       assertEquals(29, Node.JSDOC_INFO_PROP);
2034:       assertEquals(53, Node.INPUT_ID);
2035:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2036:       assertEquals(39, Node.EMPTY_BLOCK);
2037:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2038:       assertEquals(29, Node.JSDOC_INFO_PROP);
2039:       assertEquals(56, Node.CHANGE_TIME);
2040:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2041:       assertEquals(37, Node.OPT_ARG_NAME);
2042:       assertEquals(53, Node.INPUT_ID);
2043:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2044:       assertEquals(46, Node.IS_NAMESPACE);
2045:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2046:       assertEquals(36, Node.QUOTED_PROP);
2047:       assertEquals(55, Node.INFERRED_FUNCTION);
2048:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2049:       assertEquals(43, Node.IS_CONSTANT_NAME);
2050:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2051:       assertEquals(57, Node.LAST_PROP);
2052:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2053:       assertEquals(47, Node.IS_DISPATCHER);
2054:       assertEquals(2, Node.POST_FLAG);
2055:       assertEquals(30, Node.VAR_ARGS_NAME);
2056:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2057:       assertEquals(40, Node.ORIGINALNAME_PROP);
2058:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2059:       assertEquals(48, Node.DIRECTIVES);
2060:       assertEquals(39, Node.EMPTY_BLOCK);
2061:       assertEquals(54, Node.SLASH_V);
2062:       assertEquals(57, Node.REFLECTED_OBJECT);
2063:       assertEquals(52, Node.LENGTH);
2064:       assertEquals(8, Node.FLAG_NO_THROWS);
2065:       assertEquals(50, Node.FREE_CALL);
2066:       assertEquals(1, Node.DECR_FLAG);
2067:       assertEquals(12, Node.COLUMN_BITS);
2068:       assertEquals(49, Node.DIRECT_EVAL);
2069:       assertEquals(32, Node.INCRDECR_PROP);
2070:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2071:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2072:       assertEquals(4095, Node.COLUMN_MASK);
2073:       assertEquals(53, Node.INPUT_ID);
2074:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2075:       assertEquals(43, Node.IS_CONSTANT_NAME);
2076:       assertEquals(36, Node.QUOTED_PROP);
2077:       assertEquals(4095, Node.COLUMN_MASK);
2078:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2079:       assertEquals(37, Node.OPT_ARG_NAME);
2080:       assertEquals(48, Node.DIRECTIVES);
2081:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2082:       assertEquals(8, Node.FLAG_NO_THROWS);
2083:       assertEquals(56, Node.CHANGE_TIME);
2084:       assertEquals(2, Node.POST_FLAG);
2085:       assertEquals(47, Node.IS_DISPATCHER);
2086:       assertEquals(29, Node.JSDOC_INFO_PROP);
2087:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2088:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2089:       assertEquals(57, Node.LAST_PROP);
2090:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2091:       assertEquals(55, Node.INFERRED_FUNCTION);
2092:       assertEquals(39, Node.EMPTY_BLOCK);
2093:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2094:       
2095:       boolean boolean2 = node1.isUnscopedQualifiedName();
2096:       assertFalse(node1.equals((Object)node0));
2097:       assertFalse(node1.equals((Object)node2));
2098:       assertFalse(node1.equals((Object)node3));
2099:       assertTrue(boolean2 == boolean0);
2100:       assertTrue(boolean2 == boolean1);
2101:       assertNotSame(node1, node2);
2102:       assertEquals(0, node1.getChildCount());
2103:       assertFalse(node1.isCatch());
2104:       assertFalse(node1.isDefaultCase());
2105:       assertEquals(36, node1.getType());
2106:       assertFalse(node1.isRegExp());
2107:       assertFalse(node1.isFunction());
2108:       assertFalse(node1.isArrayLit());
2109:       assertFalse(node1.isFor());
2110:       assertFalse(node1.isTry());
2111:       assertFalse(node1.isStringKey());
2112:       assertFalse(node1.isParamList());
2113:       assertFalse(node1.isDebugger());
2114:       assertFalse(node1.isGetterDef());
2115:       assertEquals(32, node1.getLineno());
2116:       assertFalse(node1.isCase());
2117:       assertFalse(node1.isBlock());
2118:       assertFalse(node1.isContinue());
2119:       assertFalse(node1.hasMoreThanOneChild());
2120:       assertFalse(node1.isThrow());
2121:       assertFalse(node1.isIf());
2122:       assertEquals(131072, node1.getSourcePosition());
2123:       assertFalse(node1.isNE());
2124:       assertFalse(node1.isSetterDef());
2125:       assertFalse(node1.isInc());
2126:       assertEquals(0, node1.getCharno());
2127:       assertFalse(node1.isIn());
2128:       assertFalse(node1.isInstanceOf());
2129:       assertFalse(node1.isAnd());
2130:       assertFalse(node1.isComma());
2131:       assertFalse(node1.isExprResult());
2132:       assertFalse(node1.isBreak());
2133:       assertFalse(node1.isThis());
2134:       assertFalse(node1.isFalse());
2135:       assertFalse(node1.isWith());
2136:       assertFalse(node1.isCast());
2137:       assertFalse(node1.hasOneChild());
2138:       assertFalse(node1.isHook());
2139:       assertFalse(node1.isLabelName());
2140:       assertFalse(node1.isSwitch());
2141:       assertFalse(node1.isScript());
2142:       assertFalse(node1.isGetProp());
2143:       assertFalse(node1.isNot());
2144:       assertFalse(node1.isObjectLit());
2145:       assertFalse(node1.isString());
2146:       assertFalse(node1.isNumber());
2147:       assertFalse(node1.isReturn());
2148:       assertFalse(node1.isAssignAdd());
2149:       assertFalse(node1.isDo());
2150:       assertFalse(node1.isWhile());
2151:       assertFalse(node1.isTypeOf());
2152:       assertFalse(node1.isDec());
2153:       assertFalse(node1.hasChildren());
2154:       assertFalse(node1.isLabel());
2155:       assertFalse(node1.isAssign());
2156:       assertFalse(node1.isVar());
2157:       assertFalse(node1.isCall());
2158:       assertFalse(node1.isGetElem());
2159:       assertFalse(node1.isName());
2160:       assertFalse(node1.isNew());
2161:       assertFalse(node1.isDelProp());
2162:       assertFalse(node1.isVoid());
2163:       assertFalse(node1.isNull());
2164:       assertFalse(node1.isTrue());
2165:       assertFalse(node1.isEmpty());
2166:       assertFalse(node1.isAdd());
2167:       assertFalse(node1.isOr());
2168:       assertFalse(boolean2);
2169:       
2170:       boolean boolean3 = node0.isDelProp();
2171:       assertFalse(node0.equals((Object)node3));
2172:       assertFalse(node0.equals((Object)node2));
2173:       assertFalse(node0.equals((Object)node1));
2174:       assertTrue(boolean3 == boolean1);
2175:       assertTrue(boolean3 == boolean2);
2176:       assertTrue(boolean3 == boolean0);
2177:       assertFalse(node0.isWith());
2178:       assertFalse(node0.isScript());
2179:       assertFalse(node0.isObjectLit());
2180:       assertEquals(0, node0.getCharno());
2181:       assertFalse(node0.isNot());
2182:       assertFalse(node0.isGetProp());
2183:       assertFalse(node0.hasOneChild());
2184:       assertFalse(node0.isBreak());
2185:       assertFalse(node0.hasChildren());
2186:       assertFalse(node0.isTypeOf());
2187:       assertFalse(node0.isThis());
2188:       assertFalse(node0.isOr());
2189:       assertFalse(node0.isAssign());
2190:       assertFalse(node0.isComma());
2191:       assertFalse(node0.isDec());
2192:       assertFalse(node0.isInstanceOf());
2193:       assertFalse(node0.isExprResult());
2194:       assertFalse(node0.isGetElem());
2195:       assertFalse(node0.isSwitch());
2196:       assertFalse(node0.isBlock());
2197:       assertFalse(node0.hasMoreThanOneChild());
2198:       assertEquals(39, node0.getType());
2199:       assertFalse(node0.isHook());
2200:       assertFalse(node0.isAssignAdd());
2201:       assertFalse(node0.isVar());
2202:       assertFalse(node0.isAdd());
2203:       assertFalse(node0.isDo());
2204:       assertFalse(node0.isCase());
2205:       assertFalse(node0.isNew());
2206:       assertFalse(node0.isGetterDef());
2207:       assertFalse(node0.isStringKey());
2208:       assertFalse(node0.isParamList());
2209:       assertFalse(node0.isLabel());
2210:       assertEquals(39, node0.getLineno());
2211:       assertEquals(0, node0.getChildCount());
2212:       assertFalse(node0.isLabelName());
2213:       assertFalse(node0.isArrayLit());
2214:       assertFalse(node0.isDefaultCase());
2215:       assertFalse(node0.isDebugger());
2216:       assertFalse(node0.isTrue());
2217:       assertFalse(node0.isFunction());
2218:       assertFalse(node0.isRegExp());
2219:       assertFalse(node0.isSetterDef());
2220:       assertFalse(node0.isTry());
2221:       assertFalse(node0.isIf());
2222:       assertFalse(node0.isDelProp());
2223:       assertFalse(node0.isNull());
2224:       assertFalse(node0.isFor());
2225:       assertFalse(node0.isNE());
2226:       assertFalse(node0.isEmpty());
2227:       assertFalse(node0.isCatch());
2228:       assertFalse(node0.isVoid());
2229:       assertFalse(node0.isCall());
2230:       assertFalse(node0.isName());
2231:       assertFalse(node0.isString());
2232:       assertFalse(node0.isWhile());
2233:       assertFalse(node0.isContinue());
2234:       assertFalse(node0.isIn());
2235:       assertFalse(node0.isReturn());
2236:       assertEquals(159744, node0.getSourcePosition());
2237:       assertFalse(node0.isInc());
2238:       assertTrue(node0.isNumber());
2239:       assertFalse(node0.isThrow());
2240:       assertFalse(node0.isFalse());
2241:       assertFalse(node0.isCast());
2242:       assertFalse(node0.isAnd());
2243:       assertFalse(boolean3);
2244:       
2245:       Node node4 = node2.getParent();
2246:       assertFalse(node2.equals((Object)node0));
2247:       assertFalse(node2.equals((Object)node3));
2248:       assertFalse(node2.equals((Object)node1));
2249:       assertFalse(node4.equals((Object)node0));
2250:       assertFalse(node4.equals((Object)node2));
2251:       assertFalse(node4.equals((Object)node1));
2252:       assertNotSame(node2, node1);
2253:       assertSame(node4, node3);
2254:       assertFalse(node2.isThis());
2255:       assertFalse(node2.isFalse());
2256:       assertFalse(node2.isComma());
2257:       assertFalse(node2.isHook());
2258:       assertFalse(node2.isThrow());
2259:       assertFalse(node2.isGetProp());
2260:       assertEquals(46, node2.getType());
2261:       assertFalse(node2.isScript());
2262:       assertFalse(node2.isSwitch());
2263:       assertFalse(node2.isString());
2264:       assertFalse(node2.isNot());
2265:       assertFalse(node2.isObjectLit());
2266:       assertEquals((-1), node2.getCharno());
2267:       assertFalse(node2.isAnd());
2268:       assertFalse(node2.isCast());
2269:       assertFalse(node2.isLabelName());
2270:       assertFalse(node2.isNE());
2271:       assertFalse(node2.isNumber());
2272:       assertFalse(node2.isIf());
2273:       assertFalse(node2.isFor());
2274:       assertFalse(node2.isGetterDef());
2275:       assertFalse(node2.isIn());
2276:       assertFalse(node2.isCase());
2277:       assertFalse(node2.isTry());
2278:       assertFalse(node2.hasOneChild());
2279:       assertFalse(node2.isRegExp());
2280:       assertFalse(node2.isInc());
2281:       assertFalse(node2.isBlock());
2282:       assertFalse(node2.isWith());
2283:       assertFalse(node2.hasMoreThanOneChild());
2284:       assertFalse(node2.isCatch());
2285:       assertFalse(node2.isInstanceOf());
2286:       assertEquals((-1), node2.getLineno());
2287:       assertFalse(node2.isNull());
2288:       assertFalse(node2.isSetterDef());
2289:       assertFalse(node2.isParamList());
2290:       assertEquals(0, node2.getChildCount());
2291:       assertFalse(node2.isVar());
2292:       assertFalse(node2.isAdd());
2293:       assertFalse(node2.isNew());
2294:       assertFalse(node2.isDefaultCase());
2295:       assertFalse(node2.isFunction());
2296:       assertFalse(node2.isDebugger());
2297:       assertFalse(node2.isArrayLit());
2298:       assertFalse(node2.isContinue());
2299:       assertFalse(node2.isStringKey());
2300:       assertEquals((-1), node2.getSourcePosition());
2301:       assertFalse(node2.isTypeOf());
2302:       assertFalse(node2.isOr());
2303:       assertFalse(node2.isLabel());
2304:       assertFalse(node2.isAssign());
2305:       assertFalse(node2.isReturn());
2306:       assertFalse(node2.hasChildren());
2307:       assertFalse(node2.isDec());
2308:       assertFalse(node2.isAssignAdd());
2309:       assertFalse(node2.isDo());
2310:       assertFalse(node2.isEmpty());
2311:       assertFalse(node2.isTrue());
2312:       assertFalse(node2.isWhile());
2313:       assertFalse(node2.isExprResult());
2314:       assertFalse(node2.isCall());
2315:       assertFalse(node2.isName());
2316:       assertFalse(node2.isGetElem());
2317:       assertFalse(node2.isBreak());
2318:       assertFalse(node2.isDelProp());
2319:       assertFalse(node2.isVoid());
2320:       assertEquals((-1), node4.getSourcePosition());
2321:       assertFalse(node4.isTypeOf());
2322:       assertFalse(node4.isLabelName());
2323:       assertFalse(node4.isDec());
2324:       assertFalse(node4.isAssign());
2325:       assertFalse(node4.isGetElem());
2326:       assertFalse(node4.isCast());
2327:       assertFalse(node4.isReturn());
2328:       assertFalse(node4.isLabel());
2329:       assertFalse(node4.isAssignAdd());
2330:       assertFalse(node4.hasOneChild());
2331:       assertEquals(3, node4.getChildCount());
2332:       assertEquals(39, node4.getType());
2333:       assertFalse(node4.isWith());
2334:       assertFalse(node4.isDo());
2335:       assertFalse(node4.isExprResult());
2336:       assertFalse(node4.isInstanceOf());
2337:       assertFalse(node4.isAdd());
2338:       assertEquals((-1), node4.getLineno());
2339:       assertFalse(node4.isOr());
2340:       assertFalse(node4.isNew());
2341:       assertFalse(node4.isThis());
2342:       assertFalse(node4.isHook());
2343:       assertFalse(node4.isBlock());
2344:       assertFalse(node4.isVar());
2345:       assertFalse(node4.isCase());
2346:       assertFalse(node4.isScript());
2347:       assertFalse(node4.isArrayLit());
2348:       assertFalse(node4.isParamList());
2349:       assertEquals((-1), node4.getCharno());
2350:       assertFalse(node4.isSwitch());
2351:       assertFalse(node4.isStringKey());
2352:       assertFalse(node4.isDelProp());
2353:       assertFalse(node4.isIf());
2354:       assertFalse(node4.isGetterDef());
2355:       assertFalse(node4.isEmpty());
2356:       assertTrue(node4.hasChildren());
2357:       assertTrue(node4.isNumber());
2358:       assertFalse(node4.isTry());
2359:       assertFalse(node4.isFor());
2360:       assertFalse(node4.isDefaultCase());
2361:       assertFalse(node4.isRegExp());
2362:       assertTrue(node4.hasMoreThanOneChild());
2363:       assertFalse(node4.isInc());
2364:       assertFalse(node4.isCatch());
2365:       assertFalse(node4.isIn());
2366:       assertFalse(node4.isVoid());
2367:       assertFalse(node4.isTrue());
2368:       assertFalse(node4.isNull());
2369:       assertFalse(node4.isNE());
2370:       assertFalse(node4.isBreak());
2371:       assertFalse(node4.isFalse());
2372:       assertFalse(node4.isName());
2373:       assertFalse(node4.isCall());
2374:       assertFalse(node4.isSetterDef());
2375:       assertFalse(node4.isGetProp());
2376:       assertFalse(node4.isComma());
2377:       assertFalse(node4.isThrow());
2378:       assertFalse(node4.isString());
2379:       assertFalse(node4.isWhile());
2380:       assertFalse(node4.isNot());
2381:       assertFalse(node4.isObjectLit());
2382:       assertFalse(node4.isFunction());
2383:       assertFalse(node4.isContinue());
2384:       assertFalse(node4.isAnd());
2385:       assertFalse(node4.isDebugger());
2386:       assertNotNull(node4);
2387:       
2388:       int int1 = node2.getChildCount();
2389:       assertFalse(int1 == int0);
2390:       assertFalse(node2.equals((Object)node0));
2391:       assertFalse(node2.equals((Object)node4));
2392:       assertFalse(node2.equals((Object)node3));
2393:       assertFalse(node2.equals((Object)node1));
2394:       assertNotSame(node2, node1);
2395:       assertFalse(node2.isThis());
2396:       assertFalse(node2.isFalse());
2397:       assertFalse(node2.isComma());
2398:       assertFalse(node2.isHook());
2399:       assertFalse(node2.isThrow());
2400:       assertFalse(node2.isGetProp());
2401:       assertEquals(46, node2.getType());
2402:       assertFalse(node2.isScript());
2403:       assertFalse(node2.isSwitch());
2404:       assertFalse(node2.isString());
2405:       assertFalse(node2.isNot());
2406:       assertFalse(node2.isObjectLit());
2407:       assertEquals((-1), node2.getCharno());
2408:       assertFalse(node2.isAnd());
2409:       assertFalse(node2.isCast());
2410:       assertFalse(node2.isLabelName());
2411:       assertFalse(node2.isNE());
2412:       assertFalse(node2.isNumber());
2413:       assertFalse(node2.isIf());
2414:       assertFalse(node2.isFor());
2415:       assertFalse(node2.isGetterDef());
2416:       assertFalse(node2.isIn());
2417:       assertFalse(node2.isCase());
2418:       assertFalse(node2.isTry());
2419:       assertFalse(node2.hasOneChild());
2420:       assertFalse(node2.isRegExp());
2421:       assertFalse(node2.isInc());
2422:       assertFalse(node2.isBlock());
2423:       assertFalse(node2.isWith());
2424:       assertFalse(node2.hasMoreThanOneChild());
2425:       assertFalse(node2.isCatch());
2426:       assertFalse(node2.isInstanceOf());
2427:       assertEquals((-1), node2.getLineno());
2428:       assertFalse(node2.isNull());
2429:       assertFalse(node2.isSetterDef());
2430:       assertFalse(node2.isParamList());
2431:       assertEquals(0, node2.getChildCount());
2432:       assertFalse(node2.isVar());
2433:       assertFalse(node2.isAdd());
2434:       assertFalse(node2.isNew());
2435:       assertFalse(node2.isDefaultCase());
2436:       assertFalse(node2.isFunction());
2437:       assertFalse(node2.isDebugger());
2438:       assertFalse(node2.isArrayLit());
2439:       assertFalse(node2.isContinue());
2440:       assertFalse(node2.isStringKey());
2441:       assertEquals((-1), node2.getSourcePosition());
2442:       assertFalse(node2.isTypeOf());
2443:       assertFalse(node2.isOr());
2444:       assertFalse(node2.isLabel());
2445:       assertFalse(node2.isAssign());
2446:       assertFalse(node2.isReturn());
2447:       assertFalse(node2.hasChildren());
2448:       assertFalse(node2.isDec());
2449:       assertFalse(node2.isAssignAdd());
2450:       assertFalse(node2.isDo());
2451:       assertFalse(node2.isEmpty());
2452:       assertFalse(node2.isTrue());
2453:       assertFalse(node2.isWhile());
2454:       assertFalse(node2.isExprResult());
2455:       assertFalse(node2.isCall());
2456:       assertFalse(node2.isName());
2457:       assertFalse(node2.isGetElem());
2458:       assertFalse(node2.isBreak());
2459:       assertFalse(node2.isDelProp());
2460:       assertFalse(node2.isVoid());
2461:       assertEquals(0, int1);
2462:       
2463:       Iterable<Node> iterable1 = node1.siblings();
2464:       assertFalse(iterable1.equals((Object)iterable0));
2465:       assertFalse(node1.equals((Object)node0));
2466:       assertFalse(node1.equals((Object)node4));
2467:       assertFalse(node1.equals((Object)node2));
2468:       assertFalse(node1.equals((Object)node3));
2469:       assertNotSame(node1, node2);
2470:       assertEquals(0, node1.getChildCount());
2471:       assertFalse(node1.isCatch());
2472:       assertFalse(node1.isDefaultCase());
2473:       assertEquals(36, node1.getType());
2474:       assertFalse(node1.isRegExp());
2475:       assertFalse(node1.isFunction());
2476:       assertFalse(node1.isArrayLit());
2477:       assertFalse(node1.isFor());
2478:       assertFalse(node1.isTry());
2479:       assertFalse(node1.isStringKey());
2480:       assertFalse(node1.isParamList());
2481:       assertFalse(node1.isDebugger());
2482:       assertFalse(node1.isGetterDef());
2483:       assertEquals(32, node1.getLineno());
2484:       assertFalse(node1.isCase());
2485:       assertFalse(node1.isBlock());
2486:       assertFalse(node1.isContinue());
2487:       assertFalse(node1.hasMoreThanOneChild());
2488:       assertFalse(node1.isThrow());
2489:       assertFalse(node1.isIf());
2490:       assertEquals(131072, node1.getSourcePosition());
2491:       assertFalse(node1.isNE());
2492:       assertFalse(node1.isSetterDef());
2493:       assertFalse(node1.isInc());
2494:       assertEquals(0, node1.getCharno());
2495:       assertFalse(node1.isIn());
2496:       assertFalse(node1.isInstanceOf());
2497:       assertFalse(node1.isAnd());
2498:       assertFalse(node1.isComma());
2499:       assertFalse(node1.isExprResult());
2500:       assertFalse(node1.isBreak());
2501:       assertFalse(node1.isThis());
2502:       assertFalse(node1.isFalse());
2503:       assertFalse(node1.isWith());
2504:       assertFalse(node1.isCast());
2505:       assertFalse(node1.hasOneChild());
2506:       assertFalse(node1.isHook());
2507:       assertFalse(node1.isLabelName());
2508:       assertFalse(node1.isSwitch());
2509:       assertFalse(node1.isScript());
2510:       assertFalse(node1.isGetProp());
2511:       assertFalse(node1.isNot());
2512:       assertFalse(node1.isObjectLit());
2513:       assertFalse(node1.isString());
2514:       assertFalse(node1.isNumber());
2515:       assertFalse(node1.isReturn());
2516:       assertFalse(node1.isAssignAdd());
2517:       assertFalse(node1.isDo());
2518:       assertFalse(node1.isWhile());
2519:       assertFalse(node1.isTypeOf());
2520:       assertFalse(node1.isDec());
2521:       assertFalse(node1.hasChildren());
2522:       assertFalse(node1.isLabel());
2523:       assertFalse(node1.isAssign());
2524:       assertFalse(node1.isVar());
2525:       assertFalse(node1.isCall());
2526:       assertFalse(node1.isGetElem());
2527:       assertFalse(node1.isName());
2528:       assertFalse(node1.isNew());
2529:       assertFalse(node1.isDelProp());
2530:       assertFalse(node1.isVoid());
2531:       assertFalse(node1.isNull());
2532:       assertFalse(node1.isTrue());
2533:       assertFalse(node1.isEmpty());
2534:       assertFalse(node1.isAdd());
2535:       assertFalse(node1.isOr());
2536:       assertNotNull(iterable1);
2537:   }
2538: }
RegularFileObject[/tmp/EvoSuite_182_1628161394645/com/google/javascript/rhino/Node_182_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:15 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_182_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_182_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_182_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:03:15.348 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertNotNull(node0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

Node node1 = Node.newString(36, "UNKNOWN", 32, 0);
assertFalse(node1.equals((Object)node0));
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertNotNull(node1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Object object0 = node1.getProp(0);
assertFalse(node1.equals((Object)node0));
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertNull(object0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Node node2 = Node.newString(46, "UNKNOWN");
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertEquals(46, node2.getType());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isArrayLit());
assertFalse(node2.isContinue());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertNotNull(node2);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean0 = node1.isNull();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(boolean0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

node0.setLineno(39);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(39, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

node0.putProp(4095, (Object) null);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(39, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

int int0 = node0.getIndexOfChild(node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(39, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), int0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(39, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean1 = node2.isIn();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertNotSame(node2, node1);
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertEquals(46, node2.getType());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isArrayLit());
assertFalse(node2.isContinue());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(39, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertEquals(46, node2.getType());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isArrayLit());
assertFalse(node2.isContinue());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertNotNull(node_NodeMismatch0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node node3 = new Node(39, node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertEquals(46, node2.getType());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isArrayLit());
assertFalse(node2.isContinue());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isTry());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isIn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCase());
assertTrue(node3.hasChildren());
assertFalse(node3.isContinue());
assertFalse(node3.isInc());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertEquals(39, node3.getType());
assertFalse(node3.isHook());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isGetProp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isThrow());
assertFalse(node3.hasOneChild());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isLabelName());
assertFalse(node3.isAnd());
assertTrue(node3.isNumber());
assertFalse(node3.isOr());
assertFalse(node3.isString());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isEmpty());
assertFalse(node3.isAdd());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());
assertFalse(node3.isNull());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isName());
assertFalse(node3.isTrue());
assertNotNull(node3);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

node3.addChildBefore(node0, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(39, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertEquals(46, node2.getType());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isArrayLit());
assertFalse(node2.isContinue());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isTry());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isIn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isCase());
assertTrue(node3.hasChildren());
assertFalse(node3.isContinue());
assertFalse(node3.isInc());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertEquals(39, node3.getType());
assertFalse(node3.isHook());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isGetProp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isThrow());
assertFalse(node3.hasOneChild());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isLabelName());
assertFalse(node3.isAnd());
assertTrue(node3.isNumber());
assertFalse(node3.isOr());
assertFalse(node3.isString());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isReturn());
assertFalse(node3.isWhile());
assertFalse(node3.isEmpty());
assertFalse(node3.isAdd());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());
assertFalse(node3.isNull());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isName());
assertFalse(node3.isTrue());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean2 = node1.isUnscopedQualifiedName();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertNotSame(node1, node2);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(boolean2);

boolean boolean3 = node0.isDelProp();
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isGetterDef());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isLabel());
assertEquals(39, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(boolean3);

Node node4 = node2.getParent();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertNotSame(node2, node1);
assertSame(node4, node3);
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertEquals(46, node2.getType());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isArrayLit());
assertFalse(node2.isContinue());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isTypeOf());
assertFalse(node4.isLabelName());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertFalse(node4.isGetElem());
assertFalse(node4.isCast());
assertFalse(node4.isReturn());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.hasOneChild());
assertEquals(3, node4.getChildCount());
assertEquals(39, node4.getType());
assertFalse(node4.isWith());
assertFalse(node4.isDo());
assertFalse(node4.isExprResult());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isAdd());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isOr());
assertFalse(node4.isNew());
assertFalse(node4.isThis());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node4.isVar());
assertFalse(node4.isCase());
assertFalse(node4.isScript());
assertFalse(node4.isArrayLit());
assertFalse(node4.isParamList());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isSwitch());
assertFalse(node4.isStringKey());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isGetterDef());
assertFalse(node4.isEmpty());
assertTrue(node4.hasChildren());
assertTrue(node4.isNumber());
assertFalse(node4.isTry());
assertFalse(node4.isFor());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isRegExp());
assertTrue(node4.hasMoreThanOneChild());
assertFalse(node4.isInc());
assertFalse(node4.isCatch());
assertFalse(node4.isIn());
assertFalse(node4.isVoid());
assertFalse(node4.isTrue());
assertFalse(node4.isNull());
assertFalse(node4.isNE());
assertFalse(node4.isBreak());
assertFalse(node4.isFalse());
assertFalse(node4.isName());
assertFalse(node4.isCall());
assertFalse(node4.isSetterDef());
assertFalse(node4.isGetProp());
assertFalse(node4.isComma());
assertFalse(node4.isThrow());
assertFalse(node4.isString());
assertFalse(node4.isWhile());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isFunction());
assertFalse(node4.isContinue());
assertFalse(node4.isAnd());
assertFalse(node4.isDebugger());
assertNotNull(node4);

int int1 = node2.getChildCount();
assertFalse(int1 == int0);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertFalse(node2.isThis());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertEquals(46, node2.getType());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isArrayLit());
assertFalse(node2.isContinue());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertEquals(0, int1);

Iterable<Node> iterable1 = node1.siblings();
assertFalse(iterable1.equals((Object)iterable0));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertNotSame(node1, node2);
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isDefaultCase());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNew());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertNotNull(iterable1);


[MASTER] 11:03:15.818 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_185_1628161395488/com/google/javascript/rhino/Node_185_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_185_1628161395488/com/google/javascript/rhino/Node_185_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:15.818 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:15.818 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:15.818 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1458
[MASTER] 11:03:15.819 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_185_1628161395488/com/google/javascript/rhino/Node_185_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:15 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_185_tmp__ESTest extends Node_185_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(1.0);
22:       assertFalse(node0.isCase());
23:       assertFalse(node0.isString());
24:       assertFalse(node0.isInc());
25:       assertTrue(node0.isNumber());
26:       assertFalse(node0.isThrow());
27:       assertFalse(node0.isHook());
28:       assertFalse(node0.isFor());
29:       assertFalse(node0.isGetterDef());
30:       assertFalse(node0.isFalse());
31:       assertFalse(node0.isArrayLit());
32:       assertFalse(node0.isGetProp());
33:       assertFalse(node0.isSwitch());
34:       assertEquals((-1), node0.getCharno());
35:       assertFalse(node0.isDebugger());
36:       assertFalse(node0.isAnd());
37:       assertFalse(node0.isWith());
38:       assertFalse(node0.isScript());
39:       assertFalse(node0.isCatch());
40:       assertFalse(node0.isInstanceOf());
41:       assertFalse(node0.isTry());
42:       assertFalse(node0.isFunction());
43:       assertFalse(node0.isRegExp());
44:       assertFalse(node0.isThis());
45:       assertFalse(node0.isIf());
46:       assertFalse(node0.isSetterDef());
47:       assertEquals((-1), node0.getLineno());
48:       assertFalse(node0.isIn());
49:       assertFalse(node0.isNE());
50:       assertFalse(node0.isDo());
51:       assertEquals(39, node0.getType());
52:       assertFalse(node0.isWhile());
53:       assertFalse(node0.isContinue());
54:       assertFalse(node0.hasMoreThanOneChild());
55:       assertFalse(node0.isLabel());
56:       assertFalse(node0.isAssignAdd());
57:       assertFalse(node0.isNew());
58:       assertFalse(node0.isVar());
59:       assertFalse(node0.isDec());
60:       assertFalse(node0.hasChildren());
61:       assertFalse(node0.isBlock());
62:       assertFalse(node0.isReturn());
63:       assertFalse(node0.isLabelName());
64:       assertFalse(node0.isStringKey());
65:       assertFalse(node0.isCast());
66:       assertFalse(node0.hasOneChild());
67:       assertEquals((-1), node0.getSourcePosition());
68:       assertFalse(node0.isParamList());
69:       assertFalse(node0.isNot());
70:       assertFalse(node0.isObjectLit());
71:       assertFalse(node0.isDefaultCase());
72:       assertFalse(node0.isExprResult());
73:       assertEquals(0, node0.getChildCount());
74:       assertFalse(node0.isComma());
75:       assertFalse(node0.isEmpty());
76:       assertFalse(node0.isAssign());
77:       assertFalse(node0.isDelProp());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isTypeOf());
80:       assertFalse(node0.isBreak());
81:       assertFalse(node0.isCall());
82:       assertFalse(node0.isGetElem());
83:       assertFalse(node0.isOr());
84:       assertFalse(node0.isAdd());
85:       assertFalse(node0.isVoid());
86:       assertFalse(node0.isTrue());
87:       assertFalse(node0.isNull());
88:       assertNotNull(node0);
89:       assertEquals(8, Node.FLAG_NO_THROWS);
90:       assertEquals(48, Node.DIRECTIVES);
91:       assertEquals(50, Node.FREE_CALL);
92:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
93:       assertEquals(40, Node.ORIGINALNAME_PROP);
94:       assertEquals(39, Node.EMPTY_BLOCK);
95:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
96:       assertEquals(57, Node.REFLECTED_OBJECT);
97:       assertEquals(54, Node.SLASH_V);
98:       assertEquals(43, Node.IS_CONSTANT_NAME);
99:       assertEquals(36, Node.QUOTED_PROP);
100:       assertEquals(15, Node.NO_SIDE_EFFECTS);
101:       assertEquals(57, Node.LAST_PROP);
102:       assertEquals(30, Node.VAR_ARGS_NAME);
103:       assertEquals(53, Node.INPUT_ID);
104:       assertEquals(52, Node.LENGTH);
105:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
106:       assertEquals(55, Node.INFERRED_FUNCTION);
107:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
108:       assertEquals(56, Node.CHANGE_TIME);
109:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
110:       assertEquals(47, Node.IS_DISPATCHER);
111:       assertEquals(37, Node.OPT_ARG_NAME);
112:       assertEquals(2, Node.POST_FLAG);
113:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
114:       assertEquals(29, Node.JSDOC_INFO_PROP);
115:       assertEquals(51, Node.STATIC_SOURCE_FILE);
116:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
117:       assertEquals(46, Node.IS_NAMESPACE);
118:       assertEquals(49, Node.DIRECT_EVAL);
119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
120:       assertEquals(12, Node.COLUMN_BITS);
121:       assertEquals(4095, Node.COLUMN_MASK);
122:       assertEquals(32, Node.INCRDECR_PROP);
123:       assertEquals(1, Node.DECR_FLAG);
124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
125:       
126:       Node node1 = Node.newString(36, "UNKNOWN", 32, 0);
127:       assertFalse(node1.equals((Object)node0));
128:       assertFalse(node1.isOr());
129:       assertFalse(node1.isAssignAdd());
130:       assertFalse(node1.hasMoreThanOneChild());
131:       assertFalse(node1.isLabel());
132:       assertFalse(node1.isReturn());
133:       assertFalse(node1.isWhile());
134:       assertFalse(node1.isDo());
135:       assertFalse(node1.isNumber());
136:       assertFalse(node1.isNew());
137:       assertFalse(node1.isAdd());
138:       assertFalse(node1.isStringKey());
139:       assertFalse(node1.isVar());
140:       assertFalse(node1.isLabelName());
141:       assertFalse(node1.isContinue());
142:       assertFalse(node1.isCast());
143:       assertEquals(0, node1.getChildCount());
144:       assertFalse(node1.isObjectLit());
145:       assertFalse(node1.isAnd());
146:       assertFalse(node1.isComma());
147:       assertFalse(node1.isNull());
148:       assertFalse(node1.isDefaultCase());
149:       assertFalse(node1.isNot());
150:       assertFalse(node1.isGetProp());
151:       assertFalse(node1.isTrue());
152:       assertFalse(node1.isBreak());
153:       assertFalse(node1.hasChildren());
154:       assertFalse(node1.isDec());
155:       assertFalse(node1.isAssign());
156:       assertFalse(node1.isName());
157:       assertFalse(node1.isTypeOf());
158:       assertFalse(node1.isDelProp());
159:       assertFalse(node1.isVoid());
160:       assertFalse(node1.isCall());
161:       assertFalse(node1.isExprResult());
162:       assertFalse(node1.isGetElem());
163:       assertFalse(node1.isIn());
164:       assertFalse(node1.isNE());
165:       assertFalse(node1.isString());
166:       assertFalse(node1.isGetterDef());
167:       assertFalse(node1.isCase());
168:       assertFalse(node1.isEmpty());
169:       assertFalse(node1.isInc());
170:       assertFalse(node1.isArrayLit());
171:       assertFalse(node1.isThrow());
172:       assertFalse(node1.isDebugger());
173:       assertFalse(node1.isSwitch());
174:       assertEquals(36, node1.getType());
175:       assertFalse(node1.isFunction());
176:       assertFalse(node1.isFalse());
177:       assertFalse(node1.isInstanceOf());
178:       assertFalse(node1.isParamList());
179:       assertEquals(131072, node1.getSourcePosition());
180:       assertFalse(node1.isThis());
181:       assertFalse(node1.isSetterDef());
182:       assertFalse(node1.isScript());
183:       assertFalse(node1.hasOneChild());
184:       assertFalse(node1.isTry());
185:       assertFalse(node1.isHook());
186:       assertFalse(node1.isBlock());
187:       assertFalse(node1.isFor());
188:       assertEquals(0, node1.getCharno());
189:       assertFalse(node1.isIf());
190:       assertFalse(node1.isWith());
191:       assertFalse(node1.isRegExp());
192:       assertEquals(32, node1.getLineno());
193:       assertFalse(node1.isCatch());
194:       assertNotNull(node1);
195:       assertEquals(40, Node.ORIGINALNAME_PROP);
196:       assertEquals(50, Node.FREE_CALL);
197:       assertEquals(57, Node.REFLECTED_OBJECT);
198:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
199:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
200:       assertEquals(48, Node.DIRECTIVES);
201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
202:       assertEquals(4095, Node.COLUMN_MASK);
203:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
204:       assertEquals(49, Node.DIRECT_EVAL);
205:       assertEquals(30, Node.VAR_ARGS_NAME);
206:       assertEquals(57, Node.LAST_PROP);
207:       assertEquals(8, Node.FLAG_NO_THROWS);
208:       assertEquals(39, Node.EMPTY_BLOCK);
209:       assertEquals(36, Node.QUOTED_PROP);
210:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
211:       assertEquals(52, Node.LENGTH);
212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
213:       assertEquals(29, Node.JSDOC_INFO_PROP);
214:       assertEquals(53, Node.INPUT_ID);
215:       assertEquals(55, Node.INFERRED_FUNCTION);
216:       assertEquals(47, Node.IS_DISPATCHER);
217:       assertEquals(56, Node.CHANGE_TIME);
218:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
219:       assertEquals(37, Node.OPT_ARG_NAME);
220:       assertEquals(2, Node.POST_FLAG);
221:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
222:       assertEquals(51, Node.STATIC_SOURCE_FILE);
223:       assertEquals(1, Node.DECR_FLAG);
224:       assertEquals(32, Node.INCRDECR_PROP);
225:       assertEquals(46, Node.IS_NAMESPACE);
226:       assertEquals(43, Node.IS_CONSTANT_NAME);
227:       assertEquals(12, Node.COLUMN_BITS);
228:       assertEquals(54, Node.SLASH_V);
229:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
231:       
232:       Object object0 = node1.getProp(0);
233:       assertFalse(node1.equals((Object)node0));
234:       assertFalse(node1.isOr());
235:       assertFalse(node1.isAssignAdd());
236:       assertFalse(node1.hasMoreThanOneChild());
237:       assertFalse(node1.isLabel());
238:       assertFalse(node1.isReturn());
239:       assertFalse(node1.isWhile());
240:       assertFalse(node1.isDo());
241:       assertFalse(node1.isNumber());
242:       assertFalse(node1.isNew());
243:       assertFalse(node1.isAdd());
244:       assertFalse(node1.isStringKey());
245:       assertFalse(node1.isVar());
246:       assertFalse(node1.isLabelName());
247:       assertFalse(node1.isContinue());
248:       assertFalse(node1.isCast());
249:       assertEquals(0, node1.getChildCount());
250:       assertFalse(node1.isObjectLit());
251:       assertFalse(node1.isAnd());
252:       assertFalse(node1.isComma());
253:       assertFalse(node1.isNull());
254:       assertFalse(node1.isDefaultCase());
255:       assertFalse(node1.isNot());
256:       assertFalse(node1.isGetProp());
257:       assertFalse(node1.isTrue());
258:       assertFalse(node1.isBreak());
259:       assertFalse(node1.hasChildren());
260:       assertFalse(node1.isDec());
261:       assertFalse(node1.isAssign());
262:       assertFalse(node1.isName());
263:       assertFalse(node1.isTypeOf());
264:       assertFalse(node1.isDelProp());
265:       assertFalse(node1.isVoid());
266:       assertFalse(node1.isCall());
267:       assertFalse(node1.isExprResult());
268:       assertFalse(node1.isGetElem());
269:       assertFalse(node1.isIn());
270:       assertFalse(node1.isNE());
271:       assertFalse(node1.isString());
272:       assertFalse(node1.isGetterDef());
273:       assertFalse(node1.isCase());
274:       assertFalse(node1.isEmpty());
275:       assertFalse(node1.isInc());
276:       assertFalse(node1.isArrayLit());
277:       assertFalse(node1.isThrow());
278:       assertFalse(node1.isDebugger());
279:       assertFalse(node1.isSwitch());
280:       assertEquals(36, node1.getType());
281:       assertFalse(node1.isFunction());
282:       assertFalse(node1.isFalse());
283:       assertFalse(node1.isInstanceOf());
284:       assertFalse(node1.isParamList());
285:       assertEquals(131072, node1.getSourcePosition());
286:       assertFalse(node1.isThis());
287:       assertFalse(node1.isSetterDef());
288:       assertFalse(node1.isScript());
289:       assertFalse(node1.hasOneChild());
290:       assertFalse(node1.isTry());
291:       assertFalse(node1.isHook());
292:       assertFalse(node1.isBlock());
293:       assertFalse(node1.isFor());
294:       assertEquals(0, node1.getCharno());
295:       assertFalse(node1.isIf());
296:       assertFalse(node1.isWith());
297:       assertFalse(node1.isRegExp());
298:       assertEquals(32, node1.getLineno());
299:       assertFalse(node1.isCatch());
300:       assertNull(object0);
301:       assertEquals(40, Node.ORIGINALNAME_PROP);
302:       assertEquals(50, Node.FREE_CALL);
303:       assertEquals(57, Node.REFLECTED_OBJECT);
304:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
305:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
306:       assertEquals(48, Node.DIRECTIVES);
307:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
308:       assertEquals(4095, Node.COLUMN_MASK);
309:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
310:       assertEquals(49, Node.DIRECT_EVAL);
311:       assertEquals(30, Node.VAR_ARGS_NAME);
312:       assertEquals(57, Node.LAST_PROP);
313:       assertEquals(8, Node.FLAG_NO_THROWS);
314:       assertEquals(39, Node.EMPTY_BLOCK);
315:       assertEquals(36, Node.QUOTED_PROP);
316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
317:       assertEquals(52, Node.LENGTH);
318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
319:       assertEquals(29, Node.JSDOC_INFO_PROP);
320:       assertEquals(53, Node.INPUT_ID);
321:       assertEquals(55, Node.INFERRED_FUNCTION);
322:       assertEquals(47, Node.IS_DISPATCHER);
323:       assertEquals(56, Node.CHANGE_TIME);
324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
325:       assertEquals(37, Node.OPT_ARG_NAME);
326:       assertEquals(2, Node.POST_FLAG);
327:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
328:       assertEquals(51, Node.STATIC_SOURCE_FILE);
329:       assertEquals(1, Node.DECR_FLAG);
330:       assertEquals(32, Node.INCRDECR_PROP);
331:       assertEquals(46, Node.IS_NAMESPACE);
332:       assertEquals(43, Node.IS_CONSTANT_NAME);
333:       assertEquals(12, Node.COLUMN_BITS);
334:       assertEquals(54, Node.SLASH_V);
335:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
336:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
337:       
338:       Node node2 = new Node(0, node1, node1, node0, node1);
339:       assertFalse(node0.equals((Object)node1));
340:       assertFalse(node1.equals((Object)node0));
341:       assertFalse(node2.equals((Object)node1));
342:       assertFalse(node2.equals((Object)node0));
343:       assertFalse(node0.isCase());
344:       assertFalse(node0.isString());
345:       assertFalse(node0.isInc());
346:       assertTrue(node0.isNumber());
347:       assertFalse(node0.isThrow());
348:       assertFalse(node0.isHook());
349:       assertFalse(node0.isFor());
350:       assertFalse(node0.isGetterDef());
351:       assertFalse(node0.isFalse());
352:       assertFalse(node0.isArrayLit());
353:       assertFalse(node0.isGetProp());
354:       assertFalse(node0.isSwitch());
355:       assertEquals((-1), node0.getCharno());
356:       assertFalse(node0.isDebugger());
357:       assertFalse(node0.isAnd());
358:       assertFalse(node0.isWith());
359:       assertFalse(node0.isScript());
360:       assertFalse(node0.isCatch());
361:       assertFalse(node0.isInstanceOf());
362:       assertFalse(node0.isTry());
363:       assertFalse(node0.isFunction());
364:       assertFalse(node0.isRegExp());
365:       assertFalse(node0.isThis());
366:       assertFalse(node0.isIf());
367:       assertFalse(node0.isSetterDef());
368:       assertEquals((-1), node0.getLineno());
369:       assertFalse(node0.isIn());
370:       assertFalse(node0.isNE());
371:       assertFalse(node0.isDo());
372:       assertEquals(39, node0.getType());
373:       assertFalse(node0.isWhile());
374:       assertFalse(node0.isContinue());
375:       assertFalse(node0.hasMoreThanOneChild());
376:       assertFalse(node0.isLabel());
377:       assertFalse(node0.isAssignAdd());
378:       assertFalse(node0.isNew());
379:       assertFalse(node0.isVar());
380:       assertFalse(node0.isDec());
381:       assertFalse(node0.hasChildren());
382:       assertFalse(node0.isBlock());
383:       assertFalse(node0.isReturn());
384:       assertFalse(node0.isLabelName());
385:       assertFalse(node0.isStringKey());
386:       assertFalse(node0.isCast());
387:       assertFalse(node0.hasOneChild());
388:       assertEquals((-1), node0.getSourcePosition());
389:       assertFalse(node0.isParamList());
390:       assertFalse(node0.isNot());
391:       assertFalse(node0.isObjectLit());
392:       assertFalse(node0.isDefaultCase());
393:       assertFalse(node0.isExprResult());
394:       assertEquals(0, node0.getChildCount());
395:       assertFalse(node0.isComma());
396:       assertFalse(node0.isEmpty());
397:       assertFalse(node0.isAssign());
398:       assertFalse(node0.isDelProp());
399:       assertFalse(node0.isName());
400:       assertFalse(node0.isTypeOf());
401:       assertFalse(node0.isBreak());
402:       assertFalse(node0.isCall());
403:       assertFalse(node0.isGetElem());
404:       assertFalse(node0.isOr());
405:       assertFalse(node0.isAdd());
406:       assertFalse(node0.isVoid());
407:       assertFalse(node0.isTrue());
408:       assertFalse(node0.isNull());
409:       assertFalse(node1.isOr());
410:       assertFalse(node1.isAssignAdd());
411:       assertFalse(node1.hasMoreThanOneChild());
412:       assertFalse(node1.isLabel());
413:       assertFalse(node1.isReturn());
414:       assertFalse(node1.isWhile());
415:       assertFalse(node1.isDo());
416:       assertFalse(node1.isNumber());
417:       assertFalse(node1.isNew());
418:       assertFalse(node1.isAdd());
419:       assertFalse(node1.isStringKey());
420:       assertFalse(node1.isVar());
421:       assertFalse(node1.isLabelName());
422:       assertFalse(node1.isContinue());
423:       assertFalse(node1.isCast());
424:       assertEquals(0, node1.getChildCount());
425:       assertFalse(node1.isObjectLit());
426:       assertFalse(node1.isAnd());
427:       assertFalse(node1.isComma());
428:       assertFalse(node1.isNull());
429:       assertFalse(node1.isDefaultCase());
430:       assertFalse(node1.isNot());
431:       assertFalse(node1.isGetProp());
432:       assertFalse(node1.isTrue());
433:       assertFalse(node1.isBreak());
434:       assertFalse(node1.hasChildren());
435:       assertFalse(node1.isDec());
436:       assertFalse(node1.isAssign());
437:       assertFalse(node1.isName());
438:       assertFalse(node1.isTypeOf());
439:       assertFalse(node1.isDelProp());
440:       assertFalse(node1.isVoid());
441:       assertFalse(node1.isCall());
442:       assertFalse(node1.isExprResult());
443:       assertFalse(node1.isGetElem());
444:       assertFalse(node1.isIn());
445:       assertFalse(node1.isNE());
446:       assertFalse(node1.isString());
447:       assertFalse(node1.isGetterDef());
448:       assertFalse(node1.isCase());
449:       assertFalse(node1.isEmpty());
450:       assertFalse(node1.isInc());
451:       assertFalse(node1.isArrayLit());
452:       assertFalse(node1.isThrow());
453:       assertFalse(node1.isDebugger());
454:       assertFalse(node1.isSwitch());
455:       assertEquals(36, node1.getType());
456:       assertFalse(node1.isFunction());
457:       assertFalse(node1.isFalse());
458:       assertFalse(node1.isInstanceOf());
459:       assertFalse(node1.isParamList());
460:       assertEquals(131072, node1.getSourcePosition());
461:       assertFalse(node1.isThis());
462:       assertFalse(node1.isSetterDef());
463:       assertFalse(node1.isScript());
464:       assertFalse(node1.hasOneChild());
465:       assertFalse(node1.isTry());
466:       assertFalse(node1.isHook());
467:       assertFalse(node1.isBlock());
468:       assertFalse(node1.isFor());
469:       assertEquals(0, node1.getCharno());
470:       assertFalse(node1.isIf());
471:       assertFalse(node1.isWith());
472:       assertFalse(node1.isRegExp());
473:       assertEquals(32, node1.getLineno());
474:       assertFalse(node1.isCatch());
475:       assertFalse(node2.isCase());
476:       assertFalse(node2.isString());
477:       assertFalse(node2.isSwitch());
478:       assertEquals(0, node2.getType());
479:       assertTrue(node2.hasChildren());
480:       assertFalse(node2.isHook());
481:       assertEquals(1, node2.getChildCount());
482:       assertFalse(node2.isThrow());
483:       assertFalse(node2.isEmpty());
484:       assertFalse(node2.isIf());
485:       assertFalse(node2.isBreak());
486:       assertFalse(node2.isDelProp());
487:       assertFalse(node2.isInc());
488:       assertFalse(node2.isTrue());
489:       assertFalse(node2.isNE());
490:       assertFalse(node2.isIn());
491:       assertFalse(node2.isCatch());
492:       assertFalse(node2.isDefaultCase());
493:       assertFalse(node2.isThis());
494:       assertFalse(node2.isInstanceOf());
495:       assertFalse(node2.isWith());
496:       assertFalse(node2.isRegExp());
497:       assertFalse(node2.isStringKey());
498:       assertFalse(node2.isFor());
499:       assertFalse(node2.isArrayLit());
500:       assertFalse(node2.isLabelName());
501:       assertFalse(node2.isTry());
502:       assertEquals((-1), node2.getCharno());
503:       assertFalse(node2.isParamList());
504:       assertFalse(node2.isScript());
505:       assertFalse(node2.isNumber());
506:       assertFalse(node2.isGetterDef());
507:       assertFalse(node2.isContinue());
508:       assertFalse(node2.isWhile());
509:       assertEquals((-1), node2.getLineno());
510:       assertFalse(node2.isDo());
511:       assertFalse(node2.isBlock());
512:       assertFalse(node2.isLabel());
513:       assertFalse(node2.isAssignAdd());
514:       assertFalse(node2.isReturn());
515:       assertFalse(node2.isTypeOf());
516:       assertFalse(node2.isDec());
517:       assertFalse(node2.hasMoreThanOneChild());
518:       assertFalse(node2.isAssign());
519:       assertFalse(node2.isName());
520:       assertFalse(node2.isGetElem());
521:       assertFalse(node2.isCall());
522:       assertFalse(node2.isVar());
523:       assertFalse(node2.isNew());
524:       assertFalse(node2.isSetterDef());
525:       assertFalse(node2.isAdd());
526:       assertFalse(node2.isNull());
527:       assertFalse(node2.isOr());
528:       assertFalse(node2.isAnd());
529:       assertFalse(node2.isVoid());
530:       assertFalse(node2.isExprResult());
531:       assertFalse(node2.isFunction());
532:       assertFalse(node2.isComma());
533:       assertFalse(node2.isFalse());
534:       assertTrue(node2.hasOneChild());
535:       assertFalse(node2.isCast());
536:       assertFalse(node2.isDebugger());
537:       assertFalse(node2.isGetProp());
538:       assertEquals((-1), node2.getSourcePosition());
539:       assertFalse(node2.isNot());
540:       assertFalse(node2.isObjectLit());
541:       assertNotNull(node2);
542:       assertEquals(8, Node.FLAG_NO_THROWS);
543:       assertEquals(48, Node.DIRECTIVES);
544:       assertEquals(50, Node.FREE_CALL);
545:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
546:       assertEquals(40, Node.ORIGINALNAME_PROP);
547:       assertEquals(39, Node.EMPTY_BLOCK);
548:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
549:       assertEquals(57, Node.REFLECTED_OBJECT);
550:       assertEquals(54, Node.SLASH_V);
551:       assertEquals(43, Node.IS_CONSTANT_NAME);
552:       assertEquals(36, Node.QUOTED_PROP);
553:       assertEquals(15, Node.NO_SIDE_EFFECTS);
554:       assertEquals(57, Node.LAST_PROP);
555:       assertEquals(30, Node.VAR_ARGS_NAME);
556:       assertEquals(53, Node.INPUT_ID);
557:       assertEquals(52, Node.LENGTH);
558:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
559:       assertEquals(55, Node.INFERRED_FUNCTION);
560:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
561:       assertEquals(56, Node.CHANGE_TIME);
562:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
563:       assertEquals(47, Node.IS_DISPATCHER);
564:       assertEquals(37, Node.OPT_ARG_NAME);
565:       assertEquals(2, Node.POST_FLAG);
566:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
567:       assertEquals(29, Node.JSDOC_INFO_PROP);
568:       assertEquals(51, Node.STATIC_SOURCE_FILE);
569:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
570:       assertEquals(46, Node.IS_NAMESPACE);
571:       assertEquals(49, Node.DIRECT_EVAL);
572:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
573:       assertEquals(12, Node.COLUMN_BITS);
574:       assertEquals(4095, Node.COLUMN_MASK);
575:       assertEquals(32, Node.INCRDECR_PROP);
576:       assertEquals(1, Node.DECR_FLAG);
577:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
578:       assertEquals(40, Node.ORIGINALNAME_PROP);
579:       assertEquals(50, Node.FREE_CALL);
580:       assertEquals(57, Node.REFLECTED_OBJECT);
581:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
582:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
583:       assertEquals(48, Node.DIRECTIVES);
584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
585:       assertEquals(4095, Node.COLUMN_MASK);
586:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
587:       assertEquals(49, Node.DIRECT_EVAL);
588:       assertEquals(30, Node.VAR_ARGS_NAME);
589:       assertEquals(57, Node.LAST_PROP);
590:       assertEquals(8, Node.FLAG_NO_THROWS);
591:       assertEquals(39, Node.EMPTY_BLOCK);
592:       assertEquals(36, Node.QUOTED_PROP);
593:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
594:       assertEquals(52, Node.LENGTH);
595:       assertEquals(15, Node.NO_SIDE_EFFECTS);
596:       assertEquals(29, Node.JSDOC_INFO_PROP);
597:       assertEquals(53, Node.INPUT_ID);
598:       assertEquals(55, Node.INFERRED_FUNCTION);
599:       assertEquals(47, Node.IS_DISPATCHER);
600:       assertEquals(56, Node.CHANGE_TIME);
601:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
602:       assertEquals(37, Node.OPT_ARG_NAME);
603:       assertEquals(2, Node.POST_FLAG);
604:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
605:       assertEquals(51, Node.STATIC_SOURCE_FILE);
606:       assertEquals(1, Node.DECR_FLAG);
607:       assertEquals(32, Node.INCRDECR_PROP);
608:       assertEquals(46, Node.IS_NAMESPACE);
609:       assertEquals(43, Node.IS_CONSTANT_NAME);
610:       assertEquals(12, Node.COLUMN_BITS);
611:       assertEquals(54, Node.SLASH_V);
612:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
613:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
614:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
615:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
616:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
617:       assertEquals(48, Node.DIRECTIVES);
618:       assertEquals(40, Node.ORIGINALNAME_PROP);
619:       assertEquals(39, Node.EMPTY_BLOCK);
620:       assertEquals(57, Node.REFLECTED_OBJECT);
621:       assertEquals(55, Node.INFERRED_FUNCTION);
622:       assertEquals(52, Node.LENGTH);
623:       assertEquals(54, Node.SLASH_V);
624:       assertEquals(8, Node.FLAG_NO_THROWS);
625:       assertEquals(50, Node.FREE_CALL);
626:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
627:       assertEquals(1, Node.DECR_FLAG);
628:       assertEquals(49, Node.DIRECT_EVAL);
629:       assertEquals(12, Node.COLUMN_BITS);
630:       assertEquals(32, Node.INCRDECR_PROP);
631:       assertEquals(4095, Node.COLUMN_MASK);
632:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
633:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
634:       assertEquals(47, Node.IS_DISPATCHER);
635:       assertEquals(29, Node.JSDOC_INFO_PROP);
636:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
637:       assertEquals(56, Node.CHANGE_TIME);
638:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
639:       assertEquals(37, Node.OPT_ARG_NAME);
640:       assertEquals(46, Node.IS_NAMESPACE);
641:       assertEquals(51, Node.STATIC_SOURCE_FILE);
642:       assertEquals(36, Node.QUOTED_PROP);
643:       assertEquals(15, Node.NO_SIDE_EFFECTS);
644:       assertEquals(57, Node.LAST_PROP);
645:       assertEquals(43, Node.IS_CONSTANT_NAME);
646:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
647:       assertEquals(53, Node.INPUT_ID);
648:       assertEquals(2, Node.POST_FLAG);
649:       assertEquals(30, Node.VAR_ARGS_NAME);
650:       
651:       boolean boolean0 = node2.isString();
652:       assertFalse(node0.equals((Object)node2));
653:       assertFalse(node0.equals((Object)node1));
654:       assertFalse(node1.equals((Object)node2));
655:       assertFalse(node1.equals((Object)node0));
656:       assertFalse(node2.equals((Object)node1));
657:       assertFalse(node2.equals((Object)node0));
658:       assertFalse(node0.isCase());
659:       assertFalse(node0.isString());
660:       assertFalse(node0.isInc());
661:       assertTrue(node0.isNumber());
662:       assertFalse(node0.isThrow());
663:       assertFalse(node0.isHook());
664:       assertFalse(node0.isFor());
665:       assertFalse(node0.isGetterDef());
666:       assertFalse(node0.isFalse());
667:       assertFalse(node0.isArrayLit());
668:       assertFalse(node0.isGetProp());
669:       assertFalse(node0.isSwitch());
670:       assertEquals((-1), node0.getCharno());
671:       assertFalse(node0.isDebugger());
672:       assertFalse(node0.isAnd());
673:       assertFalse(node0.isWith());
674:       assertFalse(node0.isScript());
675:       assertFalse(node0.isCatch());
676:       assertFalse(node0.isInstanceOf());
677:       assertFalse(node0.isTry());
678:       assertFalse(node0.isFunction());
679:       assertFalse(node0.isRegExp());
680:       assertFalse(node0.isThis());
681:       assertFalse(node0.isIf());
682:       assertFalse(node0.isSetterDef());
683:       assertEquals((-1), node0.getLineno());
684:       assertFalse(node0.isIn());
685:       assertFalse(node0.isNE());
686:       assertFalse(node0.isDo());
687:       assertEquals(39, node0.getType());
688:       assertFalse(node0.isWhile());
689:       assertFalse(node0.isContinue());
690:       assertFalse(node0.hasMoreThanOneChild());
691:       assertFalse(node0.isLabel());
692:       assertFalse(node0.isAssignAdd());
693:       assertFalse(node0.isNew());
694:       assertFalse(node0.isVar());
695:       assertFalse(node0.isDec());
696:       assertFalse(node0.hasChildren());
697:       assertFalse(node0.isBlock());
698:       assertFalse(node0.isReturn());
699:       assertFalse(node0.isLabelName());
700:       assertFalse(node0.isStringKey());
701:       assertFalse(node0.isCast());
702:       assertFalse(node0.hasOneChild());
703:       assertEquals((-1), node0.getSourcePosition());
704:       assertFalse(node0.isParamList());
705:       assertFalse(node0.isNot());
706:       assertFalse(node0.isObjectLit());
707:       assertFalse(node0.isDefaultCase());
708:       assertFalse(node0.isExprResult());
709:       assertEquals(0, node0.getChildCount());
710:       assertFalse(node0.isComma());
711:       assertFalse(node0.isEmpty());
712:       assertFalse(node0.isAssign());
713:       assertFalse(node0.isDelProp());
714:       assertFalse(node0.isName());
715:       assertFalse(node0.isTypeOf());
716:       assertFalse(node0.isBreak());
717:       assertFalse(node0.isCall());
718:       assertFalse(node0.isGetElem());
719:       assertFalse(node0.isOr());
720:       assertFalse(node0.isAdd());
721:       assertFalse(node0.isVoid());
722:       assertFalse(node0.isTrue());
723:       assertFalse(node0.isNull());
724:       assertFalse(node1.isOr());
725:       assertFalse(node1.isAssignAdd());
726:       assertFalse(node1.hasMoreThanOneChild());
727:       assertFalse(node1.isLabel());
728:       assertFalse(node1.isReturn());
729:       assertFalse(node1.isWhile());
730:       assertFalse(node1.isDo());
731:       assertFalse(node1.isNumber());
732:       assertFalse(node1.isNew());
733:       assertFalse(node1.isAdd());
734:       assertFalse(node1.isStringKey());
735:       assertFalse(node1.isVar());
736:       assertFalse(node1.isLabelName());
737:       assertFalse(node1.isContinue());
738:       assertFalse(node1.isCast());
739:       assertEquals(0, node1.getChildCount());
740:       assertFalse(node1.isObjectLit());
741:       assertFalse(node1.isAnd());
742:       assertFalse(node1.isComma());
743:       assertFalse(node1.isNull());
744:       assertFalse(node1.isDefaultCase());
745:       assertFalse(node1.isNot());
746:       assertFalse(node1.isGetProp());
747:       assertFalse(node1.isTrue());
748:       assertFalse(node1.isBreak());
749:       assertFalse(node1.hasChildren());
750:       assertFalse(node1.isDec());
751:       assertFalse(node1.isAssign());
752:       assertFalse(node1.isName());
753:       assertFalse(node1.isTypeOf());
754:       assertFalse(node1.isDelProp());
755:       assertFalse(node1.isVoid());
756:       assertFalse(node1.isCall());
757:       assertFalse(node1.isExprResult());
758:       assertFalse(node1.isGetElem());
759:       assertFalse(node1.isIn());
760:       assertFalse(node1.isNE());
761:       assertFalse(node1.isString());
762:       assertFalse(node1.isGetterDef());
763:       assertFalse(node1.isCase());
764:       assertFalse(node1.isEmpty());
765:       assertFalse(node1.isInc());
766:       assertFalse(node1.isArrayLit());
767:       assertFalse(node1.isThrow());
768:       assertFalse(node1.isDebugger());
769:       assertFalse(node1.isSwitch());
770:       assertEquals(36, node1.getType());
771:       assertFalse(node1.isFunction());
772:       assertFalse(node1.isFalse());
773:       assertFalse(node1.isInstanceOf());
774:       assertFalse(node1.isParamList());
775:       assertEquals(131072, node1.getSourcePosition());
776:       assertFalse(node1.isThis());
777:       assertFalse(node1.isSetterDef());
778:       assertFalse(node1.isScript());
779:       assertFalse(node1.hasOneChild());
780:       assertFalse(node1.isTry());
781:       assertFalse(node1.isHook());
782:       assertFalse(node1.isBlock());
783:       assertFalse(node1.isFor());
784:       assertEquals(0, node1.getCharno());
785:       assertFalse(node1.isIf());
786:       assertFalse(node1.isWith());
787:       assertFalse(node1.isRegExp());
788:       assertEquals(32, node1.getLineno());
789:       assertFalse(node1.isCatch());
790:       assertFalse(node2.isCase());
791:       assertFalse(node2.isString());
792:       assertFalse(node2.isSwitch());
793:       assertEquals(0, node2.getType());
794:       assertTrue(node2.hasChildren());
795:       assertFalse(node2.isHook());
796:       assertEquals(1, node2.getChildCount());
797:       assertFalse(node2.isThrow());
798:       assertFalse(node2.isEmpty());
799:       assertFalse(node2.isIf());
800:       assertFalse(node2.isBreak());
801:       assertFalse(node2.isDelProp());
802:       assertFalse(node2.isInc());
803:       assertFalse(node2.isTrue());
804:       assertFalse(node2.isNE());
805:       assertFalse(node2.isIn());
806:       assertFalse(node2.isCatch());
807:       assertFalse(node2.isDefaultCase());
808:       assertFalse(node2.isThis());
809:       assertFalse(node2.isInstanceOf());
810:       assertFalse(node2.isWith());
811:       assertFalse(node2.isRegExp());
812:       assertFalse(node2.isStringKey());
813:       assertFalse(node2.isFor());
814:       assertFalse(node2.isArrayLit());
815:       assertFalse(node2.isLabelName());
816:       assertFalse(node2.isTry());
817:       assertEquals((-1), node2.getCharno());
818:       assertFalse(node2.isParamList());
819:       assertFalse(node2.isScript());
820:       assertFalse(node2.isNumber());
821:       assertFalse(node2.isGetterDef());
822:       assertFalse(node2.isContinue());
823:       assertFalse(node2.isWhile());
824:       assertEquals((-1), node2.getLineno());
825:       assertFalse(node2.isDo());
826:       assertFalse(node2.isBlock());
827:       assertFalse(node2.isLabel());
828:       assertFalse(node2.isAssignAdd());
829:       assertFalse(node2.isReturn());
830:       assertFalse(node2.isTypeOf());
831:       assertFalse(node2.isDec());
832:       assertFalse(node2.hasMoreThanOneChild());
833:       assertFalse(node2.isAssign());
834:       assertFalse(node2.isName());
835:       assertFalse(node2.isGetElem());
836:       assertFalse(node2.isCall());
837:       assertFalse(node2.isVar());
838:       assertFalse(node2.isNew());
839:       assertFalse(node2.isSetterDef());
840:       assertFalse(node2.isAdd());
841:       assertFalse(node2.isNull());
842:       assertFalse(node2.isOr());
843:       assertFalse(node2.isAnd());
844:       assertFalse(node2.isVoid());
845:       assertFalse(node2.isExprResult());
846:       assertFalse(node2.isFunction());
847:       assertFalse(node2.isComma());
848:       assertFalse(node2.isFalse());
849:       assertTrue(node2.hasOneChild());
850:       assertFalse(node2.isCast());
851:       assertFalse(node2.isDebugger());
852:       assertFalse(node2.isGetProp());
853:       assertEquals((-1), node2.getSourcePosition());
854:       assertFalse(node2.isNot());
855:       assertFalse(node2.isObjectLit());
856:       assertFalse(boolean0);
857:       assertEquals(8, Node.FLAG_NO_THROWS);
858:       assertEquals(48, Node.DIRECTIVES);
859:       assertEquals(50, Node.FREE_CALL);
860:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
861:       assertEquals(40, Node.ORIGINALNAME_PROP);
862:       assertEquals(39, Node.EMPTY_BLOCK);
863:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
864:       assertEquals(57, Node.REFLECTED_OBJECT);
865:       assertEquals(54, Node.SLASH_V);
866:       assertEquals(43, Node.IS_CONSTANT_NAME);
867:       assertEquals(36, Node.QUOTED_PROP);
868:       assertEquals(15, Node.NO_SIDE_EFFECTS);
869:       assertEquals(57, Node.LAST_PROP);
870:       assertEquals(30, Node.VAR_ARGS_NAME);
871:       assertEquals(53, Node.INPUT_ID);
872:       assertEquals(52, Node.LENGTH);
873:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
874:       assertEquals(55, Node.INFERRED_FUNCTION);
875:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
876:       assertEquals(56, Node.CHANGE_TIME);
877:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
878:       assertEquals(47, Node.IS_DISPATCHER);
879:       assertEquals(37, Node.OPT_ARG_NAME);
880:       assertEquals(2, Node.POST_FLAG);
881:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
882:       assertEquals(29, Node.JSDOC_INFO_PROP);
883:       assertEquals(51, Node.STATIC_SOURCE_FILE);
884:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
885:       assertEquals(46, Node.IS_NAMESPACE);
886:       assertEquals(49, Node.DIRECT_EVAL);
887:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
888:       assertEquals(12, Node.COLUMN_BITS);
889:       assertEquals(4095, Node.COLUMN_MASK);
890:       assertEquals(32, Node.INCRDECR_PROP);
891:       assertEquals(1, Node.DECR_FLAG);
892:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
893:       assertEquals(40, Node.ORIGINALNAME_PROP);
894:       assertEquals(50, Node.FREE_CALL);
895:       assertEquals(57, Node.REFLECTED_OBJECT);
896:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
897:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
898:       assertEquals(48, Node.DIRECTIVES);
899:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
900:       assertEquals(4095, Node.COLUMN_MASK);
901:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
902:       assertEquals(49, Node.DIRECT_EVAL);
903:       assertEquals(30, Node.VAR_ARGS_NAME);
904:       assertEquals(57, Node.LAST_PROP);
905:       assertEquals(8, Node.FLAG_NO_THROWS);
906:       assertEquals(39, Node.EMPTY_BLOCK);
907:       assertEquals(36, Node.QUOTED_PROP);
908:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
909:       assertEquals(52, Node.LENGTH);
910:       assertEquals(15, Node.NO_SIDE_EFFECTS);
911:       assertEquals(29, Node.JSDOC_INFO_PROP);
912:       assertEquals(53, Node.INPUT_ID);
913:       assertEquals(55, Node.INFERRED_FUNCTION);
914:       assertEquals(47, Node.IS_DISPATCHER);
915:       assertEquals(56, Node.CHANGE_TIME);
916:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
917:       assertEquals(37, Node.OPT_ARG_NAME);
918:       assertEquals(2, Node.POST_FLAG);
919:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
920:       assertEquals(51, Node.STATIC_SOURCE_FILE);
921:       assertEquals(1, Node.DECR_FLAG);
922:       assertEquals(32, Node.INCRDECR_PROP);
923:       assertEquals(46, Node.IS_NAMESPACE);
924:       assertEquals(43, Node.IS_CONSTANT_NAME);
925:       assertEquals(12, Node.COLUMN_BITS);
926:       assertEquals(54, Node.SLASH_V);
927:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
928:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
929:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
930:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
931:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
932:       assertEquals(48, Node.DIRECTIVES);
933:       assertEquals(40, Node.ORIGINALNAME_PROP);
934:       assertEquals(39, Node.EMPTY_BLOCK);
935:       assertEquals(57, Node.REFLECTED_OBJECT);
936:       assertEquals(55, Node.INFERRED_FUNCTION);
937:       assertEquals(52, Node.LENGTH);
938:       assertEquals(54, Node.SLASH_V);
939:       assertEquals(8, Node.FLAG_NO_THROWS);
940:       assertEquals(50, Node.FREE_CALL);
941:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
942:       assertEquals(1, Node.DECR_FLAG);
943:       assertEquals(49, Node.DIRECT_EVAL);
944:       assertEquals(12, Node.COLUMN_BITS);
945:       assertEquals(32, Node.INCRDECR_PROP);
946:       assertEquals(4095, Node.COLUMN_MASK);
947:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
948:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
949:       assertEquals(47, Node.IS_DISPATCHER);
950:       assertEquals(29, Node.JSDOC_INFO_PROP);
951:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
952:       assertEquals(56, Node.CHANGE_TIME);
953:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
954:       assertEquals(37, Node.OPT_ARG_NAME);
955:       assertEquals(46, Node.IS_NAMESPACE);
956:       assertEquals(51, Node.STATIC_SOURCE_FILE);
957:       assertEquals(36, Node.QUOTED_PROP);
958:       assertEquals(15, Node.NO_SIDE_EFFECTS);
959:       assertEquals(57, Node.LAST_PROP);
960:       assertEquals(43, Node.IS_CONSTANT_NAME);
961:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
962:       assertEquals(53, Node.INPUT_ID);
963:       assertEquals(2, Node.POST_FLAG);
964:       assertEquals(30, Node.VAR_ARGS_NAME);
965:       
966:       node0.setLineno(39);
967:       assertFalse(node0.equals((Object)node2));
968:       assertFalse(node0.equals((Object)node1));
969:       assertFalse(node0.isCase());
970:       assertFalse(node0.isString());
971:       assertFalse(node0.isInc());
972:       assertTrue(node0.isNumber());
973:       assertEquals(159744, node0.getSourcePosition());
974:       assertFalse(node0.isThrow());
975:       assertFalse(node0.isHook());
976:       assertFalse(node0.isFor());
977:       assertEquals(39, node0.getLineno());
978:       assertFalse(node0.isGetterDef());
979:       assertFalse(node0.isFalse());
980:       assertFalse(node0.isArrayLit());
981:       assertFalse(node0.isGetProp());
982:       assertFalse(node0.isSwitch());
983:       assertFalse(node0.isDebugger());
984:       assertFalse(node0.isAnd());
985:       assertFalse(node0.isWith());
986:       assertFalse(node0.isScript());
987:       assertFalse(node0.isCatch());
988:       assertFalse(node0.isInstanceOf());
989:       assertFalse(node0.isTry());
990:       assertFalse(node0.isFunction());
991:       assertFalse(node0.isRegExp());
992:       assertFalse(node0.isThis());
993:       assertFalse(node0.isIf());
994:       assertFalse(node0.isSetterDef());
995:       assertFalse(node0.isIn());
996:       assertFalse(node0.isNE());
997:       assertEquals(0, node0.getCharno());
998:       assertFalse(node0.isDo());
999:       assertEquals(39, node0.getType());
1000:       assertFalse(node0.isWhile());
1001:       assertFalse(node0.isContinue());
1002:       assertFalse(node0.hasMoreThanOneChild());
1003:       assertFalse(node0.isLabel());
1004:       assertFalse(node0.isAssignAdd());
1005:       assertFalse(node0.isNew());
1006:       assertFalse(node0.isVar());
1007:       assertFalse(node0.isDec());
1008:       assertFalse(node0.hasChildren());
1009:       assertFalse(node0.isBlock());
1010:       assertFalse(node0.isReturn());
1011:       assertFalse(node0.isLabelName());
1012:       assertFalse(node0.isStringKey());
1013:       assertFalse(node0.isCast());
1014:       assertFalse(node0.hasOneChild());
1015:       assertFalse(node0.isParamList());
1016:       assertFalse(node0.isNot());
1017:       assertFalse(node0.isObjectLit());
1018:       assertFalse(node0.isDefaultCase());
1019:       assertFalse(node0.isExprResult());
1020:       assertEquals(0, node0.getChildCount());
1021:       assertFalse(node0.isComma());
1022:       assertFalse(node0.isEmpty());
1023:       assertFalse(node0.isAssign());
1024:       assertFalse(node0.isDelProp());
1025:       assertFalse(node0.isName());
1026:       assertFalse(node0.isTypeOf());
1027:       assertFalse(node0.isBreak());
1028:       assertFalse(node0.isCall());
1029:       assertFalse(node0.isGetElem());
1030:       assertFalse(node0.isOr());
1031:       assertFalse(node0.isAdd());
1032:       assertFalse(node0.isVoid());
1033:       assertFalse(node0.isTrue());
1034:       assertFalse(node0.isNull());
1035:       assertEquals(8, Node.FLAG_NO_THROWS);
1036:       assertEquals(48, Node.DIRECTIVES);
1037:       assertEquals(50, Node.FREE_CALL);
1038:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1039:       assertEquals(40, Node.ORIGINALNAME_PROP);
1040:       assertEquals(39, Node.EMPTY_BLOCK);
1041:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1042:       assertEquals(57, Node.REFLECTED_OBJECT);
1043:       assertEquals(54, Node.SLASH_V);
1044:       assertEquals(43, Node.IS_CONSTANT_NAME);
1045:       assertEquals(36, Node.QUOTED_PROP);
1046:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1047:       assertEquals(57, Node.LAST_PROP);
1048:       assertEquals(30, Node.VAR_ARGS_NAME);
1049:       assertEquals(53, Node.INPUT_ID);
1050:       assertEquals(52, Node.LENGTH);
1051:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1052:       assertEquals(55, Node.INFERRED_FUNCTION);
1053:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1054:       assertEquals(56, Node.CHANGE_TIME);
1055:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1056:       assertEquals(47, Node.IS_DISPATCHER);
1057:       assertEquals(37, Node.OPT_ARG_NAME);
1058:       assertEquals(2, Node.POST_FLAG);
1059:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1060:       assertEquals(29, Node.JSDOC_INFO_PROP);
1061:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1062:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1063:       assertEquals(46, Node.IS_NAMESPACE);
1064:       assertEquals(49, Node.DIRECT_EVAL);
1065:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1066:       assertEquals(12, Node.COLUMN_BITS);
1067:       assertEquals(4095, Node.COLUMN_MASK);
1068:       assertEquals(32, Node.INCRDECR_PROP);
1069:       assertEquals(1, Node.DECR_FLAG);
1070:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1071:       
1072:       node0.putProp(4095, (Object) null);
1073:       assertFalse(node0.equals((Object)node2));
1074:       assertFalse(node0.equals((Object)node1));
1075:       assertFalse(node0.isCase());
1076:       assertFalse(node0.isString());
1077:       assertFalse(node0.isInc());
1078:       assertTrue(node0.isNumber());
1079:       assertEquals(159744, node0.getSourcePosition());
1080:       assertFalse(node0.isThrow());
1081:       assertFalse(node0.isHook());
1082:       assertFalse(node0.isFor());
1083:       assertEquals(39, node0.getLineno());
1084:       assertFalse(node0.isGetterDef());
1085:       assertFalse(node0.isFalse());
1086:       assertFalse(node0.isArrayLit());
1087:       assertFalse(node0.isGetProp());
1088:       assertFalse(node0.isSwitch());
1089:       assertFalse(node0.isDebugger());
1090:       assertFalse(node0.isAnd());
1091:       assertFalse(node0.isWith());
1092:       assertFalse(node0.isScript());
1093:       assertFalse(node0.isCatch());
1094:       assertFalse(node0.isInstanceOf());
1095:       assertFalse(node0.isTry());
1096:       assertFalse(node0.isFunction());
1097:       assertFalse(node0.isRegExp());
1098:       assertFalse(node0.isThis());
1099:       assertFalse(node0.isIf());
1100:       assertFalse(node0.isSetterDef());
1101:       assertFalse(node0.isIn());
1102:       assertFalse(node0.isNE());
1103:       assertEquals(0, node0.getCharno());
1104:       assertFalse(node0.isDo());
1105:       assertEquals(39, node0.getType());
1106:       assertFalse(node0.isWhile());
1107:       assertFalse(node0.isContinue());
1108:       assertFalse(node0.hasMoreThanOneChild());
1109:       assertFalse(node0.isLabel());
1110:       assertFalse(node0.isAssignAdd());
1111:       assertFalse(node0.isNew());
1112:       assertFalse(node0.isVar());
1113:       assertFalse(node0.isDec());
1114:       assertFalse(node0.hasChildren());
1115:       assertFalse(node0.isBlock());
1116:       assertFalse(node0.isReturn());
1117:       assertFalse(node0.isLabelName());
1118:       assertFalse(node0.isStringKey());
1119:       assertFalse(node0.isCast());
1120:       assertFalse(node0.hasOneChild());
1121:       assertFalse(node0.isParamList());
1122:       assertFalse(node0.isNot());
1123:       assertFalse(node0.isObjectLit());
1124:       assertFalse(node0.isDefaultCase());
1125:       assertFalse(node0.isExprResult());
1126:       assertEquals(0, node0.getChildCount());
1127:       assertFalse(node0.isComma());
1128:       assertFalse(node0.isEmpty());
1129:       assertFalse(node0.isAssign());
1130:       assertFalse(node0.isDelProp());
1131:       assertFalse(node0.isName());
1132:       assertFalse(node0.isTypeOf());
1133:       assertFalse(node0.isBreak());
1134:       assertFalse(node0.isCall());
1135:       assertFalse(node0.isGetElem());
1136:       assertFalse(node0.isOr());
1137:       assertFalse(node0.isAdd());
1138:       assertFalse(node0.isVoid());
1139:       assertFalse(node0.isTrue());
1140:       assertFalse(node0.isNull());
1141:       assertEquals(8, Node.FLAG_NO_THROWS);
1142:       assertEquals(48, Node.DIRECTIVES);
1143:       assertEquals(50, Node.FREE_CALL);
1144:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1145:       assertEquals(40, Node.ORIGINALNAME_PROP);
1146:       assertEquals(39, Node.EMPTY_BLOCK);
1147:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1148:       assertEquals(57, Node.REFLECTED_OBJECT);
1149:       assertEquals(54, Node.SLASH_V);
1150:       assertEquals(43, Node.IS_CONSTANT_NAME);
1151:       assertEquals(36, Node.QUOTED_PROP);
1152:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1153:       assertEquals(57, Node.LAST_PROP);
1154:       assertEquals(30, Node.VAR_ARGS_NAME);
1155:       assertEquals(53, Node.INPUT_ID);
1156:       assertEquals(52, Node.LENGTH);
1157:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1158:       assertEquals(55, Node.INFERRED_FUNCTION);
1159:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1160:       assertEquals(56, Node.CHANGE_TIME);
1161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1162:       assertEquals(47, Node.IS_DISPATCHER);
1163:       assertEquals(37, Node.OPT_ARG_NAME);
1164:       assertEquals(2, Node.POST_FLAG);
1165:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1166:       assertEquals(29, Node.JSDOC_INFO_PROP);
1167:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1168:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1169:       assertEquals(46, Node.IS_NAMESPACE);
1170:       assertEquals(49, Node.DIRECT_EVAL);
1171:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1172:       assertEquals(12, Node.COLUMN_BITS);
1173:       assertEquals(4095, Node.COLUMN_MASK);
1174:       assertEquals(32, Node.INCRDECR_PROP);
1175:       assertEquals(1, Node.DECR_FLAG);
1176:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1177:       
1178:       int int0 = node0.getIndexOfChild(node1);
1179:       assertFalse(node0.equals((Object)node2));
1180:       assertFalse(node0.equals((Object)node1));
1181:       assertFalse(node1.equals((Object)node2));
1182:       assertFalse(node1.equals((Object)node0));
1183:       assertFalse(node0.isCase());
1184:       assertFalse(node0.isString());
1185:       assertFalse(node0.isInc());
1186:       assertTrue(node0.isNumber());
1187:       assertEquals(159744, node0.getSourcePosition());
1188:       assertFalse(node0.isThrow());
1189:       assertFalse(node0.isHook());
1190:       assertFalse(node0.isFor());
1191:       assertEquals(39, node0.getLineno());
1192:       assertFalse(node0.isGetterDef());
1193:       assertFalse(node0.isFalse());
1194:       assertFalse(node0.isArrayLit());
1195:       assertFalse(node0.isGetProp());
1196:       assertFalse(node0.isSwitch());
1197:       assertFalse(node0.isDebugger());
1198:       assertFalse(node0.isAnd());
1199:       assertFalse(node0.isWith());
1200:       assertFalse(node0.isScript());
1201:       assertFalse(node0.isCatch());
1202:       assertFalse(node0.isInstanceOf());
1203:       assertFalse(node0.isTry());
1204:       assertFalse(node0.isFunction());
1205:       assertFalse(node0.isRegExp());
1206:       assertFalse(node0.isThis());
1207:       assertFalse(node0.isIf());
1208:       assertFalse(node0.isSetterDef());
1209:       assertFalse(node0.isIn());
1210:       assertFalse(node0.isNE());
1211:       assertEquals(0, node0.getCharno());
1212:       assertFalse(node0.isDo());
1213:       assertEquals(39, node0.getType());
1214:       assertFalse(node0.isWhile());
1215:       assertFalse(node0.isContinue());
1216:       assertFalse(node0.hasMoreThanOneChild());
1217:       assertFalse(node0.isLabel());
1218:       assertFalse(node0.isAssignAdd());
1219:       assertFalse(node0.isNew());
1220:       assertFalse(node0.isVar());
1221:       assertFalse(node0.isDec());
1222:       assertFalse(node0.hasChildren());
1223:       assertFalse(node0.isBlock());
1224:       assertFalse(node0.isReturn());
1225:       assertFalse(node0.isLabelName());
1226:       assertFalse(node0.isStringKey());
1227:       assertFalse(node0.isCast());
1228:       assertFalse(node0.hasOneChild());
1229:       assertFalse(node0.isParamList());
1230:       assertFalse(node0.isNot());
1231:       assertFalse(node0.isObjectLit());
1232:       assertFalse(node0.isDefaultCase());
1233:       assertFalse(node0.isExprResult());
1234:       assertEquals(0, node0.getChildCount());
1235:       assertFalse(node0.isComma());
1236:       assertFalse(node0.isEmpty());
1237:       assertFalse(node0.isAssign());
1238:       assertFalse(node0.isDelProp());
1239:       assertFalse(node0.isName());
1240:       assertFalse(node0.isTypeOf());
1241:       assertFalse(node0.isBreak());
1242:       assertFalse(node0.isCall());
1243:       assertFalse(node0.isGetElem());
1244:       assertFalse(node0.isOr());
1245:       assertFalse(node0.isAdd());
1246:       assertFalse(node0.isVoid());
1247:       assertFalse(node0.isTrue());
1248:       assertFalse(node0.isNull());
1249:       assertFalse(node1.isOr());
1250:       assertFalse(node1.isAssignAdd());
1251:       assertFalse(node1.hasMoreThanOneChild());
1252:       assertFalse(node1.isLabel());
1253:       assertFalse(node1.isReturn());
1254:       assertFalse(node1.isWhile());
1255:       assertFalse(node1.isDo());
1256:       assertFalse(node1.isNumber());
1257:       assertFalse(node1.isNew());
1258:       assertFalse(node1.isAdd());
1259:       assertFalse(node1.isStringKey());
1260:       assertFalse(node1.isVar());
1261:       assertFalse(node1.isLabelName());
1262:       assertFalse(node1.isContinue());
1263:       assertFalse(node1.isCast());
1264:       assertEquals(0, node1.getChildCount());
1265:       assertFalse(node1.isObjectLit());
1266:       assertFalse(node1.isAnd());
1267:       assertFalse(node1.isComma());
1268:       assertFalse(node1.isNull());
1269:       assertFalse(node1.isDefaultCase());
1270:       assertFalse(node1.isNot());
1271:       assertFalse(node1.isGetProp());
1272:       assertFalse(node1.isTrue());
1273:       assertFalse(node1.isBreak());
1274:       assertFalse(node1.hasChildren());
1275:       assertFalse(node1.isDec());
1276:       assertFalse(node1.isAssign());
1277:       assertFalse(node1.isName());
1278:       assertFalse(node1.isTypeOf());
1279:       assertFalse(node1.isDelProp());
1280:       assertFalse(node1.isVoid());
1281:       assertFalse(node1.isCall());
1282:       assertFalse(node1.isExprResult());
1283:       assertFalse(node1.isGetElem());
1284:       assertFalse(node1.isIn());
1285:       assertFalse(node1.isNE());
1286:       assertFalse(node1.isString());
1287:       assertFalse(node1.isGetterDef());
1288:       assertFalse(node1.isCase());
1289:       assertFalse(node1.isEmpty());
1290:       assertFalse(node1.isInc());
1291:       assertFalse(node1.isArrayLit());
1292:       assertFalse(node1.isThrow());
1293:       assertFalse(node1.isDebugger());
1294:       assertFalse(node1.isSwitch());
1295:       assertEquals(36, node1.getType());
1296:       assertFalse(node1.isFunction());
1297:       assertFalse(node1.isFalse());
1298:       assertFalse(node1.isInstanceOf());
1299:       assertFalse(node1.isParamList());
1300:       assertEquals(131072, node1.getSourcePosition());
1301:       assertFalse(node1.isThis());
1302:       assertFalse(node1.isSetterDef());
1303:       assertFalse(node1.isScript());
1304:       assertFalse(node1.hasOneChild());
1305:       assertFalse(node1.isTry());
1306:       assertFalse(node1.isHook());
1307:       assertFalse(node1.isBlock());
1308:       assertFalse(node1.isFor());
1309:       assertEquals(0, node1.getCharno());
1310:       assertFalse(node1.isIf());
1311:       assertFalse(node1.isWith());
1312:       assertFalse(node1.isRegExp());
1313:       assertEquals(32, node1.getLineno());
1314:       assertFalse(node1.isCatch());
1315:       assertEquals((-1), int0);
1316:       assertEquals(8, Node.FLAG_NO_THROWS);
1317:       assertEquals(48, Node.DIRECTIVES);
1318:       assertEquals(50, Node.FREE_CALL);
1319:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1320:       assertEquals(40, Node.ORIGINALNAME_PROP);
1321:       assertEquals(39, Node.EMPTY_BLOCK);
1322:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1323:       assertEquals(57, Node.REFLECTED_OBJECT);
1324:       assertEquals(54, Node.SLASH_V);
1325:       assertEquals(43, Node.IS_CONSTANT_NAME);
1326:       assertEquals(36, Node.QUOTED_PROP);
1327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1328:       assertEquals(57, Node.LAST_PROP);
1329:       assertEquals(30, Node.VAR_ARGS_NAME);
1330:       assertEquals(53, Node.INPUT_ID);
1331:       assertEquals(52, Node.LENGTH);
1332:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1333:       assertEquals(55, Node.INFERRED_FUNCTION);
1334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1335:       assertEquals(56, Node.CHANGE_TIME);
1336:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1337:       assertEquals(47, Node.IS_DISPATCHER);
1338:       assertEquals(37, Node.OPT_ARG_NAME);
1339:       assertEquals(2, Node.POST_FLAG);
1340:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1341:       assertEquals(29, Node.JSDOC_INFO_PROP);
1342:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1343:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1344:       assertEquals(46, Node.IS_NAMESPACE);
1345:       assertEquals(49, Node.DIRECT_EVAL);
1346:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1347:       assertEquals(12, Node.COLUMN_BITS);
1348:       assertEquals(4095, Node.COLUMN_MASK);
1349:       assertEquals(32, Node.INCRDECR_PROP);
1350:       assertEquals(1, Node.DECR_FLAG);
1351:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1352:       assertEquals(40, Node.ORIGINALNAME_PROP);
1353:       assertEquals(50, Node.FREE_CALL);
1354:       assertEquals(57, Node.REFLECTED_OBJECT);
1355:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1356:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1357:       assertEquals(48, Node.DIRECTIVES);
1358:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1359:       assertEquals(4095, Node.COLUMN_MASK);
1360:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1361:       assertEquals(49, Node.DIRECT_EVAL);
1362:       assertEquals(30, Node.VAR_ARGS_NAME);
1363:       assertEquals(57, Node.LAST_PROP);
1364:       assertEquals(8, Node.FLAG_NO_THROWS);
1365:       assertEquals(39, Node.EMPTY_BLOCK);
1366:       assertEquals(36, Node.QUOTED_PROP);
1367:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1368:       assertEquals(52, Node.LENGTH);
1369:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1370:       assertEquals(29, Node.JSDOC_INFO_PROP);
1371:       assertEquals(53, Node.INPUT_ID);
1372:       assertEquals(55, Node.INFERRED_FUNCTION);
1373:       assertEquals(47, Node.IS_DISPATCHER);
1374:       assertEquals(56, Node.CHANGE_TIME);
1375:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1376:       assertEquals(37, Node.OPT_ARG_NAME);
1377:       assertEquals(2, Node.POST_FLAG);
1378:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1379:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1380:       assertEquals(1, Node.DECR_FLAG);
1381:       assertEquals(32, Node.INCRDECR_PROP);
1382:       assertEquals(46, Node.IS_NAMESPACE);
1383:       assertEquals(43, Node.IS_CONSTANT_NAME);
1384:       assertEquals(12, Node.COLUMN_BITS);
1385:       assertEquals(54, Node.SLASH_V);
1386:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1387:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1388:       
1389:       Iterable<Node> iterable0 = node0.children();
1390:       assertFalse(node0.equals((Object)node2));
1391:       assertFalse(node0.equals((Object)node1));
1392:       assertFalse(node0.isCase());
1393:       assertFalse(node0.isString());
1394:       assertFalse(node0.isInc());
1395:       assertTrue(node0.isNumber());
1396:       assertEquals(159744, node0.getSourcePosition());
1397:       assertFalse(node0.isThrow());
1398:       assertFalse(node0.isHook());
1399:       assertFalse(node0.isFor());
1400:       assertEquals(39, node0.getLineno());
1401:       assertFalse(node0.isGetterDef());
1402:       assertFalse(node0.isFalse());
1403:       assertFalse(node0.isArrayLit());
1404:       assertFalse(node0.isGetProp());
1405:       assertFalse(node0.isSwitch());
1406:       assertFalse(node0.isDebugger());
1407:       assertFalse(node0.isAnd());
1408:       assertFalse(node0.isWith());
1409:       assertFalse(node0.isScript());
1410:       assertFalse(node0.isCatch());
1411:       assertFalse(node0.isInstanceOf());
1412:       assertFalse(node0.isTry());
1413:       assertFalse(node0.isFunction());
1414:       assertFalse(node0.isRegExp());
1415:       assertFalse(node0.isThis());
1416:       assertFalse(node0.isIf());
1417:       assertFalse(node0.isSetterDef());
1418:       assertFalse(node0.isIn());
1419:       assertFalse(node0.isNE());
1420:       assertEquals(0, node0.getCharno());
1421:       assertFalse(node0.isDo());
1422:       assertEquals(39, node0.getType());
1423:       assertFalse(node0.isWhile());
1424:       assertFalse(node0.isContinue());
1425:       assertFalse(node0.hasMoreThanOneChild());
1426:       assertFalse(node0.isLabel());
1427:       assertFalse(node0.isAssignAdd());
1428:       assertFalse(node0.isNew());
1429:       assertFalse(node0.isVar());
1430:       assertFalse(node0.isDec());
1431:       assertFalse(node0.hasChildren());
1432:       assertFalse(node0.isBlock());
1433:       assertFalse(node0.isReturn());
1434:       assertFalse(node0.isLabelName());
1435:       assertFalse(node0.isStringKey());
1436:       assertFalse(node0.isCast());
1437:       assertFalse(node0.hasOneChild());
1438:       assertFalse(node0.isParamList());
1439:       assertFalse(node0.isNot());
1440:       assertFalse(node0.isObjectLit());
1441:       assertFalse(node0.isDefaultCase());
1442:       assertFalse(node0.isExprResult());
1443:       assertEquals(0, node0.getChildCount());
1444:       assertFalse(node0.isComma());
1445:       assertFalse(node0.isEmpty());
1446:       assertFalse(node0.isAssign());
1447:       assertFalse(node0.isDelProp());
1448:       assertFalse(node0.isName());
1449:       assertFalse(node0.isTypeOf());
1450:       assertFalse(node0.isBreak());
1451:       assertFalse(node0.isCall());
1452:       assertFalse(node0.isGetElem());
1453:       assertFalse(node0.isOr());
1454:       assertFalse(node0.isAdd());
1455:       assertFalse(node0.isVoid());
1456:       assertFalse(node0.isTrue());
1457:       assertFalse(node0.isNull());
1458:       assertFalse(iterable0.contains(node0));
1459:       assertNotNull(iterable0);
1460:       assertEquals(8, Node.FLAG_NO_THROWS);
1461:       assertEquals(48, Node.DIRECTIVES);
1462:       assertEquals(50, Node.FREE_CALL);
1463:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1464:       assertEquals(40, Node.ORIGINALNAME_PROP);
1465:       assertEquals(39, Node.EMPTY_BLOCK);
1466:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1467:       assertEquals(57, Node.REFLECTED_OBJECT);
1468:       assertEquals(54, Node.SLASH_V);
1469:       assertEquals(43, Node.IS_CONSTANT_NAME);
1470:       assertEquals(36, Node.QUOTED_PROP);
1471:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1472:       assertEquals(57, Node.LAST_PROP);
1473:       assertEquals(30, Node.VAR_ARGS_NAME);
1474:       assertEquals(53, Node.INPUT_ID);
1475:       assertEquals(52, Node.LENGTH);
1476:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1477:       assertEquals(55, Node.INFERRED_FUNCTION);
1478:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1479:       assertEquals(56, Node.CHANGE_TIME);
1480:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1481:       assertEquals(47, Node.IS_DISPATCHER);
1482:       assertEquals(37, Node.OPT_ARG_NAME);
1483:       assertEquals(2, Node.POST_FLAG);
1484:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1485:       assertEquals(29, Node.JSDOC_INFO_PROP);
1486:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1487:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1488:       assertEquals(46, Node.IS_NAMESPACE);
1489:       assertEquals(49, Node.DIRECT_EVAL);
1490:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1491:       assertEquals(12, Node.COLUMN_BITS);
1492:       assertEquals(4095, Node.COLUMN_MASK);
1493:       assertEquals(32, Node.INCRDECR_PROP);
1494:       assertEquals(1, Node.DECR_FLAG);
1495:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1496:       
1497:       boolean boolean1 = node1.isParamList();
1498:       assertFalse(node1.equals((Object)node2));
1499:       assertFalse(node1.equals((Object)node0));
1500:       assertTrue(boolean1 == boolean0);
1501:       assertFalse(node1.isOr());
1502:       assertFalse(node1.isAssignAdd());
1503:       assertFalse(node1.hasMoreThanOneChild());
1504:       assertFalse(node1.isLabel());
1505:       assertFalse(node1.isReturn());
1506:       assertFalse(node1.isWhile());
1507:       assertFalse(node1.isDo());
1508:       assertFalse(node1.isNumber());
1509:       assertFalse(node1.isNew());
1510:       assertFalse(node1.isAdd());
1511:       assertFalse(node1.isStringKey());
1512:       assertFalse(node1.isVar());
1513:       assertFalse(node1.isLabelName());
1514:       assertFalse(node1.isContinue());
1515:       assertFalse(node1.isCast());
1516:       assertEquals(0, node1.getChildCount());
1517:       assertFalse(node1.isObjectLit());
1518:       assertFalse(node1.isAnd());
1519:       assertFalse(node1.isComma());
1520:       assertFalse(node1.isNull());
1521:       assertFalse(node1.isDefaultCase());
1522:       assertFalse(node1.isNot());
1523:       assertFalse(node1.isGetProp());
1524:       assertFalse(node1.isTrue());
1525:       assertFalse(node1.isBreak());
1526:       assertFalse(node1.hasChildren());
1527:       assertFalse(node1.isDec());
1528:       assertFalse(node1.isAssign());
1529:       assertFalse(node1.isName());
1530:       assertFalse(node1.isTypeOf());
1531:       assertFalse(node1.isDelProp());
1532:       assertFalse(node1.isVoid());
1533:       assertFalse(node1.isCall());
1534:       assertFalse(node1.isExprResult());
1535:       assertFalse(node1.isGetElem());
1536:       assertFalse(node1.isIn());
1537:       assertFalse(node1.isNE());
1538:       assertFalse(node1.isString());
1539:       assertFalse(node1.isGetterDef());
1540:       assertFalse(node1.isCase());
1541:       assertFalse(node1.isEmpty());
1542:       assertFalse(node1.isInc());
1543:       assertFalse(node1.isArrayLit());
1544:       assertFalse(node1.isThrow());
1545:       assertFalse(node1.isDebugger());
1546:       assertFalse(node1.isSwitch());
1547:       assertEquals(36, node1.getType());
1548:       assertFalse(node1.isFunction());
1549:       assertFalse(node1.isFalse());
1550:       assertFalse(node1.isInstanceOf());
1551:       assertFalse(node1.isParamList());
1552:       assertEquals(131072, node1.getSourcePosition());
1553:       assertFalse(node1.isThis());
1554:       assertFalse(node1.isSetterDef());
1555:       assertFalse(node1.isScript());
1556:       assertFalse(node1.hasOneChild());
1557:       assertFalse(node1.isTry());
1558:       assertFalse(node1.isHook());
1559:       assertFalse(node1.isBlock());
1560:       assertFalse(node1.isFor());
1561:       assertEquals(0, node1.getCharno());
1562:       assertFalse(node1.isIf());
1563:       assertFalse(node1.isWith());
1564:       assertFalse(node1.isRegExp());
1565:       assertEquals(32, node1.getLineno());
1566:       assertFalse(node1.isCatch());
1567:       assertFalse(boolean1);
1568:       assertEquals(40, Node.ORIGINALNAME_PROP);
1569:       assertEquals(50, Node.FREE_CALL);
1570:       assertEquals(57, Node.REFLECTED_OBJECT);
1571:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1572:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1573:       assertEquals(48, Node.DIRECTIVES);
1574:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1575:       assertEquals(4095, Node.COLUMN_MASK);
1576:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1577:       assertEquals(49, Node.DIRECT_EVAL);
1578:       assertEquals(30, Node.VAR_ARGS_NAME);
1579:       assertEquals(57, Node.LAST_PROP);
1580:       assertEquals(8, Node.FLAG_NO_THROWS);
1581:       assertEquals(39, Node.EMPTY_BLOCK);
1582:       assertEquals(36, Node.QUOTED_PROP);
1583:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1584:       assertEquals(52, Node.LENGTH);
1585:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1586:       assertEquals(29, Node.JSDOC_INFO_PROP);
1587:       assertEquals(53, Node.INPUT_ID);
1588:       assertEquals(55, Node.INFERRED_FUNCTION);
1589:       assertEquals(47, Node.IS_DISPATCHER);
1590:       assertEquals(56, Node.CHANGE_TIME);
1591:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1592:       assertEquals(37, Node.OPT_ARG_NAME);
1593:       assertEquals(2, Node.POST_FLAG);
1594:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1595:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1596:       assertEquals(1, Node.DECR_FLAG);
1597:       assertEquals(32, Node.INCRDECR_PROP);
1598:       assertEquals(46, Node.IS_NAMESPACE);
1599:       assertEquals(43, Node.IS_CONSTANT_NAME);
1600:       assertEquals(12, Node.COLUMN_BITS);
1601:       assertEquals(54, Node.SLASH_V);
1602:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1603:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1604:       
1605:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
1606:       assertFalse(node0.equals((Object)node2));
1607:       assertFalse(node0.equals((Object)node1));
1608:       assertFalse(node1.equals((Object)node2));
1609:       assertFalse(node1.equals((Object)node0));
1610:       assertFalse(node2.equals((Object)node1));
1611:       assertFalse(node2.equals((Object)node0));
1612:       assertFalse(node0.isCase());
1613:       assertFalse(node0.isString());
1614:       assertFalse(node0.isInc());
1615:       assertTrue(node0.isNumber());
1616:       assertEquals(159744, node0.getSourcePosition());
1617:       assertFalse(node0.isThrow());
1618:       assertFalse(node0.isHook());
1619:       assertFalse(node0.isFor());
1620:       assertEquals(39, node0.getLineno());
1621:       assertFalse(node0.isGetterDef());
1622:       assertFalse(node0.isFalse());
1623:       assertFalse(node0.isArrayLit());
1624:       assertFalse(node0.isGetProp());
1625:       assertFalse(node0.isSwitch());
1626:       assertFalse(node0.isDebugger());
1627:       assertFalse(node0.isAnd());
1628:       assertFalse(node0.isWith());
1629:       assertFalse(node0.isScript());
1630:       assertFalse(node0.isCatch());
1631:       assertFalse(node0.isInstanceOf());
1632:       assertFalse(node0.isTry());
1633:       assertFalse(node0.isFunction());
1634:       assertFalse(node0.isRegExp());
1635:       assertFalse(node0.isThis());
1636:       assertFalse(node0.isIf());
1637:       assertFalse(node0.isSetterDef());
1638:       assertFalse(node0.isIn());
1639:       assertFalse(node0.isNE());
1640:       assertEquals(0, node0.getCharno());
1641:       assertFalse(node0.isDo());
1642:       assertEquals(39, node0.getType());
1643:       assertFalse(node0.isWhile());
1644:       assertFalse(node0.isContinue());
1645:       assertFalse(node0.hasMoreThanOneChild());
1646:       assertFalse(node0.isLabel());
1647:       assertFalse(node0.isAssignAdd());
1648:       assertFalse(node0.isNew());
1649:       assertFalse(node0.isVar());
1650:       assertFalse(node0.isDec());
1651:       assertFalse(node0.hasChildren());
1652:       assertFalse(node0.isBlock());
1653:       assertFalse(node0.isReturn());
1654:       assertFalse(node0.isLabelName());
1655:       assertFalse(node0.isStringKey());
1656:       assertFalse(node0.isCast());
1657:       assertFalse(node0.hasOneChild());
1658:       assertFalse(node0.isParamList());
1659:       assertFalse(node0.isNot());
1660:       assertFalse(node0.isObjectLit());
1661:       assertFalse(node0.isDefaultCase());
1662:       assertFalse(node0.isExprResult());
1663:       assertEquals(0, node0.getChildCount());
1664:       assertFalse(node0.isComma());
1665:       assertFalse(node0.isEmpty());
1666:       assertFalse(node0.isAssign());
1667:       assertFalse(node0.isDelProp());
1668:       assertFalse(node0.isName());
1669:       assertFalse(node0.isTypeOf());
1670:       assertFalse(node0.isBreak());
1671:       assertFalse(node0.isCall());
1672:       assertFalse(node0.isGetElem());
1673:       assertFalse(node0.isOr());
1674:       assertFalse(node0.isAdd());
1675:       assertFalse(node0.isVoid());
1676:       assertFalse(node0.isTrue());
1677:       assertFalse(node0.isNull());
1678:       assertFalse(node1.isOr());
1679:       assertFalse(node1.isAssignAdd());
1680:       assertFalse(node1.hasMoreThanOneChild());
1681:       assertFalse(node1.isLabel());
1682:       assertFalse(node1.isReturn());
1683:       assertFalse(node1.isWhile());
1684:       assertFalse(node1.isDo());
1685:       assertFalse(node1.isNumber());
1686:       assertFalse(node1.isNew());
1687:       assertFalse(node1.isAdd());
1688:       assertFalse(node1.isStringKey());
1689:       assertFalse(node1.isVar());
1690:       assertFalse(node1.isLabelName());
1691:       assertFalse(node1.isContinue());
1692:       assertFalse(node1.isCast());
1693:       assertEquals(0, node1.getChildCount());
1694:       assertFalse(node1.isObjectLit());
1695:       assertFalse(node1.isAnd());
1696:       assertFalse(node1.isComma());
1697:       assertFalse(node1.isNull());
1698:       assertFalse(node1.isDefaultCase());
1699:       assertFalse(node1.isNot());
1700:       assertFalse(node1.isGetProp());
1701:       assertFalse(node1.isTrue());
1702:       assertFalse(node1.isBreak());
1703:       assertFalse(node1.hasChildren());
1704:       assertFalse(node1.isDec());
1705:       assertFalse(node1.isAssign());
1706:       assertFalse(node1.isName());
1707:       assertFalse(node1.isTypeOf());
1708:       assertFalse(node1.isDelProp());
1709:       assertFalse(node1.isVoid());
1710:       assertFalse(node1.isCall());
1711:       assertFalse(node1.isExprResult());
1712:       assertFalse(node1.isGetElem());
1713:       assertFalse(node1.isIn());
1714:       assertFalse(node1.isNE());
1715:       assertFalse(node1.isString());
1716:       assertFalse(node1.isGetterDef());
1717:       assertFalse(node1.isCase());
1718:       assertFalse(node1.isEmpty());
1719:       assertFalse(node1.isInc());
1720:       assertFalse(node1.isArrayLit());
1721:       assertFalse(node1.isThrow());
1722:       assertFalse(node1.isDebugger());
1723:       assertFalse(node1.isSwitch());
1724:       assertEquals(36, node1.getType());
1725:       assertFalse(node1.isFunction());
1726:       assertFalse(node1.isFalse());
1727:       assertFalse(node1.isInstanceOf());
1728:       assertFalse(node1.isParamList());
1729:       assertEquals(131072, node1.getSourcePosition());
1730:       assertFalse(node1.isThis());
1731:       assertFalse(node1.isSetterDef());
1732:       assertFalse(node1.isScript());
1733:       assertFalse(node1.hasOneChild());
1734:       assertFalse(node1.isTry());
1735:       assertFalse(node1.isHook());
1736:       assertFalse(node1.isBlock());
1737:       assertFalse(node1.isFor());
1738:       assertEquals(0, node1.getCharno());
1739:       assertFalse(node1.isIf());
1740:       assertFalse(node1.isWith());
1741:       assertFalse(node1.isRegExp());
1742:       assertEquals(32, node1.getLineno());
1743:       assertFalse(node1.isCatch());
1744:       assertFalse(node2.isCase());
1745:       assertFalse(node2.isString());
1746:       assertFalse(node2.isSwitch());
1747:       assertEquals(0, node2.getType());
1748:       assertTrue(node2.hasChildren());
1749:       assertFalse(node2.isHook());
1750:       assertEquals(1, node2.getChildCount());
1751:       assertFalse(node2.isThrow());
1752:       assertFalse(node2.isEmpty());
1753:       assertFalse(node2.isIf());
1754:       assertFalse(node2.isBreak());
1755:       assertFalse(node2.isDelProp());
1756:       assertFalse(node2.isInc());
1757:       assertFalse(node2.isTrue());
1758:       assertFalse(node2.isNE());
1759:       assertFalse(node2.isIn());
1760:       assertFalse(node2.isCatch());
1761:       assertFalse(node2.isDefaultCase());
1762:       assertFalse(node2.isThis());
1763:       assertFalse(node2.isInstanceOf());
1764:       assertFalse(node2.isWith());
1765:       assertFalse(node2.isRegExp());
1766:       assertFalse(node2.isStringKey());
1767:       assertFalse(node2.isFor());
1768:       assertFalse(node2.isArrayLit());
1769:       assertFalse(node2.isLabelName());
1770:       assertFalse(node2.isTry());
1771:       assertEquals((-1), node2.getCharno());
1772:       assertFalse(node2.isParamList());
1773:       assertFalse(node2.isScript());
1774:       assertFalse(node2.isNumber());
1775:       assertFalse(node2.isGetterDef());
1776:       assertFalse(node2.isContinue());
1777:       assertFalse(node2.isWhile());
1778:       assertEquals((-1), node2.getLineno());
1779:       assertFalse(node2.isDo());
1780:       assertFalse(node2.isBlock());
1781:       assertFalse(node2.isLabel());
1782:       assertFalse(node2.isAssignAdd());
1783:       assertFalse(node2.isReturn());
1784:       assertFalse(node2.isTypeOf());
1785:       assertFalse(node2.isDec());
1786:       assertFalse(node2.hasMoreThanOneChild());
1787:       assertFalse(node2.isAssign());
1788:       assertFalse(node2.isName());
1789:       assertFalse(node2.isGetElem());
1790:       assertFalse(node2.isCall());
1791:       assertFalse(node2.isVar());
1792:       assertFalse(node2.isNew());
1793:       assertFalse(node2.isSetterDef());
1794:       assertFalse(node2.isAdd());
1795:       assertFalse(node2.isNull());
1796:       assertFalse(node2.isOr());
1797:       assertFalse(node2.isAnd());
1798:       assertFalse(node2.isVoid());
1799:       assertFalse(node2.isExprResult());
1800:       assertFalse(node2.isFunction());
1801:       assertFalse(node2.isComma());
1802:       assertFalse(node2.isFalse());
1803:       assertTrue(node2.hasOneChild());
1804:       assertFalse(node2.isCast());
1805:       assertFalse(node2.isDebugger());
1806:       assertFalse(node2.isGetProp());
1807:       assertEquals((-1), node2.getSourcePosition());
1808:       assertFalse(node2.isNot());
1809:       assertFalse(node2.isObjectLit());
1810:       assertNotNull(node_NodeMismatch0);
1811:       assertEquals(8, Node.FLAG_NO_THROWS);
1812:       assertEquals(48, Node.DIRECTIVES);
1813:       assertEquals(50, Node.FREE_CALL);
1814:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1815:       assertEquals(40, Node.ORIGINALNAME_PROP);
1816:       assertEquals(39, Node.EMPTY_BLOCK);
1817:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1818:       assertEquals(57, Node.REFLECTED_OBJECT);
1819:       assertEquals(54, Node.SLASH_V);
1820:       assertEquals(43, Node.IS_CONSTANT_NAME);
1821:       assertEquals(36, Node.QUOTED_PROP);
1822:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1823:       assertEquals(57, Node.LAST_PROP);
1824:       assertEquals(30, Node.VAR_ARGS_NAME);
1825:       assertEquals(53, Node.INPUT_ID);
1826:       assertEquals(52, Node.LENGTH);
1827:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1828:       assertEquals(55, Node.INFERRED_FUNCTION);
1829:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1830:       assertEquals(56, Node.CHANGE_TIME);
1831:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1832:       assertEquals(47, Node.IS_DISPATCHER);
1833:       assertEquals(37, Node.OPT_ARG_NAME);
1834:       assertEquals(2, Node.POST_FLAG);
1835:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1836:       assertEquals(29, Node.JSDOC_INFO_PROP);
1837:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1838:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1839:       assertEquals(46, Node.IS_NAMESPACE);
1840:       assertEquals(49, Node.DIRECT_EVAL);
1841:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1842:       assertEquals(12, Node.COLUMN_BITS);
1843:       assertEquals(4095, Node.COLUMN_MASK);
1844:       assertEquals(32, Node.INCRDECR_PROP);
1845:       assertEquals(1, Node.DECR_FLAG);
1846:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1847:       assertEquals(40, Node.ORIGINALNAME_PROP);
1848:       assertEquals(50, Node.FREE_CALL);
1849:       assertEquals(57, Node.REFLECTED_OBJECT);
1850:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1851:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1852:       assertEquals(48, Node.DIRECTIVES);
1853:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1854:       assertEquals(4095, Node.COLUMN_MASK);
1855:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1856:       assertEquals(49, Node.DIRECT_EVAL);
1857:       assertEquals(30, Node.VAR_ARGS_NAME);
1858:       assertEquals(57, Node.LAST_PROP);
1859:       assertEquals(8, Node.FLAG_NO_THROWS);
1860:       assertEquals(39, Node.EMPTY_BLOCK);
1861:       assertEquals(36, Node.QUOTED_PROP);
1862:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1863:       assertEquals(52, Node.LENGTH);
1864:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1865:       assertEquals(29, Node.JSDOC_INFO_PROP);
1866:       assertEquals(53, Node.INPUT_ID);
1867:       assertEquals(55, Node.INFERRED_FUNCTION);
1868:       assertEquals(47, Node.IS_DISPATCHER);
1869:       assertEquals(56, Node.CHANGE_TIME);
1870:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1871:       assertEquals(37, Node.OPT_ARG_NAME);
1872:       assertEquals(2, Node.POST_FLAG);
1873:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1874:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1875:       assertEquals(1, Node.DECR_FLAG);
1876:       assertEquals(32, Node.INCRDECR_PROP);
1877:       assertEquals(46, Node.IS_NAMESPACE);
1878:       assertEquals(43, Node.IS_CONSTANT_NAME);
1879:       assertEquals(12, Node.COLUMN_BITS);
1880:       assertEquals(54, Node.SLASH_V);
1881:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1882:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1883:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1884:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1885:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1886:       assertEquals(48, Node.DIRECTIVES);
1887:       assertEquals(40, Node.ORIGINALNAME_PROP);
1888:       assertEquals(39, Node.EMPTY_BLOCK);
1889:       assertEquals(57, Node.REFLECTED_OBJECT);
1890:       assertEquals(55, Node.INFERRED_FUNCTION);
1891:       assertEquals(52, Node.LENGTH);
1892:       assertEquals(54, Node.SLASH_V);
1893:       assertEquals(8, Node.FLAG_NO_THROWS);
1894:       assertEquals(50, Node.FREE_CALL);
1895:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1896:       assertEquals(1, Node.DECR_FLAG);
1897:       assertEquals(49, Node.DIRECT_EVAL);
1898:       assertEquals(12, Node.COLUMN_BITS);
1899:       assertEquals(32, Node.INCRDECR_PROP);
1900:       assertEquals(4095, Node.COLUMN_MASK);
1901:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1902:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1903:       assertEquals(47, Node.IS_DISPATCHER);
1904:       assertEquals(29, Node.JSDOC_INFO_PROP);
1905:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1906:       assertEquals(56, Node.CHANGE_TIME);
1907:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1908:       assertEquals(37, Node.OPT_ARG_NAME);
1909:       assertEquals(46, Node.IS_NAMESPACE);
1910:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1911:       assertEquals(36, Node.QUOTED_PROP);
1912:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1913:       assertEquals(57, Node.LAST_PROP);
1914:       assertEquals(43, Node.IS_CONSTANT_NAME);
1915:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1916:       assertEquals(53, Node.INPUT_ID);
1917:       assertEquals(2, Node.POST_FLAG);
1918:       assertEquals(30, Node.VAR_ARGS_NAME);
1919:       
1920:       Node node3 = null;
1921:       try {
1922:         node3 = new Node(39, node1, node2);
1923:         fail("Expecting exception: IllegalArgumentException");
1924:       
1925:       } catch(IllegalArgumentException e) {
1926:          //
1927:          // first new child has existing parent
1928:          //
1929:          verifyException("com.google.common.base.Preconditions", e);
1930:       }
1931:   }
1932: }
RegularFileObject[/tmp/EvoSuite_185_1628161395488/com/google/javascript/rhino/Node_185_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:15 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_185_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_185_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_185_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:03:15.892 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotNull(node0);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node1 = Node.newString(36, "UNKNOWN", 32, 0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(36, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCatch());
assertNotNull(node1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Object object0 = node1.getProp(0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(36, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCatch());
assertNull(object0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node node2 = new Node(0, node1, node1, node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(36, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertEquals(0, node2.getType());
assertTrue(node2.hasChildren());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isStringKey());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isOr());
assertFalse(node2.isAnd());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertTrue(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertNotNull(node2);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean0 = node2.isString();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(36, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertEquals(0, node2.getType());
assertTrue(node2.hasChildren());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isStringKey());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isOr());
assertFalse(node2.isAnd());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertTrue(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(boolean0);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

node0.setLineno(39);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(39, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

node0.putProp(4095, (Object) null);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(39, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

int int0 = node0.getIndexOfChild(node1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(39, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(36, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCatch());
assertEquals((-1), int0);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(39, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean1 = node1.isParamList();
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(36, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(boolean1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertTrue(node0.isNumber());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertEquals(39, node0.getLineno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(0, node0.getCharno());
assertFalse(node0.isDo());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isTrue());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(36, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isParamList());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertEquals(32, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertEquals(0, node2.getType());
assertTrue(node2.hasChildren());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isStringKey());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isTry());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isNull());
assertFalse(node2.isOr());
assertFalse(node2.isAnd());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertTrue(node2.hasOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertNotNull(node_NodeMismatch0);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node3 = new Node(39, node1, node2);

[MASTER] 11:03:16.426 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_187_1628161395909/com/google/javascript/rhino/Node_187_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_187_1628161395909/com/google/javascript/rhino/Node_187_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:16.426 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:16.426 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:16.426 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1046
[MASTER] 11:03:16.427 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_187_1628161395909/com/google/javascript/rhino/Node_187_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:15 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_187_tmp__ESTest extends Node_187_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(1.0);
21:       assertFalse(node0.isIf());
22:       assertFalse(node0.isFor());
23:       assertFalse(node0.isNE());
24:       assertFalse(node0.isEmpty());
25:       assertFalse(node0.isArrayLit());
26:       assertFalse(node0.isDelProp());
27:       assertFalse(node0.isFunction());
28:       assertFalse(node0.isRegExp());
29:       assertFalse(node0.isDefaultCase());
30:       assertFalse(node0.isInc());
31:       assertFalse(node0.isVoid());
32:       assertFalse(node0.isIn());
33:       assertFalse(node0.isTrue());
34:       assertFalse(node0.isBreak());
35:       assertFalse(node0.isNull());
36:       assertFalse(node0.isThrow());
37:       assertFalse(node0.isSetterDef());
38:       assertFalse(node0.isCall());
39:       assertFalse(node0.isGetProp());
40:       assertFalse(node0.isName());
41:       assertFalse(node0.isComma());
42:       assertFalse(node0.isFalse());
43:       assertFalse(node0.isString());
44:       assertFalse(node0.isWhile());
45:       assertFalse(node0.isAnd());
46:       assertTrue(node0.isNumber());
47:       assertFalse(node0.isObjectLit());
48:       assertFalse(node0.isDebugger());
49:       assertEquals((-1), node0.getSourcePosition());
50:       assertFalse(node0.isNot());
51:       assertFalse(node0.hasChildren());
52:       assertFalse(node0.isGetElem());
53:       assertFalse(node0.hasOneChild());
54:       assertFalse(node0.isLabelName());
55:       assertEquals((-1), node0.getLineno());
56:       assertFalse(node0.isReturn());
57:       assertFalse(node0.isLabel());
58:       assertFalse(node0.isAssignAdd());
59:       assertFalse(node0.isCast());
60:       assertFalse(node0.isContinue());
61:       assertFalse(node0.hasMoreThanOneChild());
62:       assertFalse(node0.isTypeOf());
63:       assertFalse(node0.isDec());
64:       assertFalse(node0.isAssign());
65:       assertFalse(node0.isWith());
66:       assertFalse(node0.isExprResult());
67:       assertFalse(node0.isNew());
68:       assertFalse(node0.isDo());
69:       assertFalse(node0.isAdd());
70:       assertFalse(node0.isOr());
71:       assertFalse(node0.isStringKey());
72:       assertFalse(node0.isParamList());
73:       assertFalse(node0.isHook());
74:       assertFalse(node0.isBlock());
75:       assertFalse(node0.isInstanceOf());
76:       assertFalse(node0.isVar());
77:       assertFalse(node0.isCatch());
78:       assertFalse(node0.isThis());
79:       assertEquals(0, node0.getChildCount());
80:       assertEquals(39, node0.getType());
81:       assertFalse(node0.isScript());
82:       assertFalse(node0.isSwitch());
83:       assertFalse(node0.isCase());
84:       assertFalse(node0.isTry());
85:       assertEquals((-1), node0.getCharno());
86:       assertFalse(node0.isGetterDef());
87:       assertNotNull(node0);
88:       assertEquals(57, Node.LAST_PROP);
89:       assertEquals(54, Node.SLASH_V);
90:       assertEquals(49, Node.DIRECT_EVAL);
91:       assertEquals(15, Node.NO_SIDE_EFFECTS);
92:       assertEquals(1, Node.DECR_FLAG);
93:       assertEquals(57, Node.REFLECTED_OBJECT);
94:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
95:       assertEquals(52, Node.LENGTH);
96:       assertEquals(46, Node.IS_NAMESPACE);
97:       assertEquals(50, Node.FREE_CALL);
98:       assertEquals(51, Node.STATIC_SOURCE_FILE);
99:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
100:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
101:       assertEquals(56, Node.CHANGE_TIME);
102:       assertEquals(32, Node.INCRDECR_PROP);
103:       assertEquals(48, Node.DIRECTIVES);
104:       assertEquals(37, Node.OPT_ARG_NAME);
105:       assertEquals(12, Node.COLUMN_BITS);
106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
107:       assertEquals(4095, Node.COLUMN_MASK);
108:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
109:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
110:       assertEquals(43, Node.IS_CONSTANT_NAME);
111:       assertEquals(53, Node.INPUT_ID);
112:       assertEquals(55, Node.INFERRED_FUNCTION);
113:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
114:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
115:       assertEquals(36, Node.QUOTED_PROP);
116:       assertEquals(2, Node.POST_FLAG);
117:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(39, Node.EMPTY_BLOCK);
120:       assertEquals(29, Node.JSDOC_INFO_PROP);
121:       assertEquals(40, Node.ORIGINALNAME_PROP);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertEquals(47, Node.IS_DISPATCHER);
124:       
125:       Node node1 = Node.newString(36, "UNKNOWN", 32, 0);
126:       assertFalse(node1.equals((Object)node0));
127:       assertFalse(node1.isTrue());
128:       assertFalse(node1.isFunction());
129:       assertFalse(node1.isDebugger());
130:       assertEquals(36, node1.getType());
131:       assertFalse(node1.isRegExp());
132:       assertFalse(node1.isTry());
133:       assertFalse(node1.isVoid());
134:       assertFalse(node1.isDefaultCase());
135:       assertFalse(node1.isEmpty());
136:       assertFalse(node1.isDelProp());
137:       assertFalse(node1.isIf());
138:       assertFalse(node1.isNull());
139:       assertFalse(node1.isFor());
140:       assertFalse(node1.isNE());
141:       assertFalse(node1.isCatch());
142:       assertFalse(node1.isCall());
143:       assertFalse(node1.isName());
144:       assertFalse(node1.isSwitch());
145:       assertFalse(node1.isNew());
146:       assertFalse(node1.isHook());
147:       assertFalse(node1.isBlock());
148:       assertFalse(node1.isVar());
149:       assertFalse(node1.isCase());
150:       assertFalse(node1.isDo());
151:       assertFalse(node1.isAdd());
152:       assertFalse(node1.isParamList());
153:       assertFalse(node1.isNumber());
154:       assertFalse(node1.isGetterDef());
155:       assertFalse(node1.isLabel());
156:       assertFalse(node1.isAssignAdd());
157:       assertFalse(node1.isStringKey());
158:       assertFalse(node1.isArrayLit());
159:       assertFalse(node1.isLabelName());
160:       assertEquals(0, node1.getChildCount());
161:       assertEquals(0, node1.getCharno());
162:       assertFalse(node1.isExprResult());
163:       assertFalse(node1.hasOneChild());
164:       assertFalse(node1.isNot());
165:       assertFalse(node1.isObjectLit());
166:       assertFalse(node1.isScript());
167:       assertFalse(node1.isThis());
168:       assertFalse(node1.isComma());
169:       assertFalse(node1.isGetProp());
170:       assertFalse(node1.isTypeOf());
171:       assertFalse(node1.isDec());
172:       assertFalse(node1.isOr());
173:       assertFalse(node1.isReturn());
174:       assertFalse(node1.hasChildren());
175:       assertEquals(131072, node1.getSourcePosition());
176:       assertFalse(node1.hasMoreThanOneChild());
177:       assertFalse(node1.isAssign());
178:       assertFalse(node1.isWith());
179:       assertEquals(32, node1.getLineno());
180:       assertFalse(node1.isBreak());
181:       assertFalse(node1.isInstanceOf());
182:       assertFalse(node1.isGetElem());
183:       assertFalse(node1.isInc());
184:       assertFalse(node1.isWhile());
185:       assertFalse(node1.isString());
186:       assertFalse(node1.isIn());
187:       assertFalse(node1.isSetterDef());
188:       assertFalse(node1.isThrow());
189:       assertFalse(node1.isAnd());
190:       assertFalse(node1.isContinue());
191:       assertFalse(node1.isFalse());
192:       assertFalse(node1.isCast());
193:       assertNotNull(node1);
194:       assertEquals(32, Node.INCRDECR_PROP);
195:       assertEquals(37, Node.OPT_ARG_NAME);
196:       assertEquals(51, Node.STATIC_SOURCE_FILE);
197:       assertEquals(12, Node.COLUMN_BITS);
198:       assertEquals(46, Node.IS_NAMESPACE);
199:       assertEquals(56, Node.CHANGE_TIME);
200:       assertEquals(30, Node.VAR_ARGS_NAME);
201:       assertEquals(49, Node.DIRECT_EVAL);
202:       assertEquals(47, Node.IS_DISPATCHER);
203:       assertEquals(2, Node.POST_FLAG);
204:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
205:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
206:       assertEquals(54, Node.SLASH_V);
207:       assertEquals(43, Node.IS_CONSTANT_NAME);
208:       assertEquals(50, Node.FREE_CALL);
209:       assertEquals(1, Node.DECR_FLAG);
210:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
211:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
212:       assertEquals(48, Node.DIRECTIVES);
213:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
214:       assertEquals(40, Node.ORIGINALNAME_PROP);
215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
216:       assertEquals(4095, Node.COLUMN_MASK);
217:       assertEquals(52, Node.LENGTH);
218:       assertEquals(53, Node.INPUT_ID);
219:       assertEquals(57, Node.REFLECTED_OBJECT);
220:       assertEquals(57, Node.LAST_PROP);
221:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
222:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
223:       assertEquals(29, Node.JSDOC_INFO_PROP);
224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
225:       assertEquals(36, Node.QUOTED_PROP);
226:       assertEquals(55, Node.INFERRED_FUNCTION);
227:       assertEquals(39, Node.EMPTY_BLOCK);
228:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
229:       assertEquals(8, Node.FLAG_NO_THROWS);
230:       
231:       Object object0 = node1.getProp(0);
232:       assertFalse(node1.equals((Object)node0));
233:       assertFalse(node1.isTrue());
234:       assertFalse(node1.isFunction());
235:       assertFalse(node1.isDebugger());
236:       assertEquals(36, node1.getType());
237:       assertFalse(node1.isRegExp());
238:       assertFalse(node1.isTry());
239:       assertFalse(node1.isVoid());
240:       assertFalse(node1.isDefaultCase());
241:       assertFalse(node1.isEmpty());
242:       assertFalse(node1.isDelProp());
243:       assertFalse(node1.isIf());
244:       assertFalse(node1.isNull());
245:       assertFalse(node1.isFor());
246:       assertFalse(node1.isNE());
247:       assertFalse(node1.isCatch());
248:       assertFalse(node1.isCall());
249:       assertFalse(node1.isName());
250:       assertFalse(node1.isSwitch());
251:       assertFalse(node1.isNew());
252:       assertFalse(node1.isHook());
253:       assertFalse(node1.isBlock());
254:       assertFalse(node1.isVar());
255:       assertFalse(node1.isCase());
256:       assertFalse(node1.isDo());
257:       assertFalse(node1.isAdd());
258:       assertFalse(node1.isParamList());
259:       assertFalse(node1.isNumber());
260:       assertFalse(node1.isGetterDef());
261:       assertFalse(node1.isLabel());
262:       assertFalse(node1.isAssignAdd());
263:       assertFalse(node1.isStringKey());
264:       assertFalse(node1.isArrayLit());
265:       assertFalse(node1.isLabelName());
266:       assertEquals(0, node1.getChildCount());
267:       assertEquals(0, node1.getCharno());
268:       assertFalse(node1.isExprResult());
269:       assertFalse(node1.hasOneChild());
270:       assertFalse(node1.isNot());
271:       assertFalse(node1.isObjectLit());
272:       assertFalse(node1.isScript());
273:       assertFalse(node1.isThis());
274:       assertFalse(node1.isComma());
275:       assertFalse(node1.isGetProp());
276:       assertFalse(node1.isTypeOf());
277:       assertFalse(node1.isDec());
278:       assertFalse(node1.isOr());
279:       assertFalse(node1.isReturn());
280:       assertFalse(node1.hasChildren());
281:       assertEquals(131072, node1.getSourcePosition());
282:       assertFalse(node1.hasMoreThanOneChild());
283:       assertFalse(node1.isAssign());
284:       assertFalse(node1.isWith());
285:       assertEquals(32, node1.getLineno());
286:       assertFalse(node1.isBreak());
287:       assertFalse(node1.isInstanceOf());
288:       assertFalse(node1.isGetElem());
289:       assertFalse(node1.isInc());
290:       assertFalse(node1.isWhile());
291:       assertFalse(node1.isString());
292:       assertFalse(node1.isIn());
293:       assertFalse(node1.isSetterDef());
294:       assertFalse(node1.isThrow());
295:       assertFalse(node1.isAnd());
296:       assertFalse(node1.isContinue());
297:       assertFalse(node1.isFalse());
298:       assertFalse(node1.isCast());
299:       assertNull(object0);
300:       assertEquals(32, Node.INCRDECR_PROP);
301:       assertEquals(37, Node.OPT_ARG_NAME);
302:       assertEquals(51, Node.STATIC_SOURCE_FILE);
303:       assertEquals(12, Node.COLUMN_BITS);
304:       assertEquals(46, Node.IS_NAMESPACE);
305:       assertEquals(56, Node.CHANGE_TIME);
306:       assertEquals(30, Node.VAR_ARGS_NAME);
307:       assertEquals(49, Node.DIRECT_EVAL);
308:       assertEquals(47, Node.IS_DISPATCHER);
309:       assertEquals(2, Node.POST_FLAG);
310:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
312:       assertEquals(54, Node.SLASH_V);
313:       assertEquals(43, Node.IS_CONSTANT_NAME);
314:       assertEquals(50, Node.FREE_CALL);
315:       assertEquals(1, Node.DECR_FLAG);
316:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
317:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
318:       assertEquals(48, Node.DIRECTIVES);
319:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
320:       assertEquals(40, Node.ORIGINALNAME_PROP);
321:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
322:       assertEquals(4095, Node.COLUMN_MASK);
323:       assertEquals(52, Node.LENGTH);
324:       assertEquals(53, Node.INPUT_ID);
325:       assertEquals(57, Node.REFLECTED_OBJECT);
326:       assertEquals(57, Node.LAST_PROP);
327:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
328:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
329:       assertEquals(29, Node.JSDOC_INFO_PROP);
330:       assertEquals(15, Node.NO_SIDE_EFFECTS);
331:       assertEquals(36, Node.QUOTED_PROP);
332:       assertEquals(55, Node.INFERRED_FUNCTION);
333:       assertEquals(39, Node.EMPTY_BLOCK);
334:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
335:       assertEquals(8, Node.FLAG_NO_THROWS);
336:       
337:       Node node2 = Node.newString(46, "UNKNOWN");
338:       assertFalse(node2.equals((Object)node0));
339:       assertFalse(node2.equals((Object)node1));
340:       assertNotSame(node2, node1);
341:       assertFalse(node2.isHook());
342:       assertEquals((-1), node2.getCharno());
343:       assertFalse(node2.isThrow());
344:       assertFalse(node2.isCase());
345:       assertFalse(node2.isGetProp());
346:       assertFalse(node2.isInc());
347:       assertFalse(node2.isString());
348:       assertFalse(node2.isObjectLit());
349:       assertEquals(46, node2.getType());
350:       assertFalse(node2.isAnd());
351:       assertFalse(node2.isSwitch());
352:       assertFalse(node2.isFalse());
353:       assertFalse(node2.isTrue());
354:       assertEquals((-1), node2.getSourcePosition());
355:       assertFalse(node2.isDefaultCase());
356:       assertFalse(node2.isDebugger());
357:       assertFalse(node2.isNot());
358:       assertFalse(node2.isEmpty());
359:       assertFalse(node2.isOr());
360:       assertFalse(node2.isReturn());
361:       assertFalse(node2.isWhile());
362:       assertFalse(node2.isTypeOf());
363:       assertFalse(node2.isBreak());
364:       assertFalse(node2.hasChildren());
365:       assertFalse(node2.isDelProp());
366:       assertFalse(node2.isComma());
367:       assertFalse(node2.isVoid());
368:       assertFalse(node2.isDec());
369:       assertFalse(node2.isAssign());
370:       assertFalse(node2.isGetElem());
371:       assertFalse(node2.isCall());
372:       assertFalse(node2.isExprResult());
373:       assertFalse(node2.isBlock());
374:       assertFalse(node2.isName());
375:       assertFalse(node2.isStringKey());
376:       assertFalse(node2.isVar());
377:       assertFalse(node2.isNull());
378:       assertFalse(node2.isSetterDef());
379:       assertFalse(node2.isDo());
380:       assertFalse(node2.isNew());
381:       assertFalse(node2.isAdd());
382:       assertEquals(0, node2.getChildCount());
383:       assertFalse(node2.isLabel());
384:       assertFalse(node2.isAssignAdd());
385:       assertFalse(node2.isParamList());
386:       assertFalse(node2.isFunction());
387:       assertFalse(node2.isLabelName());
388:       assertFalse(node2.isContinue());
389:       assertFalse(node2.isCast());
390:       assertFalse(node2.hasOneChild());
391:       assertFalse(node2.isArrayLit());
392:       assertFalse(node2.isTry());
393:       assertFalse(node2.isFor());
394:       assertFalse(node2.isScript());
395:       assertFalse(node2.isNumber());
396:       assertFalse(node2.isGetterDef());
397:       assertFalse(node2.hasMoreThanOneChild());
398:       assertFalse(node2.isIn());
399:       assertEquals((-1), node2.getLineno());
400:       assertFalse(node2.isThis());
401:       assertFalse(node2.isNE());
402:       assertFalse(node2.isRegExp());
403:       assertFalse(node2.isIf());
404:       assertFalse(node2.isWith());
405:       assertFalse(node2.isCatch());
406:       assertFalse(node2.isInstanceOf());
407:       assertNotNull(node2);
408:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
409:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
410:       assertEquals(43, Node.IS_CONSTANT_NAME);
411:       assertEquals(48, Node.DIRECTIVES);
412:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
413:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
414:       assertEquals(4095, Node.COLUMN_MASK);
415:       assertEquals(29, Node.JSDOC_INFO_PROP);
416:       assertEquals(56, Node.CHANGE_TIME);
417:       assertEquals(47, Node.IS_DISPATCHER);
418:       assertEquals(57, Node.REFLECTED_OBJECT);
419:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
420:       assertEquals(53, Node.INPUT_ID);
421:       assertEquals(39, Node.EMPTY_BLOCK);
422:       assertEquals(36, Node.QUOTED_PROP);
423:       assertEquals(15, Node.NO_SIDE_EFFECTS);
424:       assertEquals(55, Node.INFERRED_FUNCTION);
425:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
426:       assertEquals(52, Node.LENGTH);
427:       assertEquals(8, Node.FLAG_NO_THROWS);
428:       assertEquals(1, Node.DECR_FLAG);
429:       assertEquals(49, Node.DIRECT_EVAL);
430:       assertEquals(30, Node.VAR_ARGS_NAME);
431:       assertEquals(51, Node.STATIC_SOURCE_FILE);
432:       assertEquals(57, Node.LAST_PROP);
433:       assertEquals(12, Node.COLUMN_BITS);
434:       assertEquals(32, Node.INCRDECR_PROP);
435:       assertEquals(46, Node.IS_NAMESPACE);
436:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
437:       assertEquals(2, Node.POST_FLAG);
438:       assertEquals(37, Node.OPT_ARG_NAME);
439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
440:       assertEquals(40, Node.ORIGINALNAME_PROP);
441:       assertEquals(50, Node.FREE_CALL);
442:       assertEquals(54, Node.SLASH_V);
443:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
444:       
445:       boolean boolean0 = node1.isContinue();
446:       assertFalse(node1.equals((Object)node0));
447:       assertFalse(node1.equals((Object)node2));
448:       assertNotSame(node1, node2);
449:       assertFalse(node1.isTrue());
450:       assertFalse(node1.isFunction());
451:       assertFalse(node1.isDebugger());
452:       assertEquals(36, node1.getType());
453:       assertFalse(node1.isRegExp());
454:       assertFalse(node1.isTry());
455:       assertFalse(node1.isVoid());
456:       assertFalse(node1.isDefaultCase());
457:       assertFalse(node1.isEmpty());
458:       assertFalse(node1.isDelProp());
459:       assertFalse(node1.isIf());
460:       assertFalse(node1.isNull());
461:       assertFalse(node1.isFor());
462:       assertFalse(node1.isNE());
463:       assertFalse(node1.isCatch());
464:       assertFalse(node1.isCall());
465:       assertFalse(node1.isName());
466:       assertFalse(node1.isSwitch());
467:       assertFalse(node1.isNew());
468:       assertFalse(node1.isHook());
469:       assertFalse(node1.isBlock());
470:       assertFalse(node1.isVar());
471:       assertFalse(node1.isCase());
472:       assertFalse(node1.isDo());
473:       assertFalse(node1.isAdd());
474:       assertFalse(node1.isParamList());
475:       assertFalse(node1.isNumber());
476:       assertFalse(node1.isGetterDef());
477:       assertFalse(node1.isLabel());
478:       assertFalse(node1.isAssignAdd());
479:       assertFalse(node1.isStringKey());
480:       assertFalse(node1.isArrayLit());
481:       assertFalse(node1.isLabelName());
482:       assertEquals(0, node1.getChildCount());
483:       assertEquals(0, node1.getCharno());
484:       assertFalse(node1.isExprResult());
485:       assertFalse(node1.hasOneChild());
486:       assertFalse(node1.isNot());
487:       assertFalse(node1.isObjectLit());
488:       assertFalse(node1.isScript());
489:       assertFalse(node1.isThis());
490:       assertFalse(node1.isComma());
491:       assertFalse(node1.isGetProp());
492:       assertFalse(node1.isTypeOf());
493:       assertFalse(node1.isDec());
494:       assertFalse(node1.isOr());
495:       assertFalse(node1.isReturn());
496:       assertFalse(node1.hasChildren());
497:       assertEquals(131072, node1.getSourcePosition());
498:       assertFalse(node1.hasMoreThanOneChild());
499:       assertFalse(node1.isAssign());
500:       assertFalse(node1.isWith());
501:       assertEquals(32, node1.getLineno());
502:       assertFalse(node1.isBreak());
503:       assertFalse(node1.isInstanceOf());
504:       assertFalse(node1.isGetElem());
505:       assertFalse(node1.isInc());
506:       assertFalse(node1.isWhile());
507:       assertFalse(node1.isString());
508:       assertFalse(node1.isIn());
509:       assertFalse(node1.isSetterDef());
510:       assertFalse(node1.isThrow());
511:       assertFalse(node1.isAnd());
512:       assertFalse(node1.isContinue());
513:       assertFalse(node1.isFalse());
514:       assertFalse(node1.isCast());
515:       assertFalse(boolean0);
516:       assertEquals(32, Node.INCRDECR_PROP);
517:       assertEquals(37, Node.OPT_ARG_NAME);
518:       assertEquals(51, Node.STATIC_SOURCE_FILE);
519:       assertEquals(12, Node.COLUMN_BITS);
520:       assertEquals(46, Node.IS_NAMESPACE);
521:       assertEquals(56, Node.CHANGE_TIME);
522:       assertEquals(30, Node.VAR_ARGS_NAME);
523:       assertEquals(49, Node.DIRECT_EVAL);
524:       assertEquals(47, Node.IS_DISPATCHER);
525:       assertEquals(2, Node.POST_FLAG);
526:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
527:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
528:       assertEquals(54, Node.SLASH_V);
529:       assertEquals(43, Node.IS_CONSTANT_NAME);
530:       assertEquals(50, Node.FREE_CALL);
531:       assertEquals(1, Node.DECR_FLAG);
532:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
533:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
534:       assertEquals(48, Node.DIRECTIVES);
535:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
536:       assertEquals(40, Node.ORIGINALNAME_PROP);
537:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
538:       assertEquals(4095, Node.COLUMN_MASK);
539:       assertEquals(52, Node.LENGTH);
540:       assertEquals(53, Node.INPUT_ID);
541:       assertEquals(57, Node.REFLECTED_OBJECT);
542:       assertEquals(57, Node.LAST_PROP);
543:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
544:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
545:       assertEquals(29, Node.JSDOC_INFO_PROP);
546:       assertEquals(15, Node.NO_SIDE_EFFECTS);
547:       assertEquals(36, Node.QUOTED_PROP);
548:       assertEquals(55, Node.INFERRED_FUNCTION);
549:       assertEquals(39, Node.EMPTY_BLOCK);
550:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
551:       assertEquals(8, Node.FLAG_NO_THROWS);
552:       
553:       node0.setLineno(39);
554:       assertFalse(node0.equals((Object)node1));
555:       assertFalse(node0.equals((Object)node2));
556:       assertFalse(node0.isIf());
557:       assertFalse(node0.isFor());
558:       assertFalse(node0.isNE());
559:       assertFalse(node0.isEmpty());
560:       assertFalse(node0.isArrayLit());
561:       assertFalse(node0.isDelProp());
562:       assertFalse(node0.isFunction());
563:       assertFalse(node0.isRegExp());
564:       assertFalse(node0.isDefaultCase());
565:       assertFalse(node0.isInc());
566:       assertEquals(159744, node0.getSourcePosition());
567:       assertFalse(node0.isVoid());
568:       assertFalse(node0.isIn());
569:       assertFalse(node0.isTrue());
570:       assertFalse(node0.isBreak());
571:       assertFalse(node0.isNull());
572:       assertFalse(node0.isThrow());
573:       assertFalse(node0.isSetterDef());
574:       assertFalse(node0.isCall());
575:       assertFalse(node0.isGetProp());
576:       assertFalse(node0.isName());
577:       assertFalse(node0.isComma());
578:       assertFalse(node0.isFalse());
579:       assertFalse(node0.isString());
580:       assertFalse(node0.isWhile());
581:       assertFalse(node0.isAnd());
582:       assertTrue(node0.isNumber());
583:       assertFalse(node0.isObjectLit());
584:       assertFalse(node0.isDebugger());
585:       assertFalse(node0.isNot());
586:       assertFalse(node0.hasChildren());
587:       assertFalse(node0.isGetElem());
588:       assertFalse(node0.hasOneChild());
589:       assertFalse(node0.isLabelName());
590:       assertFalse(node0.isReturn());
591:       assertFalse(node0.isLabel());
592:       assertFalse(node0.isAssignAdd());
593:       assertFalse(node0.isCast());
594:       assertFalse(node0.isContinue());
595:       assertFalse(node0.hasMoreThanOneChild());
596:       assertFalse(node0.isTypeOf());
597:       assertFalse(node0.isDec());
598:       assertFalse(node0.isAssign());
599:       assertFalse(node0.isWith());
600:       assertFalse(node0.isExprResult());
601:       assertFalse(node0.isNew());
602:       assertFalse(node0.isDo());
603:       assertFalse(node0.isAdd());
604:       assertEquals(0, node0.getCharno());
605:       assertFalse(node0.isOr());
606:       assertEquals(39, node0.getLineno());
607:       assertFalse(node0.isStringKey());
608:       assertFalse(node0.isParamList());
609:       assertFalse(node0.isHook());
610:       assertFalse(node0.isBlock());
611:       assertFalse(node0.isInstanceOf());
612:       assertFalse(node0.isVar());
613:       assertFalse(node0.isCatch());
614:       assertFalse(node0.isThis());
615:       assertEquals(0, node0.getChildCount());
616:       assertEquals(39, node0.getType());
617:       assertFalse(node0.isScript());
618:       assertFalse(node0.isSwitch());
619:       assertFalse(node0.isCase());
620:       assertFalse(node0.isTry());
621:       assertFalse(node0.isGetterDef());
622:       assertEquals(57, Node.LAST_PROP);
623:       assertEquals(54, Node.SLASH_V);
624:       assertEquals(49, Node.DIRECT_EVAL);
625:       assertEquals(15, Node.NO_SIDE_EFFECTS);
626:       assertEquals(1, Node.DECR_FLAG);
627:       assertEquals(57, Node.REFLECTED_OBJECT);
628:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
629:       assertEquals(52, Node.LENGTH);
630:       assertEquals(46, Node.IS_NAMESPACE);
631:       assertEquals(50, Node.FREE_CALL);
632:       assertEquals(51, Node.STATIC_SOURCE_FILE);
633:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
634:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
635:       assertEquals(56, Node.CHANGE_TIME);
636:       assertEquals(32, Node.INCRDECR_PROP);
637:       assertEquals(48, Node.DIRECTIVES);
638:       assertEquals(37, Node.OPT_ARG_NAME);
639:       assertEquals(12, Node.COLUMN_BITS);
640:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
641:       assertEquals(4095, Node.COLUMN_MASK);
642:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
643:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
644:       assertEquals(43, Node.IS_CONSTANT_NAME);
645:       assertEquals(53, Node.INPUT_ID);
646:       assertEquals(55, Node.INFERRED_FUNCTION);
647:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
648:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
649:       assertEquals(36, Node.QUOTED_PROP);
650:       assertEquals(2, Node.POST_FLAG);
651:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
652:       assertEquals(8, Node.FLAG_NO_THROWS);
653:       assertEquals(39, Node.EMPTY_BLOCK);
654:       assertEquals(29, Node.JSDOC_INFO_PROP);
655:       assertEquals(40, Node.ORIGINALNAME_PROP);
656:       assertEquals(30, Node.VAR_ARGS_NAME);
657:       assertEquals(47, Node.IS_DISPATCHER);
658:       
659:       node0.putProp(4095, (Object) null);
660:       assertFalse(node0.equals((Object)node1));
661:       assertFalse(node0.equals((Object)node2));
662:       assertFalse(node0.isIf());
663:       assertFalse(node0.isFor());
664:       assertFalse(node0.isNE());
665:       assertFalse(node0.isEmpty());
666:       assertFalse(node0.isArrayLit());
667:       assertFalse(node0.isDelProp());
668:       assertFalse(node0.isFunction());
669:       assertFalse(node0.isRegExp());
670:       assertFalse(node0.isDefaultCase());
671:       assertFalse(node0.isInc());
672:       assertEquals(159744, node0.getSourcePosition());
673:       assertFalse(node0.isVoid());
674:       assertFalse(node0.isIn());
675:       assertFalse(node0.isTrue());
676:       assertFalse(node0.isBreak());
677:       assertFalse(node0.isNull());
678:       assertFalse(node0.isThrow());
679:       assertFalse(node0.isSetterDef());
680:       assertFalse(node0.isCall());
681:       assertFalse(node0.isGetProp());
682:       assertFalse(node0.isName());
683:       assertFalse(node0.isComma());
684:       assertFalse(node0.isFalse());
685:       assertFalse(node0.isString());
686:       assertFalse(node0.isWhile());
687:       assertFalse(node0.isAnd());
688:       assertTrue(node0.isNumber());
689:       assertFalse(node0.isObjectLit());
690:       assertFalse(node0.isDebugger());
691:       assertFalse(node0.isNot());
692:       assertFalse(node0.hasChildren());
693:       assertFalse(node0.isGetElem());
694:       assertFalse(node0.hasOneChild());
695:       assertFalse(node0.isLabelName());
696:       assertFalse(node0.isReturn());
697:       assertFalse(node0.isLabel());
698:       assertFalse(node0.isAssignAdd());
699:       assertFalse(node0.isCast());
700:       assertFalse(node0.isContinue());
701:       assertFalse(node0.hasMoreThanOneChild());
702:       assertFalse(node0.isTypeOf());
703:       assertFalse(node0.isDec());
704:       assertFalse(node0.isAssign());
705:       assertFalse(node0.isWith());
706:       assertFalse(node0.isExprResult());
707:       assertFalse(node0.isNew());
708:       assertFalse(node0.isDo());
709:       assertFalse(node0.isAdd());
710:       assertEquals(0, node0.getCharno());
711:       assertFalse(node0.isOr());
712:       assertEquals(39, node0.getLineno());
713:       assertFalse(node0.isStringKey());
714:       assertFalse(node0.isParamList());
715:       assertFalse(node0.isHook());
716:       assertFalse(node0.isBlock());
717:       assertFalse(node0.isInstanceOf());
718:       assertFalse(node0.isVar());
719:       assertFalse(node0.isCatch());
720:       assertFalse(node0.isThis());
721:       assertEquals(0, node0.getChildCount());
722:       assertEquals(39, node0.getType());
723:       assertFalse(node0.isScript());
724:       assertFalse(node0.isSwitch());
725:       assertFalse(node0.isCase());
726:       assertFalse(node0.isTry());
727:       assertFalse(node0.isGetterDef());
728:       assertEquals(57, Node.LAST_PROP);
729:       assertEquals(54, Node.SLASH_V);
730:       assertEquals(49, Node.DIRECT_EVAL);
731:       assertEquals(15, Node.NO_SIDE_EFFECTS);
732:       assertEquals(1, Node.DECR_FLAG);
733:       assertEquals(57, Node.REFLECTED_OBJECT);
734:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
735:       assertEquals(52, Node.LENGTH);
736:       assertEquals(46, Node.IS_NAMESPACE);
737:       assertEquals(50, Node.FREE_CALL);
738:       assertEquals(51, Node.STATIC_SOURCE_FILE);
739:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
740:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
741:       assertEquals(56, Node.CHANGE_TIME);
742:       assertEquals(32, Node.INCRDECR_PROP);
743:       assertEquals(48, Node.DIRECTIVES);
744:       assertEquals(37, Node.OPT_ARG_NAME);
745:       assertEquals(12, Node.COLUMN_BITS);
746:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
747:       assertEquals(4095, Node.COLUMN_MASK);
748:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
749:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
750:       assertEquals(43, Node.IS_CONSTANT_NAME);
751:       assertEquals(53, Node.INPUT_ID);
752:       assertEquals(55, Node.INFERRED_FUNCTION);
753:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
754:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
755:       assertEquals(36, Node.QUOTED_PROP);
756:       assertEquals(2, Node.POST_FLAG);
757:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
758:       assertEquals(8, Node.FLAG_NO_THROWS);
759:       assertEquals(39, Node.EMPTY_BLOCK);
760:       assertEquals(29, Node.JSDOC_INFO_PROP);
761:       assertEquals(40, Node.ORIGINALNAME_PROP);
762:       assertEquals(30, Node.VAR_ARGS_NAME);
763:       assertEquals(47, Node.IS_DISPATCHER);
764:       
765:       int int0 = node0.getIndexOfChild(node1);
766:       assertFalse(node0.equals((Object)node1));
767:       assertFalse(node0.equals((Object)node2));
768:       assertFalse(node1.equals((Object)node0));
769:       assertFalse(node1.equals((Object)node2));
770:       assertNotSame(node1, node2);
771:       assertFalse(node0.isIf());
772:       assertFalse(node0.isFor());
773:       assertFalse(node0.isNE());
774:       assertFalse(node0.isEmpty());
775:       assertFalse(node0.isArrayLit());
776:       assertFalse(node0.isDelProp());
777:       assertFalse(node0.isFunction());
778:       assertFalse(node0.isRegExp());
779:       assertFalse(node0.isDefaultCase());
780:       assertFalse(node0.isInc());
781:       assertEquals(159744, node0.getSourcePosition());
782:       assertFalse(node0.isVoid());
783:       assertFalse(node0.isIn());
784:       assertFalse(node0.isTrue());
785:       assertFalse(node0.isBreak());
786:       assertFalse(node0.isNull());
787:       assertFalse(node0.isThrow());
788:       assertFalse(node0.isSetterDef());
789:       assertFalse(node0.isCall());
790:       assertFalse(node0.isGetProp());
791:       assertFalse(node0.isName());
792:       assertFalse(node0.isComma());
793:       assertFalse(node0.isFalse());
794:       assertFalse(node0.isString());
795:       assertFalse(node0.isWhile());
796:       assertFalse(node0.isAnd());
797:       assertTrue(node0.isNumber());
798:       assertFalse(node0.isObjectLit());
799:       assertFalse(node0.isDebugger());
800:       assertFalse(node0.isNot());
801:       assertFalse(node0.hasChildren());
802:       assertFalse(node0.isGetElem());
803:       assertFalse(node0.hasOneChild());
804:       assertFalse(node0.isLabelName());
805:       assertFalse(node0.isReturn());
806:       assertFalse(node0.isLabel());
807:       assertFalse(node0.isAssignAdd());
808:       assertFalse(node0.isCast());
809:       assertFalse(node0.isContinue());
810:       assertFalse(node0.hasMoreThanOneChild());
811:       assertFalse(node0.isTypeOf());
812:       assertFalse(node0.isDec());
813:       assertFalse(node0.isAssign());
814:       assertFalse(node0.isWith());
815:       assertFalse(node0.isExprResult());
816:       assertFalse(node0.isNew());
817:       assertFalse(node0.isDo());
818:       assertFalse(node0.isAdd());
819:       assertEquals(0, node0.getCharno());
820:       assertFalse(node0.isOr());
821:       assertEquals(39, node0.getLineno());
822:       assertFalse(node0.isStringKey());
823:       assertFalse(node0.isParamList());
824:       assertFalse(node0.isHook());
825:       assertFalse(node0.isBlock());
826:       assertFalse(node0.isInstanceOf());
827:       assertFalse(node0.isVar());
828:       assertFalse(node0.isCatch());
829:       assertFalse(node0.isThis());
830:       assertEquals(0, node0.getChildCount());
831:       assertEquals(39, node0.getType());
832:       assertFalse(node0.isScript());
833:       assertFalse(node0.isSwitch());
834:       assertFalse(node0.isCase());
835:       assertFalse(node0.isTry());
836:       assertFalse(node0.isGetterDef());
837:       assertFalse(node1.isTrue());
838:       assertFalse(node1.isFunction());
839:       assertFalse(node1.isDebugger());
840:       assertEquals(36, node1.getType());
841:       assertFalse(node1.isRegExp());
842:       assertFalse(node1.isTry());
843:       assertFalse(node1.isVoid());
844:       assertFalse(node1.isDefaultCase());
845:       assertFalse(node1.isEmpty());
846:       assertFalse(node1.isDelProp());
847:       assertFalse(node1.isIf());
848:       assertFalse(node1.isNull());
849:       assertFalse(node1.isFor());
850:       assertFalse(node1.isNE());
851:       assertFalse(node1.isCatch());
852:       assertFalse(node1.isCall());
853:       assertFalse(node1.isName());
854:       assertFalse(node1.isSwitch());
855:       assertFalse(node1.isNew());
856:       assertFalse(node1.isHook());
857:       assertFalse(node1.isBlock());
858:       assertFalse(node1.isVar());
859:       assertFalse(node1.isCase());
860:       assertFalse(node1.isDo());
861:       assertFalse(node1.isAdd());
862:       assertFalse(node1.isParamList());
863:       assertFalse(node1.isNumber());
864:       assertFalse(node1.isGetterDef());
865:       assertFalse(node1.isLabel());
866:       assertFalse(node1.isAssignAdd());
867:       assertFalse(node1.isStringKey());
868:       assertFalse(node1.isArrayLit());
869:       assertFalse(node1.isLabelName());
870:       assertEquals(0, node1.getChildCount());
871:       assertEquals(0, node1.getCharno());
872:       assertFalse(node1.isExprResult());
873:       assertFalse(node1.hasOneChild());
874:       assertFalse(node1.isNot());
875:       assertFalse(node1.isObjectLit());
876:       assertFalse(node1.isScript());
877:       assertFalse(node1.isThis());
878:       assertFalse(node1.isComma());
879:       assertFalse(node1.isGetProp());
880:       assertFalse(node1.isTypeOf());
881:       assertFalse(node1.isDec());
882:       assertFalse(node1.isOr());
883:       assertFalse(node1.isReturn());
884:       assertFalse(node1.hasChildren());
885:       assertEquals(131072, node1.getSourcePosition());
886:       assertFalse(node1.hasMoreThanOneChild());
887:       assertFalse(node1.isAssign());
888:       assertFalse(node1.isWith());
889:       assertEquals(32, node1.getLineno());
890:       assertFalse(node1.isBreak());
891:       assertFalse(node1.isInstanceOf());
892:       assertFalse(node1.isGetElem());
893:       assertFalse(node1.isInc());
894:       assertFalse(node1.isWhile());
895:       assertFalse(node1.isString());
896:       assertFalse(node1.isIn());
897:       assertFalse(node1.isSetterDef());
898:       assertFalse(node1.isThrow());
899:       assertFalse(node1.isAnd());
900:       assertFalse(node1.isContinue());
901:       assertFalse(node1.isFalse());
902:       assertFalse(node1.isCast());
903:       assertEquals((-1), int0);
904:       assertEquals(57, Node.LAST_PROP);
905:       assertEquals(54, Node.SLASH_V);
906:       assertEquals(49, Node.DIRECT_EVAL);
907:       assertEquals(15, Node.NO_SIDE_EFFECTS);
908:       assertEquals(1, Node.DECR_FLAG);
909:       assertEquals(57, Node.REFLECTED_OBJECT);
910:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
911:       assertEquals(52, Node.LENGTH);
912:       assertEquals(46, Node.IS_NAMESPACE);
913:       assertEquals(50, Node.FREE_CALL);
914:       assertEquals(51, Node.STATIC_SOURCE_FILE);
915:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
916:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
917:       assertEquals(56, Node.CHANGE_TIME);
918:       assertEquals(32, Node.INCRDECR_PROP);
919:       assertEquals(48, Node.DIRECTIVES);
920:       assertEquals(37, Node.OPT_ARG_NAME);
921:       assertEquals(12, Node.COLUMN_BITS);
922:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
923:       assertEquals(4095, Node.COLUMN_MASK);
924:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
925:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
926:       assertEquals(43, Node.IS_CONSTANT_NAME);
927:       assertEquals(53, Node.INPUT_ID);
928:       assertEquals(55, Node.INFERRED_FUNCTION);
929:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
930:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
931:       assertEquals(36, Node.QUOTED_PROP);
932:       assertEquals(2, Node.POST_FLAG);
933:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
934:       assertEquals(8, Node.FLAG_NO_THROWS);
935:       assertEquals(39, Node.EMPTY_BLOCK);
936:       assertEquals(29, Node.JSDOC_INFO_PROP);
937:       assertEquals(40, Node.ORIGINALNAME_PROP);
938:       assertEquals(30, Node.VAR_ARGS_NAME);
939:       assertEquals(47, Node.IS_DISPATCHER);
940:       assertEquals(32, Node.INCRDECR_PROP);
941:       assertEquals(37, Node.OPT_ARG_NAME);
942:       assertEquals(51, Node.STATIC_SOURCE_FILE);
943:       assertEquals(12, Node.COLUMN_BITS);
944:       assertEquals(46, Node.IS_NAMESPACE);
945:       assertEquals(56, Node.CHANGE_TIME);
946:       assertEquals(30, Node.VAR_ARGS_NAME);
947:       assertEquals(49, Node.DIRECT_EVAL);
948:       assertEquals(47, Node.IS_DISPATCHER);
949:       assertEquals(2, Node.POST_FLAG);
950:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
951:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
952:       assertEquals(54, Node.SLASH_V);
953:       assertEquals(43, Node.IS_CONSTANT_NAME);
954:       assertEquals(50, Node.FREE_CALL);
955:       assertEquals(1, Node.DECR_FLAG);
956:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
957:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
958:       assertEquals(48, Node.DIRECTIVES);
959:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
960:       assertEquals(40, Node.ORIGINALNAME_PROP);
961:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
962:       assertEquals(4095, Node.COLUMN_MASK);
963:       assertEquals(52, Node.LENGTH);
964:       assertEquals(53, Node.INPUT_ID);
965:       assertEquals(57, Node.REFLECTED_OBJECT);
966:       assertEquals(57, Node.LAST_PROP);
967:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
968:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
969:       assertEquals(29, Node.JSDOC_INFO_PROP);
970:       assertEquals(15, Node.NO_SIDE_EFFECTS);
971:       assertEquals(36, Node.QUOTED_PROP);
972:       assertEquals(55, Node.INFERRED_FUNCTION);
973:       assertEquals(39, Node.EMPTY_BLOCK);
974:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
975:       assertEquals(8, Node.FLAG_NO_THROWS);
976:       
977:       Iterable<Node> iterable0 = node0.children();
978:       assertFalse(node0.equals((Object)node1));
979:       assertFalse(node0.equals((Object)node2));
980:       assertFalse(node0.isIf());
981:       assertFalse(node0.isFor());
982:       assertFalse(node0.isNE());
983:       assertFalse(node0.isEmpty());
984:       assertFalse(node0.isArrayLit());
985:       assertFalse(node0.isDelProp());
986:       assertFalse(node0.isFunction());
987:       assertFalse(node0.isRegExp());
988:       assertFalse(node0.isDefaultCase());
989:       assertFalse(node0.isInc());
990:       assertEquals(159744, node0.getSourcePosition());
991:       assertFalse(node0.isVoid());
992:       assertFalse(node0.isIn());
993:       assertFalse(node0.isTrue());
994:       assertFalse(node0.isBreak());
995:       assertFalse(node0.isNull());
996:       assertFalse(node0.isThrow());
997:       assertFalse(node0.isSetterDef());
998:       assertFalse(node0.isCall());
999:       assertFalse(node0.isGetProp());
1000:       assertFalse(node0.isName());
1001:       assertFalse(node0.isComma());
1002:       assertFalse(node0.isFalse());
1003:       assertFalse(node0.isString());
1004:       assertFalse(node0.isWhile());
1005:       assertFalse(node0.isAnd());
1006:       assertTrue(node0.isNumber());
1007:       assertFalse(node0.isObjectLit());
1008:       assertFalse(node0.isDebugger());
1009:       assertFalse(node0.isNot());
1010:       assertFalse(node0.hasChildren());
1011:       assertFalse(node0.isGetElem());
1012:       assertFalse(node0.hasOneChild());
1013:       assertFalse(node0.isLabelName());
1014:       assertFalse(node0.isReturn());
1015:       assertFalse(node0.isLabel());
1016:       assertFalse(node0.isAssignAdd());
1017:       assertFalse(node0.isCast());
1018:       assertFalse(node0.isContinue());
1019:       assertFalse(node0.hasMoreThanOneChild());
1020:       assertFalse(node0.isTypeOf());
1021:       assertFalse(node0.isDec());
1022:       assertFalse(node0.isAssign());
1023:       assertFalse(node0.isWith());
1024:       assertFalse(node0.isExprResult());
1025:       assertFalse(node0.isNew());
1026:       assertFalse(node0.isDo());
1027:       assertFalse(node0.isAdd());
1028:       assertEquals(0, node0.getCharno());
1029:       assertFalse(node0.isOr());
1030:       assertEquals(39, node0.getLineno());
1031:       assertFalse(node0.isStringKey());
1032:       assertFalse(node0.isParamList());
1033:       assertFalse(node0.isHook());
1034:       assertFalse(node0.isBlock());
1035:       assertFalse(node0.isInstanceOf());
1036:       assertFalse(node0.isVar());
1037:       assertFalse(node0.isCatch());
1038:       assertFalse(node0.isThis());
1039:       assertEquals(0, node0.getChildCount());
1040:       assertEquals(39, node0.getType());
1041:       assertFalse(node0.isScript());
1042:       assertFalse(node0.isSwitch());
1043:       assertFalse(node0.isCase());
1044:       assertFalse(node0.isTry());
1045:       assertFalse(node0.isGetterDef());
1046:       assertFalse(iterable0.contains(node0));
1047:       assertNotNull(iterable0);
1048:       assertEquals(57, Node.LAST_PROP);
1049:       assertEquals(54, Node.SLASH_V);
1050:       assertEquals(49, Node.DIRECT_EVAL);
1051:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1052:       assertEquals(1, Node.DECR_FLAG);
1053:       assertEquals(57, Node.REFLECTED_OBJECT);
1054:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1055:       assertEquals(52, Node.LENGTH);
1056:       assertEquals(46, Node.IS_NAMESPACE);
1057:       assertEquals(50, Node.FREE_CALL);
1058:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1059:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1060:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1061:       assertEquals(56, Node.CHANGE_TIME);
1062:       assertEquals(32, Node.INCRDECR_PROP);
1063:       assertEquals(48, Node.DIRECTIVES);
1064:       assertEquals(37, Node.OPT_ARG_NAME);
1065:       assertEquals(12, Node.COLUMN_BITS);
1066:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1067:       assertEquals(4095, Node.COLUMN_MASK);
1068:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1069:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1070:       assertEquals(43, Node.IS_CONSTANT_NAME);
1071:       assertEquals(53, Node.INPUT_ID);
1072:       assertEquals(55, Node.INFERRED_FUNCTION);
1073:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1074:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1075:       assertEquals(36, Node.QUOTED_PROP);
1076:       assertEquals(2, Node.POST_FLAG);
1077:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1078:       assertEquals(8, Node.FLAG_NO_THROWS);
1079:       assertEquals(39, Node.EMPTY_BLOCK);
1080:       assertEquals(29, Node.JSDOC_INFO_PROP);
1081:       assertEquals(40, Node.ORIGINALNAME_PROP);
1082:       assertEquals(30, Node.VAR_ARGS_NAME);
1083:       assertEquals(47, Node.IS_DISPATCHER);
1084:       
1085:       boolean boolean1 = node2.isIn();
1086:       assertFalse(node2.equals((Object)node0));
1087:       assertFalse(node2.equals((Object)node1));
1088:       assertTrue(boolean1 == boolean0);
1089:       assertNotSame(node2, node1);
1090:       assertFalse(node2.isHook());
1091:       assertEquals((-1), node2.getCharno());
1092:       assertFalse(node2.isThrow());
1093:       assertFalse(node2.isCase());
1094:       assertFalse(node2.isGetProp());
1095:       assertFalse(node2.isInc());
1096:       assertFalse(node2.isString());
1097:       assertFalse(node2.isObjectLit());
1098:       assertEquals(46, node2.getType());
1099:       assertFalse(node2.isAnd());
1100:       assertFalse(node2.isSwitch());
1101:       assertFalse(node2.isFalse());
1102:       assertFalse(node2.isTrue());
1103:       assertEquals((-1), node2.getSourcePosition());
1104:       assertFalse(node2.isDefaultCase());
1105:       assertFalse(node2.isDebugger());
1106:       assertFalse(node2.isNot());
1107:       assertFalse(node2.isEmpty());
1108:       assertFalse(node2.isOr());
1109:       assertFalse(node2.isReturn());
1110:       assertFalse(node2.isWhile());
1111:       assertFalse(node2.isTypeOf());
1112:       assertFalse(node2.isBreak());
1113:       assertFalse(node2.hasChildren());
1114:       assertFalse(node2.isDelProp());
1115:       assertFalse(node2.isComma());
1116:       assertFalse(node2.isVoid());
1117:       assertFalse(node2.isDec());
1118:       assertFalse(node2.isAssign());
1119:       assertFalse(node2.isGetElem());
1120:       assertFalse(node2.isCall());
1121:       assertFalse(node2.isExprResult());
1122:       assertFalse(node2.isBlock());
1123:       assertFalse(node2.isName());
1124:       assertFalse(node2.isStringKey());
1125:       assertFalse(node2.isVar());
1126:       assertFalse(node2.isNull());
1127:       assertFalse(node2.isSetterDef());
1128:       assertFalse(node2.isDo());
1129:       assertFalse(node2.isNew());
1130:       assertFalse(node2.isAdd());
1131:       assertEquals(0, node2.getChildCount());
1132:       assertFalse(node2.isLabel());
1133:       assertFalse(node2.isAssignAdd());
1134:       assertFalse(node2.isParamList());
1135:       assertFalse(node2.isFunction());
1136:       assertFalse(node2.isLabelName());
1137:       assertFalse(node2.isContinue());
1138:       assertFalse(node2.isCast());
1139:       assertFalse(node2.hasOneChild());
1140:       assertFalse(node2.isArrayLit());
1141:       assertFalse(node2.isTry());
1142:       assertFalse(node2.isFor());
1143:       assertFalse(node2.isScript());
1144:       assertFalse(node2.isNumber());
1145:       assertFalse(node2.isGetterDef());
1146:       assertFalse(node2.hasMoreThanOneChild());
1147:       assertFalse(node2.isIn());
1148:       assertEquals((-1), node2.getLineno());
1149:       assertFalse(node2.isThis());
1150:       assertFalse(node2.isNE());
1151:       assertFalse(node2.isRegExp());
1152:       assertFalse(node2.isIf());
1153:       assertFalse(node2.isWith());
1154:       assertFalse(node2.isCatch());
1155:       assertFalse(node2.isInstanceOf());
1156:       assertFalse(boolean1);
1157:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1158:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1159:       assertEquals(43, Node.IS_CONSTANT_NAME);
1160:       assertEquals(48, Node.DIRECTIVES);
1161:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1162:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1163:       assertEquals(4095, Node.COLUMN_MASK);
1164:       assertEquals(29, Node.JSDOC_INFO_PROP);
1165:       assertEquals(56, Node.CHANGE_TIME);
1166:       assertEquals(47, Node.IS_DISPATCHER);
1167:       assertEquals(57, Node.REFLECTED_OBJECT);
1168:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1169:       assertEquals(53, Node.INPUT_ID);
1170:       assertEquals(39, Node.EMPTY_BLOCK);
1171:       assertEquals(36, Node.QUOTED_PROP);
1172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1173:       assertEquals(55, Node.INFERRED_FUNCTION);
1174:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1175:       assertEquals(52, Node.LENGTH);
1176:       assertEquals(8, Node.FLAG_NO_THROWS);
1177:       assertEquals(1, Node.DECR_FLAG);
1178:       assertEquals(49, Node.DIRECT_EVAL);
1179:       assertEquals(30, Node.VAR_ARGS_NAME);
1180:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1181:       assertEquals(57, Node.LAST_PROP);
1182:       assertEquals(12, Node.COLUMN_BITS);
1183:       assertEquals(32, Node.INCRDECR_PROP);
1184:       assertEquals(46, Node.IS_NAMESPACE);
1185:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1186:       assertEquals(2, Node.POST_FLAG);
1187:       assertEquals(37, Node.OPT_ARG_NAME);
1188:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1189:       assertEquals(40, Node.ORIGINALNAME_PROP);
1190:       assertEquals(50, Node.FREE_CALL);
1191:       assertEquals(54, Node.SLASH_V);
1192:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1193:       
1194:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
1195:       assertFalse(node0.equals((Object)node1));
1196:       assertFalse(node0.equals((Object)node2));
1197:       assertFalse(node2.equals((Object)node0));
1198:       assertFalse(node2.equals((Object)node1));
1199:       assertNotSame(node2, node1);
1200:       assertFalse(node0.isIf());
1201:       assertFalse(node0.isFor());
1202:       assertFalse(node0.isNE());
1203:       assertFalse(node0.isEmpty());
1204:       assertFalse(node0.isArrayLit());
1205:       assertFalse(node0.isDelProp());
1206:       assertFalse(node0.isFunction());
1207:       assertFalse(node0.isRegExp());
1208:       assertFalse(node0.isDefaultCase());
1209:       assertFalse(node0.isInc());
1210:       assertEquals(159744, node0.getSourcePosition());
1211:       assertFalse(node0.isVoid());
1212:       assertFalse(node0.isIn());
1213:       assertFalse(node0.isTrue());
1214:       assertFalse(node0.isBreak());
1215:       assertFalse(node0.isNull());
1216:       assertFalse(node0.isThrow());
1217:       assertFalse(node0.isSetterDef());
1218:       assertFalse(node0.isCall());
1219:       assertFalse(node0.isGetProp());
1220:       assertFalse(node0.isName());
1221:       assertFalse(node0.isComma());
1222:       assertFalse(node0.isFalse());
1223:       assertFalse(node0.isString());
1224:       assertFalse(node0.isWhile());
1225:       assertFalse(node0.isAnd());
1226:       assertTrue(node0.isNumber());
1227:       assertFalse(node0.isObjectLit());
1228:       assertFalse(node0.isDebugger());
1229:       assertFalse(node0.isNot());
1230:       assertFalse(node0.hasChildren());
1231:       assertFalse(node0.isGetElem());
1232:       assertFalse(node0.hasOneChild());
1233:       assertFalse(node0.isLabelName());
1234:       assertFalse(node0.isReturn());
1235:       assertFalse(node0.isLabel());
1236:       assertFalse(node0.isAssignAdd());
1237:       assertFalse(node0.isCast());
1238:       assertFalse(node0.isContinue());
1239:       assertFalse(node0.hasMoreThanOneChild());
1240:       assertFalse(node0.isTypeOf());
1241:       assertFalse(node0.isDec());
1242:       assertFalse(node0.isAssign());
1243:       assertFalse(node0.isWith());
1244:       assertFalse(node0.isExprResult());
1245:       assertFalse(node0.isNew());
1246:       assertFalse(node0.isDo());
1247:       assertFalse(node0.isAdd());
1248:       assertEquals(0, node0.getCharno());
1249:       assertFalse(node0.isOr());
1250:       assertEquals(39, node0.getLineno());
1251:       assertFalse(node0.isStringKey());
1252:       assertFalse(node0.isParamList());
1253:       assertFalse(node0.isHook());
1254:       assertFalse(node0.isBlock());
1255:       assertFalse(node0.isInstanceOf());
1256:       assertFalse(node0.isVar());
1257:       assertFalse(node0.isCatch());
1258:       assertFalse(node0.isThis());
1259:       assertEquals(0, node0.getChildCount());
1260:       assertEquals(39, node0.getType());
1261:       assertFalse(node0.isScript());
1262:       assertFalse(node0.isSwitch());
1263:       assertFalse(node0.isCase());
1264:       assertFalse(node0.isTry());
1265:       assertFalse(node0.isGetterDef());
1266:       assertFalse(node2.isHook());
1267:       assertEquals((-1), node2.getCharno());
1268:       assertFalse(node2.isThrow());
1269:       assertFalse(node2.isCase());
1270:       assertFalse(node2.isGetProp());
1271:       assertFalse(node2.isInc());
1272:       assertFalse(node2.isString());
1273:       assertFalse(node2.isObjectLit());
1274:       assertEquals(46, node2.getType());
1275:       assertFalse(node2.isAnd());
1276:       assertFalse(node2.isSwitch());
1277:       assertFalse(node2.isFalse());
1278:       assertFalse(node2.isTrue());
1279:       assertEquals((-1), node2.getSourcePosition());
1280:       assertFalse(node2.isDefaultCase());
1281:       assertFalse(node2.isDebugger());
1282:       assertFalse(node2.isNot());
1283:       assertFalse(node2.isEmpty());
1284:       assertFalse(node2.isOr());
1285:       assertFalse(node2.isReturn());
1286:       assertFalse(node2.isWhile());
1287:       assertFalse(node2.isTypeOf());
1288:       assertFalse(node2.isBreak());
1289:       assertFalse(node2.hasChildren());
1290:       assertFalse(node2.isDelProp());
1291:       assertFalse(node2.isComma());
1292:       assertFalse(node2.isVoid());
1293:       assertFalse(node2.isDec());
1294:       assertFalse(node2.isAssign());
1295:       assertFalse(node2.isGetElem());
1296:       assertFalse(node2.isCall());
1297:       assertFalse(node2.isExprResult());
1298:       assertFalse(node2.isBlock());
1299:       assertFalse(node2.isName());
1300:       assertFalse(node2.isStringKey());
1301:       assertFalse(node2.isVar());
1302:       assertFalse(node2.isNull());
1303:       assertFalse(node2.isSetterDef());
1304:       assertFalse(node2.isDo());
1305:       assertFalse(node2.isNew());
1306:       assertFalse(node2.isAdd());
1307:       assertEquals(0, node2.getChildCount());
1308:       assertFalse(node2.isLabel());
1309:       assertFalse(node2.isAssignAdd());
1310:       assertFalse(node2.isParamList());
1311:       assertFalse(node2.isFunction());
1312:       assertFalse(node2.isLabelName());
1313:       assertFalse(node2.isContinue());
1314:       assertFalse(node2.isCast());
1315:       assertFalse(node2.hasOneChild());
1316:       assertFalse(node2.isArrayLit());
1317:       assertFalse(node2.isTry());
1318:       assertFalse(node2.isFor());
1319:       assertFalse(node2.isScript());
1320:       assertFalse(node2.isNumber());
1321:       assertFalse(node2.isGetterDef());
1322:       assertFalse(node2.hasMoreThanOneChild());
1323:       assertFalse(node2.isIn());
1324:       assertEquals((-1), node2.getLineno());
1325:       assertFalse(node2.isThis());
1326:       assertFalse(node2.isNE());
1327:       assertFalse(node2.isRegExp());
1328:       assertFalse(node2.isIf());
1329:       assertFalse(node2.isWith());
1330:       assertFalse(node2.isCatch());
1331:       assertFalse(node2.isInstanceOf());
1332:       assertNotNull(node_NodeMismatch0);
1333:       assertEquals(57, Node.LAST_PROP);
1334:       assertEquals(54, Node.SLASH_V);
1335:       assertEquals(49, Node.DIRECT_EVAL);
1336:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1337:       assertEquals(1, Node.DECR_FLAG);
1338:       assertEquals(57, Node.REFLECTED_OBJECT);
1339:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1340:       assertEquals(52, Node.LENGTH);
1341:       assertEquals(46, Node.IS_NAMESPACE);
1342:       assertEquals(50, Node.FREE_CALL);
1343:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1345:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1346:       assertEquals(56, Node.CHANGE_TIME);
1347:       assertEquals(32, Node.INCRDECR_PROP);
1348:       assertEquals(48, Node.DIRECTIVES);
1349:       assertEquals(37, Node.OPT_ARG_NAME);
1350:       assertEquals(12, Node.COLUMN_BITS);
1351:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1352:       assertEquals(4095, Node.COLUMN_MASK);
1353:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1354:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1355:       assertEquals(43, Node.IS_CONSTANT_NAME);
1356:       assertEquals(53, Node.INPUT_ID);
1357:       assertEquals(55, Node.INFERRED_FUNCTION);
1358:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1359:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1360:       assertEquals(36, Node.QUOTED_PROP);
1361:       assertEquals(2, Node.POST_FLAG);
1362:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1363:       assertEquals(8, Node.FLAG_NO_THROWS);
1364:       assertEquals(39, Node.EMPTY_BLOCK);
1365:       assertEquals(29, Node.JSDOC_INFO_PROP);
1366:       assertEquals(40, Node.ORIGINALNAME_PROP);
1367:       assertEquals(30, Node.VAR_ARGS_NAME);
1368:       assertEquals(47, Node.IS_DISPATCHER);
1369:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1371:       assertEquals(43, Node.IS_CONSTANT_NAME);
1372:       assertEquals(48, Node.DIRECTIVES);
1373:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1374:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1375:       assertEquals(4095, Node.COLUMN_MASK);
1376:       assertEquals(29, Node.JSDOC_INFO_PROP);
1377:       assertEquals(56, Node.CHANGE_TIME);
1378:       assertEquals(47, Node.IS_DISPATCHER);
1379:       assertEquals(57, Node.REFLECTED_OBJECT);
1380:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1381:       assertEquals(53, Node.INPUT_ID);
1382:       assertEquals(39, Node.EMPTY_BLOCK);
1383:       assertEquals(36, Node.QUOTED_PROP);
1384:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1385:       assertEquals(55, Node.INFERRED_FUNCTION);
1386:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1387:       assertEquals(52, Node.LENGTH);
1388:       assertEquals(8, Node.FLAG_NO_THROWS);
1389:       assertEquals(1, Node.DECR_FLAG);
1390:       assertEquals(49, Node.DIRECT_EVAL);
1391:       assertEquals(30, Node.VAR_ARGS_NAME);
1392:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1393:       assertEquals(57, Node.LAST_PROP);
1394:       assertEquals(12, Node.COLUMN_BITS);
1395:       assertEquals(32, Node.INCRDECR_PROP);
1396:       assertEquals(46, Node.IS_NAMESPACE);
1397:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1398:       assertEquals(2, Node.POST_FLAG);
1399:       assertEquals(37, Node.OPT_ARG_NAME);
1400:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1401:       assertEquals(40, Node.ORIGINALNAME_PROP);
1402:       assertEquals(50, Node.FREE_CALL);
1403:       assertEquals(54, Node.SLASH_V);
1404:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1405:       
1406:       Node node3 = new Node(39, node1, node2);
1407:       assertFalse(node1.equals((Object)node0));
1408:       assertFalse(node1.equals((Object)node2));
1409:       assertFalse(node2.equals((Object)node0));
1410:       assertFalse(node2.equals((Object)node1));
1411:       assertFalse(node3.equals((Object)node1));
1412:       assertFalse(node3.equals((Object)node2));
1413:       assertFalse(node3.equals((Object)node0));
1414:       assertFalse(node1.isTrue());
1415:       assertFalse(node1.isFunction());
1416:       assertFalse(node1.isDebugger());
1417:       assertEquals(36, node1.getType());
1418:       assertFalse(node1.isRegExp());
1419:       assertFalse(node1.isTry());
1420:       assertFalse(node1.isVoid());
1421:       assertFalse(node1.isDefaultCase());
1422:       assertFalse(node1.isEmpty());
1423:       assertFalse(node1.isDelProp());
1424:       assertFalse(node1.isIf());
1425:       assertFalse(node1.isNull());
1426:       assertFalse(node1.isFor());
1427:       assertFalse(node1.isNE());
1428:       assertFalse(node1.isCatch());
1429:       assertFalse(node1.isCall());
1430:       assertFalse(node1.isName());
1431:       assertFalse(node1.isSwitch());
1432:       assertFalse(node1.isNew());
1433:       assertFalse(node1.isHook());
1434:       assertFalse(node1.isBlock());
1435:       assertFalse(node1.isVar());
1436:       assertFalse(node1.isCase());
1437:       assertFalse(node1.isDo());
1438:       assertFalse(node1.isAdd());
1439:       assertFalse(node1.isParamList());
1440:       assertFalse(node1.isNumber());
1441:       assertFalse(node1.isGetterDef());
1442:       assertFalse(node1.isLabel());
1443:       assertFalse(node1.isAssignAdd());
1444:       assertFalse(node1.isStringKey());
1445:       assertFalse(node1.isArrayLit());
1446:       assertFalse(node1.isLabelName());
1447:       assertEquals(0, node1.getChildCount());
1448:       assertEquals(0, node1.getCharno());
1449:       assertFalse(node1.isExprResult());
1450:       assertFalse(node1.hasOneChild());
1451:       assertFalse(node1.isNot());
1452:       assertFalse(node1.isObjectLit());
1453:       assertFalse(node1.isScript());
1454:       assertFalse(node1.isThis());
1455:       assertFalse(node1.isComma());
1456:       assertFalse(node1.isGetProp());
1457:       assertFalse(node1.isTypeOf());
1458:       assertFalse(node1.isDec());
1459:       assertFalse(node1.isOr());
1460:       assertFalse(node1.isReturn());
1461:       assertFalse(node1.hasChildren());
1462:       assertEquals(131072, node1.getSourcePosition());
1463:       assertFalse(node1.hasMoreThanOneChild());
1464:       assertFalse(node1.isAssign());
1465:       assertFalse(node1.isWith());
1466:       assertEquals(32, node1.getLineno());
1467:       assertFalse(node1.isBreak());
1468:       assertFalse(node1.isInstanceOf());
1469:       assertFalse(node1.isGetElem());
1470:       assertFalse(node1.isInc());
1471:       assertFalse(node1.isWhile());
1472:       assertFalse(node1.isString());
1473:       assertFalse(node1.isIn());
1474:       assertFalse(node1.isSetterDef());
1475:       assertFalse(node1.isThrow());
1476:       assertFalse(node1.isAnd());
1477:       assertFalse(node1.isContinue());
1478:       assertFalse(node1.isFalse());
1479:       assertFalse(node1.isCast());
1480:       assertFalse(node2.isHook());
1481:       assertEquals((-1), node2.getCharno());
1482:       assertFalse(node2.isThrow());
1483:       assertFalse(node2.isCase());
1484:       assertFalse(node2.isGetProp());
1485:       assertFalse(node2.isInc());
1486:       assertFalse(node2.isString());
1487:       assertFalse(node2.isObjectLit());
1488:       assertEquals(46, node2.getType());
1489:       assertFalse(node2.isAnd());
1490:       assertFalse(node2.isSwitch());
1491:       assertFalse(node2.isFalse());
1492:       assertFalse(node2.isTrue());
1493:       assertEquals((-1), node2.getSourcePosition());
1494:       assertFalse(node2.isDefaultCase());
1495:       assertFalse(node2.isDebugger());
1496:       assertFalse(node2.isNot());
1497:       assertFalse(node2.isEmpty());
1498:       assertFalse(node2.isOr());
1499:       assertFalse(node2.isReturn());
1500:       assertFalse(node2.isWhile());
1501:       assertFalse(node2.isTypeOf());
1502:       assertFalse(node2.isBreak());
1503:       assertFalse(node2.hasChildren());
1504:       assertFalse(node2.isDelProp());
1505:       assertFalse(node2.isComma());
1506:       assertFalse(node2.isVoid());
1507:       assertFalse(node2.isDec());
1508:       assertFalse(node2.isAssign());
1509:       assertFalse(node2.isGetElem());
1510:       assertFalse(node2.isCall());
1511:       assertFalse(node2.isExprResult());
1512:       assertFalse(node2.isBlock());
1513:       assertFalse(node2.isName());
1514:       assertFalse(node2.isStringKey());
1515:       assertFalse(node2.isVar());
1516:       assertFalse(node2.isNull());
1517:       assertFalse(node2.isSetterDef());
1518:       assertFalse(node2.isDo());
1519:       assertFalse(node2.isNew());
1520:       assertFalse(node2.isAdd());
1521:       assertEquals(0, node2.getChildCount());
1522:       assertFalse(node2.isLabel());
1523:       assertFalse(node2.isAssignAdd());
1524:       assertFalse(node2.isParamList());
1525:       assertFalse(node2.isFunction());
1526:       assertFalse(node2.isLabelName());
1527:       assertFalse(node2.isContinue());
1528:       assertFalse(node2.isCast());
1529:       assertFalse(node2.hasOneChild());
1530:       assertFalse(node2.isArrayLit());
1531:       assertFalse(node2.isTry());
1532:       assertFalse(node2.isFor());
1533:       assertFalse(node2.isScript());
1534:       assertFalse(node2.isNumber());
1535:       assertFalse(node2.isGetterDef());
1536:       assertFalse(node2.hasMoreThanOneChild());
1537:       assertFalse(node2.isIn());
1538:       assertEquals((-1), node2.getLineno());
1539:       assertFalse(node2.isThis());
1540:       assertFalse(node2.isNE());
1541:       assertFalse(node2.isRegExp());
1542:       assertFalse(node2.isIf());
1543:       assertFalse(node2.isWith());
1544:       assertFalse(node2.isCatch());
1545:       assertFalse(node2.isInstanceOf());
1546:       assertFalse(node3.isCatch());
1547:       assertFalse(node3.isRegExp());
1548:       assertFalse(node3.isFunction());
1549:       assertFalse(node3.isSetterDef());
1550:       assertFalse(node3.isTry());
1551:       assertFalse(node3.isDefaultCase());
1552:       assertFalse(node3.isCall());
1553:       assertFalse(node3.isFor());
1554:       assertFalse(node3.isEmpty());
1555:       assertFalse(node3.isTrue());
1556:       assertFalse(node3.isVoid());
1557:       assertFalse(node3.isNE());
1558:       assertFalse(node3.isNull());
1559:       assertTrue(node3.hasChildren());
1560:       assertFalse(node3.isIf());
1561:       assertFalse(node3.isDelProp());
1562:       assertFalse(node3.isName());
1563:       assertFalse(node3.isContinue());
1564:       assertFalse(node3.isIn());
1565:       assertFalse(node3.isString());
1566:       assertFalse(node3.isInc());
1567:       assertFalse(node3.isReturn());
1568:       assertTrue(node3.isNumber());
1569:       assertFalse(node3.isWhile());
1570:       assertFalse(node3.isCast());
1571:       assertFalse(node3.isThrow());
1572:       assertEquals((-1), node3.getSourcePosition());
1573:       assertFalse(node3.isFalse());
1574:       assertFalse(node3.isDebugger());
1575:       assertFalse(node3.isObjectLit());
1576:       assertFalse(node3.isAnd());
1577:       assertFalse(node3.isInstanceOf());
1578:       assertFalse(node3.isNot());
1579:       assertFalse(node3.isWith());
1580:       assertFalse(node3.isComma());
1581:       assertFalse(node3.isScript());
1582:       assertEquals(2, node3.getChildCount());
1583:       assertFalse(node3.isThis());
1584:       assertFalse(node3.isGetProp());
1585:       assertFalse(node3.hasOneChild());
1586:       assertFalse(node3.isHook());
1587:       assertFalse(node3.isGetElem());
1588:       assertFalse(node3.isDec());
1589:       assertFalse(node3.isTypeOf());
1590:       assertFalse(node3.isAssign());
1591:       assertFalse(node3.isExprResult());
1592:       assertFalse(node3.isBreak());
1593:       assertEquals((-1), node3.getLineno());
1594:       assertTrue(node3.hasMoreThanOneChild());
1595:       assertEquals(39, node3.getType());
1596:       assertFalse(node3.isCase());
1597:       assertFalse(node3.isOr());
1598:       assertFalse(node3.isNew());
1599:       assertFalse(node3.isLabel());
1600:       assertFalse(node3.isAdd());
1601:       assertFalse(node3.isBlock());
1602:       assertFalse(node3.isAssignAdd());
1603:       assertFalse(node3.isDo());
1604:       assertFalse(node3.isStringKey());
1605:       assertFalse(node3.isArrayLit());
1606:       assertFalse(node3.isVar());
1607:       assertFalse(node3.isGetterDef());
1608:       assertEquals((-1), node3.getCharno());
1609:       assertFalse(node3.isParamList());
1610:       assertFalse(node3.isLabelName());
1611:       assertFalse(node3.isSwitch());
1612:       assertNotNull(node3);
1613:       assertEquals(32, Node.INCRDECR_PROP);
1614:       assertEquals(37, Node.OPT_ARG_NAME);
1615:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1616:       assertEquals(12, Node.COLUMN_BITS);
1617:       assertEquals(46, Node.IS_NAMESPACE);
1618:       assertEquals(56, Node.CHANGE_TIME);
1619:       assertEquals(30, Node.VAR_ARGS_NAME);
1620:       assertEquals(49, Node.DIRECT_EVAL);
1621:       assertEquals(47, Node.IS_DISPATCHER);
1622:       assertEquals(2, Node.POST_FLAG);
1623:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1624:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1625:       assertEquals(54, Node.SLASH_V);
1626:       assertEquals(43, Node.IS_CONSTANT_NAME);
1627:       assertEquals(50, Node.FREE_CALL);
1628:       assertEquals(1, Node.DECR_FLAG);
1629:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1630:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1631:       assertEquals(48, Node.DIRECTIVES);
1632:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1633:       assertEquals(40, Node.ORIGINALNAME_PROP);
1634:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1635:       assertEquals(4095, Node.COLUMN_MASK);
1636:       assertEquals(52, Node.LENGTH);
1637:       assertEquals(53, Node.INPUT_ID);
1638:       assertEquals(57, Node.REFLECTED_OBJECT);
1639:       assertEquals(57, Node.LAST_PROP);
1640:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1641:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1642:       assertEquals(29, Node.JSDOC_INFO_PROP);
1643:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1644:       assertEquals(36, Node.QUOTED_PROP);
1645:       assertEquals(55, Node.INFERRED_FUNCTION);
1646:       assertEquals(39, Node.EMPTY_BLOCK);
1647:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1648:       assertEquals(8, Node.FLAG_NO_THROWS);
1649:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1650:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1651:       assertEquals(43, Node.IS_CONSTANT_NAME);
1652:       assertEquals(48, Node.DIRECTIVES);
1653:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1654:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1655:       assertEquals(4095, Node.COLUMN_MASK);
1656:       assertEquals(29, Node.JSDOC_INFO_PROP);
1657:       assertEquals(56, Node.CHANGE_TIME);
1658:       assertEquals(47, Node.IS_DISPATCHER);
1659:       assertEquals(57, Node.REFLECTED_OBJECT);
1660:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1661:       assertEquals(53, Node.INPUT_ID);
1662:       assertEquals(39, Node.EMPTY_BLOCK);
1663:       assertEquals(36, Node.QUOTED_PROP);
1664:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1665:       assertEquals(55, Node.INFERRED_FUNCTION);
1666:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1667:       assertEquals(52, Node.LENGTH);
1668:       assertEquals(8, Node.FLAG_NO_THROWS);
1669:       assertEquals(1, Node.DECR_FLAG);
1670:       assertEquals(49, Node.DIRECT_EVAL);
1671:       assertEquals(30, Node.VAR_ARGS_NAME);
1672:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1673:       assertEquals(57, Node.LAST_PROP);
1674:       assertEquals(12, Node.COLUMN_BITS);
1675:       assertEquals(32, Node.INCRDECR_PROP);
1676:       assertEquals(46, Node.IS_NAMESPACE);
1677:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1678:       assertEquals(2, Node.POST_FLAG);
1679:       assertEquals(37, Node.OPT_ARG_NAME);
1680:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1681:       assertEquals(40, Node.ORIGINALNAME_PROP);
1682:       assertEquals(50, Node.FREE_CALL);
1683:       assertEquals(54, Node.SLASH_V);
1684:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1685:       assertEquals(47, Node.IS_DISPATCHER);
1686:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1687:       assertEquals(56, Node.CHANGE_TIME);
1688:       assertEquals(29, Node.JSDOC_INFO_PROP);
1689:       assertEquals(2, Node.POST_FLAG);
1690:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1691:       assertEquals(46, Node.IS_NAMESPACE);
1692:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1693:       assertEquals(37, Node.OPT_ARG_NAME);
1694:       assertEquals(49, Node.DIRECT_EVAL);
1695:       assertEquals(43, Node.IS_CONSTANT_NAME);
1696:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1697:       assertEquals(4095, Node.COLUMN_MASK);
1698:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1699:       assertEquals(12, Node.COLUMN_BITS);
1700:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1701:       assertEquals(32, Node.INCRDECR_PROP);
1702:       assertEquals(1, Node.DECR_FLAG);
1703:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1704:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1705:       assertEquals(8, Node.FLAG_NO_THROWS);
1706:       assertEquals(50, Node.FREE_CALL);
1707:       assertEquals(57, Node.REFLECTED_OBJECT);
1708:       assertEquals(54, Node.SLASH_V);
1709:       assertEquals(40, Node.ORIGINALNAME_PROP);
1710:       assertEquals(48, Node.DIRECTIVES);
1711:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1712:       assertEquals(57, Node.LAST_PROP);
1713:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1714:       assertEquals(36, Node.QUOTED_PROP);
1715:       assertEquals(30, Node.VAR_ARGS_NAME);
1716:       assertEquals(52, Node.LENGTH);
1717:       assertEquals(53, Node.INPUT_ID);
1718:       assertEquals(55, Node.INFERRED_FUNCTION);
1719:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1720:       assertEquals(39, Node.EMPTY_BLOCK);
1721:       
1722:       node3.addChildBefore(node0, node2);
1723:       assertFalse(node0.equals((Object)node1));
1724:       assertFalse(node0.equals((Object)node3));
1725:       assertFalse(node0.equals((Object)node2));
1726:       assertFalse(node1.equals((Object)node0));
1727:       assertFalse(node1.equals((Object)node2));
1728:       assertFalse(node1.equals((Object)node3));
1729:       assertFalse(node2.equals((Object)node0));
1730:       assertFalse(node2.equals((Object)node1));
1731:       assertFalse(node2.equals((Object)node3));
1732:       assertFalse(node3.equals((Object)node1));
1733:       assertFalse(node3.equals((Object)node2));
1734:       assertFalse(node3.equals((Object)node0));
1735:       assertNotSame(node1, node2);
1736:       assertNotSame(node2, node1);
1737:       assertFalse(node0.isIf());
1738:       assertFalse(node0.isFor());
1739:       assertFalse(node0.isNE());
1740:       assertFalse(node0.isEmpty());
1741:       assertFalse(node0.isArrayLit());
1742:       assertFalse(node0.isDelProp());
1743:       assertFalse(node0.isFunction());
1744:       assertFalse(node0.isRegExp());
1745:       assertFalse(node0.isDefaultCase());
1746:       assertFalse(node0.isInc());
1747:       assertEquals(159744, node0.getSourcePosition());
1748:       assertFalse(node0.isVoid());
1749:       assertFalse(node0.isIn());
1750:       assertFalse(node0.isTrue());
1751:       assertFalse(node0.isBreak());
1752:       assertFalse(node0.isNull());
1753:       assertFalse(node0.isThrow());
1754:       assertFalse(node0.isSetterDef());
1755:       assertFalse(node0.isCall());
1756:       assertFalse(node0.isGetProp());
1757:       assertFalse(node0.isName());
1758:       assertFalse(node0.isComma());
1759:       assertFalse(node0.isFalse());
1760:       assertFalse(node0.isString());
1761:       assertFalse(node0.isWhile());
1762:       assertFalse(node0.isAnd());
1763:       assertTrue(node0.isNumber());
1764:       assertFalse(node0.isObjectLit());
1765:       assertFalse(node0.isDebugger());
1766:       assertFalse(node0.isNot());
1767:       assertFalse(node0.hasChildren());
1768:       assertFalse(node0.isGetElem());
1769:       assertFalse(node0.hasOneChild());
1770:       assertFalse(node0.isLabelName());
1771:       assertFalse(node0.isReturn());
1772:       assertFalse(node0.isLabel());
1773:       assertFalse(node0.isAssignAdd());
1774:       assertFalse(node0.isCast());
1775:       assertFalse(node0.isContinue());
1776:       assertFalse(node0.hasMoreThanOneChild());
1777:       assertFalse(node0.isTypeOf());
1778:       assertFalse(node0.isDec());
1779:       assertFalse(node0.isAssign());
1780:       assertFalse(node0.isWith());
1781:       assertFalse(node0.isExprResult());
1782:       assertFalse(node0.isNew());
1783:       assertFalse(node0.isDo());
1784:       assertFalse(node0.isAdd());
1785:       assertEquals(0, node0.getCharno());
1786:       assertFalse(node0.isOr());
1787:       assertEquals(39, node0.getLineno());
1788:       assertFalse(node0.isStringKey());
1789:       assertFalse(node0.isParamList());
1790:       assertFalse(node0.isHook());
1791:       assertFalse(node0.isBlock());
1792:       assertFalse(node0.isInstanceOf());
1793:       assertFalse(node0.isVar());
1794:       assertFalse(node0.isCatch());
1795:       assertFalse(node0.isThis());
1796:       assertEquals(0, node0.getChildCount());
1797:       assertEquals(39, node0.getType());
1798:       assertFalse(node0.isScript());
1799:       assertFalse(node0.isSwitch());
1800:       assertFalse(node0.isCase());
1801:       assertFalse(node0.isTry());
1802:       assertFalse(node0.isGetterDef());
1803:       assertFalse(node1.isTrue());
1804:       assertFalse(node1.isFunction());
1805:       assertFalse(node1.isDebugger());
1806:       assertEquals(36, node1.getType());
1807:       assertFalse(node1.isRegExp());
1808:       assertFalse(node1.isTry());
1809:       assertFalse(node1.isVoid());
1810:       assertFalse(node1.isDefaultCase());
1811:       assertFalse(node1.isEmpty());
1812:       assertFalse(node1.isDelProp());
1813:       assertFalse(node1.isIf());
1814:       assertFalse(node1.isNull());
1815:       assertFalse(node1.isFor());
1816:       assertFalse(node1.isNE());
1817:       assertFalse(node1.isCatch());
1818:       assertFalse(node1.isCall());
1819:       assertFalse(node1.isName());
1820:       assertFalse(node1.isSwitch());
1821:       assertFalse(node1.isNew());
1822:       assertFalse(node1.isHook());
1823:       assertFalse(node1.isBlock());
1824:       assertFalse(node1.isVar());
1825:       assertFalse(node1.isCase());
1826:       assertFalse(node1.isDo());
1827:       assertFalse(node1.isAdd());
1828:       assertFalse(node1.isParamList());
1829:       assertFalse(node1.isNumber());
1830:       assertFalse(node1.isGetterDef());
1831:       assertFalse(node1.isLabel());
1832:       assertFalse(node1.isAssignAdd());
1833:       assertFalse(node1.isStringKey());
1834:       assertFalse(node1.isArrayLit());
1835:       assertFalse(node1.isLabelName());
1836:       assertEquals(0, node1.getChildCount());
1837:       assertEquals(0, node1.getCharno());
1838:       assertFalse(node1.isExprResult());
1839:       assertFalse(node1.hasOneChild());
1840:       assertFalse(node1.isNot());
1841:       assertFalse(node1.isObjectLit());
1842:       assertFalse(node1.isScript());
1843:       assertFalse(node1.isThis());
1844:       assertFalse(node1.isComma());
1845:       assertFalse(node1.isGetProp());
1846:       assertFalse(node1.isTypeOf());
1847:       assertFalse(node1.isDec());
1848:       assertFalse(node1.isOr());
1849:       assertFalse(node1.isReturn());
1850:       assertFalse(node1.hasChildren());
1851:       assertEquals(131072, node1.getSourcePosition());
1852:       assertFalse(node1.hasMoreThanOneChild());
1853:       assertFalse(node1.isAssign());
1854:       assertFalse(node1.isWith());
1855:       assertEquals(32, node1.getLineno());
1856:       assertFalse(node1.isBreak());
1857:       assertFalse(node1.isInstanceOf());
1858:       assertFalse(node1.isGetElem());
1859:       assertFalse(node1.isInc());
1860:       assertFalse(node1.isWhile());
1861:       assertFalse(node1.isString());
1862:       assertFalse(node1.isIn());
1863:       assertFalse(node1.isSetterDef());
1864:       assertFalse(node1.isThrow());
1865:       assertFalse(node1.isAnd());
1866:       assertFalse(node1.isContinue());
1867:       assertFalse(node1.isFalse());
1868:       assertFalse(node1.isCast());
1869:       assertFalse(node2.isHook());
1870:       assertEquals((-1), node2.getCharno());
1871:       assertFalse(node2.isThrow());
1872:       assertFalse(node2.isCase());
1873:       assertFalse(node2.isGetProp());
1874:       assertFalse(node2.isInc());
1875:       assertFalse(node2.isString());
1876:       assertFalse(node2.isObjectLit());
1877:       assertEquals(46, node2.getType());
1878:       assertFalse(node2.isAnd());
1879:       assertFalse(node2.isSwitch());
1880:       assertFalse(node2.isFalse());
1881:       assertFalse(node2.isTrue());
1882:       assertEquals((-1), node2.getSourcePosition());
1883:       assertFalse(node2.isDefaultCase());
1884:       assertFalse(node2.isDebugger());
1885:       assertFalse(node2.isNot());
1886:       assertFalse(node2.isEmpty());
1887:       assertFalse(node2.isOr());
1888:       assertFalse(node2.isReturn());
1889:       assertFalse(node2.isWhile());
1890:       assertFalse(node2.isTypeOf());
1891:       assertFalse(node2.isBreak());
1892:       assertFalse(node2.hasChildren());
1893:       assertFalse(node2.isDelProp());
1894:       assertFalse(node2.isComma());
1895:       assertFalse(node2.isVoid());
1896:       assertFalse(node2.isDec());
1897:       assertFalse(node2.isAssign());
1898:       assertFalse(node2.isGetElem());
1899:       assertFalse(node2.isCall());
1900:       assertFalse(node2.isExprResult());
1901:       assertFalse(node2.isBlock());
1902:       assertFalse(node2.isName());
1903:       assertFalse(node2.isStringKey());
1904:       assertFalse(node2.isVar());
1905:       assertFalse(node2.isNull());
1906:       assertFalse(node2.isSetterDef());
1907:       assertFalse(node2.isDo());
1908:       assertFalse(node2.isNew());
1909:       assertFalse(node2.isAdd());
1910:       assertEquals(0, node2.getChildCount());
1911:       assertFalse(node2.isLabel());
1912:       assertFalse(node2.isAssignAdd());
1913:       assertFalse(node2.isParamList());
1914:       assertFalse(node2.isFunction());
1915:       assertFalse(node2.isLabelName());
1916:       assertFalse(node2.isContinue());
1917:       assertFalse(node2.isCast());
1918:       assertFalse(node2.hasOneChild());
1919:       assertFalse(node2.isArrayLit());
1920:       assertFalse(node2.isTry());
1921:       assertFalse(node2.isFor());
1922:       assertFalse(node2.isScript());
1923:       assertFalse(node2.isNumber());
1924:       assertFalse(node2.isGetterDef());
1925:       assertFalse(node2.hasMoreThanOneChild());
1926:       assertFalse(node2.isIn());
1927:       assertEquals((-1), node2.getLineno());
1928:       assertFalse(node2.isThis());
1929:       assertFalse(node2.isNE());
1930:       assertFalse(node2.isRegExp());
1931:       assertFalse(node2.isIf());
1932:       assertFalse(node2.isWith());
1933:       assertFalse(node2.isCatch());
1934:       assertFalse(node2.isInstanceOf());
1935:       assertFalse(node3.isCatch());
1936:       assertFalse(node3.isRegExp());
1937:       assertFalse(node3.isFunction());
1938:       assertFalse(node3.isSetterDef());
1939:       assertFalse(node3.isTry());
1940:       assertFalse(node3.isDefaultCase());
1941:       assertFalse(node3.isCall());
1942:       assertFalse(node3.isFor());
1943:       assertFalse(node3.isEmpty());
1944:       assertFalse(node3.isTrue());
1945:       assertFalse(node3.isVoid());
1946:       assertFalse(node3.isNE());
1947:       assertFalse(node3.isNull());
1948:       assertTrue(node3.hasChildren());
1949:       assertFalse(node3.isIf());
1950:       assertFalse(node3.isDelProp());
1951:       assertFalse(node3.isName());
1952:       assertFalse(node3.isContinue());
1953:       assertFalse(node3.isIn());
1954:       assertFalse(node3.isString());
1955:       assertEquals(3, node3.getChildCount());
1956:       assertFalse(node3.isInc());
1957:       assertFalse(node3.isReturn());
1958:       assertTrue(node3.isNumber());
1959:       assertFalse(node3.isWhile());
1960:       assertFalse(node3.isCast());
1961:       assertFalse(node3.isThrow());
1962:       assertEquals((-1), node3.getSourcePosition());
1963:       assertFalse(node3.isFalse());
1964:       assertFalse(node3.isDebugger());
1965:       assertFalse(node3.isObjectLit());
1966:       assertFalse(node3.isAnd());
1967:       assertFalse(node3.isInstanceOf());
1968:       assertFalse(node3.isNot());
1969:       assertFalse(node3.isWith());
1970:       assertFalse(node3.isComma());
1971:       assertFalse(node3.isScript());
1972:       assertFalse(node3.isThis());
1973:       assertFalse(node3.isGetProp());
1974:       assertFalse(node3.hasOneChild());
1975:       assertFalse(node3.isHook());
1976:       assertFalse(node3.isGetElem());
1977:       assertFalse(node3.isDec());
1978:       assertFalse(node3.isTypeOf());
1979:       assertFalse(node3.isAssign());
1980:       assertFalse(node3.isExprResult());
1981:       assertFalse(node3.isBreak());
1982:       assertEquals((-1), node3.getLineno());
1983:       assertTrue(node3.hasMoreThanOneChild());
1984:       assertEquals(39, node3.getType());
1985:       assertFalse(node3.isCase());
1986:       assertFalse(node3.isOr());
1987:       assertFalse(node3.isNew());
1988:       assertFalse(node3.isLabel());
1989:       assertFalse(node3.isAdd());
1990:       assertFalse(node3.isBlock());
1991:       assertFalse(node3.isAssignAdd());
1992:       assertFalse(node3.isDo());
1993:       assertFalse(node3.isStringKey());
1994:       assertFalse(node3.isArrayLit());
1995:       assertFalse(node3.isVar());
1996:       assertFalse(node3.isGetterDef());
1997:       assertEquals((-1), node3.getCharno());
1998:       assertFalse(node3.isParamList());
1999:       assertFalse(node3.isLabelName());
2000:       assertFalse(node3.isSwitch());
2001:       assertEquals(57, Node.LAST_PROP);
2002:       assertEquals(54, Node.SLASH_V);
2003:       assertEquals(49, Node.DIRECT_EVAL);
2004:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2005:       assertEquals(1, Node.DECR_FLAG);
2006:       assertEquals(57, Node.REFLECTED_OBJECT);
2007:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2008:       assertEquals(52, Node.LENGTH);
2009:       assertEquals(46, Node.IS_NAMESPACE);
2010:       assertEquals(50, Node.FREE_CALL);
2011:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2012:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2013:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2014:       assertEquals(56, Node.CHANGE_TIME);
2015:       assertEquals(32, Node.INCRDECR_PROP);
2016:       assertEquals(48, Node.DIRECTIVES);
2017:       assertEquals(37, Node.OPT_ARG_NAME);
2018:       assertEquals(12, Node.COLUMN_BITS);
2019:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2020:       assertEquals(4095, Node.COLUMN_MASK);
2021:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2022:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2023:       assertEquals(43, Node.IS_CONSTANT_NAME);
2024:       assertEquals(53, Node.INPUT_ID);
2025:       assertEquals(55, Node.INFERRED_FUNCTION);
2026:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2027:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2028:       assertEquals(36, Node.QUOTED_PROP);
2029:       assertEquals(2, Node.POST_FLAG);
2030:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2031:       assertEquals(8, Node.FLAG_NO_THROWS);
2032:       assertEquals(39, Node.EMPTY_BLOCK);
2033:       assertEquals(29, Node.JSDOC_INFO_PROP);
2034:       assertEquals(40, Node.ORIGINALNAME_PROP);
2035:       assertEquals(30, Node.VAR_ARGS_NAME);
2036:       assertEquals(47, Node.IS_DISPATCHER);
2037:       assertEquals(32, Node.INCRDECR_PROP);
2038:       assertEquals(37, Node.OPT_ARG_NAME);
2039:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2040:       assertEquals(12, Node.COLUMN_BITS);
2041:       assertEquals(46, Node.IS_NAMESPACE);
2042:       assertEquals(56, Node.CHANGE_TIME);
2043:       assertEquals(30, Node.VAR_ARGS_NAME);
2044:       assertEquals(49, Node.DIRECT_EVAL);
2045:       assertEquals(47, Node.IS_DISPATCHER);
2046:       assertEquals(2, Node.POST_FLAG);
2047:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2048:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2049:       assertEquals(54, Node.SLASH_V);
2050:       assertEquals(43, Node.IS_CONSTANT_NAME);
2051:       assertEquals(50, Node.FREE_CALL);
2052:       assertEquals(1, Node.DECR_FLAG);
2053:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2054:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2055:       assertEquals(48, Node.DIRECTIVES);
2056:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2057:       assertEquals(40, Node.ORIGINALNAME_PROP);
2058:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2059:       assertEquals(4095, Node.COLUMN_MASK);
2060:       assertEquals(52, Node.LENGTH);
2061:       assertEquals(53, Node.INPUT_ID);
2062:       assertEquals(57, Node.REFLECTED_OBJECT);
2063:       assertEquals(57, Node.LAST_PROP);
2064:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2065:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2066:       assertEquals(29, Node.JSDOC_INFO_PROP);
2067:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2068:       assertEquals(36, Node.QUOTED_PROP);
2069:       assertEquals(55, Node.INFERRED_FUNCTION);
2070:       assertEquals(39, Node.EMPTY_BLOCK);
2071:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2072:       assertEquals(8, Node.FLAG_NO_THROWS);
2073:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2074:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2075:       assertEquals(43, Node.IS_CONSTANT_NAME);
2076:       assertEquals(48, Node.DIRECTIVES);
2077:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2078:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2079:       assertEquals(4095, Node.COLUMN_MASK);
2080:       assertEquals(29, Node.JSDOC_INFO_PROP);
2081:       assertEquals(56, Node.CHANGE_TIME);
2082:       assertEquals(47, Node.IS_DISPATCHER);
2083:       assertEquals(57, Node.REFLECTED_OBJECT);
2084:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2085:       assertEquals(53, Node.INPUT_ID);
2086:       assertEquals(39, Node.EMPTY_BLOCK);
2087:       assertEquals(36, Node.QUOTED_PROP);
2088:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2089:       
2090:       boolean boolean2 = node1.isUnscopedQualifiedName();
2091:       assertFalse(node1.equals((Object)node0));
2092:       assertFalse(node1.equals((Object)node2));
2093:       assertFalse(node1.equals((Object)node3));
2094:       assertTrue(boolean2 == boolean1);
2095:       assertTrue(boolean2 == boolean0);
2096:       assertNotSame(node1, node2);
2097:       assertFalse(node1.isTrue());
2098:       assertFalse(node1.isFunction());
2099:       assertFalse(node1.isDebugger());
2100:       assertEquals(36, node1.getType());
2101:       assertFalse(node1.isRegExp());
2102:       assertFalse(node1.isTry());
2103:       assertFalse(node1.isVoid());
2104:       assertFalse(node1.isDefaultCase());
2105:       assertFalse(node1.isEmpty());
2106:       assertFalse(node1.isDelProp());
2107:       assertFalse(node1.isIf());
2108:       assertFalse(node1.isNull());
2109:       assertFalse(node1.isFor());
2110:       assertFalse(node1.isNE());
2111:       assertFalse(node1.isCatch());
2112:       assertFalse(node1.isCall());
2113:       assertFalse(node1.isName());
2114:       assertFalse(node1.isSwitch());
2115:       assertFalse(node1.isNew());
2116:       assertFalse(node1.isHook());
2117:       assertFalse(node1.isBlock());
2118:       assertFalse(node1.isVar());
2119:       assertFalse(node1.isCase());
2120:       assertFalse(node1.isDo());
2121:       assertFalse(node1.isAdd());
2122:       assertFalse(node1.isParamList());
2123:       assertFalse(node1.isNumber());
2124:       assertFalse(node1.isGetterDef());
2125:       assertFalse(node1.isLabel());
2126:       assertFalse(node1.isAssignAdd());
2127:       assertFalse(node1.isStringKey());
2128:       assertFalse(node1.isArrayLit());
2129:       assertFalse(node1.isLabelName());
2130:       assertEquals(0, node1.getChildCount());
2131:       assertEquals(0, node1.getCharno());
2132:       assertFalse(node1.isExprResult());
2133:       assertFalse(node1.hasOneChild());
2134:       assertFalse(node1.isNot());
2135:       assertFalse(node1.isObjectLit());
2136:       assertFalse(node1.isScript());
2137:       assertFalse(node1.isThis());
2138:       assertFalse(node1.isComma());
2139:       assertFalse(node1.isGetProp());
2140:       assertFalse(node1.isTypeOf());
2141:       assertFalse(node1.isDec());
2142:       assertFalse(node1.isOr());
2143:       assertFalse(node1.isReturn());
2144:       assertFalse(node1.hasChildren());
2145:       assertEquals(131072, node1.getSourcePosition());
2146:       assertFalse(node1.hasMoreThanOneChild());
2147:       assertFalse(node1.isAssign());
2148:       assertFalse(node1.isWith());
2149:       assertEquals(32, node1.getLineno());
2150:       assertFalse(node1.isBreak());
2151:       assertFalse(node1.isInstanceOf());
2152:       assertFalse(node1.isGetElem());
2153:       assertFalse(node1.isInc());
2154:       assertFalse(node1.isWhile());
2155:       assertFalse(node1.isString());
2156:       assertFalse(node1.isIn());
2157:       assertFalse(node1.isSetterDef());
2158:       assertFalse(node1.isThrow());
2159:       assertFalse(node1.isAnd());
2160:       assertFalse(node1.isContinue());
2161:       assertFalse(node1.isFalse());
2162:       assertFalse(node1.isCast());
2163:       assertFalse(boolean2);
2164:       
2165:       Node node4 = Node.newString(36, "");
2166:       assertFalse(node4.equals((Object)node2));
2167:       assertFalse(node4.equals((Object)node1));
2168:       assertFalse(node4.equals((Object)node3));
2169:       assertFalse(node4.equals((Object)node0));
2170:       assertNotSame(node4, node2);
2171:       assertNotSame(node4, node1);
2172:       assertFalse(node4.isObjectLit());
2173:       assertFalse(node4.isInstanceOf());
2174:       assertFalse(node4.isAnd());
2175:       assertFalse(node4.isGetProp());
2176:       assertFalse(node4.isComma());
2177:       assertFalse(node4.isThis());
2178:       assertFalse(node4.isExprResult());
2179:       assertFalse(node4.isWith());
2180:       assertFalse(node4.isThrow());
2181:       assertFalse(node4.isGetElem());
2182:       assertFalse(node4.isBreak());
2183:       assertFalse(node4.isInc());
2184:       assertFalse(node4.isOr());
2185:       assertFalse(node4.hasMoreThanOneChild());
2186:       assertFalse(node4.isAssignAdd());
2187:       assertFalse(node4.isDo());
2188:       assertEquals((-1), node4.getLineno());
2189:       assertFalse(node4.isCase());
2190:       assertFalse(node4.isLabel());
2191:       assertFalse(node4.isBlock());
2192:       assertFalse(node4.isFor());
2193:       assertFalse(node4.isHook());
2194:       assertFalse(node4.isStringKey());
2195:       assertFalse(node4.isLabelName());
2196:       assertFalse(node4.isTry());
2197:       assertFalse(node4.hasOneChild());
2198:       assertFalse(node4.isArrayLit());
2199:       assertFalse(node4.isSwitch());
2200:       assertFalse(node4.isScript());
2201:       assertFalse(node4.isNumber());
2202:       assertFalse(node4.isParamList());
2203:       assertFalse(node4.isGetterDef());
2204:       assertEquals((-1), node4.getCharno());
2205:       assertFalse(node4.isCatch());
2206:       assertEquals(36, node4.getType());
2207:       assertFalse(node4.isRegExp());
2208:       assertFalse(node4.isFunction());
2209:       assertFalse(node4.isDefaultCase());
2210:       assertEquals(0, node4.getChildCount());
2211:       assertFalse(node4.isVar());
2212:       assertFalse(node4.isCall());
2213:       assertFalse(node4.isEmpty());
2214:       assertFalse(node4.isName());
2215:       assertFalse(node4.isAdd());
2216:       assertFalse(node4.isDelProp());
2217:       assertFalse(node4.isVoid());
2218:       assertFalse(node4.isNew());
2219:       assertFalse(node4.isSetterDef());
2220:       assertFalse(node4.isNE());
2221:       assertFalse(node4.isTrue());
2222:       assertFalse(node4.isNull());
2223:       assertFalse(node4.isIf());
2224:       assertFalse(node4.isIn());
2225:       assertFalse(node4.isContinue());
2226:       assertFalse(node4.isTypeOf());
2227:       assertFalse(node4.isWhile());
2228:       assertFalse(node4.isAssign());
2229:       assertFalse(node4.isReturn());
2230:       assertFalse(node4.hasChildren());
2231:       assertFalse(node4.isDec());
2232:       assertFalse(node4.isCast());
2233:       assertFalse(node4.isFalse());
2234:       assertFalse(node4.isString());
2235:       assertFalse(node4.isNot());
2236:       assertEquals((-1), node4.getSourcePosition());
2237:       assertFalse(node4.isDebugger());
2238:       assertNotNull(node4);
2239:       
2240:       boolean boolean3 = node0.isFor();
2241:       assertFalse(node0.equals((Object)node1));
2242:       assertFalse(node0.equals((Object)node3));
2243:       assertFalse(node0.equals((Object)node4));
2244:       assertFalse(node0.equals((Object)node2));
2245:       assertTrue(boolean3 == boolean0);
2246:       assertTrue(boolean3 == boolean2);
2247:       assertTrue(boolean3 == boolean1);
2248:       assertFalse(node0.isIf());
2249:       assertFalse(node0.isFor());
2250:       assertFalse(node0.isNE());
2251:       assertFalse(node0.isEmpty());
2252:       assertFalse(node0.isArrayLit());
2253:       assertFalse(node0.isDelProp());
2254:       assertFalse(node0.isFunction());
2255:       assertFalse(node0.isRegExp());
2256:       assertFalse(node0.isDefaultCase());
2257:       assertFalse(node0.isInc());
2258:       assertEquals(159744, node0.getSourcePosition());
2259:       assertFalse(node0.isVoid());
2260:       assertFalse(node0.isIn());
2261:       assertFalse(node0.isTrue());
2262:       assertFalse(node0.isBreak());
2263:       assertFalse(node0.isNull());
2264:       assertFalse(node0.isThrow());
2265:       assertFalse(node0.isSetterDef());
2266:       assertFalse(node0.isCall());
2267:       assertFalse(node0.isGetProp());
2268:       assertFalse(node0.isName());
2269:       assertFalse(node0.isComma());
2270:       assertFalse(node0.isFalse());
2271:       assertFalse(node0.isString());
2272:       assertFalse(node0.isWhile());
2273:       assertFalse(node0.isAnd());
2274:       assertTrue(node0.isNumber());
2275:       assertFalse(node0.isObjectLit());
2276:       assertFalse(node0.isDebugger());
2277:       assertFalse(node0.isNot());
2278:       assertFalse(node0.hasChildren());
2279:       assertFalse(node0.isGetElem());
2280:       assertFalse(node0.hasOneChild());
2281:       assertFalse(node0.isLabelName());
2282:       assertFalse(node0.isReturn());
2283:       assertFalse(node0.isLabel());
2284:       assertFalse(node0.isAssignAdd());
2285:       assertFalse(node0.isCast());
2286:       assertFalse(node0.isContinue());
2287:       assertFalse(node0.hasMoreThanOneChild());
2288:       assertFalse(node0.isTypeOf());
2289:       assertFalse(node0.isDec());
2290:       assertFalse(node0.isAssign());
2291:       assertFalse(node0.isWith());
2292:       assertFalse(node0.isExprResult());
2293:       assertFalse(node0.isNew());
2294:       assertFalse(node0.isDo());
2295:       assertFalse(node0.isAdd());
2296:       assertEquals(0, node0.getCharno());
2297:       assertFalse(node0.isOr());
2298:       assertEquals(39, node0.getLineno());
2299:       assertFalse(node0.isStringKey());
2300:       assertFalse(node0.isParamList());
2301:       assertFalse(node0.isHook());
2302:       assertFalse(node0.isBlock());
2303:       assertFalse(node0.isInstanceOf());
2304:       assertFalse(node0.isVar());
2305:       assertFalse(node0.isCatch());
2306:       assertFalse(node0.isThis());
2307:       assertEquals(0, node0.getChildCount());
2308:       assertEquals(39, node0.getType());
2309:       assertFalse(node0.isScript());
2310:       assertFalse(node0.isSwitch());
2311:       assertFalse(node0.isCase());
2312:       assertFalse(node0.isTry());
2313:       assertFalse(node0.isGetterDef());
2314:       assertFalse(boolean3);
2315:       
2316:       boolean boolean4 = node3.isName();
2317:       assertTrue(boolean4 == boolean3);
2318:       assertTrue(boolean4 == boolean2);
2319:       assertTrue(boolean4 == boolean1);
2320:       assertTrue(boolean4 == boolean0);
2321:       assertFalse(node1.equals((Object)node0));
2322:       assertFalse(node1.equals((Object)node2));
2323:       assertFalse(node1.equals((Object)node4));
2324:       assertFalse(node1.equals((Object)node3));
2325:       assertFalse(node2.equals((Object)node4));
2326:       assertFalse(node2.equals((Object)node0));
2327:       assertFalse(node2.equals((Object)node1));
2328:       assertFalse(node2.equals((Object)node3));
2329:       assertFalse(node3.equals((Object)node1));
2330:       assertFalse(node3.equals((Object)node4));
2331:       assertFalse(node3.equals((Object)node2));
2332:       assertFalse(node3.equals((Object)node0));
2333:       assertNotSame(node1, node2);
2334:       assertNotSame(node1, node4);
2335:       assertNotSame(node2, node4);
2336:       assertNotSame(node2, node1);
2337:       assertFalse(node1.isTrue());
2338:       assertFalse(node1.isFunction());
2339:       assertFalse(node1.isDebugger());
2340:       assertEquals(36, node1.getType());
2341:       assertFalse(node1.isRegExp());
2342:       assertFalse(node1.isTry());
2343:       assertFalse(node1.isVoid());
2344:       assertFalse(node1.isDefaultCase());
2345:       assertFalse(node1.isEmpty());
2346:       assertFalse(node1.isDelProp());
2347:       assertFalse(node1.isIf());
2348:       assertFalse(node1.isNull());
2349:       assertFalse(node1.isFor());
2350:       assertFalse(node1.isNE());
2351:       assertFalse(node1.isCatch());
2352:       assertFalse(node1.isCall());
2353:       assertFalse(node1.isName());
2354:       assertFalse(node1.isSwitch());
2355:       assertFalse(node1.isNew());
2356:       assertFalse(node1.isHook());
2357:       assertFalse(node1.isBlock());
2358:       assertFalse(node1.isVar());
2359:       assertFalse(node1.isCase());
2360:       assertFalse(node1.isDo());
2361:       assertFalse(node1.isAdd());
2362:       assertFalse(node1.isParamList());
2363:       assertFalse(node1.isNumber());
2364:       assertFalse(node1.isGetterDef());
2365:       assertFalse(node1.isLabel());
2366:       assertFalse(node1.isAssignAdd());
2367:       assertFalse(node1.isStringKey());
2368:       assertFalse(node1.isArrayLit());
2369:       assertFalse(node1.isLabelName());
2370:       assertEquals(0, node1.getChildCount());
2371:       assertEquals(0, node1.getCharno());
2372:       assertFalse(node1.isExprResult());
2373:       assertFalse(node1.hasOneChild());
2374:       assertFalse(node1.isNot());
2375:       assertFalse(node1.isObjectLit());
2376:       assertFalse(node1.isScript());
2377:       assertFalse(node1.isThis());
2378:       assertFalse(node1.isComma());
2379:       assertFalse(node1.isGetProp());
2380:       assertFalse(node1.isTypeOf());
2381:       assertFalse(node1.isDec());
2382:       assertFalse(node1.isOr());
2383:       assertFalse(node1.isReturn());
2384:       assertFalse(node1.hasChildren());
2385:       assertEquals(131072, node1.getSourcePosition());
2386:       assertFalse(node1.hasMoreThanOneChild());
2387:       assertFalse(node1.isAssign());
2388:       assertFalse(node1.isWith());
2389:       assertEquals(32, node1.getLineno());
2390:       assertFalse(node1.isBreak());
2391:       assertFalse(node1.isInstanceOf());
2392:       assertFalse(node1.isGetElem());
2393:       assertFalse(node1.isInc());
2394:       assertFalse(node1.isWhile());
2395:       assertFalse(node1.isString());
2396:       assertFalse(node1.isIn());
2397:       assertFalse(node1.isSetterDef());
2398:       assertFalse(node1.isThrow());
2399:       assertFalse(node1.isAnd());
2400:       assertFalse(node1.isContinue());
2401:       assertFalse(node1.isFalse());
2402:       assertFalse(node1.isCast());
2403:       assertFalse(node2.isHook());
2404:       assertEquals((-1), node2.getCharno());
2405:       assertFalse(node2.isThrow());
2406:       assertFalse(node2.isCase());
2407:       assertFalse(node2.isGetProp());
2408:       assertFalse(node2.isInc());
2409:       assertFalse(node2.isString());
2410:       assertFalse(node2.isObjectLit());
2411:       assertEquals(46, node2.getType());
2412:       assertFalse(node2.isAnd());
2413:       assertFalse(node2.isSwitch());
2414:       assertFalse(node2.isFalse());
2415:       assertFalse(node2.isTrue());
2416:       assertEquals((-1), node2.getSourcePosition());
2417:       assertFalse(node2.isDefaultCase());
2418:       assertFalse(node2.isDebugger());
2419:       assertFalse(node2.isNot());
2420:       assertFalse(node2.isEmpty());
2421:       assertFalse(node2.isOr());
2422:       assertFalse(node2.isReturn());
2423:       assertFalse(node2.isWhile());
2424:       assertFalse(node2.isTypeOf());
2425:       assertFalse(node2.isBreak());
2426:       assertFalse(node2.hasChildren());
2427:       assertFalse(node2.isDelProp());
2428:       assertFalse(node2.isComma());
2429:       assertFalse(node2.isVoid());
2430:       assertFalse(node2.isDec());
2431:       assertFalse(node2.isAssign());
2432:       assertFalse(node2.isGetElem());
2433:       assertFalse(node2.isCall());
2434:       assertFalse(node2.isExprResult());
2435:       assertFalse(node2.isBlock());
2436:       assertFalse(node2.isName());
2437:       assertFalse(node2.isStringKey());
2438:       assertFalse(node2.isVar());
2439:       assertFalse(node2.isNull());
2440:       assertFalse(node2.isSetterDef());
2441:       assertFalse(node2.isDo());
2442:       assertFalse(node2.isNew());
2443:       assertFalse(node2.isAdd());
2444:       assertEquals(0, node2.getChildCount());
2445:       assertFalse(node2.isLabel());
2446:       assertFalse(node2.isAssignAdd());
2447:       assertFalse(node2.isParamList());
2448:       assertFalse(node2.isFunction());
2449:       assertFalse(node2.isLabelName());
2450:       assertFalse(node2.isContinue());
2451:       assertFalse(node2.isCast());
2452:       assertFalse(node2.hasOneChild());
2453:       assertFalse(node2.isArrayLit());
2454:       assertFalse(node2.isTry());
2455:       assertFalse(node2.isFor());
2456:       assertFalse(node2.isScript());
2457:       assertFalse(node2.isNumber());
2458:       assertFalse(node2.isGetterDef());
2459:       assertFalse(node2.hasMoreThanOneChild());
2460:       assertFalse(node2.isIn());
2461:       assertEquals((-1), node2.getLineno());
2462:       assertFalse(node2.isThis());
2463:       assertFalse(node2.isNE());
2464:       assertFalse(node2.isRegExp());
2465:       assertFalse(node2.isIf());
2466:       assertFalse(node2.isWith());
2467:       assertFalse(node2.isCatch());
2468:       assertFalse(node2.isInstanceOf());
2469:       assertFalse(node3.isCatch());
2470:       assertFalse(node3.isRegExp());
2471:       assertFalse(node3.isFunction());
2472:       assertFalse(node3.isSetterDef());
2473:       assertFalse(node3.isTry());
2474:       assertFalse(node3.isDefaultCase());
2475:       assertFalse(node3.isCall());
2476:       assertFalse(node3.isFor());
2477:       assertFalse(node3.isEmpty());
2478:       assertFalse(node3.isTrue());
2479:       assertFalse(node3.isVoid());
2480:       assertFalse(node3.isNE());
2481:       assertFalse(node3.isNull());
2482:       assertTrue(node3.hasChildren());
2483:       assertFalse(node3.isIf());
2484:       assertFalse(node3.isDelProp());
2485:       assertFalse(node3.isName());
2486:       assertFalse(node3.isContinue());
2487:       assertFalse(node3.isIn());
2488:       assertFalse(node3.isString());
2489:       assertEquals(3, node3.getChildCount());
2490:       assertFalse(node3.isInc());
2491:       assertFalse(node3.isReturn());
2492:       assertTrue(node3.isNumber());
2493:       assertFalse(node3.isWhile());
2494:       assertFalse(node3.isCast());
2495:       assertFalse(node3.isThrow());
2496:       assertEquals((-1), node3.getSourcePosition());
2497:       assertFalse(node3.isFalse());
2498:       assertFalse(node3.isDebugger());
2499:       assertFalse(node3.isObjectLit());
2500:       assertFalse(node3.isAnd());
2501:       assertFalse(node3.isInstanceOf());
2502:       assertFalse(node3.isNot());
2503:       assertFalse(node3.isWith());
2504:       assertFalse(node3.isComma());
2505:       assertFalse(node3.isScript());
2506:       assertFalse(node3.isThis());
2507:       assertFalse(node3.isGetProp());
2508:       assertFalse(node3.hasOneChild());
2509:       assertFalse(node3.isHook());
2510:       assertFalse(node3.isGetElem());
2511:       assertFalse(node3.isDec());
2512:       assertFalse(node3.isTypeOf());
2513:       assertFalse(node3.isAssign());
2514:       assertFalse(node3.isExprResult());
2515:       assertFalse(node3.isBreak());
2516:       assertEquals((-1), node3.getLineno());
2517:       assertTrue(node3.hasMoreThanOneChild());
2518:       assertEquals(39, node3.getType());
2519:       assertFalse(node3.isCase());
2520:       assertFalse(node3.isOr());
2521:       assertFalse(node3.isNew());
2522:       assertFalse(node3.isLabel());
2523:       assertFalse(node3.isAdd());
2524:       assertFalse(node3.isBlock());
2525:       assertFalse(node3.isAssignAdd());
2526:       assertFalse(node3.isDo());
2527:       assertFalse(node3.isStringKey());
2528:       assertFalse(node3.isArrayLit());
2529:       assertFalse(node3.isVar());
2530:       assertFalse(node3.isGetterDef());
2531:       assertEquals((-1), node3.getCharno());
2532:       assertFalse(node3.isParamList());
2533:       assertFalse(node3.isLabelName());
2534:       assertFalse(node3.isSwitch());
2535:       assertFalse(boolean4);
2536:   }
2537: }
RegularFileObject[/tmp/EvoSuite_187_1628161395909/com/google/javascript/rhino/Node_187_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:16 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_187_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_187_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_187_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:03:16.586 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertNotNull(node0);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

Node node1 = Node.newString(36, "UNKNOWN", 32, 0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertEquals(0, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertNotNull(node1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);

Object object0 = node1.getProp(0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertEquals(0, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertNull(object0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);

Node node2 = Node.newString(46, "UNKNOWN");
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertEquals(46, node2.getType());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isFalse());
assertFalse(node2.isTrue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isComma());
assertFalse(node2.isVoid());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isBlock());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertNotNull(node2);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean0 = node1.isContinue();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertEquals(0, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(boolean0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);

node0.setLineno(39);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isOr());
assertEquals(39, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

node0.putProp(4095, (Object) null);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isOr());
assertEquals(39, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

int int0 = node0.getIndexOfChild(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertNotSame(node1, node2);
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isOr());
assertEquals(39, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertEquals(0, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals((-1), int0);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isOr());
assertEquals(39, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean1 = node2.isIn();
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertNotSame(node2, node1);
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertEquals(46, node2.getType());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isFalse());
assertFalse(node2.isTrue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isComma());
assertFalse(node2.isVoid());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isBlock());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(boolean1);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node1);
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isOr());
assertEquals(39, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertEquals(46, node2.getType());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isFalse());
assertFalse(node2.isTrue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isComma());
assertFalse(node2.isVoid());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isBlock());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertNotNull(node_NodeMismatch0);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node node3 = new Node(39, node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertEquals(0, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertEquals(46, node2.getType());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isFalse());
assertFalse(node2.isTrue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isComma());
assertFalse(node2.isVoid());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isBlock());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTry());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isCall());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertTrue(node3.hasChildren());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isContinue());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isInc());
assertFalse(node3.isReturn());
assertTrue(node3.isNumber());
assertFalse(node3.isWhile());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isComma());
assertFalse(node3.isScript());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertEquals((-1), node3.getLineno());
assertTrue(node3.hasMoreThanOneChild());
assertEquals(39, node3.getType());
assertFalse(node3.isCase());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertNotNull(node3);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);

node3.addChildBefore(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isOr());
assertEquals(39, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertEquals(0, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertEquals(46, node2.getType());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isFalse());
assertFalse(node2.isTrue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isComma());
assertFalse(node2.isVoid());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isBlock());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTry());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isCall());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertTrue(node3.hasChildren());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isContinue());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isInc());
assertFalse(node3.isReturn());
assertTrue(node3.isNumber());
assertFalse(node3.isWhile());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isComma());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertEquals((-1), node3.getLineno());
assertTrue(node3.hasMoreThanOneChild());
assertEquals(39, node3.getType());
assertFalse(node3.isCase());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);

boolean boolean2 = node1.isUnscopedQualifiedName();
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertNotSame(node1, node2);
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertEquals(0, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(boolean2);

Node node4 = Node.newString(36, "");
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertNotSame(node4, node2);
assertNotSame(node4, node1);
assertFalse(node4.isObjectLit());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isAnd());
assertFalse(node4.isGetProp());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isExprResult());
assertFalse(node4.isWith());
assertFalse(node4.isThrow());
assertFalse(node4.isGetElem());
assertFalse(node4.isBreak());
assertFalse(node4.isInc());
assertFalse(node4.isOr());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isCase());
assertFalse(node4.isLabel());
assertFalse(node4.isBlock());
assertFalse(node4.isFor());
assertFalse(node4.isHook());
assertFalse(node4.isStringKey());
assertFalse(node4.isLabelName());
assertFalse(node4.isTry());
assertFalse(node4.hasOneChild());
assertFalse(node4.isArrayLit());
assertFalse(node4.isSwitch());
assertFalse(node4.isScript());
assertFalse(node4.isNumber());
assertFalse(node4.isParamList());
assertFalse(node4.isGetterDef());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isCatch());
assertEquals(36, node4.getType());
assertFalse(node4.isRegExp());
assertFalse(node4.isFunction());
assertFalse(node4.isDefaultCase());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isVar());
assertFalse(node4.isCall());
assertFalse(node4.isEmpty());
assertFalse(node4.isName());
assertFalse(node4.isAdd());
assertFalse(node4.isDelProp());
assertFalse(node4.isVoid());
assertFalse(node4.isNew());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNE());
assertFalse(node4.isTrue());
assertFalse(node4.isNull());
assertFalse(node4.isIf());
assertFalse(node4.isIn());
assertFalse(node4.isContinue());
assertFalse(node4.isTypeOf());
assertFalse(node4.isWhile());
assertFalse(node4.isAssign());
assertFalse(node4.isReturn());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isCast());
assertFalse(node4.isFalse());
assertFalse(node4.isString());
assertFalse(node4.isNot());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isDebugger());
assertNotNull(node4);

boolean boolean3 = node0.isFor();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isGetProp());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(0, node0.getCharno());
assertFalse(node0.isOr());
assertEquals(39, node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertEquals(39, node0.getType());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isGetterDef());
assertFalse(boolean3);

boolean boolean4 = node3.isName();
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node4));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node4));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertNotSame(node1, node2);
assertNotSame(node1, node4);
assertNotSame(node2, node4);
assertNotSame(node2, node1);
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertEquals(36, node1.getType());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertEquals(0, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertEquals(131072, node1.getSourcePosition());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertEquals(32, node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isCase());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertEquals(46, node2.getType());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isFalse());
assertFalse(node2.isTrue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isComma());
assertFalse(node2.isVoid());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isBlock());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isSetterDef());
assertFalse(node3.isTry());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isCall());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isNE());
assertFalse(node3.isNull());
assertTrue(node3.hasChildren());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isContinue());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isInc());
assertFalse(node3.isReturn());
assertTrue(node3.isNumber());
assertFalse(node3.isWhile());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isComma());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isGetProp());
assertFalse(node3.hasOneChild());
assertFalse(node3.isHook());
assertFalse(node3.isGetElem());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isExprResult());
assertFalse(node3.isBreak());
assertEquals((-1), node3.getLineno());
assertTrue(node3.hasMoreThanOneChild());
assertEquals(39, node3.getType());
assertFalse(node3.isCase());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isLabel());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isVar());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isSwitch());
assertFalse(boolean4);


[MASTER] 11:03:21.580 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_216_1628161401040/com/google/javascript/rhino/Node_216_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_216_1628161401040/com/google/javascript/rhino/Node_216_tmp__ESTest_scaffolding.java]]
[MASTER] 11:03:21.580 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:21.580 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 11:03:21.580 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 721
[MASTER] 11:03:21.581 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_216_1628161401040/com/google/javascript/rhino/Node_216_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 11:03:21 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_216_tmp__ESTest extends Node_216_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(1.0);
21:       assertFalse(node0.hasOneChild());
22:       assertFalse(node0.isLabelName());
23:       assertFalse(node0.isDec());
24:       assertFalse(node0.isAssign());
25:       assertFalse(node0.isGetElem());
26:       assertFalse(node0.hasChildren());
27:       assertFalse(node0.isExprResult());
28:       assertFalse(node0.isCast());
29:       assertFalse(node0.isTypeOf());
30:       assertFalse(node0.isWith());
31:       assertEquals((-1), node0.getLineno());
32:       assertFalse(node0.isOr());
33:       assertFalse(node0.isInstanceOf());
34:       assertFalse(node0.isLabel());
35:       assertFalse(node0.isAssignAdd());
36:       assertFalse(node0.isDo());
37:       assertFalse(node0.isThrow());
38:       assertFalse(node0.isName());
39:       assertFalse(node0.isWhile());
40:       assertFalse(node0.isBreak());
41:       assertFalse(node0.isContinue());
42:       assertFalse(node0.isCall());
43:       assertFalse(node0.isComma());
44:       assertFalse(node0.isFalse());
45:       assertFalse(node0.isReturn());
46:       assertTrue(node0.isNumber());
47:       assertFalse(node0.isGetProp());
48:       assertFalse(node0.isAnd());
49:       assertFalse(node0.isString());
50:       assertFalse(node0.isNot());
51:       assertEquals((-1), node0.getSourcePosition());
52:       assertFalse(node0.isObjectLit());
53:       assertFalse(node0.isDebugger());
54:       assertFalse(node0.isTry());
55:       assertFalse(node0.isArrayLit());
56:       assertFalse(node0.isTrue());
57:       assertFalse(node0.isVoid());
58:       assertFalse(node0.isDefaultCase());
59:       assertFalse(node0.isDelProp());
60:       assertFalse(node0.isFor());
61:       assertFalse(node0.isFunction());
62:       assertFalse(node0.isCatch());
63:       assertFalse(node0.isRegExp());
64:       assertEquals(0, node0.getChildCount());
65:       assertFalse(node0.isNE());
66:       assertFalse(node0.isIf());
67:       assertFalse(node0.isEmpty());
68:       assertFalse(node0.isNull());
69:       assertFalse(node0.isSetterDef());
70:       assertFalse(node0.isInc());
71:       assertFalse(node0.isIn());
72:       assertFalse(node0.isBlock());
73:       assertFalse(node0.isNew());
74:       assertFalse(node0.isAdd());
75:       assertFalse(node0.isHook());
76:       assertFalse(node0.isStringKey());
77:       assertFalse(node0.isVar());
78:       assertFalse(node0.isSwitch());
79:       assertEquals(39, node0.getType());
80:       assertFalse(node0.hasMoreThanOneChild());
81:       assertFalse(node0.isThis());
82:       assertFalse(node0.isParamList());
83:       assertFalse(node0.isGetterDef());
84:       assertFalse(node0.isScript());
85:       assertFalse(node0.isCase());
86:       assertEquals((-1), node0.getCharno());
87:       assertNotNull(node0);
88:       assertEquals(12, Node.COLUMN_BITS);
89:       assertEquals(46, Node.IS_NAMESPACE);
90:       assertEquals(57, Node.LAST_PROP);
91:       assertEquals(1, Node.DECR_FLAG);
92:       assertEquals(49, Node.DIRECT_EVAL);
93:       assertEquals(32, Node.INCRDECR_PROP);
94:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
95:       assertEquals(56, Node.CHANGE_TIME);
96:       assertEquals(15, Node.NO_SIDE_EFFECTS);
97:       assertEquals(54, Node.SLASH_V);
98:       assertEquals(52, Node.LENGTH);
99:       assertEquals(51, Node.STATIC_SOURCE_FILE);
100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
102:       assertEquals(57, Node.REFLECTED_OBJECT);
103:       assertEquals(37, Node.OPT_ARG_NAME);
104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
105:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
106:       assertEquals(55, Node.INFERRED_FUNCTION);
107:       assertEquals(4095, Node.COLUMN_MASK);
108:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
109:       assertEquals(48, Node.DIRECTIVES);
110:       assertEquals(8, Node.FLAG_NO_THROWS);
111:       assertEquals(39, Node.EMPTY_BLOCK);
112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
113:       assertEquals(36, Node.QUOTED_PROP);
114:       assertEquals(43, Node.IS_CONSTANT_NAME);
115:       assertEquals(53, Node.INPUT_ID);
116:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
117:       assertEquals(50, Node.FREE_CALL);
118:       assertEquals(40, Node.ORIGINALNAME_PROP);
119:       assertEquals(29, Node.JSDOC_INFO_PROP);
120:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertEquals(2, Node.POST_FLAG);
124:       
125:       Object object0 = node0.getProp(0);
126:       assertFalse(node0.hasOneChild());
127:       assertFalse(node0.isLabelName());
128:       assertFalse(node0.isDec());
129:       assertFalse(node0.isAssign());
130:       assertFalse(node0.isGetElem());
131:       assertFalse(node0.hasChildren());
132:       assertFalse(node0.isExprResult());
133:       assertFalse(node0.isCast());
134:       assertFalse(node0.isTypeOf());
135:       assertFalse(node0.isWith());
136:       assertEquals((-1), node0.getLineno());
137:       assertFalse(node0.isOr());
138:       assertFalse(node0.isInstanceOf());
139:       assertFalse(node0.isLabel());
140:       assertFalse(node0.isAssignAdd());
141:       assertFalse(node0.isDo());
142:       assertFalse(node0.isThrow());
143:       assertFalse(node0.isName());
144:       assertFalse(node0.isWhile());
145:       assertFalse(node0.isBreak());
146:       assertFalse(node0.isContinue());
147:       assertFalse(node0.isCall());
148:       assertFalse(node0.isComma());
149:       assertFalse(node0.isFalse());
150:       assertFalse(node0.isReturn());
151:       assertTrue(node0.isNumber());
152:       assertFalse(node0.isGetProp());
153:       assertFalse(node0.isAnd());
154:       assertFalse(node0.isString());
155:       assertFalse(node0.isNot());
156:       assertEquals((-1), node0.getSourcePosition());
157:       assertFalse(node0.isObjectLit());
158:       assertFalse(node0.isDebugger());
159:       assertFalse(node0.isTry());
160:       assertFalse(node0.isArrayLit());
161:       assertFalse(node0.isTrue());
162:       assertFalse(node0.isVoid());
163:       assertFalse(node0.isDefaultCase());
164:       assertFalse(node0.isDelProp());
165:       assertFalse(node0.isFor());
166:       assertFalse(node0.isFunction());
167:       assertFalse(node0.isCatch());
168:       assertFalse(node0.isRegExp());
169:       assertEquals(0, node0.getChildCount());
170:       assertFalse(node0.isNE());
171:       assertFalse(node0.isIf());
172:       assertFalse(node0.isEmpty());
173:       assertFalse(node0.isNull());
174:       assertFalse(node0.isSetterDef());
175:       assertFalse(node0.isInc());
176:       assertFalse(node0.isIn());
177:       assertFalse(node0.isBlock());
178:       assertFalse(node0.isNew());
179:       assertFalse(node0.isAdd());
180:       assertFalse(node0.isHook());
181:       assertFalse(node0.isStringKey());
182:       assertFalse(node0.isVar());
183:       assertFalse(node0.isSwitch());
184:       assertEquals(39, node0.getType());
185:       assertFalse(node0.hasMoreThanOneChild());
186:       assertFalse(node0.isThis());
187:       assertFalse(node0.isParamList());
188:       assertFalse(node0.isGetterDef());
189:       assertFalse(node0.isScript());
190:       assertFalse(node0.isCase());
191:       assertEquals((-1), node0.getCharno());
192:       assertNull(object0);
193:       assertEquals(12, Node.COLUMN_BITS);
194:       assertEquals(46, Node.IS_NAMESPACE);
195:       assertEquals(57, Node.LAST_PROP);
196:       assertEquals(1, Node.DECR_FLAG);
197:       assertEquals(49, Node.DIRECT_EVAL);
198:       assertEquals(32, Node.INCRDECR_PROP);
199:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
200:       assertEquals(56, Node.CHANGE_TIME);
201:       assertEquals(15, Node.NO_SIDE_EFFECTS);
202:       assertEquals(54, Node.SLASH_V);
203:       assertEquals(52, Node.LENGTH);
204:       assertEquals(51, Node.STATIC_SOURCE_FILE);
205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
206:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
207:       assertEquals(57, Node.REFLECTED_OBJECT);
208:       assertEquals(37, Node.OPT_ARG_NAME);
209:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
210:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
211:       assertEquals(55, Node.INFERRED_FUNCTION);
212:       assertEquals(4095, Node.COLUMN_MASK);
213:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
214:       assertEquals(48, Node.DIRECTIVES);
215:       assertEquals(8, Node.FLAG_NO_THROWS);
216:       assertEquals(39, Node.EMPTY_BLOCK);
217:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
218:       assertEquals(36, Node.QUOTED_PROP);
219:       assertEquals(43, Node.IS_CONSTANT_NAME);
220:       assertEquals(53, Node.INPUT_ID);
221:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
222:       assertEquals(50, Node.FREE_CALL);
223:       assertEquals(40, Node.ORIGINALNAME_PROP);
224:       assertEquals(29, Node.JSDOC_INFO_PROP);
225:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
226:       assertEquals(47, Node.IS_DISPATCHER);
227:       assertEquals(30, Node.VAR_ARGS_NAME);
228:       assertEquals(2, Node.POST_FLAG);
229:       
230:       Node node1 = Node.newString(46, "UNKNOWN");
231:       assertFalse(node1.equals((Object)node0));
232:       assertFalse(node1.isWith());
233:       assertFalse(node1.isScript());
234:       assertFalse(node1.isObjectLit());
235:       assertFalse(node1.isNot());
236:       assertFalse(node1.isCast());
237:       assertFalse(node1.isInstanceOf());
238:       assertFalse(node1.isAnd());
239:       assertFalse(node1.isExprResult());
240:       assertFalse(node1.isLabelName());
241:       assertFalse(node1.isThrow());
242:       assertFalse(node1.isFalse());
243:       assertFalse(node1.isLabel());
244:       assertFalse(node1.isOr());
245:       assertEquals(46, node1.getType());
246:       assertFalse(node1.isAssignAdd());
247:       assertFalse(node1.isInc());
248:       assertFalse(node1.isDo());
249:       assertEquals((-1), node1.getCharno());
250:       assertFalse(node1.hasMoreThanOneChild());
251:       assertEquals((-1), node1.getLineno());
252:       assertFalse(node1.isSwitch());
253:       assertFalse(node1.isGetterDef());
254:       assertFalse(node1.isNumber());
255:       assertFalse(node1.isFor());
256:       assertFalse(node1.isStringKey());
257:       assertFalse(node1.isThis());
258:       assertFalse(node1.isHook());
259:       assertFalse(node1.isBlock());
260:       assertFalse(node1.isCase());
261:       assertFalse(node1.hasOneChild());
262:       assertFalse(node1.isTry());
263:       assertFalse(node1.isDefaultCase());
264:       assertFalse(node1.isTrue());
265:       assertFalse(node1.isDebugger());
266:       assertFalse(node1.isFunction());
267:       assertFalse(node1.isRegExp());
268:       assertEquals(0, node1.getChildCount());
269:       assertFalse(node1.isCatch());
270:       assertFalse(node1.isParamList());
271:       assertFalse(node1.isArrayLit());
272:       assertFalse(node1.isVoid());
273:       assertFalse(node1.isDelProp());
274:       assertFalse(node1.isIf());
275:       assertFalse(node1.isNull());
276:       assertFalse(node1.isNE());
277:       assertFalse(node1.isEmpty());
278:       assertFalse(node1.isIn());
279:       assertFalse(node1.isAdd());
280:       assertFalse(node1.isVar());
281:       assertFalse(node1.isSetterDef());
282:       assertFalse(node1.isNew());
283:       assertFalse(node1.isString());
284:       assertFalse(node1.isWhile());
285:       assertFalse(node1.isContinue());
286:       assertFalse(node1.isCall());
287:       assertFalse(node1.isName());
288:       assertFalse(node1.isBreak());
289:       assertFalse(node1.hasChildren());
290:       assertFalse(node1.isGetElem());
291:       assertEquals((-1), node1.getSourcePosition());
292:       assertFalse(node1.isTypeOf());
293:       assertFalse(node1.isComma());
294:       assertFalse(node1.isDec());
295:       assertFalse(node1.isAssign());
296:       assertFalse(node1.isReturn());
297:       assertFalse(node1.isGetProp());
298:       assertNotNull(node1);
299:       assertEquals(2, Node.POST_FLAG);
300:       assertEquals(56, Node.CHANGE_TIME);
301:       assertEquals(46, Node.IS_NAMESPACE);
302:       assertEquals(51, Node.STATIC_SOURCE_FILE);
303:       assertEquals(47, Node.IS_DISPATCHER);
304:       assertEquals(12, Node.COLUMN_BITS);
305:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
306:       assertEquals(29, Node.JSDOC_INFO_PROP);
307:       assertEquals(32, Node.INCRDECR_PROP);
308:       assertEquals(53, Node.INPUT_ID);
309:       assertEquals(15, Node.NO_SIDE_EFFECTS);
310:       assertEquals(1, Node.DECR_FLAG);
311:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
312:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
313:       assertEquals(52, Node.LENGTH);
314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
315:       assertEquals(57, Node.REFLECTED_OBJECT);
316:       assertEquals(36, Node.QUOTED_PROP);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(4095, Node.COLUMN_MASK);
319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
320:       assertEquals(49, Node.DIRECT_EVAL);
321:       assertEquals(48, Node.DIRECTIVES);
322:       assertEquals(37, Node.OPT_ARG_NAME);
323:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
324:       assertEquals(8, Node.FLAG_NO_THROWS);
325:       assertEquals(39, Node.EMPTY_BLOCK);
326:       assertEquals(50, Node.FREE_CALL);
327:       assertEquals(55, Node.INFERRED_FUNCTION);
328:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
329:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
330:       assertEquals(54, Node.SLASH_V);
331:       assertEquals(43, Node.IS_CONSTANT_NAME);
332:       assertEquals(57, Node.LAST_PROP);
333:       assertEquals(30, Node.VAR_ARGS_NAME);
334:       assertEquals(40, Node.ORIGINALNAME_PROP);
335:       
336:       boolean boolean0 = node0.isNull();
337:       assertFalse(node0.equals((Object)node1));
338:       assertFalse(node0.hasOneChild());
339:       assertFalse(node0.isLabelName());
340:       assertFalse(node0.isDec());
341:       assertFalse(node0.isAssign());
342:       assertFalse(node0.isGetElem());
343:       assertFalse(node0.hasChildren());
344:       assertFalse(node0.isExprResult());
345:       assertFalse(node0.isCast());
346:       assertFalse(node0.isTypeOf());
347:       assertFalse(node0.isWith());
348:       assertEquals((-1), node0.getLineno());
349:       assertFalse(node0.isOr());
350:       assertFalse(node0.isInstanceOf());
351:       assertFalse(node0.isLabel());
352:       assertFalse(node0.isAssignAdd());
353:       assertFalse(node0.isDo());
354:       assertFalse(node0.isThrow());
355:       assertFalse(node0.isName());
356:       assertFalse(node0.isWhile());
357:       assertFalse(node0.isBreak());
358:       assertFalse(node0.isContinue());
359:       assertFalse(node0.isCall());
360:       assertFalse(node0.isComma());
361:       assertFalse(node0.isFalse());
362:       assertFalse(node0.isReturn());
363:       assertTrue(node0.isNumber());
364:       assertFalse(node0.isGetProp());
365:       assertFalse(node0.isAnd());
366:       assertFalse(node0.isString());
367:       assertFalse(node0.isNot());
368:       assertEquals((-1), node0.getSourcePosition());
369:       assertFalse(node0.isObjectLit());
370:       assertFalse(node0.isDebugger());
371:       assertFalse(node0.isTry());
372:       assertFalse(node0.isArrayLit());
373:       assertFalse(node0.isTrue());
374:       assertFalse(node0.isVoid());
375:       assertFalse(node0.isDefaultCase());
376:       assertFalse(node0.isDelProp());
377:       assertFalse(node0.isFor());
378:       assertFalse(node0.isFunction());
379:       assertFalse(node0.isCatch());
380:       assertFalse(node0.isRegExp());
381:       assertEquals(0, node0.getChildCount());
382:       assertFalse(node0.isNE());
383:       assertFalse(node0.isIf());
384:       assertFalse(node0.isEmpty());
385:       assertFalse(node0.isNull());
386:       assertFalse(node0.isSetterDef());
387:       assertFalse(node0.isInc());
388:       assertFalse(node0.isIn());
389:       assertFalse(node0.isBlock());
390:       assertFalse(node0.isNew());
391:       assertFalse(node0.isAdd());
392:       assertFalse(node0.isHook());
393:       assertFalse(node0.isStringKey());
394:       assertFalse(node0.isVar());
395:       assertFalse(node0.isSwitch());
396:       assertEquals(39, node0.getType());
397:       assertFalse(node0.hasMoreThanOneChild());
398:       assertFalse(node0.isThis());
399:       assertFalse(node0.isParamList());
400:       assertFalse(node0.isGetterDef());
401:       assertFalse(node0.isScript());
402:       assertFalse(node0.isCase());
403:       assertEquals((-1), node0.getCharno());
404:       assertFalse(boolean0);
405:       assertEquals(12, Node.COLUMN_BITS);
406:       assertEquals(46, Node.IS_NAMESPACE);
407:       assertEquals(57, Node.LAST_PROP);
408:       assertEquals(1, Node.DECR_FLAG);
409:       assertEquals(49, Node.DIRECT_EVAL);
410:       assertEquals(32, Node.INCRDECR_PROP);
411:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
412:       assertEquals(56, Node.CHANGE_TIME);
413:       assertEquals(15, Node.NO_SIDE_EFFECTS);
414:       assertEquals(54, Node.SLASH_V);
415:       assertEquals(52, Node.LENGTH);
416:       assertEquals(51, Node.STATIC_SOURCE_FILE);
417:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
418:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
419:       assertEquals(57, Node.REFLECTED_OBJECT);
420:       assertEquals(37, Node.OPT_ARG_NAME);
421:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
423:       assertEquals(55, Node.INFERRED_FUNCTION);
424:       assertEquals(4095, Node.COLUMN_MASK);
425:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
426:       assertEquals(48, Node.DIRECTIVES);
427:       assertEquals(8, Node.FLAG_NO_THROWS);
428:       assertEquals(39, Node.EMPTY_BLOCK);
429:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
430:       assertEquals(36, Node.QUOTED_PROP);
431:       assertEquals(43, Node.IS_CONSTANT_NAME);
432:       assertEquals(53, Node.INPUT_ID);
433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
434:       assertEquals(50, Node.FREE_CALL);
435:       assertEquals(40, Node.ORIGINALNAME_PROP);
436:       assertEquals(29, Node.JSDOC_INFO_PROP);
437:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
438:       assertEquals(47, Node.IS_DISPATCHER);
439:       assertEquals(30, Node.VAR_ARGS_NAME);
440:       assertEquals(2, Node.POST_FLAG);
441:       
442:       node0.setLineno(39);
443:       assertFalse(node0.equals((Object)node1));
444:       assertFalse(node0.hasOneChild());
445:       assertFalse(node0.isLabelName());
446:       assertFalse(node0.isDec());
447:       assertFalse(node0.isAssign());
448:       assertFalse(node0.isGetElem());
449:       assertFalse(node0.hasChildren());
450:       assertFalse(node0.isExprResult());
451:       assertFalse(node0.isCast());
452:       assertFalse(node0.isTypeOf());
453:       assertFalse(node0.isWith());
454:       assertFalse(node0.isOr());
455:       assertFalse(node0.isInstanceOf());
456:       assertFalse(node0.isLabel());
457:       assertFalse(node0.isAssignAdd());
458:       assertFalse(node0.isDo());
459:       assertEquals(0, node0.getCharno());
460:       assertFalse(node0.isThrow());
461:       assertFalse(node0.isName());
462:       assertEquals(159744, node0.getSourcePosition());
463:       assertFalse(node0.isWhile());
464:       assertFalse(node0.isBreak());
465:       assertFalse(node0.isContinue());
466:       assertFalse(node0.isCall());
467:       assertFalse(node0.isComma());
468:       assertFalse(node0.isFalse());
469:       assertFalse(node0.isReturn());
470:       assertTrue(node0.isNumber());
471:       assertFalse(node0.isGetProp());
472:       assertFalse(node0.isAnd());
473:       assertFalse(node0.isString());
474:       assertFalse(node0.isNot());
475:       assertFalse(node0.isObjectLit());
476:       assertFalse(node0.isDebugger());
477:       assertFalse(node0.isTry());
478:       assertFalse(node0.isArrayLit());
479:       assertFalse(node0.isTrue());
480:       assertFalse(node0.isVoid());
481:       assertFalse(node0.isDefaultCase());
482:       assertFalse(node0.isDelProp());
483:       assertFalse(node0.isFor());
484:       assertFalse(node0.isFunction());
485:       assertFalse(node0.isCatch());
486:       assertFalse(node0.isRegExp());
487:       assertEquals(0, node0.getChildCount());
488:       assertFalse(node0.isNE());
489:       assertFalse(node0.isIf());
490:       assertFalse(node0.isEmpty());
491:       assertFalse(node0.isNull());
492:       assertFalse(node0.isSetterDef());
493:       assertFalse(node0.isInc());
494:       assertFalse(node0.isIn());
495:       assertFalse(node0.isBlock());
496:       assertFalse(node0.isNew());
497:       assertFalse(node0.isAdd());
498:       assertFalse(node0.isHook());
499:       assertFalse(node0.isStringKey());
500:       assertFalse(node0.isVar());
501:       assertFalse(node0.isSwitch());
502:       assertEquals(39, node0.getLineno());
503:       assertEquals(39, node0.getType());
504:       assertFalse(node0.hasMoreThanOneChild());
505:       assertFalse(node0.isThis());
506:       assertFalse(node0.isParamList());
507:       assertFalse(node0.isGetterDef());
508:       assertFalse(node0.isScript());
509:       assertFalse(node0.isCase());
510:       assertEquals(12, Node.COLUMN_BITS);
511:       assertEquals(46, Node.IS_NAMESPACE);
512:       assertEquals(57, Node.LAST_PROP);
513:       assertEquals(1, Node.DECR_FLAG);
514:       assertEquals(49, Node.DIRECT_EVAL);
515:       assertEquals(32, Node.INCRDECR_PROP);
516:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
517:       assertEquals(56, Node.CHANGE_TIME);
518:       assertEquals(15, Node.NO_SIDE_EFFECTS);
519:       assertEquals(54, Node.SLASH_V);
520:       assertEquals(52, Node.LENGTH);
521:       assertEquals(51, Node.STATIC_SOURCE_FILE);
522:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
523:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
524:       assertEquals(57, Node.REFLECTED_OBJECT);
525:       assertEquals(37, Node.OPT_ARG_NAME);
526:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
527:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
528:       assertEquals(55, Node.INFERRED_FUNCTION);
529:       assertEquals(4095, Node.COLUMN_MASK);
530:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
531:       assertEquals(48, Node.DIRECTIVES);
532:       assertEquals(8, Node.FLAG_NO_THROWS);
533:       assertEquals(39, Node.EMPTY_BLOCK);
534:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
535:       assertEquals(36, Node.QUOTED_PROP);
536:       assertEquals(43, Node.IS_CONSTANT_NAME);
537:       assertEquals(53, Node.INPUT_ID);
538:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
539:       assertEquals(50, Node.FREE_CALL);
540:       assertEquals(40, Node.ORIGINALNAME_PROP);
541:       assertEquals(29, Node.JSDOC_INFO_PROP);
542:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
543:       assertEquals(47, Node.IS_DISPATCHER);
544:       assertEquals(30, Node.VAR_ARGS_NAME);
545:       assertEquals(2, Node.POST_FLAG);
546:       
547:       int int0 = node0.getIndexOfChild(node0);
548:       assertFalse(node0.equals((Object)node1));
549:       assertFalse(node0.hasOneChild());
550:       assertFalse(node0.isLabelName());
551:       assertFalse(node0.isDec());
552:       assertFalse(node0.isAssign());
553:       assertFalse(node0.isGetElem());
554:       assertFalse(node0.hasChildren());
555:       assertFalse(node0.isExprResult());
556:       assertFalse(node0.isCast());
557:       assertFalse(node0.isTypeOf());
558:       assertFalse(node0.isWith());
559:       assertFalse(node0.isOr());
560:       assertFalse(node0.isInstanceOf());
561:       assertFalse(node0.isLabel());
562:       assertFalse(node0.isAssignAdd());
563:       assertFalse(node0.isDo());
564:       assertEquals(0, node0.getCharno());
565:       assertFalse(node0.isThrow());
566:       assertFalse(node0.isName());
567:       assertEquals(159744, node0.getSourcePosition());
568:       assertFalse(node0.isWhile());
569:       assertFalse(node0.isBreak());
570:       assertFalse(node0.isContinue());
571:       assertFalse(node0.isCall());
572:       assertFalse(node0.isComma());
573:       assertFalse(node0.isFalse());
574:       assertFalse(node0.isReturn());
575:       assertTrue(node0.isNumber());
576:       assertFalse(node0.isGetProp());
577:       assertFalse(node0.isAnd());
578:       assertFalse(node0.isString());
579:       assertFalse(node0.isNot());
580:       assertFalse(node0.isObjectLit());
581:       assertFalse(node0.isDebugger());
582:       assertFalse(node0.isTry());
583:       assertFalse(node0.isArrayLit());
584:       assertFalse(node0.isTrue());
585:       assertFalse(node0.isVoid());
586:       assertFalse(node0.isDefaultCase());
587:       assertFalse(node0.isDelProp());
588:       assertFalse(node0.isFor());
589:       assertFalse(node0.isFunction());
590:       assertFalse(node0.isCatch());
591:       assertFalse(node0.isRegExp());
592:       assertEquals(0, node0.getChildCount());
593:       assertFalse(node0.isNE());
594:       assertFalse(node0.isIf());
595:       assertFalse(node0.isEmpty());
596:       assertFalse(node0.isNull());
597:       assertFalse(node0.isSetterDef());
598:       assertFalse(node0.isInc());
599:       assertFalse(node0.isIn());
600:       assertFalse(node0.isBlock());
601:       assertFalse(node0.isNew());
602:       assertFalse(node0.isAdd());
603:       assertFalse(node0.isHook());
604:       assertFalse(node0.isStringKey());
605:       assertFalse(node0.isVar());
606:       assertFalse(node0.isSwitch());
607:       assertEquals(39, node0.getLineno());
608:       assertEquals(39, node0.getType());
609:       assertFalse(node0.hasMoreThanOneChild());
610:       assertFalse(node0.isThis());
611:       assertFalse(node0.isParamList());
612:       assertFalse(node0.isGetterDef());
613:       assertFalse(node0.isScript());
614:       assertFalse(node0.isCase());
615:       assertEquals((-1), int0);
616:       assertEquals(12, Node.COLUMN_BITS);
617:       assertEquals(46, Node.IS_NAMESPACE);
618:       assertEquals(57, Node.LAST_PROP);
619:       assertEquals(1, Node.DECR_FLAG);
620:       assertEquals(49, Node.DIRECT_EVAL);
621:       assertEquals(32, Node.INCRDECR_PROP);
622:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
623:       assertEquals(56, Node.CHANGE_TIME);
624:       assertEquals(15, Node.NO_SIDE_EFFECTS);
625:       assertEquals(54, Node.SLASH_V);
626:       assertEquals(52, Node.LENGTH);
627:       assertEquals(51, Node.STATIC_SOURCE_FILE);
628:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
629:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
630:       assertEquals(57, Node.REFLECTED_OBJECT);
631:       assertEquals(37, Node.OPT_ARG_NAME);
632:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
633:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
634:       assertEquals(55, Node.INFERRED_FUNCTION);
635:       assertEquals(4095, Node.COLUMN_MASK);
636:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
637:       assertEquals(48, Node.DIRECTIVES);
638:       assertEquals(8, Node.FLAG_NO_THROWS);
639:       assertEquals(39, Node.EMPTY_BLOCK);
640:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
641:       assertEquals(36, Node.QUOTED_PROP);
642:       assertEquals(43, Node.IS_CONSTANT_NAME);
643:       assertEquals(53, Node.INPUT_ID);
644:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
645:       assertEquals(50, Node.FREE_CALL);
646:       assertEquals(40, Node.ORIGINALNAME_PROP);
647:       assertEquals(29, Node.JSDOC_INFO_PROP);
648:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
649:       assertEquals(47, Node.IS_DISPATCHER);
650:       assertEquals(30, Node.VAR_ARGS_NAME);
651:       assertEquals(2, Node.POST_FLAG);
652:       
653:       Iterable<Node> iterable0 = node0.children();
654:       assertFalse(node0.equals((Object)node1));
655:       assertFalse(node0.hasOneChild());
656:       assertFalse(node0.isLabelName());
657:       assertFalse(node0.isDec());
658:       assertFalse(node0.isAssign());
659:       assertFalse(node0.isGetElem());
660:       assertFalse(node0.hasChildren());
661:       assertFalse(node0.isExprResult());
662:       assertFalse(node0.isCast());
663:       assertFalse(node0.isTypeOf());
664:       assertFalse(node0.isWith());
665:       assertFalse(node0.isOr());
666:       assertFalse(node0.isInstanceOf());
667:       assertFalse(node0.isLabel());
668:       assertFalse(node0.isAssignAdd());
669:       assertFalse(node0.isDo());
670:       assertEquals(0, node0.getCharno());
671:       assertFalse(node0.isThrow());
672:       assertFalse(node0.isName());
673:       assertEquals(159744, node0.getSourcePosition());
674:       assertFalse(node0.isWhile());
675:       assertFalse(node0.isBreak());
676:       assertFalse(node0.isContinue());
677:       assertFalse(node0.isCall());
678:       assertFalse(node0.isComma());
679:       assertFalse(node0.isFalse());
680:       assertFalse(node0.isReturn());
681:       assertTrue(node0.isNumber());
682:       assertFalse(node0.isGetProp());
683:       assertFalse(node0.isAnd());
684:       assertFalse(node0.isString());
685:       assertFalse(node0.isNot());
686:       assertFalse(node0.isObjectLit());
687:       assertFalse(node0.isDebugger());
688:       assertFalse(node0.isTry());
689:       assertFalse(node0.isArrayLit());
690:       assertFalse(node0.isTrue());
691:       assertFalse(node0.isVoid());
692:       assertFalse(node0.isDefaultCase());
693:       assertFalse(node0.isDelProp());
694:       assertFalse(node0.isFor());
695:       assertFalse(node0.isFunction());
696:       assertFalse(node0.isCatch());
697:       assertFalse(node0.isRegExp());
698:       assertEquals(0, node0.getChildCount());
699:       assertFalse(node0.isNE());
700:       assertFalse(node0.isIf());
701:       assertFalse(node0.isEmpty());
702:       assertFalse(node0.isNull());
703:       assertFalse(node0.isSetterDef());
704:       assertFalse(node0.isInc());
705:       assertFalse(node0.isIn());
706:       assertFalse(node0.isBlock());
707:       assertFalse(node0.isNew());
708:       assertFalse(node0.isAdd());
709:       assertFalse(node0.isHook());
710:       assertFalse(node0.isStringKey());
711:       assertFalse(node0.isVar());
712:       assertFalse(node0.isSwitch());
713:       assertEquals(39, node0.getLineno());
714:       assertEquals(39, node0.getType());
715:       assertFalse(node0.hasMoreThanOneChild());
716:       assertFalse(node0.isThis());
717:       assertFalse(node0.isParamList());
718:       assertFalse(node0.isGetterDef());
719:       assertFalse(node0.isScript());
720:       assertFalse(node0.isCase());
721:       assertFalse(iterable0.contains(node0));
722:       assertNotNull(iterable0);
723:       assertEquals(12, Node.COLUMN_BITS);
724:       assertEquals(46, Node.IS_NAMESPACE);
725:       assertEquals(57, Node.LAST_PROP);
726:       assertEquals(1, Node.DECR_FLAG);
727:       assertEquals(49, Node.DIRECT_EVAL);
728:       assertEquals(32, Node.INCRDECR_PROP);
729:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
730:       assertEquals(56, Node.CHANGE_TIME);
731:       assertEquals(15, Node.NO_SIDE_EFFECTS);
732:       assertEquals(54, Node.SLASH_V);
733:       assertEquals(52, Node.LENGTH);
734:       assertEquals(51, Node.STATIC_SOURCE_FILE);
735:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
736:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
737:       assertEquals(57, Node.REFLECTED_OBJECT);
738:       assertEquals(37, Node.OPT_ARG_NAME);
739:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
740:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
741:       assertEquals(55, Node.INFERRED_FUNCTION);
742:       assertEquals(4095, Node.COLUMN_MASK);
743:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
744:       assertEquals(48, Node.DIRECTIVES);
745:       assertEquals(8, Node.FLAG_NO_THROWS);
746:       assertEquals(39, Node.EMPTY_BLOCK);
747:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
748:       assertEquals(36, Node.QUOTED_PROP);
749:       assertEquals(43, Node.IS_CONSTANT_NAME);
750:       assertEquals(53, Node.INPUT_ID);
751:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
752:       assertEquals(50, Node.FREE_CALL);
753:       assertEquals(40, Node.ORIGINALNAME_PROP);
754:       assertEquals(29, Node.JSDOC_INFO_PROP);
755:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
756:       assertEquals(47, Node.IS_DISPATCHER);
757:       assertEquals(30, Node.VAR_ARGS_NAME);
758:       assertEquals(2, Node.POST_FLAG);
759:       
760:       boolean boolean1 = node1.isIn();
761:       assertFalse(node1.equals((Object)node0));
762:       assertTrue(boolean1 == boolean0);
763:       assertFalse(node1.isWith());
764:       assertFalse(node1.isScript());
765:       assertFalse(node1.isObjectLit());
766:       assertFalse(node1.isNot());
767:       assertFalse(node1.isCast());
768:       assertFalse(node1.isInstanceOf());
769:       assertFalse(node1.isAnd());
770:       assertFalse(node1.isExprResult());
771:       assertFalse(node1.isLabelName());
772:       assertFalse(node1.isThrow());
773:       assertFalse(node1.isFalse());
774:       assertFalse(node1.isLabel());
775:       assertFalse(node1.isOr());
776:       assertEquals(46, node1.getType());
777:       assertFalse(node1.isAssignAdd());
778:       assertFalse(node1.isInc());
779:       assertFalse(node1.isDo());
780:       assertEquals((-1), node1.getCharno());
781:       assertFalse(node1.hasMoreThanOneChild());
782:       assertEquals((-1), node1.getLineno());
783:       assertFalse(node1.isSwitch());
784:       assertFalse(node1.isGetterDef());
785:       assertFalse(node1.isNumber());
786:       assertFalse(node1.isFor());
787:       assertFalse(node1.isStringKey());
788:       assertFalse(node1.isThis());
789:       assertFalse(node1.isHook());
790:       assertFalse(node1.isBlock());
791:       assertFalse(node1.isCase());
792:       assertFalse(node1.hasOneChild());
793:       assertFalse(node1.isTry());
794:       assertFalse(node1.isDefaultCase());
795:       assertFalse(node1.isTrue());
796:       assertFalse(node1.isDebugger());
797:       assertFalse(node1.isFunction());
798:       assertFalse(node1.isRegExp());
799:       assertEquals(0, node1.getChildCount());
800:       assertFalse(node1.isCatch());
801:       assertFalse(node1.isParamList());
802:       assertFalse(node1.isArrayLit());
803:       assertFalse(node1.isVoid());
804:       assertFalse(node1.isDelProp());
805:       assertFalse(node1.isIf());
806:       assertFalse(node1.isNull());
807:       assertFalse(node1.isNE());
808:       assertFalse(node1.isEmpty());
809:       assertFalse(node1.isIn());
810:       assertFalse(node1.isAdd());
811:       assertFalse(node1.isVar());
812:       assertFalse(node1.isSetterDef());
813:       assertFalse(node1.isNew());
814:       assertFalse(node1.isString());
815:       assertFalse(node1.isWhile());
816:       assertFalse(node1.isContinue());
817:       assertFalse(node1.isCall());
818:       assertFalse(node1.isName());
819:       assertFalse(node1.isBreak());
820:       assertFalse(node1.hasChildren());
821:       assertFalse(node1.isGetElem());
822:       assertEquals((-1), node1.getSourcePosition());
823:       assertFalse(node1.isTypeOf());
824:       assertFalse(node1.isComma());
825:       assertFalse(node1.isDec());
826:       assertFalse(node1.isAssign());
827:       assertFalse(node1.isReturn());
828:       assertFalse(node1.isGetProp());
829:       assertFalse(boolean1);
830:       assertEquals(2, Node.POST_FLAG);
831:       assertEquals(56, Node.CHANGE_TIME);
832:       assertEquals(46, Node.IS_NAMESPACE);
833:       assertEquals(51, Node.STATIC_SOURCE_FILE);
834:       assertEquals(47, Node.IS_DISPATCHER);
835:       assertEquals(12, Node.COLUMN_BITS);
836:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
837:       assertEquals(29, Node.JSDOC_INFO_PROP);
838:       assertEquals(32, Node.INCRDECR_PROP);
839:       assertEquals(53, Node.INPUT_ID);
840:       assertEquals(15, Node.NO_SIDE_EFFECTS);
841:       assertEquals(1, Node.DECR_FLAG);
842:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
843:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
844:       assertEquals(52, Node.LENGTH);
845:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
846:       assertEquals(57, Node.REFLECTED_OBJECT);
847:       assertEquals(36, Node.QUOTED_PROP);
848:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
849:       assertEquals(4095, Node.COLUMN_MASK);
850:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
851:       assertEquals(49, Node.DIRECT_EVAL);
852:       assertEquals(48, Node.DIRECTIVES);
853:       assertEquals(37, Node.OPT_ARG_NAME);
854:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
855:       assertEquals(8, Node.FLAG_NO_THROWS);
856:       assertEquals(39, Node.EMPTY_BLOCK);
857:       assertEquals(50, Node.FREE_CALL);
858:       assertEquals(55, Node.INFERRED_FUNCTION);
859:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
860:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
861:       assertEquals(54, Node.SLASH_V);
862:       assertEquals(43, Node.IS_CONSTANT_NAME);
863:       assertEquals(57, Node.LAST_PROP);
864:       assertEquals(30, Node.VAR_ARGS_NAME);
865:       assertEquals(40, Node.ORIGINALNAME_PROP);
866:       
867:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
868:       assertFalse(node0.equals((Object)node1));
869:       assertFalse(node1.equals((Object)node0));
870:       assertFalse(node0.hasOneChild());
871:       assertFalse(node0.isLabelName());
872:       assertFalse(node0.isDec());
873:       assertFalse(node0.isAssign());
874:       assertFalse(node0.isGetElem());
875:       assertFalse(node0.hasChildren());
876:       assertFalse(node0.isExprResult());
877:       assertFalse(node0.isCast());
878:       assertFalse(node0.isTypeOf());
879:       assertFalse(node0.isWith());
880:       assertFalse(node0.isOr());
881:       assertFalse(node0.isInstanceOf());
882:       assertFalse(node0.isLabel());
883:       assertFalse(node0.isAssignAdd());
884:       assertFalse(node0.isDo());
885:       assertEquals(0, node0.getCharno());
886:       assertFalse(node0.isThrow());
887:       assertFalse(node0.isName());
888:       assertEquals(159744, node0.getSourcePosition());
889:       assertFalse(node0.isWhile());
890:       assertFalse(node0.isBreak());
891:       assertFalse(node0.isContinue());
892:       assertFalse(node0.isCall());
893:       assertFalse(node0.isComma());
894:       assertFalse(node0.isFalse());
895:       assertFalse(node0.isReturn());
896:       assertTrue(node0.isNumber());
897:       assertFalse(node0.isGetProp());
898:       assertFalse(node0.isAnd());
899:       assertFalse(node0.isString());
900:       assertFalse(node0.isNot());
901:       assertFalse(node0.isObjectLit());
902:       assertFalse(node0.isDebugger());
903:       assertFalse(node0.isTry());
904:       assertFalse(node0.isArrayLit());
905:       assertFalse(node0.isTrue());
906:       assertFalse(node0.isVoid());
907:       assertFalse(node0.isDefaultCase());
908:       assertFalse(node0.isDelProp());
909:       assertFalse(node0.isFor());
910:       assertFalse(node0.isFunction());
911:       assertFalse(node0.isCatch());
912:       assertFalse(node0.isRegExp());
913:       assertEquals(0, node0.getChildCount());
914:       assertFalse(node0.isNE());
915:       assertFalse(node0.isIf());
916:       assertFalse(node0.isEmpty());
917:       assertFalse(node0.isNull());
918:       assertFalse(node0.isSetterDef());
919:       assertFalse(node0.isInc());
920:       assertFalse(node0.isIn());
921:       assertFalse(node0.isBlock());
922:       assertFalse(node0.isNew());
923:       assertFalse(node0.isAdd());
924:       assertFalse(node0.isHook());
925:       assertFalse(node0.isStringKey());
926:       assertFalse(node0.isVar());
927:       assertFalse(node0.isSwitch());
928:       assertEquals(39, node0.getLineno());
929:       assertEquals(39, node0.getType());
930:       assertFalse(node0.hasMoreThanOneChild());
931:       assertFalse(node0.isThis());
932:       assertFalse(node0.isParamList());
933:       assertFalse(node0.isGetterDef());
934:       assertFalse(node0.isScript());
935:       assertFalse(node0.isCase());
936:       assertFalse(node1.isWith());
937:       assertFalse(node1.isScript());
938:       assertFalse(node1.isObjectLit());
939:       assertFalse(node1.isNot());
940:       assertFalse(node1.isCast());
941:       assertFalse(node1.isInstanceOf());
942:       assertFalse(node1.isAnd());
943:       assertFalse(node1.isExprResult());
944:       assertFalse(node1.isLabelName());
945:       assertFalse(node1.isThrow());
946:       assertFalse(node1.isFalse());
947:       assertFalse(node1.isLabel());
948:       assertFalse(node1.isOr());
949:       assertEquals(46, node1.getType());
950:       assertFalse(node1.isAssignAdd());
951:       assertFalse(node1.isInc());
952:       assertFalse(node1.isDo());
953:       assertEquals((-1), node1.getCharno());
954:       assertFalse(node1.hasMoreThanOneChild());
955:       assertEquals((-1), node1.getLineno());
956:       assertFalse(node1.isSwitch());
957:       assertFalse(node1.isGetterDef());
958:       assertFalse(node1.isNumber());
959:       assertFalse(node1.isFor());
960:       assertFalse(node1.isStringKey());
961:       assertFalse(node1.isThis());
962:       assertFalse(node1.isHook());
963:       assertFalse(node1.isBlock());
964:       assertFalse(node1.isCase());
965:       assertFalse(node1.hasOneChild());
966:       assertFalse(node1.isTry());
967:       assertFalse(node1.isDefaultCase());
968:       assertFalse(node1.isTrue());
969:       assertFalse(node1.isDebugger());
970:       assertFalse(node1.isFunction());
971:       assertFalse(node1.isRegExp());
972:       assertEquals(0, node1.getChildCount());
973:       assertFalse(node1.isCatch());
974:       assertFalse(node1.isParamList());
975:       assertFalse(node1.isArrayLit());
976:       assertFalse(node1.isVoid());
977:       assertFalse(node1.isDelProp());
978:       assertFalse(node1.isIf());
979:       assertFalse(node1.isNull());
980:       assertFalse(node1.isNE());
981:       assertFalse(node1.isEmpty());
982:       assertFalse(node1.isIn());
983:       assertFalse(node1.isAdd());
984:       assertFalse(node1.isVar());
985:       assertFalse(node1.isSetterDef());
986:       assertFalse(node1.isNew());
987:       assertFalse(node1.isString());
988:       assertFalse(node1.isWhile());
989:       assertFalse(node1.isContinue());
990:       assertFalse(node1.isCall());
991:       assertFalse(node1.isName());
992:       assertFalse(node1.isBreak());
993:       assertFalse(node1.hasChildren());
994:       assertFalse(node1.isGetElem());
995:       assertEquals((-1), node1.getSourcePosition());
996:       assertFalse(node1.isTypeOf());
997:       assertFalse(node1.isComma());
998:       assertFalse(node1.isDec());
999:       assertFalse(node1.isAssign());
1000:       assertFalse(node1.isReturn());
1001:       assertFalse(node1.isGetProp());
1002:       assertNotNull(node_NodeMismatch0);
1003:       assertEquals(12, Node.COLUMN_BITS);
1004:       assertEquals(46, Node.IS_NAMESPACE);
1005:       assertEquals(57, Node.LAST_PROP);
1006:       assertEquals(1, Node.DECR_FLAG);
1007:       assertEquals(49, Node.DIRECT_EVAL);
1008:       assertEquals(32, Node.INCRDECR_PROP);
1009:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1010:       assertEquals(56, Node.CHANGE_TIME);
1011:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1012:       assertEquals(54, Node.SLASH_V);
1013:       assertEquals(52, Node.LENGTH);
1014:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1015:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1016:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1017:       assertEquals(57, Node.REFLECTED_OBJECT);
1018:       assertEquals(37, Node.OPT_ARG_NAME);
1019:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1020:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1021:       assertEquals(55, Node.INFERRED_FUNCTION);
1022:       assertEquals(4095, Node.COLUMN_MASK);
1023:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1024:       assertEquals(48, Node.DIRECTIVES);
1025:       assertEquals(8, Node.FLAG_NO_THROWS);
1026:       assertEquals(39, Node.EMPTY_BLOCK);
1027:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1028:       assertEquals(36, Node.QUOTED_PROP);
1029:       assertEquals(43, Node.IS_CONSTANT_NAME);
1030:       assertEquals(53, Node.INPUT_ID);
1031:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1032:       assertEquals(50, Node.FREE_CALL);
1033:       assertEquals(40, Node.ORIGINALNAME_PROP);
1034:       assertEquals(29, Node.JSDOC_INFO_PROP);
1035:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1036:       assertEquals(47, Node.IS_DISPATCHER);
1037:       assertEquals(30, Node.VAR_ARGS_NAME);
1038:       assertEquals(2, Node.POST_FLAG);
1039:       assertEquals(2, Node.POST_FLAG);
1040:       assertEquals(56, Node.CHANGE_TIME);
1041:       assertEquals(46, Node.IS_NAMESPACE);
1042:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1043:       assertEquals(47, Node.IS_DISPATCHER);
1044:       assertEquals(12, Node.COLUMN_BITS);
1045:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1046:       assertEquals(29, Node.JSDOC_INFO_PROP);
1047:       assertEquals(32, Node.INCRDECR_PROP);
1048:       assertEquals(53, Node.INPUT_ID);
1049:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1050:       assertEquals(1, Node.DECR_FLAG);
1051:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1052:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1053:       assertEquals(52, Node.LENGTH);
1054:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1055:       assertEquals(57, Node.REFLECTED_OBJECT);
1056:       assertEquals(36, Node.QUOTED_PROP);
1057:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1058:       assertEquals(4095, Node.COLUMN_MASK);
1059:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1060:       assertEquals(49, Node.DIRECT_EVAL);
1061:       assertEquals(48, Node.DIRECTIVES);
1062:       assertEquals(37, Node.OPT_ARG_NAME);
1063:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1064:       assertEquals(8, Node.FLAG_NO_THROWS);
1065:       assertEquals(39, Node.EMPTY_BLOCK);
1066:       assertEquals(50, Node.FREE_CALL);
1067:       assertEquals(55, Node.INFERRED_FUNCTION);
1068:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1069:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1070:       assertEquals(54, Node.SLASH_V);
1071:       assertEquals(43, Node.IS_CONSTANT_NAME);
1072:       assertEquals(57, Node.LAST_PROP);
1073:       assertEquals(30, Node.VAR_ARGS_NAME);
1074:       assertEquals(40, Node.ORIGINALNAME_PROP);
1075:       
1076:       Node node2 = new Node(39, node0, node1);
1077:       assertFalse(node0.equals((Object)node1));
1078:       assertFalse(node1.equals((Object)node0));
1079:       assertFalse(node2.equals((Object)node1));
1080:       assertFalse(node2.equals((Object)node0));
1081:       assertFalse(node0.hasOneChild());
1082:       assertFalse(node0.isLabelName());
1083:       assertFalse(node0.isDec());
1084:       assertFalse(node0.isAssign());
1085:       assertFalse(node0.isGetElem());
1086:       assertFalse(node0.hasChildren());
1087:       assertFalse(node0.isExprResult());
1088:       assertFalse(node0.isCast());
1089:       assertFalse(node0.isTypeOf());
1090:       assertFalse(node0.isWith());
1091:       assertFalse(node0.isOr());
1092:       assertFalse(node0.isInstanceOf());
1093:       assertFalse(node0.isLabel());
1094:       assertFalse(node0.isAssignAdd());
1095:       assertFalse(node0.isDo());
1096:       assertEquals(0, node0.getCharno());
1097:       assertFalse(node0.isThrow());
1098:       assertFalse(node0.isName());
1099:       assertEquals(159744, node0.getSourcePosition());
1100:       assertFalse(node0.isWhile());
1101:       assertFalse(node0.isBreak());
1102:       assertFalse(node0.isContinue());
1103:       assertFalse(node0.isCall());
1104:       assertFalse(node0.isComma());
1105:       assertFalse(node0.isFalse());
1106:       assertFalse(node0.isReturn());
1107:       assertTrue(node0.isNumber());
1108:       assertFalse(node0.isGetProp());
1109:       assertFalse(node0.isAnd());
1110:       assertFalse(node0.isString());
1111:       assertFalse(node0.isNot());
1112:       assertFalse(node0.isObjectLit());
1113:       assertFalse(node0.isDebugger());
1114:       assertFalse(node0.isTry());
1115:       assertFalse(node0.isArrayLit());
1116:       assertFalse(node0.isTrue());
1117:       assertFalse(node0.isVoid());
1118:       assertFalse(node0.isDefaultCase());
1119:       assertFalse(node0.isDelProp());
1120:       assertFalse(node0.isFor());
1121:       assertFalse(node0.isFunction());
1122:       assertFalse(node0.isCatch());
1123:       assertFalse(node0.isRegExp());
1124:       assertEquals(0, node0.getChildCount());
1125:       assertFalse(node0.isNE());
1126:       assertFalse(node0.isIf());
1127:       assertFalse(node0.isEmpty());
1128:       assertFalse(node0.isNull());
1129:       assertFalse(node0.isSetterDef());
1130:       assertFalse(node0.isInc());
1131:       assertFalse(node0.isIn());
1132:       assertFalse(node0.isBlock());
1133:       assertFalse(node0.isNew());
1134:       assertFalse(node0.isAdd());
1135:       assertFalse(node0.isHook());
1136:       assertFalse(node0.isStringKey());
1137:       assertFalse(node0.isVar());
1138:       assertFalse(node0.isSwitch());
1139:       assertEquals(39, node0.getLineno());
1140:       assertEquals(39, node0.getType());
1141:       assertFalse(node0.hasMoreThanOneChild());
1142:       assertFalse(node0.isThis());
1143:       assertFalse(node0.isParamList());
1144:       assertFalse(node0.isGetterDef());
1145:       assertFalse(node0.isScript());
1146:       assertFalse(node0.isCase());
1147:       assertFalse(node1.isWith());
1148:       assertFalse(node1.isScript());
1149:       assertFalse(node1.isObjectLit());
1150:       assertFalse(node1.isNot());
1151:       assertFalse(node1.isCast());
1152:       assertFalse(node1.isInstanceOf());
1153:       assertFalse(node1.isAnd());
1154:       assertFalse(node1.isExprResult());
1155:       assertFalse(node1.isLabelName());
1156:       assertFalse(node1.isThrow());
1157:       assertFalse(node1.isFalse());
1158:       assertFalse(node1.isLabel());
1159:       assertFalse(node1.isOr());
1160:       assertEquals(46, node1.getType());
1161:       assertFalse(node1.isAssignAdd());
1162:       assertFalse(node1.isInc());
1163:       assertFalse(node1.isDo());
1164:       assertEquals((-1), node1.getCharno());
1165:       assertFalse(node1.hasMoreThanOneChild());
1166:       assertEquals((-1), node1.getLineno());
1167:       assertFalse(node1.isSwitch());
1168:       assertFalse(node1.isGetterDef());
1169:       assertFalse(node1.isNumber());
1170:       assertFalse(node1.isFor());
1171:       assertFalse(node1.isStringKey());
1172:       assertFalse(node1.isThis());
1173:       assertFalse(node1.isHook());
1174:       assertFalse(node1.isBlock());
1175:       assertFalse(node1.isCase());
1176:       assertFalse(node1.hasOneChild());
1177:       assertFalse(node1.isTry());
1178:       assertFalse(node1.isDefaultCase());
1179:       assertFalse(node1.isTrue());
1180:       assertFalse(node1.isDebugger());
1181:       assertFalse(node1.isFunction());
1182:       assertFalse(node1.isRegExp());
1183:       assertEquals(0, node1.getChildCount());
1184:       assertFalse(node1.isCatch());
1185:       assertFalse(node1.isParamList());
1186:       assertFalse(node1.isArrayLit());
1187:       assertFalse(node1.isVoid());
1188:       assertFalse(node1.isDelProp());
1189:       assertFalse(node1.isIf());
1190:       assertFalse(node1.isNull());
1191:       assertFalse(node1.isNE());
1192:       assertFalse(node1.isEmpty());
1193:       assertFalse(node1.isIn());
1194:       assertFalse(node1.isAdd());
1195:       assertFalse(node1.isVar());
1196:       assertFalse(node1.isSetterDef());
1197:       assertFalse(node1.isNew());
1198:       assertFalse(node1.isString());
1199:       assertFalse(node1.isWhile());
1200:       assertFalse(node1.isContinue());
1201:       assertFalse(node1.isCall());
1202:       assertFalse(node1.isName());
1203:       assertFalse(node1.isBreak());
1204:       assertFalse(node1.hasChildren());
1205:       assertFalse(node1.isGetElem());
1206:       assertEquals((-1), node1.getSourcePosition());
1207:       assertFalse(node1.isTypeOf());
1208:       assertFalse(node1.isComma());
1209:       assertFalse(node1.isDec());
1210:       assertFalse(node1.isAssign());
1211:       assertFalse(node1.isReturn());
1212:       assertFalse(node1.isGetProp());
1213:       assertFalse(node2.isScript());
1214:       assertFalse(node2.isExprResult());
1215:       assertFalse(node2.isNot());
1216:       assertFalse(node2.isWith());
1217:       assertFalse(node2.isCast());
1218:       assertFalse(node2.isAnd());
1219:       assertFalse(node2.isInstanceOf());
1220:       assertFalse(node2.isLabelName());
1221:       assertFalse(node2.isGetElem());
1222:       assertEquals(2, node2.getChildCount());
1223:       assertFalse(node2.isOr());
1224:       assertFalse(node2.isLabel());
1225:       assertFalse(node2.isFalse());
1226:       assertFalse(node2.isThrow());
1227:       assertFalse(node2.isAssignAdd());
1228:       assertFalse(node2.isDo());
1229:       assertFalse(node2.isString());
1230:       assertFalse(node2.isWhile());
1231:       assertFalse(node2.isCall());
1232:       assertFalse(node2.isContinue());
1233:       assertFalse(node2.isName());
1234:       assertTrue(node2.hasMoreThanOneChild());
1235:       assertFalse(node2.isBreak());
1236:       assertFalse(node2.isTypeOf());
1237:       assertFalse(node2.isAssign());
1238:       assertFalse(node2.isReturn());
1239:       assertEquals((-1), node2.getSourcePosition());
1240:       assertFalse(node2.isComma());
1241:       assertFalse(node2.isDec());
1242:       assertFalse(node2.isObjectLit());
1243:       assertFalse(node2.isGetProp());
1244:       assertTrue(node2.isNumber());
1245:       assertFalse(node2.isRegExp());
1246:       assertFalse(node2.isTrue());
1247:       assertFalse(node2.isFunction());
1248:       assertFalse(node2.isDefaultCase());
1249:       assertFalse(node2.isDebugger());
1250:       assertFalse(node2.isCatch());
1251:       assertFalse(node2.isDelProp());
1252:       assertFalse(node2.isVoid());
1253:       assertFalse(node2.isArrayLit());
1254:       assertFalse(node2.isNE());
1255:       assertFalse(node2.isSetterDef());
1256:       assertFalse(node2.isNull());
1257:       assertFalse(node2.isIf());
1258:       assertFalse(node2.isVar());
1259:       assertFalse(node2.isIn());
1260:       assertFalse(node2.isEmpty());
1261:       assertFalse(node2.isAdd());
1262:       assertFalse(node2.isNew());
1263:       assertFalse(node2.isSwitch());
1264:       assertFalse(node2.isInc());
1265:       assertEquals(39, node2.getType());
1266:       assertFalse(node2.isBlock());
1267:       assertEquals((-1), node2.getCharno());
1268:       assertFalse(node2.isStringKey());
1269:       assertTrue(node2.hasChildren());
1270:       assertEquals((-1), node2.getLineno());
1271:       assertFalse(node2.isThis());
1272:       assertFalse(node2.isParamList());
1273:       assertFalse(node2.isFor());
1274:       assertFalse(node2.isGetterDef());
1275:       assertFalse(node2.isHook());
1276:       assertFalse(node2.isTry());
1277:       assertFalse(node2.hasOneChild());
1278:       assertFalse(node2.isCase());
1279:       assertNotNull(node2);
1280:       assertEquals(12, Node.COLUMN_BITS);
1281:       assertEquals(46, Node.IS_NAMESPACE);
1282:       assertEquals(57, Node.LAST_PROP);
1283:       assertEquals(1, Node.DECR_FLAG);
1284:       assertEquals(49, Node.DIRECT_EVAL);
1285:       assertEquals(32, Node.INCRDECR_PROP);
1286:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1287:       assertEquals(56, Node.CHANGE_TIME);
1288:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1289:       assertEquals(54, Node.SLASH_V);
1290:       assertEquals(52, Node.LENGTH);
1291:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1292:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1293:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1294:       assertEquals(57, Node.REFLECTED_OBJECT);
1295:       assertEquals(37, Node.OPT_ARG_NAME);
1296:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1297:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1298:       assertEquals(55, Node.INFERRED_FUNCTION);
1299:       assertEquals(4095, Node.COLUMN_MASK);
1300:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1301:       assertEquals(48, Node.DIRECTIVES);
1302:       assertEquals(8, Node.FLAG_NO_THROWS);
1303:       assertEquals(39, Node.EMPTY_BLOCK);
1304:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1305:       assertEquals(36, Node.QUOTED_PROP);
1306:       assertEquals(43, Node.IS_CONSTANT_NAME);
1307:       assertEquals(53, Node.INPUT_ID);
1308:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1309:       assertEquals(50, Node.FREE_CALL);
1310:       assertEquals(40, Node.ORIGINALNAME_PROP);
1311:       assertEquals(29, Node.JSDOC_INFO_PROP);
1312:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1313:       assertEquals(47, Node.IS_DISPATCHER);
1314:       assertEquals(30, Node.VAR_ARGS_NAME);
1315:       assertEquals(2, Node.POST_FLAG);
1316:       assertEquals(2, Node.POST_FLAG);
1317:       assertEquals(56, Node.CHANGE_TIME);
1318:       assertEquals(46, Node.IS_NAMESPACE);
1319:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1320:       assertEquals(47, Node.IS_DISPATCHER);
1321:       assertEquals(12, Node.COLUMN_BITS);
1322:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1323:       assertEquals(29, Node.JSDOC_INFO_PROP);
1324:       assertEquals(32, Node.INCRDECR_PROP);
1325:       assertEquals(53, Node.INPUT_ID);
1326:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1327:       assertEquals(1, Node.DECR_FLAG);
1328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1329:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1330:       assertEquals(52, Node.LENGTH);
1331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1332:       assertEquals(57, Node.REFLECTED_OBJECT);
1333:       assertEquals(36, Node.QUOTED_PROP);
1334:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1335:       assertEquals(4095, Node.COLUMN_MASK);
1336:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1337:       assertEquals(49, Node.DIRECT_EVAL);
1338:       assertEquals(48, Node.DIRECTIVES);
1339:       assertEquals(37, Node.OPT_ARG_NAME);
1340:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1341:       assertEquals(8, Node.FLAG_NO_THROWS);
1342:       assertEquals(39, Node.EMPTY_BLOCK);
1343:       assertEquals(50, Node.FREE_CALL);
1344:       assertEquals(55, Node.INFERRED_FUNCTION);
1345:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1346:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1347:       assertEquals(54, Node.SLASH_V);
1348:       assertEquals(43, Node.IS_CONSTANT_NAME);
1349:       assertEquals(57, Node.LAST_PROP);
1350:       assertEquals(30, Node.VAR_ARGS_NAME);
1351:       assertEquals(40, Node.ORIGINALNAME_PROP);
1352:       assertEquals(32, Node.INCRDECR_PROP);
1353:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1354:       assertEquals(12, Node.COLUMN_BITS);
1355:       assertEquals(2, Node.POST_FLAG);
1356:       assertEquals(56, Node.CHANGE_TIME);
1357:       assertEquals(46, Node.IS_NAMESPACE);
1358:       assertEquals(47, Node.IS_DISPATCHER);
1359:       assertEquals(29, Node.JSDOC_INFO_PROP);
1360:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1361:       assertEquals(1, Node.DECR_FLAG);
1362:       assertEquals(57, Node.LAST_PROP);
1363:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1364:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1365:       assertEquals(53, Node.INPUT_ID);
1366:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1367:       assertEquals(52, Node.LENGTH);
1368:       assertEquals(36, Node.QUOTED_PROP);
1369:       assertEquals(57, Node.REFLECTED_OBJECT);
1370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1371:       assertEquals(49, Node.DIRECT_EVAL);
1372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1373:       assertEquals(4095, Node.COLUMN_MASK);
1374:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1375:       assertEquals(37, Node.OPT_ARG_NAME);
1376:       assertEquals(48, Node.DIRECTIVES);
1377:       assertEquals(8, Node.FLAG_NO_THROWS);
1378:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1379:       assertEquals(50, Node.FREE_CALL);
1380:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1381:       assertEquals(55, Node.INFERRED_FUNCTION);
1382:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1383:       assertEquals(39, Node.EMPTY_BLOCK);
1384:       assertEquals(54, Node.SLASH_V);
1385:       assertEquals(43, Node.IS_CONSTANT_NAME);
1386:       assertEquals(30, Node.VAR_ARGS_NAME);
1387:       assertEquals(40, Node.ORIGINALNAME_PROP);
1388:       
1389:       Node node3 = new Node(30, (-2079), 2);
1390:       assertFalse(node3.equals((Object)node0));
1391:       assertFalse(node3.equals((Object)node1));
1392:       assertFalse(node3.equals((Object)node2));
1393:       assertFalse(node3.isTry());
1394:       assertFalse(node3.isDebugger());
1395:       assertFalse(node3.isTrue());
1396:       assertFalse(node3.isRegExp());
1397:       assertFalse(node3.isFunction());
1398:       assertFalse(node3.isFor());
1399:       assertFalse(node3.isEmpty());
1400:       assertFalse(node3.isDefaultCase());
1401:       assertEquals(0, node3.getChildCount());
1402:       assertFalse(node3.isGetterDef());
1403:       assertFalse(node3.isStringKey());
1404:       assertFalse(node3.isArrayLit());
1405:       assertFalse(node3.isParamList());
1406:       assertFalse(node3.isSwitch());
1407:       assertFalse(node3.isAdd());
1408:       assertFalse(node3.isDo());
1409:       assertFalse(node3.isString());
1410:       assertFalse(node3.isWhile());
1411:       assertFalse(node3.isVar());
1412:       assertFalse(node3.isOr());
1413:       assertFalse(node3.isReturn());
1414:       assertFalse(node3.isComma());
1415:       assertFalse(node3.isDec());
1416:       assertFalse(node3.isTypeOf());
1417:       assertFalse(node3.isBreak());
1418:       assertFalse(node3.isCall());
1419:       assertFalse(node3.isNull());
1420:       assertFalse(node3.isGetElem());
1421:       assertFalse(node3.isDelProp());
1422:       assertFalse(node3.isVoid());
1423:       assertFalse(node3.isName());
1424:       assertEquals(30, node3.getType());
1425:       assertFalse(node3.isExprResult());
1426:       assertFalse(node3.isCast());
1427:       assertFalse(node3.isScript());
1428:       assertFalse(node3.isWith());
1429:       assertFalse(node3.isAssign());
1430:       assertFalse(node3.hasChildren());
1431:       assertFalse(node3.hasOneChild());
1432:       assertFalse(node3.isLabel());
1433:       assertFalse(node3.isAssignAdd());
1434:       assertFalse(node3.isGetProp());
1435:       assertEquals((-1), node3.getSourcePosition());
1436:       assertFalse(node3.isObjectLit());
1437:       assertFalse(node3.isContinue());
1438:       assertFalse(node3.isNumber());
1439:       assertFalse(node3.isLabelName());
1440:       assertFalse(node3.isNot());
1441:       assertFalse(node3.isAnd());
1442:       assertEquals((-1), node3.getCharno());
1443:       assertFalse(node3.isHook());
1444:       assertFalse(node3.isBlock());
1445:       assertFalse(node3.isInc());
1446:       assertFalse(node3.isFalse());
1447:       assertFalse(node3.isCase());
1448:       assertFalse(node3.isThrow());
1449:       assertTrue(node3.isNew());
1450:       assertEquals((-1), node3.getLineno());
1451:       assertFalse(node3.isSetterDef());
1452:       assertFalse(node3.isThis());
1453:       assertFalse(node3.isCatch());
1454:       assertFalse(node3.isInstanceOf());
1455:       assertFalse(node3.isIn());
1456:       assertFalse(node3.hasMoreThanOneChild());
1457:       assertFalse(node3.isNE());
1458:       assertFalse(node3.isIf());
1459:       assertNotNull(node3);
1460:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1461:       assertEquals(12, Node.COLUMN_BITS);
1462:       assertEquals(46, Node.IS_NAMESPACE);
1463:       assertEquals(2, Node.POST_FLAG);
1464:       assertEquals(30, Node.VAR_ARGS_NAME);
1465:       assertEquals(56, Node.CHANGE_TIME);
1466:       assertEquals(54, Node.SLASH_V);
1467:       assertEquals(37, Node.OPT_ARG_NAME);
1468:       assertEquals(49, Node.DIRECT_EVAL);
1469:       assertEquals(57, Node.REFLECTED_OBJECT);
1470:       assertEquals(40, Node.ORIGINALNAME_PROP);
1471:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1472:       assertEquals(52, Node.LENGTH);
1473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1474:       assertEquals(57, Node.LAST_PROP);
1475:       assertEquals(47, Node.IS_DISPATCHER);
1476:       assertEquals(39, Node.EMPTY_BLOCK);
1477:       assertEquals(29, Node.JSDOC_INFO_PROP);
1478:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1479:       assertEquals(53, Node.INPUT_ID);
1480:       assertEquals(4095, Node.COLUMN_MASK);
1481:       assertEquals(55, Node.INFERRED_FUNCTION);
1482:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1483:       assertEquals(8, Node.FLAG_NO_THROWS);
1484:       assertEquals(43, Node.IS_CONSTANT_NAME);
1485:       assertEquals(36, Node.QUOTED_PROP);
1486:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1487:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1488:       assertEquals(48, Node.DIRECTIVES);
1489:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1490:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1491:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1492:       assertEquals(50, Node.FREE_CALL);
1493:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1494:       assertEquals(32, Node.INCRDECR_PROP);
1495:       assertEquals(1, Node.DECR_FLAG);
1496:       
1497:       Node node4 = node3.copyInformationFrom(node2);
1498:       assertFalse(node0.equals((Object)node3));
1499:       assertFalse(node0.equals((Object)node1));
1500:       assertFalse(node0.equals((Object)node2));
1501:       assertFalse(node1.equals((Object)node2));
1502:       assertFalse(node1.equals((Object)node3));
1503:       assertFalse(node1.equals((Object)node0));
1504:       assertFalse(node2.equals((Object)node1));
1505:       assertFalse(node2.equals((Object)node3));
1506:       assertFalse(node2.equals((Object)node0));
1507:       assertFalse(node3.equals((Object)node0));
1508:       assertFalse(node3.equals((Object)node1));
1509:       assertFalse(node3.equals((Object)node2));
1510:       assertFalse(node4.equals((Object)node1));
1511:       assertFalse(node4.equals((Object)node0));
1512:       assertFalse(node4.equals((Object)node2));
1513:       assertNotSame(node2, node3);
1514:       assertNotSame(node2, node4);
1515:       assertSame(node3, node4);
1516:       assertNotSame(node3, node2);
1517:       assertSame(node4, node3);
1518:       assertNotSame(node4, node2);
1519:       assertFalse(node0.hasOneChild());
1520:       assertFalse(node0.isLabelName());
1521:       assertFalse(node0.isDec());
1522:       assertFalse(node0.isAssign());
1523:       assertFalse(node0.isGetElem());
1524:       assertFalse(node0.hasChildren());
1525:       assertFalse(node0.isExprResult());
1526:       assertFalse(node0.isCast());
1527:       assertFalse(node0.isTypeOf());
1528:       assertFalse(node0.isWith());
1529:       assertFalse(node0.isOr());
1530:       assertFalse(node0.isInstanceOf());
1531:       assertFalse(node0.isLabel());
1532:       assertFalse(node0.isAssignAdd());
1533:       assertFalse(node0.isDo());
1534:       assertEquals(0, node0.getCharno());
1535:       assertFalse(node0.isThrow());
1536:       assertFalse(node0.isName());
1537:       assertEquals(159744, node0.getSourcePosition());
1538:       assertFalse(node0.isWhile());
1539:       assertFalse(node0.isBreak());
1540:       assertFalse(node0.isContinue());
1541:       assertFalse(node0.isCall());
1542:       assertFalse(node0.isComma());
1543:       assertFalse(node0.isFalse());
1544:       assertFalse(node0.isReturn());
1545:       assertTrue(node0.isNumber());
1546:       assertFalse(node0.isGetProp());
1547:       assertFalse(node0.isAnd());
1548:       assertFalse(node0.isString());
1549:       assertFalse(node0.isNot());
1550:       assertFalse(node0.isObjectLit());
1551:       assertFalse(node0.isDebugger());
1552:       assertFalse(node0.isTry());
1553:       assertFalse(node0.isArrayLit());
1554:       assertFalse(node0.isTrue());
1555:       assertFalse(node0.isVoid());
1556:       assertFalse(node0.isDefaultCase());
1557:       assertFalse(node0.isDelProp());
1558:       assertFalse(node0.isFor());
1559:       assertFalse(node0.isFunction());
1560:       assertFalse(node0.isCatch());
1561:       assertFalse(node0.isRegExp());
1562:       assertEquals(0, node0.getChildCount());
1563:       assertFalse(node0.isNE());
1564:       assertFalse(node0.isIf());
1565:       assertFalse(node0.isEmpty());
1566:       assertFalse(node0.isNull());
1567:       assertFalse(node0.isSetterDef());
1568:       assertFalse(node0.isInc());
1569:       assertFalse(node0.isIn());
1570:       assertFalse(node0.isBlock());
1571:       assertFalse(node0.isNew());
1572:       assertFalse(node0.isAdd());
1573:       assertFalse(node0.isHook());
1574:       assertFalse(node0.isStringKey());
1575:       assertFalse(node0.isVar());
1576:       assertFalse(node0.isSwitch());
1577:       assertEquals(39, node0.getLineno());
1578:       assertEquals(39, node0.getType());
1579:       assertFalse(node0.hasMoreThanOneChild());
1580:       assertFalse(node0.isThis());
1581:       assertFalse(node0.isParamList());
1582:       assertFalse(node0.isGetterDef());
1583:       assertFalse(node0.isScript());
1584:       assertFalse(node0.isCase());
1585:       assertFalse(node1.isWith());
1586:       assertFalse(node1.isScript());
1587:       assertFalse(node1.isObjectLit());
1588:       assertFalse(node1.isNot());
1589:       assertFalse(node1.isCast());
1590:       assertFalse(node1.isInstanceOf());
1591:       assertFalse(node1.isAnd());
1592:       assertFalse(node1.isExprResult());
1593:       assertFalse(node1.isLabelName());
1594:       assertFalse(node1.isThrow());
1595:       assertFalse(node1.isFalse());
1596:       assertFalse(node1.isLabel());
1597:       assertFalse(node1.isOr());
1598:       assertEquals(46, node1.getType());
1599:       assertFalse(node1.isAssignAdd());
1600:       assertFalse(node1.isInc());
1601:       assertFalse(node1.isDo());
1602:       assertEquals((-1), node1.getCharno());
1603:       assertFalse(node1.hasMoreThanOneChild());
1604:       assertEquals((-1), node1.getLineno());
1605:       assertFalse(node1.isSwitch());
1606:       assertFalse(node1.isGetterDef());
1607:       assertFalse(node1.isNumber());
1608:       assertFalse(node1.isFor());
1609:       assertFalse(node1.isStringKey());
1610:       assertFalse(node1.isThis());
1611:       assertFalse(node1.isHook());
1612:       assertFalse(node1.isBlock());
1613:       assertFalse(node1.isCase());
1614:       assertFalse(node1.hasOneChild());
1615:       assertFalse(node1.isTry());
1616:       assertFalse(node1.isDefaultCase());
1617:       assertFalse(node1.isTrue());
1618:       assertFalse(node1.isDebugger());
1619:       assertFalse(node1.isFunction());
1620:       assertFalse(node1.isRegExp());
1621:       assertEquals(0, node1.getChildCount());
1622:       assertFalse(node1.isCatch());
1623:       assertFalse(node1.isParamList());
1624:       assertFalse(node1.isArrayLit());
1625:       assertFalse(node1.isVoid());
1626:       assertFalse(node1.isDelProp());
1627:       assertFalse(node1.isIf());
1628:       assertFalse(node1.isNull());
1629:       assertFalse(node1.isNE());
1630:       assertFalse(node1.isEmpty());
1631:       assertFalse(node1.isIn());
1632:       assertFalse(node1.isAdd());
1633:       assertFalse(node1.isVar());
1634:       assertFalse(node1.isSetterDef());
1635:       assertFalse(node1.isNew());
1636:       assertFalse(node1.isString());
1637:       assertFalse(node1.isWhile());
1638:       assertFalse(node1.isContinue());
1639:       assertFalse(node1.isCall());
1640:       assertFalse(node1.isName());
1641:       assertFalse(node1.isBreak());
1642:       assertFalse(node1.hasChildren());
1643:       assertFalse(node1.isGetElem());
1644:       assertEquals((-1), node1.getSourcePosition());
1645:       assertFalse(node1.isTypeOf());
1646:       assertFalse(node1.isComma());
1647:       assertFalse(node1.isDec());
1648:       assertFalse(node1.isAssign());
1649:       assertFalse(node1.isReturn());
1650:       assertFalse(node1.isGetProp());
1651:       assertFalse(node2.isScript());
1652:       assertFalse(node2.isExprResult());
1653:       assertFalse(node2.isNot());
1654:       assertFalse(node2.isWith());
1655:       assertFalse(node2.isCast());
1656:       assertFalse(node2.isAnd());
1657:       assertFalse(node2.isInstanceOf());
1658:       assertFalse(node2.isLabelName());
1659:       assertFalse(node2.isGetElem());
1660:       assertEquals(2, node2.getChildCount());
1661:       assertFalse(node2.isOr());
1662:       assertFalse(node2.isLabel());
1663:       assertFalse(node2.isFalse());
1664:       assertFalse(node2.isThrow());
1665:       assertFalse(node2.isAssignAdd());
1666:       assertFalse(node2.isDo());
1667:       assertFalse(node2.isString());
1668:       assertFalse(node2.isWhile());
1669:       assertFalse(node2.isCall());
1670:       assertFalse(node2.isContinue());
1671:       assertFalse(node2.isName());
1672:       assertTrue(node2.hasMoreThanOneChild());
1673:       assertFalse(node2.isBreak());
1674:       assertFalse(node2.isTypeOf());
1675:       assertFalse(node2.isAssign());
1676:       assertFalse(node2.isReturn());
1677:       assertEquals((-1), node2.getSourcePosition());
1678:       assertFalse(node2.isComma());
1679:       assertFalse(node2.isDec());
1680:       assertFalse(node2.isObjectLit());
1681:       assertFalse(node2.isGetProp());
1682:       assertTrue(node2.isNumber());
1683:       assertFalse(node2.isRegExp());
1684:       assertFalse(node2.isTrue());
1685:       assertFalse(node2.isFunction());
1686:       assertFalse(node2.isDefaultCase());
1687:       assertFalse(node2.isDebugger());
1688:       assertFalse(node2.isCatch());
1689:       assertFalse(node2.isDelProp());
1690:       assertFalse(node2.isVoid());
1691:       assertFalse(node2.isArrayLit());
1692:       assertFalse(node2.isNE());
1693:       assertFalse(node2.isSetterDef());
1694:       assertFalse(node2.isNull());
1695:       assertFalse(node2.isIf());
1696:       assertFalse(node2.isVar());
1697:       assertFalse(node2.isIn());
1698:       assertFalse(node2.isEmpty());
1699:       assertFalse(node2.isAdd());
1700:       assertFalse(node2.isNew());
1701:       assertFalse(node2.isSwitch());
1702:       assertFalse(node2.isInc());
1703:       assertEquals(39, node2.getType());
1704:       assertFalse(node2.isBlock());
1705:       assertEquals((-1), node2.getCharno());
1706:       assertFalse(node2.isStringKey());
1707:       assertTrue(node2.hasChildren());
1708:       assertEquals((-1), node2.getLineno());
1709:       assertFalse(node2.isThis());
1710:       assertFalse(node2.isParamList());
1711:       assertFalse(node2.isFor());
1712:       assertFalse(node2.isGetterDef());
1713:       assertFalse(node2.isHook());
1714:       assertFalse(node2.isTry());
1715:       assertFalse(node2.hasOneChild());
1716:       assertFalse(node2.isCase());
1717:       assertFalse(node3.isTry());
1718:       assertFalse(node3.isDebugger());
1719:       assertFalse(node3.isTrue());
1720:       assertFalse(node3.isRegExp());
1721:       assertFalse(node3.isFunction());
1722:       assertFalse(node3.isFor());
1723:       assertFalse(node3.isEmpty());
1724:       assertFalse(node3.isDefaultCase());
1725:       assertEquals(0, node3.getChildCount());
1726:       assertFalse(node3.isGetterDef());
1727:       assertFalse(node3.isStringKey());
1728:       assertFalse(node3.isArrayLit());
1729:       assertFalse(node3.isParamList());
1730:       assertFalse(node3.isSwitch());
1731:       assertFalse(node3.isAdd());
1732:       assertFalse(node3.isDo());
1733:       assertFalse(node3.isString());
1734:       assertFalse(node3.isWhile());
1735:       assertFalse(node3.isVar());
1736:       assertFalse(node3.isOr());
1737:       assertFalse(node3.isReturn());
1738:       assertFalse(node3.isComma());
1739:       assertFalse(node3.isDec());
1740:       assertFalse(node3.isTypeOf());
1741:       assertFalse(node3.isBreak());
1742:       assertFalse(node3.isCall());
1743:       assertFalse(node3.isNull());
1744:       assertFalse(node3.isGetElem());
1745:       assertFalse(node3.isDelProp());
1746:       assertFalse(node3.isVoid());
1747:       assertFalse(node3.isName());
1748:       assertEquals(30, node3.getType());
1749:       assertFalse(node3.isExprResult());
1750:       assertFalse(node3.isCast());
1751:       assertFalse(node3.isScript());
1752:       assertFalse(node3.isWith());
1753:       assertFalse(node3.isAssign());
1754:       assertFalse(node3.hasChildren());
1755:       assertFalse(node3.hasOneChild());
1756:       assertFalse(node3.isLabel());
1757:       assertFalse(node3.isAssignAdd());
1758:       assertFalse(node3.isGetProp());
1759:       assertEquals((-1), node3.getSourcePosition());
1760:       assertFalse(node3.isObjectLit());
1761:       assertFalse(node3.isContinue());
1762:       assertFalse(node3.isNumber());
1763:       assertFalse(node3.isLabelName());
1764:       assertFalse(node3.isNot());
1765:       assertFalse(node3.isAnd());
1766:       assertEquals((-1), node3.getCharno());
1767:       assertFalse(node3.isHook());
1768:       assertFalse(node3.isBlock());
1769:       assertFalse(node3.isInc());
1770:       assertFalse(node3.isFalse());
1771:       assertFalse(node3.isCase());
1772:       assertFalse(node3.isThrow());
1773:       assertTrue(node3.isNew());
1774:       assertEquals((-1), node3.getLineno());
1775:       assertFalse(node3.isSetterDef());
1776:       assertFalse(node3.isThis());
1777:       assertFalse(node3.isCatch());
1778:       assertFalse(node3.isInstanceOf());
1779:       assertFalse(node3.isIn());
1780:       assertFalse(node3.hasMoreThanOneChild());
1781:       assertFalse(node3.isNE());
1782:       assertFalse(node3.isIf());
1783:       assertFalse(node4.isObjectLit());
1784:       assertFalse(node4.isNot());
1785:       assertFalse(node4.isInstanceOf());
1786:       assertFalse(node4.isScript());
1787:       assertFalse(node4.isWith());
1788:       assertFalse(node4.isExprResult());
1789:       assertEquals(30, node4.getType());
1790:       assertFalse(node4.isAnd());
1791:       assertFalse(node4.isFalse());
1792:       assertFalse(node4.isThrow());
1793:       assertTrue(node4.isNew());
1794:       assertFalse(node4.isLabelName());
1795:       assertFalse(node4.isCast());
1796:       assertFalse(node4.isInc());
1797:       assertFalse(node4.isLabel());
1798:       assertFalse(node4.isAssignAdd());
1799:       assertFalse(node4.isDo());
1800:       assertFalse(node4.isContinue());
1801:       assertFalse(node4.isString());
1802:       assertFalse(node4.isOr());
1803:       assertEquals((-1), node4.getSourcePosition());
1804:       assertFalse(node4.isDelProp());
1805:       assertFalse(node4.isGetElem());
1806:       assertFalse(node4.isCall());
1807:       assertFalse(node4.isName());
1808:       assertFalse(node4.isAssign());
1809:       assertFalse(node4.isBreak());
1810:       assertFalse(node4.isDec());
1811:       assertFalse(node4.isTypeOf());
1812:       assertFalse(node4.isGetProp());
1813:       assertFalse(node4.isReturn());
1814:       assertFalse(node4.isComma());
1815:       assertFalse(node4.hasChildren());
1816:       assertFalse(node4.isWhile());
1817:       assertEquals(0, node4.getChildCount());
1818:       assertFalse(node4.isRegExp());
1819:       assertFalse(node4.isCatch());
1820:       assertFalse(node4.isTrue());
1821:       assertFalse(node4.isVoid());
1822:       assertFalse(node4.isDebugger());
1823:       assertFalse(node4.isNull());
1824:       assertFalse(node4.isParamList());
1825:       assertFalse(node4.isEmpty());
1826:       assertFalse(node4.isArrayLit());
1827:       assertFalse(node4.isFunction());
1828:       assertFalse(node4.isAdd());
1829:       assertFalse(node4.isSetterDef());
1830:       assertFalse(node4.isDefaultCase());
1831:       assertFalse(node4.isVar());
1832:       assertFalse(node4.isCase());
1833:       assertFalse(node4.isIn());
1834:       assertFalse(node4.hasMoreThanOneChild());
1835:       assertEquals((-1), node4.getLineno());
1836:       assertEquals((-1), node4.getCharno());
1837:       assertFalse(node4.isIf());
1838:       assertFalse(node4.isNE());
1839:       assertFalse(node4.isSwitch());
1840:       assertFalse(node4.isStringKey());
1841:       assertFalse(node4.isFor());
1842:       assertFalse(node4.isNumber());
1843:       assertFalse(node4.isGetterDef());
1844:       assertFalse(node4.isBlock());
1845:       assertFalse(node4.isTry());
1846:       assertFalse(node4.isThis());
1847:       assertFalse(node4.hasOneChild());
1848:       assertFalse(node4.isHook());
1849:       assertNotNull(node4);
1850:       assertEquals(12, Node.COLUMN_BITS);
1851:       assertEquals(46, Node.IS_NAMESPACE);
1852:       assertEquals(57, Node.LAST_PROP);
1853:       assertEquals(1, Node.DECR_FLAG);
1854:       assertEquals(49, Node.DIRECT_EVAL);
1855:       assertEquals(32, Node.INCRDECR_PROP);
1856:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1857:       assertEquals(56, Node.CHANGE_TIME);
1858:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1859:       assertEquals(54, Node.SLASH_V);
1860:       assertEquals(52, Node.LENGTH);
1861:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1862:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1863:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1864:       assertEquals(57, Node.REFLECTED_OBJECT);
1865:       assertEquals(37, Node.OPT_ARG_NAME);
1866:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1867:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1868:       assertEquals(55, Node.INFERRED_FUNCTION);
1869:       assertEquals(4095, Node.COLUMN_MASK);
1870:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1871:       assertEquals(48, Node.DIRECTIVES);
1872:       assertEquals(8, Node.FLAG_NO_THROWS);
1873:       assertEquals(39, Node.EMPTY_BLOCK);
1874:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1875:       assertEquals(36, Node.QUOTED_PROP);
1876:       assertEquals(43, Node.IS_CONSTANT_NAME);
1877:       assertEquals(53, Node.INPUT_ID);
1878:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1879:       assertEquals(50, Node.FREE_CALL);
1880:       assertEquals(40, Node.ORIGINALNAME_PROP);
1881:       assertEquals(29, Node.JSDOC_INFO_PROP);
1882:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1883:       assertEquals(47, Node.IS_DISPATCHER);
1884:       assertEquals(30, Node.VAR_ARGS_NAME);
1885:       assertEquals(2, Node.POST_FLAG);
1886:       assertEquals(2, Node.POST_FLAG);
1887:       assertEquals(56, Node.CHANGE_TIME);
1888:       assertEquals(46, Node.IS_NAMESPACE);
1889:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1890:       assertEquals(47, Node.IS_DISPATCHER);
1891:       assertEquals(12, Node.COLUMN_BITS);
1892:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1893:       assertEquals(29, Node.JSDOC_INFO_PROP);
1894:       assertEquals(32, Node.INCRDECR_PROP);
1895:       assertEquals(53, Node.INPUT_ID);
1896:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1897:       assertEquals(1, Node.DECR_FLAG);
1898:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1899:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1900:       assertEquals(52, Node.LENGTH);
1901:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1902:       assertEquals(57, Node.REFLECTED_OBJECT);
1903:       assertEquals(36, Node.QUOTED_PROP);
1904:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1905:       assertEquals(4095, Node.COLUMN_MASK);
1906:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1907:       assertEquals(49, Node.DIRECT_EVAL);
1908:       assertEquals(48, Node.DIRECTIVES);
1909:       assertEquals(37, Node.OPT_ARG_NAME);
1910:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1911:       assertEquals(8, Node.FLAG_NO_THROWS);
1912:       assertEquals(39, Node.EMPTY_BLOCK);
1913:       assertEquals(50, Node.FREE_CALL);
1914:       assertEquals(55, Node.INFERRED_FUNCTION);
1915:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1916:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1917:       assertEquals(54, Node.SLASH_V);
1918:       assertEquals(43, Node.IS_CONSTANT_NAME);
1919:       assertEquals(57, Node.LAST_PROP);
1920:       assertEquals(30, Node.VAR_ARGS_NAME);
1921:       assertEquals(40, Node.ORIGINALNAME_PROP);
1922:       assertEquals(32, Node.INCRDECR_PROP);
1923:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1924:       assertEquals(12, Node.COLUMN_BITS);
1925:       assertEquals(2, Node.POST_FLAG);
1926:       assertEquals(56, Node.CHANGE_TIME);
1927:       assertEquals(46, Node.IS_NAMESPACE);
1928:       assertEquals(47, Node.IS_DISPATCHER);
1929:       assertEquals(29, Node.JSDOC_INFO_PROP);
1930:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1931:       assertEquals(1, Node.DECR_FLAG);
1932:       assertEquals(57, Node.LAST_PROP);
1933:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1934:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1935:       assertEquals(53, Node.INPUT_ID);
1936:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1937:       assertEquals(52, Node.LENGTH);
1938:       assertEquals(36, Node.QUOTED_PROP);
1939:       assertEquals(57, Node.REFLECTED_OBJECT);
1940:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1941:       assertEquals(49, Node.DIRECT_EVAL);
1942:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1943:       assertEquals(4095, Node.COLUMN_MASK);
1944:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1945:       assertEquals(37, Node.OPT_ARG_NAME);
1946:       assertEquals(48, Node.DIRECTIVES);
1947:       assertEquals(8, Node.FLAG_NO_THROWS);
1948:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1949:       assertEquals(50, Node.FREE_CALL);
1950:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1951:       assertEquals(55, Node.INFERRED_FUNCTION);
1952:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1953:       assertEquals(39, Node.EMPTY_BLOCK);
1954:       assertEquals(54, Node.SLASH_V);
1955:       assertEquals(43, Node.IS_CONSTANT_NAME);
1956:       assertEquals(30, Node.VAR_ARGS_NAME);
1957:       assertEquals(40, Node.ORIGINALNAME_PROP);
1958:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1959:       assertEquals(12, Node.COLUMN_BITS);
1960:       assertEquals(46, Node.IS_NAMESPACE);
1961:       assertEquals(2, Node.POST_FLAG);
1962:       assertEquals(30, Node.VAR_ARGS_NAME);
1963:       assertEquals(56, Node.CHANGE_TIME);
1964:       assertEquals(54, Node.SLASH_V);
1965:       assertEquals(37, Node.OPT_ARG_NAME);
1966:       assertEquals(49, Node.DIRECT_EVAL);
1967:       assertEquals(57, Node.REFLECTED_OBJECT);
1968:       assertEquals(40, Node.ORIGINALNAME_PROP);
1969:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1970:       assertEquals(52, Node.LENGTH);
1971:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1972:       assertEquals(57, Node.LAST_PROP);
1973:       assertEquals(47, Node.IS_DISPATCHER);
1974:       assertEquals(39, Node.EMPTY_BLOCK);
1975:       assertEquals(29, Node.JSDOC_INFO_PROP);
1976:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1977:       assertEquals(53, Node.INPUT_ID);
1978:       assertEquals(4095, Node.COLUMN_MASK);
1979:       assertEquals(55, Node.INFERRED_FUNCTION);
1980:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1981:       assertEquals(8, Node.FLAG_NO_THROWS);
1982:       assertEquals(43, Node.IS_CONSTANT_NAME);
1983:       assertEquals(36, Node.QUOTED_PROP);
1984:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1985:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1986:       assertEquals(48, Node.DIRECTIVES);
1987:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1988:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1989:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1990:       assertEquals(50, Node.FREE_CALL);
1991:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1992:       assertEquals(32, Node.INCRDECR_PROP);
1993:       assertEquals(1, Node.DECR_FLAG);
1994:       assertEquals(56, Node.CHANGE_TIME);
1995:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1996:       assertEquals(29, Node.JSDOC_INFO_PROP);
1997:       assertEquals(47, Node.IS_DISPATCHER);
1998:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1999:       assertEquals(2, Node.POST_FLAG);
2000:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2001:       assertEquals(32, Node.INCRDECR_PROP);
2002:       assertEquals(12, Node.COLUMN_BITS);
2003:       assertEquals(53, Node.INPUT_ID);
2004:       assertEquals(1, Node.DECR_FLAG);
2005:       assertEquals(36, Node.QUOTED_PROP);
2006:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2007:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2008:       assertEquals(55, Node.INFERRED_FUNCTION);
2009:       assertEquals(4095, Node.COLUMN_MASK);
2010:       assertEquals(52, Node.LENGTH);
2011:       assertEquals(57, Node.REFLECTED_OBJECT);
2012:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2013:       assertEquals(37, Node.OPT_ARG_NAME);
2014:       assertEquals(48, Node.DIRECTIVES);
2015:       assertEquals(49, Node.DIRECT_EVAL);
2016:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2017:       assertEquals(39, Node.EMPTY_BLOCK);
2018:       assertEquals(40, Node.ORIGINALNAME_PROP);
2019:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2020:       assertEquals(50, Node.FREE_CALL);
2021:       assertEquals(8, Node.FLAG_NO_THROWS);
2022:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2023:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2024:       assertEquals(57, Node.LAST_PROP);
2025:       assertEquals(43, Node.IS_CONSTANT_NAME);
2026:       assertEquals(30, Node.VAR_ARGS_NAME);
2027:       assertEquals(46, Node.IS_NAMESPACE);
2028:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2029:       assertEquals(54, Node.SLASH_V);
2030:       
2031:       boolean boolean2 = node0.isFalse();
2032:       assertFalse(node0.equals((Object)node3));
2033:       assertFalse(node0.equals((Object)node1));
2034:       assertFalse(node0.equals((Object)node4));
2035:       assertFalse(node0.equals((Object)node2));
2036:       assertTrue(boolean2 == boolean1);
2037:       assertTrue(boolean2 == boolean0);
2038:       assertFalse(node0.hasOneChild());
2039:       assertFalse(node0.isLabelName());
2040:       assertFalse(node0.isDec());
2041:       assertFalse(node0.isAssign());
2042:       assertFalse(node0.isGetElem());
2043:       assertFalse(node0.hasChildren());
2044:       assertFalse(node0.isExprResult());
2045:       assertFalse(node0.isCast());
2046:       assertFalse(node0.isTypeOf());
2047:       assertFalse(node0.isWith());
2048:       assertFalse(node0.isOr());
2049:       assertFalse(node0.isInstanceOf());
2050:       assertFalse(node0.isLabel());
2051:       assertFalse(node0.isAssignAdd());
2052:       assertFalse(node0.isDo());
2053:       assertEquals(0, node0.getCharno());
2054:       assertFalse(node0.isThrow());
2055:       assertFalse(node0.isName());
2056:       assertEquals(159744, node0.getSourcePosition());
2057:       assertFalse(node0.isWhile());
2058:       assertFalse(node0.isBreak());
2059:       assertFalse(node0.isContinue());
2060:       assertFalse(node0.isCall());
2061:       assertFalse(node0.isComma());
2062:       assertFalse(node0.isFalse());
2063:       assertFalse(node0.isReturn());
2064:       assertTrue(node0.isNumber());
2065:       assertFalse(node0.isGetProp());
2066:       assertFalse(node0.isAnd());
2067:       assertFalse(node0.isString());
2068:       assertFalse(node0.isNot());
2069:       assertFalse(node0.isObjectLit());
2070:       assertFalse(node0.isDebugger());
2071:       assertFalse(node0.isTry());
2072:       assertFalse(node0.isArrayLit());
2073:       assertFalse(node0.isTrue());
2074:       assertFalse(node0.isVoid());
2075:       assertFalse(node0.isDefaultCase());
2076:       assertFalse(node0.isDelProp());
2077:       assertFalse(node0.isFor());
2078:       assertFalse(node0.isFunction());
2079:       assertFalse(node0.isCatch());
2080:       assertFalse(node0.isRegExp());
2081:       assertEquals(0, node0.getChildCount());
2082:       assertFalse(node0.isNE());
2083:       assertFalse(node0.isIf());
2084:       assertFalse(node0.isEmpty());
2085:       assertFalse(node0.isNull());
2086:       assertFalse(node0.isSetterDef());
2087:       assertFalse(node0.isInc());
2088:       assertFalse(node0.isIn());
2089:       assertFalse(node0.isBlock());
2090:       assertFalse(node0.isNew());
2091:       assertFalse(node0.isAdd());
2092:       assertFalse(node0.isHook());
2093:       assertFalse(node0.isStringKey());
2094:       assertFalse(node0.isVar());
2095:       assertFalse(node0.isSwitch());
2096:       assertEquals(39, node0.getLineno());
2097:       assertEquals(39, node0.getType());
2098:       assertFalse(node0.hasMoreThanOneChild());
2099:       assertFalse(node0.isThis());
2100:       assertFalse(node0.isParamList());
2101:       assertFalse(node0.isGetterDef());
2102:       assertFalse(node0.isScript());
2103:       assertFalse(node0.isCase());
2104:       assertFalse(boolean2);
2105:       assertEquals(12, Node.COLUMN_BITS);
2106:       assertEquals(46, Node.IS_NAMESPACE);
2107:       assertEquals(57, Node.LAST_PROP);
2108:       assertEquals(1, Node.DECR_FLAG);
2109:       assertEquals(49, Node.DIRECT_EVAL);
2110:       assertEquals(32, Node.INCRDECR_PROP);
2111:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2112:       assertEquals(56, Node.CHANGE_TIME);
2113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2114:       assertEquals(54, Node.SLASH_V);
2115:       assertEquals(52, Node.LENGTH);
2116:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2117:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2119:       assertEquals(57, Node.REFLECTED_OBJECT);
2120:       assertEquals(37, Node.OPT_ARG_NAME);
2121:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2122:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2123:       assertEquals(55, Node.INFERRED_FUNCTION);
2124:       assertEquals(4095, Node.COLUMN_MASK);
2125:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2126:       assertEquals(48, Node.DIRECTIVES);
2127:       assertEquals(8, Node.FLAG_NO_THROWS);
2128:       assertEquals(39, Node.EMPTY_BLOCK);
2129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2130:       assertEquals(36, Node.QUOTED_PROP);
2131:       assertEquals(43, Node.IS_CONSTANT_NAME);
2132:       assertEquals(53, Node.INPUT_ID);
2133:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2134:       assertEquals(50, Node.FREE_CALL);
2135:       assertEquals(40, Node.ORIGINALNAME_PROP);
2136:       assertEquals(29, Node.JSDOC_INFO_PROP);
2137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2138:       assertEquals(47, Node.IS_DISPATCHER);
2139:       assertEquals(30, Node.VAR_ARGS_NAME);
2140:       assertEquals(2, Node.POST_FLAG);
2141:       
2142:       boolean boolean3 = node2.isName();
2143:       assertFalse(node0.equals((Object)node3));
2144:       assertFalse(node0.equals((Object)node1));
2145:       assertFalse(node0.equals((Object)node4));
2146:       assertFalse(node0.equals((Object)node2));
2147:       assertFalse(node1.equals((Object)node2));
2148:       assertFalse(node1.equals((Object)node3));
2149:       assertFalse(node1.equals((Object)node4));
2150:       assertFalse(node1.equals((Object)node0));
2151:       assertFalse(node2.equals((Object)node1));
2152:       assertFalse(node2.equals((Object)node3));
2153:       assertFalse(node2.equals((Object)node0));
2154:       assertFalse(node2.equals((Object)node4));
2155:       assertTrue(boolean3 == boolean1);
2156:       assertTrue(boolean3 == boolean0);
2157:       assertTrue(boolean3 == boolean2);
2158:       assertNotSame(node2, node3);
2159:       assertNotSame(node2, node4);
2160:       assertFalse(node0.hasOneChild());
2161:       assertFalse(node0.isLabelName());
2162:       assertFalse(node0.isDec());
2163:       assertFalse(node0.isAssign());
2164:       assertFalse(node0.isGetElem());
2165:       assertFalse(node0.hasChildren());
2166:       assertFalse(node0.isExprResult());
2167:       assertFalse(node0.isCast());
2168:       assertFalse(node0.isTypeOf());
2169:       assertFalse(node0.isWith());
2170:       assertFalse(node0.isOr());
2171:       assertFalse(node0.isInstanceOf());
2172:       assertFalse(node0.isLabel());
2173:       assertFalse(node0.isAssignAdd());
2174:       assertFalse(node0.isDo());
2175:       assertEquals(0, node0.getCharno());
2176:       assertFalse(node0.isThrow());
2177:       assertFalse(node0.isName());
2178:       assertEquals(159744, node0.getSourcePosition());
2179:       assertFalse(node0.isWhile());
2180:       assertFalse(node0.isBreak());
2181:       assertFalse(node0.isContinue());
2182:       assertFalse(node0.isCall());
2183:       assertFalse(node0.isComma());
2184:       assertFalse(node0.isFalse());
2185:       assertFalse(node0.isReturn());
2186:       assertTrue(node0.isNumber());
2187:       assertFalse(node0.isGetProp());
2188:       assertFalse(node0.isAnd());
2189:       assertFalse(node0.isString());
2190:       assertFalse(node0.isNot());
2191:       assertFalse(node0.isObjectLit());
2192:       assertFalse(node0.isDebugger());
2193:       assertFalse(node0.isTry());
2194:       assertFalse(node0.isArrayLit());
2195:       assertFalse(node0.isTrue());
2196:       assertFalse(node0.isVoid());
2197:       assertFalse(node0.isDefaultCase());
2198:       assertFalse(node0.isDelProp());
2199:       assertFalse(node0.isFor());
2200:       assertFalse(node0.isFunction());
2201:       assertFalse(node0.isCatch());
2202:       assertFalse(node0.isRegExp());
2203:       assertEquals(0, node0.getChildCount());
2204:       assertFalse(node0.isNE());
2205:       assertFalse(node0.isIf());
2206:       assertFalse(node0.isEmpty());
2207:       assertFalse(node0.isNull());
2208:       assertFalse(node0.isSetterDef());
2209:       assertFalse(node0.isInc());
2210:       assertFalse(node0.isIn());
2211:       assertFalse(node0.isBlock());
2212:       assertFalse(node0.isNew());
2213:       assertFalse(node0.isAdd());
2214:       assertFalse(node0.isHook());
2215:       assertFalse(node0.isStringKey());
2216:       assertFalse(node0.isVar());
2217:       assertFalse(node0.isSwitch());
2218:       assertEquals(39, node0.getLineno());
2219:       assertEquals(39, node0.getType());
2220:       assertFalse(node0.hasMoreThanOneChild());
2221:       assertFalse(node0.isThis());
2222:       assertFalse(node0.isParamList());
2223:       assertFalse(node0.isGetterDef());
2224:       assertFalse(node0.isScript());
2225:       assertFalse(node0.isCase());
2226:       assertFalse(node1.isWith());
2227:       assertFalse(node1.isScript());
2228:       assertFalse(node1.isObjectLit());
2229:       assertFalse(node1.isNot());
2230:       assertFalse(node1.isCast());
2231:       assertFalse(node1.isInstanceOf());
2232:       assertFalse(node1.isAnd());
2233:       assertFalse(node1.isExprResult());
2234:       assertFalse(node1.isLabelName());
2235:       assertFalse(node1.isThrow());
2236:       assertFalse(node1.isFalse());
2237:       assertFalse(node1.isLabel());
2238:       assertFalse(node1.isOr());
2239:       assertEquals(46, node1.getType());
2240:       assertFalse(node1.isAssignAdd());
2241:       assertFalse(node1.isInc());
2242:       assertFalse(node1.isDo());
2243:       assertEquals((-1), node1.getCharno());
2244:       assertFalse(node1.hasMoreThanOneChild());
2245:       assertEquals((-1), node1.getLineno());
2246:       assertFalse(node1.isSwitch());
2247:       assertFalse(node1.isGetterDef());
2248:       assertFalse(node1.isNumber());
2249:       assertFalse(node1.isFor());
2250:       assertFalse(node1.isStringKey());
2251:       assertFalse(node1.isThis());
2252:       assertFalse(node1.isHook());
2253:       assertFalse(node1.isBlock());
2254:       assertFalse(node1.isCase());
2255:       assertFalse(node1.hasOneChild());
2256:       assertFalse(node1.isTry());
2257:       assertFalse(node1.isDefaultCase());
2258:       assertFalse(node1.isTrue());
2259:       assertFalse(node1.isDebugger());
2260:       assertFalse(node1.isFunction());
2261:       assertFalse(node1.isRegExp());
2262:       assertEquals(0, node1.getChildCount());
2263:       assertFalse(node1.isCatch());
2264:       assertFalse(node1.isParamList());
2265:       assertFalse(node1.isArrayLit());
2266:       assertFalse(node1.isVoid());
2267:       assertFalse(node1.isDelProp());
2268:       assertFalse(node1.isIf());
2269:       assertFalse(node1.isNull());
2270:       assertFalse(node1.isNE());
2271:       assertFalse(node1.isEmpty());
2272:       assertFalse(node1.isIn());
2273:       assertFalse(node1.isAdd());
2274:       assertFalse(node1.isVar());
2275:       assertFalse(node1.isSetterDef());
2276:       assertFalse(node1.isNew());
2277:       assertFalse(node1.isString());
2278:       assertFalse(node1.isWhile());
2279:       assertFalse(node1.isContinue());
2280:       assertFalse(node1.isCall());
2281:       assertFalse(node1.isName());
2282:       assertFalse(node1.isBreak());
2283:       assertFalse(node1.hasChildren());
2284:       assertFalse(node1.isGetElem());
2285:       assertEquals((-1), node1.getSourcePosition());
2286:       assertFalse(node1.isTypeOf());
2287:       assertFalse(node1.isComma());
2288:       assertFalse(node1.isDec());
2289:       assertFalse(node1.isAssign());
2290:       assertFalse(node1.isReturn());
2291:       assertFalse(node1.isGetProp());
2292:       assertFalse(node2.isScript());
2293:       assertFalse(node2.isExprResult());
2294:       assertFalse(node2.isNot());
2295:       assertFalse(node2.isWith());
2296:       assertFalse(node2.isCast());
2297:       assertFalse(node2.isAnd());
2298:       assertFalse(node2.isInstanceOf());
2299:       assertFalse(node2.isLabelName());
2300:       assertFalse(node2.isGetElem());
2301:       assertEquals(2, node2.getChildCount());
2302:       assertFalse(node2.isOr());
2303:       assertFalse(node2.isLabel());
2304:       assertFalse(node2.isFalse());
2305:       assertFalse(node2.isThrow());
2306:       assertFalse(node2.isAssignAdd());
2307:       assertFalse(node2.isDo());
2308:       assertFalse(node2.isString());
2309:       assertFalse(node2.isWhile());
2310:       assertFalse(node2.isCall());
2311:       assertFalse(node2.isContinue());
2312:       assertFalse(node2.isName());
2313:       assertTrue(node2.hasMoreThanOneChild());
2314:       assertFalse(node2.isBreak());
2315:       assertFalse(node2.isTypeOf());
2316:       assertFalse(node2.isAssign());
2317:       assertFalse(node2.isReturn());
2318:       assertEquals((-1), node2.getSourcePosition());
2319:       assertFalse(node2.isComma());
2320:       assertFalse(node2.isDec());
2321:       assertFalse(node2.isObjectLit());
2322:       assertFalse(node2.isGetProp());
2323:       assertTrue(node2.isNumber());
2324:       assertFalse(node2.isRegExp());
2325:       assertFalse(node2.isTrue());
2326:       assertFalse(node2.isFunction());
2327:       assertFalse(node2.isDefaultCase());
2328:       assertFalse(node2.isDebugger());
2329:       assertFalse(node2.isCatch());
2330:       assertFalse(node2.isDelProp());
2331:       assertFalse(node2.isVoid());
2332:       assertFalse(node2.isArrayLit());
2333:       assertFalse(node2.isNE());
2334:       assertFalse(node2.isSetterDef());
2335:       assertFalse(node2.isNull());
2336:       assertFalse(node2.isIf());
2337:       assertFalse(node2.isVar());
2338:       assertFalse(node2.isIn());
2339:       assertFalse(node2.isEmpty());
2340:       assertFalse(node2.isAdd());
2341:       assertFalse(node2.isNew());
2342:       assertFalse(node2.isSwitch());
2343:       assertFalse(node2.isInc());
2344:       assertEquals(39, node2.getType());
2345:       assertFalse(node2.isBlock());
2346:       assertEquals((-1), node2.getCharno());
2347:       assertFalse(node2.isStringKey());
2348:       assertTrue(node2.hasChildren());
2349:       assertEquals((-1), node2.getLineno());
2350:       assertFalse(node2.isThis());
2351:       assertFalse(node2.isParamList());
2352:       assertFalse(node2.isFor());
2353:       assertFalse(node2.isGetterDef());
2354:       assertFalse(node2.isHook());
2355:       assertFalse(node2.isTry());
2356:       assertFalse(node2.hasOneChild());
2357:       assertFalse(node2.isCase());
2358:       assertFalse(boolean3);
2359:       assertEquals(12, Node.COLUMN_BITS);
2360:       assertEquals(46, Node.IS_NAMESPACE);
2361:       assertEquals(57, Node.LAST_PROP);
2362:       assertEquals(1, Node.DECR_FLAG);
2363:       assertEquals(49, Node.DIRECT_EVAL);
2364:       assertEquals(32, Node.INCRDECR_PROP);
2365:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2366:       assertEquals(56, Node.CHANGE_TIME);
2367:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2368:       assertEquals(54, Node.SLASH_V);
2369:       assertEquals(52, Node.LENGTH);
2370:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2371:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2372:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2373:       assertEquals(57, Node.REFLECTED_OBJECT);
2374:       assertEquals(37, Node.OPT_ARG_NAME);
2375:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2376:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2377:       assertEquals(55, Node.INFERRED_FUNCTION);
2378:       assertEquals(4095, Node.COLUMN_MASK);
2379:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2380:       assertEquals(48, Node.DIRECTIVES);
2381:       assertEquals(8, Node.FLAG_NO_THROWS);
2382:       assertEquals(39, Node.EMPTY_BLOCK);
2383:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2384:       assertEquals(36, Node.QUOTED_PROP);
2385:       assertEquals(43, Node.IS_CONSTANT_NAME);
2386:       assertEquals(53, Node.INPUT_ID);
2387:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2388:       assertEquals(50, Node.FREE_CALL);
2389:       assertEquals(40, Node.ORIGINALNAME_PROP);
2390:       assertEquals(29, Node.JSDOC_INFO_PROP);
2391:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2392:       assertEquals(47, Node.IS_DISPATCHER);
2393:       assertEquals(30, Node.VAR_ARGS_NAME);
2394:       assertEquals(2, Node.POST_FLAG);
2395:       assertEquals(2, Node.POST_FLAG);
2396:       assertEquals(56, Node.CHANGE_TIME);
2397:       assertEquals(46, Node.IS_NAMESPACE);
2398:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2399:       assertEquals(47, Node.IS_DISPATCHER);
2400:       assertEquals(12, Node.COLUMN_BITS);
2401:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2402:       assertEquals(29, Node.JSDOC_INFO_PROP);
2403:       assertEquals(32, Node.INCRDECR_PROP);
2404:       assertEquals(53, Node.INPUT_ID);
2405:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2406:       assertEquals(1, Node.DECR_FLAG);
2407:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2408:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2409:       assertEquals(52, Node.LENGTH);
2410:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2411:       assertEquals(57, Node.REFLECTED_OBJECT);
2412:       assertEquals(36, Node.QUOTED_PROP);
2413:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2414:       assertEquals(4095, Node.COLUMN_MASK);
2415:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2416:       assertEquals(49, Node.DIRECT_EVAL);
2417:       assertEquals(48, Node.DIRECTIVES);
2418:       assertEquals(37, Node.OPT_ARG_NAME);
2419:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2420:       assertEquals(8, Node.FLAG_NO_THROWS);
2421:       assertEquals(39, Node.EMPTY_BLOCK);
2422:       assertEquals(50, Node.FREE_CALL);
2423:       assertEquals(55, Node.INFERRED_FUNCTION);
2424:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2425:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2426:       assertEquals(54, Node.SLASH_V);
2427:       assertEquals(43, Node.IS_CONSTANT_NAME);
2428:       assertEquals(57, Node.LAST_PROP);
2429:       assertEquals(30, Node.VAR_ARGS_NAME);
2430:       assertEquals(40, Node.ORIGINALNAME_PROP);
2431:       assertEquals(32, Node.INCRDECR_PROP);
2432:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2433:       assertEquals(12, Node.COLUMN_BITS);
2434:       assertEquals(2, Node.POST_FLAG);
2435:       assertEquals(56, Node.CHANGE_TIME);
2436:       assertEquals(46, Node.IS_NAMESPACE);
2437:       assertEquals(47, Node.IS_DISPATCHER);
2438:       assertEquals(29, Node.JSDOC_INFO_PROP);
2439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2440:       assertEquals(1, Node.DECR_FLAG);
2441:       assertEquals(57, Node.LAST_PROP);
2442:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2443:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2444:       assertEquals(53, Node.INPUT_ID);
2445:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2446:       assertEquals(52, Node.LENGTH);
2447:       assertEquals(36, Node.QUOTED_PROP);
2448:       assertEquals(57, Node.REFLECTED_OBJECT);
2449:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2450:       assertEquals(49, Node.DIRECT_EVAL);
2451:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2452:       assertEquals(4095, Node.COLUMN_MASK);
2453:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2454:       assertEquals(37, Node.OPT_ARG_NAME);
2455:       assertEquals(48, Node.DIRECTIVES);
2456:       assertEquals(8, Node.FLAG_NO_THROWS);
2457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2458:       assertEquals(50, Node.FREE_CALL);
2459:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2460:       assertEquals(55, Node.INFERRED_FUNCTION);
2461:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2462:       assertEquals(39, Node.EMPTY_BLOCK);
2463:       assertEquals(54, Node.SLASH_V);
2464:       assertEquals(43, Node.IS_CONSTANT_NAME);
2465:       assertEquals(30, Node.VAR_ARGS_NAME);
2466:       assertEquals(40, Node.ORIGINALNAME_PROP);
2467:   }
2468: }
RegularFileObject[/tmp/EvoSuite_216_1628161401040/com/google/javascript/rhino/Node_216_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 11:03:21 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_216_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_216_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.common.collect.Iterators$12",
111:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
112:       "com.google.common.collect.Iterators$11",
113:       "com.google.javascript.rhino.jstype.JSType$1",
114:       "com.google.common.collect.EmptyImmutableBiMap",
115:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
116:       "com.google.common.base.Predicate",
117:       "com.google.javascript.rhino.jstype.JSType$2",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_216_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.Token",
259:       "com.google.common.base.Objects",
260:       "com.google.common.base.Preconditions",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.TemplatizedType",
333:       "com.google.javascript.rhino.jstype.NamedType",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
338:       "com.google.common.collect.Sets",
339:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
340:       "com.google.javascript.rhino.InputId",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.JSType$TypePair",
346:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
347:       "com.google.javascript.rhino.JSTypeExpression",
348:       "com.google.common.collect.Iterators$12",
349:       "com.google.common.collect.ImmutableSet",
350:       "com.google.common.collect.EmptyImmutableSet",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.common.collect.ImmutableList$1",
358:       "com.google.common.collect.Sets$ImprovedAbstractSet",
359:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
360:       "com.google.common.collect.Hashing",
361:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
362:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
363:       "com.google.javascript.rhino.jstype.TernaryValue",
364:       "com.google.javascript.rhino.jstype.JSType$2",
365:       "com.google.common.collect.Platform",
366:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
367:     );
368:   }
369: }

[MASTER] 11:03:21.797 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertNotNull(node0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

Object object0 = node0.getProp(0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertNull(object0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

Node node1 = Node.newString(46, "UNKNOWN");
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(46, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInc());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertNotNull(node1);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean0 = node0.isNull();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(boolean0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

node0.setLineno(39);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

int int0 = node0.getIndexOfChild(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertEquals((-1), int0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

boolean boolean1 = node1.isIn();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(46, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInc());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(boolean1);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(46, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInc());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertNotNull(node_NodeMismatch0);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node2 = new Node(39, node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(46, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInc());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.isName());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isCatch());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isIf());
assertFalse(node2.isVar());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isHook());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertNotNull(node2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node3 = new Node(30, (-2079), 2);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isGetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isVar());
assertFalse(node3.isOr());
assertFalse(node3.isReturn());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertFalse(node3.isGetElem());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isName());
assertEquals(30, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isCast());
assertFalse(node3.isScript());
assertFalse(node3.isWith());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isGetProp());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isContinue());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isFalse());
assertFalse(node3.isCase());
assertFalse(node3.isThrow());
assertTrue(node3.isNew());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThis());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertNotNull(node3);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

Node node4 = node3.copyInformationFrom(node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertNotSame(node2, node3);
assertNotSame(node2, node4);
assertSame(node3, node4);
assertNotSame(node3, node2);
assertSame(node4, node3);
assertNotSame(node4, node2);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(46, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInc());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.isName());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isCatch());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isIf());
assertFalse(node2.isVar());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isHook());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isRegExp());
assertFalse(node3.isFunction());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isDefaultCase());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isGetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isParamList());
assertFalse(node3.isSwitch());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isVar());
assertFalse(node3.isOr());
assertFalse(node3.isReturn());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBreak());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertFalse(node3.isGetElem());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isName());
assertEquals(30, node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isCast());
assertFalse(node3.isScript());
assertFalse(node3.isWith());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.hasOneChild());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isGetProp());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isObjectLit());
assertFalse(node3.isContinue());
assertFalse(node3.isNumber());
assertFalse(node3.isLabelName());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isInc());
assertFalse(node3.isFalse());
assertFalse(node3.isCase());
assertFalse(node3.isThrow());
assertTrue(node3.isNew());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThis());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isIn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isScript());
assertFalse(node4.isWith());
assertFalse(node4.isExprResult());
assertEquals(30, node4.getType());
assertFalse(node4.isAnd());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertTrue(node4.isNew());
assertFalse(node4.isLabelName());
assertFalse(node4.isCast());
assertFalse(node4.isInc());
assertFalse(node4.isLabel());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertFalse(node4.isContinue());
assertFalse(node4.isString());
assertFalse(node4.isOr());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isCall());
assertFalse(node4.isName());
assertFalse(node4.isAssign());
assertFalse(node4.isBreak());
assertFalse(node4.isDec());
assertFalse(node4.isTypeOf());
assertFalse(node4.isGetProp());
assertFalse(node4.isReturn());
assertFalse(node4.isComma());
assertFalse(node4.hasChildren());
assertFalse(node4.isWhile());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isRegExp());
assertFalse(node4.isCatch());
assertFalse(node4.isTrue());
assertFalse(node4.isVoid());
assertFalse(node4.isDebugger());
assertFalse(node4.isNull());
assertFalse(node4.isParamList());
assertFalse(node4.isEmpty());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFunction());
assertFalse(node4.isAdd());
assertFalse(node4.isSetterDef());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVar());
assertFalse(node4.isCase());
assertFalse(node4.isIn());
assertFalse(node4.hasMoreThanOneChild());
assertEquals((-1), node4.getLineno());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isSwitch());
assertFalse(node4.isStringKey());
assertFalse(node4.isFor());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isBlock());
assertFalse(node4.isTry());
assertFalse(node4.isThis());
assertFalse(node4.hasOneChild());
assertFalse(node4.isHook());
assertNotNull(node4);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);

boolean boolean2 = node0.isFalse();
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(boolean2);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

boolean boolean3 = node2.isName();
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node4));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertNotSame(node2, node3);
assertNotSame(node2, node4);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWith());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals(0, node0.getCharno());
assertFalse(node0.isThrow());
assertFalse(node0.isName());
assertEquals(159744, node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals(39, node0.getLineno());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isCast());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isLabelName());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals(46, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isInc());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.isName());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isBreak());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDebugger());
assertFalse(node2.isCatch());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isIf());
assertFalse(node2.isVar());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertEquals(39, node2.getType());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isHook());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCase());
assertFalse(boolean3);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);


[MASTER] 11:03:38.389 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:38.756 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:38.975 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:39.196 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:39.419 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:39.640 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:39.821 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:40.089 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:40.411 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:40.791 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:41.011 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:41.198 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:41.478 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:41.734 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:41.917 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:03:42.090 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/26
* Done!

* Computation finished
