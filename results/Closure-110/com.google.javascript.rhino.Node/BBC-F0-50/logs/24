* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 19927
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1333834736
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:44:32.663 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:44:34.400 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:44:34.845 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 10:44:34.846 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 10:44:34.915 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 10:44:35.971 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V
[MASTER] 10:44:36.077 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false
[MASTER] 10:44:36.119 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 622
[MASTER] 10:44:43.866 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:54:02.787 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 1883
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 623
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 623
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 47141
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 623
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 2040
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 623
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 623
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 435
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 10214
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 127
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 213
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 305
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 3253
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 503
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 4049
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 192
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 2927
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 192
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 623
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 192
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 623
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 366
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 192
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 406
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 212
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 9639
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 192
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 19
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 37438
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 94
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 500
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 27174
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 92
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 1666
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 127
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 500
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 929
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 588: 127
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 127
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 1180
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 17985
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 592: 127
Number of times BBC is called for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 127
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 3396
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - false: 10
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 2347
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 514
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 35399
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 2204
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 2235
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 500
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 1781
Number of times BBC is called for com.google.javascript.rhino.Node.mergeLineCharNo(II)I: I15 Branch 141 IFEQ L1197 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 416
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 213
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1321
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 1716
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 248
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 204
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2195: 127
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 54
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 127
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 2707
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2197: 127
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 273
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2196: 127
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 2927
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 2249
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 1454
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 297
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 3290
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 127
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 24986
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 12299
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 6899
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 297
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 1553
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 213
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 120642
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 133
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 5149
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 297
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2198: 127
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 5204
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 1130
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 3622
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 4848
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 213
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 213
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 3200
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 127
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 8952
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 34008
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - true: 912
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 8706
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 297
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 297
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 242
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 213
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - false: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 28095
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 2110
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 2110
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 2110
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: Line 162: 213
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 3310
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 1716
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 7626
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 17521
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 902
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 3310
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 71752
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 1267
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 10783
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 36382
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 30635
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 23
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 18734
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 120642
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 120642
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 390
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 120642
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 3700
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 2867
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 319
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 2823
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 1026
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 14295
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 4562
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 623
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 5
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 297
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 463
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 15069
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 3194
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 1407
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 6159
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 2040
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 127
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 1347
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 3439
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 127
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 2388
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 1529
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 54
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 161
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 8791
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 88213
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 94
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 71752
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 4665
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 297
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 120642
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 624
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 13308
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 61
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 1407
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 120642
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 3994
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 10
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 149
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 127
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 297
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 297
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 46
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 2682
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 46
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 24512
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 1267
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 3936
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 46
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 17521
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 39074
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: Line 1144: 127
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 1130
Number of times BBC is called for com.google.javascript.rhino.Node.isVarArgs()Z: root-Branch: 127
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 11670
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 23281
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 3312
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 5728
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 16509
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 2537
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 71752
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 3310
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 3310
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 71752
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 297
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 17370
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 127
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 394
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 88213
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 1407
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 120642
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 71752
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 1143
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 32136
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 18
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 2718
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - false: 10
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 28347
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - false: 297
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 2367
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - false: 6
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 2367
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 1143
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 1267
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 297
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 1468
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 2683
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 4371
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 297
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 119
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 60102
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 337
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 743
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 1553
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 779
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 127
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 17898
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 1716
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 1130
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 10432
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 3365
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 3809
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 1616
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 3809
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: root-Branch: 213
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 1146
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 92
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 120642
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 2355
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 213
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 308
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 3511
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 623
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 297
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 763
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 1315
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 1385
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 669: 297
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 15936
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 297
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 115
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 26
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - false: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 127
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 3050
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - false: 7788
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 120642
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 460: 127
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 461: 127
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 462: 127
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 9072
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 39621
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 6438
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 7292
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 458
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 9072
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 394
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 120642
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 4512
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 2204
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 859
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 2297
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 71
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1791: 503
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - false: 10
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 127
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 503
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 94
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 82
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 297
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 5563
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 297
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 503
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 394
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 355
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 500
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1752: 297
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 47930
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 500
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 40703
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 2367
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1747: 297
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 500
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 500
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 500
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1743: 297
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 127
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 893
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 46
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 1881
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 6183
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 1796
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 4371
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 1796
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 4746
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 1796
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 22427
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 1796
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 23125
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 2998
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 1454
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 2268
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 10677
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 13
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 127
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 22741
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 16306
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 57310
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 22091
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 3809
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 213
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 623
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 730
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 213
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 3703
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1142
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 6368
Number of times BBC is called for com.google.javascript.rhino.Node.putBooleanProp(IZ)V: I5 Branch 109 IFEQ L852 - true: 35
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 71752
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 503
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 1091
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 297
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 46
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 756
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 8443
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 127
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 1934
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 22652
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 2921
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 3097
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 256
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 133
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 1068
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 297
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 2393
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 437: 10
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 297
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 213
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 438: 10
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 435: 10
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 436: 10
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 297
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 503
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 1716
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 3112
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 439: 10
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 991
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 440: 10
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 429: 10
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 470
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 430: 10
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 127
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 427: 10
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 428: 10
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 433: 10
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 434: 10
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 22177
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 431: 10
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: Line 1221: 127
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 432: 10
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 28448
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 503
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 51997
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 991
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 416
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 115
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 127
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 75
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 22661
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 1716
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 8306
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 297
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 999
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 1407
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 120642
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 3220
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 1366
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 3809
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 1633
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 406
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 4328
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 1225
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: root-Branch: 127
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 448
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 1572
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 85
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 566
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 7603
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 425: 10
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 3809
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 11670
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 426: 10
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 424: 10
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 11670
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 161
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 11670
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 1129
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 503
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 11670
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 26179
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 11670
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 11670
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 743
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 1130
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 743
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 19
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 12428
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 12428
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 94
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 25600
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 1366
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 11103
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 4746
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 631
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 1365
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: root-Branch: 213
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 120642
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 2040
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 439
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 2040
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 2873
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: root-Branch: 127
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 127
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 306
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 4036
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 9874
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 127
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 297
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 2204
Number of times BBC is called for com.google.javascript.rhino.Node.isVarArgs()Z: Line 1917: 127
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 2040
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 297
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 3081
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 822
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 2367
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 623
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 2543
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 9035
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 223
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 3319
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 5925
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 6346
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 246
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 623
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 2616
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 623
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 623
Number of times BBC is called for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 127
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 2298
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 1366
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 1370
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 46
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 623
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 297
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 3703
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 2040
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - false: 2
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 2466
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 1267
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 999
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 38467
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 192
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 1648
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 2718
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 54
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 2218
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 8004
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 1596
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 761
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 10226
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 127
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false: 10
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 1040
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 1716
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 71597
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 46
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 8792
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 11
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 4996
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 57310
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 2204
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 22240
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 46
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 46
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 46
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 623
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 439
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 15368
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 4096
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 1716
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1459: 912
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 8979
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 202
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 5
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 297
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 297
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 562
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 4040
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 297
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 204
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1446: 127
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 365
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 297
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 63
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 46
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 637
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 26217
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 622: 10
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 6095
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 92
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 213
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 92
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 92
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 92
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 26217
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 444
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 92
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 931
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 8792
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 213
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 3081
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 8792
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 3472
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 8792
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 8792
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 14912
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 8792
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 8792
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 756
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 8792
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 623
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 8792
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 8792
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 48348
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 1883
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 623
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 2204
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 5204
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 121
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 2927
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 16967
Number of times BBC is called for com.google.javascript.rhino.Node.putIntProp(II)V: I8 Branch 110 IFEQ L857 - true: 35
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 16967
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 39377
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 71752
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 39544
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 394
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 503
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 394
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 1267
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 213
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 1267
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 127
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 5068
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 17296
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 503
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 8084
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 2367
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 46
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 503
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 14060
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 120642
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 46
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 9248
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: Line 889: 297
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 18037
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 26912
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 4562
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 847
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 57310
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 2367
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 743
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 2367
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 6321
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 61
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 22174
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 1267
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 127
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 644
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 46
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 750
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 7007
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 623
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 1702
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 387
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 27
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 192
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 9874
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 1407
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 297
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 20830
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 3994
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 15043
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 127
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 213
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 127
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 466: 14
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 3972
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 1796
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 503
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 35843
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 127
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 4131
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 297
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 42270
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 213
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 347
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 467: 14
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 468: 14
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 9248
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 14865
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 939
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 503
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 503
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 8979
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 33615
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 47930
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 8979
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 127
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 127
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 337
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 127
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 127
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 5319
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 120642
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 3401
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 2204
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 26055
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 1718
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 120642
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 127
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 12654
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - true: 256
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 500
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 125
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - false: 297
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 2543
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 46
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: root-Branch: 127
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 46
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 2367
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 1716
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 807
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 3983
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 3659
Number of times BBC is called in total: 5623350
* Search finished after 604s and 729 generations, 303674 statements, best individual has fitness: 2655.0
* Minimizing test suite
[MASTER] 10:55:54.324 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 853
* Number of covered goals: 818
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 636
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 105
* Number of covered goals: 105
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 478
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 4536
* Number of covered goals: 2330
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 601
* Generated 860 tests with total length 12118
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:57:03.563 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6775166666666667% of time used, but only 50/860 tests minimized), falling back to using all assertions
[MASTER] 10:57:23.159 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 10:57:32.797 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 9 seconds more than allowed.
[MASTER] 10:57:43.625 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_101_1628161063223/com/google/javascript/rhino/Node_101_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_101_1628161063223/com/google/javascript/rhino/Node_101_tmp__ESTest_scaffolding.java]]
[MASTER] 10:57:43.625 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:43.625 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:43.628 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1739
[MASTER] 10:57:43.631 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_101_1628161063223/com/google/javascript/rhino/Node_101_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:57:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_101_tmp__ESTest extends Node_101_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = new Node(17);
24:       assertFalse(node0.isNE());
25:       assertFalse(node0.isIn());
26:       assertFalse(node0.isGetterDef());
27:       assertFalse(node0.isArrayLit());
28:       assertFalse(node0.isSwitch());
29:       assertFalse(node0.isIf());
30:       assertFalse(node0.isDelProp());
31:       assertFalse(node0.isInc());
32:       assertFalse(node0.isTrue());
33:       assertFalse(node0.isFunction());
34:       assertFalse(node0.isEmpty());
35:       assertFalse(node0.isThrow());
36:       assertFalse(node0.isDefaultCase());
37:       assertFalse(node0.isParamList());
38:       assertFalse(node0.isInstanceOf());
39:       assertFalse(node0.isThis());
40:       assertEquals(0, node0.getChildCount());
41:       assertFalse(node0.isWith());
42:       assertFalse(node0.isCatch());
43:       assertFalse(node0.isStringKey());
44:       assertFalse(node0.isBlock());
45:       assertFalse(node0.isTry());
46:       assertFalse(node0.isRegExp());
47:       assertFalse(node0.isHook());
48:       assertEquals((-1), node0.getCharno());
49:       assertFalse(node0.isCase());
50:       assertFalse(node0.isFor());
51:       assertFalse(node0.isScript());
52:       assertFalse(node0.hasOneChild());
53:       assertFalse(node0.isLabel());
54:       assertFalse(node0.isReturn());
55:       assertFalse(node0.isAssignAdd());
56:       assertEquals((-1), node0.getSourcePosition());
57:       assertFalse(node0.isTypeOf());
58:       assertFalse(node0.isNumber());
59:       assertFalse(node0.hasMoreThanOneChild());
60:       assertFalse(node0.hasChildren());
61:       assertFalse(node0.isDec());
62:       assertFalse(node0.isAssign());
63:       assertFalse(node0.isOr());
64:       assertFalse(node0.isGetElem());
65:       assertFalse(node0.isContinue());
66:       assertFalse(node0.isCast());
67:       assertFalse(node0.isLabelName());
68:       assertEquals((-1), node0.getLineno());
69:       assertFalse(node0.isNew());
70:       assertFalse(node0.isAdd());
71:       assertFalse(node0.isVar());
72:       assertFalse(node0.isSetterDef());
73:       assertFalse(node0.isDo());
74:       assertFalse(node0.isGetProp());
75:       assertEquals(17, node0.getType());
76:       assertFalse(node0.isNull());
77:       assertFalse(node0.isObjectLit());
78:       assertFalse(node0.isComma());
79:       assertFalse(node0.isName());
80:       assertFalse(node0.isFalse());
81:       assertFalse(node0.isAnd());
82:       assertFalse(node0.isCall());
83:       assertFalse(node0.isBreak());
84:       assertFalse(node0.isVoid());
85:       assertFalse(node0.isExprResult());
86:       assertFalse(node0.isDebugger());
87:       assertFalse(node0.isNot());
88:       assertFalse(node0.isString());
89:       assertFalse(node0.isWhile());
90:       assertNotNull(node0);
91:       assertEquals(4095, Node.COLUMN_MASK);
92:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
93:       assertEquals(55, Node.INFERRED_FUNCTION);
94:       assertEquals(43, Node.IS_CONSTANT_NAME);
95:       assertEquals(36, Node.QUOTED_PROP);
96:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
97:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
98:       assertEquals(48, Node.DIRECTIVES);
99:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
100:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
101:       assertEquals(50, Node.FREE_CALL);
102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(1, Node.DECR_FLAG);
106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
107:       assertEquals(12, Node.COLUMN_BITS);
108:       assertEquals(46, Node.IS_NAMESPACE);
109:       assertEquals(2, Node.POST_FLAG);
110:       assertEquals(30, Node.VAR_ARGS_NAME);
111:       assertEquals(54, Node.SLASH_V);
112:       assertEquals(56, Node.CHANGE_TIME);
113:       assertEquals(49, Node.DIRECT_EVAL);
114:       assertEquals(37, Node.OPT_ARG_NAME);
115:       assertEquals(57, Node.REFLECTED_OBJECT);
116:       assertEquals(40, Node.ORIGINALNAME_PROP);
117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
118:       assertEquals(52, Node.LENGTH);
119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
120:       assertEquals(8, Node.FLAG_NO_THROWS);
121:       assertEquals(39, Node.EMPTY_BLOCK);
122:       assertEquals(57, Node.LAST_PROP);
123:       assertEquals(47, Node.IS_DISPATCHER);
124:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
125:       assertEquals(29, Node.JSDOC_INFO_PROP);
126:       assertEquals(53, Node.INPUT_ID);
127:       
128:       boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
129:       assertFalse(boolean0);
130:       
131:       Node node1 = Node.newNumber((double) 38, 29, 17);
132:       assertFalse(node1.isGetterDef());
133:       assertFalse(node1.isDelProp());
134:       assertFalse(node1.isIf());
135:       assertFalse(node1.isNE());
136:       assertFalse(node1.isFor());
137:       assertFalse(node1.isArrayLit());
138:       assertFalse(node1.isInc());
139:       assertFalse(node1.isFunction());
140:       assertFalse(node1.isTrue());
141:       assertFalse(node1.isVoid());
142:       assertFalse(node1.isDefaultCase());
143:       assertFalse(node1.isIn());
144:       assertFalse(node1.isEmpty());
145:       assertFalse(node1.isComma());
146:       assertFalse(node1.isSetterDef());
147:       assertFalse(node1.isGetProp());
148:       assertFalse(node1.isNull());
149:       assertFalse(node1.isThrow());
150:       assertFalse(node1.isCall());
151:       assertFalse(node1.isAnd());
152:       assertFalse(node1.isFalse());
153:       assertEquals(29, node1.getLineno());
154:       assertFalse(node1.isName());
155:       assertFalse(node1.isBreak());
156:       assertFalse(node1.isDebugger());
157:       assertFalse(node1.isWhile());
158:       assertFalse(node1.isObjectLit());
159:       assertFalse(node1.isNot());
160:       assertFalse(node1.isString());
161:       assertTrue(node1.isNumber());
162:       assertFalse(node1.isTypeOf());
163:       assertFalse(node1.isDec());
164:       assertFalse(node1.isOr());
165:       assertFalse(node1.isReturn());
166:       assertFalse(node1.isLabel());
167:       assertFalse(node1.isAssignAdd());
168:       assertFalse(node1.hasChildren());
169:       assertEquals(17, node1.getCharno());
170:       assertFalse(node1.isContinue());
171:       assertFalse(node1.hasMoreThanOneChild());
172:       assertFalse(node1.isLabelName());
173:       assertFalse(node1.isAssign());
174:       assertFalse(node1.isGetElem());
175:       assertFalse(node1.isCast());
176:       assertFalse(node1.isExprResult());
177:       assertFalse(node1.isNew());
178:       assertFalse(node1.isVar());
179:       assertFalse(node1.isDo());
180:       assertEquals(118801, node1.getSourcePosition());
181:       assertFalse(node1.isAdd());
182:       assertFalse(node1.isThis());
183:       assertFalse(node1.isParamList());
184:       assertFalse(node1.isStringKey());
185:       assertFalse(node1.isCatch());
186:       assertEquals(0, node1.getChildCount());
187:       assertFalse(node1.isWith());
188:       assertFalse(node1.isInstanceOf());
189:       assertFalse(node1.isSwitch());
190:       assertFalse(node1.isRegExp());
191:       assertFalse(node1.isTry());
192:       assertEquals(39, node1.getType());
193:       assertFalse(node1.isHook());
194:       assertFalse(node1.isBlock());
195:       assertFalse(node1.hasOneChild());
196:       assertFalse(node1.isCase());
197:       assertFalse(node1.isScript());
198:       assertFalse(node1.equals((Object)node0));
199:       assertNotNull(node1);
200:       assertEquals(48, Node.DIRECTIVES);
201:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
202:       assertEquals(40, Node.ORIGINALNAME_PROP);
203:       assertEquals(4095, Node.COLUMN_MASK);
204:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
205:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
206:       assertEquals(43, Node.IS_CONSTANT_NAME);
207:       assertEquals(54, Node.SLASH_V);
208:       assertEquals(1, Node.DECR_FLAG);
209:       assertEquals(50, Node.FREE_CALL);
210:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
211:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
212:       assertEquals(51, Node.STATIC_SOURCE_FILE);
213:       assertEquals(32, Node.INCRDECR_PROP);
214:       assertEquals(56, Node.CHANGE_TIME);
215:       assertEquals(12, Node.COLUMN_BITS);
216:       assertEquals(46, Node.IS_NAMESPACE);
217:       assertEquals(47, Node.IS_DISPATCHER);
218:       assertEquals(2, Node.POST_FLAG);
219:       assertEquals(30, Node.VAR_ARGS_NAME);
220:       assertEquals(49, Node.DIRECT_EVAL);
221:       assertEquals(37, Node.OPT_ARG_NAME);
222:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
223:       assertEquals(52, Node.LENGTH);
224:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
225:       assertEquals(57, Node.REFLECTED_OBJECT);
226:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
227:       assertEquals(15, Node.NO_SIDE_EFFECTS);
228:       assertEquals(57, Node.LAST_PROP);
229:       assertEquals(36, Node.QUOTED_PROP);
230:       assertEquals(8, Node.FLAG_NO_THROWS);
231:       assertEquals(39, Node.EMPTY_BLOCK);
232:       assertEquals(53, Node.INPUT_ID);
233:       assertEquals(55, Node.INFERRED_FUNCTION);
234:       assertEquals(29, Node.JSDOC_INFO_PROP);
235:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
236:       
237:       boolean boolean1 = node1.isNoSideEffectsCall();
238:       assertFalse(node1.isGetterDef());
239:       assertFalse(node1.isDelProp());
240:       assertFalse(node1.isIf());
241:       assertFalse(node1.isNE());
242:       assertFalse(node1.isFor());
243:       assertFalse(node1.isArrayLit());
244:       assertFalse(node1.isInc());
245:       assertFalse(node1.isFunction());
246:       assertFalse(node1.isTrue());
247:       assertFalse(node1.isVoid());
248:       assertFalse(node1.isDefaultCase());
249:       assertFalse(node1.isIn());
250:       assertFalse(node1.isEmpty());
251:       assertFalse(node1.isComma());
252:       assertFalse(node1.isSetterDef());
253:       assertFalse(node1.isGetProp());
254:       assertFalse(node1.isNull());
255:       assertFalse(node1.isThrow());
256:       assertFalse(node1.isCall());
257:       assertFalse(node1.isAnd());
258:       assertFalse(node1.isFalse());
259:       assertEquals(29, node1.getLineno());
260:       assertFalse(node1.isName());
261:       assertFalse(node1.isBreak());
262:       assertFalse(node1.isDebugger());
263:       assertFalse(node1.isWhile());
264:       assertFalse(node1.isObjectLit());
265:       assertFalse(node1.isNot());
266:       assertFalse(node1.isString());
267:       assertTrue(node1.isNumber());
268:       assertFalse(node1.isTypeOf());
269:       assertFalse(node1.isDec());
270:       assertFalse(node1.isOr());
271:       assertFalse(node1.isReturn());
272:       assertFalse(node1.isLabel());
273:       assertFalse(node1.isAssignAdd());
274:       assertFalse(node1.hasChildren());
275:       assertEquals(17, node1.getCharno());
276:       assertFalse(node1.isContinue());
277:       assertFalse(node1.hasMoreThanOneChild());
278:       assertFalse(node1.isLabelName());
279:       assertFalse(node1.isAssign());
280:       assertFalse(node1.isGetElem());
281:       assertFalse(node1.isCast());
282:       assertFalse(node1.isExprResult());
283:       assertFalse(node1.isNew());
284:       assertFalse(node1.isVar());
285:       assertFalse(node1.isDo());
286:       assertEquals(118801, node1.getSourcePosition());
287:       assertFalse(node1.isAdd());
288:       assertFalse(node1.isThis());
289:       assertFalse(node1.isParamList());
290:       assertFalse(node1.isStringKey());
291:       assertFalse(node1.isCatch());
292:       assertEquals(0, node1.getChildCount());
293:       assertFalse(node1.isWith());
294:       assertFalse(node1.isInstanceOf());
295:       assertFalse(node1.isSwitch());
296:       assertFalse(node1.isRegExp());
297:       assertFalse(node1.isTry());
298:       assertEquals(39, node1.getType());
299:       assertFalse(node1.isHook());
300:       assertFalse(node1.isBlock());
301:       assertFalse(node1.hasOneChild());
302:       assertFalse(node1.isCase());
303:       assertFalse(node1.isScript());
304:       assertFalse(boolean1);
305:       assertFalse(node1.equals((Object)node0));
306:       assertTrue(boolean1 == boolean0);
307:       assertEquals(48, Node.DIRECTIVES);
308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
309:       assertEquals(40, Node.ORIGINALNAME_PROP);
310:       assertEquals(4095, Node.COLUMN_MASK);
311:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
312:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
313:       assertEquals(43, Node.IS_CONSTANT_NAME);
314:       assertEquals(54, Node.SLASH_V);
315:       assertEquals(1, Node.DECR_FLAG);
316:       assertEquals(50, Node.FREE_CALL);
317:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
318:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
319:       assertEquals(51, Node.STATIC_SOURCE_FILE);
320:       assertEquals(32, Node.INCRDECR_PROP);
321:       assertEquals(56, Node.CHANGE_TIME);
322:       assertEquals(12, Node.COLUMN_BITS);
323:       assertEquals(46, Node.IS_NAMESPACE);
324:       assertEquals(47, Node.IS_DISPATCHER);
325:       assertEquals(2, Node.POST_FLAG);
326:       assertEquals(30, Node.VAR_ARGS_NAME);
327:       assertEquals(49, Node.DIRECT_EVAL);
328:       assertEquals(37, Node.OPT_ARG_NAME);
329:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
330:       assertEquals(52, Node.LENGTH);
331:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
332:       assertEquals(57, Node.REFLECTED_OBJECT);
333:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
334:       assertEquals(15, Node.NO_SIDE_EFFECTS);
335:       assertEquals(57, Node.LAST_PROP);
336:       assertEquals(36, Node.QUOTED_PROP);
337:       assertEquals(8, Node.FLAG_NO_THROWS);
338:       assertEquals(39, Node.EMPTY_BLOCK);
339:       assertEquals(53, Node.INPUT_ID);
340:       assertEquals(55, Node.INFERRED_FUNCTION);
341:       assertEquals(29, Node.JSDOC_INFO_PROP);
342:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
343:       
344:       node0.addSuppression("k^");
345:       assertFalse(node0.isNE());
346:       assertFalse(node0.isIn());
347:       assertFalse(node0.isGetterDef());
348:       assertFalse(node0.isArrayLit());
349:       assertFalse(node0.isSwitch());
350:       assertFalse(node0.isIf());
351:       assertFalse(node0.isDelProp());
352:       assertFalse(node0.isInc());
353:       assertFalse(node0.isTrue());
354:       assertFalse(node0.isFunction());
355:       assertFalse(node0.isEmpty());
356:       assertFalse(node0.isThrow());
357:       assertFalse(node0.isDefaultCase());
358:       assertFalse(node0.isParamList());
359:       assertFalse(node0.isInstanceOf());
360:       assertFalse(node0.isThis());
361:       assertEquals(0, node0.getChildCount());
362:       assertFalse(node0.isWith());
363:       assertFalse(node0.isCatch());
364:       assertFalse(node0.isStringKey());
365:       assertFalse(node0.isBlock());
366:       assertFalse(node0.isTry());
367:       assertFalse(node0.isRegExp());
368:       assertFalse(node0.isHook());
369:       assertEquals((-1), node0.getCharno());
370:       assertFalse(node0.isCase());
371:       assertFalse(node0.isFor());
372:       assertFalse(node0.isScript());
373:       assertFalse(node0.hasOneChild());
374:       assertFalse(node0.isLabel());
375:       assertFalse(node0.isReturn());
376:       assertFalse(node0.isAssignAdd());
377:       assertEquals((-1), node0.getSourcePosition());
378:       assertFalse(node0.isTypeOf());
379:       assertFalse(node0.isNumber());
380:       assertFalse(node0.hasMoreThanOneChild());
381:       assertFalse(node0.hasChildren());
382:       assertFalse(node0.isDec());
383:       assertFalse(node0.isAssign());
384:       assertFalse(node0.isOr());
385:       assertFalse(node0.isGetElem());
386:       assertFalse(node0.isContinue());
387:       assertFalse(node0.isCast());
388:       assertFalse(node0.isLabelName());
389:       assertEquals((-1), node0.getLineno());
390:       assertFalse(node0.isNew());
391:       assertFalse(node0.isAdd());
392:       assertFalse(node0.isVar());
393:       assertFalse(node0.isSetterDef());
394:       assertFalse(node0.isDo());
395:       assertFalse(node0.isGetProp());
396:       assertEquals(17, node0.getType());
397:       assertFalse(node0.isNull());
398:       assertFalse(node0.isObjectLit());
399:       assertFalse(node0.isComma());
400:       assertFalse(node0.isName());
401:       assertFalse(node0.isFalse());
402:       assertFalse(node0.isAnd());
403:       assertFalse(node0.isCall());
404:       assertFalse(node0.isBreak());
405:       assertFalse(node0.isVoid());
406:       assertFalse(node0.isExprResult());
407:       assertFalse(node0.isDebugger());
408:       assertFalse(node0.isNot());
409:       assertFalse(node0.isString());
410:       assertFalse(node0.isWhile());
411:       assertFalse(node0.equals((Object)node1));
412:       assertEquals(4095, Node.COLUMN_MASK);
413:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
414:       assertEquals(55, Node.INFERRED_FUNCTION);
415:       assertEquals(43, Node.IS_CONSTANT_NAME);
416:       assertEquals(36, Node.QUOTED_PROP);
417:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
418:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
419:       assertEquals(48, Node.DIRECTIVES);
420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
421:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
422:       assertEquals(50, Node.FREE_CALL);
423:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
424:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
425:       assertEquals(32, Node.INCRDECR_PROP);
426:       assertEquals(1, Node.DECR_FLAG);
427:       assertEquals(51, Node.STATIC_SOURCE_FILE);
428:       assertEquals(12, Node.COLUMN_BITS);
429:       assertEquals(46, Node.IS_NAMESPACE);
430:       assertEquals(2, Node.POST_FLAG);
431:       assertEquals(30, Node.VAR_ARGS_NAME);
432:       assertEquals(54, Node.SLASH_V);
433:       assertEquals(56, Node.CHANGE_TIME);
434:       assertEquals(49, Node.DIRECT_EVAL);
435:       assertEquals(37, Node.OPT_ARG_NAME);
436:       assertEquals(57, Node.REFLECTED_OBJECT);
437:       assertEquals(40, Node.ORIGINALNAME_PROP);
438:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
439:       assertEquals(52, Node.LENGTH);
440:       assertEquals(15, Node.NO_SIDE_EFFECTS);
441:       assertEquals(8, Node.FLAG_NO_THROWS);
442:       assertEquals(39, Node.EMPTY_BLOCK);
443:       assertEquals(57, Node.LAST_PROP);
444:       assertEquals(47, Node.IS_DISPATCHER);
445:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
446:       assertEquals(29, Node.JSDOC_INFO_PROP);
447:       assertEquals(53, Node.INPUT_ID);
448:       
449:       Node node2 = new Node(56, node1, node0, node0, node0, 51, 56);
450:       assertFalse(node0.isNE());
451:       assertFalse(node0.isIn());
452:       assertFalse(node0.isGetterDef());
453:       assertFalse(node0.isArrayLit());
454:       assertFalse(node0.isSwitch());
455:       assertFalse(node0.isIf());
456:       assertFalse(node0.isDelProp());
457:       assertFalse(node0.isInc());
458:       assertFalse(node0.isTrue());
459:       assertFalse(node0.isFunction());
460:       assertFalse(node0.isEmpty());
461:       assertFalse(node0.isThrow());
462:       assertFalse(node0.isDefaultCase());
463:       assertFalse(node0.isParamList());
464:       assertFalse(node0.isInstanceOf());
465:       assertFalse(node0.isThis());
466:       assertEquals(0, node0.getChildCount());
467:       assertFalse(node0.isWith());
468:       assertFalse(node0.isCatch());
469:       assertFalse(node0.isStringKey());
470:       assertFalse(node0.isBlock());
471:       assertFalse(node0.isTry());
472:       assertFalse(node0.isRegExp());
473:       assertFalse(node0.isHook());
474:       assertEquals((-1), node0.getCharno());
475:       assertFalse(node0.isCase());
476:       assertFalse(node0.isFor());
477:       assertFalse(node0.isScript());
478:       assertFalse(node0.hasOneChild());
479:       assertFalse(node0.isLabel());
480:       assertFalse(node0.isReturn());
481:       assertFalse(node0.isAssignAdd());
482:       assertEquals((-1), node0.getSourcePosition());
483:       assertFalse(node0.isTypeOf());
484:       assertFalse(node0.isNumber());
485:       assertFalse(node0.hasMoreThanOneChild());
486:       assertFalse(node0.hasChildren());
487:       assertFalse(node0.isDec());
488:       assertFalse(node0.isAssign());
489:       assertFalse(node0.isOr());
490:       assertFalse(node0.isGetElem());
491:       assertFalse(node0.isContinue());
492:       assertFalse(node0.isCast());
493:       assertFalse(node0.isLabelName());
494:       assertEquals((-1), node0.getLineno());
495:       assertFalse(node0.isNew());
496:       assertFalse(node0.isAdd());
497:       assertFalse(node0.isVar());
498:       assertFalse(node0.isSetterDef());
499:       assertFalse(node0.isDo());
500:       assertFalse(node0.isGetProp());
501:       assertEquals(17, node0.getType());
502:       assertFalse(node0.isNull());
503:       assertFalse(node0.isObjectLit());
504:       assertFalse(node0.isComma());
505:       assertFalse(node0.isName());
506:       assertFalse(node0.isFalse());
507:       assertFalse(node0.isAnd());
508:       assertFalse(node0.isCall());
509:       assertFalse(node0.isBreak());
510:       assertFalse(node0.isVoid());
511:       assertFalse(node0.isExprResult());
512:       assertFalse(node0.isDebugger());
513:       assertFalse(node0.isNot());
514:       assertFalse(node0.isString());
515:       assertFalse(node0.isWhile());
516:       assertFalse(node1.isGetterDef());
517:       assertFalse(node1.isDelProp());
518:       assertFalse(node1.isIf());
519:       assertFalse(node1.isNE());
520:       assertFalse(node1.isFor());
521:       assertFalse(node1.isArrayLit());
522:       assertFalse(node1.isInc());
523:       assertFalse(node1.isFunction());
524:       assertFalse(node1.isTrue());
525:       assertFalse(node1.isVoid());
526:       assertFalse(node1.isDefaultCase());
527:       assertFalse(node1.isIn());
528:       assertFalse(node1.isEmpty());
529:       assertFalse(node1.isComma());
530:       assertFalse(node1.isSetterDef());
531:       assertFalse(node1.isGetProp());
532:       assertFalse(node1.isNull());
533:       assertFalse(node1.isThrow());
534:       assertFalse(node1.isCall());
535:       assertFalse(node1.isAnd());
536:       assertFalse(node1.isFalse());
537:       assertEquals(29, node1.getLineno());
538:       assertFalse(node1.isName());
539:       assertFalse(node1.isBreak());
540:       assertFalse(node1.isDebugger());
541:       assertFalse(node1.isWhile());
542:       assertFalse(node1.isObjectLit());
543:       assertFalse(node1.isNot());
544:       assertFalse(node1.isString());
545:       assertTrue(node1.isNumber());
546:       assertFalse(node1.isTypeOf());
547:       assertFalse(node1.isDec());
548:       assertFalse(node1.isOr());
549:       assertFalse(node1.isReturn());
550:       assertFalse(node1.isLabel());
551:       assertFalse(node1.isAssignAdd());
552:       assertFalse(node1.hasChildren());
553:       assertEquals(17, node1.getCharno());
554:       assertFalse(node1.isContinue());
555:       assertFalse(node1.hasMoreThanOneChild());
556:       assertFalse(node1.isLabelName());
557:       assertFalse(node1.isAssign());
558:       assertFalse(node1.isGetElem());
559:       assertFalse(node1.isCast());
560:       assertFalse(node1.isExprResult());
561:       assertFalse(node1.isNew());
562:       assertFalse(node1.isVar());
563:       assertFalse(node1.isDo());
564:       assertEquals(118801, node1.getSourcePosition());
565:       assertFalse(node1.isAdd());
566:       assertFalse(node1.isThis());
567:       assertFalse(node1.isParamList());
568:       assertFalse(node1.isStringKey());
569:       assertFalse(node1.isCatch());
570:       assertEquals(0, node1.getChildCount());
571:       assertFalse(node1.isWith());
572:       assertFalse(node1.isInstanceOf());
573:       assertFalse(node1.isSwitch());
574:       assertFalse(node1.isRegExp());
575:       assertFalse(node1.isTry());
576:       assertEquals(39, node1.getType());
577:       assertFalse(node1.isHook());
578:       assertFalse(node1.isBlock());
579:       assertFalse(node1.hasOneChild());
580:       assertFalse(node1.isCase());
581:       assertFalse(node1.isScript());
582:       assertFalse(node2.isNull());
583:       assertFalse(node2.isParamList());
584:       assertFalse(node2.isCall());
585:       assertFalse(node2.isName());
586:       assertFalse(node2.isSetterDef());
587:       assertFalse(node2.isStringKey());
588:       assertEquals(56, node2.getType());
589:       assertFalse(node2.isRegExp());
590:       assertFalse(node2.isWhile());
591:       assertFalse(node2.isVoid());
592:       assertFalse(node2.isTry());
593:       assertFalse(node2.isCatch());
594:       assertFalse(node2.isBlock());
595:       assertFalse(node2.isFor());
596:       assertFalse(node2.isReturn());
597:       assertFalse(node2.isNumber());
598:       assertFalse(node2.isDec());
599:       assertFalse(node2.isGetterDef());
600:       assertFalse(node2.isTypeOf());
601:       assertFalse(node2.isDelProp());
602:       assertEquals(208952, node2.getSourcePosition());
603:       assertFalse(node2.isGetElem());
604:       assertFalse(node2.isEmpty());
605:       assertFalse(node2.isLabelName());
606:       assertEquals(56, node2.getCharno());
607:       assertFalse(node2.isArrayLit());
608:       assertFalse(node2.isTrue());
609:       assertFalse(node2.isOr());
610:       assertFalse(node2.isDefaultCase());
611:       assertFalse(node2.isSwitch());
612:       assertEquals(51, node2.getLineno());
613:       assertFalse(node2.isAdd());
614:       assertFalse(node2.isDo());
615:       assertFalse(node2.isNew());
616:       assertFalse(node2.isAssignAdd());
617:       assertFalse(node2.isVar());
618:       assertFalse(node2.isLabel());
619:       assertFalse(node2.isBreak());
620:       assertFalse(node2.isGetProp());
621:       assertFalse(node2.isAnd());
622:       assertFalse(node2.isObjectLit());
623:       assertFalse(node2.isNot());
624:       assertTrue(node2.hasMoreThanOneChild());
625:       assertFalse(node2.isScript());
626:       assertFalse(node2.isWith());
627:       assertFalse(node2.isString());
628:       assertFalse(node2.isExprResult());
629:       assertFalse(node2.isCase());
630:       assertFalse(node2.isInstanceOf());
631:       assertFalse(node2.hasOneChild());
632:       assertFalse(node2.isHook());
633:       assertTrue(node2.hasChildren());
634:       assertFalse(node2.isComma());
635:       assertFalse(node2.isThis());
636:       assertFalse(node2.isAssign());
637:       assertFalse(node2.isIf());
638:       assertFalse(node2.isNE());
639:       assertFalse(node2.isIn());
640:       assertFalse(node2.isDebugger());
641:       assertFalse(node2.isInc());
642:       assertFalse(node2.isCast());
643:       assertFalse(node2.isContinue());
644:       assertFalse(node2.isFalse());
645:       assertFalse(node2.isThrow());
646:       assertFalse(node2.isFunction());
647:       assertEquals(2, node2.getChildCount());
648:       assertFalse(node0.equals((Object)node1));
649:       assertFalse(node1.equals((Object)node0));
650:       assertFalse(node2.equals((Object)node0));
651:       assertFalse(node2.equals((Object)node1));
652:       assertNotNull(node2);
653:       assertEquals(4095, Node.COLUMN_MASK);
654:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
655:       assertEquals(55, Node.INFERRED_FUNCTION);
656:       assertEquals(43, Node.IS_CONSTANT_NAME);
657:       assertEquals(36, Node.QUOTED_PROP);
658:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
659:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
660:       assertEquals(48, Node.DIRECTIVES);
661:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
662:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
663:       assertEquals(50, Node.FREE_CALL);
664:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
665:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
666:       assertEquals(32, Node.INCRDECR_PROP);
667:       assertEquals(1, Node.DECR_FLAG);
668:       assertEquals(51, Node.STATIC_SOURCE_FILE);
669:       assertEquals(12, Node.COLUMN_BITS);
670:       assertEquals(46, Node.IS_NAMESPACE);
671:       assertEquals(2, Node.POST_FLAG);
672:       assertEquals(30, Node.VAR_ARGS_NAME);
673:       assertEquals(54, Node.SLASH_V);
674:       assertEquals(56, Node.CHANGE_TIME);
675:       assertEquals(49, Node.DIRECT_EVAL);
676:       assertEquals(37, Node.OPT_ARG_NAME);
677:       assertEquals(57, Node.REFLECTED_OBJECT);
678:       assertEquals(40, Node.ORIGINALNAME_PROP);
679:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
680:       assertEquals(52, Node.LENGTH);
681:       assertEquals(15, Node.NO_SIDE_EFFECTS);
682:       assertEquals(8, Node.FLAG_NO_THROWS);
683:       assertEquals(39, Node.EMPTY_BLOCK);
684:       assertEquals(57, Node.LAST_PROP);
685:       assertEquals(47, Node.IS_DISPATCHER);
686:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
687:       assertEquals(29, Node.JSDOC_INFO_PROP);
688:       assertEquals(53, Node.INPUT_ID);
689:       assertEquals(48, Node.DIRECTIVES);
690:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
691:       assertEquals(40, Node.ORIGINALNAME_PROP);
692:       assertEquals(4095, Node.COLUMN_MASK);
693:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
694:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
695:       assertEquals(43, Node.IS_CONSTANT_NAME);
696:       assertEquals(54, Node.SLASH_V);
697:       assertEquals(1, Node.DECR_FLAG);
698:       assertEquals(50, Node.FREE_CALL);
699:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
700:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
701:       assertEquals(51, Node.STATIC_SOURCE_FILE);
702:       assertEquals(32, Node.INCRDECR_PROP);
703:       assertEquals(56, Node.CHANGE_TIME);
704:       assertEquals(12, Node.COLUMN_BITS);
705:       assertEquals(46, Node.IS_NAMESPACE);
706:       assertEquals(47, Node.IS_DISPATCHER);
707:       assertEquals(2, Node.POST_FLAG);
708:       assertEquals(30, Node.VAR_ARGS_NAME);
709:       assertEquals(49, Node.DIRECT_EVAL);
710:       assertEquals(37, Node.OPT_ARG_NAME);
711:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
712:       assertEquals(52, Node.LENGTH);
713:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
714:       assertEquals(57, Node.REFLECTED_OBJECT);
715:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
716:       assertEquals(15, Node.NO_SIDE_EFFECTS);
717:       assertEquals(57, Node.LAST_PROP);
718:       assertEquals(36, Node.QUOTED_PROP);
719:       assertEquals(8, Node.FLAG_NO_THROWS);
720:       assertEquals(39, Node.EMPTY_BLOCK);
721:       assertEquals(53, Node.INPUT_ID);
722:       assertEquals(55, Node.INFERRED_FUNCTION);
723:       assertEquals(29, Node.JSDOC_INFO_PROP);
724:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
725:       assertEquals(32, Node.INCRDECR_PROP);
726:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
727:       assertEquals(37, Node.OPT_ARG_NAME);
728:       assertEquals(29, Node.JSDOC_INFO_PROP);
729:       assertEquals(49, Node.DIRECT_EVAL);
730:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
731:       assertEquals(56, Node.CHANGE_TIME);
732:       assertEquals(46, Node.IS_NAMESPACE);
733:       assertEquals(51, Node.STATIC_SOURCE_FILE);
734:       assertEquals(53, Node.INPUT_ID);
735:       assertEquals(54, Node.SLASH_V);
736:       assertEquals(52, Node.LENGTH);
737:       assertEquals(43, Node.IS_CONSTANT_NAME);
738:       assertEquals(15, Node.NO_SIDE_EFFECTS);
739:       assertEquals(57, Node.LAST_PROP);
740:       assertEquals(40, Node.ORIGINALNAME_PROP);
741:       assertEquals(47, Node.IS_DISPATCHER);
742:       assertEquals(2, Node.POST_FLAG);
743:       assertEquals(30, Node.VAR_ARGS_NAME);
744:       assertEquals(48, Node.DIRECTIVES);
745:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
746:       assertEquals(8, Node.FLAG_NO_THROWS);
747:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
748:       assertEquals(39, Node.EMPTY_BLOCK);
749:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
750:       assertEquals(50, Node.FREE_CALL);
751:       assertEquals(55, Node.INFERRED_FUNCTION);
752:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
753:       assertEquals(57, Node.REFLECTED_OBJECT);
754:       assertEquals(36, Node.QUOTED_PROP);
755:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
756:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
757:       assertEquals(1, Node.DECR_FLAG);
758:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
759:       assertEquals(4095, Node.COLUMN_MASK);
760:       assertEquals(12, Node.COLUMN_BITS);
761:       
762:       Node node3 = new Node(53);
763:       assertFalse(node3.isObjectLit());
764:       assertFalse(node3.isInstanceOf());
765:       assertFalse(node3.isAnd());
766:       assertFalse(node3.isWith());
767:       assertFalse(node3.isNot());
768:       assertFalse(node3.isThis());
769:       assertFalse(node3.isScript());
770:       assertFalse(node3.hasOneChild());
771:       assertFalse(node3.isGetProp());
772:       assertFalse(node3.isAssign());
773:       assertFalse(node3.isHook());
774:       assertFalse(node3.isDec());
775:       assertFalse(node3.hasChildren());
776:       assertFalse(node3.isComma());
777:       assertFalse(node3.isExprResult());
778:       assertFalse(node3.isTypeOf());
779:       assertFalse(node3.isGetElem());
780:       assertFalse(node3.isBreak());
781:       assertEquals((-1), node3.getLineno());
782:       assertFalse(node3.hasMoreThanOneChild());
783:       assertFalse(node3.isOr());
784:       assertFalse(node3.isLabel());
785:       assertFalse(node3.isNumber());
786:       assertFalse(node3.isDo());
787:       assertFalse(node3.isAssignAdd());
788:       assertFalse(node3.isEmpty());
789:       assertFalse(node3.isAdd());
790:       assertFalse(node3.isCase());
791:       assertFalse(node3.isNew());
792:       assertFalse(node3.isVar());
793:       assertFalse(node3.isStringKey());
794:       assertFalse(node3.isGetterDef());
795:       assertEquals((-1), node3.getCharno());
796:       assertFalse(node3.isSwitch());
797:       assertFalse(node3.isParamList());
798:       assertFalse(node3.isLabelName());
799:       assertFalse(node3.isArrayLit());
800:       assertFalse(node3.isCatch());
801:       assertEquals(0, node3.getChildCount());
802:       assertFalse(node3.isSetterDef());
803:       assertFalse(node3.isDefaultCase());
804:       assertFalse(node3.isTry());
805:       assertFalse(node3.isCall());
806:       assertFalse(node3.isBlock());
807:       assertFalse(node3.isFor());
808:       assertFalse(node3.isNE());
809:       assertFalse(node3.isRegExp());
810:       assertFalse(node3.isNull());
811:       assertFalse(node3.isTrue());
812:       assertFalse(node3.isIf());
813:       assertFalse(node3.isName());
814:       assertFalse(node3.isDelProp());
815:       assertFalse(node3.isVoid());
816:       assertFalse(node3.isIn());
817:       assertFalse(node3.isContinue());
818:       assertFalse(node3.isReturn());
819:       assertFalse(node3.isInc());
820:       assertFalse(node3.isString());
821:       assertFalse(node3.isWhile());
822:       assertFalse(node3.isCast());
823:       assertFalse(node3.isFalse());
824:       assertFalse(node3.isThrow());
825:       assertEquals(53, node3.getType());
826:       assertEquals((-1), node3.getSourcePosition());
827:       assertFalse(node3.isDebugger());
828:       assertFalse(node3.isFunction());
829:       assertFalse(node3.equals((Object)node2));
830:       assertFalse(node3.equals((Object)node0));
831:       assertFalse(node3.equals((Object)node1));
832:       assertNotNull(node3);
833:       assertEquals(30, Node.VAR_ARGS_NAME);
834:       assertEquals(49, Node.DIRECT_EVAL);
835:       assertEquals(57, Node.LAST_PROP);
836:       assertEquals(12, Node.COLUMN_BITS);
837:       assertEquals(54, Node.SLASH_V);
838:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
839:       assertEquals(51, Node.STATIC_SOURCE_FILE);
840:       assertEquals(52, Node.LENGTH);
841:       assertEquals(32, Node.INCRDECR_PROP);
842:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
843:       assertEquals(15, Node.NO_SIDE_EFFECTS);
844:       assertEquals(1, Node.DECR_FLAG);
845:       assertEquals(50, Node.FREE_CALL);
846:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
847:       assertEquals(2, Node.POST_FLAG);
848:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
849:       assertEquals(47, Node.IS_DISPATCHER);
850:       assertEquals(46, Node.IS_NAMESPACE);
851:       assertEquals(40, Node.ORIGINALNAME_PROP);
852:       assertEquals(43, Node.IS_CONSTANT_NAME);
853:       assertEquals(36, Node.QUOTED_PROP);
854:       assertEquals(53, Node.INPUT_ID);
855:       assertEquals(55, Node.INFERRED_FUNCTION);
856:       assertEquals(39, Node.EMPTY_BLOCK);
857:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
858:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
859:       assertEquals(29, Node.JSDOC_INFO_PROP);
860:       assertEquals(56, Node.CHANGE_TIME);
861:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
862:       assertEquals(8, Node.FLAG_NO_THROWS);
863:       assertEquals(57, Node.REFLECTED_OBJECT);
864:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
865:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
866:       assertEquals(4095, Node.COLUMN_MASK);
867:       assertEquals(48, Node.DIRECTIVES);
868:       assertEquals(37, Node.OPT_ARG_NAME);
869:       
870:       boolean boolean2 = node1.isInc();
871:       assertFalse(node1.isGetterDef());
872:       assertFalse(node1.isDelProp());
873:       assertFalse(node1.isIf());
874:       assertFalse(node1.isNE());
875:       assertFalse(node1.isFor());
876:       assertFalse(node1.isArrayLit());
877:       assertFalse(node1.isInc());
878:       assertFalse(node1.isFunction());
879:       assertFalse(node1.isTrue());
880:       assertFalse(node1.isVoid());
881:       assertFalse(node1.isDefaultCase());
882:       assertFalse(node1.isIn());
883:       assertFalse(node1.isEmpty());
884:       assertFalse(node1.isComma());
885:       assertFalse(node1.isSetterDef());
886:       assertFalse(node1.isGetProp());
887:       assertFalse(node1.isNull());
888:       assertFalse(node1.isThrow());
889:       assertFalse(node1.isCall());
890:       assertFalse(node1.isAnd());
891:       assertFalse(node1.isFalse());
892:       assertEquals(29, node1.getLineno());
893:       assertFalse(node1.isName());
894:       assertFalse(node1.isBreak());
895:       assertFalse(node1.isDebugger());
896:       assertFalse(node1.isWhile());
897:       assertFalse(node1.isObjectLit());
898:       assertFalse(node1.isNot());
899:       assertFalse(node1.isString());
900:       assertTrue(node1.isNumber());
901:       assertFalse(node1.isTypeOf());
902:       assertFalse(node1.isDec());
903:       assertFalse(node1.isOr());
904:       assertFalse(node1.isReturn());
905:       assertFalse(node1.isLabel());
906:       assertFalse(node1.isAssignAdd());
907:       assertFalse(node1.hasChildren());
908:       assertEquals(17, node1.getCharno());
909:       assertFalse(node1.isContinue());
910:       assertFalse(node1.hasMoreThanOneChild());
911:       assertFalse(node1.isLabelName());
912:       assertFalse(node1.isAssign());
913:       assertFalse(node1.isGetElem());
914:       assertFalse(node1.isCast());
915:       assertFalse(node1.isExprResult());
916:       assertFalse(node1.isNew());
917:       assertFalse(node1.isVar());
918:       assertFalse(node1.isDo());
919:       assertEquals(118801, node1.getSourcePosition());
920:       assertFalse(node1.isAdd());
921:       assertFalse(node1.isThis());
922:       assertFalse(node1.isParamList());
923:       assertFalse(node1.isStringKey());
924:       assertFalse(node1.isCatch());
925:       assertEquals(0, node1.getChildCount());
926:       assertFalse(node1.isWith());
927:       assertFalse(node1.isInstanceOf());
928:       assertFalse(node1.isSwitch());
929:       assertFalse(node1.isRegExp());
930:       assertFalse(node1.isTry());
931:       assertEquals(39, node1.getType());
932:       assertFalse(node1.isHook());
933:       assertFalse(node1.isBlock());
934:       assertFalse(node1.hasOneChild());
935:       assertFalse(node1.isCase());
936:       assertFalse(node1.isScript());
937:       assertFalse(boolean2);
938:       assertFalse(node1.equals((Object)node3));
939:       assertFalse(node1.equals((Object)node2));
940:       assertFalse(node1.equals((Object)node0));
941:       assertTrue(boolean2 == boolean0);
942:       assertTrue(boolean2 == boolean1);
943:       assertEquals(48, Node.DIRECTIVES);
944:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
945:       assertEquals(40, Node.ORIGINALNAME_PROP);
946:       assertEquals(4095, Node.COLUMN_MASK);
947:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
948:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
949:       assertEquals(43, Node.IS_CONSTANT_NAME);
950:       assertEquals(54, Node.SLASH_V);
951:       assertEquals(1, Node.DECR_FLAG);
952:       assertEquals(50, Node.FREE_CALL);
953:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
954:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
955:       assertEquals(51, Node.STATIC_SOURCE_FILE);
956:       assertEquals(32, Node.INCRDECR_PROP);
957:       assertEquals(56, Node.CHANGE_TIME);
958:       assertEquals(12, Node.COLUMN_BITS);
959:       assertEquals(46, Node.IS_NAMESPACE);
960:       assertEquals(47, Node.IS_DISPATCHER);
961:       assertEquals(2, Node.POST_FLAG);
962:       assertEquals(30, Node.VAR_ARGS_NAME);
963:       assertEquals(49, Node.DIRECT_EVAL);
964:       assertEquals(37, Node.OPT_ARG_NAME);
965:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
966:       assertEquals(52, Node.LENGTH);
967:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
968:       assertEquals(57, Node.REFLECTED_OBJECT);
969:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
970:       assertEquals(15, Node.NO_SIDE_EFFECTS);
971:       assertEquals(57, Node.LAST_PROP);
972:       assertEquals(36, Node.QUOTED_PROP);
973:       assertEquals(8, Node.FLAG_NO_THROWS);
974:       assertEquals(39, Node.EMPTY_BLOCK);
975:       assertEquals(53, Node.INPUT_ID);
976:       assertEquals(55, Node.INFERRED_FUNCTION);
977:       assertEquals(29, Node.JSDOC_INFO_PROP);
978:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
979:       
980:       boolean boolean3 = node2.isRegExp();
981:       assertFalse(node0.isNE());
982:       assertFalse(node0.isIn());
983:       assertFalse(node0.isGetterDef());
984:       assertFalse(node0.isArrayLit());
985:       assertFalse(node0.isSwitch());
986:       assertFalse(node0.isIf());
987:       assertFalse(node0.isDelProp());
988:       assertFalse(node0.isInc());
989:       assertFalse(node0.isTrue());
990:       assertFalse(node0.isFunction());
991:       assertFalse(node0.isEmpty());
992:       assertFalse(node0.isThrow());
993:       assertFalse(node0.isDefaultCase());
994:       assertFalse(node0.isParamList());
995:       assertFalse(node0.isInstanceOf());
996:       assertFalse(node0.isThis());
997:       assertEquals(0, node0.getChildCount());
998:       assertFalse(node0.isWith());
999:       assertFalse(node0.isCatch());
1000:       assertFalse(node0.isStringKey());
1001:       assertFalse(node0.isBlock());
1002:       assertFalse(node0.isTry());
1003:       assertFalse(node0.isRegExp());
1004:       assertFalse(node0.isHook());
1005:       assertEquals((-1), node0.getCharno());
1006:       assertFalse(node0.isCase());
1007:       assertFalse(node0.isFor());
1008:       assertFalse(node0.isScript());
1009:       assertFalse(node0.hasOneChild());
1010:       assertFalse(node0.isLabel());
1011:       assertFalse(node0.isReturn());
1012:       assertFalse(node0.isAssignAdd());
1013:       assertEquals((-1), node0.getSourcePosition());
1014:       assertFalse(node0.isTypeOf());
1015:       assertFalse(node0.isNumber());
1016:       assertFalse(node0.hasMoreThanOneChild());
1017:       assertFalse(node0.hasChildren());
1018:       assertFalse(node0.isDec());
1019:       assertFalse(node0.isAssign());
1020:       assertFalse(node0.isOr());
1021:       assertFalse(node0.isGetElem());
1022:       assertFalse(node0.isContinue());
1023:       assertFalse(node0.isCast());
1024:       assertFalse(node0.isLabelName());
1025:       assertEquals((-1), node0.getLineno());
1026:       assertFalse(node0.isNew());
1027:       assertFalse(node0.isAdd());
1028:       assertFalse(node0.isVar());
1029:       assertFalse(node0.isSetterDef());
1030:       assertFalse(node0.isDo());
1031:       assertFalse(node0.isGetProp());
1032:       assertEquals(17, node0.getType());
1033:       assertFalse(node0.isNull());
1034:       assertFalse(node0.isObjectLit());
1035:       assertFalse(node0.isComma());
1036:       assertFalse(node0.isName());
1037:       assertFalse(node0.isFalse());
1038:       assertFalse(node0.isAnd());
1039:       assertFalse(node0.isCall());
1040:       assertFalse(node0.isBreak());
1041:       assertFalse(node0.isVoid());
1042:       assertFalse(node0.isExprResult());
1043:       assertFalse(node0.isDebugger());
1044:       assertFalse(node0.isNot());
1045:       assertFalse(node0.isString());
1046:       assertFalse(node0.isWhile());
1047:       assertFalse(node1.isGetterDef());
1048:       assertFalse(node1.isDelProp());
1049:       assertFalse(node1.isIf());
1050:       assertFalse(node1.isNE());
1051:       assertFalse(node1.isFor());
1052:       assertFalse(node1.isArrayLit());
1053:       assertFalse(node1.isInc());
1054:       assertFalse(node1.isFunction());
1055:       assertFalse(node1.isTrue());
1056:       assertFalse(node1.isVoid());
1057:       assertFalse(node1.isDefaultCase());
1058:       assertFalse(node1.isIn());
1059:       assertFalse(node1.isEmpty());
1060:       assertFalse(node1.isComma());
1061:       assertFalse(node1.isSetterDef());
1062:       assertFalse(node1.isGetProp());
1063:       assertFalse(node1.isNull());
1064:       assertFalse(node1.isThrow());
1065:       assertFalse(node1.isCall());
1066:       assertFalse(node1.isAnd());
1067:       assertFalse(node1.isFalse());
1068:       assertEquals(29, node1.getLineno());
1069:       assertFalse(node1.isName());
1070:       assertFalse(node1.isBreak());
1071:       assertFalse(node1.isDebugger());
1072:       assertFalse(node1.isWhile());
1073:       assertFalse(node1.isObjectLit());
1074:       assertFalse(node1.isNot());
1075:       assertFalse(node1.isString());
1076:       assertTrue(node1.isNumber());
1077:       assertFalse(node1.isTypeOf());
1078:       assertFalse(node1.isDec());
1079:       assertFalse(node1.isOr());
1080:       assertFalse(node1.isReturn());
1081:       assertFalse(node1.isLabel());
1082:       assertFalse(node1.isAssignAdd());
1083:       assertFalse(node1.hasChildren());
1084:       assertEquals(17, node1.getCharno());
1085:       assertFalse(node1.isContinue());
1086:       assertFalse(node1.hasMoreThanOneChild());
1087:       assertFalse(node1.isLabelName());
1088:       assertFalse(node1.isAssign());
1089:       assertFalse(node1.isGetElem());
1090:       assertFalse(node1.isCast());
1091:       assertFalse(node1.isExprResult());
1092:       assertFalse(node1.isNew());
1093:       assertFalse(node1.isVar());
1094:       assertFalse(node1.isDo());
1095:       assertEquals(118801, node1.getSourcePosition());
1096:       assertFalse(node1.isAdd());
1097:       assertFalse(node1.isThis());
1098:       assertFalse(node1.isParamList());
1099:       assertFalse(node1.isStringKey());
1100:       assertFalse(node1.isCatch());
1101:       assertEquals(0, node1.getChildCount());
1102:       assertFalse(node1.isWith());
1103:       assertFalse(node1.isInstanceOf());
1104:       assertFalse(node1.isSwitch());
1105:       assertFalse(node1.isRegExp());
1106:       assertFalse(node1.isTry());
1107:       assertEquals(39, node1.getType());
1108:       assertFalse(node1.isHook());
1109:       assertFalse(node1.isBlock());
1110:       assertFalse(node1.hasOneChild());
1111:       assertFalse(node1.isCase());
1112:       assertFalse(node1.isScript());
1113:       assertFalse(node2.isNull());
1114:       assertFalse(node2.isParamList());
1115:       assertFalse(node2.isCall());
1116:       assertFalse(node2.isName());
1117:       assertFalse(node2.isSetterDef());
1118:       assertFalse(node2.isStringKey());
1119:       assertEquals(56, node2.getType());
1120:       assertFalse(node2.isRegExp());
1121:       assertFalse(node2.isWhile());
1122:       assertFalse(node2.isVoid());
1123:       assertFalse(node2.isTry());
1124:       assertFalse(node2.isCatch());
1125:       assertFalse(node2.isBlock());
1126:       assertFalse(node2.isFor());
1127:       assertFalse(node2.isReturn());
1128:       assertFalse(node2.isNumber());
1129:       assertFalse(node2.isDec());
1130:       assertFalse(node2.isGetterDef());
1131:       assertFalse(node2.isTypeOf());
1132:       assertFalse(node2.isDelProp());
1133:       assertEquals(208952, node2.getSourcePosition());
1134:       assertFalse(node2.isGetElem());
1135:       assertFalse(node2.isEmpty());
1136:       assertFalse(node2.isLabelName());
1137:       assertEquals(56, node2.getCharno());
1138:       assertFalse(node2.isArrayLit());
1139:       assertFalse(node2.isTrue());
1140:       assertFalse(node2.isOr());
1141:       assertFalse(node2.isDefaultCase());
1142:       assertFalse(node2.isSwitch());
1143:       assertEquals(51, node2.getLineno());
1144:       assertFalse(node2.isAdd());
1145:       assertFalse(node2.isDo());
1146:       assertFalse(node2.isNew());
1147:       assertFalse(node2.isAssignAdd());
1148:       assertFalse(node2.isVar());
1149:       assertFalse(node2.isLabel());
1150:       assertFalse(node2.isBreak());
1151:       assertFalse(node2.isGetProp());
1152:       assertFalse(node2.isAnd());
1153:       assertFalse(node2.isObjectLit());
1154:       assertFalse(node2.isNot());
1155:       assertTrue(node2.hasMoreThanOneChild());
1156:       assertFalse(node2.isScript());
1157:       assertFalse(node2.isWith());
1158:       assertFalse(node2.isString());
1159:       assertFalse(node2.isExprResult());
1160:       assertFalse(node2.isCase());
1161:       assertFalse(node2.isInstanceOf());
1162:       assertFalse(node2.hasOneChild());
1163:       assertFalse(node2.isHook());
1164:       assertTrue(node2.hasChildren());
1165:       assertFalse(node2.isComma());
1166:       assertFalse(node2.isThis());
1167:       assertFalse(node2.isAssign());
1168:       assertFalse(node2.isIf());
1169:       assertFalse(node2.isNE());
1170:       assertFalse(node2.isIn());
1171:       assertFalse(node2.isDebugger());
1172:       assertFalse(node2.isInc());
1173:       assertFalse(node2.isCast());
1174:       assertFalse(node2.isContinue());
1175:       assertFalse(node2.isFalse());
1176:       assertFalse(node2.isThrow());
1177:       assertFalse(node2.isFunction());
1178:       assertEquals(2, node2.getChildCount());
1179:       assertNotSame(node0, node3);
1180:       assertNotSame(node0, node2);
1181:       assertNotSame(node2, node0);
1182:       assertNotSame(node2, node3);
1183:       assertFalse(boolean3);
1184:       assertFalse(node0.equals((Object)node1));
1185:       assertFalse(node0.equals((Object)node3));
1186:       assertFalse(node0.equals((Object)node2));
1187:       assertFalse(node1.equals((Object)node3));
1188:       assertFalse(node1.equals((Object)node2));
1189:       assertFalse(node1.equals((Object)node0));
1190:       assertFalse(node2.equals((Object)node0));
1191:       assertFalse(node2.equals((Object)node1));
1192:       assertFalse(node2.equals((Object)node3));
1193:       assertTrue(boolean3 == boolean1);
1194:       assertTrue(boolean3 == boolean0);
1195:       assertTrue(boolean3 == boolean2);
1196:       assertEquals(4095, Node.COLUMN_MASK);
1197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1198:       assertEquals(55, Node.INFERRED_FUNCTION);
1199:       assertEquals(43, Node.IS_CONSTANT_NAME);
1200:       assertEquals(36, Node.QUOTED_PROP);
1201:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1202:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1203:       assertEquals(48, Node.DIRECTIVES);
1204:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1206:       assertEquals(50, Node.FREE_CALL);
1207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1208:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1209:       assertEquals(32, Node.INCRDECR_PROP);
1210:       assertEquals(1, Node.DECR_FLAG);
1211:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1212:       assertEquals(12, Node.COLUMN_BITS);
1213:       assertEquals(46, Node.IS_NAMESPACE);
1214:       assertEquals(2, Node.POST_FLAG);
1215:       assertEquals(30, Node.VAR_ARGS_NAME);
1216:       assertEquals(54, Node.SLASH_V);
1217:       assertEquals(56, Node.CHANGE_TIME);
1218:       assertEquals(49, Node.DIRECT_EVAL);
1219:       assertEquals(37, Node.OPT_ARG_NAME);
1220:       assertEquals(57, Node.REFLECTED_OBJECT);
1221:       assertEquals(40, Node.ORIGINALNAME_PROP);
1222:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1223:       assertEquals(52, Node.LENGTH);
1224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1225:       assertEquals(8, Node.FLAG_NO_THROWS);
1226:       assertEquals(39, Node.EMPTY_BLOCK);
1227:       assertEquals(57, Node.LAST_PROP);
1228:       assertEquals(47, Node.IS_DISPATCHER);
1229:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1230:       assertEquals(29, Node.JSDOC_INFO_PROP);
1231:       assertEquals(53, Node.INPUT_ID);
1232:       assertEquals(48, Node.DIRECTIVES);
1233:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1234:       assertEquals(40, Node.ORIGINALNAME_PROP);
1235:       assertEquals(4095, Node.COLUMN_MASK);
1236:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1237:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1238:       assertEquals(43, Node.IS_CONSTANT_NAME);
1239:       assertEquals(54, Node.SLASH_V);
1240:       assertEquals(1, Node.DECR_FLAG);
1241:       assertEquals(50, Node.FREE_CALL);
1242:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1244:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1245:       assertEquals(32, Node.INCRDECR_PROP);
1246:       assertEquals(56, Node.CHANGE_TIME);
1247:       assertEquals(12, Node.COLUMN_BITS);
1248:       assertEquals(46, Node.IS_NAMESPACE);
1249:       assertEquals(47, Node.IS_DISPATCHER);
1250:       assertEquals(2, Node.POST_FLAG);
1251:       assertEquals(30, Node.VAR_ARGS_NAME);
1252:       assertEquals(49, Node.DIRECT_EVAL);
1253:       assertEquals(37, Node.OPT_ARG_NAME);
1254:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1255:       assertEquals(52, Node.LENGTH);
1256:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1257:       assertEquals(57, Node.REFLECTED_OBJECT);
1258:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1259:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1260:       assertEquals(57, Node.LAST_PROP);
1261:       assertEquals(36, Node.QUOTED_PROP);
1262:       assertEquals(8, Node.FLAG_NO_THROWS);
1263:       assertEquals(39, Node.EMPTY_BLOCK);
1264:       assertEquals(53, Node.INPUT_ID);
1265:       assertEquals(55, Node.INFERRED_FUNCTION);
1266:       assertEquals(29, Node.JSDOC_INFO_PROP);
1267:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1268:       assertEquals(32, Node.INCRDECR_PROP);
1269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1270:       assertEquals(37, Node.OPT_ARG_NAME);
1271:       assertEquals(29, Node.JSDOC_INFO_PROP);
1272:       assertEquals(49, Node.DIRECT_EVAL);
1273:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1274:       assertEquals(56, Node.CHANGE_TIME);
1275:       assertEquals(46, Node.IS_NAMESPACE);
1276:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1277:       assertEquals(53, Node.INPUT_ID);
1278:       assertEquals(54, Node.SLASH_V);
1279:       assertEquals(52, Node.LENGTH);
1280:       assertEquals(43, Node.IS_CONSTANT_NAME);
1281:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1282:       assertEquals(57, Node.LAST_PROP);
1283:       assertEquals(40, Node.ORIGINALNAME_PROP);
1284:       assertEquals(47, Node.IS_DISPATCHER);
1285:       assertEquals(2, Node.POST_FLAG);
1286:       assertEquals(30, Node.VAR_ARGS_NAME);
1287:       assertEquals(48, Node.DIRECTIVES);
1288:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1289:       assertEquals(8, Node.FLAG_NO_THROWS);
1290:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1291:       assertEquals(39, Node.EMPTY_BLOCK);
1292:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1293:       assertEquals(50, Node.FREE_CALL);
1294:       assertEquals(55, Node.INFERRED_FUNCTION);
1295:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1296:       assertEquals(57, Node.REFLECTED_OBJECT);
1297:       assertEquals(36, Node.QUOTED_PROP);
1298:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1299:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1300:       assertEquals(1, Node.DECR_FLAG);
1301:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1302:       assertEquals(4095, Node.COLUMN_MASK);
1303:       assertEquals(12, Node.COLUMN_BITS);
1304:       
1305:       Node node4 = node1.getLastSibling();
1306:       assertFalse(node1.isGetterDef());
1307:       assertFalse(node1.isDelProp());
1308:       assertFalse(node1.isIf());
1309:       assertFalse(node1.isNE());
1310:       assertFalse(node1.isFor());
1311:       assertFalse(node1.isArrayLit());
1312:       assertFalse(node1.isInc());
1313:       assertFalse(node1.isFunction());
1314:       assertFalse(node1.isTrue());
1315:       assertFalse(node1.isVoid());
1316:       assertFalse(node1.isDefaultCase());
1317:       assertFalse(node1.isIn());
1318:       assertFalse(node1.isEmpty());
1319:       assertFalse(node1.isComma());
1320:       assertFalse(node1.isSetterDef());
1321:       assertFalse(node1.isGetProp());
1322:       assertFalse(node1.isNull());
1323:       assertFalse(node1.isThrow());
1324:       assertFalse(node1.isCall());
1325:       assertFalse(node1.isAnd());
1326:       assertFalse(node1.isFalse());
1327:       assertEquals(29, node1.getLineno());
1328:       assertFalse(node1.isName());
1329:       assertFalse(node1.isBreak());
1330:       assertFalse(node1.isDebugger());
1331:       assertFalse(node1.isWhile());
1332:       assertFalse(node1.isObjectLit());
1333:       assertFalse(node1.isNot());
1334:       assertFalse(node1.isString());
1335:       assertTrue(node1.isNumber());
1336:       assertFalse(node1.isTypeOf());
1337:       assertFalse(node1.isDec());
1338:       assertFalse(node1.isOr());
1339:       assertFalse(node1.isReturn());
1340:       assertFalse(node1.isLabel());
1341:       assertFalse(node1.isAssignAdd());
1342:       assertFalse(node1.hasChildren());
1343:       assertEquals(17, node1.getCharno());
1344:       assertFalse(node1.isContinue());
1345:       assertFalse(node1.hasMoreThanOneChild());
1346:       assertFalse(node1.isLabelName());
1347:       assertFalse(node1.isAssign());
1348:       assertFalse(node1.isGetElem());
1349:       assertFalse(node1.isCast());
1350:       assertFalse(node1.isExprResult());
1351:       assertFalse(node1.isNew());
1352:       assertFalse(node1.isVar());
1353:       assertFalse(node1.isDo());
1354:       assertEquals(118801, node1.getSourcePosition());
1355:       assertFalse(node1.isAdd());
1356:       assertFalse(node1.isThis());
1357:       assertFalse(node1.isParamList());
1358:       assertFalse(node1.isStringKey());
1359:       assertFalse(node1.isCatch());
1360:       assertEquals(0, node1.getChildCount());
1361:       assertFalse(node1.isWith());
1362:       assertFalse(node1.isInstanceOf());
1363:       assertFalse(node1.isSwitch());
1364:       assertFalse(node1.isRegExp());
1365:       assertFalse(node1.isTry());
1366:       assertEquals(39, node1.getType());
1367:       assertFalse(node1.isHook());
1368:       assertFalse(node1.isBlock());
1369:       assertFalse(node1.hasOneChild());
1370:       assertFalse(node1.isCase());
1371:       assertFalse(node1.isScript());
1372:       assertFalse(node4.isString());
1373:       assertFalse(node4.isSwitch());
1374:       assertFalse(node4.isInc());
1375:       assertFalse(node4.isCase());
1376:       assertFalse(node4.isIn());
1377:       assertFalse(node4.isNE());
1378:       assertEquals((-1), node4.getCharno());
1379:       assertFalse(node4.isEmpty());
1380:       assertFalse(node4.isFalse());
1381:       assertFalse(node4.isThrow());
1382:       assertFalse(node4.isArrayLit());
1383:       assertFalse(node4.isFunction());
1384:       assertFalse(node4.isNot());
1385:       assertFalse(node4.isDefaultCase());
1386:       assertFalse(node4.isAnd());
1387:       assertFalse(node4.isExprResult());
1388:       assertFalse(node4.isVoid());
1389:       assertEquals(17, node4.getType());
1390:       assertFalse(node4.isObjectLit());
1391:       assertFalse(node4.isNull());
1392:       assertFalse(node4.isTrue());
1393:       assertFalse(node4.isDebugger());
1394:       assertFalse(node4.isAssign());
1395:       assertFalse(node4.isName());
1396:       assertFalse(node4.isDelProp());
1397:       assertFalse(node4.isCall());
1398:       assertFalse(node4.isGetProp());
1399:       assertFalse(node4.isGetElem());
1400:       assertFalse(node4.isBreak());
1401:       assertFalse(node4.isReturn());
1402:       assertFalse(node4.isComma());
1403:       assertFalse(node4.isTypeOf());
1404:       assertFalse(node4.isDec());
1405:       assertFalse(node4.hasChildren());
1406:       assertFalse(node4.isDo());
1407:       assertFalse(node4.isContinue());
1408:       assertFalse(node4.isWhile());
1409:       assertFalse(node4.isNew());
1410:       assertEquals((-1), node4.getLineno());
1411:       assertFalse(node4.isAdd());
1412:       assertFalse(node4.isOr());
1413:       assertEquals((-1), node4.getSourcePosition());
1414:       assertFalse(node4.isLabelName());
1415:       assertFalse(node4.isStringKey());
1416:       assertFalse(node4.isCast());
1417:       assertFalse(node4.isSetterDef());
1418:       assertFalse(node4.isAssignAdd());
1419:       assertFalse(node4.isVar());
1420:       assertEquals(0, node4.getChildCount());
1421:       assertFalse(node4.isLabel());
1422:       assertFalse(node4.isWith());
1423:       assertFalse(node4.isCatch());
1424:       assertFalse(node4.isScript());
1425:       assertFalse(node4.isParamList());
1426:       assertFalse(node4.isFor());
1427:       assertFalse(node4.isGetterDef());
1428:       assertFalse(node4.isNumber());
1429:       assertFalse(node4.isIf());
1430:       assertFalse(node4.hasOneChild());
1431:       assertFalse(node4.isTry());
1432:       assertFalse(node4.isInstanceOf());
1433:       assertFalse(node4.isThis());
1434:       assertFalse(node4.hasMoreThanOneChild());
1435:       assertFalse(node4.isRegExp());
1436:       assertFalse(node4.isHook());
1437:       assertFalse(node4.isBlock());
1438:       assertNotSame(node4, node2);
1439:       assertSame(node4, node0);
1440:       assertNotSame(node4, node3);
1441:       assertFalse(node1.equals((Object)node3));
1442:       assertFalse(node1.equals((Object)node2));
1443:       assertFalse(node1.equals((Object)node0));
1444:       assertFalse(node4.equals((Object)node2));
1445:       assertFalse(node4.equals((Object)node1));
1446:       assertFalse(node4.equals((Object)node3));
1447:       assertNotNull(node4);
1448:       assertEquals(48, Node.DIRECTIVES);
1449:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1450:       assertEquals(40, Node.ORIGINALNAME_PROP);
1451:       assertEquals(4095, Node.COLUMN_MASK);
1452:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1453:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1454:       assertEquals(43, Node.IS_CONSTANT_NAME);
1455:       assertEquals(54, Node.SLASH_V);
1456:       assertEquals(1, Node.DECR_FLAG);
1457:       assertEquals(50, Node.FREE_CALL);
1458:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1459:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1460:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1461:       assertEquals(32, Node.INCRDECR_PROP);
1462:       assertEquals(56, Node.CHANGE_TIME);
1463:       assertEquals(12, Node.COLUMN_BITS);
1464:       assertEquals(46, Node.IS_NAMESPACE);
1465:       assertEquals(47, Node.IS_DISPATCHER);
1466:       assertEquals(2, Node.POST_FLAG);
1467:       assertEquals(30, Node.VAR_ARGS_NAME);
1468:       assertEquals(49, Node.DIRECT_EVAL);
1469:       assertEquals(37, Node.OPT_ARG_NAME);
1470:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1471:       assertEquals(52, Node.LENGTH);
1472:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1473:       assertEquals(57, Node.REFLECTED_OBJECT);
1474:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1475:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1476:       assertEquals(57, Node.LAST_PROP);
1477:       assertEquals(36, Node.QUOTED_PROP);
1478:       assertEquals(8, Node.FLAG_NO_THROWS);
1479:       assertEquals(39, Node.EMPTY_BLOCK);
1480:       assertEquals(53, Node.INPUT_ID);
1481:       assertEquals(55, Node.INFERRED_FUNCTION);
1482:       assertEquals(29, Node.JSDOC_INFO_PROP);
1483:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1484:       assertEquals(43, Node.IS_CONSTANT_NAME);
1485:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1486:       assertEquals(53, Node.INPUT_ID);
1487:       assertEquals(55, Node.INFERRED_FUNCTION);
1488:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1489:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1490:       assertEquals(36, Node.QUOTED_PROP);
1491:       assertEquals(56, Node.CHANGE_TIME);
1492:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1493:       assertEquals(32, Node.INCRDECR_PROP);
1494:       assertEquals(48, Node.DIRECTIVES);
1495:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1496:       assertEquals(37, Node.OPT_ARG_NAME);
1497:       assertEquals(12, Node.COLUMN_BITS);
1498:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1499:       assertEquals(4095, Node.COLUMN_MASK);
1500:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1501:       assertEquals(54, Node.SLASH_V);
1502:       assertEquals(57, Node.LAST_PROP);
1503:       assertEquals(49, Node.DIRECT_EVAL);
1504:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1505:       assertEquals(1, Node.DECR_FLAG);
1506:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1507:       assertEquals(52, Node.LENGTH);
1508:       assertEquals(46, Node.IS_NAMESPACE);
1509:       assertEquals(50, Node.FREE_CALL);
1510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1511:       assertEquals(57, Node.REFLECTED_OBJECT);
1512:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1513:       assertEquals(8, Node.FLAG_NO_THROWS);
1514:       assertEquals(39, Node.EMPTY_BLOCK);
1515:       assertEquals(2, Node.POST_FLAG);
1516:       assertEquals(29, Node.JSDOC_INFO_PROP);
1517:       assertEquals(40, Node.ORIGINALNAME_PROP);
1518:       assertEquals(30, Node.VAR_ARGS_NAME);
1519:       assertEquals(47, Node.IS_DISPATCHER);
1520:       
1521:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node4.getJsDocBuilderForNode();
1522:       assertFalse(node1.isGetterDef());
1523:       assertFalse(node1.isDelProp());
1524:       assertFalse(node1.isIf());
1525:       assertFalse(node1.isNE());
1526:       assertFalse(node1.isFor());
1527:       assertFalse(node1.isArrayLit());
1528:       assertFalse(node1.isInc());
1529:       assertFalse(node1.isFunction());
1530:       assertFalse(node1.isTrue());
1531:       assertFalse(node1.isVoid());
1532:       assertFalse(node1.isDefaultCase());
1533:       assertFalse(node1.isIn());
1534:       assertFalse(node1.isEmpty());
1535:       assertFalse(node1.isComma());
1536:       assertFalse(node1.isSetterDef());
1537:       assertFalse(node1.isGetProp());
1538:       assertFalse(node1.isNull());
1539:       assertFalse(node1.isThrow());
1540:       assertFalse(node1.isCall());
1541:       assertFalse(node1.isAnd());
1542:       assertFalse(node1.isFalse());
1543:       assertEquals(29, node1.getLineno());
1544:       assertFalse(node1.isName());
1545:       assertFalse(node1.isBreak());
1546:       assertFalse(node1.isDebugger());
1547:       assertFalse(node1.isWhile());
1548:       assertFalse(node1.isObjectLit());
1549:       assertFalse(node1.isNot());
1550:       assertFalse(node1.isString());
1551:       assertTrue(node1.isNumber());
1552:       assertFalse(node1.isTypeOf());
1553:       assertFalse(node1.isDec());
1554:       assertFalse(node1.isOr());
1555:       assertFalse(node1.isReturn());
1556:       assertFalse(node1.isLabel());
1557:       assertFalse(node1.isAssignAdd());
1558:       assertFalse(node1.hasChildren());
1559:       assertEquals(17, node1.getCharno());
1560:       assertFalse(node1.isContinue());
1561:       assertFalse(node1.hasMoreThanOneChild());
1562:       assertFalse(node1.isLabelName());
1563:       assertFalse(node1.isAssign());
1564:       assertFalse(node1.isGetElem());
1565:       assertFalse(node1.isCast());
1566:       assertFalse(node1.isExprResult());
1567:       assertFalse(node1.isNew());
1568:       assertFalse(node1.isVar());
1569:       assertFalse(node1.isDo());
1570:       assertEquals(118801, node1.getSourcePosition());
1571:       assertFalse(node1.isAdd());
1572:       assertFalse(node1.isThis());
1573:       assertFalse(node1.isParamList());
1574:       assertFalse(node1.isStringKey());
1575:       assertFalse(node1.isCatch());
1576:       assertEquals(0, node1.getChildCount());
1577:       assertFalse(node1.isWith());
1578:       assertFalse(node1.isInstanceOf());
1579:       assertFalse(node1.isSwitch());
1580:       assertFalse(node1.isRegExp());
1581:       assertFalse(node1.isTry());
1582:       assertEquals(39, node1.getType());
1583:       assertFalse(node1.isHook());
1584:       assertFalse(node1.isBlock());
1585:       assertFalse(node1.hasOneChild());
1586:       assertFalse(node1.isCase());
1587:       assertFalse(node1.isScript());
1588:       assertFalse(node4.isString());
1589:       assertFalse(node4.isSwitch());
1590:       assertFalse(node4.isInc());
1591:       assertFalse(node4.isCase());
1592:       assertFalse(node4.isIn());
1593:       assertFalse(node4.isNE());
1594:       assertEquals((-1), node4.getCharno());
1595:       assertFalse(node4.isEmpty());
1596:       assertFalse(node4.isFalse());
1597:       assertFalse(node4.isThrow());
1598:       assertFalse(node4.isArrayLit());
1599:       assertFalse(node4.isFunction());
1600:       assertFalse(node4.isNot());
1601:       assertFalse(node4.isDefaultCase());
1602:       assertFalse(node4.isAnd());
1603:       assertFalse(node4.isExprResult());
1604:       assertFalse(node4.isVoid());
1605:       assertEquals(17, node4.getType());
1606:       assertFalse(node4.isObjectLit());
1607:       assertFalse(node4.isNull());
1608:       assertFalse(node4.isTrue());
1609:       assertFalse(node4.isDebugger());
1610:       assertFalse(node4.isAssign());
1611:       assertFalse(node4.isName());
1612:       assertFalse(node4.isDelProp());
1613:       assertFalse(node4.isCall());
1614:       assertFalse(node4.isGetProp());
1615:       assertFalse(node4.isGetElem());
1616:       assertFalse(node4.isBreak());
1617:       assertFalse(node4.isReturn());
1618:       assertFalse(node4.isComma());
1619:       assertFalse(node4.isTypeOf());
1620:       assertFalse(node4.isDec());
1621:       assertFalse(node4.hasChildren());
1622:       assertFalse(node4.isDo());
1623:       assertFalse(node4.isContinue());
1624:       assertFalse(node4.isWhile());
1625:       assertFalse(node4.isNew());
1626:       assertEquals((-1), node4.getLineno());
1627:       assertFalse(node4.isAdd());
1628:       assertFalse(node4.isOr());
1629:       assertEquals((-1), node4.getSourcePosition());
1630:       assertFalse(node4.isLabelName());
1631:       assertFalse(node4.isStringKey());
1632:       assertFalse(node4.isCast());
1633:       assertFalse(node4.isSetterDef());
1634:       assertFalse(node4.isAssignAdd());
1635:       assertFalse(node4.isVar());
1636:       assertEquals(0, node4.getChildCount());
1637:       assertFalse(node4.isLabel());
1638:       assertFalse(node4.isWith());
1639:       assertFalse(node4.isCatch());
1640:       assertFalse(node4.isScript());
1641:       assertFalse(node4.isParamList());
1642:       assertFalse(node4.isFor());
1643:       assertFalse(node4.isGetterDef());
1644:       assertFalse(node4.isNumber());
1645:       assertFalse(node4.isIf());
1646:       assertFalse(node4.hasOneChild());
1647:       assertFalse(node4.isTry());
1648:       assertFalse(node4.isInstanceOf());
1649:       assertFalse(node4.isThis());
1650:       assertFalse(node4.hasMoreThanOneChild());
1651:       assertFalse(node4.isRegExp());
1652:       assertFalse(node4.isHook());
1653:       assertFalse(node4.isBlock());
1654:       assertNotSame(node4, node2);
1655:       assertSame(node4, node0);
1656:       assertNotSame(node4, node3);
1657:       assertFalse(node1.equals((Object)node3));
1658:       assertFalse(node1.equals((Object)node2));
1659:       assertFalse(node1.equals((Object)node4));
1660:       assertFalse(node1.equals((Object)node0));
1661:       assertFalse(node4.equals((Object)node2));
1662:       assertFalse(node4.equals((Object)node1));
1663:       assertFalse(node4.equals((Object)node3));
1664:       assertNotNull(node_FileLevelJsDocBuilder0);
1665:       assertEquals(48, Node.DIRECTIVES);
1666:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1667:       assertEquals(40, Node.ORIGINALNAME_PROP);
1668:       assertEquals(4095, Node.COLUMN_MASK);
1669:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1670:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1671:       assertEquals(43, Node.IS_CONSTANT_NAME);
1672:       assertEquals(54, Node.SLASH_V);
1673:       assertEquals(1, Node.DECR_FLAG);
1674:       assertEquals(50, Node.FREE_CALL);
1675:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1676:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1677:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1678:       assertEquals(32, Node.INCRDECR_PROP);
1679:       assertEquals(56, Node.CHANGE_TIME);
1680:       assertEquals(12, Node.COLUMN_BITS);
1681:       assertEquals(46, Node.IS_NAMESPACE);
1682:       assertEquals(47, Node.IS_DISPATCHER);
1683:       assertEquals(2, Node.POST_FLAG);
1684:       assertEquals(30, Node.VAR_ARGS_NAME);
1685:       assertEquals(49, Node.DIRECT_EVAL);
1686:       assertEquals(37, Node.OPT_ARG_NAME);
1687:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1688:       assertEquals(52, Node.LENGTH);
1689:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1690:       assertEquals(57, Node.REFLECTED_OBJECT);
1691:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1692:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1693:       assertEquals(57, Node.LAST_PROP);
1694:       assertEquals(36, Node.QUOTED_PROP);
1695:       assertEquals(8, Node.FLAG_NO_THROWS);
1696:       assertEquals(39, Node.EMPTY_BLOCK);
1697:       assertEquals(53, Node.INPUT_ID);
1698:       assertEquals(55, Node.INFERRED_FUNCTION);
1699:       assertEquals(29, Node.JSDOC_INFO_PROP);
1700:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1701:       assertEquals(43, Node.IS_CONSTANT_NAME);
1702:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1703:       assertEquals(53, Node.INPUT_ID);
1704:       assertEquals(55, Node.INFERRED_FUNCTION);
1705:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1706:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1707:       assertEquals(36, Node.QUOTED_PROP);
1708:       assertEquals(56, Node.CHANGE_TIME);
1709:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1710:       assertEquals(32, Node.INCRDECR_PROP);
1711:       assertEquals(48, Node.DIRECTIVES);
1712:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1713:       assertEquals(37, Node.OPT_ARG_NAME);
1714:       assertEquals(12, Node.COLUMN_BITS);
1715:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1716:       assertEquals(4095, Node.COLUMN_MASK);
1717:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1718:       assertEquals(54, Node.SLASH_V);
1719:       assertEquals(57, Node.LAST_PROP);
1720:       assertEquals(49, Node.DIRECT_EVAL);
1721:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1722:       assertEquals(1, Node.DECR_FLAG);
1723:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1724:       assertEquals(52, Node.LENGTH);
1725:       assertEquals(46, Node.IS_NAMESPACE);
1726:       assertEquals(50, Node.FREE_CALL);
1727:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1728:       assertEquals(57, Node.REFLECTED_OBJECT);
1729:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1730:       assertEquals(8, Node.FLAG_NO_THROWS);
1731:       assertEquals(39, Node.EMPTY_BLOCK);
1732:       assertEquals(2, Node.POST_FLAG);
1733:       assertEquals(29, Node.JSDOC_INFO_PROP);
1734:       assertEquals(40, Node.ORIGINALNAME_PROP);
1735:       assertEquals(30, Node.VAR_ARGS_NAME);
1736:       assertEquals(47, Node.IS_DISPATCHER);
1737:       
1738:       Iterable<Node> iterable0 = node4.children();
1739:       assertFalse(iterable0.contains(node0));
1740:       assertFalse(node1.isGetterDef());
1741:       assertFalse(node1.isDelProp());
1742:       assertFalse(node1.isIf());
1743:       assertFalse(node1.isNE());
1744:       assertFalse(node1.isFor());
1745:       assertFalse(node1.isArrayLit());
1746:       assertFalse(node1.isInc());
1747:       assertFalse(node1.isFunction());
1748:       assertFalse(node1.isTrue());
1749:       assertFalse(node1.isVoid());
1750:       assertFalse(node1.isDefaultCase());
1751:       assertFalse(node1.isIn());
1752:       assertFalse(node1.isEmpty());
1753:       assertFalse(node1.isComma());
1754:       assertFalse(node1.isSetterDef());
1755:       assertFalse(node1.isGetProp());
1756:       assertFalse(node1.isNull());
1757:       assertFalse(node1.isThrow());
1758:       assertFalse(node1.isCall());
1759:       assertFalse(node1.isAnd());
1760:       assertFalse(node1.isFalse());
1761:       assertEquals(29, node1.getLineno());
1762:       assertFalse(node1.isName());
1763:       assertFalse(node1.isBreak());
1764:       assertFalse(node1.isDebugger());
1765:       assertFalse(node1.isWhile());
1766:       assertFalse(node1.isObjectLit());
1767:       assertFalse(node1.isNot());
1768:       assertFalse(node1.isString());
1769:       assertTrue(node1.isNumber());
1770:       assertFalse(node1.isTypeOf());
1771:       assertFalse(node1.isDec());
1772:       assertFalse(node1.isOr());
1773:       assertFalse(node1.isReturn());
1774:       assertFalse(node1.isLabel());
1775:       assertFalse(node1.isAssignAdd());
1776:       assertFalse(node1.hasChildren());
1777:       assertEquals(17, node1.getCharno());
1778:       assertFalse(node1.isContinue());
1779:       assertFalse(node1.hasMoreThanOneChild());
1780:       assertFalse(node1.isLabelName());
1781:       assertFalse(node1.isAssign());
1782:       assertFalse(node1.isGetElem());
1783:       assertFalse(node1.isCast());
1784:       assertFalse(node1.isExprResult());
1785:       assertFalse(node1.isNew());
1786:       assertFalse(node1.isVar());
1787:       assertFalse(node1.isDo());
1788:       assertEquals(118801, node1.getSourcePosition());
1789:       assertFalse(node1.isAdd());
1790:       assertFalse(node1.isThis());
1791:       assertFalse(node1.isParamList());
1792:       assertFalse(node1.isStringKey());
1793:       assertFalse(node1.isCatch());
1794:       assertEquals(0, node1.getChildCount());
1795:       assertFalse(node1.isWith());
1796:       assertFalse(node1.isInstanceOf());
1797:       assertFalse(node1.isSwitch());
1798:       assertFalse(node1.isRegExp());
1799:       assertFalse(node1.isTry());
1800:       assertEquals(39, node1.getType());
1801:       assertFalse(node1.isHook());
1802:       assertFalse(node1.isBlock());
1803:       assertFalse(node1.hasOneChild());
1804:       assertFalse(node1.isCase());
1805:       assertFalse(node1.isScript());
1806:       assertFalse(node4.isString());
1807:       assertFalse(node4.isSwitch());
1808:       assertFalse(node4.isInc());
1809:       assertFalse(node4.isCase());
1810:       assertFalse(node4.isIn());
1811:       assertFalse(node4.isNE());
1812:       assertEquals((-1), node4.getCharno());
1813:       assertFalse(node4.isEmpty());
1814:       assertFalse(node4.isFalse());
1815:       assertFalse(node4.isThrow());
1816:       assertFalse(node4.isArrayLit());
1817:       assertFalse(node4.isFunction());
1818:       assertFalse(node4.isNot());
1819:       assertFalse(node4.isDefaultCase());
1820:       assertFalse(node4.isAnd());
1821:       assertFalse(node4.isExprResult());
1822:       assertFalse(node4.isVoid());
1823:       assertEquals(17, node4.getType());
1824:       assertFalse(node4.isObjectLit());
1825:       assertFalse(node4.isNull());
1826:       assertFalse(node4.isTrue());
1827:       assertFalse(node4.isDebugger());
1828:       assertFalse(node4.isAssign());
1829:       assertFalse(node4.isName());
1830:       assertFalse(node4.isDelProp());
1831:       assertFalse(node4.isCall());
1832:       assertFalse(node4.isGetProp());
1833:       assertFalse(node4.isGetElem());
1834:       assertFalse(node4.isBreak());
1835:       assertFalse(node4.isReturn());
1836:       assertFalse(node4.isComma());
1837:       assertFalse(node4.isTypeOf());
1838:       assertFalse(node4.isDec());
1839:       assertFalse(node4.hasChildren());
1840:       assertFalse(node4.isDo());
1841:       assertFalse(node4.isContinue());
1842:       assertFalse(node4.isWhile());
1843:       assertFalse(node4.isNew());
1844:       assertEquals((-1), node4.getLineno());
1845:       assertFalse(node4.isAdd());
1846:       assertFalse(node4.isOr());
1847:       assertEquals((-1), node4.getSourcePosition());
1848:       assertFalse(node4.isLabelName());
1849:       assertFalse(node4.isStringKey());
1850:       assertFalse(node4.isCast());
1851:       assertFalse(node4.isSetterDef());
1852:       assertFalse(node4.isAssignAdd());
1853:       assertFalse(node4.isVar());
1854:       assertEquals(0, node4.getChildCount());
1855:       assertFalse(node4.isLabel());
1856:       assertFalse(node4.isWith());
1857:       assertFalse(node4.isCatch());
1858:       assertFalse(node4.isScript());
1859:       assertFalse(node4.isParamList());
1860:       assertFalse(node4.isFor());
1861:       assertFalse(node4.isGetterDef());
1862:       assertFalse(node4.isNumber());
1863:       assertFalse(node4.isIf());
1864:       assertFalse(node4.hasOneChild());
1865:       assertFalse(node4.isTry());
1866:       assertFalse(node4.isInstanceOf());
1867:       assertFalse(node4.isThis());
1868:       assertFalse(node4.hasMoreThanOneChild());
1869:       assertFalse(node4.isRegExp());
1870:       assertFalse(node4.isHook());
1871:       assertFalse(node4.isBlock());
1872:       assertNotSame(node4, node2);
1873:       assertSame(node4, node0);
1874:       assertNotSame(node4, node3);
1875:       assertFalse(node1.equals((Object)node3));
1876:       assertFalse(node1.equals((Object)node2));
1877:       assertFalse(node1.equals((Object)node4));
1878:       assertFalse(node1.equals((Object)node0));
1879:       assertFalse(node4.equals((Object)node2));
1880:       assertFalse(node4.equals((Object)node1));
1881:       assertFalse(node4.equals((Object)node3));
1882:       assertNotNull(iterable0);
1883:       assertEquals(48, Node.DIRECTIVES);
1884:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1885:       assertEquals(40, Node.ORIGINALNAME_PROP);
1886:       assertEquals(4095, Node.COLUMN_MASK);
1887:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1888:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1889:       assertEquals(43, Node.IS_CONSTANT_NAME);
1890:       assertEquals(54, Node.SLASH_V);
1891:       assertEquals(1, Node.DECR_FLAG);
1892:       assertEquals(50, Node.FREE_CALL);
1893:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1894:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1895:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1896:       assertEquals(32, Node.INCRDECR_PROP);
1897:       assertEquals(56, Node.CHANGE_TIME);
1898:       assertEquals(12, Node.COLUMN_BITS);
1899:       assertEquals(46, Node.IS_NAMESPACE);
1900:       assertEquals(47, Node.IS_DISPATCHER);
1901:       assertEquals(2, Node.POST_FLAG);
1902:       assertEquals(30, Node.VAR_ARGS_NAME);
1903:       assertEquals(49, Node.DIRECT_EVAL);
1904:       assertEquals(37, Node.OPT_ARG_NAME);
1905:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1906:       assertEquals(52, Node.LENGTH);
1907:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1908:       assertEquals(57, Node.REFLECTED_OBJECT);
1909:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1910:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1911:       assertEquals(57, Node.LAST_PROP);
1912:       assertEquals(36, Node.QUOTED_PROP);
1913:       assertEquals(8, Node.FLAG_NO_THROWS);
1914:       assertEquals(39, Node.EMPTY_BLOCK);
1915:       assertEquals(53, Node.INPUT_ID);
1916:       assertEquals(55, Node.INFERRED_FUNCTION);
1917:       assertEquals(29, Node.JSDOC_INFO_PROP);
1918:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1919:       assertEquals(43, Node.IS_CONSTANT_NAME);
1920:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1921:       assertEquals(53, Node.INPUT_ID);
1922:       assertEquals(55, Node.INFERRED_FUNCTION);
1923:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1924:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1925:       assertEquals(36, Node.QUOTED_PROP);
1926:       assertEquals(56, Node.CHANGE_TIME);
1927:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1928:       assertEquals(32, Node.INCRDECR_PROP);
1929:       assertEquals(48, Node.DIRECTIVES);
1930:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1931:       assertEquals(37, Node.OPT_ARG_NAME);
1932:       assertEquals(12, Node.COLUMN_BITS);
1933:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1934:       assertEquals(4095, Node.COLUMN_MASK);
1935:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1936:       assertEquals(54, Node.SLASH_V);
1937:       assertEquals(57, Node.LAST_PROP);
1938:       assertEquals(49, Node.DIRECT_EVAL);
1939:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1940:       assertEquals(1, Node.DECR_FLAG);
1941:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1942:       assertEquals(52, Node.LENGTH);
1943:       assertEquals(46, Node.IS_NAMESPACE);
1944:       assertEquals(50, Node.FREE_CALL);
1945:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1946:       assertEquals(57, Node.REFLECTED_OBJECT);
1947:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1948:       assertEquals(8, Node.FLAG_NO_THROWS);
1949:       assertEquals(39, Node.EMPTY_BLOCK);
1950:       assertEquals(2, Node.POST_FLAG);
1951:       assertEquals(29, Node.JSDOC_INFO_PROP);
1952:       assertEquals(40, Node.ORIGINALNAME_PROP);
1953:       assertEquals(30, Node.VAR_ARGS_NAME);
1954:       assertEquals(47, Node.IS_DISPATCHER);
1955:       
1956:       Node node5 = node4.cloneTree();
1957:       assertFalse(node1.isGetterDef());
1958:       assertFalse(node1.isDelProp());
1959:       assertFalse(node1.isIf());
1960:       assertFalse(node1.isNE());
1961:       assertFalse(node1.isFor());
1962:       assertFalse(node1.isArrayLit());
1963:       assertFalse(node1.isInc());
1964:       assertFalse(node1.isFunction());
1965:       assertFalse(node1.isTrue());
1966:       assertFalse(node1.isVoid());
1967:       assertFalse(node1.isDefaultCase());
1968:       assertFalse(node1.isIn());
1969:       assertFalse(node1.isEmpty());
1970:       assertFalse(node1.isComma());
1971:       assertFalse(node1.isSetterDef());
1972:       assertFalse(node1.isGetProp());
1973:       assertFalse(node1.isNull());
1974:       assertFalse(node1.isThrow());
1975:       assertFalse(node1.isCall());
1976:       assertFalse(node1.isAnd());
1977:       assertFalse(node1.isFalse());
1978:       assertEquals(29, node1.getLineno());
1979:       assertFalse(node1.isName());
1980:       assertFalse(node1.isBreak());
1981:       assertFalse(node1.isDebugger());
1982:       assertFalse(node1.isWhile());
1983:       assertFalse(node1.isObjectLit());
1984:       assertFalse(node1.isNot());
1985:       assertFalse(node1.isString());
1986:       assertTrue(node1.isNumber());
1987:       assertFalse(node1.isTypeOf());
1988:       assertFalse(node1.isDec());
1989:       assertFalse(node1.isOr());
1990:       assertFalse(node1.isReturn());
1991:       assertFalse(node1.isLabel());
1992:       assertFalse(node1.isAssignAdd());
1993:       assertFalse(node1.hasChildren());
1994:       assertEquals(17, node1.getCharno());
1995:       assertFalse(node1.isContinue());
1996:       assertFalse(node1.hasMoreThanOneChild());
1997:       assertFalse(node1.isLabelName());
1998:       assertFalse(node1.isAssign());
1999:       assertFalse(node1.isGetElem());
2000:       assertFalse(node1.isCast());
2001:       assertFalse(node1.isExprResult());
2002:       assertFalse(node1.isNew());
2003:       assertFalse(node1.isVar());
2004:       assertFalse(node1.isDo());
2005:       assertEquals(118801, node1.getSourcePosition());
2006:       assertFalse(node1.isAdd());
2007:       assertFalse(node1.isThis());
2008:       assertFalse(node1.isParamList());
2009:       assertFalse(node1.isStringKey());
2010:       assertFalse(node1.isCatch());
2011:       assertEquals(0, node1.getChildCount());
2012:       assertFalse(node1.isWith());
2013:       assertFalse(node1.isInstanceOf());
2014:       assertFalse(node1.isSwitch());
2015:       assertFalse(node1.isRegExp());
2016:       assertFalse(node1.isTry());
2017:       assertEquals(39, node1.getType());
2018:       assertFalse(node1.isHook());
2019:       assertFalse(node1.isBlock());
2020:       assertFalse(node1.hasOneChild());
2021:       assertFalse(node1.isCase());
2022:       assertFalse(node1.isScript());
2023:       assertFalse(node4.isString());
2024:       assertFalse(node4.isSwitch());
2025:       assertFalse(node4.isInc());
2026:       assertFalse(node4.isCase());
2027:       assertFalse(node4.isIn());
2028:       assertFalse(node4.isNE());
2029:       assertEquals((-1), node4.getCharno());
2030:       assertFalse(node4.isEmpty());
2031:       assertFalse(node4.isFalse());
2032:       assertFalse(node4.isThrow());
2033:       assertFalse(node4.isArrayLit());
2034:       assertFalse(node4.isFunction());
2035:       assertFalse(node4.isNot());
2036:       assertFalse(node4.isDefaultCase());
2037:       assertFalse(node4.isAnd());
2038:       assertFalse(node4.isExprResult());
2039:       assertFalse(node4.isVoid());
2040:       assertEquals(17, node4.getType());
2041:       assertFalse(node4.isObjectLit());
2042:       assertFalse(node4.isNull());
2043:       assertFalse(node4.isTrue());
2044:       assertFalse(node4.isDebugger());
2045:       assertFalse(node4.isAssign());
2046:       assertFalse(node4.isName());
2047:       assertFalse(node4.isDelProp());
2048:       assertFalse(node4.isCall());
2049:       assertFalse(node4.isGetProp());
2050:       assertFalse(node4.isGetElem());
2051:       assertFalse(node4.isBreak());
2052:       assertFalse(node4.isReturn());
2053:       assertFalse(node4.isComma());
2054:       assertFalse(node4.isTypeOf());
2055:       assertFalse(node4.isDec());
2056:       assertFalse(node4.hasChildren());
2057:       assertFalse(node4.isDo());
2058:       assertFalse(node4.isContinue());
2059:       assertFalse(node4.isWhile());
2060:       assertFalse(node4.isNew());
2061:       assertEquals((-1), node4.getLineno());
2062:       assertFalse(node4.isAdd());
2063:       assertFalse(node4.isOr());
2064:       assertEquals((-1), node4.getSourcePosition());
2065:       assertFalse(node4.isLabelName());
2066:       assertFalse(node4.isStringKey());
2067:       assertFalse(node4.isCast());
2068:       assertFalse(node4.isSetterDef());
2069:       assertFalse(node4.isAssignAdd());
2070:       assertFalse(node4.isVar());
2071:       assertEquals(0, node4.getChildCount());
2072:       assertFalse(node4.isLabel());
2073:       assertFalse(node4.isWith());
2074:       assertFalse(node4.isCatch());
2075:       assertFalse(node4.isScript());
2076:       assertFalse(node4.isParamList());
2077:       assertFalse(node4.isFor());
2078:       assertFalse(node4.isGetterDef());
2079:       assertFalse(node4.isNumber());
2080:       assertFalse(node4.isIf());
2081:       assertFalse(node4.hasOneChild());
2082:       assertFalse(node4.isTry());
2083:       assertFalse(node4.isInstanceOf());
2084:       assertFalse(node4.isThis());
2085:       assertFalse(node4.hasMoreThanOneChild());
2086:       assertFalse(node4.isRegExp());
2087:       assertFalse(node4.isHook());
2088:       assertFalse(node4.isBlock());
2089:       assertFalse(node5.hasOneChild());
2090:       assertFalse(node5.hasChildren());
2091:       assertFalse(node5.isTypeOf());
2092:       assertFalse(node5.isLabelName());
2093:       assertFalse(node5.isAssign());
2094:       assertFalse(node5.isDec());
2095:       assertFalse(node5.isExprResult());
2096:       assertFalse(node5.isGetElem());
2097:       assertFalse(node5.isWith());
2098:       assertFalse(node5.isCast());
2099:       assertFalse(node5.isInstanceOf());
2100:       assertFalse(node5.isReturn());
2101:       assertFalse(node5.isAnd());
2102:       assertFalse(node5.isThis());
2103:       assertFalse(node5.isWhile());
2104:       assertFalse(node5.isNumber());
2105:       assertFalse(node5.isNot());
2106:       assertEquals((-1), node5.getSourcePosition());
2107:       assertFalse(node5.isGetProp());
2108:       assertFalse(node5.isObjectLit());
2109:       assertFalse(node5.isScript());
2110:       assertFalse(node5.isNew());
2111:       assertEquals((-1), node5.getCharno());
2112:       assertFalse(node5.isName());
2113:       assertFalse(node5.isSwitch());
2114:       assertFalse(node5.isVar());
2115:       assertFalse(node5.isStringKey());
2116:       assertFalse(node5.isBreak());
2117:       assertFalse(node5.isComma());
2118:       assertFalse(node5.isCall());
2119:       assertEquals(0, node5.getChildCount());
2120:       assertFalse(node5.isLabel());
2121:       assertFalse(node5.isOr());
2122:       assertFalse(node5.isAssignAdd());
2123:       assertFalse(node5.isDefaultCase());
2124:       assertFalse(node5.isNull());
2125:       assertFalse(node5.isDo());
2126:       assertEquals(17, node5.getType());
2127:       assertFalse(node5.isAdd());
2128:       assertFalse(node5.isEmpty());
2129:       assertFalse(node5.isArrayLit());
2130:       assertFalse(node5.isTry());
2131:       assertFalse(node5.isDebugger());
2132:       assertFalse(node5.isVoid());
2133:       assertFalse(node5.isTrue());
2134:       assertFalse(node5.isFor());
2135:       assertFalse(node5.isIf());
2136:       assertFalse(node5.isDelProp());
2137:       assertFalse(node5.isRegExp());
2138:       assertFalse(node5.isFunction());
2139:       assertFalse(node5.isCatch());
2140:       assertFalse(node5.isParamList());
2141:       assertFalse(node5.isGetterDef());
2142:       assertFalse(node5.isCase());
2143:       assertFalse(node5.isString());
2144:       assertFalse(node5.isHook());
2145:       assertFalse(node5.isThrow());
2146:       assertFalse(node5.isBlock());
2147:       assertFalse(node5.isContinue());
2148:       assertFalse(node5.isFalse());
2149:       assertFalse(node5.hasMoreThanOneChild());
2150:       assertFalse(node5.isIn());
2151:       assertEquals((-1), node5.getLineno());
2152:       assertFalse(node5.isNE());
2153:       assertFalse(node5.isInc());
2154:       assertFalse(node5.isSetterDef());
2155:       assertNotSame(node4, node2);
2156:       assertSame(node4, node0);
2157:       assertNotSame(node4, node5);
2158:       assertNotSame(node4, node3);
2159:       assertNotSame(node5, node3);
2160:       assertNotSame(node5, node2);
2161:       assertNotSame(node5, node0);
2162:       assertNotSame(node5, node4);
2163:       assertFalse(node1.equals((Object)node3));
2164:       assertFalse(node1.equals((Object)node2));
2165:       assertFalse(node1.equals((Object)node4));
2166:       assertFalse(node1.equals((Object)node0));
2167:       assertFalse(node4.equals((Object)node2));
2168:       assertFalse(node4.equals((Object)node1));
2169:       assertFalse(node4.equals((Object)node3));
2170:       assertFalse(node5.equals((Object)node1));
2171:       assertFalse(node5.equals((Object)node3));
2172:       assertFalse(node5.equals((Object)node2));
2173:       assertFalse(node5.equals((Object)node0));
2174:       assertFalse(node5.equals((Object)node4));
2175:       assertNotNull(node5);
2176:       assertEquals(48, Node.DIRECTIVES);
2177:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2178:       assertEquals(40, Node.ORIGINALNAME_PROP);
2179:       assertEquals(4095, Node.COLUMN_MASK);
2180:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2181:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2182:       assertEquals(43, Node.IS_CONSTANT_NAME);
2183:       assertEquals(54, Node.SLASH_V);
2184:       assertEquals(1, Node.DECR_FLAG);
2185:       assertEquals(50, Node.FREE_CALL);
2186:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2187:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2188:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2189:       assertEquals(32, Node.INCRDECR_PROP);
2190:       assertEquals(56, Node.CHANGE_TIME);
2191:       assertEquals(12, Node.COLUMN_BITS);
2192:       assertEquals(46, Node.IS_NAMESPACE);
2193:       assertEquals(47, Node.IS_DISPATCHER);
2194:       assertEquals(2, Node.POST_FLAG);
2195:       assertEquals(30, Node.VAR_ARGS_NAME);
2196:       assertEquals(49, Node.DIRECT_EVAL);
2197:       assertEquals(37, Node.OPT_ARG_NAME);
2198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2199:       assertEquals(52, Node.LENGTH);
2200:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2201:       assertEquals(57, Node.REFLECTED_OBJECT);
2202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2204:       assertEquals(57, Node.LAST_PROP);
2205:       assertEquals(36, Node.QUOTED_PROP);
2206:       assertEquals(8, Node.FLAG_NO_THROWS);
2207:       assertEquals(39, Node.EMPTY_BLOCK);
2208:       assertEquals(53, Node.INPUT_ID);
2209:       assertEquals(55, Node.INFERRED_FUNCTION);
2210:       assertEquals(29, Node.JSDOC_INFO_PROP);
2211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2212:       assertEquals(43, Node.IS_CONSTANT_NAME);
2213:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2214:       assertEquals(53, Node.INPUT_ID);
2215:       assertEquals(55, Node.INFERRED_FUNCTION);
2216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2217:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2218:       assertEquals(36, Node.QUOTED_PROP);
2219:       assertEquals(56, Node.CHANGE_TIME);
2220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2221:       assertEquals(32, Node.INCRDECR_PROP);
2222:       assertEquals(48, Node.DIRECTIVES);
2223:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2224:       assertEquals(37, Node.OPT_ARG_NAME);
2225:       assertEquals(12, Node.COLUMN_BITS);
2226:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2227:       assertEquals(4095, Node.COLUMN_MASK);
2228:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2229:       assertEquals(54, Node.SLASH_V);
2230:       assertEquals(57, Node.LAST_PROP);
2231:       assertEquals(49, Node.DIRECT_EVAL);
2232:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2233:       assertEquals(1, Node.DECR_FLAG);
2234:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2235:       assertEquals(52, Node.LENGTH);
2236:       assertEquals(46, Node.IS_NAMESPACE);
2237:       assertEquals(50, Node.FREE_CALL);
2238:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2239:       assertEquals(57, Node.REFLECTED_OBJECT);
2240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2241:       assertEquals(8, Node.FLAG_NO_THROWS);
2242:       assertEquals(39, Node.EMPTY_BLOCK);
2243:       assertEquals(2, Node.POST_FLAG);
2244:       assertEquals(29, Node.JSDOC_INFO_PROP);
2245:       assertEquals(40, Node.ORIGINALNAME_PROP);
2246:       assertEquals(30, Node.VAR_ARGS_NAME);
2247:       assertEquals(47, Node.IS_DISPATCHER);
2248:       assertEquals(40, Node.ORIGINALNAME_PROP);
2249:       assertEquals(50, Node.FREE_CALL);
2250:       assertEquals(57, Node.REFLECTED_OBJECT);
2251:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2252:       assertEquals(48, Node.DIRECTIVES);
2253:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2254:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2255:       assertEquals(4095, Node.COLUMN_MASK);
2256:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2257:       assertEquals(30, Node.VAR_ARGS_NAME);
2258:       assertEquals(49, Node.DIRECT_EVAL);
2259:       assertEquals(57, Node.LAST_PROP);
2260:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2261:       assertEquals(8, Node.FLAG_NO_THROWS);
2262:       assertEquals(39, Node.EMPTY_BLOCK);
2263:       assertEquals(53, Node.INPUT_ID);
2264:       assertEquals(36, Node.QUOTED_PROP);
2265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2266:       assertEquals(55, Node.INFERRED_FUNCTION);
2267:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2268:       assertEquals(29, Node.JSDOC_INFO_PROP);
2269:       assertEquals(52, Node.LENGTH);
2270:       assertEquals(47, Node.IS_DISPATCHER);
2271:       assertEquals(56, Node.CHANGE_TIME);
2272:       assertEquals(2, Node.POST_FLAG);
2273:       assertEquals(37, Node.OPT_ARG_NAME);
2274:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2275:       assertEquals(1, Node.DECR_FLAG);
2276:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2277:       assertEquals(32, Node.INCRDECR_PROP);
2278:       assertEquals(46, Node.IS_NAMESPACE);
2279:       assertEquals(12, Node.COLUMN_BITS);
2280:       assertEquals(43, Node.IS_CONSTANT_NAME);
2281:       assertEquals(54, Node.SLASH_V);
2282:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2283:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2284:       
2285:       Object object0 = new Object();
2286:       assertNotNull(object0);
2287:       
2288:       node4.putProp(21, object0);
2289:       assertFalse(node1.isGetterDef());
2290:       assertFalse(node1.isDelProp());
2291:       assertFalse(node1.isIf());
2292:       assertFalse(node1.isNE());
2293:       assertFalse(node1.isFor());
2294:       assertFalse(node1.isArrayLit());
2295:       assertFalse(node1.isInc());
2296:       assertFalse(node1.isFunction());
2297:       assertFalse(node1.isTrue());
2298:       assertFalse(node1.isVoid());
2299:       assertFalse(node1.isDefaultCase());
2300:       assertFalse(node1.isIn());
2301:       assertFalse(node1.isEmpty());
2302:       assertFalse(node1.isComma());
2303:       assertFalse(node1.isSetterDef());
2304:       assertFalse(node1.isGetProp());
2305:       assertFalse(node1.isNull());
2306:       assertFalse(node1.isThrow());
2307:       assertFalse(node1.isCall());
2308:       assertFalse(node1.isAnd());
2309:       assertFalse(node1.isFalse());
2310:       assertEquals(29, node1.getLineno());
2311:       assertFalse(node1.isName());
2312:       assertFalse(node1.isBreak());
2313:       assertFalse(node1.isDebugger());
2314:       assertFalse(node1.isWhile());
2315:       assertFalse(node1.isObjectLit());
2316:       assertFalse(node1.isNot());
2317:       assertFalse(node1.isString());
2318:       assertTrue(node1.isNumber());
2319:       assertFalse(node1.isTypeOf());
2320:       assertFalse(node1.isDec());
2321:       assertFalse(node1.isOr());
2322:       assertFalse(node1.isReturn());
2323:       assertFalse(node1.isLabel());
2324:       assertFalse(node1.isAssignAdd());
2325:       assertFalse(node1.hasChildren());
2326:       assertEquals(17, node1.getCharno());
2327:       assertFalse(node1.isContinue());
2328:       assertFalse(node1.hasMoreThanOneChild());
2329:       assertFalse(node1.isLabelName());
2330:       assertFalse(node1.isAssign());
2331:       assertFalse(node1.isGetElem());
2332:       assertFalse(node1.isCast());
2333:       assertFalse(node1.isExprResult());
2334:       assertFalse(node1.isNew());
2335:       assertFalse(node1.isVar());
2336:       assertFalse(node1.isDo());
2337:       assertEquals(118801, node1.getSourcePosition());
2338:       assertFalse(node1.isAdd());
2339:       assertFalse(node1.isThis());
2340:       assertFalse(node1.isParamList());
2341:       assertFalse(node1.isStringKey());
2342:       assertFalse(node1.isCatch());
2343:       assertEquals(0, node1.getChildCount());
2344:       assertFalse(node1.isWith());
2345:       assertFalse(node1.isInstanceOf());
2346:       assertFalse(node1.isSwitch());
2347:       assertFalse(node1.isRegExp());
2348:       assertFalse(node1.isTry());
2349:       assertEquals(39, node1.getType());
2350:       assertFalse(node1.isHook());
2351:       assertFalse(node1.isBlock());
2352:       assertFalse(node1.hasOneChild());
2353:       assertFalse(node1.isCase());
2354:       assertFalse(node1.isScript());
2355:       assertFalse(node4.isString());
2356:       assertFalse(node4.isSwitch());
2357:       assertFalse(node4.isInc());
2358:       assertFalse(node4.isCase());
2359:       assertFalse(node4.isIn());
2360:       assertFalse(node4.isNE());
2361:       assertEquals((-1), node4.getCharno());
2362:       assertFalse(node4.isEmpty());
2363:       assertFalse(node4.isFalse());
2364:       assertFalse(node4.isThrow());
2365:       assertFalse(node4.isArrayLit());
2366:       assertFalse(node4.isFunction());
2367:       assertFalse(node4.isNot());
2368:       assertFalse(node4.isDefaultCase());
2369:       assertFalse(node4.isAnd());
2370:       assertFalse(node4.isExprResult());
2371:       assertFalse(node4.isVoid());
2372:       assertEquals(17, node4.getType());
2373:       assertFalse(node4.isObjectLit());
2374:       assertFalse(node4.isNull());
2375:       assertFalse(node4.isTrue());
2376:       assertFalse(node4.isDebugger());
2377:       assertFalse(node4.isAssign());
2378:       assertFalse(node4.isName());
2379:       assertFalse(node4.isDelProp());
2380:       assertFalse(node4.isCall());
2381:       assertFalse(node4.isGetProp());
2382:       assertFalse(node4.isGetElem());
2383:       assertFalse(node4.isBreak());
2384:       assertFalse(node4.isReturn());
2385:       assertFalse(node4.isComma());
2386:       assertFalse(node4.isTypeOf());
2387:       assertFalse(node4.isDec());
2388:       assertFalse(node4.hasChildren());
2389:       assertFalse(node4.isDo());
2390:       assertFalse(node4.isContinue());
2391:       assertFalse(node4.isWhile());
2392:       assertFalse(node4.isNew());
2393:       assertEquals((-1), node4.getLineno());
2394:       assertFalse(node4.isAdd());
2395:       assertFalse(node4.isOr());
2396:       assertEquals((-1), node4.getSourcePosition());
2397:       assertFalse(node4.isLabelName());
2398:       assertFalse(node4.isStringKey());
2399:       assertFalse(node4.isCast());
2400:       assertFalse(node4.isSetterDef());
2401:       assertFalse(node4.isAssignAdd());
2402:       assertFalse(node4.isVar());
2403:       assertEquals(0, node4.getChildCount());
2404:       assertFalse(node4.isLabel());
2405:       assertFalse(node4.isWith());
2406:       assertFalse(node4.isCatch());
2407:       assertFalse(node4.isScript());
2408:       assertFalse(node4.isParamList());
2409:       assertFalse(node4.isFor());
2410:       assertFalse(node4.isGetterDef());
2411:       assertFalse(node4.isNumber());
2412:       assertFalse(node4.isIf());
2413:       assertFalse(node4.hasOneChild());
2414:       assertFalse(node4.isTry());
2415:       assertFalse(node4.isInstanceOf());
2416:       assertFalse(node4.isThis());
2417:       assertFalse(node4.hasMoreThanOneChild());
2418:       assertFalse(node4.isRegExp());
2419:       assertFalse(node4.isHook());
2420:       assertFalse(node4.isBlock());
2421:       assertNotSame(node4, node2);
2422:       assertSame(node4, node0);
2423:       assertNotSame(node4, node5);
2424:       assertNotSame(node4, node3);
2425:       assertFalse(node1.equals((Object)node3));
2426:       assertFalse(node1.equals((Object)node2));
2427:       assertFalse(node1.equals((Object)node4));
2428:       assertFalse(node1.equals((Object)node0));
2429:       assertFalse(node1.equals((Object)node5));
2430:       assertFalse(node4.equals((Object)node2));
2431:       assertFalse(node4.equals((Object)node1));
2432:       assertFalse(node4.equals((Object)node5));
2433:       assertFalse(node4.equals((Object)node3));
2434:       assertEquals(48, Node.DIRECTIVES);
2435:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2436:       assertEquals(40, Node.ORIGINALNAME_PROP);
2437:       assertEquals(4095, Node.COLUMN_MASK);
2438:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2439:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2440:       assertEquals(43, Node.IS_CONSTANT_NAME);
2441:       
2442:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
2443:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
2444:       assertEquals(51, node_SideEffectFlags0.valueOf());
2445:       assertNotNull(node_SideEffectFlags0);
2446:       
2447:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
2448:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
2449:       assertEquals(31, node_SideEffectFlags1.valueOf());
2450:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
2451:       assertEquals(31, node_SideEffectFlags0.valueOf());
2452:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2453:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2454:       assertNotNull(node_SideEffectFlags1);
2455:       
2456:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
2457:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
2458:       assertEquals(23, node_SideEffectFlags2.valueOf());
2459:       assertEquals(23, node_SideEffectFlags0.valueOf());
2460:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
2461:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
2462:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
2463:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2464:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2465:       assertNotNull(node_SideEffectFlags2);
2466:       
2467:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
2468:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
2469:       assertEquals(23, node_SideEffectFlags1.valueOf());
2470:       assertEquals(23, node_SideEffectFlags3.valueOf());
2471:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
2472:       assertEquals(23, node_SideEffectFlags0.valueOf());
2473:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
2474:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
2475:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2476:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2477:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
2478:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
2479:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
2480:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2481:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2482:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2483:       assertNotNull(node_SideEffectFlags3);
2484:       
2485:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
2486:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2487:       assertEquals(0, node_SideEffectFlags1.valueOf());
2488:       assertEquals(0, node_SideEffectFlags3.valueOf());
2489:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
2490:       assertEquals(0, node_SideEffectFlags4.valueOf());
2491:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
2492:       assertEquals(0, node_SideEffectFlags0.valueOf());
2493:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2494:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
2495:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2496:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2497:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
2498:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
2499:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
2500:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
2501:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
2502:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
2503:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
2504:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
2505:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
2506:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
2507:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2508:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2509:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2510:       assertNotNull(node_SideEffectFlags4);
2511:       
2512:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesGlobalState();
2513:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
2514:       assertEquals(0, node_SideEffectFlags2.valueOf());
2515:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
2516:       assertEquals(0, node_SideEffectFlags5.valueOf());
2517:       assertEquals(0, node_SideEffectFlags0.valueOf());
2518:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2519:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
2520:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
2521:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
2522:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
2523:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
2524:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
2525:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
2526:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
2527:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
2528:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
2529:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
2530:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2531:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2532:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
2533:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2534:       assertNotNull(node_SideEffectFlags5);
2535:       
2536:       // Undeclared exception!
2537:       try { 
2538:         node3.setSideEffectFlags(node_SideEffectFlags1);
2539:         fail("Expecting exception: IllegalStateException");
2540:       
2541:       } catch(IllegalStateException e) {
2542:          //
2543:          // 53
2544:          //
2545:          verifyException("com.google.javascript.rhino.Token", e);
2546:       }
2547:   }
2548: }
RegularFileObject[/tmp/EvoSuite_101_1628161063223/com/google/javascript/rhino/Node_101_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:57:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_101_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_101_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_101_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.jstype.TemplatizedType",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.jstype.TernaryValue",
353:       "com.google.javascript.rhino.jstype.JSType$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.common.collect.Platform",
362:       "com.google.javascript.rhino.JSTypeExpression",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
367:       "com.google.common.collect.ImmutableList$1",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.JSDocInfo$Marker"
370:     );
371:   }
372: }

[MASTER] 10:57:43.799 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(17);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isGetProp());
assertEquals(17, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertNotNull(node0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
assertFalse(boolean0);

Node node1 = Node.newNumber((double) 38, 29, 17);
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(29, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(17, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

boolean boolean1 = node1.isNoSideEffectsCall();
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(29, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(17, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(boolean1);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

node0.addSuppression("k^");
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isGetProp());
assertEquals(17, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.equals((Object)node1));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

Node node2 = new Node(56, node1, node0, node0, node0, 51, 56);
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isGetProp());
assertEquals(17, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(29, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(17, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals(56, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isReturn());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertEquals(208952, node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertEquals(56, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertEquals(51, node2.getLineno());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isCase());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertTrue(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isAssign());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isDebugger());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertEquals(2, node2.getChildCount());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);

Node node3 = new Node(53);
assertFalse(node3.isObjectLit());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isAnd());
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertFalse(node3.isAssign());
assertFalse(node3.isHook());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isExprResult());
assertFalse(node3.isTypeOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isBreak());
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isNumber());
assertFalse(node3.isDo());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isEmpty());
assertFalse(node3.isAdd());
assertFalse(node3.isCase());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isSetterDef());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isCall());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertFalse(node3.isNE());
assertFalse(node3.isRegExp());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isIf());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isIn());
assertFalse(node3.isContinue());
assertFalse(node3.isReturn());
assertFalse(node3.isInc());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertEquals(53, node3.getType());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertNotNull(node3);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);

boolean boolean2 = node1.isInc();
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(29, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(17, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(boolean2);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

boolean boolean3 = node2.isRegExp();
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isInc());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isParamList());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isGetProp());
assertEquals(17, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(29, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(17, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertEquals(56, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isReturn());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertEquals(208952, node2.getSourcePosition());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertEquals(56, node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertEquals(51, node2.getLineno());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isCase());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertTrue(node2.hasChildren());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isAssign());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isDebugger());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertEquals(2, node2.getChildCount());
assertNotSame(node0, node3);
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertNotSame(node2, node3);
assertFalse(boolean3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);

Node node4 = node1.getLastSibling();
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(29, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(17, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node4.isString());
assertFalse(node4.isSwitch());
assertFalse(node4.isInc());
assertFalse(node4.isCase());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isEmpty());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFunction());
assertFalse(node4.isNot());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isAnd());
assertFalse(node4.isExprResult());
assertFalse(node4.isVoid());
assertEquals(17, node4.getType());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isAssign());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isCall());
assertFalse(node4.isGetProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isBreak());
assertFalse(node4.isReturn());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isDo());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isNew());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isAdd());
assertFalse(node4.isOr());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isCast());
assertFalse(node4.isSetterDef());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isVar());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertFalse(node4.isWith());
assertFalse(node4.isCatch());
assertFalse(node4.isScript());
assertFalse(node4.isParamList());
assertFalse(node4.isFor());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isIf());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isThis());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isRegExp());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertNotSame(node4, node2);
assertSame(node4, node0);
assertNotSame(node4, node3);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertNotNull(node4);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node4.getJsDocBuilderForNode();
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(29, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(17, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node4.isString());
assertFalse(node4.isSwitch());
assertFalse(node4.isInc());
assertFalse(node4.isCase());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isEmpty());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFunction());
assertFalse(node4.isNot());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isAnd());
assertFalse(node4.isExprResult());
assertFalse(node4.isVoid());
assertEquals(17, node4.getType());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isAssign());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isCall());
assertFalse(node4.isGetProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isBreak());
assertFalse(node4.isReturn());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isDo());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isNew());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isAdd());
assertFalse(node4.isOr());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isCast());
assertFalse(node4.isSetterDef());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isVar());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertFalse(node4.isWith());
assertFalse(node4.isCatch());
assertFalse(node4.isScript());
assertFalse(node4.isParamList());
assertFalse(node4.isFor());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isIf());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isThis());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isRegExp());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertNotSame(node4, node2);
assertSame(node4, node0);
assertNotSame(node4, node3);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

Iterable<Node> iterable0 = node4.children();
assertFalse(iterable0.contains(node0));
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(29, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(17, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node4.isString());
assertFalse(node4.isSwitch());
assertFalse(node4.isInc());
assertFalse(node4.isCase());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isEmpty());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFunction());
assertFalse(node4.isNot());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isAnd());
assertFalse(node4.isExprResult());
assertFalse(node4.isVoid());
assertEquals(17, node4.getType());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isAssign());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isCall());
assertFalse(node4.isGetProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isBreak());
assertFalse(node4.isReturn());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isDo());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isNew());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isAdd());
assertFalse(node4.isOr());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isCast());
assertFalse(node4.isSetterDef());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isVar());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertFalse(node4.isWith());
assertFalse(node4.isCatch());
assertFalse(node4.isScript());
assertFalse(node4.isParamList());
assertFalse(node4.isFor());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isIf());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isThis());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isRegExp());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertNotSame(node4, node2);
assertSame(node4, node0);
assertNotSame(node4, node3);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertNotNull(iterable0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);

Node node5 = node4.cloneTree();
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(29, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(17, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node4.isString());
assertFalse(node4.isSwitch());
assertFalse(node4.isInc());
assertFalse(node4.isCase());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isEmpty());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFunction());
assertFalse(node4.isNot());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isAnd());
assertFalse(node4.isExprResult());
assertFalse(node4.isVoid());
assertEquals(17, node4.getType());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isAssign());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isCall());
assertFalse(node4.isGetProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isBreak());
assertFalse(node4.isReturn());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isDo());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isNew());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isAdd());
assertFalse(node4.isOr());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isCast());
assertFalse(node4.isSetterDef());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isVar());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertFalse(node4.isWith());
assertFalse(node4.isCatch());
assertFalse(node4.isScript());
assertFalse(node4.isParamList());
assertFalse(node4.isFor());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isIf());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isThis());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isRegExp());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node5.hasOneChild());
assertFalse(node5.hasChildren());
assertFalse(node5.isTypeOf());
assertFalse(node5.isLabelName());
assertFalse(node5.isAssign());
assertFalse(node5.isDec());
assertFalse(node5.isExprResult());
assertFalse(node5.isGetElem());
assertFalse(node5.isWith());
assertFalse(node5.isCast());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isReturn());
assertFalse(node5.isAnd());
assertFalse(node5.isThis());
assertFalse(node5.isWhile());
assertFalse(node5.isNumber());
assertFalse(node5.isNot());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isGetProp());
assertFalse(node5.isObjectLit());
assertFalse(node5.isScript());
assertFalse(node5.isNew());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isName());
assertFalse(node5.isSwitch());
assertFalse(node5.isVar());
assertFalse(node5.isStringKey());
assertFalse(node5.isBreak());
assertFalse(node5.isComma());
assertFalse(node5.isCall());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isLabel());
assertFalse(node5.isOr());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isNull());
assertFalse(node5.isDo());
assertEquals(17, node5.getType());
assertFalse(node5.isAdd());
assertFalse(node5.isEmpty());
assertFalse(node5.isArrayLit());
assertFalse(node5.isTry());
assertFalse(node5.isDebugger());
assertFalse(node5.isVoid());
assertFalse(node5.isTrue());
assertFalse(node5.isFor());
assertFalse(node5.isIf());
assertFalse(node5.isDelProp());
assertFalse(node5.isRegExp());
assertFalse(node5.isFunction());
assertFalse(node5.isCatch());
assertFalse(node5.isParamList());
assertFalse(node5.isGetterDef());
assertFalse(node5.isCase());
assertFalse(node5.isString());
assertFalse(node5.isHook());
assertFalse(node5.isThrow());
assertFalse(node5.isBlock());
assertFalse(node5.isContinue());
assertFalse(node5.isFalse());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isIn());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isNE());
assertFalse(node5.isInc());
assertFalse(node5.isSetterDef());
assertNotSame(node4, node2);
assertSame(node4, node0);
assertNotSame(node4, node5);
assertNotSame(node4, node3);
assertNotSame(node5, node3);
assertNotSame(node5, node2);
assertNotSame(node5, node0);
assertNotSame(node5, node4);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertNotNull(node5);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Object object0 = new Object();
assertNotNull(object0);

node4.putProp(21, object0);
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isThrow());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertEquals(29, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertFalse(node1.isDebugger());
assertFalse(node1.isWhile());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertEquals(17, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isAdd());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSwitch());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertEquals(39, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node4.isString());
assertFalse(node4.isSwitch());
assertFalse(node4.isInc());
assertFalse(node4.isCase());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isEmpty());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isArrayLit());
assertFalse(node4.isFunction());
assertFalse(node4.isNot());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isAnd());
assertFalse(node4.isExprResult());
assertFalse(node4.isVoid());
assertEquals(17, node4.getType());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isAssign());
assertFalse(node4.isName());
assertFalse(node4.isDelProp());
assertFalse(node4.isCall());
assertFalse(node4.isGetProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isBreak());
assertFalse(node4.isReturn());
assertFalse(node4.isComma());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isDo());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isNew());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isAdd());
assertFalse(node4.isOr());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isCast());
assertFalse(node4.isSetterDef());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isVar());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isLabel());
assertFalse(node4.isWith());
assertFalse(node4.isCatch());
assertFalse(node4.isScript());
assertFalse(node4.isParamList());
assertFalse(node4.isFor());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node4.isIf());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isThis());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isRegExp());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertNotSame(node4, node2);
assertSame(node4, node0);
assertNotSame(node4, node5);
assertNotSame(node4, node3);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node5));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node3));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(51, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(23, node_SideEffectFlags2.valueOf());
assertEquals(23, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(23, node_SideEffectFlags1.valueOf());
assertEquals(23, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(23, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesGlobalState();
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertNotNull(node_SideEffectFlags5);

node3.setSideEffectFlags(node_SideEffectFlags1);

[MASTER] 10:57:44.244 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_103_1628161063818/com/google/javascript/rhino/Node_103_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_103_1628161063818/com/google/javascript/rhino/Node_103_tmp__ESTest_scaffolding.java]]
[MASTER] 10:57:44.244 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:44.244 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:57:44.245 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1739
[MASTER] 10:57:44.247 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_103_1628161063818/com/google/javascript/rhino/Node_103_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:57:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_103_tmp__ESTest extends Node_103_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = new Node(17, 17, 17);
24:       assertFalse(node0.isReturn());
25:       assertFalse(node0.isLabel());
26:       assertFalse(node0.isAssignAdd());
27:       assertFalse(node0.isDo());
28:       assertFalse(node0.isWhile());
29:       assertEquals(69649, node0.getSourcePosition());
30:       assertFalse(node0.hasChildren());
31:       assertFalse(node0.isGetElem());
32:       assertEquals(17, node0.getCharno());
33:       assertFalse(node0.isContinue());
34:       assertFalse(node0.hasMoreThanOneChild());
35:       assertFalse(node0.isTypeOf());
36:       assertFalse(node0.isDec());
37:       assertFalse(node0.isAssign());
38:       assertFalse(node0.isVar());
39:       assertFalse(node0.isAdd());
40:       assertFalse(node0.isExprResult());
41:       assertFalse(node0.isCall());
42:       assertFalse(node0.isNew());
43:       assertFalse(node0.isName());
44:       assertFalse(node0.isNull());
45:       assertFalse(node0.isOr());
46:       assertFalse(node0.isInstanceOf());
47:       assertEquals(17, node0.getType());
48:       assertFalse(node0.isCatch());
49:       assertFalse(node0.isParamList());
50:       assertFalse(node0.isWith());
51:       assertFalse(node0.isDefaultCase());
52:       assertFalse(node0.isThis());
53:       assertFalse(node0.isRegExp());
54:       assertEquals(0, node0.getChildCount());
55:       assertFalse(node0.isHook());
56:       assertFalse(node0.isBlock());
57:       assertFalse(node0.isSwitch());
58:       assertFalse(node0.hasOneChild());
59:       assertFalse(node0.isArrayLit());
60:       assertFalse(node0.isLabelName());
61:       assertFalse(node0.isTry());
62:       assertFalse(node0.isStringKey());
63:       assertFalse(node0.isScript());
64:       assertFalse(node0.isNumber());
65:       assertFalse(node0.isGetterDef());
66:       assertFalse(node0.isIn());
67:       assertFalse(node0.isCase());
68:       assertFalse(node0.isDelProp());
69:       assertFalse(node0.isFor());
70:       assertFalse(node0.isInc());
71:       assertFalse(node0.isVoid());
72:       assertFalse(node0.isIf());
73:       assertFalse(node0.isNE());
74:       assertFalse(node0.isEmpty());
75:       assertFalse(node0.isTrue());
76:       assertFalse(node0.isSetterDef());
77:       assertFalse(node0.isAnd());
78:       assertFalse(node0.isGetProp());
79:       assertFalse(node0.isBreak());
80:       assertFalse(node0.isThrow());
81:       assertFalse(node0.isComma());
82:       assertFalse(node0.isFunction());
83:       assertFalse(node0.isFalse());
84:       assertEquals(17, node0.getLineno());
85:       assertFalse(node0.isCast());
86:       assertFalse(node0.isString());
87:       assertFalse(node0.isObjectLit());
88:       assertFalse(node0.isDebugger());
89:       assertFalse(node0.isNot());
90:       assertNotNull(node0);
91:       assertEquals(4095, Node.COLUMN_MASK);
92:       assertEquals(55, Node.INFERRED_FUNCTION);
93:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
94:       assertEquals(48, Node.DIRECTIVES);
95:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(40, Node.ORIGINALNAME_PROP);
98:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
99:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
100:       assertEquals(43, Node.IS_CONSTANT_NAME);
101:       assertEquals(54, Node.SLASH_V);
102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
103:       assertEquals(50, Node.FREE_CALL);
104:       assertEquals(12, Node.COLUMN_BITS);
105:       assertEquals(46, Node.IS_NAMESPACE);
106:       assertEquals(32, Node.INCRDECR_PROP);
107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
108:       assertEquals(57, Node.LAST_PROP);
109:       assertEquals(49, Node.DIRECT_EVAL);
110:       assertEquals(1, Node.DECR_FLAG);
111:       assertEquals(37, Node.OPT_ARG_NAME);
112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
113:       assertEquals(47, Node.IS_DISPATCHER);
114:       assertEquals(2, Node.POST_FLAG);
115:       assertEquals(30, Node.VAR_ARGS_NAME);
116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
117:       assertEquals(57, Node.REFLECTED_OBJECT);
118:       assertEquals(29, Node.JSDOC_INFO_PROP);
119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
120:       assertEquals(8, Node.FLAG_NO_THROWS);
121:       assertEquals(39, Node.EMPTY_BLOCK);
122:       assertEquals(56, Node.CHANGE_TIME);
123:       assertEquals(53, Node.INPUT_ID);
124:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
125:       assertEquals(52, Node.LENGTH);
126:       assertEquals(36, Node.QUOTED_PROP);
127:       
128:       boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
129:       assertFalse(boolean0);
130:       
131:       Node node1 = Node.newNumber((double) 38, 29, 17);
132:       assertFalse(node1.isComma());
133:       assertFalse(node1.isThis());
134:       assertFalse(node1.isBreak());
135:       assertFalse(node1.isGetProp());
136:       assertFalse(node1.isThrow());
137:       assertFalse(node1.isNot());
138:       assertFalse(node1.isObjectLit());
139:       assertFalse(node1.isInc());
140:       assertFalse(node1.isSwitch());
141:       assertFalse(node1.isAnd());
142:       assertFalse(node1.isCast());
143:       assertFalse(node1.isFalse());
144:       assertFalse(node1.isNE());
145:       assertFalse(node1.isGetterDef());
146:       assertEquals(17, node1.getCharno());
147:       assertFalse(node1.isLabelName());
148:       assertFalse(node1.isFor());
149:       assertFalse(node1.isIf());
150:       assertFalse(node1.hasOneChild());
151:       assertEquals(118801, node1.getSourcePosition());
152:       assertFalse(node1.isIn());
153:       assertFalse(node1.isScript());
154:       assertFalse(node1.isRegExp());
155:       assertEquals(39, node1.getType());
156:       assertFalse(node1.isCase());
157:       assertFalse(node1.isBlock());
158:       assertFalse(node1.isTry());
159:       assertFalse(node1.isInstanceOf());
160:       assertFalse(node1.isHook());
161:       assertFalse(node1.isWith());
162:       assertFalse(node1.hasMoreThanOneChild());
163:       assertFalse(node1.isCatch());
164:       assertFalse(node1.isNull());
165:       assertFalse(node1.isSetterDef());
166:       assertFalse(node1.isStringKey());
167:       assertFalse(node1.isName());
168:       assertFalse(node1.isParamList());
169:       assertFalse(node1.isAdd());
170:       assertFalse(node1.isDebugger());
171:       assertFalse(node1.isNew());
172:       assertFalse(node1.isDo());
173:       assertFalse(node1.isDefaultCase());
174:       assertEquals(29, node1.getLineno());
175:       assertEquals(0, node1.getChildCount());
176:       assertFalse(node1.isVar());
177:       assertFalse(node1.isArrayLit());
178:       assertFalse(node1.isLabel());
179:       assertFalse(node1.isFunction());
180:       assertFalse(node1.isContinue());
181:       assertFalse(node1.isDec());
182:       assertFalse(node1.isTypeOf());
183:       assertFalse(node1.isDelProp());
184:       assertFalse(node1.hasChildren());
185:       assertFalse(node1.isAssignAdd());
186:       assertTrue(node1.isNumber());
187:       assertFalse(node1.isOr());
188:       assertFalse(node1.isEmpty());
189:       assertFalse(node1.isString());
190:       assertFalse(node1.isExprResult());
191:       assertFalse(node1.isTrue());
192:       assertFalse(node1.isVoid());
193:       assertFalse(node1.isWhile());
194:       assertFalse(node1.isReturn());
195:       assertFalse(node1.isCall());
196:       assertFalse(node1.isGetElem());
197:       assertFalse(node1.isAssign());
198:       assertFalse(node1.equals((Object)node0));
199:       assertNotNull(node1);
200:       assertEquals(37, Node.OPT_ARG_NAME);
201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
202:       assertEquals(56, Node.CHANGE_TIME);
203:       assertEquals(47, Node.IS_DISPATCHER);
204:       assertEquals(12, Node.COLUMN_BITS);
205:       assertEquals(32, Node.INCRDECR_PROP);
206:       assertEquals(46, Node.IS_NAMESPACE);
207:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
208:       assertEquals(1, Node.DECR_FLAG);
209:       assertEquals(29, Node.JSDOC_INFO_PROP);
210:       assertEquals(51, Node.STATIC_SOURCE_FILE);
211:       assertEquals(15, Node.NO_SIDE_EFFECTS);
212:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
213:       assertEquals(57, Node.REFLECTED_OBJECT);
214:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
215:       assertEquals(49, Node.DIRECT_EVAL);
216:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
217:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
218:       assertEquals(4095, Node.COLUMN_MASK);
219:       assertEquals(48, Node.DIRECTIVES);
220:       assertEquals(39, Node.EMPTY_BLOCK);
221:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
222:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
223:       assertEquals(50, Node.FREE_CALL);
224:       assertEquals(36, Node.QUOTED_PROP);
225:       assertEquals(55, Node.INFERRED_FUNCTION);
226:       assertEquals(52, Node.LENGTH);
227:       assertEquals(8, Node.FLAG_NO_THROWS);
228:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
229:       assertEquals(53, Node.INPUT_ID);
230:       assertEquals(54, Node.SLASH_V);
231:       assertEquals(43, Node.IS_CONSTANT_NAME);
232:       assertEquals(57, Node.LAST_PROP);
233:       assertEquals(30, Node.VAR_ARGS_NAME);
234:       assertEquals(40, Node.ORIGINALNAME_PROP);
235:       assertEquals(2, Node.POST_FLAG);
236:       
237:       boolean boolean1 = node1.isNoSideEffectsCall();
238:       assertFalse(node1.isComma());
239:       assertFalse(node1.isThis());
240:       assertFalse(node1.isBreak());
241:       assertFalse(node1.isGetProp());
242:       assertFalse(node1.isThrow());
243:       assertFalse(node1.isNot());
244:       assertFalse(node1.isObjectLit());
245:       assertFalse(node1.isInc());
246:       assertFalse(node1.isSwitch());
247:       assertFalse(node1.isAnd());
248:       assertFalse(node1.isCast());
249:       assertFalse(node1.isFalse());
250:       assertFalse(node1.isNE());
251:       assertFalse(node1.isGetterDef());
252:       assertEquals(17, node1.getCharno());
253:       assertFalse(node1.isLabelName());
254:       assertFalse(node1.isFor());
255:       assertFalse(node1.isIf());
256:       assertFalse(node1.hasOneChild());
257:       assertEquals(118801, node1.getSourcePosition());
258:       assertFalse(node1.isIn());
259:       assertFalse(node1.isScript());
260:       assertFalse(node1.isRegExp());
261:       assertEquals(39, node1.getType());
262:       assertFalse(node1.isCase());
263:       assertFalse(node1.isBlock());
264:       assertFalse(node1.isTry());
265:       assertFalse(node1.isInstanceOf());
266:       assertFalse(node1.isHook());
267:       assertFalse(node1.isWith());
268:       assertFalse(node1.hasMoreThanOneChild());
269:       assertFalse(node1.isCatch());
270:       assertFalse(node1.isNull());
271:       assertFalse(node1.isSetterDef());
272:       assertFalse(node1.isStringKey());
273:       assertFalse(node1.isName());
274:       assertFalse(node1.isParamList());
275:       assertFalse(node1.isAdd());
276:       assertFalse(node1.isDebugger());
277:       assertFalse(node1.isNew());
278:       assertFalse(node1.isDo());
279:       assertFalse(node1.isDefaultCase());
280:       assertEquals(29, node1.getLineno());
281:       assertEquals(0, node1.getChildCount());
282:       assertFalse(node1.isVar());
283:       assertFalse(node1.isArrayLit());
284:       assertFalse(node1.isLabel());
285:       assertFalse(node1.isFunction());
286:       assertFalse(node1.isContinue());
287:       assertFalse(node1.isDec());
288:       assertFalse(node1.isTypeOf());
289:       assertFalse(node1.isDelProp());
290:       assertFalse(node1.hasChildren());
291:       assertFalse(node1.isAssignAdd());
292:       assertTrue(node1.isNumber());
293:       assertFalse(node1.isOr());
294:       assertFalse(node1.isEmpty());
295:       assertFalse(node1.isString());
296:       assertFalse(node1.isExprResult());
297:       assertFalse(node1.isTrue());
298:       assertFalse(node1.isVoid());
299:       assertFalse(node1.isWhile());
300:       assertFalse(node1.isReturn());
301:       assertFalse(node1.isCall());
302:       assertFalse(node1.isGetElem());
303:       assertFalse(node1.isAssign());
304:       assertFalse(boolean1);
305:       assertFalse(node1.equals((Object)node0));
306:       assertTrue(boolean1 == boolean0);
307:       assertEquals(37, Node.OPT_ARG_NAME);
308:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
309:       assertEquals(56, Node.CHANGE_TIME);
310:       assertEquals(47, Node.IS_DISPATCHER);
311:       assertEquals(12, Node.COLUMN_BITS);
312:       assertEquals(32, Node.INCRDECR_PROP);
313:       assertEquals(46, Node.IS_NAMESPACE);
314:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
315:       assertEquals(1, Node.DECR_FLAG);
316:       assertEquals(29, Node.JSDOC_INFO_PROP);
317:       assertEquals(51, Node.STATIC_SOURCE_FILE);
318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
322:       assertEquals(49, Node.DIRECT_EVAL);
323:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
324:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
325:       assertEquals(4095, Node.COLUMN_MASK);
326:       assertEquals(48, Node.DIRECTIVES);
327:       assertEquals(39, Node.EMPTY_BLOCK);
328:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
329:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
330:       assertEquals(50, Node.FREE_CALL);
331:       assertEquals(36, Node.QUOTED_PROP);
332:       assertEquals(55, Node.INFERRED_FUNCTION);
333:       assertEquals(52, Node.LENGTH);
334:       assertEquals(8, Node.FLAG_NO_THROWS);
335:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
336:       assertEquals(53, Node.INPUT_ID);
337:       assertEquals(54, Node.SLASH_V);
338:       assertEquals(43, Node.IS_CONSTANT_NAME);
339:       assertEquals(57, Node.LAST_PROP);
340:       assertEquals(30, Node.VAR_ARGS_NAME);
341:       assertEquals(40, Node.ORIGINALNAME_PROP);
342:       assertEquals(2, Node.POST_FLAG);
343:       
344:       node0.addSuppression("k^");
345:       assertFalse(node0.isReturn());
346:       assertFalse(node0.isLabel());
347:       assertFalse(node0.isAssignAdd());
348:       assertFalse(node0.isDo());
349:       assertFalse(node0.isWhile());
350:       assertEquals(69649, node0.getSourcePosition());
351:       assertFalse(node0.hasChildren());
352:       assertFalse(node0.isGetElem());
353:       assertEquals(17, node0.getCharno());
354:       assertFalse(node0.isContinue());
355:       assertFalse(node0.hasMoreThanOneChild());
356:       assertFalse(node0.isTypeOf());
357:       assertFalse(node0.isDec());
358:       assertFalse(node0.isAssign());
359:       assertFalse(node0.isVar());
360:       assertFalse(node0.isAdd());
361:       assertFalse(node0.isExprResult());
362:       assertFalse(node0.isCall());
363:       assertFalse(node0.isNew());
364:       assertFalse(node0.isName());
365:       assertFalse(node0.isNull());
366:       assertFalse(node0.isOr());
367:       assertFalse(node0.isInstanceOf());
368:       assertEquals(17, node0.getType());
369:       assertFalse(node0.isCatch());
370:       assertFalse(node0.isParamList());
371:       assertFalse(node0.isWith());
372:       assertFalse(node0.isDefaultCase());
373:       assertFalse(node0.isThis());
374:       assertFalse(node0.isRegExp());
375:       assertEquals(0, node0.getChildCount());
376:       assertFalse(node0.isHook());
377:       assertFalse(node0.isBlock());
378:       assertFalse(node0.isSwitch());
379:       assertFalse(node0.hasOneChild());
380:       assertFalse(node0.isArrayLit());
381:       assertFalse(node0.isLabelName());
382:       assertFalse(node0.isTry());
383:       assertFalse(node0.isStringKey());
384:       assertFalse(node0.isScript());
385:       assertFalse(node0.isNumber());
386:       assertFalse(node0.isGetterDef());
387:       assertFalse(node0.isIn());
388:       assertFalse(node0.isCase());
389:       assertFalse(node0.isDelProp());
390:       assertFalse(node0.isFor());
391:       assertFalse(node0.isInc());
392:       assertFalse(node0.isVoid());
393:       assertFalse(node0.isIf());
394:       assertFalse(node0.isNE());
395:       assertFalse(node0.isEmpty());
396:       assertFalse(node0.isTrue());
397:       assertFalse(node0.isSetterDef());
398:       assertFalse(node0.isAnd());
399:       assertFalse(node0.isGetProp());
400:       assertFalse(node0.isBreak());
401:       assertFalse(node0.isThrow());
402:       assertFalse(node0.isComma());
403:       assertFalse(node0.isFunction());
404:       assertFalse(node0.isFalse());
405:       assertEquals(17, node0.getLineno());
406:       assertFalse(node0.isCast());
407:       assertFalse(node0.isString());
408:       assertFalse(node0.isObjectLit());
409:       assertFalse(node0.isDebugger());
410:       assertFalse(node0.isNot());
411:       assertFalse(node0.equals((Object)node1));
412:       assertEquals(4095, Node.COLUMN_MASK);
413:       assertEquals(55, Node.INFERRED_FUNCTION);
414:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
415:       assertEquals(48, Node.DIRECTIVES);
416:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
417:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
418:       assertEquals(40, Node.ORIGINALNAME_PROP);
419:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
420:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
421:       assertEquals(43, Node.IS_CONSTANT_NAME);
422:       assertEquals(54, Node.SLASH_V);
423:       assertEquals(51, Node.STATIC_SOURCE_FILE);
424:       assertEquals(50, Node.FREE_CALL);
425:       assertEquals(12, Node.COLUMN_BITS);
426:       assertEquals(46, Node.IS_NAMESPACE);
427:       assertEquals(32, Node.INCRDECR_PROP);
428:       assertEquals(15, Node.NO_SIDE_EFFECTS);
429:       assertEquals(57, Node.LAST_PROP);
430:       assertEquals(49, Node.DIRECT_EVAL);
431:       assertEquals(1, Node.DECR_FLAG);
432:       assertEquals(37, Node.OPT_ARG_NAME);
433:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
434:       assertEquals(47, Node.IS_DISPATCHER);
435:       assertEquals(2, Node.POST_FLAG);
436:       assertEquals(30, Node.VAR_ARGS_NAME);
437:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
438:       assertEquals(57, Node.REFLECTED_OBJECT);
439:       assertEquals(29, Node.JSDOC_INFO_PROP);
440:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
441:       assertEquals(8, Node.FLAG_NO_THROWS);
442:       assertEquals(39, Node.EMPTY_BLOCK);
443:       assertEquals(56, Node.CHANGE_TIME);
444:       assertEquals(53, Node.INPUT_ID);
445:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
446:       assertEquals(52, Node.LENGTH);
447:       assertEquals(36, Node.QUOTED_PROP);
448:       
449:       Node node2 = new Node(56, node1, node0, node0, node0, 51, 56);
450:       assertFalse(node0.isReturn());
451:       assertFalse(node0.isLabel());
452:       assertFalse(node0.isAssignAdd());
453:       assertFalse(node0.isDo());
454:       assertFalse(node0.isWhile());
455:       assertEquals(69649, node0.getSourcePosition());
456:       assertFalse(node0.hasChildren());
457:       assertFalse(node0.isGetElem());
458:       assertEquals(17, node0.getCharno());
459:       assertFalse(node0.isContinue());
460:       assertFalse(node0.hasMoreThanOneChild());
461:       assertFalse(node0.isTypeOf());
462:       assertFalse(node0.isDec());
463:       assertFalse(node0.isAssign());
464:       assertFalse(node0.isVar());
465:       assertFalse(node0.isAdd());
466:       assertFalse(node0.isExprResult());
467:       assertFalse(node0.isCall());
468:       assertFalse(node0.isNew());
469:       assertFalse(node0.isName());
470:       assertFalse(node0.isNull());
471:       assertFalse(node0.isOr());
472:       assertFalse(node0.isInstanceOf());
473:       assertEquals(17, node0.getType());
474:       assertFalse(node0.isCatch());
475:       assertFalse(node0.isParamList());
476:       assertFalse(node0.isWith());
477:       assertFalse(node0.isDefaultCase());
478:       assertFalse(node0.isThis());
479:       assertFalse(node0.isRegExp());
480:       assertEquals(0, node0.getChildCount());
481:       assertFalse(node0.isHook());
482:       assertFalse(node0.isBlock());
483:       assertFalse(node0.isSwitch());
484:       assertFalse(node0.hasOneChild());
485:       assertFalse(node0.isArrayLit());
486:       assertFalse(node0.isLabelName());
487:       assertFalse(node0.isTry());
488:       assertFalse(node0.isStringKey());
489:       assertFalse(node0.isScript());
490:       assertFalse(node0.isNumber());
491:       assertFalse(node0.isGetterDef());
492:       assertFalse(node0.isIn());
493:       assertFalse(node0.isCase());
494:       assertFalse(node0.isDelProp());
495:       assertFalse(node0.isFor());
496:       assertFalse(node0.isInc());
497:       assertFalse(node0.isVoid());
498:       assertFalse(node0.isIf());
499:       assertFalse(node0.isNE());
500:       assertFalse(node0.isEmpty());
501:       assertFalse(node0.isTrue());
502:       assertFalse(node0.isSetterDef());
503:       assertFalse(node0.isAnd());
504:       assertFalse(node0.isGetProp());
505:       assertFalse(node0.isBreak());
506:       assertFalse(node0.isThrow());
507:       assertFalse(node0.isComma());
508:       assertFalse(node0.isFunction());
509:       assertFalse(node0.isFalse());
510:       assertEquals(17, node0.getLineno());
511:       assertFalse(node0.isCast());
512:       assertFalse(node0.isString());
513:       assertFalse(node0.isObjectLit());
514:       assertFalse(node0.isDebugger());
515:       assertFalse(node0.isNot());
516:       assertFalse(node1.isComma());
517:       assertFalse(node1.isThis());
518:       assertFalse(node1.isBreak());
519:       assertFalse(node1.isGetProp());
520:       assertFalse(node1.isThrow());
521:       assertFalse(node1.isNot());
522:       assertFalse(node1.isObjectLit());
523:       assertFalse(node1.isInc());
524:       assertFalse(node1.isSwitch());
525:       assertFalse(node1.isAnd());
526:       assertFalse(node1.isCast());
527:       assertFalse(node1.isFalse());
528:       assertFalse(node1.isNE());
529:       assertFalse(node1.isGetterDef());
530:       assertEquals(17, node1.getCharno());
531:       assertFalse(node1.isLabelName());
532:       assertFalse(node1.isFor());
533:       assertFalse(node1.isIf());
534:       assertFalse(node1.hasOneChild());
535:       assertEquals(118801, node1.getSourcePosition());
536:       assertFalse(node1.isIn());
537:       assertFalse(node1.isScript());
538:       assertFalse(node1.isRegExp());
539:       assertEquals(39, node1.getType());
540:       assertFalse(node1.isCase());
541:       assertFalse(node1.isBlock());
542:       assertFalse(node1.isTry());
543:       assertFalse(node1.isInstanceOf());
544:       assertFalse(node1.isHook());
545:       assertFalse(node1.isWith());
546:       assertFalse(node1.hasMoreThanOneChild());
547:       assertFalse(node1.isCatch());
548:       assertFalse(node1.isNull());
549:       assertFalse(node1.isSetterDef());
550:       assertFalse(node1.isStringKey());
551:       assertFalse(node1.isName());
552:       assertFalse(node1.isParamList());
553:       assertFalse(node1.isAdd());
554:       assertFalse(node1.isDebugger());
555:       assertFalse(node1.isNew());
556:       assertFalse(node1.isDo());
557:       assertFalse(node1.isDefaultCase());
558:       assertEquals(29, node1.getLineno());
559:       assertEquals(0, node1.getChildCount());
560:       assertFalse(node1.isVar());
561:       assertFalse(node1.isArrayLit());
562:       assertFalse(node1.isLabel());
563:       assertFalse(node1.isFunction());
564:       assertFalse(node1.isContinue());
565:       assertFalse(node1.isDec());
566:       assertFalse(node1.isTypeOf());
567:       assertFalse(node1.isDelProp());
568:       assertFalse(node1.hasChildren());
569:       assertFalse(node1.isAssignAdd());
570:       assertTrue(node1.isNumber());
571:       assertFalse(node1.isOr());
572:       assertFalse(node1.isEmpty());
573:       assertFalse(node1.isString());
574:       assertFalse(node1.isExprResult());
575:       assertFalse(node1.isTrue());
576:       assertFalse(node1.isVoid());
577:       assertFalse(node1.isWhile());
578:       assertFalse(node1.isReturn());
579:       assertFalse(node1.isCall());
580:       assertFalse(node1.isGetElem());
581:       assertFalse(node1.isAssign());
582:       assertFalse(node2.isAnd());
583:       assertFalse(node2.isObjectLit());
584:       assertFalse(node2.isNot());
585:       assertFalse(node2.isWith());
586:       assertEquals(2, node2.getChildCount());
587:       assertFalse(node2.isComma());
588:       assertFalse(node2.isBreak());
589:       assertFalse(node2.isInstanceOf());
590:       assertFalse(node2.isCast());
591:       assertFalse(node2.isExprResult());
592:       assertFalse(node2.isLabelName());
593:       assertFalse(node2.isAssign());
594:       assertFalse(node2.isDec());
595:       assertFalse(node2.isThis());
596:       assertFalse(node2.isHook());
597:       assertFalse(node2.isGetProp());
598:       assertEquals(208952, node2.getSourcePosition());
599:       assertFalse(node2.isNumber());
600:       assertFalse(node2.hasOneChild());
601:       assertFalse(node2.isString());
602:       assertFalse(node2.isScript());
603:       assertFalse(node2.isContinue());
604:       assertFalse(node2.isCase());
605:       assertTrue(node2.hasChildren());
606:       assertFalse(node2.isThrow());
607:       assertFalse(node2.isFalse());
608:       assertFalse(node2.isIf());
609:       assertFalse(node2.isNE());
610:       assertEquals(56, node2.getType());
611:       assertFalse(node2.isIn());
612:       assertFalse(node2.isInc());
613:       assertFalse(node2.isSetterDef());
614:       assertFalse(node2.isCatch());
615:       assertFalse(node2.isDefaultCase());
616:       assertFalse(node2.isTrue());
617:       assertFalse(node2.isVoid());
618:       assertFalse(node2.isParamList());
619:       assertFalse(node2.isRegExp());
620:       assertFalse(node2.isFunction());
621:       assertFalse(node2.isArrayLit());
622:       assertFalse(node2.isStringKey());
623:       assertFalse(node2.isGetterDef());
624:       assertFalse(node2.isFor());
625:       assertFalse(node2.isBlock());
626:       assertFalse(node2.isDebugger());
627:       assertFalse(node2.isTry());
628:       assertFalse(node2.isDo());
629:       assertFalse(node2.isWhile());
630:       assertFalse(node2.isLabel());
631:       assertFalse(node2.isReturn());
632:       assertFalse(node2.isSwitch());
633:       assertFalse(node2.isTypeOf());
634:       assertFalse(node2.isDelProp());
635:       assertTrue(node2.hasMoreThanOneChild());
636:       assertFalse(node2.isGetElem());
637:       assertFalse(node2.isCall());
638:       assertFalse(node2.isName());
639:       assertFalse(node2.isVar());
640:       assertFalse(node2.isNull());
641:       assertEquals(51, node2.getLineno());
642:       assertFalse(node2.isNew());
643:       assertFalse(node2.isAssignAdd());
644:       assertFalse(node2.isOr());
645:       assertFalse(node2.isAdd());
646:       assertFalse(node2.isEmpty());
647:       assertEquals(56, node2.getCharno());
648:       assertFalse(node0.equals((Object)node1));
649:       assertFalse(node1.equals((Object)node0));
650:       assertFalse(node2.equals((Object)node0));
651:       assertFalse(node2.equals((Object)node1));
652:       assertNotNull(node2);
653:       assertEquals(4095, Node.COLUMN_MASK);
654:       assertEquals(55, Node.INFERRED_FUNCTION);
655:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
656:       assertEquals(48, Node.DIRECTIVES);
657:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
658:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
659:       assertEquals(40, Node.ORIGINALNAME_PROP);
660:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
661:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
662:       assertEquals(43, Node.IS_CONSTANT_NAME);
663:       assertEquals(54, Node.SLASH_V);
664:       assertEquals(51, Node.STATIC_SOURCE_FILE);
665:       assertEquals(50, Node.FREE_CALL);
666:       assertEquals(12, Node.COLUMN_BITS);
667:       assertEquals(46, Node.IS_NAMESPACE);
668:       assertEquals(32, Node.INCRDECR_PROP);
669:       assertEquals(15, Node.NO_SIDE_EFFECTS);
670:       assertEquals(57, Node.LAST_PROP);
671:       assertEquals(49, Node.DIRECT_EVAL);
672:       assertEquals(1, Node.DECR_FLAG);
673:       assertEquals(37, Node.OPT_ARG_NAME);
674:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
675:       assertEquals(47, Node.IS_DISPATCHER);
676:       assertEquals(2, Node.POST_FLAG);
677:       assertEquals(30, Node.VAR_ARGS_NAME);
678:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
679:       assertEquals(57, Node.REFLECTED_OBJECT);
680:       assertEquals(29, Node.JSDOC_INFO_PROP);
681:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
682:       assertEquals(8, Node.FLAG_NO_THROWS);
683:       assertEquals(39, Node.EMPTY_BLOCK);
684:       assertEquals(56, Node.CHANGE_TIME);
685:       assertEquals(53, Node.INPUT_ID);
686:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
687:       assertEquals(52, Node.LENGTH);
688:       assertEquals(36, Node.QUOTED_PROP);
689:       assertEquals(37, Node.OPT_ARG_NAME);
690:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
691:       assertEquals(56, Node.CHANGE_TIME);
692:       assertEquals(47, Node.IS_DISPATCHER);
693:       assertEquals(12, Node.COLUMN_BITS);
694:       assertEquals(32, Node.INCRDECR_PROP);
695:       assertEquals(46, Node.IS_NAMESPACE);
696:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
697:       assertEquals(1, Node.DECR_FLAG);
698:       assertEquals(29, Node.JSDOC_INFO_PROP);
699:       assertEquals(51, Node.STATIC_SOURCE_FILE);
700:       assertEquals(15, Node.NO_SIDE_EFFECTS);
701:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
702:       assertEquals(57, Node.REFLECTED_OBJECT);
703:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
704:       assertEquals(49, Node.DIRECT_EVAL);
705:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
706:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
707:       assertEquals(4095, Node.COLUMN_MASK);
708:       assertEquals(48, Node.DIRECTIVES);
709:       assertEquals(39, Node.EMPTY_BLOCK);
710:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
711:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
712:       assertEquals(50, Node.FREE_CALL);
713:       assertEquals(36, Node.QUOTED_PROP);
714:       assertEquals(55, Node.INFERRED_FUNCTION);
715:       assertEquals(52, Node.LENGTH);
716:       assertEquals(8, Node.FLAG_NO_THROWS);
717:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
718:       assertEquals(53, Node.INPUT_ID);
719:       assertEquals(54, Node.SLASH_V);
720:       assertEquals(43, Node.IS_CONSTANT_NAME);
721:       assertEquals(57, Node.LAST_PROP);
722:       assertEquals(30, Node.VAR_ARGS_NAME);
723:       assertEquals(40, Node.ORIGINALNAME_PROP);
724:       assertEquals(2, Node.POST_FLAG);
725:       assertEquals(57, Node.LAST_PROP);
726:       assertEquals(30, Node.VAR_ARGS_NAME);
727:       assertEquals(49, Node.DIRECT_EVAL);
728:       assertEquals(54, Node.SLASH_V);
729:       assertEquals(12, Node.COLUMN_BITS);
730:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
731:       assertEquals(46, Node.IS_NAMESPACE);
732:       assertEquals(37, Node.OPT_ARG_NAME);
733:       assertEquals(40, Node.ORIGINALNAME_PROP);
734:       assertEquals(47, Node.IS_DISPATCHER);
735:       assertEquals(56, Node.CHANGE_TIME);
736:       assertEquals(2, Node.POST_FLAG);
737:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
738:       assertEquals(8, Node.FLAG_NO_THROWS);
739:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
740:       assertEquals(57, Node.REFLECTED_OBJECT);
741:       assertEquals(52, Node.LENGTH);
742:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
743:       assertEquals(55, Node.INFERRED_FUNCTION);
744:       assertEquals(29, Node.JSDOC_INFO_PROP);
745:       assertEquals(15, Node.NO_SIDE_EFFECTS);
746:       assertEquals(39, Node.EMPTY_BLOCK);
747:       assertEquals(53, Node.INPUT_ID);
748:       assertEquals(43, Node.IS_CONSTANT_NAME);
749:       assertEquals(36, Node.QUOTED_PROP);
750:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
751:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
752:       assertEquals(4095, Node.COLUMN_MASK);
753:       assertEquals(48, Node.DIRECTIVES);
754:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
755:       assertEquals(50, Node.FREE_CALL);
756:       assertEquals(32, Node.INCRDECR_PROP);
757:       assertEquals(51, Node.STATIC_SOURCE_FILE);
758:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
759:       assertEquals(1, Node.DECR_FLAG);
760:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
761:       
762:       Node node3 = new Node(53);
763:       assertFalse(node3.isTry());
764:       assertFalse(node3.isArrayLit());
765:       assertFalse(node3.isFunction());
766:       assertFalse(node3.isDebugger());
767:       assertFalse(node3.isRegExp());
768:       assertFalse(node3.isEmpty());
769:       assertFalse(node3.isFor());
770:       assertFalse(node3.isDefaultCase());
771:       assertFalse(node3.isCatch());
772:       assertFalse(node3.isIn());
773:       assertFalse(node3.isDelProp());
774:       assertFalse(node3.isNull());
775:       assertFalse(node3.isTrue());
776:       assertFalse(node3.isNE());
777:       assertFalse(node3.isVoid());
778:       assertFalse(node3.isName());
779:       assertFalse(node3.isIf());
780:       assertFalse(node3.isBlock());
781:       assertFalse(node3.isNew());
782:       assertFalse(node3.isAdd());
783:       assertFalse(node3.isHook());
784:       assertEquals((-1), node3.getCharno());
785:       assertFalse(node3.isDo());
786:       assertFalse(node3.isCase());
787:       assertFalse(node3.isThis());
788:       assertFalse(node3.isVar());
789:       assertEquals(0, node3.getChildCount());
790:       assertFalse(node3.isLabel());
791:       assertFalse(node3.isNumber());
792:       assertFalse(node3.isGetterDef());
793:       assertFalse(node3.isLabelName());
794:       assertFalse(node3.isParamList());
795:       assertFalse(node3.isStringKey());
796:       assertFalse(node3.isSwitch());
797:       assertFalse(node3.hasOneChild());
798:       assertFalse(node3.isExprResult());
799:       assertFalse(node3.isCast());
800:       assertFalse(node3.isDec());
801:       assertFalse(node3.isAssign());
802:       assertFalse(node3.isScript());
803:       assertFalse(node3.hasChildren());
804:       assertFalse(node3.isAssignAdd());
805:       assertEquals((-1), node3.getLineno());
806:       assertFalse(node3.isReturn());
807:       assertFalse(node3.isInstanceOf());
808:       assertFalse(node3.isOr());
809:       assertFalse(node3.isComma());
810:       assertFalse(node3.isTypeOf());
811:       assertFalse(node3.isWith());
812:       assertFalse(node3.hasMoreThanOneChild());
813:       assertFalse(node3.isGetElem());
814:       assertFalse(node3.isBreak());
815:       assertFalse(node3.isInc());
816:       assertFalse(node3.isCall());
817:       assertFalse(node3.isFalse());
818:       assertFalse(node3.isString());
819:       assertFalse(node3.isWhile());
820:       assertFalse(node3.isSetterDef());
821:       assertFalse(node3.isThrow());
822:       assertFalse(node3.isGetProp());
823:       assertFalse(node3.isObjectLit());
824:       assertFalse(node3.isContinue());
825:       assertFalse(node3.isNot());
826:       assertEquals(53, node3.getType());
827:       assertEquals((-1), node3.getSourcePosition());
828:       assertFalse(node3.isAnd());
829:       assertFalse(node3.equals((Object)node2));
830:       assertFalse(node3.equals((Object)node0));
831:       assertFalse(node3.equals((Object)node1));
832:       assertNotNull(node3);
833:       assertEquals(40, Node.ORIGINALNAME_PROP);
834:       assertEquals(57, Node.REFLECTED_OBJECT);
835:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
836:       assertEquals(50, Node.FREE_CALL);
837:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
838:       assertEquals(52, Node.LENGTH);
839:       assertEquals(8, Node.FLAG_NO_THROWS);
840:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
841:       assertEquals(15, Node.NO_SIDE_EFFECTS);
842:       assertEquals(39, Node.EMPTY_BLOCK);
843:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
844:       assertEquals(57, Node.LAST_PROP);
845:       assertEquals(1, Node.DECR_FLAG);
846:       assertEquals(51, Node.STATIC_SOURCE_FILE);
847:       assertEquals(30, Node.VAR_ARGS_NAME);
848:       assertEquals(54, Node.SLASH_V);
849:       assertEquals(46, Node.IS_NAMESPACE);
850:       assertEquals(43, Node.IS_CONSTANT_NAME);
851:       assertEquals(29, Node.JSDOC_INFO_PROP);
852:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
853:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
854:       assertEquals(2, Node.POST_FLAG);
855:       assertEquals(53, Node.INPUT_ID);
856:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
857:       assertEquals(47, Node.IS_DISPATCHER);
858:       assertEquals(32, Node.INCRDECR_PROP);
859:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
860:       assertEquals(55, Node.INFERRED_FUNCTION);
861:       assertEquals(12, Node.COLUMN_BITS);
862:       assertEquals(4095, Node.COLUMN_MASK);
863:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
864:       assertEquals(37, Node.OPT_ARG_NAME);
865:       assertEquals(48, Node.DIRECTIVES);
866:       assertEquals(36, Node.QUOTED_PROP);
867:       assertEquals(49, Node.DIRECT_EVAL);
868:       assertEquals(56, Node.CHANGE_TIME);
869:       
870:       boolean boolean2 = node1.isInc();
871:       assertFalse(node1.isComma());
872:       assertFalse(node1.isThis());
873:       assertFalse(node1.isBreak());
874:       assertFalse(node1.isGetProp());
875:       assertFalse(node1.isThrow());
876:       assertFalse(node1.isNot());
877:       assertFalse(node1.isObjectLit());
878:       assertFalse(node1.isInc());
879:       assertFalse(node1.isSwitch());
880:       assertFalse(node1.isAnd());
881:       assertFalse(node1.isCast());
882:       assertFalse(node1.isFalse());
883:       assertFalse(node1.isNE());
884:       assertFalse(node1.isGetterDef());
885:       assertEquals(17, node1.getCharno());
886:       assertFalse(node1.isLabelName());
887:       assertFalse(node1.isFor());
888:       assertFalse(node1.isIf());
889:       assertFalse(node1.hasOneChild());
890:       assertEquals(118801, node1.getSourcePosition());
891:       assertFalse(node1.isIn());
892:       assertFalse(node1.isScript());
893:       assertFalse(node1.isRegExp());
894:       assertEquals(39, node1.getType());
895:       assertFalse(node1.isCase());
896:       assertFalse(node1.isBlock());
897:       assertFalse(node1.isTry());
898:       assertFalse(node1.isInstanceOf());
899:       assertFalse(node1.isHook());
900:       assertFalse(node1.isWith());
901:       assertFalse(node1.hasMoreThanOneChild());
902:       assertFalse(node1.isCatch());
903:       assertFalse(node1.isNull());
904:       assertFalse(node1.isSetterDef());
905:       assertFalse(node1.isStringKey());
906:       assertFalse(node1.isName());
907:       assertFalse(node1.isParamList());
908:       assertFalse(node1.isAdd());
909:       assertFalse(node1.isDebugger());
910:       assertFalse(node1.isNew());
911:       assertFalse(node1.isDo());
912:       assertFalse(node1.isDefaultCase());
913:       assertEquals(29, node1.getLineno());
914:       assertEquals(0, node1.getChildCount());
915:       assertFalse(node1.isVar());
916:       assertFalse(node1.isArrayLit());
917:       assertFalse(node1.isLabel());
918:       assertFalse(node1.isFunction());
919:       assertFalse(node1.isContinue());
920:       assertFalse(node1.isDec());
921:       assertFalse(node1.isTypeOf());
922:       assertFalse(node1.isDelProp());
923:       assertFalse(node1.hasChildren());
924:       assertFalse(node1.isAssignAdd());
925:       assertTrue(node1.isNumber());
926:       assertFalse(node1.isOr());
927:       assertFalse(node1.isEmpty());
928:       assertFalse(node1.isString());
929:       assertFalse(node1.isExprResult());
930:       assertFalse(node1.isTrue());
931:       assertFalse(node1.isVoid());
932:       assertFalse(node1.isWhile());
933:       assertFalse(node1.isReturn());
934:       assertFalse(node1.isCall());
935:       assertFalse(node1.isGetElem());
936:       assertFalse(node1.isAssign());
937:       assertFalse(boolean2);
938:       assertFalse(node1.equals((Object)node0));
939:       assertFalse(node1.equals((Object)node2));
940:       assertFalse(node1.equals((Object)node3));
941:       assertTrue(boolean2 == boolean0);
942:       assertTrue(boolean2 == boolean1);
943:       assertEquals(37, Node.OPT_ARG_NAME);
944:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
945:       assertEquals(56, Node.CHANGE_TIME);
946:       assertEquals(47, Node.IS_DISPATCHER);
947:       assertEquals(12, Node.COLUMN_BITS);
948:       assertEquals(32, Node.INCRDECR_PROP);
949:       assertEquals(46, Node.IS_NAMESPACE);
950:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
951:       assertEquals(1, Node.DECR_FLAG);
952:       assertEquals(29, Node.JSDOC_INFO_PROP);
953:       assertEquals(51, Node.STATIC_SOURCE_FILE);
954:       assertEquals(15, Node.NO_SIDE_EFFECTS);
955:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
956:       assertEquals(57, Node.REFLECTED_OBJECT);
957:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
958:       assertEquals(49, Node.DIRECT_EVAL);
959:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
960:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
961:       assertEquals(4095, Node.COLUMN_MASK);
962:       assertEquals(48, Node.DIRECTIVES);
963:       assertEquals(39, Node.EMPTY_BLOCK);
964:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
965:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
966:       assertEquals(50, Node.FREE_CALL);
967:       assertEquals(36, Node.QUOTED_PROP);
968:       assertEquals(55, Node.INFERRED_FUNCTION);
969:       assertEquals(52, Node.LENGTH);
970:       assertEquals(8, Node.FLAG_NO_THROWS);
971:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
972:       assertEquals(53, Node.INPUT_ID);
973:       assertEquals(54, Node.SLASH_V);
974:       assertEquals(43, Node.IS_CONSTANT_NAME);
975:       assertEquals(57, Node.LAST_PROP);
976:       assertEquals(30, Node.VAR_ARGS_NAME);
977:       assertEquals(40, Node.ORIGINALNAME_PROP);
978:       assertEquals(2, Node.POST_FLAG);
979:       
980:       boolean boolean3 = node2.isRegExp();
981:       assertFalse(node0.isReturn());
982:       assertFalse(node0.isLabel());
983:       assertFalse(node0.isAssignAdd());
984:       assertFalse(node0.isDo());
985:       assertFalse(node0.isWhile());
986:       assertEquals(69649, node0.getSourcePosition());
987:       assertFalse(node0.hasChildren());
988:       assertFalse(node0.isGetElem());
989:       assertEquals(17, node0.getCharno());
990:       assertFalse(node0.isContinue());
991:       assertFalse(node0.hasMoreThanOneChild());
992:       assertFalse(node0.isTypeOf());
993:       assertFalse(node0.isDec());
994:       assertFalse(node0.isAssign());
995:       assertFalse(node0.isVar());
996:       assertFalse(node0.isAdd());
997:       assertFalse(node0.isExprResult());
998:       assertFalse(node0.isCall());
999:       assertFalse(node0.isNew());
1000:       assertFalse(node0.isName());
1001:       assertFalse(node0.isNull());
1002:       assertFalse(node0.isOr());
1003:       assertFalse(node0.isInstanceOf());
1004:       assertEquals(17, node0.getType());
1005:       assertFalse(node0.isCatch());
1006:       assertFalse(node0.isParamList());
1007:       assertFalse(node0.isWith());
1008:       assertFalse(node0.isDefaultCase());
1009:       assertFalse(node0.isThis());
1010:       assertFalse(node0.isRegExp());
1011:       assertEquals(0, node0.getChildCount());
1012:       assertFalse(node0.isHook());
1013:       assertFalse(node0.isBlock());
1014:       assertFalse(node0.isSwitch());
1015:       assertFalse(node0.hasOneChild());
1016:       assertFalse(node0.isArrayLit());
1017:       assertFalse(node0.isLabelName());
1018:       assertFalse(node0.isTry());
1019:       assertFalse(node0.isStringKey());
1020:       assertFalse(node0.isScript());
1021:       assertFalse(node0.isNumber());
1022:       assertFalse(node0.isGetterDef());
1023:       assertFalse(node0.isIn());
1024:       assertFalse(node0.isCase());
1025:       assertFalse(node0.isDelProp());
1026:       assertFalse(node0.isFor());
1027:       assertFalse(node0.isInc());
1028:       assertFalse(node0.isVoid());
1029:       assertFalse(node0.isIf());
1030:       assertFalse(node0.isNE());
1031:       assertFalse(node0.isEmpty());
1032:       assertFalse(node0.isTrue());
1033:       assertFalse(node0.isSetterDef());
1034:       assertFalse(node0.isAnd());
1035:       assertFalse(node0.isGetProp());
1036:       assertFalse(node0.isBreak());
1037:       assertFalse(node0.isThrow());
1038:       assertFalse(node0.isComma());
1039:       assertFalse(node0.isFunction());
1040:       assertFalse(node0.isFalse());
1041:       assertEquals(17, node0.getLineno());
1042:       assertFalse(node0.isCast());
1043:       assertFalse(node0.isString());
1044:       assertFalse(node0.isObjectLit());
1045:       assertFalse(node0.isDebugger());
1046:       assertFalse(node0.isNot());
1047:       assertFalse(node1.isComma());
1048:       assertFalse(node1.isThis());
1049:       assertFalse(node1.isBreak());
1050:       assertFalse(node1.isGetProp());
1051:       assertFalse(node1.isThrow());
1052:       assertFalse(node1.isNot());
1053:       assertFalse(node1.isObjectLit());
1054:       assertFalse(node1.isInc());
1055:       assertFalse(node1.isSwitch());
1056:       assertFalse(node1.isAnd());
1057:       assertFalse(node1.isCast());
1058:       assertFalse(node1.isFalse());
1059:       assertFalse(node1.isNE());
1060:       assertFalse(node1.isGetterDef());
1061:       assertEquals(17, node1.getCharno());
1062:       assertFalse(node1.isLabelName());
1063:       assertFalse(node1.isFor());
1064:       assertFalse(node1.isIf());
1065:       assertFalse(node1.hasOneChild());
1066:       assertEquals(118801, node1.getSourcePosition());
1067:       assertFalse(node1.isIn());
1068:       assertFalse(node1.isScript());
1069:       assertFalse(node1.isRegExp());
1070:       assertEquals(39, node1.getType());
1071:       assertFalse(node1.isCase());
1072:       assertFalse(node1.isBlock());
1073:       assertFalse(node1.isTry());
1074:       assertFalse(node1.isInstanceOf());
1075:       assertFalse(node1.isHook());
1076:       assertFalse(node1.isWith());
1077:       assertFalse(node1.hasMoreThanOneChild());
1078:       assertFalse(node1.isCatch());
1079:       assertFalse(node1.isNull());
1080:       assertFalse(node1.isSetterDef());
1081:       assertFalse(node1.isStringKey());
1082:       assertFalse(node1.isName());
1083:       assertFalse(node1.isParamList());
1084:       assertFalse(node1.isAdd());
1085:       assertFalse(node1.isDebugger());
1086:       assertFalse(node1.isNew());
1087:       assertFalse(node1.isDo());
1088:       assertFalse(node1.isDefaultCase());
1089:       assertEquals(29, node1.getLineno());
1090:       assertEquals(0, node1.getChildCount());
1091:       assertFalse(node1.isVar());
1092:       assertFalse(node1.isArrayLit());
1093:       assertFalse(node1.isLabel());
1094:       assertFalse(node1.isFunction());
1095:       assertFalse(node1.isContinue());
1096:       assertFalse(node1.isDec());
1097:       assertFalse(node1.isTypeOf());
1098:       assertFalse(node1.isDelProp());
1099:       assertFalse(node1.hasChildren());
1100:       assertFalse(node1.isAssignAdd());
1101:       assertTrue(node1.isNumber());
1102:       assertFalse(node1.isOr());
1103:       assertFalse(node1.isEmpty());
1104:       assertFalse(node1.isString());
1105:       assertFalse(node1.isExprResult());
1106:       assertFalse(node1.isTrue());
1107:       assertFalse(node1.isVoid());
1108:       assertFalse(node1.isWhile());
1109:       assertFalse(node1.isReturn());
1110:       assertFalse(node1.isCall());
1111:       assertFalse(node1.isGetElem());
1112:       assertFalse(node1.isAssign());
1113:       assertFalse(node2.isAnd());
1114:       assertFalse(node2.isObjectLit());
1115:       assertFalse(node2.isNot());
1116:       assertFalse(node2.isWith());
1117:       assertEquals(2, node2.getChildCount());
1118:       assertFalse(node2.isComma());
1119:       assertFalse(node2.isBreak());
1120:       assertFalse(node2.isInstanceOf());
1121:       assertFalse(node2.isCast());
1122:       assertFalse(node2.isExprResult());
1123:       assertFalse(node2.isLabelName());
1124:       assertFalse(node2.isAssign());
1125:       assertFalse(node2.isDec());
1126:       assertFalse(node2.isThis());
1127:       assertFalse(node2.isHook());
1128:       assertFalse(node2.isGetProp());
1129:       assertEquals(208952, node2.getSourcePosition());
1130:       assertFalse(node2.isNumber());
1131:       assertFalse(node2.hasOneChild());
1132:       assertFalse(node2.isString());
1133:       assertFalse(node2.isScript());
1134:       assertFalse(node2.isContinue());
1135:       assertFalse(node2.isCase());
1136:       assertTrue(node2.hasChildren());
1137:       assertFalse(node2.isThrow());
1138:       assertFalse(node2.isFalse());
1139:       assertFalse(node2.isIf());
1140:       assertFalse(node2.isNE());
1141:       assertEquals(56, node2.getType());
1142:       assertFalse(node2.isIn());
1143:       assertFalse(node2.isInc());
1144:       assertFalse(node2.isSetterDef());
1145:       assertFalse(node2.isCatch());
1146:       assertFalse(node2.isDefaultCase());
1147:       assertFalse(node2.isTrue());
1148:       assertFalse(node2.isVoid());
1149:       assertFalse(node2.isParamList());
1150:       assertFalse(node2.isRegExp());
1151:       assertFalse(node2.isFunction());
1152:       assertFalse(node2.isArrayLit());
1153:       assertFalse(node2.isStringKey());
1154:       assertFalse(node2.isGetterDef());
1155:       assertFalse(node2.isFor());
1156:       assertFalse(node2.isBlock());
1157:       assertFalse(node2.isDebugger());
1158:       assertFalse(node2.isTry());
1159:       assertFalse(node2.isDo());
1160:       assertFalse(node2.isWhile());
1161:       assertFalse(node2.isLabel());
1162:       assertFalse(node2.isReturn());
1163:       assertFalse(node2.isSwitch());
1164:       assertFalse(node2.isTypeOf());
1165:       assertFalse(node2.isDelProp());
1166:       assertTrue(node2.hasMoreThanOneChild());
1167:       assertFalse(node2.isGetElem());
1168:       assertFalse(node2.isCall());
1169:       assertFalse(node2.isName());
1170:       assertFalse(node2.isVar());
1171:       assertFalse(node2.isNull());
1172:       assertEquals(51, node2.getLineno());
1173:       assertFalse(node2.isNew());
1174:       assertFalse(node2.isAssignAdd());
1175:       assertFalse(node2.isOr());
1176:       assertFalse(node2.isAdd());
1177:       assertFalse(node2.isEmpty());
1178:       assertEquals(56, node2.getCharno());
1179:       assertNotSame(node0, node2);
1180:       assertNotSame(node0, node3);
1181:       assertNotSame(node2, node0);
1182:       assertNotSame(node2, node3);
1183:       assertFalse(boolean3);
1184:       assertFalse(node0.equals((Object)node2));
1185:       assertFalse(node0.equals((Object)node1));
1186:       assertFalse(node0.equals((Object)node3));
1187:       assertFalse(node1.equals((Object)node0));
1188:       assertFalse(node1.equals((Object)node2));
1189:       assertFalse(node1.equals((Object)node3));
1190:       assertFalse(node2.equals((Object)node0));
1191:       assertFalse(node2.equals((Object)node1));
1192:       assertFalse(node2.equals((Object)node3));
1193:       assertTrue(boolean3 == boolean0);
1194:       assertTrue(boolean3 == boolean1);
1195:       assertTrue(boolean3 == boolean2);
1196:       assertEquals(4095, Node.COLUMN_MASK);
1197:       assertEquals(55, Node.INFERRED_FUNCTION);
1198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1199:       assertEquals(48, Node.DIRECTIVES);
1200:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1202:       assertEquals(40, Node.ORIGINALNAME_PROP);
1203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1204:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1205:       assertEquals(43, Node.IS_CONSTANT_NAME);
1206:       assertEquals(54, Node.SLASH_V);
1207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1208:       assertEquals(50, Node.FREE_CALL);
1209:       assertEquals(12, Node.COLUMN_BITS);
1210:       assertEquals(46, Node.IS_NAMESPACE);
1211:       assertEquals(32, Node.INCRDECR_PROP);
1212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1213:       assertEquals(57, Node.LAST_PROP);
1214:       assertEquals(49, Node.DIRECT_EVAL);
1215:       assertEquals(1, Node.DECR_FLAG);
1216:       assertEquals(37, Node.OPT_ARG_NAME);
1217:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1218:       assertEquals(47, Node.IS_DISPATCHER);
1219:       assertEquals(2, Node.POST_FLAG);
1220:       assertEquals(30, Node.VAR_ARGS_NAME);
1221:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1222:       assertEquals(57, Node.REFLECTED_OBJECT);
1223:       assertEquals(29, Node.JSDOC_INFO_PROP);
1224:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1225:       assertEquals(8, Node.FLAG_NO_THROWS);
1226:       assertEquals(39, Node.EMPTY_BLOCK);
1227:       assertEquals(56, Node.CHANGE_TIME);
1228:       assertEquals(53, Node.INPUT_ID);
1229:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1230:       assertEquals(52, Node.LENGTH);
1231:       assertEquals(36, Node.QUOTED_PROP);
1232:       assertEquals(37, Node.OPT_ARG_NAME);
1233:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1234:       assertEquals(56, Node.CHANGE_TIME);
1235:       assertEquals(47, Node.IS_DISPATCHER);
1236:       assertEquals(12, Node.COLUMN_BITS);
1237:       assertEquals(32, Node.INCRDECR_PROP);
1238:       assertEquals(46, Node.IS_NAMESPACE);
1239:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1240:       assertEquals(1, Node.DECR_FLAG);
1241:       assertEquals(29, Node.JSDOC_INFO_PROP);
1242:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1243:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1244:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1245:       assertEquals(57, Node.REFLECTED_OBJECT);
1246:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1247:       assertEquals(49, Node.DIRECT_EVAL);
1248:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1249:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1250:       assertEquals(4095, Node.COLUMN_MASK);
1251:       assertEquals(48, Node.DIRECTIVES);
1252:       assertEquals(39, Node.EMPTY_BLOCK);
1253:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1254:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1255:       assertEquals(50, Node.FREE_CALL);
1256:       assertEquals(36, Node.QUOTED_PROP);
1257:       assertEquals(55, Node.INFERRED_FUNCTION);
1258:       assertEquals(52, Node.LENGTH);
1259:       assertEquals(8, Node.FLAG_NO_THROWS);
1260:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1261:       assertEquals(53, Node.INPUT_ID);
1262:       assertEquals(54, Node.SLASH_V);
1263:       assertEquals(43, Node.IS_CONSTANT_NAME);
1264:       assertEquals(57, Node.LAST_PROP);
1265:       assertEquals(30, Node.VAR_ARGS_NAME);
1266:       assertEquals(40, Node.ORIGINALNAME_PROP);
1267:       assertEquals(2, Node.POST_FLAG);
1268:       assertEquals(57, Node.LAST_PROP);
1269:       assertEquals(30, Node.VAR_ARGS_NAME);
1270:       assertEquals(49, Node.DIRECT_EVAL);
1271:       assertEquals(54, Node.SLASH_V);
1272:       assertEquals(12, Node.COLUMN_BITS);
1273:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1274:       assertEquals(46, Node.IS_NAMESPACE);
1275:       assertEquals(37, Node.OPT_ARG_NAME);
1276:       assertEquals(40, Node.ORIGINALNAME_PROP);
1277:       assertEquals(47, Node.IS_DISPATCHER);
1278:       assertEquals(56, Node.CHANGE_TIME);
1279:       assertEquals(2, Node.POST_FLAG);
1280:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1281:       assertEquals(8, Node.FLAG_NO_THROWS);
1282:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1283:       assertEquals(57, Node.REFLECTED_OBJECT);
1284:       assertEquals(52, Node.LENGTH);
1285:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1286:       assertEquals(55, Node.INFERRED_FUNCTION);
1287:       assertEquals(29, Node.JSDOC_INFO_PROP);
1288:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1289:       assertEquals(39, Node.EMPTY_BLOCK);
1290:       assertEquals(53, Node.INPUT_ID);
1291:       assertEquals(43, Node.IS_CONSTANT_NAME);
1292:       assertEquals(36, Node.QUOTED_PROP);
1293:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1294:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1295:       assertEquals(4095, Node.COLUMN_MASK);
1296:       assertEquals(48, Node.DIRECTIVES);
1297:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1298:       assertEquals(50, Node.FREE_CALL);
1299:       assertEquals(32, Node.INCRDECR_PROP);
1300:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1301:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1302:       assertEquals(1, Node.DECR_FLAG);
1303:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1304:       
1305:       Node node4 = node1.getLastSibling();
1306:       assertFalse(node1.isComma());
1307:       assertFalse(node1.isThis());
1308:       assertFalse(node1.isBreak());
1309:       assertFalse(node1.isGetProp());
1310:       assertFalse(node1.isThrow());
1311:       assertFalse(node1.isNot());
1312:       assertFalse(node1.isObjectLit());
1313:       assertFalse(node1.isInc());
1314:       assertFalse(node1.isSwitch());
1315:       assertFalse(node1.isAnd());
1316:       assertFalse(node1.isCast());
1317:       assertFalse(node1.isFalse());
1318:       assertFalse(node1.isNE());
1319:       assertFalse(node1.isGetterDef());
1320:       assertEquals(17, node1.getCharno());
1321:       assertFalse(node1.isLabelName());
1322:       assertFalse(node1.isFor());
1323:       assertFalse(node1.isIf());
1324:       assertFalse(node1.hasOneChild());
1325:       assertEquals(118801, node1.getSourcePosition());
1326:       assertFalse(node1.isIn());
1327:       assertFalse(node1.isScript());
1328:       assertFalse(node1.isRegExp());
1329:       assertEquals(39, node1.getType());
1330:       assertFalse(node1.isCase());
1331:       assertFalse(node1.isBlock());
1332:       assertFalse(node1.isTry());
1333:       assertFalse(node1.isInstanceOf());
1334:       assertFalse(node1.isHook());
1335:       assertFalse(node1.isWith());
1336:       assertFalse(node1.hasMoreThanOneChild());
1337:       assertFalse(node1.isCatch());
1338:       assertFalse(node1.isNull());
1339:       assertFalse(node1.isSetterDef());
1340:       assertFalse(node1.isStringKey());
1341:       assertFalse(node1.isName());
1342:       assertFalse(node1.isParamList());
1343:       assertFalse(node1.isAdd());
1344:       assertFalse(node1.isDebugger());
1345:       assertFalse(node1.isNew());
1346:       assertFalse(node1.isDo());
1347:       assertFalse(node1.isDefaultCase());
1348:       assertEquals(29, node1.getLineno());
1349:       assertEquals(0, node1.getChildCount());
1350:       assertFalse(node1.isVar());
1351:       assertFalse(node1.isArrayLit());
1352:       assertFalse(node1.isLabel());
1353:       assertFalse(node1.isFunction());
1354:       assertFalse(node1.isContinue());
1355:       assertFalse(node1.isDec());
1356:       assertFalse(node1.isTypeOf());
1357:       assertFalse(node1.isDelProp());
1358:       assertFalse(node1.hasChildren());
1359:       assertFalse(node1.isAssignAdd());
1360:       assertTrue(node1.isNumber());
1361:       assertFalse(node1.isOr());
1362:       assertFalse(node1.isEmpty());
1363:       assertFalse(node1.isString());
1364:       assertFalse(node1.isExprResult());
1365:       assertFalse(node1.isTrue());
1366:       assertFalse(node1.isVoid());
1367:       assertFalse(node1.isWhile());
1368:       assertFalse(node1.isReturn());
1369:       assertFalse(node1.isCall());
1370:       assertFalse(node1.isGetElem());
1371:       assertFalse(node1.isAssign());
1372:       assertFalse(node4.isParamList());
1373:       assertFalse(node4.isSetterDef());
1374:       assertFalse(node4.isNull());
1375:       assertFalse(node4.isStringKey());
1376:       assertFalse(node4.isName());
1377:       assertFalse(node4.isVar());
1378:       assertFalse(node4.isCatch());
1379:       assertFalse(node4.isCall());
1380:       assertEquals(0, node4.getChildCount());
1381:       assertFalse(node4.isTrue());
1382:       assertFalse(node4.isDo());
1383:       assertFalse(node4.isNew());
1384:       assertFalse(node4.isDefaultCase());
1385:       assertFalse(node4.isVoid());
1386:       assertFalse(node4.isAdd());
1387:       assertFalse(node4.isOr());
1388:       assertFalse(node4.isEmpty());
1389:       assertEquals(17, node4.getCharno());
1390:       assertFalse(node4.isDec());
1391:       assertFalse(node4.hasChildren());
1392:       assertFalse(node4.isDelProp());
1393:       assertFalse(node4.isCast());
1394:       assertFalse(node4.isReturn());
1395:       assertFalse(node4.isGetElem());
1396:       assertFalse(node4.isAssign());
1397:       assertFalse(node4.isContinue());
1398:       assertFalse(node4.isFunction());
1399:       assertFalse(node4.isTypeOf());
1400:       assertFalse(node4.isDebugger());
1401:       assertEquals(17, node4.getLineno());
1402:       assertFalse(node4.isWhile());
1403:       assertFalse(node4.isAnd());
1404:       assertFalse(node4.isNot());
1405:       assertFalse(node4.isString());
1406:       assertFalse(node4.isObjectLit());
1407:       assertFalse(node4.isComma());
1408:       assertFalse(node4.isBreak());
1409:       assertFalse(node4.isGetProp());
1410:       assertEquals(17, node4.getType());
1411:       assertFalse(node4.isThis());
1412:       assertFalse(node4.isInstanceOf());
1413:       assertFalse(node4.isThrow());
1414:       assertFalse(node4.isHook());
1415:       assertFalse(node4.isFalse());
1416:       assertFalse(node4.isWith());
1417:       assertFalse(node4.isExprResult());
1418:       assertFalse(node4.isInc());
1419:       assertFalse(node4.isIn());
1420:       assertFalse(node4.isNE());
1421:       assertFalse(node4.isLabelName());
1422:       assertFalse(node4.isFor());
1423:       assertFalse(node4.isAssignAdd());
1424:       assertFalse(node4.isIf());
1425:       assertFalse(node4.isArrayLit());
1426:       assertEquals(69649, node4.getSourcePosition());
1427:       assertFalse(node4.isLabel());
1428:       assertFalse(node4.hasMoreThanOneChild());
1429:       assertFalse(node4.isSwitch());
1430:       assertFalse(node4.isScript());
1431:       assertFalse(node4.isRegExp());
1432:       assertFalse(node4.isBlock());
1433:       assertFalse(node4.isTry());
1434:       assertFalse(node4.isCase());
1435:       assertFalse(node4.hasOneChild());
1436:       assertFalse(node4.isGetterDef());
1437:       assertFalse(node4.isNumber());
1438:       assertSame(node4, node0);
1439:       assertNotSame(node4, node2);
1440:       assertNotSame(node4, node3);
1441:       assertFalse(node1.equals((Object)node0));
1442:       assertFalse(node1.equals((Object)node2));
1443:       assertFalse(node1.equals((Object)node3));
1444:       assertFalse(node4.equals((Object)node1));
1445:       assertFalse(node4.equals((Object)node2));
1446:       assertFalse(node4.equals((Object)node3));
1447:       assertNotNull(node4);
1448:       assertEquals(37, Node.OPT_ARG_NAME);
1449:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1450:       assertEquals(56, Node.CHANGE_TIME);
1451:       assertEquals(47, Node.IS_DISPATCHER);
1452:       assertEquals(12, Node.COLUMN_BITS);
1453:       assertEquals(32, Node.INCRDECR_PROP);
1454:       assertEquals(46, Node.IS_NAMESPACE);
1455:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1456:       assertEquals(1, Node.DECR_FLAG);
1457:       assertEquals(29, Node.JSDOC_INFO_PROP);
1458:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1459:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1460:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1461:       assertEquals(57, Node.REFLECTED_OBJECT);
1462:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1463:       assertEquals(49, Node.DIRECT_EVAL);
1464:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1465:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1466:       assertEquals(4095, Node.COLUMN_MASK);
1467:       assertEquals(48, Node.DIRECTIVES);
1468:       assertEquals(39, Node.EMPTY_BLOCK);
1469:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1470:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1471:       assertEquals(50, Node.FREE_CALL);
1472:       assertEquals(36, Node.QUOTED_PROP);
1473:       assertEquals(55, Node.INFERRED_FUNCTION);
1474:       assertEquals(52, Node.LENGTH);
1475:       assertEquals(8, Node.FLAG_NO_THROWS);
1476:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1477:       assertEquals(53, Node.INPUT_ID);
1478:       assertEquals(54, Node.SLASH_V);
1479:       assertEquals(43, Node.IS_CONSTANT_NAME);
1480:       assertEquals(57, Node.LAST_PROP);
1481:       assertEquals(30, Node.VAR_ARGS_NAME);
1482:       assertEquals(40, Node.ORIGINALNAME_PROP);
1483:       assertEquals(2, Node.POST_FLAG);
1484:       assertEquals(46, Node.IS_NAMESPACE);
1485:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1486:       assertEquals(12, Node.COLUMN_BITS);
1487:       assertEquals(37, Node.OPT_ARG_NAME);
1488:       assertEquals(56, Node.CHANGE_TIME);
1489:       assertEquals(32, Node.INCRDECR_PROP);
1490:       assertEquals(30, Node.VAR_ARGS_NAME);
1491:       assertEquals(49, Node.DIRECT_EVAL);
1492:       assertEquals(47, Node.IS_DISPATCHER);
1493:       assertEquals(2, Node.POST_FLAG);
1494:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1495:       assertEquals(54, Node.SLASH_V);
1496:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1497:       assertEquals(43, Node.IS_CONSTANT_NAME);
1498:       assertEquals(50, Node.FREE_CALL);
1499:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1500:       assertEquals(1, Node.DECR_FLAG);
1501:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1502:       assertEquals(39, Node.EMPTY_BLOCK);
1503:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1504:       assertEquals(48, Node.DIRECTIVES);
1505:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1506:       assertEquals(40, Node.ORIGINALNAME_PROP);
1507:       assertEquals(4095, Node.COLUMN_MASK);
1508:       assertEquals(53, Node.INPUT_ID);
1509:       assertEquals(57, Node.REFLECTED_OBJECT);
1510:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1511:       assertEquals(57, Node.LAST_PROP);
1512:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1513:       assertEquals(29, Node.JSDOC_INFO_PROP);
1514:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1515:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1516:       assertEquals(55, Node.INFERRED_FUNCTION);
1517:       assertEquals(36, Node.QUOTED_PROP);
1518:       assertEquals(52, Node.LENGTH);
1519:       assertEquals(8, Node.FLAG_NO_THROWS);
1520:       
1521:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node4.getJsDocBuilderForNode();
1522:       assertFalse(node1.isComma());
1523:       assertFalse(node1.isThis());
1524:       assertFalse(node1.isBreak());
1525:       assertFalse(node1.isGetProp());
1526:       assertFalse(node1.isThrow());
1527:       assertFalse(node1.isNot());
1528:       assertFalse(node1.isObjectLit());
1529:       assertFalse(node1.isInc());
1530:       assertFalse(node1.isSwitch());
1531:       assertFalse(node1.isAnd());
1532:       assertFalse(node1.isCast());
1533:       assertFalse(node1.isFalse());
1534:       assertFalse(node1.isNE());
1535:       assertFalse(node1.isGetterDef());
1536:       assertEquals(17, node1.getCharno());
1537:       assertFalse(node1.isLabelName());
1538:       assertFalse(node1.isFor());
1539:       assertFalse(node1.isIf());
1540:       assertFalse(node1.hasOneChild());
1541:       assertEquals(118801, node1.getSourcePosition());
1542:       assertFalse(node1.isIn());
1543:       assertFalse(node1.isScript());
1544:       assertFalse(node1.isRegExp());
1545:       assertEquals(39, node1.getType());
1546:       assertFalse(node1.isCase());
1547:       assertFalse(node1.isBlock());
1548:       assertFalse(node1.isTry());
1549:       assertFalse(node1.isInstanceOf());
1550:       assertFalse(node1.isHook());
1551:       assertFalse(node1.isWith());
1552:       assertFalse(node1.hasMoreThanOneChild());
1553:       assertFalse(node1.isCatch());
1554:       assertFalse(node1.isNull());
1555:       assertFalse(node1.isSetterDef());
1556:       assertFalse(node1.isStringKey());
1557:       assertFalse(node1.isName());
1558:       assertFalse(node1.isParamList());
1559:       assertFalse(node1.isAdd());
1560:       assertFalse(node1.isDebugger());
1561:       assertFalse(node1.isNew());
1562:       assertFalse(node1.isDo());
1563:       assertFalse(node1.isDefaultCase());
1564:       assertEquals(29, node1.getLineno());
1565:       assertEquals(0, node1.getChildCount());
1566:       assertFalse(node1.isVar());
1567:       assertFalse(node1.isArrayLit());
1568:       assertFalse(node1.isLabel());
1569:       assertFalse(node1.isFunction());
1570:       assertFalse(node1.isContinue());
1571:       assertFalse(node1.isDec());
1572:       assertFalse(node1.isTypeOf());
1573:       assertFalse(node1.isDelProp());
1574:       assertFalse(node1.hasChildren());
1575:       assertFalse(node1.isAssignAdd());
1576:       assertTrue(node1.isNumber());
1577:       assertFalse(node1.isOr());
1578:       assertFalse(node1.isEmpty());
1579:       assertFalse(node1.isString());
1580:       assertFalse(node1.isExprResult());
1581:       assertFalse(node1.isTrue());
1582:       assertFalse(node1.isVoid());
1583:       assertFalse(node1.isWhile());
1584:       assertFalse(node1.isReturn());
1585:       assertFalse(node1.isCall());
1586:       assertFalse(node1.isGetElem());
1587:       assertFalse(node1.isAssign());
1588:       assertFalse(node4.isParamList());
1589:       assertFalse(node4.isSetterDef());
1590:       assertFalse(node4.isNull());
1591:       assertFalse(node4.isStringKey());
1592:       assertFalse(node4.isName());
1593:       assertFalse(node4.isVar());
1594:       assertFalse(node4.isCatch());
1595:       assertFalse(node4.isCall());
1596:       assertEquals(0, node4.getChildCount());
1597:       assertFalse(node4.isTrue());
1598:       assertFalse(node4.isDo());
1599:       assertFalse(node4.isNew());
1600:       assertFalse(node4.isDefaultCase());
1601:       assertFalse(node4.isVoid());
1602:       assertFalse(node4.isAdd());
1603:       assertFalse(node4.isOr());
1604:       assertFalse(node4.isEmpty());
1605:       assertEquals(17, node4.getCharno());
1606:       assertFalse(node4.isDec());
1607:       assertFalse(node4.hasChildren());
1608:       assertFalse(node4.isDelProp());
1609:       assertFalse(node4.isCast());
1610:       assertFalse(node4.isReturn());
1611:       assertFalse(node4.isGetElem());
1612:       assertFalse(node4.isAssign());
1613:       assertFalse(node4.isContinue());
1614:       assertFalse(node4.isFunction());
1615:       assertFalse(node4.isTypeOf());
1616:       assertFalse(node4.isDebugger());
1617:       assertEquals(17, node4.getLineno());
1618:       assertFalse(node4.isWhile());
1619:       assertFalse(node4.isAnd());
1620:       assertFalse(node4.isNot());
1621:       assertFalse(node4.isString());
1622:       assertFalse(node4.isObjectLit());
1623:       assertFalse(node4.isComma());
1624:       assertFalse(node4.isBreak());
1625:       assertFalse(node4.isGetProp());
1626:       assertEquals(17, node4.getType());
1627:       assertFalse(node4.isThis());
1628:       assertFalse(node4.isInstanceOf());
1629:       assertFalse(node4.isThrow());
1630:       assertFalse(node4.isHook());
1631:       assertFalse(node4.isFalse());
1632:       assertFalse(node4.isWith());
1633:       assertFalse(node4.isExprResult());
1634:       assertFalse(node4.isInc());
1635:       assertFalse(node4.isIn());
1636:       assertFalse(node4.isNE());
1637:       assertFalse(node4.isLabelName());
1638:       assertFalse(node4.isFor());
1639:       assertFalse(node4.isAssignAdd());
1640:       assertFalse(node4.isIf());
1641:       assertFalse(node4.isArrayLit());
1642:       assertEquals(69649, node4.getSourcePosition());
1643:       assertFalse(node4.isLabel());
1644:       assertFalse(node4.hasMoreThanOneChild());
1645:       assertFalse(node4.isSwitch());
1646:       assertFalse(node4.isScript());
1647:       assertFalse(node4.isRegExp());
1648:       assertFalse(node4.isBlock());
1649:       assertFalse(node4.isTry());
1650:       assertFalse(node4.isCase());
1651:       assertFalse(node4.hasOneChild());
1652:       assertFalse(node4.isGetterDef());
1653:       assertFalse(node4.isNumber());
1654:       assertSame(node4, node0);
1655:       assertNotSame(node4, node2);
1656:       assertNotSame(node4, node3);
1657:       assertFalse(node1.equals((Object)node0));
1658:       assertFalse(node1.equals((Object)node4));
1659:       assertFalse(node1.equals((Object)node2));
1660:       assertFalse(node1.equals((Object)node3));
1661:       assertFalse(node4.equals((Object)node1));
1662:       assertFalse(node4.equals((Object)node2));
1663:       assertFalse(node4.equals((Object)node3));
1664:       assertNotNull(node_FileLevelJsDocBuilder0);
1665:       assertEquals(37, Node.OPT_ARG_NAME);
1666:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1667:       assertEquals(56, Node.CHANGE_TIME);
1668:       assertEquals(47, Node.IS_DISPATCHER);
1669:       assertEquals(12, Node.COLUMN_BITS);
1670:       assertEquals(32, Node.INCRDECR_PROP);
1671:       assertEquals(46, Node.IS_NAMESPACE);
1672:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1673:       assertEquals(1, Node.DECR_FLAG);
1674:       assertEquals(29, Node.JSDOC_INFO_PROP);
1675:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1676:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1677:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1678:       assertEquals(57, Node.REFLECTED_OBJECT);
1679:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1680:       assertEquals(49, Node.DIRECT_EVAL);
1681:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1682:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1683:       assertEquals(4095, Node.COLUMN_MASK);
1684:       assertEquals(48, Node.DIRECTIVES);
1685:       assertEquals(39, Node.EMPTY_BLOCK);
1686:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1687:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1688:       assertEquals(50, Node.FREE_CALL);
1689:       assertEquals(36, Node.QUOTED_PROP);
1690:       assertEquals(55, Node.INFERRED_FUNCTION);
1691:       assertEquals(52, Node.LENGTH);
1692:       assertEquals(8, Node.FLAG_NO_THROWS);
1693:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1694:       assertEquals(53, Node.INPUT_ID);
1695:       assertEquals(54, Node.SLASH_V);
1696:       assertEquals(43, Node.IS_CONSTANT_NAME);
1697:       assertEquals(57, Node.LAST_PROP);
1698:       assertEquals(30, Node.VAR_ARGS_NAME);
1699:       assertEquals(40, Node.ORIGINALNAME_PROP);
1700:       assertEquals(2, Node.POST_FLAG);
1701:       assertEquals(46, Node.IS_NAMESPACE);
1702:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1703:       assertEquals(12, Node.COLUMN_BITS);
1704:       assertEquals(37, Node.OPT_ARG_NAME);
1705:       assertEquals(56, Node.CHANGE_TIME);
1706:       assertEquals(32, Node.INCRDECR_PROP);
1707:       assertEquals(30, Node.VAR_ARGS_NAME);
1708:       assertEquals(49, Node.DIRECT_EVAL);
1709:       assertEquals(47, Node.IS_DISPATCHER);
1710:       assertEquals(2, Node.POST_FLAG);
1711:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1712:       assertEquals(54, Node.SLASH_V);
1713:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1714:       assertEquals(43, Node.IS_CONSTANT_NAME);
1715:       assertEquals(50, Node.FREE_CALL);
1716:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1717:       assertEquals(1, Node.DECR_FLAG);
1718:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1719:       assertEquals(39, Node.EMPTY_BLOCK);
1720:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1721:       assertEquals(48, Node.DIRECTIVES);
1722:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1723:       assertEquals(40, Node.ORIGINALNAME_PROP);
1724:       assertEquals(4095, Node.COLUMN_MASK);
1725:       assertEquals(53, Node.INPUT_ID);
1726:       assertEquals(57, Node.REFLECTED_OBJECT);
1727:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1728:       assertEquals(57, Node.LAST_PROP);
1729:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1730:       assertEquals(29, Node.JSDOC_INFO_PROP);
1731:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1732:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1733:       assertEquals(55, Node.INFERRED_FUNCTION);
1734:       assertEquals(36, Node.QUOTED_PROP);
1735:       assertEquals(52, Node.LENGTH);
1736:       assertEquals(8, Node.FLAG_NO_THROWS);
1737:       
1738:       Iterable<Node> iterable0 = node4.children();
1739:       assertFalse(iterable0.contains(node4));
1740:       assertFalse(node1.isComma());
1741:       assertFalse(node1.isThis());
1742:       assertFalse(node1.isBreak());
1743:       assertFalse(node1.isGetProp());
1744:       assertFalse(node1.isThrow());
1745:       assertFalse(node1.isNot());
1746:       assertFalse(node1.isObjectLit());
1747:       assertFalse(node1.isInc());
1748:       assertFalse(node1.isSwitch());
1749:       assertFalse(node1.isAnd());
1750:       assertFalse(node1.isCast());
1751:       assertFalse(node1.isFalse());
1752:       assertFalse(node1.isNE());
1753:       assertFalse(node1.isGetterDef());
1754:       assertEquals(17, node1.getCharno());
1755:       assertFalse(node1.isLabelName());
1756:       assertFalse(node1.isFor());
1757:       assertFalse(node1.isIf());
1758:       assertFalse(node1.hasOneChild());
1759:       assertEquals(118801, node1.getSourcePosition());
1760:       assertFalse(node1.isIn());
1761:       assertFalse(node1.isScript());
1762:       assertFalse(node1.isRegExp());
1763:       assertEquals(39, node1.getType());
1764:       assertFalse(node1.isCase());
1765:       assertFalse(node1.isBlock());
1766:       assertFalse(node1.isTry());
1767:       assertFalse(node1.isInstanceOf());
1768:       assertFalse(node1.isHook());
1769:       assertFalse(node1.isWith());
1770:       assertFalse(node1.hasMoreThanOneChild());
1771:       assertFalse(node1.isCatch());
1772:       assertFalse(node1.isNull());
1773:       assertFalse(node1.isSetterDef());
1774:       assertFalse(node1.isStringKey());
1775:       assertFalse(node1.isName());
1776:       assertFalse(node1.isParamList());
1777:       assertFalse(node1.isAdd());
1778:       assertFalse(node1.isDebugger());
1779:       assertFalse(node1.isNew());
1780:       assertFalse(node1.isDo());
1781:       assertFalse(node1.isDefaultCase());
1782:       assertEquals(29, node1.getLineno());
1783:       assertEquals(0, node1.getChildCount());
1784:       assertFalse(node1.isVar());
1785:       assertFalse(node1.isArrayLit());
1786:       assertFalse(node1.isLabel());
1787:       assertFalse(node1.isFunction());
1788:       assertFalse(node1.isContinue());
1789:       assertFalse(node1.isDec());
1790:       assertFalse(node1.isTypeOf());
1791:       assertFalse(node1.isDelProp());
1792:       assertFalse(node1.hasChildren());
1793:       assertFalse(node1.isAssignAdd());
1794:       assertTrue(node1.isNumber());
1795:       assertFalse(node1.isOr());
1796:       assertFalse(node1.isEmpty());
1797:       assertFalse(node1.isString());
1798:       assertFalse(node1.isExprResult());
1799:       assertFalse(node1.isTrue());
1800:       assertFalse(node1.isVoid());
1801:       assertFalse(node1.isWhile());
1802:       assertFalse(node1.isReturn());
1803:       assertFalse(node1.isCall());
1804:       assertFalse(node1.isGetElem());
1805:       assertFalse(node1.isAssign());
1806:       assertFalse(node4.isParamList());
1807:       assertFalse(node4.isSetterDef());
1808:       assertFalse(node4.isNull());
1809:       assertFalse(node4.isStringKey());
1810:       assertFalse(node4.isName());
1811:       assertFalse(node4.isVar());
1812:       assertFalse(node4.isCatch());
1813:       assertFalse(node4.isCall());
1814:       assertEquals(0, node4.getChildCount());
1815:       assertFalse(node4.isTrue());
1816:       assertFalse(node4.isDo());
1817:       assertFalse(node4.isNew());
1818:       assertFalse(node4.isDefaultCase());
1819:       assertFalse(node4.isVoid());
1820:       assertFalse(node4.isAdd());
1821:       assertFalse(node4.isOr());
1822:       assertFalse(node4.isEmpty());
1823:       assertEquals(17, node4.getCharno());
1824:       assertFalse(node4.isDec());
1825:       assertFalse(node4.hasChildren());
1826:       assertFalse(node4.isDelProp());
1827:       assertFalse(node4.isCast());
1828:       assertFalse(node4.isReturn());
1829:       assertFalse(node4.isGetElem());
1830:       assertFalse(node4.isAssign());
1831:       assertFalse(node4.isContinue());
1832:       assertFalse(node4.isFunction());
1833:       assertFalse(node4.isTypeOf());
1834:       assertFalse(node4.isDebugger());
1835:       assertEquals(17, node4.getLineno());
1836:       assertFalse(node4.isWhile());
1837:       assertFalse(node4.isAnd());
1838:       assertFalse(node4.isNot());
1839:       assertFalse(node4.isString());
1840:       assertFalse(node4.isObjectLit());
1841:       assertFalse(node4.isComma());
1842:       assertFalse(node4.isBreak());
1843:       assertFalse(node4.isGetProp());
1844:       assertEquals(17, node4.getType());
1845:       assertFalse(node4.isThis());
1846:       assertFalse(node4.isInstanceOf());
1847:       assertFalse(node4.isThrow());
1848:       assertFalse(node4.isHook());
1849:       assertFalse(node4.isFalse());
1850:       assertFalse(node4.isWith());
1851:       assertFalse(node4.isExprResult());
1852:       assertFalse(node4.isInc());
1853:       assertFalse(node4.isIn());
1854:       assertFalse(node4.isNE());
1855:       assertFalse(node4.isLabelName());
1856:       assertFalse(node4.isFor());
1857:       assertFalse(node4.isAssignAdd());
1858:       assertFalse(node4.isIf());
1859:       assertFalse(node4.isArrayLit());
1860:       assertEquals(69649, node4.getSourcePosition());
1861:       assertFalse(node4.isLabel());
1862:       assertFalse(node4.hasMoreThanOneChild());
1863:       assertFalse(node4.isSwitch());
1864:       assertFalse(node4.isScript());
1865:       assertFalse(node4.isRegExp());
1866:       assertFalse(node4.isBlock());
1867:       assertFalse(node4.isTry());
1868:       assertFalse(node4.isCase());
1869:       assertFalse(node4.hasOneChild());
1870:       assertFalse(node4.isGetterDef());
1871:       assertFalse(node4.isNumber());
1872:       assertSame(node4, node0);
1873:       assertNotSame(node4, node2);
1874:       assertNotSame(node4, node3);
1875:       assertFalse(node1.equals((Object)node0));
1876:       assertFalse(node1.equals((Object)node4));
1877:       assertFalse(node1.equals((Object)node2));
1878:       assertFalse(node1.equals((Object)node3));
1879:       assertFalse(node4.equals((Object)node1));
1880:       assertFalse(node4.equals((Object)node2));
1881:       assertFalse(node4.equals((Object)node3));
1882:       assertNotNull(iterable0);
1883:       assertEquals(37, Node.OPT_ARG_NAME);
1884:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1885:       assertEquals(56, Node.CHANGE_TIME);
1886:       assertEquals(47, Node.IS_DISPATCHER);
1887:       assertEquals(12, Node.COLUMN_BITS);
1888:       assertEquals(32, Node.INCRDECR_PROP);
1889:       assertEquals(46, Node.IS_NAMESPACE);
1890:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1891:       assertEquals(1, Node.DECR_FLAG);
1892:       assertEquals(29, Node.JSDOC_INFO_PROP);
1893:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1894:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1895:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1896:       assertEquals(57, Node.REFLECTED_OBJECT);
1897:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1898:       assertEquals(49, Node.DIRECT_EVAL);
1899:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1900:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1901:       assertEquals(4095, Node.COLUMN_MASK);
1902:       assertEquals(48, Node.DIRECTIVES);
1903:       assertEquals(39, Node.EMPTY_BLOCK);
1904:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1905:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1906:       assertEquals(50, Node.FREE_CALL);
1907:       assertEquals(36, Node.QUOTED_PROP);
1908:       assertEquals(55, Node.INFERRED_FUNCTION);
1909:       assertEquals(52, Node.LENGTH);
1910:       assertEquals(8, Node.FLAG_NO_THROWS);
1911:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1912:       assertEquals(53, Node.INPUT_ID);
1913:       assertEquals(54, Node.SLASH_V);
1914:       assertEquals(43, Node.IS_CONSTANT_NAME);
1915:       assertEquals(57, Node.LAST_PROP);
1916:       assertEquals(30, Node.VAR_ARGS_NAME);
1917:       assertEquals(40, Node.ORIGINALNAME_PROP);
1918:       assertEquals(2, Node.POST_FLAG);
1919:       assertEquals(46, Node.IS_NAMESPACE);
1920:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1921:       assertEquals(12, Node.COLUMN_BITS);
1922:       assertEquals(37, Node.OPT_ARG_NAME);
1923:       assertEquals(56, Node.CHANGE_TIME);
1924:       assertEquals(32, Node.INCRDECR_PROP);
1925:       assertEquals(30, Node.VAR_ARGS_NAME);
1926:       assertEquals(49, Node.DIRECT_EVAL);
1927:       assertEquals(47, Node.IS_DISPATCHER);
1928:       assertEquals(2, Node.POST_FLAG);
1929:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1930:       assertEquals(54, Node.SLASH_V);
1931:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1932:       assertEquals(43, Node.IS_CONSTANT_NAME);
1933:       assertEquals(50, Node.FREE_CALL);
1934:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1935:       assertEquals(1, Node.DECR_FLAG);
1936:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1937:       assertEquals(39, Node.EMPTY_BLOCK);
1938:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1939:       assertEquals(48, Node.DIRECTIVES);
1940:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1941:       assertEquals(40, Node.ORIGINALNAME_PROP);
1942:       assertEquals(4095, Node.COLUMN_MASK);
1943:       assertEquals(53, Node.INPUT_ID);
1944:       assertEquals(57, Node.REFLECTED_OBJECT);
1945:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1946:       assertEquals(57, Node.LAST_PROP);
1947:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1948:       assertEquals(29, Node.JSDOC_INFO_PROP);
1949:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1950:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1951:       assertEquals(55, Node.INFERRED_FUNCTION);
1952:       assertEquals(36, Node.QUOTED_PROP);
1953:       assertEquals(52, Node.LENGTH);
1954:       assertEquals(8, Node.FLAG_NO_THROWS);
1955:       
1956:       Node node5 = node4.cloneTree();
1957:       assertFalse(node1.isComma());
1958:       assertFalse(node1.isThis());
1959:       assertFalse(node1.isBreak());
1960:       assertFalse(node1.isGetProp());
1961:       assertFalse(node1.isThrow());
1962:       assertFalse(node1.isNot());
1963:       assertFalse(node1.isObjectLit());
1964:       assertFalse(node1.isInc());
1965:       assertFalse(node1.isSwitch());
1966:       assertFalse(node1.isAnd());
1967:       assertFalse(node1.isCast());
1968:       assertFalse(node1.isFalse());
1969:       assertFalse(node1.isNE());
1970:       assertFalse(node1.isGetterDef());
1971:       assertEquals(17, node1.getCharno());
1972:       assertFalse(node1.isLabelName());
1973:       assertFalse(node1.isFor());
1974:       assertFalse(node1.isIf());
1975:       assertFalse(node1.hasOneChild());
1976:       assertEquals(118801, node1.getSourcePosition());
1977:       assertFalse(node1.isIn());
1978:       assertFalse(node1.isScript());
1979:       assertFalse(node1.isRegExp());
1980:       assertEquals(39, node1.getType());
1981:       assertFalse(node1.isCase());
1982:       assertFalse(node1.isBlock());
1983:       assertFalse(node1.isTry());
1984:       assertFalse(node1.isInstanceOf());
1985:       assertFalse(node1.isHook());
1986:       assertFalse(node1.isWith());
1987:       assertFalse(node1.hasMoreThanOneChild());
1988:       assertFalse(node1.isCatch());
1989:       assertFalse(node1.isNull());
1990:       assertFalse(node1.isSetterDef());
1991:       assertFalse(node1.isStringKey());
1992:       assertFalse(node1.isName());
1993:       assertFalse(node1.isParamList());
1994:       assertFalse(node1.isAdd());
1995:       assertFalse(node1.isDebugger());
1996:       assertFalse(node1.isNew());
1997:       assertFalse(node1.isDo());
1998:       assertFalse(node1.isDefaultCase());
1999:       assertEquals(29, node1.getLineno());
2000:       assertEquals(0, node1.getChildCount());
2001:       assertFalse(node1.isVar());
2002:       assertFalse(node1.isArrayLit());
2003:       assertFalse(node1.isLabel());
2004:       assertFalse(node1.isFunction());
2005:       assertFalse(node1.isContinue());
2006:       assertFalse(node1.isDec());
2007:       assertFalse(node1.isTypeOf());
2008:       assertFalse(node1.isDelProp());
2009:       assertFalse(node1.hasChildren());
2010:       assertFalse(node1.isAssignAdd());
2011:       assertTrue(node1.isNumber());
2012:       assertFalse(node1.isOr());
2013:       assertFalse(node1.isEmpty());
2014:       assertFalse(node1.isString());
2015:       assertFalse(node1.isExprResult());
2016:       assertFalse(node1.isTrue());
2017:       assertFalse(node1.isVoid());
2018:       assertFalse(node1.isWhile());
2019:       assertFalse(node1.isReturn());
2020:       assertFalse(node1.isCall());
2021:       assertFalse(node1.isGetElem());
2022:       assertFalse(node1.isAssign());
2023:       assertFalse(node4.isParamList());
2024:       assertFalse(node4.isSetterDef());
2025:       assertFalse(node4.isNull());
2026:       assertFalse(node4.isStringKey());
2027:       assertFalse(node4.isName());
2028:       assertFalse(node4.isVar());
2029:       assertFalse(node4.isCatch());
2030:       assertFalse(node4.isCall());
2031:       assertEquals(0, node4.getChildCount());
2032:       assertFalse(node4.isTrue());
2033:       assertFalse(node4.isDo());
2034:       assertFalse(node4.isNew());
2035:       assertFalse(node4.isDefaultCase());
2036:       assertFalse(node4.isVoid());
2037:       assertFalse(node4.isAdd());
2038:       assertFalse(node4.isOr());
2039:       assertFalse(node4.isEmpty());
2040:       assertEquals(17, node4.getCharno());
2041:       assertFalse(node4.isDec());
2042:       assertFalse(node4.hasChildren());
2043:       assertFalse(node4.isDelProp());
2044:       assertFalse(node4.isCast());
2045:       assertFalse(node4.isReturn());
2046:       assertFalse(node4.isGetElem());
2047:       assertFalse(node4.isAssign());
2048:       assertFalse(node4.isContinue());
2049:       assertFalse(node4.isFunction());
2050:       assertFalse(node4.isTypeOf());
2051:       assertFalse(node4.isDebugger());
2052:       assertEquals(17, node4.getLineno());
2053:       assertFalse(node4.isWhile());
2054:       assertFalse(node4.isAnd());
2055:       assertFalse(node4.isNot());
2056:       assertFalse(node4.isString());
2057:       assertFalse(node4.isObjectLit());
2058:       assertFalse(node4.isComma());
2059:       assertFalse(node4.isBreak());
2060:       assertFalse(node4.isGetProp());
2061:       assertEquals(17, node4.getType());
2062:       assertFalse(node4.isThis());
2063:       assertFalse(node4.isInstanceOf());
2064:       assertFalse(node4.isThrow());
2065:       assertFalse(node4.isHook());
2066:       assertFalse(node4.isFalse());
2067:       assertFalse(node4.isWith());
2068:       assertFalse(node4.isExprResult());
2069:       assertFalse(node4.isInc());
2070:       assertFalse(node4.isIn());
2071:       assertFalse(node4.isNE());
2072:       assertFalse(node4.isLabelName());
2073:       assertFalse(node4.isFor());
2074:       assertFalse(node4.isAssignAdd());
2075:       assertFalse(node4.isIf());
2076:       assertFalse(node4.isArrayLit());
2077:       assertEquals(69649, node4.getSourcePosition());
2078:       assertFalse(node4.isLabel());
2079:       assertFalse(node4.hasMoreThanOneChild());
2080:       assertFalse(node4.isSwitch());
2081:       assertFalse(node4.isScript());
2082:       assertFalse(node4.isRegExp());
2083:       assertFalse(node4.isBlock());
2084:       assertFalse(node4.isTry());
2085:       assertFalse(node4.isCase());
2086:       assertFalse(node4.hasOneChild());
2087:       assertFalse(node4.isGetterDef());
2088:       assertFalse(node4.isNumber());
2089:       assertFalse(node5.hasMoreThanOneChild());
2090:       assertFalse(node5.isContinue());
2091:       assertFalse(node5.isDo());
2092:       assertFalse(node5.isAssignAdd());
2093:       assertFalse(node5.isNumber());
2094:       assertFalse(node5.isOr());
2095:       assertFalse(node5.isCall());
2096:       assertFalse(node5.isGetElem());
2097:       assertFalse(node5.isName());
2098:       assertFalse(node5.hasOneChild());
2099:       assertFalse(node5.isExprResult());
2100:       assertFalse(node5.isTypeOf());
2101:       assertFalse(node5.isWhile());
2102:       assertEquals(69649, node5.getSourcePosition());
2103:       assertFalse(node5.isWith());
2104:       assertFalse(node5.isAssign());
2105:       assertFalse(node5.isBlock());
2106:       assertFalse(node5.isReturn());
2107:       assertFalse(node5.isDec());
2108:       assertFalse(node5.hasChildren());
2109:       assertFalse(node5.isCatch());
2110:       assertFalse(node5.isObjectLit());
2111:       assertFalse(node5.isInstanceOf());
2112:       assertFalse(node5.isAnd());
2113:       assertFalse(node5.isGetProp());
2114:       assertFalse(node5.isSetterDef());
2115:       assertFalse(node5.isNot());
2116:       assertFalse(node5.isDebugger());
2117:       assertFalse(node5.isCast());
2118:       assertFalse(node5.isFalse());
2119:       assertFalse(node5.isThrow());
2120:       assertEquals(17, node5.getCharno());
2121:       assertFalse(node5.isFunction());
2122:       assertFalse(node5.isIn());
2123:       assertFalse(node5.isCase());
2124:       assertFalse(node5.isSwitch());
2125:       assertFalse(node5.isNE());
2126:       assertFalse(node5.isInc());
2127:       assertFalse(node5.isIf());
2128:       assertFalse(node5.isString());
2129:       assertFalse(node5.isGetterDef());
2130:       assertFalse(node5.isTry());
2131:       assertEquals(17, node5.getLineno());
2132:       assertFalse(node5.isDelProp());
2133:       assertFalse(node5.isBreak());
2134:       assertFalse(node5.isVoid());
2135:       assertFalse(node5.isThis());
2136:       assertFalse(node5.isRegExp());
2137:       assertFalse(node5.isFor());
2138:       assertFalse(node5.isHook());
2139:       assertFalse(node5.isComma());
2140:       assertFalse(node5.isScript());
2141:       assertFalse(node5.isNull());
2142:       assertFalse(node5.isTrue());
2143:       assertEquals(17, node5.getType());
2144:       assertFalse(node5.isParamList());
2145:       assertFalse(node5.isVar());
2146:       assertFalse(node5.isStringKey());
2147:       assertFalse(node5.isLabelName());
2148:       assertFalse(node5.isEmpty());
2149:       assertFalse(node5.isAdd());
2150:       assertFalse(node5.isArrayLit());
2151:       assertFalse(node5.isNew());
2152:       assertFalse(node5.isDefaultCase());
2153:       assertFalse(node5.isLabel());
2154:       assertEquals(0, node5.getChildCount());
2155:       assertSame(node4, node0);
2156:       assertNotSame(node4, node5);
2157:       assertNotSame(node4, node2);
2158:       assertNotSame(node4, node3);
2159:       assertNotSame(node5, node3);
2160:       assertNotSame(node5, node4);
2161:       assertNotSame(node5, node0);
2162:       assertNotSame(node5, node2);
2163:       assertFalse(node1.equals((Object)node0));
2164:       assertFalse(node1.equals((Object)node4));
2165:       assertFalse(node1.equals((Object)node2));
2166:       assertFalse(node1.equals((Object)node3));
2167:       assertFalse(node4.equals((Object)node1));
2168:       assertFalse(node4.equals((Object)node2));
2169:       assertFalse(node4.equals((Object)node3));
2170:       assertFalse(node5.equals((Object)node1));
2171:       assertFalse(node5.equals((Object)node3));
2172:       assertFalse(node5.equals((Object)node4));
2173:       assertFalse(node5.equals((Object)node0));
2174:       assertFalse(node5.equals((Object)node2));
2175:       assertNotNull(node5);
2176:       assertEquals(37, Node.OPT_ARG_NAME);
2177:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2178:       assertEquals(56, Node.CHANGE_TIME);
2179:       assertEquals(47, Node.IS_DISPATCHER);
2180:       assertEquals(12, Node.COLUMN_BITS);
2181:       assertEquals(32, Node.INCRDECR_PROP);
2182:       assertEquals(46, Node.IS_NAMESPACE);
2183:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2184:       assertEquals(1, Node.DECR_FLAG);
2185:       assertEquals(29, Node.JSDOC_INFO_PROP);
2186:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2187:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2188:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2189:       assertEquals(57, Node.REFLECTED_OBJECT);
2190:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2191:       assertEquals(49, Node.DIRECT_EVAL);
2192:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2193:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2194:       assertEquals(4095, Node.COLUMN_MASK);
2195:       assertEquals(48, Node.DIRECTIVES);
2196:       assertEquals(39, Node.EMPTY_BLOCK);
2197:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2199:       assertEquals(50, Node.FREE_CALL);
2200:       assertEquals(36, Node.QUOTED_PROP);
2201:       assertEquals(55, Node.INFERRED_FUNCTION);
2202:       assertEquals(52, Node.LENGTH);
2203:       assertEquals(8, Node.FLAG_NO_THROWS);
2204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2205:       assertEquals(53, Node.INPUT_ID);
2206:       assertEquals(54, Node.SLASH_V);
2207:       assertEquals(43, Node.IS_CONSTANT_NAME);
2208:       assertEquals(57, Node.LAST_PROP);
2209:       assertEquals(30, Node.VAR_ARGS_NAME);
2210:       assertEquals(40, Node.ORIGINALNAME_PROP);
2211:       assertEquals(2, Node.POST_FLAG);
2212:       assertEquals(46, Node.IS_NAMESPACE);
2213:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2214:       assertEquals(12, Node.COLUMN_BITS);
2215:       assertEquals(37, Node.OPT_ARG_NAME);
2216:       assertEquals(56, Node.CHANGE_TIME);
2217:       assertEquals(32, Node.INCRDECR_PROP);
2218:       assertEquals(30, Node.VAR_ARGS_NAME);
2219:       assertEquals(49, Node.DIRECT_EVAL);
2220:       assertEquals(47, Node.IS_DISPATCHER);
2221:       assertEquals(2, Node.POST_FLAG);
2222:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2223:       assertEquals(54, Node.SLASH_V);
2224:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2225:       assertEquals(43, Node.IS_CONSTANT_NAME);
2226:       assertEquals(50, Node.FREE_CALL);
2227:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2228:       assertEquals(1, Node.DECR_FLAG);
2229:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2230:       assertEquals(39, Node.EMPTY_BLOCK);
2231:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2232:       assertEquals(48, Node.DIRECTIVES);
2233:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2234:       assertEquals(40, Node.ORIGINALNAME_PROP);
2235:       assertEquals(4095, Node.COLUMN_MASK);
2236:       assertEquals(53, Node.INPUT_ID);
2237:       assertEquals(57, Node.REFLECTED_OBJECT);
2238:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2239:       assertEquals(57, Node.LAST_PROP);
2240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2241:       assertEquals(29, Node.JSDOC_INFO_PROP);
2242:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2243:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2244:       assertEquals(55, Node.INFERRED_FUNCTION);
2245:       assertEquals(36, Node.QUOTED_PROP);
2246:       assertEquals(52, Node.LENGTH);
2247:       assertEquals(8, Node.FLAG_NO_THROWS);
2248:       assertEquals(43, Node.IS_CONSTANT_NAME);
2249:       assertEquals(55, Node.INFERRED_FUNCTION);
2250:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2251:       assertEquals(53, Node.INPUT_ID);
2252:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2253:       assertEquals(8, Node.FLAG_NO_THROWS);
2254:       assertEquals(36, Node.QUOTED_PROP);
2255:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2256:       assertEquals(29, Node.JSDOC_INFO_PROP);
2257:       assertEquals(39, Node.EMPTY_BLOCK);
2258:       assertEquals(40, Node.ORIGINALNAME_PROP);
2259:       assertEquals(2, Node.POST_FLAG);
2260:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2261:       assertEquals(47, Node.IS_DISPATCHER);
2262:       assertEquals(30, Node.VAR_ARGS_NAME);
2263:       assertEquals(49, Node.DIRECT_EVAL);
2264:       assertEquals(57, Node.LAST_PROP);
2265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2266:       assertEquals(1, Node.DECR_FLAG);
2267:       assertEquals(52, Node.LENGTH);
2268:       assertEquals(46, Node.IS_NAMESPACE);
2269:       assertEquals(54, Node.SLASH_V);
2270:       assertEquals(57, Node.REFLECTED_OBJECT);
2271:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2272:       assertEquals(50, Node.FREE_CALL);
2273:       assertEquals(56, Node.CHANGE_TIME);
2274:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2275:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2276:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2277:       assertEquals(48, Node.DIRECTIVES);
2278:       assertEquals(37, Node.OPT_ARG_NAME);
2279:       assertEquals(32, Node.INCRDECR_PROP);
2280:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2281:       assertEquals(4095, Node.COLUMN_MASK);
2282:       assertEquals(12, Node.COLUMN_BITS);
2283:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2284:       
2285:       Object object0 = new Object();
2286:       assertNotNull(object0);
2287:       
2288:       node4.putProp(21, object0);
2289:       assertFalse(node1.isComma());
2290:       assertFalse(node1.isThis());
2291:       assertFalse(node1.isBreak());
2292:       assertFalse(node1.isGetProp());
2293:       assertFalse(node1.isThrow());
2294:       assertFalse(node1.isNot());
2295:       assertFalse(node1.isObjectLit());
2296:       assertFalse(node1.isInc());
2297:       assertFalse(node1.isSwitch());
2298:       assertFalse(node1.isAnd());
2299:       assertFalse(node1.isCast());
2300:       assertFalse(node1.isFalse());
2301:       assertFalse(node1.isNE());
2302:       assertFalse(node1.isGetterDef());
2303:       assertEquals(17, node1.getCharno());
2304:       assertFalse(node1.isLabelName());
2305:       assertFalse(node1.isFor());
2306:       assertFalse(node1.isIf());
2307:       assertFalse(node1.hasOneChild());
2308:       assertEquals(118801, node1.getSourcePosition());
2309:       assertFalse(node1.isIn());
2310:       assertFalse(node1.isScript());
2311:       assertFalse(node1.isRegExp());
2312:       assertEquals(39, node1.getType());
2313:       assertFalse(node1.isCase());
2314:       assertFalse(node1.isBlock());
2315:       assertFalse(node1.isTry());
2316:       assertFalse(node1.isInstanceOf());
2317:       assertFalse(node1.isHook());
2318:       assertFalse(node1.isWith());
2319:       assertFalse(node1.hasMoreThanOneChild());
2320:       assertFalse(node1.isCatch());
2321:       assertFalse(node1.isNull());
2322:       assertFalse(node1.isSetterDef());
2323:       assertFalse(node1.isStringKey());
2324:       assertFalse(node1.isName());
2325:       assertFalse(node1.isParamList());
2326:       assertFalse(node1.isAdd());
2327:       assertFalse(node1.isDebugger());
2328:       assertFalse(node1.isNew());
2329:       assertFalse(node1.isDo());
2330:       assertFalse(node1.isDefaultCase());
2331:       assertEquals(29, node1.getLineno());
2332:       assertEquals(0, node1.getChildCount());
2333:       assertFalse(node1.isVar());
2334:       assertFalse(node1.isArrayLit());
2335:       assertFalse(node1.isLabel());
2336:       assertFalse(node1.isFunction());
2337:       assertFalse(node1.isContinue());
2338:       assertFalse(node1.isDec());
2339:       assertFalse(node1.isTypeOf());
2340:       assertFalse(node1.isDelProp());
2341:       assertFalse(node1.hasChildren());
2342:       assertFalse(node1.isAssignAdd());
2343:       assertTrue(node1.isNumber());
2344:       assertFalse(node1.isOr());
2345:       assertFalse(node1.isEmpty());
2346:       assertFalse(node1.isString());
2347:       assertFalse(node1.isExprResult());
2348:       assertFalse(node1.isTrue());
2349:       assertFalse(node1.isVoid());
2350:       assertFalse(node1.isWhile());
2351:       assertFalse(node1.isReturn());
2352:       assertFalse(node1.isCall());
2353:       assertFalse(node1.isGetElem());
2354:       assertFalse(node1.isAssign());
2355:       assertFalse(node4.isParamList());
2356:       assertFalse(node4.isSetterDef());
2357:       assertFalse(node4.isNull());
2358:       assertFalse(node4.isStringKey());
2359:       assertFalse(node4.isName());
2360:       assertFalse(node4.isVar());
2361:       assertFalse(node4.isCatch());
2362:       assertFalse(node4.isCall());
2363:       assertEquals(0, node4.getChildCount());
2364:       assertFalse(node4.isTrue());
2365:       assertFalse(node4.isDo());
2366:       assertFalse(node4.isNew());
2367:       assertFalse(node4.isDefaultCase());
2368:       assertFalse(node4.isVoid());
2369:       assertFalse(node4.isAdd());
2370:       assertFalse(node4.isOr());
2371:       assertFalse(node4.isEmpty());
2372:       assertEquals(17, node4.getCharno());
2373:       assertFalse(node4.isDec());
2374:       assertFalse(node4.hasChildren());
2375:       assertFalse(node4.isDelProp());
2376:       assertFalse(node4.isCast());
2377:       assertFalse(node4.isReturn());
2378:       assertFalse(node4.isGetElem());
2379:       assertFalse(node4.isAssign());
2380:       assertFalse(node4.isContinue());
2381:       assertFalse(node4.isFunction());
2382:       assertFalse(node4.isTypeOf());
2383:       assertFalse(node4.isDebugger());
2384:       assertEquals(17, node4.getLineno());
2385:       assertFalse(node4.isWhile());
2386:       assertFalse(node4.isAnd());
2387:       assertFalse(node4.isNot());
2388:       assertFalse(node4.isString());
2389:       assertFalse(node4.isObjectLit());
2390:       assertFalse(node4.isComma());
2391:       assertFalse(node4.isBreak());
2392:       assertFalse(node4.isGetProp());
2393:       assertEquals(17, node4.getType());
2394:       assertFalse(node4.isThis());
2395:       assertFalse(node4.isInstanceOf());
2396:       assertFalse(node4.isThrow());
2397:       assertFalse(node4.isHook());
2398:       assertFalse(node4.isFalse());
2399:       assertFalse(node4.isWith());
2400:       assertFalse(node4.isExprResult());
2401:       assertFalse(node4.isInc());
2402:       assertFalse(node4.isIn());
2403:       assertFalse(node4.isNE());
2404:       assertFalse(node4.isLabelName());
2405:       assertFalse(node4.isFor());
2406:       assertFalse(node4.isAssignAdd());
2407:       assertFalse(node4.isIf());
2408:       assertFalse(node4.isArrayLit());
2409:       assertEquals(69649, node4.getSourcePosition());
2410:       assertFalse(node4.isLabel());
2411:       assertFalse(node4.hasMoreThanOneChild());
2412:       assertFalse(node4.isSwitch());
2413:       assertFalse(node4.isScript());
2414:       assertFalse(node4.isRegExp());
2415:       assertFalse(node4.isBlock());
2416:       assertFalse(node4.isTry());
2417:       assertFalse(node4.isCase());
2418:       assertFalse(node4.hasOneChild());
2419:       assertFalse(node4.isGetterDef());
2420:       assertFalse(node4.isNumber());
2421:       assertSame(node4, node0);
2422:       assertNotSame(node4, node5);
2423:       assertNotSame(node4, node2);
2424:       assertNotSame(node4, node3);
2425:       assertFalse(node1.equals((Object)node0));
2426:       assertFalse(node1.equals((Object)node4));
2427:       assertFalse(node1.equals((Object)node5));
2428:       assertFalse(node1.equals((Object)node2));
2429:       assertFalse(node1.equals((Object)node3));
2430:       assertFalse(node4.equals((Object)node5));
2431:       assertFalse(node4.equals((Object)node1));
2432:       assertFalse(node4.equals((Object)node2));
2433:       assertFalse(node4.equals((Object)node3));
2434:       assertEquals(37, Node.OPT_ARG_NAME);
2435:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2436:       assertEquals(56, Node.CHANGE_TIME);
2437:       assertEquals(47, Node.IS_DISPATCHER);
2438:       assertEquals(12, Node.COLUMN_BITS);
2439:       assertEquals(32, Node.INCRDECR_PROP);
2440:       assertEquals(46, Node.IS_NAMESPACE);
2441:       
2442:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
2443:       assertEquals(51, node_SideEffectFlags0.valueOf());
2444:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
2445:       assertNotNull(node_SideEffectFlags0);
2446:       
2447:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
2448:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
2449:       assertEquals(31, node_SideEffectFlags1.valueOf());
2450:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
2451:       assertEquals(31, node_SideEffectFlags0.valueOf());
2452:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2453:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2454:       assertNotNull(node_SideEffectFlags1);
2455:       
2456:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
2457:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
2458:       assertEquals(23, node_SideEffectFlags2.valueOf());
2459:       assertEquals(23, node_SideEffectFlags0.valueOf());
2460:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
2461:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
2462:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
2463:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2464:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2465:       assertNotNull(node_SideEffectFlags2);
2466:       
2467:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
2468:       assertEquals(23, node_SideEffectFlags1.valueOf());
2469:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
2470:       assertEquals(23, node_SideEffectFlags3.valueOf());
2471:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
2472:       assertEquals(23, node_SideEffectFlags0.valueOf());
2473:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
2474:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2475:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2476:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
2477:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
2478:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
2479:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
2480:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2481:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2482:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2483:       assertNotNull(node_SideEffectFlags3);
2484:       
2485:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
2486:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
2487:       assertEquals(0, node_SideEffectFlags1.valueOf());
2488:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
2489:       assertEquals(0, node_SideEffectFlags3.valueOf());
2490:       assertEquals(0, node_SideEffectFlags4.valueOf());
2491:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
2492:       assertEquals(0, node_SideEffectFlags0.valueOf());
2493:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2494:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
2495:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2496:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2497:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
2498:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
2499:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
2500:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
2501:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
2502:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
2503:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
2504:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
2505:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
2506:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2507:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2508:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2509:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
2510:       assertNotNull(node_SideEffectFlags4);
2511:       
2512:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesGlobalState();
2513:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
2514:       assertEquals(0, node_SideEffectFlags2.valueOf());
2515:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
2516:       assertEquals(0, node_SideEffectFlags5.valueOf());
2517:       assertEquals(0, node_SideEffectFlags0.valueOf());
2518:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2519:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
2520:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
2521:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
2522:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
2523:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
2524:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
2525:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
2526:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
2527:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
2528:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
2529:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2530:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2531:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
2532:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2533:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
2534:       assertNotNull(node_SideEffectFlags5);
2535:       
2536:       // Undeclared exception!
2537:       try { 
2538:         node3.setSideEffectFlags(node_SideEffectFlags1);
2539:         fail("Expecting exception: IllegalStateException");
2540:       
2541:       } catch(IllegalStateException e) {
2542:          //
2543:          // 53
2544:          //
2545:          verifyException("com.google.javascript.rhino.Token", e);
2546:       }
2547:   }
2548: }
RegularFileObject[/tmp/EvoSuite_103_1628161063818/com/google/javascript/rhino/Node_103_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:57:44 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_103_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_103_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_103_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.jstype.TemplatizedType",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.jstype.TernaryValue",
353:       "com.google.javascript.rhino.jstype.JSType$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.common.collect.Platform",
362:       "com.google.javascript.rhino.JSTypeExpression",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
367:       "com.google.common.collect.ImmutableList$1",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.JSDocInfo$Marker"
370:     );
371:   }
372: }

[MASTER] 10:57:44.381 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(17, 17, 17);
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertEquals(69649, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals(17, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertEquals(17, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(17, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertNotNull(node0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
assertFalse(boolean0);

Node node1 = Node.newNumber((double) 38, 29, 17);
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertEquals(17, node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(29, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);

boolean boolean1 = node1.isNoSideEffectsCall();
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertEquals(17, node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(29, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(boolean1);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);

node0.addSuppression("k^");
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertEquals(69649, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals(17, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertEquals(17, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(17, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.equals((Object)node1));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);

Node node2 = new Node(56, node1, node0, node0, node0, 51, 56);
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertEquals(69649, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals(17, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertEquals(17, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(17, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertEquals(17, node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(29, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isGetProp());
assertEquals(208952, node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertFalse(node2.isContinue());
assertFalse(node2.isCase());
assertTrue(node2.hasChildren());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals(56, node2.getType());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isParamList());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isSwitch());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertEquals(51, node2.getLineno());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertEquals(56, node2.getCharno());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node node3 = new Node(53);
assertFalse(node3.isTry());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFunction());
assertFalse(node3.isDebugger());
assertFalse(node3.isRegExp());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isCatch());
assertFalse(node3.isIn());
assertFalse(node3.isDelProp());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isVoid());
assertFalse(node3.isName());
assertFalse(node3.isIf());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isHook());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertFalse(node3.isThis());
assertFalse(node3.isVar());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isLabel());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isSwitch());
assertFalse(node3.hasOneChild());
assertFalse(node3.isExprResult());
assertFalse(node3.isCast());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isScript());
assertFalse(node3.hasChildren());
assertFalse(node3.isAssignAdd());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isReturn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isOr());
assertFalse(node3.isComma());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWith());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isGetElem());
assertFalse(node3.isBreak());
assertFalse(node3.isInc());
assertFalse(node3.isCall());
assertFalse(node3.isFalse());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThrow());
assertFalse(node3.isGetProp());
assertFalse(node3.isObjectLit());
assertFalse(node3.isContinue());
assertFalse(node3.isNot());
assertEquals(53, node3.getType());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isAnd());
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertNotNull(node3);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);

boolean boolean2 = node1.isInc();
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertEquals(17, node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(29, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(boolean2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);

boolean boolean3 = node2.isRegExp();
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertEquals(69649, node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertEquals(17, node0.getCharno());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertEquals(17, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isTry());
assertFalse(node0.isStringKey());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(17, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertEquals(17, node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(29, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isGetProp());
assertEquals(208952, node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertFalse(node2.isContinue());
assertFalse(node2.isCase());
assertTrue(node2.hasChildren());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertEquals(56, node2.getType());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isParamList());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isSwitch());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertEquals(51, node2.getLineno());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertEquals(56, node2.getCharno());
assertNotSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node2, node0);
assertNotSame(node2, node3);
assertFalse(boolean3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node node4 = node1.getLastSibling();
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertEquals(17, node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(29, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isVar());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isTrue());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVoid());
assertFalse(node4.isAdd());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertEquals(17, node4.getCharno());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isDelProp());
assertFalse(node4.isCast());
assertFalse(node4.isReturn());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssign());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDebugger());
assertEquals(17, node4.getLineno());
assertFalse(node4.isWhile());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isString());
assertFalse(node4.isObjectLit());
assertFalse(node4.isComma());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertEquals(17, node4.getType());
assertFalse(node4.isThis());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isWith());
assertFalse(node4.isExprResult());
assertFalse(node4.isInc());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertFalse(node4.isLabelName());
assertFalse(node4.isFor());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isIf());
assertFalse(node4.isArrayLit());
assertEquals(69649, node4.getSourcePosition());
assertFalse(node4.isLabel());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isSwitch());
assertFalse(node4.isScript());
assertFalse(node4.isRegExp());
assertFalse(node4.isBlock());
assertFalse(node4.isTry());
assertFalse(node4.isCase());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertSame(node4, node0);
assertNotSame(node4, node2);
assertNotSame(node4, node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertNotNull(node4);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node4.getJsDocBuilderForNode();
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertEquals(17, node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(29, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isVar());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isTrue());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVoid());
assertFalse(node4.isAdd());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertEquals(17, node4.getCharno());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isDelProp());
assertFalse(node4.isCast());
assertFalse(node4.isReturn());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssign());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDebugger());
assertEquals(17, node4.getLineno());
assertFalse(node4.isWhile());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isString());
assertFalse(node4.isObjectLit());
assertFalse(node4.isComma());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertEquals(17, node4.getType());
assertFalse(node4.isThis());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isWith());
assertFalse(node4.isExprResult());
assertFalse(node4.isInc());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertFalse(node4.isLabelName());
assertFalse(node4.isFor());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isIf());
assertFalse(node4.isArrayLit());
assertEquals(69649, node4.getSourcePosition());
assertFalse(node4.isLabel());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isSwitch());
assertFalse(node4.isScript());
assertFalse(node4.isRegExp());
assertFalse(node4.isBlock());
assertFalse(node4.isTry());
assertFalse(node4.isCase());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertSame(node4, node0);
assertNotSame(node4, node2);
assertNotSame(node4, node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

Iterable<Node> iterable0 = node4.children();
assertFalse(iterable0.contains(node4));
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertEquals(17, node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(29, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isVar());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isTrue());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVoid());
assertFalse(node4.isAdd());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertEquals(17, node4.getCharno());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isDelProp());
assertFalse(node4.isCast());
assertFalse(node4.isReturn());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssign());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDebugger());
assertEquals(17, node4.getLineno());
assertFalse(node4.isWhile());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isString());
assertFalse(node4.isObjectLit());
assertFalse(node4.isComma());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertEquals(17, node4.getType());
assertFalse(node4.isThis());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isWith());
assertFalse(node4.isExprResult());
assertFalse(node4.isInc());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertFalse(node4.isLabelName());
assertFalse(node4.isFor());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isIf());
assertFalse(node4.isArrayLit());
assertEquals(69649, node4.getSourcePosition());
assertFalse(node4.isLabel());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isSwitch());
assertFalse(node4.isScript());
assertFalse(node4.isRegExp());
assertFalse(node4.isBlock());
assertFalse(node4.isTry());
assertFalse(node4.isCase());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertSame(node4, node0);
assertNotSame(node4, node2);
assertNotSame(node4, node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertNotNull(iterable0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

Node node5 = node4.cloneTree();
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertEquals(17, node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(29, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isVar());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isTrue());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVoid());
assertFalse(node4.isAdd());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertEquals(17, node4.getCharno());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isDelProp());
assertFalse(node4.isCast());
assertFalse(node4.isReturn());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssign());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDebugger());
assertEquals(17, node4.getLineno());
assertFalse(node4.isWhile());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isString());
assertFalse(node4.isObjectLit());
assertFalse(node4.isComma());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertEquals(17, node4.getType());
assertFalse(node4.isThis());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isWith());
assertFalse(node4.isExprResult());
assertFalse(node4.isInc());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertFalse(node4.isLabelName());
assertFalse(node4.isFor());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isIf());
assertFalse(node4.isArrayLit());
assertEquals(69649, node4.getSourcePosition());
assertFalse(node4.isLabel());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isSwitch());
assertFalse(node4.isScript());
assertFalse(node4.isRegExp());
assertFalse(node4.isBlock());
assertFalse(node4.isTry());
assertFalse(node4.isCase());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isContinue());
assertFalse(node5.isDo());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isNumber());
assertFalse(node5.isOr());
assertFalse(node5.isCall());
assertFalse(node5.isGetElem());
assertFalse(node5.isName());
assertFalse(node5.hasOneChild());
assertFalse(node5.isExprResult());
assertFalse(node5.isTypeOf());
assertFalse(node5.isWhile());
assertEquals(69649, node5.getSourcePosition());
assertFalse(node5.isWith());
assertFalse(node5.isAssign());
assertFalse(node5.isBlock());
assertFalse(node5.isReturn());
assertFalse(node5.isDec());
assertFalse(node5.hasChildren());
assertFalse(node5.isCatch());
assertFalse(node5.isObjectLit());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isAnd());
assertFalse(node5.isGetProp());
assertFalse(node5.isSetterDef());
assertFalse(node5.isNot());
assertFalse(node5.isDebugger());
assertFalse(node5.isCast());
assertFalse(node5.isFalse());
assertFalse(node5.isThrow());
assertEquals(17, node5.getCharno());
assertFalse(node5.isFunction());
assertFalse(node5.isIn());
assertFalse(node5.isCase());
assertFalse(node5.isSwitch());
assertFalse(node5.isNE());
assertFalse(node5.isInc());
assertFalse(node5.isIf());
assertFalse(node5.isString());
assertFalse(node5.isGetterDef());
assertFalse(node5.isTry());
assertEquals(17, node5.getLineno());
assertFalse(node5.isDelProp());
assertFalse(node5.isBreak());
assertFalse(node5.isVoid());
assertFalse(node5.isThis());
assertFalse(node5.isRegExp());
assertFalse(node5.isFor());
assertFalse(node5.isHook());
assertFalse(node5.isComma());
assertFalse(node5.isScript());
assertFalse(node5.isNull());
assertFalse(node5.isTrue());
assertEquals(17, node5.getType());
assertFalse(node5.isParamList());
assertFalse(node5.isVar());
assertFalse(node5.isStringKey());
assertFalse(node5.isLabelName());
assertFalse(node5.isEmpty());
assertFalse(node5.isAdd());
assertFalse(node5.isArrayLit());
assertFalse(node5.isNew());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isLabel());
assertEquals(0, node5.getChildCount());
assertSame(node4, node0);
assertNotSame(node4, node5);
assertNotSame(node4, node2);
assertNotSame(node4, node3);
assertNotSame(node5, node3);
assertNotSame(node5, node4);
assertNotSame(node5, node0);
assertNotSame(node5, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node2));
assertNotNull(node5);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Object object0 = new Object();
assertNotNull(object0);

node4.putProp(21, object0);
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertEquals(17, node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.hasOneChild());
assertEquals(118801, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertFalse(node1.isDebugger());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(29, node1.getLineno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNull());
assertFalse(node4.isStringKey());
assertFalse(node4.isName());
assertFalse(node4.isVar());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isTrue());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVoid());
assertFalse(node4.isAdd());
assertFalse(node4.isOr());
assertFalse(node4.isEmpty());
assertEquals(17, node4.getCharno());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isDelProp());
assertFalse(node4.isCast());
assertFalse(node4.isReturn());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssign());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDebugger());
assertEquals(17, node4.getLineno());
assertFalse(node4.isWhile());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isString());
assertFalse(node4.isObjectLit());
assertFalse(node4.isComma());
assertFalse(node4.isBreak());
assertFalse(node4.isGetProp());
assertEquals(17, node4.getType());
assertFalse(node4.isThis());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isWith());
assertFalse(node4.isExprResult());
assertFalse(node4.isInc());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertFalse(node4.isLabelName());
assertFalse(node4.isFor());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isIf());
assertFalse(node4.isArrayLit());
assertEquals(69649, node4.getSourcePosition());
assertFalse(node4.isLabel());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isSwitch());
assertFalse(node4.isScript());
assertFalse(node4.isRegExp());
assertFalse(node4.isBlock());
assertFalse(node4.isTry());
assertFalse(node4.isCase());
assertFalse(node4.hasOneChild());
assertFalse(node4.isGetterDef());
assertFalse(node4.isNumber());
assertSame(node4, node0);
assertNotSame(node4, node5);
assertNotSame(node4, node2);
assertNotSame(node4, node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node4.equals((Object)node5));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(51);
assertEquals(51, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(23, node_SideEffectFlags2.valueOf());
assertEquals(23, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
assertEquals(23, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(23, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(23, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.setMutatesGlobalState();
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertNotNull(node_SideEffectFlags5);

node3.setSideEffectFlags(node_SideEffectFlags1);

[MASTER] 10:58:00.282 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_180_1628161080093/com/google/javascript/rhino/Node_180_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_180_1628161080093/com/google/javascript/rhino/Node_180_tmp__ESTest_scaffolding.java]]
[MASTER] 10:58:00.282 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:00.282 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:00.282 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 134
[MASTER] 10:58:00.283 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_180_1628161080093/com/google/javascript/rhino/Node_180_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:58:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.StaticSourceFile;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.testdata.EvoSuiteFile;
17: import org.evosuite.runtime.testdata.FileSystemHandling;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_180_tmp__ESTest extends Node_180_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
26:       assertFalse(boolean0);
27:       
28:       Node node0 = Node.newNumber(356.28301613769554);
29:       assertFalse(node0.isStringKey());
30:       assertFalse(node0.isName());
31:       assertFalse(node0.isSetterDef());
32:       assertFalse(node0.isCall());
33:       assertFalse(node0.isAdd());
34:       assertFalse(node0.isParamList());
35:       assertFalse(node0.isNull());
36:       assertFalse(node0.hasMoreThanOneChild());
37:       assertEquals((-1), node0.getLineno());
38:       assertFalse(node0.isCatch());
39:       assertFalse(node0.isTry());
40:       assertFalse(node0.isRegExp());
41:       assertFalse(node0.isTypeOf());
42:       assertFalse(node0.isDec());
43:       assertFalse(node0.hasChildren());
44:       assertFalse(node0.isWhile());
45:       assertEquals(39, node0.getType());
46:       assertFalse(node0.isBlock());
47:       assertFalse(node0.isReturn());
48:       assertFalse(node0.isCast());
49:       assertFalse(node0.isDebugger());
50:       assertFalse(node0.isIf());
51:       assertEquals((-1), node0.getSourcePosition());
52:       assertFalse(node0.isNE());
53:       assertFalse(node0.isAnd());
54:       assertFalse(node0.isContinue());
55:       assertFalse(node0.isIn());
56:       assertFalse(node0.isInc());
57:       assertFalse(node0.isFunction());
58:       assertFalse(node0.isFalse());
59:       assertFalse(node0.isThrow());
60:       assertFalse(node0.isBreak());
61:       assertEquals((-1), node0.getCharno());
62:       assertFalse(node0.isSwitch());
63:       assertFalse(node0.isCase());
64:       assertFalse(node0.isWith());
65:       assertFalse(node0.isNot());
66:       assertFalse(node0.isObjectLit());
67:       assertFalse(node0.isInstanceOf());
68:       assertFalse(node0.isString());
69:       assertFalse(node0.isExprResult());
70:       assertFalse(node0.isScript());
71:       assertFalse(node0.isGetProp());
72:       assertFalse(node0.isComma());
73:       assertTrue(node0.isNumber());
74:       assertFalse(node0.isHook());
75:       assertFalse(node0.isThis());
76:       assertFalse(node0.isFor());
77:       assertFalse(node0.isLabelName());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.isGetterDef());
80:       assertFalse(node0.isDelProp());
81:       assertFalse(node0.hasOneChild());
82:       assertFalse(node0.isArrayLit());
83:       assertFalse(node0.isEmpty());
84:       assertFalse(node0.isGetElem());
85:       assertFalse(node0.isVoid());
86:       assertFalse(node0.isOr());
87:       assertFalse(node0.isTrue());
88:       assertFalse(node0.isDo());
89:       assertFalse(node0.isLabel());
90:       assertFalse(node0.isNew());
91:       assertFalse(node0.isAssignAdd());
92:       assertEquals(0, node0.getChildCount());
93:       assertFalse(node0.isDefaultCase());
94:       assertFalse(node0.isVar());
95:       assertNotNull(node0);
96:       assertEquals(56, Node.CHANGE_TIME);
97:       assertEquals(47, Node.IS_DISPATCHER);
98:       assertEquals(2, Node.POST_FLAG);
99:       assertEquals(37, Node.OPT_ARG_NAME);
100:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
101:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
102:       assertEquals(29, Node.JSDOC_INFO_PROP);
103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
104:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
105:       assertEquals(46, Node.IS_NAMESPACE);
106:       assertEquals(15, Node.NO_SIDE_EFFECTS);
107:       assertEquals(57, Node.LAST_PROP);
108:       assertEquals(43, Node.IS_CONSTANT_NAME);
109:       assertEquals(36, Node.QUOTED_PROP);
110:       assertEquals(30, Node.VAR_ARGS_NAME);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
113:       assertEquals(53, Node.INPUT_ID);
114:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
116:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
117:       assertEquals(8, Node.FLAG_NO_THROWS);
118:       assertEquals(50, Node.FREE_CALL);
119:       assertEquals(48, Node.DIRECTIVES);
120:       assertEquals(39, Node.EMPTY_BLOCK);
121:       assertEquals(40, Node.ORIGINALNAME_PROP);
122:       assertEquals(52, Node.LENGTH);
123:       assertEquals(54, Node.SLASH_V);
124:       assertEquals(57, Node.REFLECTED_OBJECT);
125:       assertEquals(49, Node.DIRECT_EVAL);
126:       assertEquals(1, Node.DECR_FLAG);
127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
128:       assertEquals(4095, Node.COLUMN_MASK);
129:       assertEquals(32, Node.INCRDECR_PROP);
130:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
131:       assertEquals(12, Node.COLUMN_BITS);
132:       
133:       Iterable<Node> iterable0 = node0.children();
134:       assertFalse(iterable0.contains(node0));
135:       assertFalse(node0.isStringKey());
136:       assertFalse(node0.isName());
137:       assertFalse(node0.isSetterDef());
138:       assertFalse(node0.isCall());
139:       assertFalse(node0.isAdd());
140:       assertFalse(node0.isParamList());
141:       assertFalse(node0.isNull());
142:       assertFalse(node0.hasMoreThanOneChild());
143:       assertEquals((-1), node0.getLineno());
144:       assertFalse(node0.isCatch());
145:       assertFalse(node0.isTry());
146:       assertFalse(node0.isRegExp());
147:       assertFalse(node0.isTypeOf());
148:       assertFalse(node0.isDec());
149:       assertFalse(node0.hasChildren());
150:       assertFalse(node0.isWhile());
151:       assertEquals(39, node0.getType());
152:       assertFalse(node0.isBlock());
153:       assertFalse(node0.isReturn());
154:       assertFalse(node0.isCast());
155:       assertFalse(node0.isDebugger());
156:       assertFalse(node0.isIf());
157:       assertEquals((-1), node0.getSourcePosition());
158:       assertFalse(node0.isNE());
159:       assertFalse(node0.isAnd());
160:       assertFalse(node0.isContinue());
161:       assertFalse(node0.isIn());
162:       assertFalse(node0.isInc());
163:       assertFalse(node0.isFunction());
164:       assertFalse(node0.isFalse());
165:       assertFalse(node0.isThrow());
166:       assertFalse(node0.isBreak());
167:       assertEquals((-1), node0.getCharno());
168:       assertFalse(node0.isSwitch());
169:       assertFalse(node0.isCase());
170:       assertFalse(node0.isWith());
171:       assertFalse(node0.isNot());
172:       assertFalse(node0.isObjectLit());
173:       assertFalse(node0.isInstanceOf());
174:       assertFalse(node0.isString());
175:       assertFalse(node0.isExprResult());
176:       assertFalse(node0.isScript());
177:       assertFalse(node0.isGetProp());
178:       assertFalse(node0.isComma());
179:       assertTrue(node0.isNumber());
180:       assertFalse(node0.isHook());
181:       assertFalse(node0.isThis());
182:       assertFalse(node0.isFor());
183:       assertFalse(node0.isLabelName());
184:       assertFalse(node0.isAssign());
185:       assertFalse(node0.isGetterDef());
186:       assertFalse(node0.isDelProp());
187:       assertFalse(node0.hasOneChild());
188:       assertFalse(node0.isArrayLit());
189:       assertFalse(node0.isEmpty());
190:       assertFalse(node0.isGetElem());
191:       assertFalse(node0.isVoid());
192:       assertFalse(node0.isOr());
193:       assertFalse(node0.isTrue());
194:       assertFalse(node0.isDo());
195:       assertFalse(node0.isLabel());
196:       assertFalse(node0.isNew());
197:       assertFalse(node0.isAssignAdd());
198:       assertEquals(0, node0.getChildCount());
199:       assertFalse(node0.isDefaultCase());
200:       assertFalse(node0.isVar());
201:       assertNotNull(iterable0);
202:       assertEquals(56, Node.CHANGE_TIME);
203:       assertEquals(47, Node.IS_DISPATCHER);
204:       assertEquals(2, Node.POST_FLAG);
205:       assertEquals(37, Node.OPT_ARG_NAME);
206:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
207:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
208:       assertEquals(29, Node.JSDOC_INFO_PROP);
209:       assertEquals(51, Node.STATIC_SOURCE_FILE);
210:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
211:       assertEquals(46, Node.IS_NAMESPACE);
212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
213:       assertEquals(57, Node.LAST_PROP);
214:       assertEquals(43, Node.IS_CONSTANT_NAME);
215:       assertEquals(36, Node.QUOTED_PROP);
216:       assertEquals(30, Node.VAR_ARGS_NAME);
217:       assertEquals(55, Node.INFERRED_FUNCTION);
218:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
219:       assertEquals(53, Node.INPUT_ID);
220:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
221:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
222:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
223:       assertEquals(8, Node.FLAG_NO_THROWS);
224:       assertEquals(50, Node.FREE_CALL);
225:       assertEquals(48, Node.DIRECTIVES);
226:       assertEquals(39, Node.EMPTY_BLOCK);
227:       assertEquals(40, Node.ORIGINALNAME_PROP);
228:       assertEquals(52, Node.LENGTH);
229:       assertEquals(54, Node.SLASH_V);
230:       assertEquals(57, Node.REFLECTED_OBJECT);
231:       assertEquals(49, Node.DIRECT_EVAL);
232:       assertEquals(1, Node.DECR_FLAG);
233:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
234:       assertEquals(4095, Node.COLUMN_MASK);
235:       assertEquals(32, Node.INCRDECR_PROP);
236:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
237:       assertEquals(12, Node.COLUMN_BITS);
238:       
239:       boolean boolean1 = node0.isFor();
240:       assertFalse(node0.isStringKey());
241:       assertFalse(node0.isName());
242:       assertFalse(node0.isSetterDef());
243:       assertFalse(node0.isCall());
244:       assertFalse(node0.isAdd());
245:       assertFalse(node0.isParamList());
246:       assertFalse(node0.isNull());
247:       assertFalse(node0.hasMoreThanOneChild());
248:       assertEquals((-1), node0.getLineno());
249:       assertFalse(node0.isCatch());
250:       assertFalse(node0.isTry());
251:       assertFalse(node0.isRegExp());
252:       assertFalse(node0.isTypeOf());
253:       assertFalse(node0.isDec());
254:       assertFalse(node0.hasChildren());
255:       assertFalse(node0.isWhile());
256:       assertEquals(39, node0.getType());
257:       assertFalse(node0.isBlock());
258:       assertFalse(node0.isReturn());
259:       assertFalse(node0.isCast());
260:       assertFalse(node0.isDebugger());
261:       assertFalse(node0.isIf());
262:       assertEquals((-1), node0.getSourcePosition());
263:       assertFalse(node0.isNE());
264:       assertFalse(node0.isAnd());
265:       assertFalse(node0.isContinue());
266:       assertFalse(node0.isIn());
267:       assertFalse(node0.isInc());
268:       assertFalse(node0.isFunction());
269:       assertFalse(node0.isFalse());
270:       assertFalse(node0.isThrow());
271:       assertFalse(node0.isBreak());
272:       assertEquals((-1), node0.getCharno());
273:       assertFalse(node0.isSwitch());
274:       assertFalse(node0.isCase());
275:       assertFalse(node0.isWith());
276:       assertFalse(node0.isNot());
277:       assertFalse(node0.isObjectLit());
278:       assertFalse(node0.isInstanceOf());
279:       assertFalse(node0.isString());
280:       assertFalse(node0.isExprResult());
281:       assertFalse(node0.isScript());
282:       assertFalse(node0.isGetProp());
283:       assertFalse(node0.isComma());
284:       assertTrue(node0.isNumber());
285:       assertFalse(node0.isHook());
286:       assertFalse(node0.isThis());
287:       assertFalse(node0.isFor());
288:       assertFalse(node0.isLabelName());
289:       assertFalse(node0.isAssign());
290:       assertFalse(node0.isGetterDef());
291:       assertFalse(node0.isDelProp());
292:       assertFalse(node0.hasOneChild());
293:       assertFalse(node0.isArrayLit());
294:       assertFalse(node0.isEmpty());
295:       assertFalse(node0.isGetElem());
296:       assertFalse(node0.isVoid());
297:       assertFalse(node0.isOr());
298:       assertFalse(node0.isTrue());
299:       assertFalse(node0.isDo());
300:       assertFalse(node0.isLabel());
301:       assertFalse(node0.isNew());
302:       assertFalse(node0.isAssignAdd());
303:       assertEquals(0, node0.getChildCount());
304:       assertFalse(node0.isDefaultCase());
305:       assertFalse(node0.isVar());
306:       assertFalse(boolean1);
307:       assertTrue(boolean1 == boolean0);
308:       assertEquals(56, Node.CHANGE_TIME);
309:       assertEquals(47, Node.IS_DISPATCHER);
310:       assertEquals(2, Node.POST_FLAG);
311:       assertEquals(37, Node.OPT_ARG_NAME);
312:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
313:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
314:       assertEquals(29, Node.JSDOC_INFO_PROP);
315:       assertEquals(51, Node.STATIC_SOURCE_FILE);
316:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
317:       assertEquals(46, Node.IS_NAMESPACE);
318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
319:       assertEquals(57, Node.LAST_PROP);
320:       assertEquals(43, Node.IS_CONSTANT_NAME);
321:       assertEquals(36, Node.QUOTED_PROP);
322:       assertEquals(30, Node.VAR_ARGS_NAME);
323:       assertEquals(55, Node.INFERRED_FUNCTION);
324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
325:       assertEquals(53, Node.INPUT_ID);
326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
327:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
328:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(50, Node.FREE_CALL);
331:       assertEquals(48, Node.DIRECTIVES);
332:       assertEquals(39, Node.EMPTY_BLOCK);
333:       assertEquals(40, Node.ORIGINALNAME_PROP);
334:       assertEquals(52, Node.LENGTH);
335:       assertEquals(54, Node.SLASH_V);
336:       assertEquals(57, Node.REFLECTED_OBJECT);
337:       assertEquals(49, Node.DIRECT_EVAL);
338:       assertEquals(1, Node.DECR_FLAG);
339:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
340:       assertEquals(4095, Node.COLUMN_MASK);
341:       assertEquals(32, Node.INCRDECR_PROP);
342:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
343:       assertEquals(12, Node.COLUMN_BITS);
344:       
345:       boolean boolean2 = node0.mayMutateArguments();
346:       assertFalse(node0.isStringKey());
347:       assertFalse(node0.isName());
348:       assertFalse(node0.isSetterDef());
349:       assertFalse(node0.isCall());
350:       assertFalse(node0.isAdd());
351:       assertFalse(node0.isParamList());
352:       assertFalse(node0.isNull());
353:       assertFalse(node0.hasMoreThanOneChild());
354:       assertEquals((-1), node0.getLineno());
355:       assertFalse(node0.isCatch());
356:       assertFalse(node0.isTry());
357:       assertFalse(node0.isRegExp());
358:       assertFalse(node0.isTypeOf());
359:       assertFalse(node0.isDec());
360:       assertFalse(node0.hasChildren());
361:       assertFalse(node0.isWhile());
362:       assertEquals(39, node0.getType());
363:       assertFalse(node0.isBlock());
364:       assertFalse(node0.isReturn());
365:       assertFalse(node0.isCast());
366:       assertFalse(node0.isDebugger());
367:       assertFalse(node0.isIf());
368:       assertEquals((-1), node0.getSourcePosition());
369:       assertFalse(node0.isNE());
370:       assertFalse(node0.isAnd());
371:       assertFalse(node0.isContinue());
372:       assertFalse(node0.isIn());
373:       assertFalse(node0.isInc());
374:       assertFalse(node0.isFunction());
375:       assertFalse(node0.isFalse());
376:       assertFalse(node0.isThrow());
377:       assertFalse(node0.isBreak());
378:       assertEquals((-1), node0.getCharno());
379:       assertFalse(node0.isSwitch());
380:       assertFalse(node0.isCase());
381:       assertFalse(node0.isWith());
382:       assertFalse(node0.isNot());
383:       assertFalse(node0.isObjectLit());
384:       assertFalse(node0.isInstanceOf());
385:       assertFalse(node0.isString());
386:       assertFalse(node0.isExprResult());
387:       assertFalse(node0.isScript());
388:       assertFalse(node0.isGetProp());
389:       assertFalse(node0.isComma());
390:       assertTrue(node0.isNumber());
391:       assertFalse(node0.isHook());
392:       assertFalse(node0.isThis());
393:       assertFalse(node0.isFor());
394:       assertFalse(node0.isLabelName());
395:       assertFalse(node0.isAssign());
396:       assertFalse(node0.isGetterDef());
397:       assertFalse(node0.isDelProp());
398:       assertFalse(node0.hasOneChild());
399:       assertFalse(node0.isArrayLit());
400:       assertFalse(node0.isEmpty());
401:       assertFalse(node0.isGetElem());
402:       assertFalse(node0.isVoid());
403:       assertFalse(node0.isOr());
404:       assertFalse(node0.isTrue());
405:       assertFalse(node0.isDo());
406:       assertFalse(node0.isLabel());
407:       assertFalse(node0.isNew());
408:       assertFalse(node0.isAssignAdd());
409:       assertEquals(0, node0.getChildCount());
410:       assertFalse(node0.isDefaultCase());
411:       assertFalse(node0.isVar());
412:       assertTrue(boolean2);
413:       assertFalse(boolean2 == boolean0);
414:       assertFalse(boolean2 == boolean1);
415:       assertEquals(56, Node.CHANGE_TIME);
416:       assertEquals(47, Node.IS_DISPATCHER);
417:       assertEquals(2, Node.POST_FLAG);
418:       assertEquals(37, Node.OPT_ARG_NAME);
419:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
420:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
421:       assertEquals(29, Node.JSDOC_INFO_PROP);
422:       assertEquals(51, Node.STATIC_SOURCE_FILE);
423:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
424:       assertEquals(46, Node.IS_NAMESPACE);
425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
426:       assertEquals(57, Node.LAST_PROP);
427:       assertEquals(43, Node.IS_CONSTANT_NAME);
428:       assertEquals(36, Node.QUOTED_PROP);
429:       assertEquals(30, Node.VAR_ARGS_NAME);
430:       assertEquals(55, Node.INFERRED_FUNCTION);
431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
432:       assertEquals(53, Node.INPUT_ID);
433:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
434:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
435:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
436:       assertEquals(8, Node.FLAG_NO_THROWS);
437:       assertEquals(50, Node.FREE_CALL);
438:       assertEquals(48, Node.DIRECTIVES);
439:       assertEquals(39, Node.EMPTY_BLOCK);
440:       assertEquals(40, Node.ORIGINALNAME_PROP);
441:       assertEquals(52, Node.LENGTH);
442:       assertEquals(54, Node.SLASH_V);
443:       assertEquals(57, Node.REFLECTED_OBJECT);
444:       assertEquals(49, Node.DIRECT_EVAL);
445:       assertEquals(1, Node.DECR_FLAG);
446:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
447:       assertEquals(4095, Node.COLUMN_MASK);
448:       assertEquals(32, Node.INCRDECR_PROP);
449:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
450:       assertEquals(12, Node.COLUMN_BITS);
451:       
452:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
453:       assertFalse(node0.isStringKey());
454:       assertFalse(node0.isName());
455:       assertFalse(node0.isSetterDef());
456:       assertFalse(node0.isCall());
457:       assertFalse(node0.isAdd());
458:       assertFalse(node0.isParamList());
459:       assertFalse(node0.isNull());
460:       assertFalse(node0.hasMoreThanOneChild());
461:       assertEquals((-1), node0.getLineno());
462:       assertFalse(node0.isCatch());
463:       assertFalse(node0.isTry());
464:       assertFalse(node0.isRegExp());
465:       assertFalse(node0.isTypeOf());
466:       assertFalse(node0.isDec());
467:       assertFalse(node0.hasChildren());
468:       assertFalse(node0.isWhile());
469:       assertEquals(39, node0.getType());
470:       assertFalse(node0.isBlock());
471:       assertFalse(node0.isReturn());
472:       assertFalse(node0.isCast());
473:       assertFalse(node0.isDebugger());
474:       assertFalse(node0.isIf());
475:       assertEquals((-1), node0.getSourcePosition());
476:       assertFalse(node0.isNE());
477:       assertFalse(node0.isAnd());
478:       assertFalse(node0.isContinue());
479:       assertFalse(node0.isIn());
480:       assertFalse(node0.isInc());
481:       assertFalse(node0.isFunction());
482:       assertFalse(node0.isFalse());
483:       assertFalse(node0.isThrow());
484:       assertFalse(node0.isBreak());
485:       assertEquals((-1), node0.getCharno());
486:       assertFalse(node0.isSwitch());
487:       assertFalse(node0.isCase());
488:       assertFalse(node0.isWith());
489:       assertFalse(node0.isNot());
490:       assertFalse(node0.isObjectLit());
491:       assertFalse(node0.isInstanceOf());
492:       assertFalse(node0.isString());
493:       assertFalse(node0.isExprResult());
494:       assertFalse(node0.isScript());
495:       assertFalse(node0.isGetProp());
496:       assertFalse(node0.isComma());
497:       assertTrue(node0.isNumber());
498:       assertFalse(node0.isHook());
499:       assertFalse(node0.isThis());
500:       assertFalse(node0.isFor());
501:       assertFalse(node0.isLabelName());
502:       assertFalse(node0.isAssign());
503:       assertFalse(node0.isGetterDef());
504:       assertFalse(node0.isDelProp());
505:       assertFalse(node0.hasOneChild());
506:       assertFalse(node0.isArrayLit());
507:       assertFalse(node0.isEmpty());
508:       assertFalse(node0.isGetElem());
509:       assertFalse(node0.isVoid());
510:       assertFalse(node0.isOr());
511:       assertFalse(node0.isTrue());
512:       assertFalse(node0.isDo());
513:       assertFalse(node0.isLabel());
514:       assertFalse(node0.isNew());
515:       assertFalse(node0.isAssignAdd());
516:       assertEquals(0, node0.getChildCount());
517:       assertFalse(node0.isDefaultCase());
518:       assertFalse(node0.isVar());
519:       assertNull(staticSourceFile0);
520:       assertEquals(56, Node.CHANGE_TIME);
521:       assertEquals(47, Node.IS_DISPATCHER);
522:       assertEquals(2, Node.POST_FLAG);
523:       assertEquals(37, Node.OPT_ARG_NAME);
524:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
525:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
526:       assertEquals(29, Node.JSDOC_INFO_PROP);
527:       assertEquals(51, Node.STATIC_SOURCE_FILE);
528:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
529:       assertEquals(46, Node.IS_NAMESPACE);
530:       assertEquals(15, Node.NO_SIDE_EFFECTS);
531:       assertEquals(57, Node.LAST_PROP);
532:       assertEquals(43, Node.IS_CONSTANT_NAME);
533:       assertEquals(36, Node.QUOTED_PROP);
534:       assertEquals(30, Node.VAR_ARGS_NAME);
535:       assertEquals(55, Node.INFERRED_FUNCTION);
536:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
537:       assertEquals(53, Node.INPUT_ID);
538:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
539:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
540:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
541:       assertEquals(8, Node.FLAG_NO_THROWS);
542:       assertEquals(50, Node.FREE_CALL);
543:       assertEquals(48, Node.DIRECTIVES);
544:       assertEquals(39, Node.EMPTY_BLOCK);
545:       assertEquals(40, Node.ORIGINALNAME_PROP);
546:       assertEquals(52, Node.LENGTH);
547:       assertEquals(54, Node.SLASH_V);
548:       assertEquals(57, Node.REFLECTED_OBJECT);
549:       assertEquals(49, Node.DIRECT_EVAL);
550:       assertEquals(1, Node.DECR_FLAG);
551:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
552:       assertEquals(4095, Node.COLUMN_MASK);
553:       assertEquals(32, Node.INCRDECR_PROP);
554:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
555:       assertEquals(12, Node.COLUMN_BITS);
556:       
557:       node0.setStaticSourceFile((StaticSourceFile) null);
558:       assertFalse(node0.isStringKey());
559:       assertFalse(node0.isName());
560:       assertFalse(node0.isSetterDef());
561:       assertFalse(node0.isCall());
562:       assertFalse(node0.isAdd());
563:       assertFalse(node0.isParamList());
564:       assertFalse(node0.isNull());
565:       assertFalse(node0.hasMoreThanOneChild());
566:       assertEquals((-1), node0.getLineno());
567:       assertFalse(node0.isCatch());
568:       assertFalse(node0.isTry());
569:       assertFalse(node0.isRegExp());
570:       assertFalse(node0.isTypeOf());
571:       assertFalse(node0.isDec());
572:       assertFalse(node0.hasChildren());
573:       assertFalse(node0.isWhile());
574:       assertEquals(39, node0.getType());
575:       assertFalse(node0.isBlock());
576:       assertFalse(node0.isReturn());
577:       assertFalse(node0.isCast());
578:       assertFalse(node0.isDebugger());
579:       assertFalse(node0.isIf());
580:       assertEquals((-1), node0.getSourcePosition());
581:       assertFalse(node0.isNE());
582:       assertFalse(node0.isAnd());
583:       assertFalse(node0.isContinue());
584:       assertFalse(node0.isIn());
585:       assertFalse(node0.isInc());
586:       assertFalse(node0.isFunction());
587:       assertFalse(node0.isFalse());
588:       assertFalse(node0.isThrow());
589:       assertFalse(node0.isBreak());
590:       assertEquals((-1), node0.getCharno());
591:       assertFalse(node0.isSwitch());
592:       assertFalse(node0.isCase());
593:       assertFalse(node0.isWith());
594:       assertFalse(node0.isNot());
595:       assertFalse(node0.isObjectLit());
596:       assertFalse(node0.isInstanceOf());
597:       assertFalse(node0.isString());
598:       assertFalse(node0.isExprResult());
599:       assertFalse(node0.isScript());
600:       assertFalse(node0.isGetProp());
601:       assertFalse(node0.isComma());
602:       assertTrue(node0.isNumber());
603:       assertFalse(node0.isHook());
604:       assertFalse(node0.isThis());
605:       assertFalse(node0.isFor());
606:       assertFalse(node0.isLabelName());
607:       assertFalse(node0.isAssign());
608:       assertFalse(node0.isGetterDef());
609:       assertFalse(node0.isDelProp());
610:       assertFalse(node0.hasOneChild());
611:       assertFalse(node0.isArrayLit());
612:       assertFalse(node0.isEmpty());
613:       assertFalse(node0.isGetElem());
614:       assertFalse(node0.isVoid());
615:       assertFalse(node0.isOr());
616:       assertFalse(node0.isTrue());
617:       assertFalse(node0.isDo());
618:       assertFalse(node0.isLabel());
619:       assertFalse(node0.isNew());
620:       assertFalse(node0.isAssignAdd());
621:       assertEquals(0, node0.getChildCount());
622:       assertFalse(node0.isDefaultCase());
623:       assertFalse(node0.isVar());
624:       assertEquals(56, Node.CHANGE_TIME);
625:       assertEquals(47, Node.IS_DISPATCHER);
626:       assertEquals(2, Node.POST_FLAG);
627:       assertEquals(37, Node.OPT_ARG_NAME);
628:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
629:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
630:       assertEquals(29, Node.JSDOC_INFO_PROP);
631:       assertEquals(51, Node.STATIC_SOURCE_FILE);
632:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
633:       assertEquals(46, Node.IS_NAMESPACE);
634:       assertEquals(15, Node.NO_SIDE_EFFECTS);
635:       assertEquals(57, Node.LAST_PROP);
636:       assertEquals(43, Node.IS_CONSTANT_NAME);
637:       assertEquals(36, Node.QUOTED_PROP);
638:       assertEquals(30, Node.VAR_ARGS_NAME);
639:       assertEquals(55, Node.INFERRED_FUNCTION);
640:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
641:       assertEquals(53, Node.INPUT_ID);
642:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
643:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
644:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
645:       assertEquals(8, Node.FLAG_NO_THROWS);
646:       assertEquals(50, Node.FREE_CALL);
647:       assertEquals(48, Node.DIRECTIVES);
648:       assertEquals(39, Node.EMPTY_BLOCK);
649:       assertEquals(40, Node.ORIGINALNAME_PROP);
650:       assertEquals(52, Node.LENGTH);
651:       assertEquals(54, Node.SLASH_V);
652:       assertEquals(57, Node.REFLECTED_OBJECT);
653:       assertEquals(49, Node.DIRECT_EVAL);
654:       assertEquals(1, Node.DECR_FLAG);
655:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
656:       assertEquals(4095, Node.COLUMN_MASK);
657:       assertEquals(32, Node.INCRDECR_PROP);
658:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
659:       assertEquals(12, Node.COLUMN_BITS);
660:       
661:       Node node1 = new Node(972, node0, (-1078), (-2139));
662:       assertFalse(node0.isStringKey());
663:       assertFalse(node0.isName());
664:       assertFalse(node0.isSetterDef());
665:       assertFalse(node0.isCall());
666:       assertFalse(node0.isAdd());
667:       assertFalse(node0.isParamList());
668:       assertFalse(node0.isNull());
669:       assertFalse(node0.hasMoreThanOneChild());
670:       assertEquals((-1), node0.getLineno());
671:       assertFalse(node0.isCatch());
672:       assertFalse(node0.isTry());
673:       assertFalse(node0.isRegExp());
674:       assertFalse(node0.isTypeOf());
675:       assertFalse(node0.isDec());
676:       assertFalse(node0.hasChildren());
677:       assertFalse(node0.isWhile());
678:       assertEquals(39, node0.getType());
679:       assertFalse(node0.isBlock());
680:       assertFalse(node0.isReturn());
681:       assertFalse(node0.isCast());
682:       assertFalse(node0.isDebugger());
683:       assertFalse(node0.isIf());
684:       assertEquals((-1), node0.getSourcePosition());
685:       assertFalse(node0.isNE());
686:       assertFalse(node0.isAnd());
687:       assertFalse(node0.isContinue());
688:       assertFalse(node0.isIn());
689:       assertFalse(node0.isInc());
690:       assertFalse(node0.isFunction());
691:       assertFalse(node0.isFalse());
692:       assertFalse(node0.isThrow());
693:       assertFalse(node0.isBreak());
694:       assertEquals((-1), node0.getCharno());
695:       assertFalse(node0.isSwitch());
696:       assertFalse(node0.isCase());
697:       assertFalse(node0.isWith());
698:       assertFalse(node0.isNot());
699:       assertFalse(node0.isObjectLit());
700:       assertFalse(node0.isInstanceOf());
701:       assertFalse(node0.isString());
702:       assertFalse(node0.isExprResult());
703:       assertFalse(node0.isScript());
704:       assertFalse(node0.isGetProp());
705:       assertFalse(node0.isComma());
706:       assertTrue(node0.isNumber());
707:       assertFalse(node0.isHook());
708:       assertFalse(node0.isThis());
709:       assertFalse(node0.isFor());
710:       assertFalse(node0.isLabelName());
711:       assertFalse(node0.isAssign());
712:       assertFalse(node0.isGetterDef());
713:       assertFalse(node0.isDelProp());
714:       assertFalse(node0.hasOneChild());
715:       assertFalse(node0.isArrayLit());
716:       assertFalse(node0.isEmpty());
717:       assertFalse(node0.isGetElem());
718:       assertFalse(node0.isVoid());
719:       assertFalse(node0.isOr());
720:       assertFalse(node0.isTrue());
721:       assertFalse(node0.isDo());
722:       assertFalse(node0.isLabel());
723:       assertFalse(node0.isNew());
724:       assertFalse(node0.isAssignAdd());
725:       assertEquals(0, node0.getChildCount());
726:       assertFalse(node0.isDefaultCase());
727:       assertFalse(node0.isVar());
728:       assertTrue(node1.hasOneChild());
729:       assertFalse(node1.isFor());
730:       assertFalse(node1.isGetterDef());
731:       assertFalse(node1.isDebugger());
732:       assertFalse(node1.isFunction());
733:       assertFalse(node1.isTrue());
734:       assertFalse(node1.isNE());
735:       assertFalse(node1.isRegExp());
736:       assertFalse(node1.isVoid());
737:       assertFalse(node1.isIf());
738:       assertTrue(node1.hasChildren());
739:       assertFalse(node1.isDelProp());
740:       assertFalse(node1.isArrayLit());
741:       assertFalse(node1.isCatch());
742:       assertEquals(1, node1.getChildCount());
743:       assertFalse(node1.isString());
744:       assertFalse(node1.isTry());
745:       assertFalse(node1.isCase());
746:       assertFalse(node1.isThrow());
747:       assertFalse(node1.isFalse());
748:       assertFalse(node1.isHook());
749:       assertFalse(node1.isBlock());
750:       assertFalse(node1.isContinue());
751:       assertFalse(node1.isIn());
752:       assertFalse(node1.isInc());
753:       assertFalse(node1.isSetterDef());
754:       assertFalse(node1.isCast());
755:       assertFalse(node1.isAssign());
756:       assertEquals((-1), node1.getSourcePosition());
757:       assertFalse(node1.isDec());
758:       assertFalse(node1.isExprResult());
759:       assertFalse(node1.isTypeOf());
760:       assertEquals((-1), node1.getLineno());
761:       assertFalse(node1.isLabelName());
762:       assertFalse(node1.isGetElem());
763:       assertFalse(node1.hasMoreThanOneChild());
764:       assertFalse(node1.isObjectLit());
765:       assertFalse(node1.isInstanceOf());
766:       assertEquals(972, node1.getType());
767:       assertFalse(node1.isAnd());
768:       assertFalse(node1.isWith());
769:       assertFalse(node1.isReturn());
770:       assertFalse(node1.isWhile());
771:       assertFalse(node1.isNot());
772:       assertFalse(node1.isThis());
773:       assertFalse(node1.isScript());
774:       assertFalse(node1.isNumber());
775:       assertFalse(node1.isGetProp());
776:       assertFalse(node1.isCall());
777:       assertFalse(node1.isVar());
778:       assertFalse(node1.isStringKey());
779:       assertFalse(node1.isName());
780:       assertFalse(node1.isNull());
781:       assertEquals((-1), node1.getCharno());
782:       assertFalse(node1.isComma());
783:       assertFalse(node1.isParamList());
784:       assertFalse(node1.isSwitch());
785:       assertFalse(node1.isBreak());
786:       assertFalse(node1.isOr());
787:       assertFalse(node1.isLabel());
788:       assertFalse(node1.isDefaultCase());
789:       assertFalse(node1.isAssignAdd());
790:       assertFalse(node1.isDo());
791:       assertFalse(node1.isAdd());
792:       assertFalse(node1.isEmpty());
793:       assertFalse(node1.isNew());
794:       assertFalse(node1.equals((Object)node0));
795:       assertNotNull(node1);
796:       assertEquals(56, Node.CHANGE_TIME);
797:       assertEquals(47, Node.IS_DISPATCHER);
798:       assertEquals(2, Node.POST_FLAG);
799:       assertEquals(37, Node.OPT_ARG_NAME);
800:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
801:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
802:       assertEquals(29, Node.JSDOC_INFO_PROP);
803:       assertEquals(51, Node.STATIC_SOURCE_FILE);
804:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
805:       assertEquals(46, Node.IS_NAMESPACE);
806:       assertEquals(15, Node.NO_SIDE_EFFECTS);
807:       assertEquals(57, Node.LAST_PROP);
808:       assertEquals(43, Node.IS_CONSTANT_NAME);
809:       assertEquals(36, Node.QUOTED_PROP);
810:       assertEquals(30, Node.VAR_ARGS_NAME);
811:       assertEquals(55, Node.INFERRED_FUNCTION);
812:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
813:       assertEquals(53, Node.INPUT_ID);
814:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
815:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
816:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
817:       assertEquals(8, Node.FLAG_NO_THROWS);
818:       assertEquals(50, Node.FREE_CALL);
819:       assertEquals(48, Node.DIRECTIVES);
820:       assertEquals(39, Node.EMPTY_BLOCK);
821:       assertEquals(40, Node.ORIGINALNAME_PROP);
822:       assertEquals(52, Node.LENGTH);
823:       assertEquals(54, Node.SLASH_V);
824:       assertEquals(57, Node.REFLECTED_OBJECT);
825:       assertEquals(49, Node.DIRECT_EVAL);
826:       assertEquals(1, Node.DECR_FLAG);
827:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
828:       assertEquals(4095, Node.COLUMN_MASK);
829:       assertEquals(32, Node.INCRDECR_PROP);
830:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
831:       assertEquals(12, Node.COLUMN_BITS);
832:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
833:       assertEquals(50, Node.FREE_CALL);
834:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
835:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
836:       assertEquals(8, Node.FLAG_NO_THROWS);
837:       assertEquals(57, Node.REFLECTED_OBJECT);
838:       assertEquals(4095, Node.COLUMN_MASK);
839:       assertEquals(40, Node.ORIGINALNAME_PROP);
840:       assertEquals(48, Node.DIRECTIVES);
841:       assertEquals(30, Node.VAR_ARGS_NAME);
842:       assertEquals(49, Node.DIRECT_EVAL);
843:       assertEquals(57, Node.LAST_PROP);
844:       assertEquals(36, Node.QUOTED_PROP);
845:       assertEquals(52, Node.LENGTH);
846:       assertEquals(39, Node.EMPTY_BLOCK);
847:       assertEquals(55, Node.INFERRED_FUNCTION);
848:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
849:       assertEquals(15, Node.NO_SIDE_EFFECTS);
850:       assertEquals(53, Node.INPUT_ID);
851:       assertEquals(29, Node.JSDOC_INFO_PROP);
852:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
853:       assertEquals(56, Node.CHANGE_TIME);
854:       assertEquals(2, Node.POST_FLAG);
855:       assertEquals(47, Node.IS_DISPATCHER);
856:       assertEquals(46, Node.IS_NAMESPACE);
857:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
858:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
859:       assertEquals(37, Node.OPT_ARG_NAME);
860:       assertEquals(43, Node.IS_CONSTANT_NAME);
861:       assertEquals(12, Node.COLUMN_BITS);
862:       assertEquals(54, Node.SLASH_V);
863:       assertEquals(51, Node.STATIC_SOURCE_FILE);
864:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
865:       assertEquals(32, Node.INCRDECR_PROP);
866:       assertEquals(1, Node.DECR_FLAG);
867:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
868:       
869:       Node node2 = node0.srcrefTree(node1);
870:       assertFalse(node0.isStringKey());
871:       assertFalse(node0.isName());
872:       assertFalse(node0.isSetterDef());
873:       assertFalse(node0.isCall());
874:       assertFalse(node0.isAdd());
875:       assertFalse(node0.isParamList());
876:       assertFalse(node0.isNull());
877:       assertFalse(node0.hasMoreThanOneChild());
878:       assertEquals((-1), node0.getLineno());
879:       assertFalse(node0.isCatch());
880:       assertFalse(node0.isTry());
881:       assertFalse(node0.isRegExp());
882:       assertFalse(node0.isTypeOf());
883:       assertFalse(node0.isDec());
884:       assertFalse(node0.hasChildren());
885:       assertFalse(node0.isWhile());
886:       assertEquals(39, node0.getType());
887:       assertFalse(node0.isBlock());
888:       assertFalse(node0.isReturn());
889:       assertFalse(node0.isCast());
890:       assertFalse(node0.isDebugger());
891:       assertFalse(node0.isIf());
892:       assertEquals((-1), node0.getSourcePosition());
893:       assertFalse(node0.isNE());
894:       assertFalse(node0.isAnd());
895:       assertFalse(node0.isContinue());
896:       assertFalse(node0.isIn());
897:       assertFalse(node0.isInc());
898:       assertFalse(node0.isFunction());
899:       assertFalse(node0.isFalse());
900:       assertFalse(node0.isThrow());
901:       assertFalse(node0.isBreak());
902:       assertEquals((-1), node0.getCharno());
903:       assertFalse(node0.isSwitch());
904:       assertFalse(node0.isCase());
905:       assertFalse(node0.isWith());
906:       assertFalse(node0.isNot());
907:       assertFalse(node0.isObjectLit());
908:       assertFalse(node0.isInstanceOf());
909:       assertFalse(node0.isString());
910:       assertFalse(node0.isExprResult());
911:       assertFalse(node0.isScript());
912:       assertFalse(node0.isGetProp());
913:       assertFalse(node0.isComma());
914:       assertTrue(node0.isNumber());
915:       assertFalse(node0.isHook());
916:       assertFalse(node0.isThis());
917:       assertFalse(node0.isFor());
918:       assertFalse(node0.isLabelName());
919:       assertFalse(node0.isAssign());
920:       assertFalse(node0.isGetterDef());
921:       assertFalse(node0.isDelProp());
922:       assertFalse(node0.hasOneChild());
923:       assertFalse(node0.isArrayLit());
924:       assertFalse(node0.isEmpty());
925:       assertFalse(node0.isGetElem());
926:       assertFalse(node0.isVoid());
927:       assertFalse(node0.isOr());
928:       assertFalse(node0.isTrue());
929:       assertFalse(node0.isDo());
930:       assertFalse(node0.isLabel());
931:       assertFalse(node0.isNew());
932:       assertFalse(node0.isAssignAdd());
933:       assertEquals(0, node0.getChildCount());
934:       assertFalse(node0.isDefaultCase());
935:       assertFalse(node0.isVar());
936:       assertTrue(node1.hasOneChild());
937:       assertFalse(node1.isFor());
938:       assertFalse(node1.isGetterDef());
939:       assertFalse(node1.isDebugger());
940:       assertFalse(node1.isFunction());
941:       assertFalse(node1.isTrue());
942:       assertFalse(node1.isNE());
943:       assertFalse(node1.isRegExp());
944:       assertFalse(node1.isVoid());
945:       assertFalse(node1.isIf());
946:       assertTrue(node1.hasChildren());
947:       assertFalse(node1.isDelProp());
948:       assertFalse(node1.isArrayLit());
949:       assertFalse(node1.isCatch());
950:       assertEquals(1, node1.getChildCount());
951:       assertFalse(node1.isString());
952:       assertFalse(node1.isTry());
953:       assertFalse(node1.isCase());
954:       assertFalse(node1.isThrow());
955:       assertFalse(node1.isFalse());
956:       assertFalse(node1.isHook());
957:       assertFalse(node1.isBlock());
958:       assertFalse(node1.isContinue());
959:       assertFalse(node1.isIn());
960:       assertFalse(node1.isInc());
961:       assertFalse(node1.isSetterDef());
962:       assertFalse(node1.isCast());
963:       assertFalse(node1.isAssign());
964:       assertEquals((-1), node1.getSourcePosition());
965:       assertFalse(node1.isDec());
966:       assertFalse(node1.isExprResult());
967:       assertFalse(node1.isTypeOf());
968:       assertEquals((-1), node1.getLineno());
969:       assertFalse(node1.isLabelName());
970:       assertFalse(node1.isGetElem());
971:       assertFalse(node1.hasMoreThanOneChild());
972:       assertFalse(node1.isObjectLit());
973:       assertFalse(node1.isInstanceOf());
974:       assertEquals(972, node1.getType());
975:       assertFalse(node1.isAnd());
976:       assertFalse(node1.isWith());
977:       assertFalse(node1.isReturn());
978:       assertFalse(node1.isWhile());
979:       assertFalse(node1.isNot());
980:       assertFalse(node1.isThis());
981:       assertFalse(node1.isScript());
982:       assertFalse(node1.isNumber());
983:       assertFalse(node1.isGetProp());
984:       assertFalse(node1.isCall());
985:       assertFalse(node1.isVar());
986:       assertFalse(node1.isStringKey());
987:       assertFalse(node1.isName());
988:       assertFalse(node1.isNull());
989:       assertEquals((-1), node1.getCharno());
990:       assertFalse(node1.isComma());
991:       assertFalse(node1.isParamList());
992:       assertFalse(node1.isSwitch());
993:       assertFalse(node1.isBreak());
994:       assertFalse(node1.isOr());
995:       assertFalse(node1.isLabel());
996:       assertFalse(node1.isDefaultCase());
997:       assertFalse(node1.isAssignAdd());
998:       assertFalse(node1.isDo());
999:       assertFalse(node1.isAdd());
1000:       assertFalse(node1.isEmpty());
1001:       assertFalse(node1.isNew());
1002:       assertFalse(node2.isIn());
1003:       assertFalse(node2.isCase());
1004:       assertTrue(node2.isNumber());
1005:       assertFalse(node2.isIf());
1006:       assertFalse(node2.isString());
1007:       assertFalse(node2.isNE());
1008:       assertFalse(node2.isInc());
1009:       assertFalse(node2.isEmpty());
1010:       assertEquals((-1), node2.getCharno());
1011:       assertFalse(node2.isGetterDef());
1012:       assertFalse(node2.isArrayLit());
1013:       assertFalse(node2.isThrow());
1014:       assertFalse(node2.isSwitch());
1015:       assertFalse(node2.isDefaultCase());
1016:       assertFalse(node2.isFalse());
1017:       assertFalse(node2.isFunction());
1018:       assertFalse(node2.isInstanceOf());
1019:       assertFalse(node2.isCatch());
1020:       assertFalse(node2.isParamList());
1021:       assertFalse(node2.isSetterDef());
1022:       assertFalse(node2.isScript());
1023:       assertFalse(node2.hasOneChild());
1024:       assertFalse(node2.isHook());
1025:       assertFalse(node2.isBlock());
1026:       assertFalse(node2.isTry());
1027:       assertFalse(node2.isThis());
1028:       assertEquals(39, node2.getType());
1029:       assertFalse(node2.isFor());
1030:       assertFalse(node2.isWith());
1031:       assertFalse(node2.hasMoreThanOneChild());
1032:       assertFalse(node2.isRegExp());
1033:       assertFalse(node2.isReturn());
1034:       assertEquals((-1), node2.getLineno());
1035:       assertFalse(node2.isDo());
1036:       assertFalse(node2.isAssignAdd());
1037:       assertEquals((-1), node2.getSourcePosition());
1038:       assertFalse(node2.isOr());
1039:       assertFalse(node2.isCast());
1040:       assertFalse(node2.isVar());
1041:       assertFalse(node2.isAdd());
1042:       assertFalse(node2.isStringKey());
1043:       assertFalse(node2.isNew());
1044:       assertFalse(node2.isLabelName());
1045:       assertFalse(node2.isContinue());
1046:       assertFalse(node2.isLabel());
1047:       assertEquals(0, node2.getChildCount());
1048:       assertFalse(node2.isGetProp());
1049:       assertFalse(node2.isAnd());
1050:       assertFalse(node2.isNull());
1051:       assertFalse(node2.isTrue());
1052:       assertFalse(node2.isDebugger());
1053:       assertFalse(node2.isNot());
1054:       assertFalse(node2.isObjectLit());
1055:       assertFalse(node2.isCall());
1056:       assertFalse(node2.isGetElem());
1057:       assertFalse(node2.isName());
1058:       assertFalse(node2.isVoid());
1059:       assertFalse(node2.isDelProp());
1060:       assertFalse(node2.isDec());
1061:       assertFalse(node2.hasChildren());
1062:       assertFalse(node2.isBreak());
1063:       assertFalse(node2.isWhile());
1064:       assertFalse(node2.isExprResult());
1065:       assertFalse(node2.isComma());
1066:       assertFalse(node2.isAssign());
1067:       assertFalse(node2.isTypeOf());
1068:       assertSame(node0, node2);
1069:       assertSame(node2, node0);
1070:       assertFalse(node0.equals((Object)node1));
1071:       assertFalse(node1.equals((Object)node0));
1072:       assertFalse(node2.equals((Object)node1));
1073:       assertNotNull(node2);
1074:       assertEquals(56, Node.CHANGE_TIME);
1075:       assertEquals(47, Node.IS_DISPATCHER);
1076:       assertEquals(2, Node.POST_FLAG);
1077:       assertEquals(37, Node.OPT_ARG_NAME);
1078:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1079:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1080:       assertEquals(29, Node.JSDOC_INFO_PROP);
1081:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1082:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1083:       assertEquals(46, Node.IS_NAMESPACE);
1084:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1085:       assertEquals(57, Node.LAST_PROP);
1086:       assertEquals(43, Node.IS_CONSTANT_NAME);
1087:       assertEquals(36, Node.QUOTED_PROP);
1088:       assertEquals(30, Node.VAR_ARGS_NAME);
1089:       assertEquals(55, Node.INFERRED_FUNCTION);
1090:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1091:       assertEquals(53, Node.INPUT_ID);
1092:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1093:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1094:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1095:       assertEquals(8, Node.FLAG_NO_THROWS);
1096:       assertEquals(50, Node.FREE_CALL);
1097:       assertEquals(48, Node.DIRECTIVES);
1098:       assertEquals(39, Node.EMPTY_BLOCK);
1099:       assertEquals(40, Node.ORIGINALNAME_PROP);
1100:       assertEquals(52, Node.LENGTH);
1101:       assertEquals(54, Node.SLASH_V);
1102:       assertEquals(57, Node.REFLECTED_OBJECT);
1103:       assertEquals(49, Node.DIRECT_EVAL);
1104:       assertEquals(1, Node.DECR_FLAG);
1105:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1106:       assertEquals(4095, Node.COLUMN_MASK);
1107:       assertEquals(32, Node.INCRDECR_PROP);
1108:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1109:       assertEquals(12, Node.COLUMN_BITS);
1110:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1111:       assertEquals(50, Node.FREE_CALL);
1112:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1114:       assertEquals(8, Node.FLAG_NO_THROWS);
1115:       assertEquals(57, Node.REFLECTED_OBJECT);
1116:       assertEquals(4095, Node.COLUMN_MASK);
1117:       assertEquals(40, Node.ORIGINALNAME_PROP);
1118:       assertEquals(48, Node.DIRECTIVES);
1119:       assertEquals(30, Node.VAR_ARGS_NAME);
1120:       assertEquals(49, Node.DIRECT_EVAL);
1121:       assertEquals(57, Node.LAST_PROP);
1122:       assertEquals(36, Node.QUOTED_PROP);
1123:       assertEquals(52, Node.LENGTH);
1124:       assertEquals(39, Node.EMPTY_BLOCK);
1125:       assertEquals(55, Node.INFERRED_FUNCTION);
1126:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1127:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1128:       assertEquals(53, Node.INPUT_ID);
1129:       assertEquals(29, Node.JSDOC_INFO_PROP);
1130:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1131:       assertEquals(56, Node.CHANGE_TIME);
1132:       assertEquals(2, Node.POST_FLAG);
1133:       assertEquals(47, Node.IS_DISPATCHER);
1134:       assertEquals(46, Node.IS_NAMESPACE);
1135:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1137:       assertEquals(37, Node.OPT_ARG_NAME);
1138:       assertEquals(43, Node.IS_CONSTANT_NAME);
1139:       assertEquals(12, Node.COLUMN_BITS);
1140:       assertEquals(54, Node.SLASH_V);
1141:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1142:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1143:       assertEquals(32, Node.INCRDECR_PROP);
1144:       assertEquals(1, Node.DECR_FLAG);
1145:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1146:       assertEquals(55, Node.INFERRED_FUNCTION);
1147:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1148:       assertEquals(43, Node.IS_CONSTANT_NAME);
1149:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1150:       assertEquals(39, Node.EMPTY_BLOCK);
1151:       assertEquals(53, Node.INPUT_ID);
1152:       assertEquals(36, Node.QUOTED_PROP);
1153:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1154:       assertEquals(8, Node.FLAG_NO_THROWS);
1155:       assertEquals(50, Node.FREE_CALL);
1156:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1157:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1158:       assertEquals(56, Node.CHANGE_TIME);
1159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1160:       assertEquals(48, Node.DIRECTIVES);
1161:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1162:       assertEquals(37, Node.OPT_ARG_NAME);
1163:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1164:       assertEquals(4095, Node.COLUMN_MASK);
1165:       assertEquals(1, Node.DECR_FLAG);
1166:       assertEquals(12, Node.COLUMN_BITS);
1167:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1168:       assertEquals(57, Node.LAST_PROP);
1169:       assertEquals(49, Node.DIRECT_EVAL);
1170:       assertEquals(32, Node.INCRDECR_PROP);
1171:       assertEquals(46, Node.IS_NAMESPACE);
1172:       assertEquals(54, Node.SLASH_V);
1173:       assertEquals(57, Node.REFLECTED_OBJECT);
1174:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1175:       assertEquals(52, Node.LENGTH);
1176:       assertEquals(40, Node.ORIGINALNAME_PROP);
1177:       assertEquals(29, Node.JSDOC_INFO_PROP);
1178:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1179:       assertEquals(47, Node.IS_DISPATCHER);
1180:       assertEquals(2, Node.POST_FLAG);
1181:       assertEquals(30, Node.VAR_ARGS_NAME);
1182:       
1183:       InputId inputId0 = node2.getInputId();
1184:       assertFalse(node0.isStringKey());
1185:       assertFalse(node0.isName());
1186:       assertFalse(node0.isSetterDef());
1187:       assertFalse(node0.isCall());
1188:       assertFalse(node0.isAdd());
1189:       assertFalse(node0.isParamList());
1190:       assertFalse(node0.isNull());
1191:       assertFalse(node0.hasMoreThanOneChild());
1192:       assertEquals((-1), node0.getLineno());
1193:       assertFalse(node0.isCatch());
1194:       assertFalse(node0.isTry());
1195:       assertFalse(node0.isRegExp());
1196:       assertFalse(node0.isTypeOf());
1197:       assertFalse(node0.isDec());
1198:       assertFalse(node0.hasChildren());
1199:       assertFalse(node0.isWhile());
1200:       assertEquals(39, node0.getType());
1201:       assertFalse(node0.isBlock());
1202:       assertFalse(node0.isReturn());
1203:       assertFalse(node0.isCast());
1204:       assertFalse(node0.isDebugger());
1205:       assertFalse(node0.isIf());
1206:       assertEquals((-1), node0.getSourcePosition());
1207:       assertFalse(node0.isNE());
1208:       assertFalse(node0.isAnd());
1209:       assertFalse(node0.isContinue());
1210:       assertFalse(node0.isIn());
1211:       assertFalse(node0.isInc());
1212:       assertFalse(node0.isFunction());
1213:       assertFalse(node0.isFalse());
1214:       assertFalse(node0.isThrow());
1215:       assertFalse(node0.isBreak());
1216:       assertEquals((-1), node0.getCharno());
1217:       assertFalse(node0.isSwitch());
1218:       assertFalse(node0.isCase());
1219:       assertFalse(node0.isWith());
1220:       assertFalse(node0.isNot());
1221:       assertFalse(node0.isObjectLit());
1222:       assertFalse(node0.isInstanceOf());
1223:       assertFalse(node0.isString());
1224:       assertFalse(node0.isExprResult());
1225:       assertFalse(node0.isScript());
1226:       assertFalse(node0.isGetProp());
1227:       assertFalse(node0.isComma());
1228:       assertTrue(node0.isNumber());
1229:       assertFalse(node0.isHook());
1230:       assertFalse(node0.isThis());
1231:       assertFalse(node0.isFor());
1232:       assertFalse(node0.isLabelName());
1233:       assertFalse(node0.isAssign());
1234:       assertFalse(node0.isGetterDef());
1235:       assertFalse(node0.isDelProp());
1236:       assertFalse(node0.hasOneChild());
1237:       assertFalse(node0.isArrayLit());
1238:       assertFalse(node0.isEmpty());
1239:       assertFalse(node0.isGetElem());
1240:       assertFalse(node0.isVoid());
1241:       assertFalse(node0.isOr());
1242:       assertFalse(node0.isTrue());
1243:       assertFalse(node0.isDo());
1244:       assertFalse(node0.isLabel());
1245:       assertFalse(node0.isNew());
1246:       assertFalse(node0.isAssignAdd());
1247:       assertEquals(0, node0.getChildCount());
1248:       assertFalse(node0.isDefaultCase());
1249:       assertFalse(node0.isVar());
1250:       assertTrue(node1.hasOneChild());
1251:       assertFalse(node1.isFor());
1252:       assertFalse(node1.isGetterDef());
1253:       assertFalse(node1.isDebugger());
1254:       assertFalse(node1.isFunction());
1255:       assertFalse(node1.isTrue());
1256:       assertFalse(node1.isNE());
1257:       assertFalse(node1.isRegExp());
1258:       assertFalse(node1.isVoid());
1259:       assertFalse(node1.isIf());
1260:       assertTrue(node1.hasChildren());
1261:       assertFalse(node1.isDelProp());
1262:       assertFalse(node1.isArrayLit());
1263:       assertFalse(node1.isCatch());
1264:       assertEquals(1, node1.getChildCount());
1265:       assertFalse(node1.isString());
1266:       assertFalse(node1.isTry());
1267:       assertFalse(node1.isCase());
1268:       assertFalse(node1.isThrow());
1269:       assertFalse(node1.isFalse());
1270:       assertFalse(node1.isHook());
1271:       assertFalse(node1.isBlock());
1272:       assertFalse(node1.isContinue());
1273:       assertFalse(node1.isIn());
1274:       assertFalse(node1.isInc());
1275:       assertFalse(node1.isSetterDef());
1276:       assertFalse(node1.isCast());
1277:       assertFalse(node1.isAssign());
1278:       assertEquals((-1), node1.getSourcePosition());
1279:       assertFalse(node1.isDec());
1280:       assertFalse(node1.isExprResult());
1281:       assertFalse(node1.isTypeOf());
1282:       assertEquals((-1), node1.getLineno());
1283:       assertFalse(node1.isLabelName());
1284:       assertFalse(node1.isGetElem());
1285:       assertFalse(node1.hasMoreThanOneChild());
1286:       assertFalse(node1.isObjectLit());
1287:       assertFalse(node1.isInstanceOf());
1288:       assertEquals(972, node1.getType());
1289:       assertFalse(node1.isAnd());
1290:       assertFalse(node1.isWith());
1291:       assertFalse(node1.isReturn());
1292:       assertFalse(node1.isWhile());
1293:       assertFalse(node1.isNot());
1294:       assertFalse(node1.isThis());
1295:       assertFalse(node1.isScript());
1296:       assertFalse(node1.isNumber());
1297:       assertFalse(node1.isGetProp());
1298:       assertFalse(node1.isCall());
1299:       assertFalse(node1.isVar());
1300:       assertFalse(node1.isStringKey());
1301:       assertFalse(node1.isName());
1302:       assertFalse(node1.isNull());
1303:       assertEquals((-1), node1.getCharno());
1304:       assertFalse(node1.isComma());
1305:       assertFalse(node1.isParamList());
1306:       assertFalse(node1.isSwitch());
1307:       assertFalse(node1.isBreak());
1308:       assertFalse(node1.isOr());
1309:       assertFalse(node1.isLabel());
1310:       assertFalse(node1.isDefaultCase());
1311:       assertFalse(node1.isAssignAdd());
1312:       assertFalse(node1.isDo());
1313:       assertFalse(node1.isAdd());
1314:       assertFalse(node1.isEmpty());
1315:       assertFalse(node1.isNew());
1316:       assertFalse(node2.isIn());
1317:       assertFalse(node2.isCase());
1318:       assertTrue(node2.isNumber());
1319:       assertFalse(node2.isIf());
1320:       assertFalse(node2.isString());
1321:       assertFalse(node2.isNE());
1322:       assertFalse(node2.isInc());
1323:       assertFalse(node2.isEmpty());
1324:       assertEquals((-1), node2.getCharno());
1325:       assertFalse(node2.isGetterDef());
1326:       assertFalse(node2.isArrayLit());
1327:       assertFalse(node2.isThrow());
1328:       assertFalse(node2.isSwitch());
1329:       assertFalse(node2.isDefaultCase());
1330:       assertFalse(node2.isFalse());
1331:       assertFalse(node2.isFunction());
1332:       assertFalse(node2.isInstanceOf());
1333:       assertFalse(node2.isCatch());
1334:       assertFalse(node2.isParamList());
1335:       assertFalse(node2.isSetterDef());
1336:       assertFalse(node2.isScript());
1337:       assertFalse(node2.hasOneChild());
1338:       assertFalse(node2.isHook());
1339:       assertFalse(node2.isBlock());
1340:       assertFalse(node2.isTry());
1341:       assertFalse(node2.isThis());
1342:       assertEquals(39, node2.getType());
1343:       assertFalse(node2.isFor());
1344:       assertFalse(node2.isWith());
1345:       assertFalse(node2.hasMoreThanOneChild());
1346:       assertFalse(node2.isRegExp());
1347:       assertFalse(node2.isReturn());
1348:       assertEquals((-1), node2.getLineno());
1349:       assertFalse(node2.isDo());
1350:       assertFalse(node2.isAssignAdd());
1351:       assertEquals((-1), node2.getSourcePosition());
1352:       assertFalse(node2.isOr());
1353:       assertFalse(node2.isCast());
1354:       assertFalse(node2.isVar());
1355:       assertFalse(node2.isAdd());
1356:       assertFalse(node2.isStringKey());
1357:       assertFalse(node2.isNew());
1358:       assertFalse(node2.isLabelName());
1359:       assertFalse(node2.isContinue());
1360:       assertFalse(node2.isLabel());
1361:       assertEquals(0, node2.getChildCount());
1362:       assertFalse(node2.isGetProp());
1363:       assertFalse(node2.isAnd());
1364:       assertFalse(node2.isNull());
1365:       assertFalse(node2.isTrue());
1366:       assertFalse(node2.isDebugger());
1367:       assertFalse(node2.isNot());
1368:       assertFalse(node2.isObjectLit());
1369:       assertFalse(node2.isCall());
1370:       assertFalse(node2.isGetElem());
1371:       assertFalse(node2.isName());
1372:       assertFalse(node2.isVoid());
1373:       assertFalse(node2.isDelProp());
1374:       assertFalse(node2.isDec());
1375:       assertFalse(node2.hasChildren());
1376:       assertFalse(node2.isBreak());
1377:       assertFalse(node2.isWhile());
1378:       assertFalse(node2.isExprResult());
1379:       assertFalse(node2.isComma());
1380:       assertFalse(node2.isAssign());
1381:       assertFalse(node2.isTypeOf());
1382:       assertSame(node0, node2);
1383:       assertSame(node2, node0);
1384:       assertFalse(node0.equals((Object)node1));
1385:       assertFalse(node1.equals((Object)node2));
1386:       assertFalse(node1.equals((Object)node0));
1387:       assertFalse(node2.equals((Object)node1));
1388:       assertNull(inputId0);
1389:       assertEquals(56, Node.CHANGE_TIME);
1390:       assertEquals(47, Node.IS_DISPATCHER);
1391:       assertEquals(2, Node.POST_FLAG);
1392:       assertEquals(37, Node.OPT_ARG_NAME);
1393:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1394:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1395:       assertEquals(29, Node.JSDOC_INFO_PROP);
1396:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1397:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1398:       assertEquals(46, Node.IS_NAMESPACE);
1399:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1400:       assertEquals(57, Node.LAST_PROP);
1401:       assertEquals(43, Node.IS_CONSTANT_NAME);
1402:       assertEquals(36, Node.QUOTED_PROP);
1403:       assertEquals(30, Node.VAR_ARGS_NAME);
1404:       assertEquals(55, Node.INFERRED_FUNCTION);
1405:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1406:       assertEquals(53, Node.INPUT_ID);
1407:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1408:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1409:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1410:       assertEquals(8, Node.FLAG_NO_THROWS);
1411:       assertEquals(50, Node.FREE_CALL);
1412:       assertEquals(48, Node.DIRECTIVES);
1413:       assertEquals(39, Node.EMPTY_BLOCK);
1414:       assertEquals(40, Node.ORIGINALNAME_PROP);
1415:       assertEquals(52, Node.LENGTH);
1416:       assertEquals(54, Node.SLASH_V);
1417:       assertEquals(57, Node.REFLECTED_OBJECT);
1418:       assertEquals(49, Node.DIRECT_EVAL);
1419:       assertEquals(1, Node.DECR_FLAG);
1420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1421:       assertEquals(4095, Node.COLUMN_MASK);
1422:       assertEquals(32, Node.INCRDECR_PROP);
1423:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1424:       assertEquals(12, Node.COLUMN_BITS);
1425:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1426:       assertEquals(50, Node.FREE_CALL);
1427:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1428:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1429:       assertEquals(8, Node.FLAG_NO_THROWS);
1430:       assertEquals(57, Node.REFLECTED_OBJECT);
1431:       assertEquals(4095, Node.COLUMN_MASK);
1432:       assertEquals(40, Node.ORIGINALNAME_PROP);
1433:       assertEquals(48, Node.DIRECTIVES);
1434:       assertEquals(30, Node.VAR_ARGS_NAME);
1435:       assertEquals(49, Node.DIRECT_EVAL);
1436:       assertEquals(57, Node.LAST_PROP);
1437:       assertEquals(36, Node.QUOTED_PROP);
1438:       assertEquals(52, Node.LENGTH);
1439:       assertEquals(39, Node.EMPTY_BLOCK);
1440:       assertEquals(55, Node.INFERRED_FUNCTION);
1441:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1442:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1443:       assertEquals(53, Node.INPUT_ID);
1444:       assertEquals(29, Node.JSDOC_INFO_PROP);
1445:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1446:       assertEquals(56, Node.CHANGE_TIME);
1447:       assertEquals(2, Node.POST_FLAG);
1448:       assertEquals(47, Node.IS_DISPATCHER);
1449:       assertEquals(46, Node.IS_NAMESPACE);
1450:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1451:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1452:       assertEquals(37, Node.OPT_ARG_NAME);
1453:       assertEquals(43, Node.IS_CONSTANT_NAME);
1454:       assertEquals(12, Node.COLUMN_BITS);
1455:       assertEquals(54, Node.SLASH_V);
1456:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1457:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1458:       assertEquals(32, Node.INCRDECR_PROP);
1459:       assertEquals(1, Node.DECR_FLAG);
1460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1461:       assertEquals(55, Node.INFERRED_FUNCTION);
1462:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1463:       assertEquals(43, Node.IS_CONSTANT_NAME);
1464:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1465:       assertEquals(39, Node.EMPTY_BLOCK);
1466:       assertEquals(53, Node.INPUT_ID);
1467:       assertEquals(36, Node.QUOTED_PROP);
1468:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1469:       assertEquals(8, Node.FLAG_NO_THROWS);
1470:       assertEquals(50, Node.FREE_CALL);
1471:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1472:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1473:       assertEquals(56, Node.CHANGE_TIME);
1474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1475:       assertEquals(48, Node.DIRECTIVES);
1476:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1477:       assertEquals(37, Node.OPT_ARG_NAME);
1478:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1479:       assertEquals(4095, Node.COLUMN_MASK);
1480:       assertEquals(1, Node.DECR_FLAG);
1481:       assertEquals(12, Node.COLUMN_BITS);
1482:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1483:       assertEquals(57, Node.LAST_PROP);
1484:       assertEquals(49, Node.DIRECT_EVAL);
1485:       assertEquals(32, Node.INCRDECR_PROP);
1486:       assertEquals(46, Node.IS_NAMESPACE);
1487:       assertEquals(54, Node.SLASH_V);
1488:       assertEquals(57, Node.REFLECTED_OBJECT);
1489:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1490:       assertEquals(52, Node.LENGTH);
1491:       assertEquals(40, Node.ORIGINALNAME_PROP);
1492:       assertEquals(29, Node.JSDOC_INFO_PROP);
1493:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1494:       assertEquals(47, Node.IS_DISPATCHER);
1495:       assertEquals(2, Node.POST_FLAG);
1496:       assertEquals(30, Node.VAR_ARGS_NAME);
1497:       
1498:       // Undeclared exception!
1499:       try { 
1500:         Node.newString((String) null, 42, 16);
1501:         fail("Expecting exception: IllegalArgumentException");
1502:       
1503:       } catch(IllegalArgumentException e) {
1504:          //
1505:          // StringNode: str is null
1506:          //
1507:          verifyException("com.google.javascript.rhino.Node$StringNode", e);
1508:       }
1509:   }
1510: }
RegularFileObject[/tmp/EvoSuite_180_1628161080093/com/google/javascript/rhino/Node_180_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:58:00 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_180_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_180_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_180_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.jstype.TemplatizedType",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.jstype.TernaryValue",
353:       "com.google.javascript.rhino.jstype.JSType$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.common.collect.Platform",
362:       "com.google.javascript.rhino.JSTypeExpression",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
367:       "com.google.common.collect.ImmutableList$1",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.JSDocInfo$Marker"
370:     );
371:   }
372: }

[MASTER] 10:58:00.374 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
assertFalse(boolean0);

Node node0 = Node.newNumber(356.28301613769554);
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertNotNull(node0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertNotNull(iterable0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean1 = node0.isFor();
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean2 = node0.mayMutateArguments();
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertTrue(boolean2);
assertFalse(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertNull(staticSourceFile0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

node0.setStaticSourceFile((StaticSourceFile) null);
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

Node node1 = new Node(972, node0, (-1078), (-2139));
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertEquals(972, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node node2 = node0.srcrefTree(node1);
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertEquals(972, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertTrue(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertEquals(39, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

InputId inputId0 = node2.getInputId();
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertTrue(node0.isNumber());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isCatch());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isString());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertEquals(972, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isGetProp());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isNew());
assertFalse(node2.isIn());
assertFalse(node2.isCase());
assertTrue(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isSwitch());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertEquals(39, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isOr());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isNew());
assertFalse(node2.isLabelName());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetProp());
assertFalse(node2.isAnd());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNull(inputId0);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Node.newString((String) null, 42, 16);

[MASTER] 10:58:04.897 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_198_1628161084621/com/google/javascript/rhino/Node_198_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_198_1628161084621/com/google/javascript/rhino/Node_198_tmp__ESTest_scaffolding.java]]
[MASTER] 10:58:04.897 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:04.897 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:58:04.899 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 774
[MASTER] 10:58:04.900 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_198_1628161084621/com/google/javascript/rhino/Node_198_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:58:04 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import java.io.DataOutputStream;
13: import java.nio.channels.FileChannel;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
17: import org.evosuite.runtime.mock.java.io.MockPrintWriter;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_198_tmp__ESTest extends Node_198_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = new Node(114, 114, 114);
26:       assertFalse(node0.isGetterDef());
27:       assertFalse(node0.isDelProp());
28:       assertEquals(114, node0.getCharno());
29:       assertFalse(node0.isEmpty());
30:       assertFalse(node0.isIf());
31:       assertFalse(node0.isArrayLit());
32:       assertFalse(node0.isTry());
33:       assertFalse(node0.isFunction());
34:       assertFalse(node0.isFor());
35:       assertFalse(node0.isRegExp());
36:       assertFalse(node0.isDefaultCase());
37:       assertFalse(node0.isInc());
38:       assertFalse(node0.isCatch());
39:       assertFalse(node0.isVoid());
40:       assertFalse(node0.isIn());
41:       assertFalse(node0.isTrue());
42:       assertFalse(node0.isNE());
43:       assertFalse(node0.isNull());
44:       assertFalse(node0.isInstanceOf());
45:       assertEquals(0, node0.getChildCount());
46:       assertFalse(node0.isThis());
47:       assertFalse(node0.isVar());
48:       assertFalse(node0.isBlock());
49:       assertFalse(node0.isHook());
50:       assertEquals(467058, node0.getSourcePosition());
51:       assertFalse(node0.isSwitch());
52:       assertEquals(114, node0.getLineno());
53:       assertFalse(node0.isScript());
54:       assertFalse(node0.isCase());
55:       assertFalse(node0.isParamList());
56:       assertFalse(node0.isStringKey());
57:       assertFalse(node0.isLabelName());
58:       assertFalse(node0.isDec());
59:       assertFalse(node0.isAssign());
60:       assertFalse(node0.isTypeOf());
61:       assertFalse(node0.isNumber());
62:       assertFalse(node0.isCast());
63:       assertFalse(node0.hasOneChild());
64:       assertFalse(node0.isGetElem());
65:       assertFalse(node0.isReturn());
66:       assertFalse(node0.hasMoreThanOneChild());
67:       assertFalse(node0.isAssignAdd());
68:       assertFalse(node0.isLabel());
69:       assertFalse(node0.hasChildren());
70:       assertFalse(node0.isWith());
71:       assertFalse(node0.isExprResult());
72:       assertFalse(node0.isNew());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.isOr());
75:       assertFalse(node0.isName());
76:       assertFalse(node0.isFalse());
77:       assertEquals(114, node0.getType());
78:       assertFalse(node0.isCall());
79:       assertFalse(node0.isBreak());
80:       assertFalse(node0.isGetProp());
81:       assertFalse(node0.isSetterDef());
82:       assertFalse(node0.isComma());
83:       assertFalse(node0.isThrow());
84:       assertTrue(node0.isDo());
85:       assertFalse(node0.isString());
86:       assertFalse(node0.isWhile());
87:       assertFalse(node0.isNot());
88:       assertFalse(node0.isContinue());
89:       assertFalse(node0.isAnd());
90:       assertFalse(node0.isObjectLit());
91:       assertFalse(node0.isDebugger());
92:       assertNotNull(node0);
93:       assertEquals(48, Node.DIRECTIVES);
94:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
95:       assertEquals(8, Node.FLAG_NO_THROWS);
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(39, Node.EMPTY_BLOCK);
98:       assertEquals(40, Node.ORIGINALNAME_PROP);
99:       assertEquals(4095, Node.COLUMN_MASK);
100:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
101:       assertEquals(54, Node.SLASH_V);
102:       assertEquals(43, Node.IS_CONSTANT_NAME);
103:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
104:       assertEquals(50, Node.FREE_CALL);
105:       assertEquals(46, Node.IS_NAMESPACE);
106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
107:       assertEquals(37, Node.OPT_ARG_NAME);
108:       assertEquals(2, Node.POST_FLAG);
109:       assertEquals(32, Node.INCRDECR_PROP);
110:       assertEquals(29, Node.JSDOC_INFO_PROP);
111:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
112:       assertEquals(1, Node.DECR_FLAG);
113:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
114:       assertEquals(30, Node.VAR_ARGS_NAME);
115:       assertEquals(12, Node.COLUMN_BITS);
116:       assertEquals(47, Node.IS_DISPATCHER);
117:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
118:       assertEquals(52, Node.LENGTH);
119:       assertEquals(57, Node.LAST_PROP);
120:       assertEquals(49, Node.DIRECT_EVAL);
121:       assertEquals(53, Node.INPUT_ID);
122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
123:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
124:       assertEquals(55, Node.INFERRED_FUNCTION);
125:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
126:       assertEquals(56, Node.CHANGE_TIME);
127:       assertEquals(36, Node.QUOTED_PROP);
128:       assertEquals(57, Node.REFLECTED_OBJECT);
129:       
130:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
131:       assertFalse(node0.isGetterDef());
132:       assertFalse(node0.isDelProp());
133:       assertEquals(114, node0.getCharno());
134:       assertFalse(node0.isEmpty());
135:       assertFalse(node0.isIf());
136:       assertFalse(node0.isArrayLit());
137:       assertFalse(node0.isTry());
138:       assertFalse(node0.isFunction());
139:       assertFalse(node0.isFor());
140:       assertFalse(node0.isRegExp());
141:       assertFalse(node0.isDefaultCase());
142:       assertFalse(node0.isInc());
143:       assertFalse(node0.isCatch());
144:       assertFalse(node0.isVoid());
145:       assertFalse(node0.isIn());
146:       assertFalse(node0.isTrue());
147:       assertFalse(node0.isNE());
148:       assertFalse(node0.isNull());
149:       assertFalse(node0.isInstanceOf());
150:       assertEquals(0, node0.getChildCount());
151:       assertFalse(node0.isThis());
152:       assertFalse(node0.isVar());
153:       assertFalse(node0.isBlock());
154:       assertFalse(node0.isHook());
155:       assertEquals(467058, node0.getSourcePosition());
156:       assertFalse(node0.isSwitch());
157:       assertEquals(114, node0.getLineno());
158:       assertFalse(node0.isScript());
159:       assertFalse(node0.isCase());
160:       assertFalse(node0.isParamList());
161:       assertFalse(node0.isStringKey());
162:       assertFalse(node0.isLabelName());
163:       assertFalse(node0.isDec());
164:       assertFalse(node0.isAssign());
165:       assertFalse(node0.isTypeOf());
166:       assertFalse(node0.isNumber());
167:       assertFalse(node0.isCast());
168:       assertFalse(node0.hasOneChild());
169:       assertFalse(node0.isGetElem());
170:       assertFalse(node0.isReturn());
171:       assertFalse(node0.hasMoreThanOneChild());
172:       assertFalse(node0.isAssignAdd());
173:       assertFalse(node0.isLabel());
174:       assertFalse(node0.hasChildren());
175:       assertFalse(node0.isWith());
176:       assertFalse(node0.isExprResult());
177:       assertFalse(node0.isNew());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isOr());
180:       assertFalse(node0.isName());
181:       assertFalse(node0.isFalse());
182:       assertEquals(114, node0.getType());
183:       assertFalse(node0.isCall());
184:       assertFalse(node0.isBreak());
185:       assertFalse(node0.isGetProp());
186:       assertFalse(node0.isSetterDef());
187:       assertFalse(node0.isComma());
188:       assertFalse(node0.isThrow());
189:       assertTrue(node0.isDo());
190:       assertFalse(node0.isString());
191:       assertFalse(node0.isWhile());
192:       assertFalse(node0.isNot());
193:       assertFalse(node0.isContinue());
194:       assertFalse(node0.isAnd());
195:       assertFalse(node0.isObjectLit());
196:       assertFalse(node0.isDebugger());
197:       assertNull(jSDocInfo0);
198:       assertEquals(48, Node.DIRECTIVES);
199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
200:       assertEquals(8, Node.FLAG_NO_THROWS);
201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
202:       assertEquals(39, Node.EMPTY_BLOCK);
203:       assertEquals(40, Node.ORIGINALNAME_PROP);
204:       assertEquals(4095, Node.COLUMN_MASK);
205:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
206:       assertEquals(54, Node.SLASH_V);
207:       assertEquals(43, Node.IS_CONSTANT_NAME);
208:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
209:       assertEquals(50, Node.FREE_CALL);
210:       assertEquals(46, Node.IS_NAMESPACE);
211:       assertEquals(51, Node.STATIC_SOURCE_FILE);
212:       assertEquals(37, Node.OPT_ARG_NAME);
213:       assertEquals(2, Node.POST_FLAG);
214:       assertEquals(32, Node.INCRDECR_PROP);
215:       assertEquals(29, Node.JSDOC_INFO_PROP);
216:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
217:       assertEquals(1, Node.DECR_FLAG);
218:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
219:       assertEquals(30, Node.VAR_ARGS_NAME);
220:       assertEquals(12, Node.COLUMN_BITS);
221:       assertEquals(47, Node.IS_DISPATCHER);
222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
223:       assertEquals(52, Node.LENGTH);
224:       assertEquals(57, Node.LAST_PROP);
225:       assertEquals(49, Node.DIRECT_EVAL);
226:       assertEquals(53, Node.INPUT_ID);
227:       assertEquals(15, Node.NO_SIDE_EFFECTS);
228:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
229:       assertEquals(55, Node.INFERRED_FUNCTION);
230:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
231:       assertEquals(56, Node.CHANGE_TIME);
232:       assertEquals(36, Node.QUOTED_PROP);
233:       assertEquals(57, Node.REFLECTED_OBJECT);
234:       
235:       boolean boolean0 = node0.isIn();
236:       assertFalse(node0.isGetterDef());
237:       assertFalse(node0.isDelProp());
238:       assertEquals(114, node0.getCharno());
239:       assertFalse(node0.isEmpty());
240:       assertFalse(node0.isIf());
241:       assertFalse(node0.isArrayLit());
242:       assertFalse(node0.isTry());
243:       assertFalse(node0.isFunction());
244:       assertFalse(node0.isFor());
245:       assertFalse(node0.isRegExp());
246:       assertFalse(node0.isDefaultCase());
247:       assertFalse(node0.isInc());
248:       assertFalse(node0.isCatch());
249:       assertFalse(node0.isVoid());
250:       assertFalse(node0.isIn());
251:       assertFalse(node0.isTrue());
252:       assertFalse(node0.isNE());
253:       assertFalse(node0.isNull());
254:       assertFalse(node0.isInstanceOf());
255:       assertEquals(0, node0.getChildCount());
256:       assertFalse(node0.isThis());
257:       assertFalse(node0.isVar());
258:       assertFalse(node0.isBlock());
259:       assertFalse(node0.isHook());
260:       assertEquals(467058, node0.getSourcePosition());
261:       assertFalse(node0.isSwitch());
262:       assertEquals(114, node0.getLineno());
263:       assertFalse(node0.isScript());
264:       assertFalse(node0.isCase());
265:       assertFalse(node0.isParamList());
266:       assertFalse(node0.isStringKey());
267:       assertFalse(node0.isLabelName());
268:       assertFalse(node0.isDec());
269:       assertFalse(node0.isAssign());
270:       assertFalse(node0.isTypeOf());
271:       assertFalse(node0.isNumber());
272:       assertFalse(node0.isCast());
273:       assertFalse(node0.hasOneChild());
274:       assertFalse(node0.isGetElem());
275:       assertFalse(node0.isReturn());
276:       assertFalse(node0.hasMoreThanOneChild());
277:       assertFalse(node0.isAssignAdd());
278:       assertFalse(node0.isLabel());
279:       assertFalse(node0.hasChildren());
280:       assertFalse(node0.isWith());
281:       assertFalse(node0.isExprResult());
282:       assertFalse(node0.isNew());
283:       assertFalse(node0.isAdd());
284:       assertFalse(node0.isOr());
285:       assertFalse(node0.isName());
286:       assertFalse(node0.isFalse());
287:       assertEquals(114, node0.getType());
288:       assertFalse(node0.isCall());
289:       assertFalse(node0.isBreak());
290:       assertFalse(node0.isGetProp());
291:       assertFalse(node0.isSetterDef());
292:       assertFalse(node0.isComma());
293:       assertFalse(node0.isThrow());
294:       assertTrue(node0.isDo());
295:       assertFalse(node0.isString());
296:       assertFalse(node0.isWhile());
297:       assertFalse(node0.isNot());
298:       assertFalse(node0.isContinue());
299:       assertFalse(node0.isAnd());
300:       assertFalse(node0.isObjectLit());
301:       assertFalse(node0.isDebugger());
302:       assertFalse(boolean0);
303:       assertEquals(48, Node.DIRECTIVES);
304:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
305:       assertEquals(8, Node.FLAG_NO_THROWS);
306:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
307:       assertEquals(39, Node.EMPTY_BLOCK);
308:       assertEquals(40, Node.ORIGINALNAME_PROP);
309:       assertEquals(4095, Node.COLUMN_MASK);
310:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
311:       assertEquals(54, Node.SLASH_V);
312:       assertEquals(43, Node.IS_CONSTANT_NAME);
313:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
314:       assertEquals(50, Node.FREE_CALL);
315:       assertEquals(46, Node.IS_NAMESPACE);
316:       assertEquals(51, Node.STATIC_SOURCE_FILE);
317:       assertEquals(37, Node.OPT_ARG_NAME);
318:       assertEquals(2, Node.POST_FLAG);
319:       assertEquals(32, Node.INCRDECR_PROP);
320:       assertEquals(29, Node.JSDOC_INFO_PROP);
321:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
322:       assertEquals(1, Node.DECR_FLAG);
323:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
324:       assertEquals(30, Node.VAR_ARGS_NAME);
325:       assertEquals(12, Node.COLUMN_BITS);
326:       assertEquals(47, Node.IS_DISPATCHER);
327:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
328:       assertEquals(52, Node.LENGTH);
329:       assertEquals(57, Node.LAST_PROP);
330:       assertEquals(49, Node.DIRECT_EVAL);
331:       assertEquals(53, Node.INPUT_ID);
332:       assertEquals(15, Node.NO_SIDE_EFFECTS);
333:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
334:       assertEquals(55, Node.INFERRED_FUNCTION);
335:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
336:       assertEquals(56, Node.CHANGE_TIME);
337:       assertEquals(36, Node.QUOTED_PROP);
338:       assertEquals(57, Node.REFLECTED_OBJECT);
339:       
340:       MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("c9");
341:       assertNotNull(mockFileOutputStream0);
342:       
343:       FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
344:       assertTrue(fileChannel0.isOpen());
345:       assertEquals(0L, fileChannel0.size());
346:       assertEquals(0L, fileChannel0.position());
347:       assertNotNull(fileChannel0);
348:       
349:       DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
350:       assertNotNull(dataOutputStream0);
351:       
352:       MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
353:       assertNotNull(mockPrintWriter0);
354:       
355:       Node node1 = node0.getLastSibling();
356:       assertFalse(node0.isGetterDef());
357:       assertFalse(node0.isDelProp());
358:       assertEquals(114, node0.getCharno());
359:       assertFalse(node0.isEmpty());
360:       assertFalse(node0.isIf());
361:       assertFalse(node0.isArrayLit());
362:       assertFalse(node0.isTry());
363:       assertFalse(node0.isFunction());
364:       assertFalse(node0.isFor());
365:       assertFalse(node0.isRegExp());
366:       assertFalse(node0.isDefaultCase());
367:       assertFalse(node0.isInc());
368:       assertFalse(node0.isCatch());
369:       assertFalse(node0.isVoid());
370:       assertFalse(node0.isIn());
371:       assertFalse(node0.isTrue());
372:       assertFalse(node0.isNE());
373:       assertFalse(node0.isNull());
374:       assertFalse(node0.isInstanceOf());
375:       assertEquals(0, node0.getChildCount());
376:       assertFalse(node0.isThis());
377:       assertFalse(node0.isVar());
378:       assertFalse(node0.isBlock());
379:       assertFalse(node0.isHook());
380:       assertEquals(467058, node0.getSourcePosition());
381:       assertFalse(node0.isSwitch());
382:       assertEquals(114, node0.getLineno());
383:       assertFalse(node0.isScript());
384:       assertFalse(node0.isCase());
385:       assertFalse(node0.isParamList());
386:       assertFalse(node0.isStringKey());
387:       assertFalse(node0.isLabelName());
388:       assertFalse(node0.isDec());
389:       assertFalse(node0.isAssign());
390:       assertFalse(node0.isTypeOf());
391:       assertFalse(node0.isNumber());
392:       assertFalse(node0.isCast());
393:       assertFalse(node0.hasOneChild());
394:       assertFalse(node0.isGetElem());
395:       assertFalse(node0.isReturn());
396:       assertFalse(node0.hasMoreThanOneChild());
397:       assertFalse(node0.isAssignAdd());
398:       assertFalse(node0.isLabel());
399:       assertFalse(node0.hasChildren());
400:       assertFalse(node0.isWith());
401:       assertFalse(node0.isExprResult());
402:       assertFalse(node0.isNew());
403:       assertFalse(node0.isAdd());
404:       assertFalse(node0.isOr());
405:       assertFalse(node0.isName());
406:       assertFalse(node0.isFalse());
407:       assertEquals(114, node0.getType());
408:       assertFalse(node0.isCall());
409:       assertFalse(node0.isBreak());
410:       assertFalse(node0.isGetProp());
411:       assertFalse(node0.isSetterDef());
412:       assertFalse(node0.isComma());
413:       assertFalse(node0.isThrow());
414:       assertTrue(node0.isDo());
415:       assertFalse(node0.isString());
416:       assertFalse(node0.isWhile());
417:       assertFalse(node0.isNot());
418:       assertFalse(node0.isContinue());
419:       assertFalse(node0.isAnd());
420:       assertFalse(node0.isObjectLit());
421:       assertFalse(node0.isDebugger());
422:       assertFalse(node1.isHook());
423:       assertFalse(node1.isFalse());
424:       assertFalse(node1.isThrow());
425:       assertTrue(node1.isDo());
426:       assertFalse(node1.isString());
427:       assertFalse(node1.isGetProp());
428:       assertFalse(node1.isInc());
429:       assertFalse(node1.isCase());
430:       assertFalse(node1.isAnd());
431:       assertFalse(node1.isNot());
432:       assertFalse(node1.isObjectLit());
433:       assertFalse(node1.isSwitch());
434:       assertFalse(node1.isArrayLit());
435:       assertFalse(node1.hasOneChild());
436:       assertFalse(node1.isCast());
437:       assertFalse(node1.isFor());
438:       assertFalse(node1.isNumber());
439:       assertFalse(node1.isScript());
440:       assertFalse(node1.isGetterDef());
441:       assertEquals(114, node1.getLineno());
442:       assertFalse(node1.isTry());
443:       assertFalse(node1.isInstanceOf());
444:       assertFalse(node1.hasMoreThanOneChild());
445:       assertFalse(node1.isCatch());
446:       assertFalse(node1.isIn());
447:       assertFalse(node1.isThis());
448:       assertFalse(node1.isRegExp());
449:       assertFalse(node1.isWith());
450:       assertFalse(node1.isNE());
451:       assertFalse(node1.isIf());
452:       assertFalse(node1.isVar());
453:       assertFalse(node1.isBlock());
454:       assertFalse(node1.isStringKey());
455:       assertEquals(467058, node1.getSourcePosition());
456:       assertEquals(114, node1.getType());
457:       assertFalse(node1.isWhile());
458:       assertFalse(node1.isNew());
459:       assertFalse(node1.isAdd());
460:       assertFalse(node1.isSetterDef());
461:       assertEquals(0, node1.getChildCount());
462:       assertFalse(node1.isContinue());
463:       assertFalse(node1.isAssignAdd());
464:       assertFalse(node1.isLabel());
465:       assertFalse(node1.isParamList());
466:       assertFalse(node1.isFunction());
467:       assertFalse(node1.isLabelName());
468:       assertFalse(node1.isAssign());
469:       assertFalse(node1.isTrue());
470:       assertFalse(node1.isDebugger());
471:       assertFalse(node1.hasChildren());
472:       assertFalse(node1.isDefaultCase());
473:       assertEquals(114, node1.getCharno());
474:       assertFalse(node1.isEmpty());
475:       assertFalse(node1.isComma());
476:       assertFalse(node1.isReturn());
477:       assertFalse(node1.isOr());
478:       assertFalse(node1.isDec());
479:       assertFalse(node1.isTypeOf());
480:       assertFalse(node1.isDelProp());
481:       assertFalse(node1.isNull());
482:       assertFalse(node1.isGetElem());
483:       assertFalse(node1.isExprResult());
484:       assertFalse(node1.isCall());
485:       assertFalse(node1.isName());
486:       assertFalse(node1.isVoid());
487:       assertFalse(node1.isBreak());
488:       assertSame(node0, node1);
489:       assertSame(node1, node0);
490:       assertNotNull(node1);
491:       assertEquals(48, Node.DIRECTIVES);
492:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
493:       assertEquals(8, Node.FLAG_NO_THROWS);
494:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
495:       assertEquals(39, Node.EMPTY_BLOCK);
496:       assertEquals(40, Node.ORIGINALNAME_PROP);
497:       assertEquals(4095, Node.COLUMN_MASK);
498:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
499:       assertEquals(54, Node.SLASH_V);
500:       assertEquals(43, Node.IS_CONSTANT_NAME);
501:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
502:       assertEquals(50, Node.FREE_CALL);
503:       assertEquals(46, Node.IS_NAMESPACE);
504:       assertEquals(51, Node.STATIC_SOURCE_FILE);
505:       assertEquals(37, Node.OPT_ARG_NAME);
506:       assertEquals(2, Node.POST_FLAG);
507:       assertEquals(32, Node.INCRDECR_PROP);
508:       assertEquals(29, Node.JSDOC_INFO_PROP);
509:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
510:       assertEquals(1, Node.DECR_FLAG);
511:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
512:       assertEquals(30, Node.VAR_ARGS_NAME);
513:       assertEquals(12, Node.COLUMN_BITS);
514:       assertEquals(47, Node.IS_DISPATCHER);
515:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
516:       assertEquals(52, Node.LENGTH);
517:       assertEquals(57, Node.LAST_PROP);
518:       assertEquals(49, Node.DIRECT_EVAL);
519:       assertEquals(53, Node.INPUT_ID);
520:       assertEquals(15, Node.NO_SIDE_EFFECTS);
521:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
522:       assertEquals(55, Node.INFERRED_FUNCTION);
523:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
524:       assertEquals(56, Node.CHANGE_TIME);
525:       assertEquals(36, Node.QUOTED_PROP);
526:       assertEquals(57, Node.REFLECTED_OBJECT);
527:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
528:       assertEquals(29, Node.JSDOC_INFO_PROP);
529:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
530:       assertEquals(56, Node.CHANGE_TIME);
531:       assertEquals(47, Node.IS_DISPATCHER);
532:       assertEquals(2, Node.POST_FLAG);
533:       assertEquals(53, Node.INPUT_ID);
534:       assertEquals(32, Node.INCRDECR_PROP);
535:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
536:       assertEquals(1, Node.DECR_FLAG);
537:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
538:       assertEquals(49, Node.DIRECT_EVAL);
539:       assertEquals(55, Node.INFERRED_FUNCTION);
540:       assertEquals(4095, Node.COLUMN_MASK);
541:       assertEquals(12, Node.COLUMN_BITS);
542:       assertEquals(36, Node.QUOTED_PROP);
543:       assertEquals(48, Node.DIRECTIVES);
544:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
545:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
546:       assertEquals(37, Node.OPT_ARG_NAME);
547:       assertEquals(40, Node.ORIGINALNAME_PROP);
548:       assertEquals(50, Node.FREE_CALL);
549:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
550:       assertEquals(57, Node.REFLECTED_OBJECT);
551:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
552:       assertEquals(52, Node.LENGTH);
553:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
554:       assertEquals(8, Node.FLAG_NO_THROWS);
555:       assertEquals(15, Node.NO_SIDE_EFFECTS);
556:       assertEquals(57, Node.LAST_PROP);
557:       assertEquals(39, Node.EMPTY_BLOCK);
558:       assertEquals(43, Node.IS_CONSTANT_NAME);
559:       assertEquals(51, Node.STATIC_SOURCE_FILE);
560:       assertEquals(46, Node.IS_NAMESPACE);
561:       assertEquals(30, Node.VAR_ARGS_NAME);
562:       assertEquals(54, Node.SLASH_V);
563:       
564:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
565:       assertFalse(node0.isGetterDef());
566:       assertFalse(node0.isDelProp());
567:       assertEquals(114, node0.getCharno());
568:       assertFalse(node0.isEmpty());
569:       assertFalse(node0.isIf());
570:       assertFalse(node0.isArrayLit());
571:       assertFalse(node0.isTry());
572:       assertFalse(node0.isFunction());
573:       assertFalse(node0.isFor());
574:       assertFalse(node0.isRegExp());
575:       assertFalse(node0.isDefaultCase());
576:       assertFalse(node0.isInc());
577:       assertFalse(node0.isCatch());
578:       assertFalse(node0.isVoid());
579:       assertFalse(node0.isIn());
580:       assertFalse(node0.isTrue());
581:       assertFalse(node0.isNE());
582:       assertFalse(node0.isNull());
583:       assertFalse(node0.isInstanceOf());
584:       assertEquals(0, node0.getChildCount());
585:       assertFalse(node0.isThis());
586:       assertFalse(node0.isVar());
587:       assertFalse(node0.isBlock());
588:       assertFalse(node0.isHook());
589:       assertEquals(467058, node0.getSourcePosition());
590:       assertFalse(node0.isSwitch());
591:       assertEquals(114, node0.getLineno());
592:       assertFalse(node0.isScript());
593:       assertFalse(node0.isCase());
594:       assertFalse(node0.isParamList());
595:       assertFalse(node0.isStringKey());
596:       assertFalse(node0.isLabelName());
597:       assertFalse(node0.isDec());
598:       assertFalse(node0.isAssign());
599:       assertFalse(node0.isTypeOf());
600:       assertFalse(node0.isNumber());
601:       assertFalse(node0.isCast());
602:       assertFalse(node0.hasOneChild());
603:       assertFalse(node0.isGetElem());
604:       assertFalse(node0.isReturn());
605:       assertFalse(node0.hasMoreThanOneChild());
606:       assertFalse(node0.isAssignAdd());
607:       assertFalse(node0.isLabel());
608:       assertFalse(node0.hasChildren());
609:       assertFalse(node0.isWith());
610:       assertFalse(node0.isExprResult());
611:       assertFalse(node0.isNew());
612:       assertFalse(node0.isAdd());
613:       assertFalse(node0.isOr());
614:       assertFalse(node0.isName());
615:       assertFalse(node0.isFalse());
616:       assertEquals(114, node0.getType());
617:       assertFalse(node0.isCall());
618:       assertFalse(node0.isBreak());
619:       assertFalse(node0.isGetProp());
620:       assertFalse(node0.isSetterDef());
621:       assertFalse(node0.isComma());
622:       assertFalse(node0.isThrow());
623:       assertTrue(node0.isDo());
624:       assertFalse(node0.isString());
625:       assertFalse(node0.isWhile());
626:       assertFalse(node0.isNot());
627:       assertFalse(node0.isContinue());
628:       assertFalse(node0.isAnd());
629:       assertFalse(node0.isObjectLit());
630:       assertFalse(node0.isDebugger());
631:       assertFalse(node1.isHook());
632:       assertFalse(node1.isFalse());
633:       assertFalse(node1.isThrow());
634:       assertTrue(node1.isDo());
635:       assertFalse(node1.isString());
636:       assertFalse(node1.isGetProp());
637:       assertFalse(node1.isInc());
638:       assertFalse(node1.isCase());
639:       assertFalse(node1.isAnd());
640:       assertFalse(node1.isNot());
641:       assertFalse(node1.isObjectLit());
642:       assertFalse(node1.isSwitch());
643:       assertFalse(node1.isArrayLit());
644:       assertFalse(node1.hasOneChild());
645:       assertFalse(node1.isCast());
646:       assertFalse(node1.isFor());
647:       assertFalse(node1.isNumber());
648:       assertFalse(node1.isScript());
649:       assertFalse(node1.isGetterDef());
650:       assertEquals(114, node1.getLineno());
651:       assertFalse(node1.isTry());
652:       assertFalse(node1.isInstanceOf());
653:       assertFalse(node1.hasMoreThanOneChild());
654:       assertFalse(node1.isCatch());
655:       assertFalse(node1.isIn());
656:       assertFalse(node1.isThis());
657:       assertFalse(node1.isRegExp());
658:       assertFalse(node1.isWith());
659:       assertFalse(node1.isNE());
660:       assertFalse(node1.isIf());
661:       assertFalse(node1.isVar());
662:       assertFalse(node1.isBlock());
663:       assertFalse(node1.isStringKey());
664:       assertEquals(467058, node1.getSourcePosition());
665:       assertEquals(114, node1.getType());
666:       assertFalse(node1.isWhile());
667:       assertFalse(node1.isNew());
668:       assertFalse(node1.isAdd());
669:       assertFalse(node1.isSetterDef());
670:       assertEquals(0, node1.getChildCount());
671:       assertFalse(node1.isContinue());
672:       assertFalse(node1.isAssignAdd());
673:       assertFalse(node1.isLabel());
674:       assertFalse(node1.isParamList());
675:       assertFalse(node1.isFunction());
676:       assertFalse(node1.isLabelName());
677:       assertFalse(node1.isAssign());
678:       assertFalse(node1.isTrue());
679:       assertFalse(node1.isDebugger());
680:       assertFalse(node1.hasChildren());
681:       assertFalse(node1.isDefaultCase());
682:       assertEquals(114, node1.getCharno());
683:       assertFalse(node1.isEmpty());
684:       assertFalse(node1.isComma());
685:       assertFalse(node1.isReturn());
686:       assertFalse(node1.isOr());
687:       assertFalse(node1.isDec());
688:       assertFalse(node1.isTypeOf());
689:       assertFalse(node1.isDelProp());
690:       assertFalse(node1.isNull());
691:       assertFalse(node1.isGetElem());
692:       assertFalse(node1.isExprResult());
693:       assertFalse(node1.isCall());
694:       assertFalse(node1.isName());
695:       assertFalse(node1.isVoid());
696:       assertFalse(node1.isBreak());
697:       assertSame(node0, node1);
698:       assertSame(node1, node0);
699:       assertNotNull(node_FileLevelJsDocBuilder0);
700:       assertEquals(48, Node.DIRECTIVES);
701:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
702:       assertEquals(8, Node.FLAG_NO_THROWS);
703:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
704:       assertEquals(39, Node.EMPTY_BLOCK);
705:       assertEquals(40, Node.ORIGINALNAME_PROP);
706:       assertEquals(4095, Node.COLUMN_MASK);
707:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
708:       assertEquals(54, Node.SLASH_V);
709:       assertEquals(43, Node.IS_CONSTANT_NAME);
710:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
711:       assertEquals(50, Node.FREE_CALL);
712:       assertEquals(46, Node.IS_NAMESPACE);
713:       assertEquals(51, Node.STATIC_SOURCE_FILE);
714:       assertEquals(37, Node.OPT_ARG_NAME);
715:       assertEquals(2, Node.POST_FLAG);
716:       assertEquals(32, Node.INCRDECR_PROP);
717:       assertEquals(29, Node.JSDOC_INFO_PROP);
718:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
719:       assertEquals(1, Node.DECR_FLAG);
720:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
721:       assertEquals(30, Node.VAR_ARGS_NAME);
722:       assertEquals(12, Node.COLUMN_BITS);
723:       assertEquals(47, Node.IS_DISPATCHER);
724:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
725:       assertEquals(52, Node.LENGTH);
726:       assertEquals(57, Node.LAST_PROP);
727:       assertEquals(49, Node.DIRECT_EVAL);
728:       assertEquals(53, Node.INPUT_ID);
729:       assertEquals(15, Node.NO_SIDE_EFFECTS);
730:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
731:       assertEquals(55, Node.INFERRED_FUNCTION);
732:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
733:       assertEquals(56, Node.CHANGE_TIME);
734:       assertEquals(36, Node.QUOTED_PROP);
735:       assertEquals(57, Node.REFLECTED_OBJECT);
736:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
737:       assertEquals(29, Node.JSDOC_INFO_PROP);
738:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
739:       assertEquals(56, Node.CHANGE_TIME);
740:       assertEquals(47, Node.IS_DISPATCHER);
741:       assertEquals(2, Node.POST_FLAG);
742:       assertEquals(53, Node.INPUT_ID);
743:       assertEquals(32, Node.INCRDECR_PROP);
744:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
745:       assertEquals(1, Node.DECR_FLAG);
746:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
747:       assertEquals(49, Node.DIRECT_EVAL);
748:       assertEquals(55, Node.INFERRED_FUNCTION);
749:       assertEquals(4095, Node.COLUMN_MASK);
750:       assertEquals(12, Node.COLUMN_BITS);
751:       assertEquals(36, Node.QUOTED_PROP);
752:       assertEquals(48, Node.DIRECTIVES);
753:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
754:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
755:       assertEquals(37, Node.OPT_ARG_NAME);
756:       assertEquals(40, Node.ORIGINALNAME_PROP);
757:       assertEquals(50, Node.FREE_CALL);
758:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
759:       assertEquals(57, Node.REFLECTED_OBJECT);
760:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
761:       assertEquals(52, Node.LENGTH);
762:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
763:       assertEquals(8, Node.FLAG_NO_THROWS);
764:       assertEquals(15, Node.NO_SIDE_EFFECTS);
765:       assertEquals(57, Node.LAST_PROP);
766:       assertEquals(39, Node.EMPTY_BLOCK);
767:       assertEquals(43, Node.IS_CONSTANT_NAME);
768:       assertEquals(51, Node.STATIC_SOURCE_FILE);
769:       assertEquals(46, Node.IS_NAMESPACE);
770:       assertEquals(30, Node.VAR_ARGS_NAME);
771:       assertEquals(54, Node.SLASH_V);
772:       
773:       Iterable<Node> iterable0 = node1.children();
774:       assertFalse(iterable0.contains(node0));
775:       assertFalse(node0.isGetterDef());
776:       assertFalse(node0.isDelProp());
777:       assertEquals(114, node0.getCharno());
778:       assertFalse(node0.isEmpty());
779:       assertFalse(node0.isIf());
780:       assertFalse(node0.isArrayLit());
781:       assertFalse(node0.isTry());
782:       assertFalse(node0.isFunction());
783:       assertFalse(node0.isFor());
784:       assertFalse(node0.isRegExp());
785:       assertFalse(node0.isDefaultCase());
786:       assertFalse(node0.isInc());
787:       assertFalse(node0.isCatch());
788:       assertFalse(node0.isVoid());
789:       assertFalse(node0.isIn());
790:       assertFalse(node0.isTrue());
791:       assertFalse(node0.isNE());
792:       assertFalse(node0.isNull());
793:       assertFalse(node0.isInstanceOf());
794:       assertEquals(0, node0.getChildCount());
795:       assertFalse(node0.isThis());
796:       assertFalse(node0.isVar());
797:       assertFalse(node0.isBlock());
798:       assertFalse(node0.isHook());
799:       assertEquals(467058, node0.getSourcePosition());
800:       assertFalse(node0.isSwitch());
801:       assertEquals(114, node0.getLineno());
802:       assertFalse(node0.isScript());
803:       assertFalse(node0.isCase());
804:       assertFalse(node0.isParamList());
805:       assertFalse(node0.isStringKey());
806:       assertFalse(node0.isLabelName());
807:       assertFalse(node0.isDec());
808:       assertFalse(node0.isAssign());
809:       assertFalse(node0.isTypeOf());
810:       assertFalse(node0.isNumber());
811:       assertFalse(node0.isCast());
812:       assertFalse(node0.hasOneChild());
813:       assertFalse(node0.isGetElem());
814:       assertFalse(node0.isReturn());
815:       assertFalse(node0.hasMoreThanOneChild());
816:       assertFalse(node0.isAssignAdd());
817:       assertFalse(node0.isLabel());
818:       assertFalse(node0.hasChildren());
819:       assertFalse(node0.isWith());
820:       assertFalse(node0.isExprResult());
821:       assertFalse(node0.isNew());
822:       assertFalse(node0.isAdd());
823:       assertFalse(node0.isOr());
824:       assertFalse(node0.isName());
825:       assertFalse(node0.isFalse());
826:       assertEquals(114, node0.getType());
827:       assertFalse(node0.isCall());
828:       assertFalse(node0.isBreak());
829:       assertFalse(node0.isGetProp());
830:       assertFalse(node0.isSetterDef());
831:       assertFalse(node0.isComma());
832:       assertFalse(node0.isThrow());
833:       assertTrue(node0.isDo());
834:       assertFalse(node0.isString());
835:       assertFalse(node0.isWhile());
836:       assertFalse(node0.isNot());
837:       assertFalse(node0.isContinue());
838:       assertFalse(node0.isAnd());
839:       assertFalse(node0.isObjectLit());
840:       assertFalse(node0.isDebugger());
841:       assertFalse(node1.isHook());
842:       assertFalse(node1.isFalse());
843:       assertFalse(node1.isThrow());
844:       assertTrue(node1.isDo());
845:       assertFalse(node1.isString());
846:       assertFalse(node1.isGetProp());
847:       assertFalse(node1.isInc());
848:       assertFalse(node1.isCase());
849:       assertFalse(node1.isAnd());
850:       assertFalse(node1.isNot());
851:       assertFalse(node1.isObjectLit());
852:       assertFalse(node1.isSwitch());
853:       assertFalse(node1.isArrayLit());
854:       assertFalse(node1.hasOneChild());
855:       assertFalse(node1.isCast());
856:       assertFalse(node1.isFor());
857:       assertFalse(node1.isNumber());
858:       assertFalse(node1.isScript());
859:       assertFalse(node1.isGetterDef());
860:       assertEquals(114, node1.getLineno());
861:       assertFalse(node1.isTry());
862:       assertFalse(node1.isInstanceOf());
863:       assertFalse(node1.hasMoreThanOneChild());
864:       assertFalse(node1.isCatch());
865:       assertFalse(node1.isIn());
866:       assertFalse(node1.isThis());
867:       assertFalse(node1.isRegExp());
868:       assertFalse(node1.isWith());
869:       assertFalse(node1.isNE());
870:       assertFalse(node1.isIf());
871:       assertFalse(node1.isVar());
872:       assertFalse(node1.isBlock());
873:       assertFalse(node1.isStringKey());
874:       assertEquals(467058, node1.getSourcePosition());
875:       assertEquals(114, node1.getType());
876:       assertFalse(node1.isWhile());
877:       assertFalse(node1.isNew());
878:       assertFalse(node1.isAdd());
879:       assertFalse(node1.isSetterDef());
880:       assertEquals(0, node1.getChildCount());
881:       assertFalse(node1.isContinue());
882:       assertFalse(node1.isAssignAdd());
883:       assertFalse(node1.isLabel());
884:       assertFalse(node1.isParamList());
885:       assertFalse(node1.isFunction());
886:       assertFalse(node1.isLabelName());
887:       assertFalse(node1.isAssign());
888:       assertFalse(node1.isTrue());
889:       assertFalse(node1.isDebugger());
890:       assertFalse(node1.hasChildren());
891:       assertFalse(node1.isDefaultCase());
892:       assertEquals(114, node1.getCharno());
893:       assertFalse(node1.isEmpty());
894:       assertFalse(node1.isComma());
895:       assertFalse(node1.isReturn());
896:       assertFalse(node1.isOr());
897:       assertFalse(node1.isDec());
898:       assertFalse(node1.isTypeOf());
899:       assertFalse(node1.isDelProp());
900:       assertFalse(node1.isNull());
901:       assertFalse(node1.isGetElem());
902:       assertFalse(node1.isExprResult());
903:       assertFalse(node1.isCall());
904:       assertFalse(node1.isName());
905:       assertFalse(node1.isVoid());
906:       assertFalse(node1.isBreak());
907:       assertSame(node0, node1);
908:       assertSame(node1, node0);
909:       assertNotNull(iterable0);
910:       assertEquals(48, Node.DIRECTIVES);
911:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
912:       assertEquals(8, Node.FLAG_NO_THROWS);
913:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
914:       assertEquals(39, Node.EMPTY_BLOCK);
915:       assertEquals(40, Node.ORIGINALNAME_PROP);
916:       assertEquals(4095, Node.COLUMN_MASK);
917:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
918:       assertEquals(54, Node.SLASH_V);
919:       assertEquals(43, Node.IS_CONSTANT_NAME);
920:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
921:       assertEquals(50, Node.FREE_CALL);
922:       assertEquals(46, Node.IS_NAMESPACE);
923:       assertEquals(51, Node.STATIC_SOURCE_FILE);
924:       assertEquals(37, Node.OPT_ARG_NAME);
925:       assertEquals(2, Node.POST_FLAG);
926:       assertEquals(32, Node.INCRDECR_PROP);
927:       assertEquals(29, Node.JSDOC_INFO_PROP);
928:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
929:       assertEquals(1, Node.DECR_FLAG);
930:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
931:       assertEquals(30, Node.VAR_ARGS_NAME);
932:       assertEquals(12, Node.COLUMN_BITS);
933:       assertEquals(47, Node.IS_DISPATCHER);
934:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
935:       assertEquals(52, Node.LENGTH);
936:       assertEquals(57, Node.LAST_PROP);
937:       assertEquals(49, Node.DIRECT_EVAL);
938:       assertEquals(53, Node.INPUT_ID);
939:       assertEquals(15, Node.NO_SIDE_EFFECTS);
940:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
941:       assertEquals(55, Node.INFERRED_FUNCTION);
942:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
943:       assertEquals(56, Node.CHANGE_TIME);
944:       assertEquals(36, Node.QUOTED_PROP);
945:       assertEquals(57, Node.REFLECTED_OBJECT);
946:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
947:       assertEquals(29, Node.JSDOC_INFO_PROP);
948:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
949:       assertEquals(56, Node.CHANGE_TIME);
950:       assertEquals(47, Node.IS_DISPATCHER);
951:       assertEquals(2, Node.POST_FLAG);
952:       assertEquals(53, Node.INPUT_ID);
953:       assertEquals(32, Node.INCRDECR_PROP);
954:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
955:       assertEquals(1, Node.DECR_FLAG);
956:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
957:       assertEquals(49, Node.DIRECT_EVAL);
958:       assertEquals(55, Node.INFERRED_FUNCTION);
959:       assertEquals(4095, Node.COLUMN_MASK);
960:       assertEquals(12, Node.COLUMN_BITS);
961:       assertEquals(36, Node.QUOTED_PROP);
962:       assertEquals(48, Node.DIRECTIVES);
963:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
964:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
965:       assertEquals(37, Node.OPT_ARG_NAME);
966:       assertEquals(40, Node.ORIGINALNAME_PROP);
967:       assertEquals(50, Node.FREE_CALL);
968:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
969:       assertEquals(57, Node.REFLECTED_OBJECT);
970:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
971:       assertEquals(52, Node.LENGTH);
972:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
973:       assertEquals(8, Node.FLAG_NO_THROWS);
974:       assertEquals(15, Node.NO_SIDE_EFFECTS);
975:       assertEquals(57, Node.LAST_PROP);
976:       assertEquals(39, Node.EMPTY_BLOCK);
977:       assertEquals(43, Node.IS_CONSTANT_NAME);
978:       assertEquals(51, Node.STATIC_SOURCE_FILE);
979:       assertEquals(46, Node.IS_NAMESPACE);
980:       assertEquals(30, Node.VAR_ARGS_NAME);
981:       assertEquals(54, Node.SLASH_V);
982:       
983:       boolean boolean1 = node1.isLocalResultCall();
984:       assertFalse(node0.isGetterDef());
985:       assertFalse(node0.isDelProp());
986:       assertEquals(114, node0.getCharno());
987:       assertFalse(node0.isEmpty());
988:       assertFalse(node0.isIf());
989:       assertFalse(node0.isArrayLit());
990:       assertFalse(node0.isTry());
991:       assertFalse(node0.isFunction());
992:       assertFalse(node0.isFor());
993:       assertFalse(node0.isRegExp());
994:       assertFalse(node0.isDefaultCase());
995:       assertFalse(node0.isInc());
996:       assertFalse(node0.isCatch());
997:       assertFalse(node0.isVoid());
998:       assertFalse(node0.isIn());
999:       assertFalse(node0.isTrue());
1000:       assertFalse(node0.isNE());
1001:       assertFalse(node0.isNull());
1002:       assertFalse(node0.isInstanceOf());
1003:       assertEquals(0, node0.getChildCount());
1004:       assertFalse(node0.isThis());
1005:       assertFalse(node0.isVar());
1006:       assertFalse(node0.isBlock());
1007:       assertFalse(node0.isHook());
1008:       assertEquals(467058, node0.getSourcePosition());
1009:       assertFalse(node0.isSwitch());
1010:       assertEquals(114, node0.getLineno());
1011:       assertFalse(node0.isScript());
1012:       assertFalse(node0.isCase());
1013:       assertFalse(node0.isParamList());
1014:       assertFalse(node0.isStringKey());
1015:       assertFalse(node0.isLabelName());
1016:       assertFalse(node0.isDec());
1017:       assertFalse(node0.isAssign());
1018:       assertFalse(node0.isTypeOf());
1019:       assertFalse(node0.isNumber());
1020:       assertFalse(node0.isCast());
1021:       assertFalse(node0.hasOneChild());
1022:       assertFalse(node0.isGetElem());
1023:       assertFalse(node0.isReturn());
1024:       assertFalse(node0.hasMoreThanOneChild());
1025:       assertFalse(node0.isAssignAdd());
1026:       assertFalse(node0.isLabel());
1027:       assertFalse(node0.hasChildren());
1028:       assertFalse(node0.isWith());
1029:       assertFalse(node0.isExprResult());
1030:       assertFalse(node0.isNew());
1031:       assertFalse(node0.isAdd());
1032:       assertFalse(node0.isOr());
1033:       assertFalse(node0.isName());
1034:       assertFalse(node0.isFalse());
1035:       assertEquals(114, node0.getType());
1036:       assertFalse(node0.isCall());
1037:       assertFalse(node0.isBreak());
1038:       assertFalse(node0.isGetProp());
1039:       assertFalse(node0.isSetterDef());
1040:       assertFalse(node0.isComma());
1041:       assertFalse(node0.isThrow());
1042:       assertTrue(node0.isDo());
1043:       assertFalse(node0.isString());
1044:       assertFalse(node0.isWhile());
1045:       assertFalse(node0.isNot());
1046:       assertFalse(node0.isContinue());
1047:       assertFalse(node0.isAnd());
1048:       assertFalse(node0.isObjectLit());
1049:       assertFalse(node0.isDebugger());
1050:       assertFalse(node1.isHook());
1051:       assertFalse(node1.isFalse());
1052:       assertFalse(node1.isThrow());
1053:       assertTrue(node1.isDo());
1054:       assertFalse(node1.isString());
1055:       assertFalse(node1.isGetProp());
1056:       assertFalse(node1.isInc());
1057:       assertFalse(node1.isCase());
1058:       assertFalse(node1.isAnd());
1059:       assertFalse(node1.isNot());
1060:       assertFalse(node1.isObjectLit());
1061:       assertFalse(node1.isSwitch());
1062:       assertFalse(node1.isArrayLit());
1063:       assertFalse(node1.hasOneChild());
1064:       assertFalse(node1.isCast());
1065:       assertFalse(node1.isFor());
1066:       assertFalse(node1.isNumber());
1067:       assertFalse(node1.isScript());
1068:       assertFalse(node1.isGetterDef());
1069:       assertEquals(114, node1.getLineno());
1070:       assertFalse(node1.isTry());
1071:       assertFalse(node1.isInstanceOf());
1072:       assertFalse(node1.hasMoreThanOneChild());
1073:       assertFalse(node1.isCatch());
1074:       assertFalse(node1.isIn());
1075:       assertFalse(node1.isThis());
1076:       assertFalse(node1.isRegExp());
1077:       assertFalse(node1.isWith());
1078:       assertFalse(node1.isNE());
1079:       assertFalse(node1.isIf());
1080:       assertFalse(node1.isVar());
1081:       assertFalse(node1.isBlock());
1082:       assertFalse(node1.isStringKey());
1083:       assertEquals(467058, node1.getSourcePosition());
1084:       assertEquals(114, node1.getType());
1085:       assertFalse(node1.isWhile());
1086:       assertFalse(node1.isNew());
1087:       assertFalse(node1.isAdd());
1088:       assertFalse(node1.isSetterDef());
1089:       assertEquals(0, node1.getChildCount());
1090:       assertFalse(node1.isContinue());
1091:       assertFalse(node1.isAssignAdd());
1092:       assertFalse(node1.isLabel());
1093:       assertFalse(node1.isParamList());
1094:       assertFalse(node1.isFunction());
1095:       assertFalse(node1.isLabelName());
1096:       assertFalse(node1.isAssign());
1097:       assertFalse(node1.isTrue());
1098:       assertFalse(node1.isDebugger());
1099:       assertFalse(node1.hasChildren());
1100:       assertFalse(node1.isDefaultCase());
1101:       assertEquals(114, node1.getCharno());
1102:       assertFalse(node1.isEmpty());
1103:       assertFalse(node1.isComma());
1104:       assertFalse(node1.isReturn());
1105:       assertFalse(node1.isOr());
1106:       assertFalse(node1.isDec());
1107:       assertFalse(node1.isTypeOf());
1108:       assertFalse(node1.isDelProp());
1109:       assertFalse(node1.isNull());
1110:       assertFalse(node1.isGetElem());
1111:       assertFalse(node1.isExprResult());
1112:       assertFalse(node1.isCall());
1113:       assertFalse(node1.isName());
1114:       assertFalse(node1.isVoid());
1115:       assertFalse(node1.isBreak());
1116:       assertSame(node0, node1);
1117:       assertSame(node1, node0);
1118:       assertFalse(boolean1);
1119:       assertTrue(boolean1 == boolean0);
1120:       assertEquals(48, Node.DIRECTIVES);
1121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1122:       assertEquals(8, Node.FLAG_NO_THROWS);
1123:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1124:       assertEquals(39, Node.EMPTY_BLOCK);
1125:       assertEquals(40, Node.ORIGINALNAME_PROP);
1126:       assertEquals(4095, Node.COLUMN_MASK);
1127:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1128:       assertEquals(54, Node.SLASH_V);
1129:       assertEquals(43, Node.IS_CONSTANT_NAME);
1130:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1131:       assertEquals(50, Node.FREE_CALL);
1132:       assertEquals(46, Node.IS_NAMESPACE);
1133:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1134:       assertEquals(37, Node.OPT_ARG_NAME);
1135:       assertEquals(2, Node.POST_FLAG);
1136:       assertEquals(32, Node.INCRDECR_PROP);
1137:       assertEquals(29, Node.JSDOC_INFO_PROP);
1138:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1139:       assertEquals(1, Node.DECR_FLAG);
1140:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1141:       assertEquals(30, Node.VAR_ARGS_NAME);
1142:       assertEquals(12, Node.COLUMN_BITS);
1143:       assertEquals(47, Node.IS_DISPATCHER);
1144:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1145:       assertEquals(52, Node.LENGTH);
1146:       assertEquals(57, Node.LAST_PROP);
1147:       assertEquals(49, Node.DIRECT_EVAL);
1148:       assertEquals(53, Node.INPUT_ID);
1149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1150:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1151:       assertEquals(55, Node.INFERRED_FUNCTION);
1152:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1153:       assertEquals(56, Node.CHANGE_TIME);
1154:       assertEquals(36, Node.QUOTED_PROP);
1155:       assertEquals(57, Node.REFLECTED_OBJECT);
1156:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1157:       assertEquals(29, Node.JSDOC_INFO_PROP);
1158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1159:       assertEquals(56, Node.CHANGE_TIME);
1160:       assertEquals(47, Node.IS_DISPATCHER);
1161:       assertEquals(2, Node.POST_FLAG);
1162:       assertEquals(53, Node.INPUT_ID);
1163:       assertEquals(32, Node.INCRDECR_PROP);
1164:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1165:       assertEquals(1, Node.DECR_FLAG);
1166:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1167:       assertEquals(49, Node.DIRECT_EVAL);
1168:       assertEquals(55, Node.INFERRED_FUNCTION);
1169:       assertEquals(4095, Node.COLUMN_MASK);
1170:       assertEquals(12, Node.COLUMN_BITS);
1171:       assertEquals(36, Node.QUOTED_PROP);
1172:       assertEquals(48, Node.DIRECTIVES);
1173:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1174:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1175:       assertEquals(37, Node.OPT_ARG_NAME);
1176:       assertEquals(40, Node.ORIGINALNAME_PROP);
1177:       assertEquals(50, Node.FREE_CALL);
1178:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1179:       assertEquals(57, Node.REFLECTED_OBJECT);
1180:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1181:       assertEquals(52, Node.LENGTH);
1182:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1183:       assertEquals(8, Node.FLAG_NO_THROWS);
1184:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1185:       assertEquals(57, Node.LAST_PROP);
1186:       assertEquals(39, Node.EMPTY_BLOCK);
1187:       assertEquals(43, Node.IS_CONSTANT_NAME);
1188:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1189:       assertEquals(46, Node.IS_NAMESPACE);
1190:       assertEquals(30, Node.VAR_ARGS_NAME);
1191:       assertEquals(54, Node.SLASH_V);
1192:       
1193:       Node node2 = new Node(40, node1, node1, node1, node0, 4555, 40);
1194:       assertFalse(node0.isGetterDef());
1195:       assertFalse(node0.isDelProp());
1196:       assertEquals(114, node0.getCharno());
1197:       assertFalse(node0.isEmpty());
1198:       assertFalse(node0.isIf());
1199:       assertFalse(node0.isArrayLit());
1200:       assertFalse(node0.isTry());
1201:       assertFalse(node0.isFunction());
1202:       assertFalse(node0.isFor());
1203:       assertFalse(node0.isRegExp());
1204:       assertFalse(node0.isDefaultCase());
1205:       assertFalse(node0.isInc());
1206:       assertFalse(node0.isCatch());
1207:       assertFalse(node0.isVoid());
1208:       assertFalse(node0.isIn());
1209:       assertFalse(node0.isTrue());
1210:       assertFalse(node0.isNE());
1211:       assertFalse(node0.isNull());
1212:       assertFalse(node0.isInstanceOf());
1213:       assertEquals(0, node0.getChildCount());
1214:       assertFalse(node0.isThis());
1215:       assertFalse(node0.isVar());
1216:       assertFalse(node0.isBlock());
1217:       assertFalse(node0.isHook());
1218:       assertEquals(467058, node0.getSourcePosition());
1219:       assertFalse(node0.isSwitch());
1220:       assertEquals(114, node0.getLineno());
1221:       assertFalse(node0.isScript());
1222:       assertFalse(node0.isCase());
1223:       assertFalse(node0.isParamList());
1224:       assertFalse(node0.isStringKey());
1225:       assertFalse(node0.isLabelName());
1226:       assertFalse(node0.isDec());
1227:       assertFalse(node0.isAssign());
1228:       assertFalse(node0.isTypeOf());
1229:       assertFalse(node0.isNumber());
1230:       assertFalse(node0.isCast());
1231:       assertFalse(node0.hasOneChild());
1232:       assertFalse(node0.isGetElem());
1233:       assertFalse(node0.isReturn());
1234:       assertFalse(node0.hasMoreThanOneChild());
1235:       assertFalse(node0.isAssignAdd());
1236:       assertFalse(node0.isLabel());
1237:       assertFalse(node0.hasChildren());
1238:       assertFalse(node0.isWith());
1239:       assertFalse(node0.isExprResult());
1240:       assertFalse(node0.isNew());
1241:       assertFalse(node0.isAdd());
1242:       assertFalse(node0.isOr());
1243:       assertFalse(node0.isName());
1244:       assertFalse(node0.isFalse());
1245:       assertEquals(114, node0.getType());
1246:       assertFalse(node0.isCall());
1247:       assertFalse(node0.isBreak());
1248:       assertFalse(node0.isGetProp());
1249:       assertFalse(node0.isSetterDef());
1250:       assertFalse(node0.isComma());
1251:       assertFalse(node0.isThrow());
1252:       assertTrue(node0.isDo());
1253:       assertFalse(node0.isString());
1254:       assertFalse(node0.isWhile());
1255:       assertFalse(node0.isNot());
1256:       assertFalse(node0.isContinue());
1257:       assertFalse(node0.isAnd());
1258:       assertFalse(node0.isObjectLit());
1259:       assertFalse(node0.isDebugger());
1260:       assertFalse(node1.isHook());
1261:       assertFalse(node1.isFalse());
1262:       assertFalse(node1.isThrow());
1263:       assertTrue(node1.isDo());
1264:       assertFalse(node1.isString());
1265:       assertFalse(node1.isGetProp());
1266:       assertFalse(node1.isInc());
1267:       assertFalse(node1.isCase());
1268:       assertFalse(node1.isAnd());
1269:       assertFalse(node1.isNot());
1270:       assertFalse(node1.isObjectLit());
1271:       assertFalse(node1.isSwitch());
1272:       assertFalse(node1.isArrayLit());
1273:       assertFalse(node1.hasOneChild());
1274:       assertFalse(node1.isCast());
1275:       assertFalse(node1.isFor());
1276:       assertFalse(node1.isNumber());
1277:       assertFalse(node1.isScript());
1278:       assertFalse(node1.isGetterDef());
1279:       assertEquals(114, node1.getLineno());
1280:       assertFalse(node1.isTry());
1281:       assertFalse(node1.isInstanceOf());
1282:       assertFalse(node1.hasMoreThanOneChild());
1283:       assertFalse(node1.isCatch());
1284:       assertFalse(node1.isIn());
1285:       assertFalse(node1.isThis());
1286:       assertFalse(node1.isRegExp());
1287:       assertFalse(node1.isWith());
1288:       assertFalse(node1.isNE());
1289:       assertFalse(node1.isIf());
1290:       assertFalse(node1.isVar());
1291:       assertFalse(node1.isBlock());
1292:       assertFalse(node1.isStringKey());
1293:       assertEquals(467058, node1.getSourcePosition());
1294:       assertEquals(114, node1.getType());
1295:       assertFalse(node1.isWhile());
1296:       assertFalse(node1.isNew());
1297:       assertFalse(node1.isAdd());
1298:       assertFalse(node1.isSetterDef());
1299:       assertEquals(0, node1.getChildCount());
1300:       assertFalse(node1.isContinue());
1301:       assertFalse(node1.isAssignAdd());
1302:       assertFalse(node1.isLabel());
1303:       assertFalse(node1.isParamList());
1304:       assertFalse(node1.isFunction());
1305:       assertFalse(node1.isLabelName());
1306:       assertFalse(node1.isAssign());
1307:       assertFalse(node1.isTrue());
1308:       assertFalse(node1.isDebugger());
1309:       assertFalse(node1.hasChildren());
1310:       assertFalse(node1.isDefaultCase());
1311:       assertEquals(114, node1.getCharno());
1312:       assertFalse(node1.isEmpty());
1313:       assertFalse(node1.isComma());
1314:       assertFalse(node1.isReturn());
1315:       assertFalse(node1.isOr());
1316:       assertFalse(node1.isDec());
1317:       assertFalse(node1.isTypeOf());
1318:       assertFalse(node1.isDelProp());
1319:       assertFalse(node1.isNull());
1320:       assertFalse(node1.isGetElem());
1321:       assertFalse(node1.isExprResult());
1322:       assertFalse(node1.isCall());
1323:       assertFalse(node1.isName());
1324:       assertFalse(node1.isVoid());
1325:       assertFalse(node1.isBreak());
1326:       assertFalse(node2.isDefaultCase());
1327:       assertEquals(40, node2.getType());
1328:       assertFalse(node2.isTrue());
1329:       assertFalse(node2.isDebugger());
1330:       assertFalse(node2.isTry());
1331:       assertFalse(node2.isSetterDef());
1332:       assertFalse(node2.isStringKey());
1333:       assertFalse(node2.isGetterDef());
1334:       assertFalse(node2.isVar());
1335:       assertFalse(node2.isParamList());
1336:       assertFalse(node2.isFunction());
1337:       assertFalse(node2.isArrayLit());
1338:       assertEquals(40, node2.getCharno());
1339:       assertFalse(node2.isDo());
1340:       assertFalse(node2.isWhile());
1341:       assertFalse(node2.isReturn());
1342:       assertFalse(node2.isNew());
1343:       assertFalse(node2.isAssignAdd());
1344:       assertFalse(node2.isOr());
1345:       assertFalse(node2.isAdd());
1346:       assertFalse(node2.isEmpty());
1347:       assertFalse(node2.isGetElem());
1348:       assertFalse(node2.isAssign());
1349:       assertFalse(node2.isName());
1350:       assertFalse(node2.isDelProp());
1351:       assertEquals(4555, node2.getLineno());
1352:       assertFalse(node2.isDec());
1353:       assertTrue(node2.hasOneChild());
1354:       assertFalse(node2.isNull());
1355:       assertFalse(node2.isComma());
1356:       assertFalse(node2.isTypeOf());
1357:       assertFalse(node2.isVoid());
1358:       assertFalse(node2.isBreak());
1359:       assertFalse(node2.isExprResult());
1360:       assertFalse(node2.isCall());
1361:       assertFalse(node2.isAnd());
1362:       assertFalse(node2.isWith());
1363:       assertFalse(node2.isNot());
1364:       assertFalse(node2.isObjectLit());
1365:       assertFalse(node2.isGetProp());
1366:       assertFalse(node2.isScript());
1367:       assertFalse(node2.isFalse());
1368:       assertFalse(node2.isThrow());
1369:       assertEquals(18657320, node2.getSourcePosition());
1370:       assertFalse(node2.isLabelName());
1371:       assertFalse(node2.isLabel());
1372:       assertFalse(node2.isSwitch());
1373:       assertFalse(node2.isCast());
1374:       assertFalse(node2.isCase());
1375:       assertFalse(node2.isContinue());
1376:       assertFalse(node2.hasMoreThanOneChild());
1377:       assertEquals(1, node2.getChildCount());
1378:       assertTrue(node2.isString());
1379:       assertFalse(node2.isNumber());
1380:       assertFalse(node2.isIn());
1381:       assertFalse(node2.isInc());
1382:       assertFalse(node2.isHook());
1383:       assertFalse(node2.isIf());
1384:       assertFalse(node2.isThis());
1385:       assertFalse(node2.isNE());
1386:       assertFalse(node2.isBlock());
1387:       assertFalse(node2.isFor());
1388:       assertFalse(node2.isRegExp());
1389:       assertFalse(node2.isInstanceOf());
1390:       assertFalse(node2.isCatch());
1391:       assertTrue(node2.hasChildren());
1392:       assertFalse(node2.equals((Object)node0));
1393:       assertFalse(node2.equals((Object)node1));
1394:       assertNotNull(node2);
1395:       assertEquals(48, Node.DIRECTIVES);
1396:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1397:       assertEquals(8, Node.FLAG_NO_THROWS);
1398:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1399:       assertEquals(39, Node.EMPTY_BLOCK);
1400:       assertEquals(40, Node.ORIGINALNAME_PROP);
1401:       assertEquals(4095, Node.COLUMN_MASK);
1402:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1403:       assertEquals(54, Node.SLASH_V);
1404:       assertEquals(43, Node.IS_CONSTANT_NAME);
1405:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1406:       assertEquals(50, Node.FREE_CALL);
1407:       assertEquals(46, Node.IS_NAMESPACE);
1408:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1409:       assertEquals(37, Node.OPT_ARG_NAME);
1410:       assertEquals(2, Node.POST_FLAG);
1411:       assertEquals(32, Node.INCRDECR_PROP);
1412:       assertEquals(29, Node.JSDOC_INFO_PROP);
1413:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1414:       assertEquals(1, Node.DECR_FLAG);
1415:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1416:       assertEquals(30, Node.VAR_ARGS_NAME);
1417:       assertEquals(12, Node.COLUMN_BITS);
1418:       assertEquals(47, Node.IS_DISPATCHER);
1419:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1420:       assertEquals(52, Node.LENGTH);
1421:       assertEquals(57, Node.LAST_PROP);
1422:       assertEquals(49, Node.DIRECT_EVAL);
1423:       assertEquals(53, Node.INPUT_ID);
1424:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1425:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1426:       assertEquals(55, Node.INFERRED_FUNCTION);
1427:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1428:       assertEquals(56, Node.CHANGE_TIME);
1429:       assertEquals(36, Node.QUOTED_PROP);
1430:       assertEquals(57, Node.REFLECTED_OBJECT);
1431:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1432:       assertEquals(29, Node.JSDOC_INFO_PROP);
1433:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1434:       assertEquals(56, Node.CHANGE_TIME);
1435:       assertEquals(47, Node.IS_DISPATCHER);
1436:       assertEquals(2, Node.POST_FLAG);
1437:       assertEquals(53, Node.INPUT_ID);
1438:       assertEquals(32, Node.INCRDECR_PROP);
1439:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1440:       assertEquals(1, Node.DECR_FLAG);
1441:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1442:       assertEquals(49, Node.DIRECT_EVAL);
1443:       assertEquals(55, Node.INFERRED_FUNCTION);
1444:       assertEquals(4095, Node.COLUMN_MASK);
1445:       assertEquals(12, Node.COLUMN_BITS);
1446:       assertEquals(36, Node.QUOTED_PROP);
1447:       assertEquals(48, Node.DIRECTIVES);
1448:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1449:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1450:       assertEquals(37, Node.OPT_ARG_NAME);
1451:       assertEquals(40, Node.ORIGINALNAME_PROP);
1452:       assertEquals(50, Node.FREE_CALL);
1453:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1454:       assertEquals(57, Node.REFLECTED_OBJECT);
1455:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1456:       assertEquals(52, Node.LENGTH);
1457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1458:       assertEquals(8, Node.FLAG_NO_THROWS);
1459:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1460:       assertEquals(57, Node.LAST_PROP);
1461:       assertEquals(39, Node.EMPTY_BLOCK);
1462:       assertEquals(43, Node.IS_CONSTANT_NAME);
1463:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1464:       assertEquals(46, Node.IS_NAMESPACE);
1465:       assertEquals(30, Node.VAR_ARGS_NAME);
1466:       assertEquals(54, Node.SLASH_V);
1467:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1468:       assertEquals(57, Node.LAST_PROP);
1469:       assertEquals(30, Node.VAR_ARGS_NAME);
1470:       assertEquals(49, Node.DIRECT_EVAL);
1471:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1472:       assertEquals(12, Node.COLUMN_BITS);
1473:       assertEquals(54, Node.SLASH_V);
1474:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1475:       assertEquals(57, Node.REFLECTED_OBJECT);
1476:       assertEquals(52, Node.LENGTH);
1477:       assertEquals(32, Node.INCRDECR_PROP);
1478:       assertEquals(1, Node.DECR_FLAG);
1479:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1480:       assertEquals(56, Node.CHANGE_TIME);
1481:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1482:       assertEquals(8, Node.FLAG_NO_THROWS);
1483:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1484:       assertEquals(4095, Node.COLUMN_MASK);
1485:       assertEquals(48, Node.DIRECTIVES);
1486:       assertEquals(37, Node.OPT_ARG_NAME);
1487:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1488:       assertEquals(43, Node.IS_CONSTANT_NAME);
1489:       assertEquals(36, Node.QUOTED_PROP);
1490:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1491:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1492:       assertEquals(55, Node.INFERRED_FUNCTION);
1493:       assertEquals(39, Node.EMPTY_BLOCK);
1494:       assertEquals(29, Node.JSDOC_INFO_PROP);
1495:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1496:       assertEquals(53, Node.INPUT_ID);
1497:       assertEquals(47, Node.IS_DISPATCHER);
1498:       assertEquals(2, Node.POST_FLAG);
1499:       assertEquals(50, Node.FREE_CALL);
1500:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1501:       assertEquals(46, Node.IS_NAMESPACE);
1502:       assertEquals(40, Node.ORIGINALNAME_PROP);
1503:       
1504:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
1505:       assertEquals(30, node_SideEffectFlags0.valueOf());
1506:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1507:       assertNotNull(node_SideEffectFlags0);
1508:       
1509:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
1510:       assertEquals(31, node_SideEffectFlags0.valueOf());
1511:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1512:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1513:       assertEquals(31, node_SideEffectFlags1.valueOf());
1514:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1515:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1516:       assertNotNull(node_SideEffectFlags1);
1517:       
1518:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
1519:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1520:       assertEquals(23, node_SideEffectFlags0.valueOf());
1521:       assertEquals(23, node_SideEffectFlags2.valueOf());
1522:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1523:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1524:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1525:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1526:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1527:       assertNotNull(node_SideEffectFlags2);
1528:       
1529:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
1530:       assertEquals(16, node_SideEffectFlags0.valueOf());
1531:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1532:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1533:       assertEquals(16, node_SideEffectFlags3.valueOf());
1534:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1535:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1536:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1537:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1538:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1539:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1540:       assertNotNull(node_SideEffectFlags3);
1541:       
1542:       boolean boolean2 = node1.isEquivalentTo(node0, false, false, false);
1543:       assertFalse(node0.isGetterDef());
1544:       assertFalse(node0.isDelProp());
1545:       assertEquals(114, node0.getCharno());
1546:       assertFalse(node0.isEmpty());
1547:       assertFalse(node0.isIf());
1548:       assertFalse(node0.isArrayLit());
1549:       assertFalse(node0.isTry());
1550:       assertFalse(node0.isFunction());
1551:       assertFalse(node0.isFor());
1552:       assertFalse(node0.isRegExp());
1553:       assertFalse(node0.isDefaultCase());
1554:       assertFalse(node0.isInc());
1555:       assertFalse(node0.isCatch());
1556:       assertFalse(node0.isVoid());
1557:       assertFalse(node0.isIn());
1558:       assertFalse(node0.isTrue());
1559:       assertFalse(node0.isNE());
1560:       assertFalse(node0.isNull());
1561:       assertFalse(node0.isInstanceOf());
1562:       assertEquals(0, node0.getChildCount());
1563:       assertFalse(node0.isThis());
1564:       assertFalse(node0.isVar());
1565:       assertFalse(node0.isBlock());
1566:       assertFalse(node0.isHook());
1567:       assertEquals(467058, node0.getSourcePosition());
1568:       assertFalse(node0.isSwitch());
1569:       assertEquals(114, node0.getLineno());
1570:       assertFalse(node0.isScript());
1571:       assertFalse(node0.isCase());
1572:       assertFalse(node0.isParamList());
1573:       assertFalse(node0.isStringKey());
1574:       assertFalse(node0.isLabelName());
1575:       assertFalse(node0.isDec());
1576:       assertFalse(node0.isAssign());
1577:       assertFalse(node0.isTypeOf());
1578:       assertFalse(node0.isNumber());
1579:       assertFalse(node0.isCast());
1580:       assertFalse(node0.hasOneChild());
1581:       assertFalse(node0.isGetElem());
1582:       assertFalse(node0.isReturn());
1583:       assertFalse(node0.hasMoreThanOneChild());
1584:       assertFalse(node0.isAssignAdd());
1585:       assertFalse(node0.isLabel());
1586:       assertFalse(node0.hasChildren());
1587:       assertFalse(node0.isWith());
1588:       assertFalse(node0.isExprResult());
1589:       assertFalse(node0.isNew());
1590:       assertFalse(node0.isAdd());
1591:       assertFalse(node0.isOr());
1592:       assertFalse(node0.isName());
1593:       assertFalse(node0.isFalse());
1594:       assertEquals(114, node0.getType());
1595:       assertFalse(node0.isCall());
1596:       assertFalse(node0.isBreak());
1597:       assertFalse(node0.isGetProp());
1598:       assertFalse(node0.isSetterDef());
1599:       assertFalse(node0.isComma());
1600:       assertFalse(node0.isThrow());
1601:       assertTrue(node0.isDo());
1602:       assertFalse(node0.isString());
1603:       assertFalse(node0.isWhile());
1604:       assertFalse(node0.isNot());
1605:       assertFalse(node0.isContinue());
1606:       assertFalse(node0.isAnd());
1607:       assertFalse(node0.isObjectLit());
1608:       assertFalse(node0.isDebugger());
1609:       assertFalse(node1.isHook());
1610:       assertFalse(node1.isFalse());
1611:       assertFalse(node1.isThrow());
1612:       assertTrue(node1.isDo());
1613:       assertFalse(node1.isString());
1614:       assertFalse(node1.isGetProp());
1615:       assertFalse(node1.isInc());
1616:       assertFalse(node1.isCase());
1617:       assertFalse(node1.isAnd());
1618:       assertFalse(node1.isNot());
1619:       assertFalse(node1.isObjectLit());
1620:       assertFalse(node1.isSwitch());
1621:       assertFalse(node1.isArrayLit());
1622:       assertFalse(node1.hasOneChild());
1623:       assertFalse(node1.isCast());
1624:       assertFalse(node1.isFor());
1625:       assertFalse(node1.isNumber());
1626:       assertFalse(node1.isScript());
1627:       assertFalse(node1.isGetterDef());
1628:       assertEquals(114, node1.getLineno());
1629:       assertFalse(node1.isTry());
1630:       assertFalse(node1.isInstanceOf());
1631:       assertFalse(node1.hasMoreThanOneChild());
1632:       assertFalse(node1.isCatch());
1633:       assertFalse(node1.isIn());
1634:       assertFalse(node1.isThis());
1635:       assertFalse(node1.isRegExp());
1636:       assertFalse(node1.isWith());
1637:       assertFalse(node1.isNE());
1638:       assertFalse(node1.isIf());
1639:       assertFalse(node1.isVar());
1640:       assertFalse(node1.isBlock());
1641:       assertFalse(node1.isStringKey());
1642:       assertEquals(467058, node1.getSourcePosition());
1643:       assertEquals(114, node1.getType());
1644:       assertFalse(node1.isWhile());
1645:       assertFalse(node1.isNew());
1646:       assertFalse(node1.isAdd());
1647:       assertFalse(node1.isSetterDef());
1648:       assertEquals(0, node1.getChildCount());
1649:       assertFalse(node1.isContinue());
1650:       assertFalse(node1.isAssignAdd());
1651:       assertFalse(node1.isLabel());
1652:       assertFalse(node1.isParamList());
1653:       assertFalse(node1.isFunction());
1654:       assertFalse(node1.isLabelName());
1655:       assertFalse(node1.isAssign());
1656:       assertFalse(node1.isTrue());
1657:       assertFalse(node1.isDebugger());
1658:       assertFalse(node1.hasChildren());
1659:       assertFalse(node1.isDefaultCase());
1660:       assertEquals(114, node1.getCharno());
1661:       assertFalse(node1.isEmpty());
1662:       assertFalse(node1.isComma());
1663:       assertFalse(node1.isReturn());
1664:       assertFalse(node1.isOr());
1665:       assertFalse(node1.isDec());
1666:       assertFalse(node1.isTypeOf());
1667:       assertFalse(node1.isDelProp());
1668:       assertFalse(node1.isNull());
1669:       assertFalse(node1.isGetElem());
1670:       assertFalse(node1.isExprResult());
1671:       assertFalse(node1.isCall());
1672:       assertFalse(node1.isName());
1673:       assertFalse(node1.isVoid());
1674:       assertFalse(node1.isBreak());
1675:       assertNotSame(node0, node2);
1676:       assertSame(node0, node1);
1677:       assertSame(node1, node0);
1678:       assertNotSame(node1, node2);
1679:       assertTrue(boolean2);
1680:       assertFalse(boolean2 == boolean1);
1681:       assertFalse(boolean2 == boolean0);
1682:       assertFalse(node0.equals((Object)node2));
1683:       assertFalse(node1.equals((Object)node2));
1684:       assertEquals(48, Node.DIRECTIVES);
1685:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1686:       assertEquals(8, Node.FLAG_NO_THROWS);
1687:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1688:       assertEquals(39, Node.EMPTY_BLOCK);
1689:       assertEquals(40, Node.ORIGINALNAME_PROP);
1690:       assertEquals(4095, Node.COLUMN_MASK);
1691:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1692:       assertEquals(54, Node.SLASH_V);
1693:       assertEquals(43, Node.IS_CONSTANT_NAME);
1694:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1695:       assertEquals(50, Node.FREE_CALL);
1696:       assertEquals(46, Node.IS_NAMESPACE);
1697:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1698:       assertEquals(37, Node.OPT_ARG_NAME);
1699:       assertEquals(2, Node.POST_FLAG);
1700:       assertEquals(32, Node.INCRDECR_PROP);
1701:       assertEquals(29, Node.JSDOC_INFO_PROP);
1702:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1703:       assertEquals(1, Node.DECR_FLAG);
1704:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1705:       assertEquals(30, Node.VAR_ARGS_NAME);
1706:       assertEquals(12, Node.COLUMN_BITS);
1707:       assertEquals(47, Node.IS_DISPATCHER);
1708:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1709:       assertEquals(52, Node.LENGTH);
1710:       assertEquals(57, Node.LAST_PROP);
1711:       assertEquals(49, Node.DIRECT_EVAL);
1712:       assertEquals(53, Node.INPUT_ID);
1713:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1714:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1715:       assertEquals(55, Node.INFERRED_FUNCTION);
1716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1717:       assertEquals(56, Node.CHANGE_TIME);
1718:       assertEquals(36, Node.QUOTED_PROP);
1719:       assertEquals(57, Node.REFLECTED_OBJECT);
1720:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1721:       assertEquals(29, Node.JSDOC_INFO_PROP);
1722:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1723:       assertEquals(56, Node.CHANGE_TIME);
1724:       assertEquals(47, Node.IS_DISPATCHER);
1725:       assertEquals(2, Node.POST_FLAG);
1726:       assertEquals(53, Node.INPUT_ID);
1727:       assertEquals(32, Node.INCRDECR_PROP);
1728:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1729:       assertEquals(1, Node.DECR_FLAG);
1730:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1731:       assertEquals(49, Node.DIRECT_EVAL);
1732:       assertEquals(55, Node.INFERRED_FUNCTION);
1733:       assertEquals(4095, Node.COLUMN_MASK);
1734:       assertEquals(12, Node.COLUMN_BITS);
1735:       assertEquals(36, Node.QUOTED_PROP);
1736:       assertEquals(48, Node.DIRECTIVES);
1737:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1738:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1739:       assertEquals(37, Node.OPT_ARG_NAME);
1740:       assertEquals(40, Node.ORIGINALNAME_PROP);
1741:       assertEquals(50, Node.FREE_CALL);
1742:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1743:       assertEquals(57, Node.REFLECTED_OBJECT);
1744:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1745:       assertEquals(52, Node.LENGTH);
1746:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1747:       assertEquals(8, Node.FLAG_NO_THROWS);
1748:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1749:       assertEquals(57, Node.LAST_PROP);
1750:       assertEquals(39, Node.EMPTY_BLOCK);
1751:       assertEquals(43, Node.IS_CONSTANT_NAME);
1752:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1753:       assertEquals(46, Node.IS_NAMESPACE);
1754:       assertEquals(30, Node.VAR_ARGS_NAME);
1755:       assertEquals(54, Node.SLASH_V);
1756:       
1757:       int int0 = Node.mergeLineCharNo((-2104), 55);
1758:       assertEquals((-1), int0);
1759:       
1760:       boolean boolean3 = node1.isNot();
1761:       assertFalse(node0.isGetterDef());
1762:       assertFalse(node0.isDelProp());
1763:       assertEquals(114, node0.getCharno());
1764:       assertFalse(node0.isEmpty());
1765:       assertFalse(node0.isIf());
1766:       assertFalse(node0.isArrayLit());
1767:       assertFalse(node0.isTry());
1768:       assertFalse(node0.isFunction());
1769:       assertFalse(node0.isFor());
1770:       assertFalse(node0.isRegExp());
1771:       assertFalse(node0.isDefaultCase());
1772:       assertFalse(node0.isInc());
1773:       assertFalse(node0.isCatch());
1774:       assertFalse(node0.isVoid());
1775:       assertFalse(node0.isIn());
1776:       assertFalse(node0.isTrue());
1777:       assertFalse(node0.isNE());
1778:       assertFalse(node0.isNull());
1779:       assertFalse(node0.isInstanceOf());
1780:       assertEquals(0, node0.getChildCount());
1781:       assertFalse(node0.isThis());
1782:       assertFalse(node0.isVar());
1783:       assertFalse(node0.isBlock());
1784:       assertFalse(node0.isHook());
1785:       assertEquals(467058, node0.getSourcePosition());
1786:       assertFalse(node0.isSwitch());
1787:       assertEquals(114, node0.getLineno());
1788:       assertFalse(node0.isScript());
1789:       assertFalse(node0.isCase());
1790:       assertFalse(node0.isParamList());
1791:       assertFalse(node0.isStringKey());
1792:       assertFalse(node0.isLabelName());
1793:       assertFalse(node0.isDec());
1794:       assertFalse(node0.isAssign());
1795:       assertFalse(node0.isTypeOf());
1796:       assertFalse(node0.isNumber());
1797:       assertFalse(node0.isCast());
1798:       assertFalse(node0.hasOneChild());
1799:       assertFalse(node0.isGetElem());
1800:       assertFalse(node0.isReturn());
1801:       assertFalse(node0.hasMoreThanOneChild());
1802:       assertFalse(node0.isAssignAdd());
1803:       assertFalse(node0.isLabel());
1804:       assertFalse(node0.hasChildren());
1805:       assertFalse(node0.isWith());
1806:       assertFalse(node0.isExprResult());
1807:       assertFalse(node0.isNew());
1808:       assertFalse(node0.isAdd());
1809:       assertFalse(node0.isOr());
1810:       assertFalse(node0.isName());
1811:       assertFalse(node0.isFalse());
1812:       assertEquals(114, node0.getType());
1813:       assertFalse(node0.isCall());
1814:       assertFalse(node0.isBreak());
1815:       assertFalse(node0.isGetProp());
1816:       assertFalse(node0.isSetterDef());
1817:       assertFalse(node0.isComma());
1818:       assertFalse(node0.isThrow());
1819:       assertTrue(node0.isDo());
1820:       assertFalse(node0.isString());
1821:       assertFalse(node0.isWhile());
1822:       assertFalse(node0.isNot());
1823:       assertFalse(node0.isContinue());
1824:       assertFalse(node0.isAnd());
1825:       assertFalse(node0.isObjectLit());
1826:       assertFalse(node0.isDebugger());
1827:       assertFalse(node1.isHook());
1828:       assertFalse(node1.isFalse());
1829:       assertFalse(node1.isThrow());
1830:       assertTrue(node1.isDo());
1831:       assertFalse(node1.isString());
1832:       assertFalse(node1.isGetProp());
1833:       assertFalse(node1.isInc());
1834:       assertFalse(node1.isCase());
1835:       assertFalse(node1.isAnd());
1836:       assertFalse(node1.isNot());
1837:       assertFalse(node1.isObjectLit());
1838:       assertFalse(node1.isSwitch());
1839:       assertFalse(node1.isArrayLit());
1840:       assertFalse(node1.hasOneChild());
1841:       assertFalse(node1.isCast());
1842:       assertFalse(node1.isFor());
1843:       assertFalse(node1.isNumber());
1844:       assertFalse(node1.isScript());
1845:       assertFalse(node1.isGetterDef());
1846:       assertEquals(114, node1.getLineno());
1847:       assertFalse(node1.isTry());
1848:       assertFalse(node1.isInstanceOf());
1849:       assertFalse(node1.hasMoreThanOneChild());
1850:       assertFalse(node1.isCatch());
1851:       assertFalse(node1.isIn());
1852:       assertFalse(node1.isThis());
1853:       assertFalse(node1.isRegExp());
1854:       assertFalse(node1.isWith());
1855:       assertFalse(node1.isNE());
1856:       assertFalse(node1.isIf());
1857:       assertFalse(node1.isVar());
1858:       assertFalse(node1.isBlock());
1859:       assertFalse(node1.isStringKey());
1860:       assertEquals(467058, node1.getSourcePosition());
1861:       assertEquals(114, node1.getType());
1862:       assertFalse(node1.isWhile());
1863:       assertFalse(node1.isNew());
1864:       assertFalse(node1.isAdd());
1865:       assertFalse(node1.isSetterDef());
1866:       assertEquals(0, node1.getChildCount());
1867:       assertFalse(node1.isContinue());
1868:       assertFalse(node1.isAssignAdd());
1869:       assertFalse(node1.isLabel());
1870:       assertFalse(node1.isParamList());
1871:       assertFalse(node1.isFunction());
1872:       assertFalse(node1.isLabelName());
1873:       assertFalse(node1.isAssign());
1874:       assertFalse(node1.isTrue());
1875:       assertFalse(node1.isDebugger());
1876:       assertFalse(node1.hasChildren());
1877:       assertFalse(node1.isDefaultCase());
1878:       assertEquals(114, node1.getCharno());
1879:       assertFalse(node1.isEmpty());
1880:       assertFalse(node1.isComma());
1881:       assertFalse(node1.isReturn());
1882:       assertFalse(node1.isOr());
1883:       assertFalse(node1.isDec());
1884:       assertFalse(node1.isTypeOf());
1885:       assertFalse(node1.isDelProp());
1886:       assertFalse(node1.isNull());
1887:       assertFalse(node1.isGetElem());
1888:       assertFalse(node1.isExprResult());
1889:       assertFalse(node1.isCall());
1890:       assertFalse(node1.isName());
1891:       assertFalse(node1.isVoid());
1892:       assertFalse(node1.isBreak());
1893:       assertNotSame(node0, node2);
1894:       assertSame(node0, node1);
1895:       assertSame(node1, node0);
1896:       assertNotSame(node1, node2);
1897:       assertFalse(boolean3);
1898:       assertFalse(node0.equals((Object)node2));
1899:       assertTrue(boolean3 == boolean0);
1900:       assertTrue(boolean3 == boolean1);
1901:       assertFalse(boolean3 == boolean2);
1902:       assertFalse(node1.equals((Object)node2));
1903:       assertEquals(48, Node.DIRECTIVES);
1904:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1905:       assertEquals(8, Node.FLAG_NO_THROWS);
1906:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1907:       assertEquals(39, Node.EMPTY_BLOCK);
1908:       assertEquals(40, Node.ORIGINALNAME_PROP);
1909:       assertEquals(4095, Node.COLUMN_MASK);
1910:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1911:       assertEquals(54, Node.SLASH_V);
1912:       assertEquals(43, Node.IS_CONSTANT_NAME);
1913:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1914:       assertEquals(50, Node.FREE_CALL);
1915:       assertEquals(46, Node.IS_NAMESPACE);
1916:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1917:       assertEquals(37, Node.OPT_ARG_NAME);
1918:       assertEquals(2, Node.POST_FLAG);
1919:       assertEquals(32, Node.INCRDECR_PROP);
1920:       assertEquals(29, Node.JSDOC_INFO_PROP);
1921:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1922:       assertEquals(1, Node.DECR_FLAG);
1923:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1924:       assertEquals(30, Node.VAR_ARGS_NAME);
1925:       assertEquals(12, Node.COLUMN_BITS);
1926:       assertEquals(47, Node.IS_DISPATCHER);
1927:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1928:       assertEquals(52, Node.LENGTH);
1929:       assertEquals(57, Node.LAST_PROP);
1930:       assertEquals(49, Node.DIRECT_EVAL);
1931:       assertEquals(53, Node.INPUT_ID);
1932:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1933:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1934:       assertEquals(55, Node.INFERRED_FUNCTION);
1935:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1936:       assertEquals(56, Node.CHANGE_TIME);
1937:       assertEquals(36, Node.QUOTED_PROP);
1938:       assertEquals(57, Node.REFLECTED_OBJECT);
1939:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1940:       assertEquals(29, Node.JSDOC_INFO_PROP);
1941:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1942:       assertEquals(56, Node.CHANGE_TIME);
1943:       assertEquals(47, Node.IS_DISPATCHER);
1944:       assertEquals(2, Node.POST_FLAG);
1945:       assertEquals(53, Node.INPUT_ID);
1946:       assertEquals(32, Node.INCRDECR_PROP);
1947:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1948:       assertEquals(1, Node.DECR_FLAG);
1949:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1950:       assertEquals(49, Node.DIRECT_EVAL);
1951:       assertEquals(55, Node.INFERRED_FUNCTION);
1952:       assertEquals(4095, Node.COLUMN_MASK);
1953:       assertEquals(12, Node.COLUMN_BITS);
1954:       assertEquals(36, Node.QUOTED_PROP);
1955:       assertEquals(48, Node.DIRECTIVES);
1956:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1957:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1958:       assertEquals(37, Node.OPT_ARG_NAME);
1959:       assertEquals(40, Node.ORIGINALNAME_PROP);
1960:       assertEquals(50, Node.FREE_CALL);
1961:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1962:       assertEquals(57, Node.REFLECTED_OBJECT);
1963:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1964:       assertEquals(52, Node.LENGTH);
1965:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1966:       assertEquals(8, Node.FLAG_NO_THROWS);
1967:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1968:       assertEquals(57, Node.LAST_PROP);
1969:       assertEquals(39, Node.EMPTY_BLOCK);
1970:       assertEquals(43, Node.IS_CONSTANT_NAME);
1971:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1972:       assertEquals(46, Node.IS_NAMESPACE);
1973:       assertEquals(30, Node.VAR_ARGS_NAME);
1974:       assertEquals(54, Node.SLASH_V);
1975:   }
1976: }
RegularFileObject[/tmp/EvoSuite_198_1628161084621/com/google/javascript/rhino/Node_198_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:58:04 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_198_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_198_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_198_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Iterables",
341:       "com.google.javascript.rhino.Node$AncestorIterable$1",
342:       "com.google.javascript.rhino.jstype.TemplatizedType",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.common.collect.AbstractMultimap$Values",
345:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
346:       "com.google.common.collect.AbstractMapBasedMultimap$1",
347:       "com.google.common.collect.Multimaps$Entries",
348:       "com.google.common.collect.AbstractMultimap$Entries",
349:       "com.google.common.collect.AbstractMapBasedMultimap$2",
350:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.jstype.TernaryValue",
353:       "com.google.javascript.rhino.jstype.JSType$2",
354:       "com.google.javascript.rhino.jstype.JSType$TypePair",
355:       "com.google.common.collect.ImmutableSet",
356:       "com.google.common.collect.EmptyImmutableSet",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.common.collect.Platform",
362:       "com.google.javascript.rhino.JSTypeExpression",
363:       "com.google.common.collect.Sets$ImprovedAbstractSet",
364:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
365:       "com.google.common.collect.Hashing",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
367:       "com.google.common.collect.ImmutableList$1",
368:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
369:       "com.google.javascript.rhino.JSDocInfo$Marker"
370:     );
371:   }
372: }

[MASTER] 10:58:04.991 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(114, 114, 114);
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(114, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(467058, node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertEquals(114, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertEquals(114, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertNotNull(node0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);

JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(114, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(467058, node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertEquals(114, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertEquals(114, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertNull(jSDocInfo0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);

boolean boolean0 = node0.isIn();
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(114, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(467058, node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertEquals(114, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertEquals(114, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(boolean0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("c9");
assertNotNull(mockFileOutputStream0);

FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
assertTrue(fileChannel0.isOpen());
assertEquals(0L, fileChannel0.size());
assertEquals(0L, fileChannel0.position());
assertNotNull(fileChannel0);

DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
assertNotNull(dataOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
assertNotNull(mockPrintWriter0);

Node node1 = node0.getLastSibling();
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(114, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(467058, node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertEquals(114, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertEquals(114, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertEquals(114, node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertEquals(467058, node1.getSourcePosition());
assertEquals(114, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isDefaultCase());
assertEquals(114, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(114, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(467058, node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertEquals(114, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertEquals(114, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertEquals(114, node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertEquals(467058, node1.getSourcePosition());
assertEquals(114, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isDefaultCase());
assertEquals(114, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(114, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(467058, node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertEquals(114, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertEquals(114, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertEquals(114, node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertEquals(467058, node1.getSourcePosition());
assertEquals(114, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isDefaultCase());
assertEquals(114, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(iterable0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);

boolean boolean1 = node1.isLocalResultCall();
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(114, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(467058, node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertEquals(114, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertEquals(114, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertEquals(114, node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertEquals(467058, node1.getSourcePosition());
assertEquals(114, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isDefaultCase());
assertEquals(114, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertSame(node0, node1);
assertSame(node1, node0);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);

Node node2 = new Node(40, node1, node1, node1, node0, 4555, 40);
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(114, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(467058, node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertEquals(114, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertEquals(114, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertEquals(114, node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertEquals(467058, node1.getSourcePosition());
assertEquals(114, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isDefaultCase());
assertEquals(114, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertFalse(node2.isVar());
assertFalse(node2.isParamList());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertEquals(40, node2.getCharno());
assertFalse(node2.isDo());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertEquals(4555, node2.getLineno());
assertFalse(node2.isDec());
assertTrue(node2.hasOneChild());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isTypeOf());
assertFalse(node2.isVoid());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isAnd());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isScript());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals(18657320, node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isCast());
assertFalse(node2.isCase());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(1, node2.getChildCount());
assertTrue(node2.isString());
assertFalse(node2.isNumber());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertFalse(node2.isIf());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotNull(node2);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
assertEquals(30, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(23, node_SideEffectFlags0.valueOf());
assertEquals(23, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
assertEquals(16, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(16, node_SideEffectFlags3.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags3);

boolean boolean2 = node1.isEquivalentTo(node0, false, false, false);
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(114, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(467058, node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertEquals(114, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertEquals(114, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertEquals(114, node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertEquals(467058, node1.getSourcePosition());
assertEquals(114, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isDefaultCase());
assertEquals(114, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertNotSame(node0, node2);
assertSame(node0, node1);
assertSame(node1, node0);
assertNotSame(node1, node2);
assertTrue(boolean2);
assertFalse(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);

int int0 = Node.mergeLineCharNo((-2104), 55);
assertEquals((-1), int0);

boolean boolean3 = node1.isNot();
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals(114, node0.getCharno());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isThis());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals(467058, node0.getSourcePosition());
assertFalse(node0.isSwitch());
assertEquals(114, node0.getLineno());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isFalse());
assertEquals(114, node0.getType());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertTrue(node0.isDo());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertTrue(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertEquals(114, node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertEquals(467058, node1.getSourcePosition());
assertEquals(114, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isContinue());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isFunction());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.hasChildren());
assertFalse(node1.isDefaultCase());
assertEquals(114, node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertNotSame(node0, node2);
assertSame(node0, node1);
assertSame(node1, node0);
assertNotSame(node1, node2);
assertFalse(boolean3);
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean2);
assertFalse(node1.equals((Object)node2));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);


[MASTER] 10:58:27.709 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/24
* Done!

* Computation finished
