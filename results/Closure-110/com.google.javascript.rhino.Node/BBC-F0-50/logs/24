* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 19927
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1333834736
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:49:08.285 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:49:11.412 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:49:12.065 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 17:49:12.066 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 17:49:12.153 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 17:49:13.642 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V
[MASTER] 17:49:13.769 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false
[MASTER] 17:49:13.824 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 622
* Search finished after 605s and 404 generations, 201520 statements, best individual has fitness: 2977.0
* Minimizing test suite
[MASTER] 18:00:27.182 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 800
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 612
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 469
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 4536
* Number of covered goals: 2096
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 714
* Number of covered goals: 564
* Generated 705 tests with total length 10853
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:01:35.362 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.68905% of time used, but only 48/705 tests minimized), falling back to using all assertions
[MASTER] 18:01:54.097 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 18:02:05.191 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 18:02:08.173 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_49_1629223327672/com/google/javascript/rhino/Node_49_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_49_1629223327672/com/google/javascript/rhino/Node_49_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:08.174 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:08.174 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:08.224 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 377
[MASTER] 18:02:08.226 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_49_1629223327672/com/google/javascript/rhino/Node_49_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:07 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_49_tmp__ESTest extends Node_49_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString("");
25:       assertEquals(15, Node.NO_SIDE_EFFECTS);
26:       assertEquals(57, Node.LAST_PROP);
27:       assertEquals(49, Node.DIRECT_EVAL);
28:       assertEquals(30, Node.VAR_ARGS_NAME);
29:       assertEquals(1, Node.DECR_FLAG);
30:       assertEquals(46, Node.IS_NAMESPACE);
31:       assertEquals(52, Node.LENGTH);
32:       assertEquals(57, Node.REFLECTED_OBJECT);
33:       assertEquals(51, Node.STATIC_SOURCE_FILE);
34:       assertEquals(54, Node.SLASH_V);
35:       assertEquals(56, Node.CHANGE_TIME);
36:       assertEquals(47, Node.IS_DISPATCHER);
37:       assertEquals(2, Node.POST_FLAG);
38:       assertEquals(40, Node.ORIGINALNAME_PROP);
39:       assertEquals(8, Node.FLAG_NO_THROWS);
40:       assertEquals(39, Node.EMPTY_BLOCK);
41:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
42:       assertEquals(29, Node.JSDOC_INFO_PROP);
43:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
44:       assertEquals(36, Node.QUOTED_PROP);
45:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
46:       assertEquals(4095, Node.COLUMN_MASK);
47:       assertEquals(53, Node.INPUT_ID);
48:       assertEquals(55, Node.INFERRED_FUNCTION);
49:       assertEquals(48, Node.DIRECTIVES);
50:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
51:       assertEquals(43, Node.IS_CONSTANT_NAME);
52:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
53:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
54:       assertEquals(50, Node.FREE_CALL);
55:       assertEquals(37, Node.OPT_ARG_NAME);
56:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
57:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
58:       assertEquals(32, Node.INCRDECR_PROP);
59:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
60:       assertEquals(12, Node.COLUMN_BITS);
61:       assertFalse(node0.isSetterDef());
62:       assertFalse(node0.isParamList());
63:       assertFalse(node0.isNull());
64:       assertEquals(0, node0.getChildCount());
65:       assertFalse(node0.isCatch());
66:       assertFalse(node0.isCall());
67:       assertFalse(node0.isStringKey());
68:       assertFalse(node0.isName());
69:       assertFalse(node0.isRegExp());
70:       assertFalse(node0.isVoid());
71:       assertFalse(node0.isBlock());
72:       assertFalse(node0.isDebugger());
73:       assertFalse(node0.hasMoreThanOneChild());
74:       assertFalse(node0.isWhile());
75:       assertFalse(node0.isReturn());
76:       assertFalse(node0.isFor());
77:       assertFalse(node0.isTry());
78:       assertTrue(node0.isString());
79:       assertFalse(node0.isTypeOf());
80:       assertFalse(node0.isDec());
81:       assertFalse(node0.hasChildren());
82:       assertFalse(node0.isLabel());
83:       assertFalse(node0.isGetterDef());
84:       assertFalse(node0.isEmpty());
85:       assertFalse(node0.isAssign());
86:       assertFalse(node0.isOr());
87:       assertFalse(node0.isNumber());
88:       assertFalse(node0.isGetElem());
89:       assertFalse(node0.isArrayLit());
90:       assertFalse(node0.isLabelName());
91:       assertFalse(node0.isDelProp());
92:       assertFalse(node0.isSwitch());
93:       assertFalse(node0.isTrue());
94:       assertFalse(node0.isNew());
95:       assertFalse(node0.isAdd());
96:       assertFalse(node0.isVar());
97:       assertFalse(node0.isDo());
98:       assertFalse(node0.isAssignAdd());
99:       assertFalse(node0.isDefaultCase());
100:       assertFalse(node0.isThis());
101:       assertFalse(node0.isComma());
102:       assertFalse(node0.isBreak());
103:       assertFalse(node0.isGetProp());
104:       assertFalse(node0.isInstanceOf());
105:       assertFalse(node0.isFalse());
106:       assertFalse(node0.isObjectLit());
107:       assertFalse(node0.isAnd());
108:       assertFalse(node0.isExprResult());
109:       assertFalse(node0.isScript());
110:       assertEquals((-1), node0.getCharno());
111:       assertFalse(node0.isWith());
112:       assertFalse(node0.isNot());
113:       assertFalse(node0.isHook());
114:       assertFalse(node0.isCase());
115:       assertFalse(node0.hasOneChild());
116:       assertFalse(node0.isNE());
117:       assertEquals((-1), node0.getSourcePosition());
118:       assertFalse(node0.isIn());
119:       assertFalse(node0.isCast());
120:       assertEquals((-1), node0.getLineno());
121:       assertFalse(node0.isIf());
122:       assertFalse(node0.isFunction());
123:       assertFalse(node0.isInc());
124:       assertFalse(node0.isContinue());
125:       assertFalse(node0.isThrow());
126:       assertEquals(40, node0.getType());
127:       assertNotNull(node0);
128:       
129:       boolean boolean0 = node0.mayMutateArguments();
130:       assertTrue(boolean0);
131:       assertEquals(15, Node.NO_SIDE_EFFECTS);
132:       assertEquals(57, Node.LAST_PROP);
133:       assertEquals(49, Node.DIRECT_EVAL);
134:       assertEquals(30, Node.VAR_ARGS_NAME);
135:       assertEquals(1, Node.DECR_FLAG);
136:       assertEquals(46, Node.IS_NAMESPACE);
137:       assertEquals(52, Node.LENGTH);
138:       assertEquals(57, Node.REFLECTED_OBJECT);
139:       assertEquals(51, Node.STATIC_SOURCE_FILE);
140:       assertEquals(54, Node.SLASH_V);
141:       assertEquals(56, Node.CHANGE_TIME);
142:       assertEquals(47, Node.IS_DISPATCHER);
143:       assertEquals(2, Node.POST_FLAG);
144:       assertEquals(40, Node.ORIGINALNAME_PROP);
145:       assertEquals(8, Node.FLAG_NO_THROWS);
146:       assertEquals(39, Node.EMPTY_BLOCK);
147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
148:       assertEquals(29, Node.JSDOC_INFO_PROP);
149:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
150:       assertEquals(36, Node.QUOTED_PROP);
151:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
152:       assertEquals(4095, Node.COLUMN_MASK);
153:       assertEquals(53, Node.INPUT_ID);
154:       assertEquals(55, Node.INFERRED_FUNCTION);
155:       assertEquals(48, Node.DIRECTIVES);
156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
157:       assertEquals(43, Node.IS_CONSTANT_NAME);
158:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
160:       assertEquals(50, Node.FREE_CALL);
161:       assertEquals(37, Node.OPT_ARG_NAME);
162:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
164:       assertEquals(32, Node.INCRDECR_PROP);
165:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
166:       assertEquals(12, Node.COLUMN_BITS);
167:       assertFalse(node0.isSetterDef());
168:       assertFalse(node0.isParamList());
169:       assertFalse(node0.isNull());
170:       assertEquals(0, node0.getChildCount());
171:       assertFalse(node0.isCatch());
172:       assertFalse(node0.isCall());
173:       assertFalse(node0.isStringKey());
174:       assertFalse(node0.isName());
175:       assertFalse(node0.isRegExp());
176:       assertFalse(node0.isVoid());
177:       assertFalse(node0.isBlock());
178:       assertFalse(node0.isDebugger());
179:       assertFalse(node0.hasMoreThanOneChild());
180:       assertFalse(node0.isWhile());
181:       assertFalse(node0.isReturn());
182:       assertFalse(node0.isFor());
183:       assertFalse(node0.isTry());
184:       assertTrue(node0.isString());
185:       assertFalse(node0.isTypeOf());
186:       assertFalse(node0.isDec());
187:       assertFalse(node0.hasChildren());
188:       assertFalse(node0.isLabel());
189:       assertFalse(node0.isGetterDef());
190:       assertFalse(node0.isEmpty());
191:       assertFalse(node0.isAssign());
192:       assertFalse(node0.isOr());
193:       assertFalse(node0.isNumber());
194:       assertFalse(node0.isGetElem());
195:       assertFalse(node0.isArrayLit());
196:       assertFalse(node0.isLabelName());
197:       assertFalse(node0.isDelProp());
198:       assertFalse(node0.isSwitch());
199:       assertFalse(node0.isTrue());
200:       assertFalse(node0.isNew());
201:       assertFalse(node0.isAdd());
202:       assertFalse(node0.isVar());
203:       assertFalse(node0.isDo());
204:       assertFalse(node0.isAssignAdd());
205:       assertFalse(node0.isDefaultCase());
206:       assertFalse(node0.isThis());
207:       assertFalse(node0.isComma());
208:       assertFalse(node0.isBreak());
209:       assertFalse(node0.isGetProp());
210:       assertFalse(node0.isInstanceOf());
211:       assertFalse(node0.isFalse());
212:       assertFalse(node0.isObjectLit());
213:       assertFalse(node0.isAnd());
214:       assertFalse(node0.isExprResult());
215:       assertFalse(node0.isScript());
216:       assertEquals((-1), node0.getCharno());
217:       assertFalse(node0.isWith());
218:       assertFalse(node0.isNot());
219:       assertFalse(node0.isHook());
220:       assertFalse(node0.isCase());
221:       assertFalse(node0.hasOneChild());
222:       assertFalse(node0.isNE());
223:       assertEquals((-1), node0.getSourcePosition());
224:       assertFalse(node0.isIn());
225:       assertFalse(node0.isCast());
226:       assertEquals((-1), node0.getLineno());
227:       assertFalse(node0.isIf());
228:       assertFalse(node0.isFunction());
229:       assertFalse(node0.isInc());
230:       assertFalse(node0.isContinue());
231:       assertFalse(node0.isThrow());
232:       assertEquals(40, node0.getType());
233:       
234:       String string0 = node0.toString();
235:       assertEquals("STRING ", string0);
236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
237:       assertEquals(57, Node.LAST_PROP);
238:       assertEquals(49, Node.DIRECT_EVAL);
239:       assertEquals(30, Node.VAR_ARGS_NAME);
240:       assertEquals(1, Node.DECR_FLAG);
241:       assertEquals(46, Node.IS_NAMESPACE);
242:       assertEquals(52, Node.LENGTH);
243:       assertEquals(57, Node.REFLECTED_OBJECT);
244:       assertEquals(51, Node.STATIC_SOURCE_FILE);
245:       assertEquals(54, Node.SLASH_V);
246:       assertEquals(56, Node.CHANGE_TIME);
247:       assertEquals(47, Node.IS_DISPATCHER);
248:       assertEquals(2, Node.POST_FLAG);
249:       assertEquals(40, Node.ORIGINALNAME_PROP);
250:       assertEquals(8, Node.FLAG_NO_THROWS);
251:       assertEquals(39, Node.EMPTY_BLOCK);
252:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
253:       assertEquals(29, Node.JSDOC_INFO_PROP);
254:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
255:       assertEquals(36, Node.QUOTED_PROP);
256:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
257:       assertEquals(4095, Node.COLUMN_MASK);
258:       assertEquals(53, Node.INPUT_ID);
259:       assertEquals(55, Node.INFERRED_FUNCTION);
260:       assertEquals(48, Node.DIRECTIVES);
261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
262:       assertEquals(43, Node.IS_CONSTANT_NAME);
263:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
265:       assertEquals(50, Node.FREE_CALL);
266:       assertEquals(37, Node.OPT_ARG_NAME);
267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
268:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
269:       assertEquals(32, Node.INCRDECR_PROP);
270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
271:       assertEquals(12, Node.COLUMN_BITS);
272:       assertFalse(node0.isSetterDef());
273:       assertFalse(node0.isParamList());
274:       assertFalse(node0.isNull());
275:       assertEquals(0, node0.getChildCount());
276:       assertFalse(node0.isCatch());
277:       assertFalse(node0.isCall());
278:       assertFalse(node0.isStringKey());
279:       assertFalse(node0.isName());
280:       assertFalse(node0.isRegExp());
281:       assertFalse(node0.isVoid());
282:       assertFalse(node0.isBlock());
283:       assertFalse(node0.isDebugger());
284:       assertFalse(node0.hasMoreThanOneChild());
285:       assertFalse(node0.isWhile());
286:       assertFalse(node0.isReturn());
287:       assertFalse(node0.isFor());
288:       assertFalse(node0.isTry());
289:       assertTrue(node0.isString());
290:       assertFalse(node0.isTypeOf());
291:       assertFalse(node0.isDec());
292:       assertFalse(node0.hasChildren());
293:       assertFalse(node0.isLabel());
294:       assertFalse(node0.isGetterDef());
295:       assertFalse(node0.isEmpty());
296:       assertFalse(node0.isAssign());
297:       assertFalse(node0.isOr());
298:       assertFalse(node0.isNumber());
299:       assertFalse(node0.isGetElem());
300:       assertFalse(node0.isArrayLit());
301:       assertFalse(node0.isLabelName());
302:       assertFalse(node0.isDelProp());
303:       assertFalse(node0.isSwitch());
304:       assertFalse(node0.isTrue());
305:       assertFalse(node0.isNew());
306:       assertFalse(node0.isAdd());
307:       assertFalse(node0.isVar());
308:       assertFalse(node0.isDo());
309:       assertFalse(node0.isAssignAdd());
310:       assertFalse(node0.isDefaultCase());
311:       assertFalse(node0.isThis());
312:       assertFalse(node0.isComma());
313:       assertFalse(node0.isBreak());
314:       assertFalse(node0.isGetProp());
315:       assertFalse(node0.isInstanceOf());
316:       assertFalse(node0.isFalse());
317:       assertFalse(node0.isObjectLit());
318:       assertFalse(node0.isAnd());
319:       assertFalse(node0.isExprResult());
320:       assertFalse(node0.isScript());
321:       assertEquals((-1), node0.getCharno());
322:       assertFalse(node0.isWith());
323:       assertFalse(node0.isNot());
324:       assertFalse(node0.isHook());
325:       assertFalse(node0.isCase());
326:       assertFalse(node0.hasOneChild());
327:       assertFalse(node0.isNE());
328:       assertEquals((-1), node0.getSourcePosition());
329:       assertFalse(node0.isIn());
330:       assertFalse(node0.isCast());
331:       assertEquals((-1), node0.getLineno());
332:       assertFalse(node0.isIf());
333:       assertFalse(node0.isFunction());
334:       assertFalse(node0.isInc());
335:       assertFalse(node0.isContinue());
336:       assertFalse(node0.isThrow());
337:       assertEquals(40, node0.getType());
338:       assertNotNull(string0);
339:       
340:       Iterable<Node> iterable0 = node0.children();
341:       assertEquals(15, Node.NO_SIDE_EFFECTS);
342:       assertEquals(57, Node.LAST_PROP);
343:       assertEquals(49, Node.DIRECT_EVAL);
344:       assertEquals(30, Node.VAR_ARGS_NAME);
345:       assertEquals(1, Node.DECR_FLAG);
346:       assertEquals(46, Node.IS_NAMESPACE);
347:       assertEquals(52, Node.LENGTH);
348:       assertEquals(57, Node.REFLECTED_OBJECT);
349:       assertEquals(51, Node.STATIC_SOURCE_FILE);
350:       assertEquals(54, Node.SLASH_V);
351:       assertEquals(56, Node.CHANGE_TIME);
352:       assertEquals(47, Node.IS_DISPATCHER);
353:       assertEquals(2, Node.POST_FLAG);
354:       assertEquals(40, Node.ORIGINALNAME_PROP);
355:       assertEquals(8, Node.FLAG_NO_THROWS);
356:       assertEquals(39, Node.EMPTY_BLOCK);
357:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
358:       assertEquals(29, Node.JSDOC_INFO_PROP);
359:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
360:       assertEquals(36, Node.QUOTED_PROP);
361:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
362:       assertEquals(4095, Node.COLUMN_MASK);
363:       assertEquals(53, Node.INPUT_ID);
364:       assertEquals(55, Node.INFERRED_FUNCTION);
365:       assertEquals(48, Node.DIRECTIVES);
366:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
367:       assertEquals(43, Node.IS_CONSTANT_NAME);
368:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
370:       assertEquals(50, Node.FREE_CALL);
371:       assertEquals(37, Node.OPT_ARG_NAME);
372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
373:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
374:       assertEquals(32, Node.INCRDECR_PROP);
375:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
376:       assertEquals(12, Node.COLUMN_BITS);
377:       assertFalse(iterable0.contains(node0));
378:       assertFalse(node0.isSetterDef());
379:       assertFalse(node0.isParamList());
380:       assertFalse(node0.isNull());
381:       assertEquals(0, node0.getChildCount());
382:       assertFalse(node0.isCatch());
383:       assertFalse(node0.isCall());
384:       assertFalse(node0.isStringKey());
385:       assertFalse(node0.isName());
386:       assertFalse(node0.isRegExp());
387:       assertFalse(node0.isVoid());
388:       assertFalse(node0.isBlock());
389:       assertFalse(node0.isDebugger());
390:       assertFalse(node0.hasMoreThanOneChild());
391:       assertFalse(node0.isWhile());
392:       assertFalse(node0.isReturn());
393:       assertFalse(node0.isFor());
394:       assertFalse(node0.isTry());
395:       assertTrue(node0.isString());
396:       assertFalse(node0.isTypeOf());
397:       assertFalse(node0.isDec());
398:       assertFalse(node0.hasChildren());
399:       assertFalse(node0.isLabel());
400:       assertFalse(node0.isGetterDef());
401:       assertFalse(node0.isEmpty());
402:       assertFalse(node0.isAssign());
403:       assertFalse(node0.isOr());
404:       assertFalse(node0.isNumber());
405:       assertFalse(node0.isGetElem());
406:       assertFalse(node0.isArrayLit());
407:       assertFalse(node0.isLabelName());
408:       assertFalse(node0.isDelProp());
409:       assertFalse(node0.isSwitch());
410:       assertFalse(node0.isTrue());
411:       assertFalse(node0.isNew());
412:       assertFalse(node0.isAdd());
413:       assertFalse(node0.isVar());
414:       assertFalse(node0.isDo());
415:       assertFalse(node0.isAssignAdd());
416:       assertFalse(node0.isDefaultCase());
417:       assertFalse(node0.isThis());
418:       assertFalse(node0.isComma());
419:       assertFalse(node0.isBreak());
420:       assertFalse(node0.isGetProp());
421:       assertFalse(node0.isInstanceOf());
422:       assertFalse(node0.isFalse());
423:       assertFalse(node0.isObjectLit());
424:       assertFalse(node0.isAnd());
425:       assertFalse(node0.isExprResult());
426:       assertFalse(node0.isScript());
427:       assertEquals((-1), node0.getCharno());
428:       assertFalse(node0.isWith());
429:       assertFalse(node0.isNot());
430:       assertFalse(node0.isHook());
431:       assertFalse(node0.isCase());
432:       assertFalse(node0.hasOneChild());
433:       assertFalse(node0.isNE());
434:       assertEquals((-1), node0.getSourcePosition());
435:       assertFalse(node0.isIn());
436:       assertFalse(node0.isCast());
437:       assertEquals((-1), node0.getLineno());
438:       assertFalse(node0.isIf());
439:       assertFalse(node0.isFunction());
440:       assertFalse(node0.isInc());
441:       assertFalse(node0.isContinue());
442:       assertFalse(node0.isThrow());
443:       assertEquals(40, node0.getType());
444:       assertNotNull(iterable0);
445:       
446:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
447:       assertNotNull(fileSystemHandling0);
448:       
449:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
450:       assertNotNull(simpleErrorReporter0);
451:       
452:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
453:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
454:       assertNotNull(jSTypeRegistry0);
455:       
456:       JSType[] jSTypeArray0 = new JSType[0];
457:       Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
458:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
459:       assertEquals(50, Node.FREE_CALL);
460:       assertEquals(48, Node.DIRECTIVES);
461:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
462:       assertEquals(57, Node.REFLECTED_OBJECT);
463:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
464:       assertEquals(8, Node.FLAG_NO_THROWS);
465:       assertEquals(39, Node.EMPTY_BLOCK);
466:       assertEquals(55, Node.INFERRED_FUNCTION);
467:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
468:       assertEquals(52, Node.LENGTH);
469:       assertEquals(15, Node.NO_SIDE_EFFECTS);
470:       assertEquals(57, Node.LAST_PROP);
471:       assertEquals(30, Node.VAR_ARGS_NAME);
472:       assertEquals(54, Node.SLASH_V);
473:       assertEquals(43, Node.IS_CONSTANT_NAME);
474:       assertEquals(40, Node.ORIGINALNAME_PROP);
475:       assertEquals(47, Node.IS_DISPATCHER);
476:       assertEquals(2, Node.POST_FLAG);
477:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
478:       assertEquals(37, Node.OPT_ARG_NAME);
479:       assertEquals(56, Node.CHANGE_TIME);
480:       assertEquals(46, Node.IS_NAMESPACE);
481:       assertEquals(32, Node.INCRDECR_PROP);
482:       assertEquals(51, Node.STATIC_SOURCE_FILE);
483:       assertEquals(53, Node.INPUT_ID);
484:       assertEquals(29, Node.JSDOC_INFO_PROP);
485:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
486:       assertEquals(49, Node.DIRECT_EVAL);
487:       assertEquals(36, Node.QUOTED_PROP);
488:       assertEquals(1, Node.DECR_FLAG);
489:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
490:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
491:       assertEquals(12, Node.COLUMN_BITS);
492:       assertEquals(4095, Node.COLUMN_MASK);
493:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
494:       assertFalse(node1.equals((Object)node0));
495:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
496:       assertFalse(node1.isFunction());
497:       assertFalse(node1.isDebugger());
498:       assertFalse(node1.isTrue());
499:       assertFalse(node1.isVoid());
500:       assertFalse(node1.isTry());
501:       assertFalse(node1.isDefaultCase());
502:       assertFalse(node1.isGetterDef());
503:       assertFalse(node1.isEmpty());
504:       assertFalse(node1.isNE());
505:       assertFalse(node1.isNull());
506:       assertFalse(node1.isDelProp());
507:       assertFalse(node1.isName());
508:       assertFalse(node1.isIf());
509:       assertFalse(node1.isCall());
510:       assertFalse(node1.isCatch());
511:       assertFalse(node1.isFor());
512:       assertFalse(node1.isRegExp());
513:       assertFalse(node1.isBlock());
514:       assertFalse(node1.isNew());
515:       assertFalse(node1.isAdd());
516:       assertEquals((-1), node1.getCharno());
517:       assertFalse(node1.isDo());
518:       assertFalse(node1.isSwitch());
519:       assertFalse(node1.isStringKey());
520:       assertFalse(node1.isCase());
521:       assertFalse(node1.isOr());
522:       assertEquals(83, node1.getType());
523:       assertFalse(node1.isLabel());
524:       assertFalse(node1.isLabelName());
525:       assertFalse(node1.isAssignAdd());
526:       assertFalse(node1.isVar());
527:       assertFalse(node1.isArrayLit());
528:       assertEquals(0, node1.getChildCount());
529:       assertFalse(node1.isExprResult());
530:       assertFalse(node1.isScript());
531:       assertFalse(node1.isAnd());
532:       assertFalse(node1.isObjectLit());
533:       assertFalse(node1.hasOneChild());
534:       assertFalse(node1.isNot());
535:       assertTrue(node1.isParamList());
536:       assertFalse(node1.isNumber());
537:       assertFalse(node1.isThis());
538:       assertFalse(node1.isComma());
539:       assertFalse(node1.isBreak());
540:       assertFalse(node1.isGetProp());
541:       assertFalse(node1.hasChildren());
542:       assertEquals((-1), node1.getLineno());
543:       assertFalse(node1.isReturn());
544:       assertFalse(node1.isHook());
545:       assertFalse(node1.isGetElem());
546:       assertFalse(node1.isInstanceOf());
547:       assertFalse(node1.isDec());
548:       assertFalse(node1.isAssign());
549:       assertFalse(node1.isTypeOf());
550:       assertFalse(node1.isWith());
551:       assertFalse(node1.hasMoreThanOneChild());
552:       assertFalse(node1.isInc());
553:       assertFalse(node1.isWhile());
554:       assertFalse(node1.isString());
555:       assertFalse(node1.isIn());
556:       assertEquals((-1), node1.getSourcePosition());
557:       assertFalse(node1.isSetterDef());
558:       assertFalse(node1.isContinue());
559:       assertFalse(node1.isThrow());
560:       assertFalse(node1.isCast());
561:       assertFalse(node1.isFalse());
562:       assertEquals(0, jSTypeArray0.length);
563:       assertNotNull(node1);
564:       
565:       boolean boolean1 = node0.isEquivalentTo(node1, false, false, false);
566:       assertFalse(boolean1);
567:       assertEquals(15, Node.NO_SIDE_EFFECTS);
568:       assertEquals(57, Node.LAST_PROP);
569:       assertEquals(49, Node.DIRECT_EVAL);
570:       assertEquals(30, Node.VAR_ARGS_NAME);
571:       assertEquals(1, Node.DECR_FLAG);
572:       assertEquals(46, Node.IS_NAMESPACE);
573:       assertEquals(52, Node.LENGTH);
574:       assertEquals(57, Node.REFLECTED_OBJECT);
575:       assertEquals(51, Node.STATIC_SOURCE_FILE);
576:       assertEquals(54, Node.SLASH_V);
577:       assertEquals(56, Node.CHANGE_TIME);
578:       assertEquals(47, Node.IS_DISPATCHER);
579:       assertEquals(2, Node.POST_FLAG);
580:       assertEquals(40, Node.ORIGINALNAME_PROP);
581:       assertEquals(8, Node.FLAG_NO_THROWS);
582:       assertEquals(39, Node.EMPTY_BLOCK);
583:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
584:       assertEquals(29, Node.JSDOC_INFO_PROP);
585:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
586:       assertEquals(36, Node.QUOTED_PROP);
587:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
588:       assertEquals(4095, Node.COLUMN_MASK);
589:       assertEquals(53, Node.INPUT_ID);
590:       assertEquals(55, Node.INFERRED_FUNCTION);
591:       assertEquals(48, Node.DIRECTIVES);
592:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
593:       assertEquals(43, Node.IS_CONSTANT_NAME);
594:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
595:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
596:       assertEquals(50, Node.FREE_CALL);
597:       assertEquals(37, Node.OPT_ARG_NAME);
598:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
599:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
600:       assertEquals(32, Node.INCRDECR_PROP);
601:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
602:       assertEquals(12, Node.COLUMN_BITS);
603:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
604:       assertEquals(50, Node.FREE_CALL);
605:       assertEquals(48, Node.DIRECTIVES);
606:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
607:       assertEquals(57, Node.REFLECTED_OBJECT);
608:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
609:       assertEquals(8, Node.FLAG_NO_THROWS);
610:       assertEquals(39, Node.EMPTY_BLOCK);
611:       assertEquals(55, Node.INFERRED_FUNCTION);
612:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
613:       assertEquals(52, Node.LENGTH);
614:       assertEquals(15, Node.NO_SIDE_EFFECTS);
615:       assertEquals(57, Node.LAST_PROP);
616:       assertEquals(30, Node.VAR_ARGS_NAME);
617:       assertEquals(54, Node.SLASH_V);
618:       assertEquals(43, Node.IS_CONSTANT_NAME);
619:       assertEquals(40, Node.ORIGINALNAME_PROP);
620:       assertEquals(47, Node.IS_DISPATCHER);
621:       assertEquals(2, Node.POST_FLAG);
622:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
623:       assertEquals(37, Node.OPT_ARG_NAME);
624:       assertEquals(56, Node.CHANGE_TIME);
625:       assertEquals(46, Node.IS_NAMESPACE);
626:       assertEquals(32, Node.INCRDECR_PROP);
627:       assertEquals(51, Node.STATIC_SOURCE_FILE);
628:       assertEquals(53, Node.INPUT_ID);
629:       assertEquals(29, Node.JSDOC_INFO_PROP);
630:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
631:       assertEquals(49, Node.DIRECT_EVAL);
632:       assertEquals(36, Node.QUOTED_PROP);
633:       assertEquals(1, Node.DECR_FLAG);
634:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
635:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
636:       assertEquals(12, Node.COLUMN_BITS);
637:       assertEquals(4095, Node.COLUMN_MASK);
638:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
639:       assertFalse(node0.equals((Object)node1));
640:       assertFalse(node1.equals((Object)node0));
641:       assertFalse(boolean1 == boolean0);
642:       assertFalse(node0.isSetterDef());
643:       assertFalse(node0.isParamList());
644:       assertFalse(node0.isNull());
645:       assertEquals(0, node0.getChildCount());
646:       assertFalse(node0.isCatch());
647:       assertFalse(node0.isCall());
648:       assertFalse(node0.isStringKey());
649:       assertFalse(node0.isName());
650:       assertFalse(node0.isRegExp());
651:       assertFalse(node0.isVoid());
652:       assertFalse(node0.isBlock());
653:       assertFalse(node0.isDebugger());
654:       assertFalse(node0.hasMoreThanOneChild());
655:       assertFalse(node0.isWhile());
656:       assertFalse(node0.isReturn());
657:       assertFalse(node0.isFor());
658:       assertFalse(node0.isTry());
659:       assertTrue(node0.isString());
660:       assertFalse(node0.isTypeOf());
661:       assertFalse(node0.isDec());
662:       assertFalse(node0.hasChildren());
663:       assertFalse(node0.isLabel());
664:       assertFalse(node0.isGetterDef());
665:       assertFalse(node0.isEmpty());
666:       assertFalse(node0.isAssign());
667:       assertFalse(node0.isOr());
668:       assertFalse(node0.isNumber());
669:       assertFalse(node0.isGetElem());
670:       assertFalse(node0.isArrayLit());
671:       assertFalse(node0.isLabelName());
672:       assertFalse(node0.isDelProp());
673:       assertFalse(node0.isSwitch());
674:       assertFalse(node0.isTrue());
675:       assertFalse(node0.isNew());
676:       assertFalse(node0.isAdd());
677:       assertFalse(node0.isVar());
678:       assertFalse(node0.isDo());
679:       assertFalse(node0.isAssignAdd());
680:       assertFalse(node0.isDefaultCase());
681:       assertFalse(node0.isThis());
682:       assertFalse(node0.isComma());
683:       assertFalse(node0.isBreak());
684:       assertFalse(node0.isGetProp());
685:       assertFalse(node0.isInstanceOf());
686:       assertFalse(node0.isFalse());
687:       assertFalse(node0.isObjectLit());
688:       assertFalse(node0.isAnd());
689:       assertFalse(node0.isExprResult());
690:       assertFalse(node0.isScript());
691:       assertEquals((-1), node0.getCharno());
692:       assertFalse(node0.isWith());
693:       assertFalse(node0.isNot());
694:       assertFalse(node0.isHook());
695:       assertFalse(node0.isCase());
696:       assertFalse(node0.hasOneChild());
697:       assertFalse(node0.isNE());
698:       assertEquals((-1), node0.getSourcePosition());
699:       assertFalse(node0.isIn());
700:       assertFalse(node0.isCast());
701:       assertEquals((-1), node0.getLineno());
702:       assertFalse(node0.isIf());
703:       assertFalse(node0.isFunction());
704:       assertFalse(node0.isInc());
705:       assertFalse(node0.isContinue());
706:       assertFalse(node0.isThrow());
707:       assertEquals(40, node0.getType());
708:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
709:       assertFalse(node1.isFunction());
710:       assertFalse(node1.isDebugger());
711:       assertFalse(node1.isTrue());
712:       assertFalse(node1.isVoid());
713:       assertFalse(node1.isTry());
714:       assertFalse(node1.isDefaultCase());
715:       assertFalse(node1.isGetterDef());
716:       assertFalse(node1.isEmpty());
717:       assertFalse(node1.isNE());
718:       assertFalse(node1.isNull());
719:       assertFalse(node1.isDelProp());
720:       assertFalse(node1.isName());
721:       assertFalse(node1.isIf());
722:       assertFalse(node1.isCall());
723:       assertFalse(node1.isCatch());
724:       assertFalse(node1.isFor());
725:       assertFalse(node1.isRegExp());
726:       assertFalse(node1.isBlock());
727:       assertFalse(node1.isNew());
728:       assertFalse(node1.isAdd());
729:       assertEquals((-1), node1.getCharno());
730:       assertFalse(node1.isDo());
731:       assertFalse(node1.isSwitch());
732:       assertFalse(node1.isStringKey());
733:       assertFalse(node1.isCase());
734:       assertFalse(node1.isOr());
735:       assertEquals(83, node1.getType());
736:       assertFalse(node1.isLabel());
737:       assertFalse(node1.isLabelName());
738:       assertFalse(node1.isAssignAdd());
739:       assertFalse(node1.isVar());
740:       assertFalse(node1.isArrayLit());
741:       assertEquals(0, node1.getChildCount());
742:       assertFalse(node1.isExprResult());
743:       assertFalse(node1.isScript());
744:       assertFalse(node1.isAnd());
745:       assertFalse(node1.isObjectLit());
746:       assertFalse(node1.hasOneChild());
747:       assertFalse(node1.isNot());
748:       assertTrue(node1.isParamList());
749:       assertFalse(node1.isNumber());
750:       assertFalse(node1.isThis());
751:       assertFalse(node1.isComma());
752:       assertFalse(node1.isBreak());
753:       assertFalse(node1.isGetProp());
754:       assertFalse(node1.hasChildren());
755:       assertEquals((-1), node1.getLineno());
756:       assertFalse(node1.isReturn());
757:       assertFalse(node1.isHook());
758:       assertFalse(node1.isGetElem());
759:       assertFalse(node1.isInstanceOf());
760:       assertFalse(node1.isDec());
761:       assertFalse(node1.isAssign());
762:       assertFalse(node1.isTypeOf());
763:       assertFalse(node1.isWith());
764:       assertFalse(node1.hasMoreThanOneChild());
765:       assertFalse(node1.isInc());
766:       assertFalse(node1.isWhile());
767:       assertFalse(node1.isString());
768:       assertFalse(node1.isIn());
769:       assertEquals((-1), node1.getSourcePosition());
770:       assertFalse(node1.isSetterDef());
771:       assertFalse(node1.isContinue());
772:       assertFalse(node1.isThrow());
773:       assertFalse(node1.isCast());
774:       assertFalse(node1.isFalse());
775:       assertEquals(0, jSTypeArray0.length);
776:       
777:       boolean boolean2 = node0.isNoSideEffectsCall();
778:       assertFalse(boolean2);
779:       assertEquals(15, Node.NO_SIDE_EFFECTS);
780:       assertEquals(57, Node.LAST_PROP);
781:       assertEquals(49, Node.DIRECT_EVAL);
782:       assertEquals(30, Node.VAR_ARGS_NAME);
783:       assertEquals(1, Node.DECR_FLAG);
784:       assertEquals(46, Node.IS_NAMESPACE);
785:       assertEquals(52, Node.LENGTH);
786:       assertEquals(57, Node.REFLECTED_OBJECT);
787:       assertEquals(51, Node.STATIC_SOURCE_FILE);
788:       assertEquals(54, Node.SLASH_V);
789:       assertEquals(56, Node.CHANGE_TIME);
790:       assertEquals(47, Node.IS_DISPATCHER);
791:       assertEquals(2, Node.POST_FLAG);
792:       assertEquals(40, Node.ORIGINALNAME_PROP);
793:       assertEquals(8, Node.FLAG_NO_THROWS);
794:       assertEquals(39, Node.EMPTY_BLOCK);
795:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
796:       assertEquals(29, Node.JSDOC_INFO_PROP);
797:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
798:       assertEquals(36, Node.QUOTED_PROP);
799:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
800:       assertEquals(4095, Node.COLUMN_MASK);
801:       assertEquals(53, Node.INPUT_ID);
802:       assertEquals(55, Node.INFERRED_FUNCTION);
803:       assertEquals(48, Node.DIRECTIVES);
804:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
805:       assertEquals(43, Node.IS_CONSTANT_NAME);
806:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
807:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
808:       assertEquals(50, Node.FREE_CALL);
809:       assertEquals(37, Node.OPT_ARG_NAME);
810:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
811:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
812:       assertEquals(32, Node.INCRDECR_PROP);
813:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
814:       assertEquals(12, Node.COLUMN_BITS);
815:       assertFalse(node0.equals((Object)node1));
816:       assertFalse(boolean2 == boolean0);
817:       assertTrue(boolean2 == boolean1);
818:       assertFalse(node0.isSetterDef());
819:       assertFalse(node0.isParamList());
820:       assertFalse(node0.isNull());
821:       assertEquals(0, node0.getChildCount());
822:       assertFalse(node0.isCatch());
823:       assertFalse(node0.isCall());
824:       assertFalse(node0.isStringKey());
825:       assertFalse(node0.isName());
826:       assertFalse(node0.isRegExp());
827:       assertFalse(node0.isVoid());
828:       assertFalse(node0.isBlock());
829:       assertFalse(node0.isDebugger());
830:       assertFalse(node0.hasMoreThanOneChild());
831:       assertFalse(node0.isWhile());
832:       assertFalse(node0.isReturn());
833:       assertFalse(node0.isFor());
834:       assertFalse(node0.isTry());
835:       assertTrue(node0.isString());
836:       assertFalse(node0.isTypeOf());
837:       assertFalse(node0.isDec());
838:       assertFalse(node0.hasChildren());
839:       assertFalse(node0.isLabel());
840:       assertFalse(node0.isGetterDef());
841:       assertFalse(node0.isEmpty());
842:       assertFalse(node0.isAssign());
843:       assertFalse(node0.isOr());
844:       assertFalse(node0.isNumber());
845:       assertFalse(node0.isGetElem());
846:       assertFalse(node0.isArrayLit());
847:       assertFalse(node0.isLabelName());
848:       assertFalse(node0.isDelProp());
849:       assertFalse(node0.isSwitch());
850:       assertFalse(node0.isTrue());
851:       assertFalse(node0.isNew());
852:       assertFalse(node0.isAdd());
853:       assertFalse(node0.isVar());
854:       assertFalse(node0.isDo());
855:       assertFalse(node0.isAssignAdd());
856:       assertFalse(node0.isDefaultCase());
857:       assertFalse(node0.isThis());
858:       assertFalse(node0.isComma());
859:       assertFalse(node0.isBreak());
860:       assertFalse(node0.isGetProp());
861:       assertFalse(node0.isInstanceOf());
862:       assertFalse(node0.isFalse());
863:       assertFalse(node0.isObjectLit());
864:       assertFalse(node0.isAnd());
865:       assertFalse(node0.isExprResult());
866:       assertFalse(node0.isScript());
867:       assertEquals((-1), node0.getCharno());
868:       assertFalse(node0.isWith());
869:       assertFalse(node0.isNot());
870:       assertFalse(node0.isHook());
871:       assertFalse(node0.isCase());
872:       assertFalse(node0.hasOneChild());
873:       assertFalse(node0.isNE());
874:       assertEquals((-1), node0.getSourcePosition());
875:       assertFalse(node0.isIn());
876:       assertFalse(node0.isCast());
877:       assertEquals((-1), node0.getLineno());
878:       assertFalse(node0.isIf());
879:       assertFalse(node0.isFunction());
880:       assertFalse(node0.isInc());
881:       assertFalse(node0.isContinue());
882:       assertFalse(node0.isThrow());
883:       assertEquals(40, node0.getType());
884:       
885:       node0.addSuppression("");
886:       assertEquals(15, Node.NO_SIDE_EFFECTS);
887:       assertEquals(57, Node.LAST_PROP);
888:       assertEquals(49, Node.DIRECT_EVAL);
889:       assertEquals(30, Node.VAR_ARGS_NAME);
890:       assertEquals(1, Node.DECR_FLAG);
891:       assertEquals(46, Node.IS_NAMESPACE);
892:       assertEquals(52, Node.LENGTH);
893:       assertEquals(57, Node.REFLECTED_OBJECT);
894:       assertEquals(51, Node.STATIC_SOURCE_FILE);
895:       assertEquals(54, Node.SLASH_V);
896:       assertEquals(56, Node.CHANGE_TIME);
897:       assertEquals(47, Node.IS_DISPATCHER);
898:       assertEquals(2, Node.POST_FLAG);
899:       assertEquals(40, Node.ORIGINALNAME_PROP);
900:       assertEquals(8, Node.FLAG_NO_THROWS);
901:       assertEquals(39, Node.EMPTY_BLOCK);
902:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
903:       assertEquals(29, Node.JSDOC_INFO_PROP);
904:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
905:       assertEquals(36, Node.QUOTED_PROP);
906:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
907:       assertEquals(4095, Node.COLUMN_MASK);
908:       assertEquals(53, Node.INPUT_ID);
909:       assertEquals(55, Node.INFERRED_FUNCTION);
910:       assertEquals(48, Node.DIRECTIVES);
911:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
912:       assertEquals(43, Node.IS_CONSTANT_NAME);
913:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
914:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
915:       assertEquals(50, Node.FREE_CALL);
916:       assertEquals(37, Node.OPT_ARG_NAME);
917:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
918:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
919:       assertEquals(32, Node.INCRDECR_PROP);
920:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
921:       assertEquals(12, Node.COLUMN_BITS);
922:       assertFalse(node0.equals((Object)node1));
923:       assertFalse(node0.isSetterDef());
924:       assertFalse(node0.isParamList());
925:       assertFalse(node0.isNull());
926:       assertEquals(0, node0.getChildCount());
927:       assertFalse(node0.isCatch());
928:       assertFalse(node0.isCall());
929:       assertFalse(node0.isStringKey());
930:       assertFalse(node0.isName());
931:       assertFalse(node0.isRegExp());
932:       assertFalse(node0.isVoid());
933:       assertFalse(node0.isBlock());
934:       assertFalse(node0.isDebugger());
935:       assertFalse(node0.hasMoreThanOneChild());
936:       assertFalse(node0.isWhile());
937:       assertFalse(node0.isReturn());
938:       assertFalse(node0.isFor());
939:       assertFalse(node0.isTry());
940:       assertTrue(node0.isString());
941:       assertFalse(node0.isTypeOf());
942:       assertFalse(node0.isDec());
943:       assertFalse(node0.hasChildren());
944:       assertFalse(node0.isLabel());
945:       assertFalse(node0.isGetterDef());
946:       assertFalse(node0.isEmpty());
947:       assertFalse(node0.isAssign());
948:       assertFalse(node0.isOr());
949:       assertFalse(node0.isNumber());
950:       assertFalse(node0.isGetElem());
951:       assertFalse(node0.isArrayLit());
952:       assertFalse(node0.isLabelName());
953:       assertFalse(node0.isDelProp());
954:       assertFalse(node0.isSwitch());
955:       assertFalse(node0.isTrue());
956:       assertFalse(node0.isNew());
957:       assertFalse(node0.isAdd());
958:       assertFalse(node0.isVar());
959:       assertFalse(node0.isDo());
960:       assertFalse(node0.isAssignAdd());
961:       assertFalse(node0.isDefaultCase());
962:       assertFalse(node0.isThis());
963:       assertFalse(node0.isComma());
964:       assertFalse(node0.isBreak());
965:       assertFalse(node0.isGetProp());
966:       assertFalse(node0.isInstanceOf());
967:       assertFalse(node0.isFalse());
968:       assertFalse(node0.isObjectLit());
969:       assertFalse(node0.isAnd());
970:       assertFalse(node0.isExprResult());
971:       assertFalse(node0.isScript());
972:       assertEquals((-1), node0.getCharno());
973:       assertFalse(node0.isWith());
974:       assertFalse(node0.isNot());
975:       assertFalse(node0.isHook());
976:       assertFalse(node0.isCase());
977:       assertFalse(node0.hasOneChild());
978:       assertFalse(node0.isNE());
979:       assertEquals((-1), node0.getSourcePosition());
980:       assertFalse(node0.isIn());
981:       assertFalse(node0.isCast());
982:       assertEquals((-1), node0.getLineno());
983:       assertFalse(node0.isIf());
984:       assertFalse(node0.isFunction());
985:       assertFalse(node0.isInc());
986:       assertFalse(node0.isContinue());
987:       assertFalse(node0.isThrow());
988:       assertEquals(40, node0.getType());
989:       
990:       int int0 = node0.getSourcePosition();
991:       assertEquals((-1), int0);
992:       assertEquals(15, Node.NO_SIDE_EFFECTS);
993:       assertEquals(57, Node.LAST_PROP);
994:       assertEquals(49, Node.DIRECT_EVAL);
995:       assertEquals(30, Node.VAR_ARGS_NAME);
996:       assertEquals(1, Node.DECR_FLAG);
997:       assertEquals(46, Node.IS_NAMESPACE);
998:       assertEquals(52, Node.LENGTH);
999:       assertEquals(57, Node.REFLECTED_OBJECT);
1000:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1001:       assertEquals(54, Node.SLASH_V);
1002:       assertEquals(56, Node.CHANGE_TIME);
1003:       assertEquals(47, Node.IS_DISPATCHER);
1004:       assertEquals(2, Node.POST_FLAG);
1005:       assertEquals(40, Node.ORIGINALNAME_PROP);
1006:       assertEquals(8, Node.FLAG_NO_THROWS);
1007:       assertEquals(39, Node.EMPTY_BLOCK);
1008:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1009:       assertEquals(29, Node.JSDOC_INFO_PROP);
1010:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1011:       assertEquals(36, Node.QUOTED_PROP);
1012:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1013:       assertEquals(4095, Node.COLUMN_MASK);
1014:       assertEquals(53, Node.INPUT_ID);
1015:       assertEquals(55, Node.INFERRED_FUNCTION);
1016:       assertEquals(48, Node.DIRECTIVES);
1017:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1018:       assertEquals(43, Node.IS_CONSTANT_NAME);
1019:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1020:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1021:       assertEquals(50, Node.FREE_CALL);
1022:       assertEquals(37, Node.OPT_ARG_NAME);
1023:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1024:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1025:       assertEquals(32, Node.INCRDECR_PROP);
1026:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1027:       assertEquals(12, Node.COLUMN_BITS);
1028:       assertFalse(node0.equals((Object)node1));
1029:       assertFalse(node0.isSetterDef());
1030:       assertFalse(node0.isParamList());
1031:       assertFalse(node0.isNull());
1032:       assertEquals(0, node0.getChildCount());
1033:       assertFalse(node0.isCatch());
1034:       assertFalse(node0.isCall());
1035:       assertFalse(node0.isStringKey());
1036:       assertFalse(node0.isName());
1037:       assertFalse(node0.isRegExp());
1038:       assertFalse(node0.isVoid());
1039:       assertFalse(node0.isBlock());
1040:       assertFalse(node0.isDebugger());
1041:       assertFalse(node0.hasMoreThanOneChild());
1042:       assertFalse(node0.isWhile());
1043:       assertFalse(node0.isReturn());
1044:       assertFalse(node0.isFor());
1045:       assertFalse(node0.isTry());
1046:       assertTrue(node0.isString());
1047:       assertFalse(node0.isTypeOf());
1048:       assertFalse(node0.isDec());
1049:       assertFalse(node0.hasChildren());
1050:       assertFalse(node0.isLabel());
1051:       assertFalse(node0.isGetterDef());
1052:       assertFalse(node0.isEmpty());
1053:       assertFalse(node0.isAssign());
1054:       assertFalse(node0.isOr());
1055:       assertFalse(node0.isNumber());
1056:       assertFalse(node0.isGetElem());
1057:       assertFalse(node0.isArrayLit());
1058:       assertFalse(node0.isLabelName());
1059:       assertFalse(node0.isDelProp());
1060:       assertFalse(node0.isSwitch());
1061:       assertFalse(node0.isTrue());
1062:       assertFalse(node0.isNew());
1063:       assertFalse(node0.isAdd());
1064:       assertFalse(node0.isVar());
1065:       assertFalse(node0.isDo());
1066:       assertFalse(node0.isAssignAdd());
1067:       assertFalse(node0.isDefaultCase());
1068:       assertFalse(node0.isThis());
1069:       assertFalse(node0.isComma());
1070:       assertFalse(node0.isBreak());
1071:       assertFalse(node0.isGetProp());
1072:       assertFalse(node0.isInstanceOf());
1073:       assertFalse(node0.isFalse());
1074:       assertFalse(node0.isObjectLit());
1075:       assertFalse(node0.isAnd());
1076:       assertFalse(node0.isExprResult());
1077:       assertFalse(node0.isScript());
1078:       assertEquals((-1), node0.getCharno());
1079:       assertFalse(node0.isWith());
1080:       assertFalse(node0.isNot());
1081:       assertFalse(node0.isHook());
1082:       assertFalse(node0.isCase());
1083:       assertFalse(node0.hasOneChild());
1084:       assertFalse(node0.isNE());
1085:       assertEquals((-1), node0.getSourcePosition());
1086:       assertFalse(node0.isIn());
1087:       assertFalse(node0.isCast());
1088:       assertEquals((-1), node0.getLineno());
1089:       assertFalse(node0.isIf());
1090:       assertFalse(node0.isFunction());
1091:       assertFalse(node0.isInc());
1092:       assertFalse(node0.isContinue());
1093:       assertFalse(node0.isThrow());
1094:       assertEquals(40, node0.getType());
1095:       
1096:       boolean boolean3 = node0.isObjectLit();
1097:       assertFalse(boolean3);
1098:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1099:       assertEquals(57, Node.LAST_PROP);
1100:       assertEquals(49, Node.DIRECT_EVAL);
1101:       assertEquals(30, Node.VAR_ARGS_NAME);
1102:       assertEquals(1, Node.DECR_FLAG);
1103:       assertEquals(46, Node.IS_NAMESPACE);
1104:       assertEquals(52, Node.LENGTH);
1105:       assertEquals(57, Node.REFLECTED_OBJECT);
1106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1107:       assertEquals(54, Node.SLASH_V);
1108:       assertEquals(56, Node.CHANGE_TIME);
1109:       assertEquals(47, Node.IS_DISPATCHER);
1110:       assertEquals(2, Node.POST_FLAG);
1111:       assertEquals(40, Node.ORIGINALNAME_PROP);
1112:       assertEquals(8, Node.FLAG_NO_THROWS);
1113:       assertEquals(39, Node.EMPTY_BLOCK);
1114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1115:       assertEquals(29, Node.JSDOC_INFO_PROP);
1116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1117:       assertEquals(36, Node.QUOTED_PROP);
1118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1119:       assertEquals(4095, Node.COLUMN_MASK);
1120:       assertEquals(53, Node.INPUT_ID);
1121:       assertEquals(55, Node.INFERRED_FUNCTION);
1122:       assertEquals(48, Node.DIRECTIVES);
1123:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1124:       assertEquals(43, Node.IS_CONSTANT_NAME);
1125:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1126:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1127:       assertEquals(50, Node.FREE_CALL);
1128:       assertEquals(37, Node.OPT_ARG_NAME);
1129:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1130:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1131:       assertEquals(32, Node.INCRDECR_PROP);
1132:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1133:       assertEquals(12, Node.COLUMN_BITS);
1134:       assertFalse(node0.equals((Object)node1));
1135:       assertTrue(boolean3 == boolean1);
1136:       assertTrue(boolean3 == boolean2);
1137:       assertFalse(boolean3 == boolean0);
1138:       assertFalse(node0.isSetterDef());
1139:       assertFalse(node0.isParamList());
1140:       assertFalse(node0.isNull());
1141:       assertEquals(0, node0.getChildCount());
1142:       assertFalse(node0.isCatch());
1143:       assertFalse(node0.isCall());
1144:       assertFalse(node0.isStringKey());
1145:       assertFalse(node0.isName());
1146:       assertFalse(node0.isRegExp());
1147:       assertFalse(node0.isVoid());
1148:       assertFalse(node0.isBlock());
1149:       assertFalse(node0.isDebugger());
1150:       assertFalse(node0.hasMoreThanOneChild());
1151:       assertFalse(node0.isWhile());
1152:       assertFalse(node0.isReturn());
1153:       assertFalse(node0.isFor());
1154:       assertFalse(node0.isTry());
1155:       assertTrue(node0.isString());
1156:       assertFalse(node0.isTypeOf());
1157:       assertFalse(node0.isDec());
1158:       assertFalse(node0.hasChildren());
1159:       assertFalse(node0.isLabel());
1160:       assertFalse(node0.isGetterDef());
1161:       assertFalse(node0.isEmpty());
1162:       assertFalse(node0.isAssign());
1163:       assertFalse(node0.isOr());
1164:       assertFalse(node0.isNumber());
1165:       assertFalse(node0.isGetElem());
1166:       assertFalse(node0.isArrayLit());
1167:       assertFalse(node0.isLabelName());
1168:       assertFalse(node0.isDelProp());
1169:       assertFalse(node0.isSwitch());
1170:       assertFalse(node0.isTrue());
1171:       assertFalse(node0.isNew());
1172:       assertFalse(node0.isAdd());
1173:       assertFalse(node0.isVar());
1174:       assertFalse(node0.isDo());
1175:       assertFalse(node0.isAssignAdd());
1176:       assertFalse(node0.isDefaultCase());
1177:       assertFalse(node0.isThis());
1178:       assertFalse(node0.isComma());
1179:       assertFalse(node0.isBreak());
1180:       assertFalse(node0.isGetProp());
1181:       assertFalse(node0.isInstanceOf());
1182:       assertFalse(node0.isFalse());
1183:       assertFalse(node0.isObjectLit());
1184:       assertFalse(node0.isAnd());
1185:       assertFalse(node0.isExprResult());
1186:       assertFalse(node0.isScript());
1187:       assertEquals((-1), node0.getCharno());
1188:       assertFalse(node0.isWith());
1189:       assertFalse(node0.isNot());
1190:       assertFalse(node0.isHook());
1191:       assertFalse(node0.isCase());
1192:       assertFalse(node0.hasOneChild());
1193:       assertFalse(node0.isNE());
1194:       assertEquals((-1), node0.getSourcePosition());
1195:       assertFalse(node0.isIn());
1196:       assertFalse(node0.isCast());
1197:       assertEquals((-1), node0.getLineno());
1198:       assertFalse(node0.isIf());
1199:       assertFalse(node0.isFunction());
1200:       assertFalse(node0.isInc());
1201:       assertFalse(node0.isContinue());
1202:       assertFalse(node0.isThrow());
1203:       assertEquals(40, node0.getType());
1204:       
1205:       int int1 = node0.getIntProp(4906);
1206:       assertEquals(0, int1);
1207:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1208:       assertEquals(57, Node.LAST_PROP);
1209:       assertEquals(49, Node.DIRECT_EVAL);
1210:       assertEquals(30, Node.VAR_ARGS_NAME);
1211:       assertEquals(1, Node.DECR_FLAG);
1212:       assertEquals(46, Node.IS_NAMESPACE);
1213:       assertEquals(52, Node.LENGTH);
1214:       assertEquals(57, Node.REFLECTED_OBJECT);
1215:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1216:       assertEquals(54, Node.SLASH_V);
1217:       assertEquals(56, Node.CHANGE_TIME);
1218:       assertEquals(47, Node.IS_DISPATCHER);
1219:       assertEquals(2, Node.POST_FLAG);
1220:       assertEquals(40, Node.ORIGINALNAME_PROP);
1221:       assertEquals(8, Node.FLAG_NO_THROWS);
1222:       assertEquals(39, Node.EMPTY_BLOCK);
1223:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1224:       assertEquals(29, Node.JSDOC_INFO_PROP);
1225:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1226:       assertEquals(36, Node.QUOTED_PROP);
1227:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1228:       assertEquals(4095, Node.COLUMN_MASK);
1229:       assertEquals(53, Node.INPUT_ID);
1230:       assertEquals(55, Node.INFERRED_FUNCTION);
1231:       assertEquals(48, Node.DIRECTIVES);
1232:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1233:       assertEquals(43, Node.IS_CONSTANT_NAME);
1234:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1235:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1236:       assertEquals(50, Node.FREE_CALL);
1237:       assertEquals(37, Node.OPT_ARG_NAME);
1238:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1239:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1240:       assertEquals(32, Node.INCRDECR_PROP);
1241:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1242:       assertEquals(12, Node.COLUMN_BITS);
1243:       assertFalse(node0.equals((Object)node1));
1244:       assertFalse(int1 == int0);
1245:       assertFalse(node0.isSetterDef());
1246:       assertFalse(node0.isParamList());
1247:       assertFalse(node0.isNull());
1248:       assertEquals(0, node0.getChildCount());
1249:       assertFalse(node0.isCatch());
1250:       assertFalse(node0.isCall());
1251:       assertFalse(node0.isStringKey());
1252:       assertFalse(node0.isName());
1253:       assertFalse(node0.isRegExp());
1254:       assertFalse(node0.isVoid());
1255:       assertFalse(node0.isBlock());
1256:       assertFalse(node0.isDebugger());
1257:       assertFalse(node0.hasMoreThanOneChild());
1258:       assertFalse(node0.isWhile());
1259:       assertFalse(node0.isReturn());
1260:       assertFalse(node0.isFor());
1261:       assertFalse(node0.isTry());
1262:       assertTrue(node0.isString());
1263:       assertFalse(node0.isTypeOf());
1264:       assertFalse(node0.isDec());
1265:       assertFalse(node0.hasChildren());
1266:       assertFalse(node0.isLabel());
1267:       assertFalse(node0.isGetterDef());
1268:       assertFalse(node0.isEmpty());
1269:       assertFalse(node0.isAssign());
1270:       assertFalse(node0.isOr());
1271:       assertFalse(node0.isNumber());
1272:       assertFalse(node0.isGetElem());
1273:       assertFalse(node0.isArrayLit());
1274:       assertFalse(node0.isLabelName());
1275:       assertFalse(node0.isDelProp());
1276:       assertFalse(node0.isSwitch());
1277:       assertFalse(node0.isTrue());
1278:       assertFalse(node0.isNew());
1279:       assertFalse(node0.isAdd());
1280:       assertFalse(node0.isVar());
1281:       assertFalse(node0.isDo());
1282:       assertFalse(node0.isAssignAdd());
1283:       assertFalse(node0.isDefaultCase());
1284:       assertFalse(node0.isThis());
1285:       assertFalse(node0.isComma());
1286:       assertFalse(node0.isBreak());
1287:       assertFalse(node0.isGetProp());
1288:       assertFalse(node0.isInstanceOf());
1289:       assertFalse(node0.isFalse());
1290:       assertFalse(node0.isObjectLit());
1291:       assertFalse(node0.isAnd());
1292:       assertFalse(node0.isExprResult());
1293:       assertFalse(node0.isScript());
1294:       assertEquals((-1), node0.getCharno());
1295:       assertFalse(node0.isWith());
1296:       assertFalse(node0.isNot());
1297:       assertFalse(node0.isHook());
1298:       assertFalse(node0.isCase());
1299:       assertFalse(node0.hasOneChild());
1300:       assertFalse(node0.isNE());
1301:       assertEquals((-1), node0.getSourcePosition());
1302:       assertFalse(node0.isIn());
1303:       assertFalse(node0.isCast());
1304:       assertEquals((-1), node0.getLineno());
1305:       assertFalse(node0.isIf());
1306:       assertFalse(node0.isFunction());
1307:       assertFalse(node0.isInc());
1308:       assertFalse(node0.isContinue());
1309:       assertFalse(node0.isThrow());
1310:       assertEquals(40, node0.getType());
1311:       
1312:       boolean boolean4 = node0.isCase();
1313:       assertFalse(boolean4);
1314:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1315:       assertEquals(57, Node.LAST_PROP);
1316:       assertEquals(49, Node.DIRECT_EVAL);
1317:       assertEquals(30, Node.VAR_ARGS_NAME);
1318:       assertEquals(1, Node.DECR_FLAG);
1319:       assertEquals(46, Node.IS_NAMESPACE);
1320:       assertEquals(52, Node.LENGTH);
1321:       assertEquals(57, Node.REFLECTED_OBJECT);
1322:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1323:       assertEquals(54, Node.SLASH_V);
1324:       assertEquals(56, Node.CHANGE_TIME);
1325:       assertEquals(47, Node.IS_DISPATCHER);
1326:       assertEquals(2, Node.POST_FLAG);
1327:       assertEquals(40, Node.ORIGINALNAME_PROP);
1328:       assertEquals(8, Node.FLAG_NO_THROWS);
1329:       assertEquals(39, Node.EMPTY_BLOCK);
1330:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1331:       assertEquals(29, Node.JSDOC_INFO_PROP);
1332:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1333:       assertEquals(36, Node.QUOTED_PROP);
1334:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1335:       assertEquals(4095, Node.COLUMN_MASK);
1336:       assertEquals(53, Node.INPUT_ID);
1337:       assertEquals(55, Node.INFERRED_FUNCTION);
1338:       assertEquals(48, Node.DIRECTIVES);
1339:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1340:       assertEquals(43, Node.IS_CONSTANT_NAME);
1341:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1342:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1343:       assertEquals(50, Node.FREE_CALL);
1344:       assertEquals(37, Node.OPT_ARG_NAME);
1345:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1346:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1347:       assertEquals(32, Node.INCRDECR_PROP);
1348:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1349:       assertEquals(12, Node.COLUMN_BITS);
1350:       assertFalse(node0.equals((Object)node1));
1351:       assertTrue(boolean4 == boolean3);
1352:       assertTrue(boolean4 == boolean2);
1353:       assertFalse(boolean4 == boolean0);
1354:       assertTrue(boolean4 == boolean1);
1355:       assertFalse(node0.isSetterDef());
1356:       assertFalse(node0.isParamList());
1357:       assertFalse(node0.isNull());
1358:       assertEquals(0, node0.getChildCount());
1359:       assertFalse(node0.isCatch());
1360:       assertFalse(node0.isCall());
1361:       assertFalse(node0.isStringKey());
1362:       assertFalse(node0.isName());
1363:       assertFalse(node0.isRegExp());
1364:       assertFalse(node0.isVoid());
1365:       assertFalse(node0.isBlock());
1366:       assertFalse(node0.isDebugger());
1367:       assertFalse(node0.hasMoreThanOneChild());
1368:       assertFalse(node0.isWhile());
1369:       assertFalse(node0.isReturn());
1370:       assertFalse(node0.isFor());
1371:       assertFalse(node0.isTry());
1372:       assertTrue(node0.isString());
1373:       assertFalse(node0.isTypeOf());
1374:       assertFalse(node0.isDec());
1375:       assertFalse(node0.hasChildren());
1376:       assertFalse(node0.isLabel());
1377:       assertFalse(node0.isGetterDef());
1378:       assertFalse(node0.isEmpty());
1379:       assertFalse(node0.isAssign());
1380:       assertFalse(node0.isOr());
1381:       assertFalse(node0.isNumber());
1382:       assertFalse(node0.isGetElem());
1383:       assertFalse(node0.isArrayLit());
1384:       assertFalse(node0.isLabelName());
1385:       assertFalse(node0.isDelProp());
1386:       assertFalse(node0.isSwitch());
1387:       assertFalse(node0.isTrue());
1388:       assertFalse(node0.isNew());
1389:       assertFalse(node0.isAdd());
1390:       assertFalse(node0.isVar());
1391:       assertFalse(node0.isDo());
1392:       assertFalse(node0.isAssignAdd());
1393:       assertFalse(node0.isDefaultCase());
1394:       assertFalse(node0.isThis());
1395:       assertFalse(node0.isComma());
1396:       assertFalse(node0.isBreak());
1397:       assertFalse(node0.isGetProp());
1398:       assertFalse(node0.isInstanceOf());
1399:       assertFalse(node0.isFalse());
1400:       assertFalse(node0.isObjectLit());
1401:       assertFalse(node0.isAnd());
1402:       assertFalse(node0.isExprResult());
1403:       assertFalse(node0.isScript());
1404:       assertEquals((-1), node0.getCharno());
1405:       assertFalse(node0.isWith());
1406:       assertFalse(node0.isNot());
1407:       assertFalse(node0.isHook());
1408:       assertFalse(node0.isCase());
1409:       assertFalse(node0.hasOneChild());
1410:       assertFalse(node0.isNE());
1411:       assertEquals((-1), node0.getSourcePosition());
1412:       assertFalse(node0.isIn());
1413:       assertFalse(node0.isCast());
1414:       assertEquals((-1), node0.getLineno());
1415:       assertFalse(node0.isIf());
1416:       assertFalse(node0.isFunction());
1417:       assertFalse(node0.isInc());
1418:       assertFalse(node0.isContinue());
1419:       assertFalse(node0.isThrow());
1420:       assertEquals(40, node0.getType());
1421:       
1422:       Node node2 = node0.cloneTree();
1423:       assertEquals(53, Node.INPUT_ID);
1424:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1425:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1426:       assertEquals(36, Node.QUOTED_PROP);
1427:       assertEquals(43, Node.IS_CONSTANT_NAME);
1428:       assertEquals(56, Node.CHANGE_TIME);
1429:       assertEquals(37, Node.OPT_ARG_NAME);
1430:       assertEquals(46, Node.IS_NAMESPACE);
1431:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1432:       assertEquals(12, Node.COLUMN_BITS);
1433:       assertEquals(4095, Node.COLUMN_MASK);
1434:       assertEquals(50, Node.FREE_CALL);
1435:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1436:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1437:       assertEquals(32, Node.INCRDECR_PROP);
1438:       assertEquals(1, Node.DECR_FLAG);
1439:       assertEquals(52, Node.LENGTH);
1440:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1441:       assertEquals(54, Node.SLASH_V);
1442:       assertEquals(57, Node.REFLECTED_OBJECT);
1443:       assertEquals(30, Node.VAR_ARGS_NAME);
1444:       assertEquals(40, Node.ORIGINALNAME_PROP);
1445:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1446:       assertEquals(48, Node.DIRECTIVES);
1447:       assertEquals(49, Node.DIRECT_EVAL);
1448:       assertEquals(39, Node.EMPTY_BLOCK);
1449:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1450:       assertEquals(47, Node.IS_DISPATCHER);
1451:       assertEquals(8, Node.FLAG_NO_THROWS);
1452:       assertEquals(2, Node.POST_FLAG);
1453:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1454:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1455:       assertEquals(55, Node.INFERRED_FUNCTION);
1456:       assertEquals(29, Node.JSDOC_INFO_PROP);
1457:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1458:       assertEquals(57, Node.LAST_PROP);
1459:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1460:       assertEquals(57, Node.LAST_PROP);
1461:       assertEquals(49, Node.DIRECT_EVAL);
1462:       assertEquals(30, Node.VAR_ARGS_NAME);
1463:       assertEquals(1, Node.DECR_FLAG);
1464:       assertEquals(46, Node.IS_NAMESPACE);
1465:       assertEquals(52, Node.LENGTH);
1466:       assertEquals(57, Node.REFLECTED_OBJECT);
1467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1468:       assertEquals(54, Node.SLASH_V);
1469:       assertEquals(56, Node.CHANGE_TIME);
1470:       assertEquals(47, Node.IS_DISPATCHER);
1471:       assertEquals(2, Node.POST_FLAG);
1472:       assertEquals(40, Node.ORIGINALNAME_PROP);
1473:       assertEquals(8, Node.FLAG_NO_THROWS);
1474:       assertEquals(39, Node.EMPTY_BLOCK);
1475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1476:       assertEquals(29, Node.JSDOC_INFO_PROP);
1477:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1478:       assertEquals(36, Node.QUOTED_PROP);
1479:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1480:       assertEquals(4095, Node.COLUMN_MASK);
1481:       assertEquals(53, Node.INPUT_ID);
1482:       assertEquals(55, Node.INFERRED_FUNCTION);
1483:       assertEquals(48, Node.DIRECTIVES);
1484:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1485:       assertEquals(43, Node.IS_CONSTANT_NAME);
1486:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1487:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1488:       assertEquals(50, Node.FREE_CALL);
1489:       assertEquals(37, Node.OPT_ARG_NAME);
1490:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1491:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1492:       assertEquals(32, Node.INCRDECR_PROP);
1493:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1494:       assertEquals(12, Node.COLUMN_BITS);
1495:       assertNotSame(node2, node0);
1496:       assertNotSame(node0, node2);
1497:       assertFalse(node2.equals((Object)node1));
1498:       assertFalse(node2.equals((Object)node0));
1499:       assertFalse(node0.equals((Object)node1));
1500:       assertFalse(node2.isIn());
1501:       assertFalse(node2.isIf());
1502:       assertFalse(node2.isDelProp());
1503:       assertFalse(node2.isSwitch());
1504:       assertFalse(node2.isNE());
1505:       assertFalse(node2.isArrayLit());
1506:       assertFalse(node2.isThrow());
1507:       assertFalse(node2.isFalse());
1508:       assertFalse(node2.isFunction());
1509:       assertFalse(node2.isTrue());
1510:       assertFalse(node2.isDefaultCase());
1511:       assertFalse(node2.isEmpty());
1512:       assertFalse(node2.isInc());
1513:       assertFalse(node2.isInstanceOf());
1514:       assertEquals(0, node2.getChildCount());
1515:       assertFalse(node2.isCatch());
1516:       assertFalse(node2.isThis());
1517:       assertFalse(node2.isRegExp());
1518:       assertFalse(node2.isWith());
1519:       assertFalse(node2.isParamList());
1520:       assertFalse(node2.isHook());
1521:       assertFalse(node2.hasOneChild());
1522:       assertFalse(node2.isStringKey());
1523:       assertFalse(node2.isFor());
1524:       assertFalse(node2.isBlock());
1525:       assertEquals((-1), node2.getCharno());
1526:       assertFalse(node2.isNumber());
1527:       assertFalse(node2.isScript());
1528:       assertFalse(node2.isGetterDef());
1529:       assertTrue(node2.isString());
1530:       assertFalse(node2.isTry());
1531:       assertFalse(node2.isCase());
1532:       assertFalse(node2.isReturn());
1533:       assertFalse(node2.hasMoreThanOneChild());
1534:       assertFalse(node2.isAssignAdd());
1535:       assertFalse(node2.isContinue());
1536:       assertFalse(node2.isLabel());
1537:       assertFalse(node2.isOr());
1538:       assertEquals((-1), node2.getSourcePosition());
1539:       assertFalse(node2.isDec());
1540:       assertFalse(node2.isTypeOf());
1541:       assertFalse(node2.isGetElem());
1542:       assertFalse(node2.isLabelName());
1543:       assertEquals((-1), node2.getLineno());
1544:       assertFalse(node2.isCast());
1545:       assertFalse(node2.isVar());
1546:       assertFalse(node2.isAdd());
1547:       assertFalse(node2.isSetterDef());
1548:       assertFalse(node2.isDo());
1549:       assertFalse(node2.isNew());
1550:       assertFalse(node2.isAnd());
1551:       assertFalse(node2.isObjectLit());
1552:       assertEquals(40, node2.getType());
1553:       assertFalse(node2.isComma());
1554:       assertFalse(node2.isNot());
1555:       assertFalse(node2.isBreak());
1556:       assertFalse(node2.isNull());
1557:       assertFalse(node2.isVoid());
1558:       assertFalse(node2.isName());
1559:       assertFalse(node2.isCall());
1560:       assertFalse(node2.isExprResult());
1561:       assertFalse(node2.isAssign());
1562:       assertFalse(node2.isDebugger());
1563:       assertFalse(node2.hasChildren());
1564:       assertFalse(node2.isWhile());
1565:       assertFalse(node2.isGetProp());
1566:       assertFalse(node0.isSetterDef());
1567:       assertFalse(node0.isParamList());
1568:       assertFalse(node0.isNull());
1569:       assertEquals(0, node0.getChildCount());
1570:       assertFalse(node0.isCatch());
1571:       assertFalse(node0.isCall());
1572:       assertFalse(node0.isStringKey());
1573:       assertFalse(node0.isName());
1574:       assertFalse(node0.isRegExp());
1575:       assertFalse(node0.isVoid());
1576:       assertFalse(node0.isBlock());
1577:       assertFalse(node0.isDebugger());
1578:       assertFalse(node0.hasMoreThanOneChild());
1579:       assertFalse(node0.isWhile());
1580:       assertFalse(node0.isReturn());
1581:       assertFalse(node0.isFor());
1582:       assertFalse(node0.isTry());
1583:       assertTrue(node0.isString());
1584:       assertFalse(node0.isTypeOf());
1585:       assertFalse(node0.isDec());
1586:       assertFalse(node0.hasChildren());
1587:       assertFalse(node0.isLabel());
1588:       assertFalse(node0.isGetterDef());
1589:       assertFalse(node0.isEmpty());
1590:       assertFalse(node0.isAssign());
1591:       assertFalse(node0.isOr());
1592:       assertFalse(node0.isNumber());
1593:       assertFalse(node0.isGetElem());
1594:       assertFalse(node0.isArrayLit());
1595:       assertFalse(node0.isLabelName());
1596:       assertFalse(node0.isDelProp());
1597:       assertFalse(node0.isSwitch());
1598:       assertFalse(node0.isTrue());
1599:       assertFalse(node0.isNew());
1600:       assertFalse(node0.isAdd());
1601:       assertFalse(node0.isVar());
1602:       assertFalse(node0.isDo());
1603:       assertFalse(node0.isAssignAdd());
1604:       assertFalse(node0.isDefaultCase());
1605:       assertFalse(node0.isThis());
1606:       assertFalse(node0.isComma());
1607:       assertFalse(node0.isBreak());
1608:       assertFalse(node0.isGetProp());
1609:       assertFalse(node0.isInstanceOf());
1610:       assertFalse(node0.isFalse());
1611:       assertFalse(node0.isObjectLit());
1612:       assertFalse(node0.isAnd());
1613:       assertFalse(node0.isExprResult());
1614:       assertFalse(node0.isScript());
1615:       assertEquals((-1), node0.getCharno());
1616:       assertFalse(node0.isWith());
1617:       assertFalse(node0.isNot());
1618:       assertFalse(node0.isHook());
1619:       assertFalse(node0.isCase());
1620:       assertFalse(node0.hasOneChild());
1621:       assertFalse(node0.isNE());
1622:       assertEquals((-1), node0.getSourcePosition());
1623:       assertFalse(node0.isIn());
1624:       assertFalse(node0.isCast());
1625:       assertEquals((-1), node0.getLineno());
1626:       assertFalse(node0.isIf());
1627:       assertFalse(node0.isFunction());
1628:       assertFalse(node0.isInc());
1629:       assertFalse(node0.isContinue());
1630:       assertFalse(node0.isThrow());
1631:       assertEquals(40, node0.getType());
1632:       assertNotNull(node2);
1633:   }
1634: }
RegularFileObject[/tmp/EvoSuite_49_1629223327672/com/google/javascript/rhino/Node_49_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:08 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_49_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_49_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_49_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.JSTypeExpression",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.JSDocInfo$Marker",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.FluentIterable",
352:       "com.google.common.collect.Iterables$2",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 18:02:08.377 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertNotNull(node0);

boolean boolean0 = node0.mayMutateArguments();
assertTrue(boolean0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());

String string0 = node0.toString();
assertEquals("STRING ", string0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertNotNull(string0);

Iterable<Node> iterable0 = node0.children();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertNotNull(iterable0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

JSType[] jSTypeArray0 = new JSType[0];
Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertFalse(node1.equals((Object)node0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.isOr());
assertEquals(83, node1.getType());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertTrue(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals(0, jSTypeArray0.length);
assertNotNull(node1);

boolean boolean1 = node0.isEquivalentTo(node1, false, false, false);
assertFalse(boolean1);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isRegExp());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isCase());
assertFalse(node1.isOr());
assertEquals(83, node1.getType());
assertFalse(node1.isLabel());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertTrue(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertEquals(0, jSTypeArray0.length);

boolean boolean2 = node0.isNoSideEffectsCall();
assertFalse(boolean2);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());

node0.addSuppression("");
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());

int int0 = node0.getSourcePosition();
assertEquals((-1), int0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());

boolean boolean3 = node0.isObjectLit();
assertFalse(boolean3);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3 == boolean0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());

int int1 = node0.getIntProp(4906);
assertEquals(0, int1);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertFalse(int1 == int0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());

boolean boolean4 = node0.isCase();
assertFalse(boolean4);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());

Node node2 = node0.cloneTree();
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertNotSame(node2, node0);
assertNotSame(node0, node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.isIn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isSwitch());
assertFalse(node2.isNE());
assertFalse(node2.isArrayLit());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isInc());
assertFalse(node2.isInstanceOf());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isParamList());
assertFalse(node2.isHook());
assertFalse(node2.hasOneChild());
assertFalse(node2.isStringKey());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isGetterDef());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals(40, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isNot());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isVoid());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isAssign());
assertFalse(node2.isDebugger());
assertFalse(node2.hasChildren());
assertFalse(node2.isWhile());
assertFalse(node2.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertNotNull(node2);


[MASTER] 18:02:14.444 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_72_1629223334295/com/google/javascript/rhino/Node_72_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_72_1629223334295/com/google/javascript/rhino/Node_72_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:14.444 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:14.444 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:14.445 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 705
[MASTER] 18:02:14.447 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_72_1629223334295/com/google/javascript/rhino/Node_72_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:14 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.SimpleSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_72_tmp__ESTest extends Node_72_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("Nw5#j.#GSC`@nlQ)1a", (-1142), (-59));
22:       assertEquals(4095, Node.COLUMN_MASK);
23:       assertEquals(55, Node.INFERRED_FUNCTION);
24:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
25:       assertEquals(48, Node.DIRECTIVES);
26:       assertEquals(43, Node.IS_CONSTANT_NAME);
27:       assertEquals(36, Node.QUOTED_PROP);
28:       assertEquals(39, Node.EMPTY_BLOCK);
29:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
30:       assertEquals(8, Node.FLAG_NO_THROWS);
31:       assertEquals(50, Node.FREE_CALL);
32:       assertEquals(40, Node.ORIGINALNAME_PROP);
33:       assertEquals(53, Node.INPUT_ID);
34:       assertEquals(57, Node.LAST_PROP);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
37:       assertEquals(30, Node.VAR_ARGS_NAME);
38:       assertEquals(2, Node.POST_FLAG);
39:       assertEquals(51, Node.STATIC_SOURCE_FILE);
40:       assertEquals(12, Node.COLUMN_BITS);
41:       assertEquals(46, Node.IS_NAMESPACE);
42:       assertEquals(1, Node.DECR_FLAG);
43:       assertEquals(37, Node.OPT_ARG_NAME);
44:       assertEquals(49, Node.DIRECT_EVAL);
45:       assertEquals(32, Node.INCRDECR_PROP);
46:       assertEquals(56, Node.CHANGE_TIME);
47:       assertEquals(15, Node.NO_SIDE_EFFECTS);
48:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
49:       assertEquals(29, Node.JSDOC_INFO_PROP);
50:       assertEquals(54, Node.SLASH_V);
51:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
52:       assertEquals(52, Node.LENGTH);
53:       assertEquals(57, Node.REFLECTED_OBJECT);
54:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
55:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
56:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
57:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
58:       assertFalse(node0.isGetElem());
59:       assertFalse(node0.isCast());
60:       assertFalse(node0.isLabelName());
61:       assertFalse(node0.hasOneChild());
62:       assertFalse(node0.isScript());
63:       assertFalse(node0.isNumber());
64:       assertFalse(node0.isNot());
65:       assertFalse(node0.isOr());
66:       assertEquals((-1), node0.getSourcePosition());
67:       assertFalse(node0.isObjectLit());
68:       assertFalse(node0.hasMoreThanOneChild());
69:       assertFalse(node0.isInstanceOf());
70:       assertFalse(node0.isWhile());
71:       assertEquals((-1), node0.getLineno());
72:       assertFalse(node0.isExprResult());
73:       assertFalse(node0.isThis());
74:       assertTrue(node0.isString());
75:       assertFalse(node0.isBlock());
76:       assertFalse(node0.hasChildren());
77:       assertFalse(node0.isWith());
78:       assertFalse(node0.isReturn());
79:       assertFalse(node0.isAssign());
80:       assertFalse(node0.isTypeOf());
81:       assertFalse(node0.isComma());
82:       assertFalse(node0.isDec());
83:       assertFalse(node0.isName());
84:       assertFalse(node0.isCall());
85:       assertFalse(node0.isVar());
86:       assertFalse(node0.isStringKey());
87:       assertFalse(node0.isBreak());
88:       assertFalse(node0.isNew());
89:       assertEquals((-1), node0.getCharno());
90:       assertFalse(node0.isSwitch());
91:       assertFalse(node0.isNull());
92:       assertFalse(node0.isAdd());
93:       assertFalse(node0.isParamList());
94:       assertFalse(node0.isDefaultCase());
95:       assertFalse(node0.isDo());
96:       assertFalse(node0.isAssignAdd());
97:       assertEquals(0, node0.getChildCount());
98:       assertFalse(node0.isLabel());
99:       assertFalse(node0.isFor());
100:       assertFalse(node0.isEmpty());
101:       assertFalse(node0.isIf());
102:       assertFalse(node0.isDelProp());
103:       assertFalse(node0.isTry());
104:       assertFalse(node0.isArrayLit());
105:       assertFalse(node0.isDebugger());
106:       assertFalse(node0.isVoid());
107:       assertFalse(node0.isTrue());
108:       assertFalse(node0.isNE());
109:       assertFalse(node0.isIn());
110:       assertFalse(node0.isGetterDef());
111:       assertFalse(node0.isCatch());
112:       assertFalse(node0.isCase());
113:       assertFalse(node0.isHook());
114:       assertFalse(node0.isRegExp());
115:       assertFalse(node0.isThrow());
116:       assertFalse(node0.isFalse());
117:       assertFalse(node0.isGetProp());
118:       assertFalse(node0.isInc());
119:       assertFalse(node0.isSetterDef());
120:       assertFalse(node0.isAnd());
121:       assertFalse(node0.isContinue());
122:       assertEquals(40, node0.getType());
123:       assertFalse(node0.isFunction());
124:       assertNotNull(node0);
125:       
126:       boolean boolean0 = node0.isUnscopedQualifiedName();
127:       assertFalse(boolean0);
128:       assertEquals(4095, Node.COLUMN_MASK);
129:       assertEquals(55, Node.INFERRED_FUNCTION);
130:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
131:       assertEquals(48, Node.DIRECTIVES);
132:       assertEquals(43, Node.IS_CONSTANT_NAME);
133:       assertEquals(36, Node.QUOTED_PROP);
134:       assertEquals(39, Node.EMPTY_BLOCK);
135:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
136:       assertEquals(8, Node.FLAG_NO_THROWS);
137:       assertEquals(50, Node.FREE_CALL);
138:       assertEquals(40, Node.ORIGINALNAME_PROP);
139:       assertEquals(53, Node.INPUT_ID);
140:       assertEquals(57, Node.LAST_PROP);
141:       assertEquals(47, Node.IS_DISPATCHER);
142:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
143:       assertEquals(30, Node.VAR_ARGS_NAME);
144:       assertEquals(2, Node.POST_FLAG);
145:       assertEquals(51, Node.STATIC_SOURCE_FILE);
146:       assertEquals(12, Node.COLUMN_BITS);
147:       assertEquals(46, Node.IS_NAMESPACE);
148:       assertEquals(1, Node.DECR_FLAG);
149:       assertEquals(37, Node.OPT_ARG_NAME);
150:       assertEquals(49, Node.DIRECT_EVAL);
151:       assertEquals(32, Node.INCRDECR_PROP);
152:       assertEquals(56, Node.CHANGE_TIME);
153:       assertEquals(15, Node.NO_SIDE_EFFECTS);
154:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
155:       assertEquals(29, Node.JSDOC_INFO_PROP);
156:       assertEquals(54, Node.SLASH_V);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(52, Node.LENGTH);
159:       assertEquals(57, Node.REFLECTED_OBJECT);
160:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
161:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
162:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
163:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
164:       assertFalse(node0.isGetElem());
165:       assertFalse(node0.isCast());
166:       assertFalse(node0.isLabelName());
167:       assertFalse(node0.hasOneChild());
168:       assertFalse(node0.isScript());
169:       assertFalse(node0.isNumber());
170:       assertFalse(node0.isNot());
171:       assertFalse(node0.isOr());
172:       assertEquals((-1), node0.getSourcePosition());
173:       assertFalse(node0.isObjectLit());
174:       assertFalse(node0.hasMoreThanOneChild());
175:       assertFalse(node0.isInstanceOf());
176:       assertFalse(node0.isWhile());
177:       assertEquals((-1), node0.getLineno());
178:       assertFalse(node0.isExprResult());
179:       assertFalse(node0.isThis());
180:       assertTrue(node0.isString());
181:       assertFalse(node0.isBlock());
182:       assertFalse(node0.hasChildren());
183:       assertFalse(node0.isWith());
184:       assertFalse(node0.isReturn());
185:       assertFalse(node0.isAssign());
186:       assertFalse(node0.isTypeOf());
187:       assertFalse(node0.isComma());
188:       assertFalse(node0.isDec());
189:       assertFalse(node0.isName());
190:       assertFalse(node0.isCall());
191:       assertFalse(node0.isVar());
192:       assertFalse(node0.isStringKey());
193:       assertFalse(node0.isBreak());
194:       assertFalse(node0.isNew());
195:       assertEquals((-1), node0.getCharno());
196:       assertFalse(node0.isSwitch());
197:       assertFalse(node0.isNull());
198:       assertFalse(node0.isAdd());
199:       assertFalse(node0.isParamList());
200:       assertFalse(node0.isDefaultCase());
201:       assertFalse(node0.isDo());
202:       assertFalse(node0.isAssignAdd());
203:       assertEquals(0, node0.getChildCount());
204:       assertFalse(node0.isLabel());
205:       assertFalse(node0.isFor());
206:       assertFalse(node0.isEmpty());
207:       assertFalse(node0.isIf());
208:       assertFalse(node0.isDelProp());
209:       assertFalse(node0.isTry());
210:       assertFalse(node0.isArrayLit());
211:       assertFalse(node0.isDebugger());
212:       assertFalse(node0.isVoid());
213:       assertFalse(node0.isTrue());
214:       assertFalse(node0.isNE());
215:       assertFalse(node0.isIn());
216:       assertFalse(node0.isGetterDef());
217:       assertFalse(node0.isCatch());
218:       assertFalse(node0.isCase());
219:       assertFalse(node0.isHook());
220:       assertFalse(node0.isRegExp());
221:       assertFalse(node0.isThrow());
222:       assertFalse(node0.isFalse());
223:       assertFalse(node0.isGetProp());
224:       assertFalse(node0.isInc());
225:       assertFalse(node0.isSetterDef());
226:       assertFalse(node0.isAnd());
227:       assertFalse(node0.isContinue());
228:       assertEquals(40, node0.getType());
229:       assertFalse(node0.isFunction());
230:       
231:       Node node1 = Node.newString(98, "");
232:       assertEquals(43, Node.IS_CONSTANT_NAME);
233:       assertEquals(36, Node.QUOTED_PROP);
234:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
235:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
236:       assertEquals(53, Node.INPUT_ID);
237:       assertEquals(55, Node.INFERRED_FUNCTION);
238:       assertEquals(39, Node.EMPTY_BLOCK);
239:       assertEquals(29, Node.JSDOC_INFO_PROP);
240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
241:       assertEquals(47, Node.IS_DISPATCHER);
242:       assertEquals(2, Node.POST_FLAG);
243:       assertEquals(50, Node.FREE_CALL);
244:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
245:       assertEquals(46, Node.IS_NAMESPACE);
246:       assertEquals(40, Node.ORIGINALNAME_PROP);
247:       assertEquals(15, Node.NO_SIDE_EFFECTS);
248:       assertEquals(57, Node.LAST_PROP);
249:       assertEquals(30, Node.VAR_ARGS_NAME);
250:       assertEquals(49, Node.DIRECT_EVAL);
251:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
252:       assertEquals(12, Node.COLUMN_BITS);
253:       assertEquals(54, Node.SLASH_V);
254:       assertEquals(51, Node.STATIC_SOURCE_FILE);
255:       assertEquals(57, Node.REFLECTED_OBJECT);
256:       assertEquals(52, Node.LENGTH);
257:       assertEquals(32, Node.INCRDECR_PROP);
258:       assertEquals(1, Node.DECR_FLAG);
259:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
260:       assertEquals(56, Node.CHANGE_TIME);
261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
262:       assertEquals(8, Node.FLAG_NO_THROWS);
263:       assertEquals(48, Node.DIRECTIVES);
264:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
265:       assertEquals(4095, Node.COLUMN_MASK);
266:       assertEquals(37, Node.OPT_ARG_NAME);
267:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
268:       assertNotSame(node1, node0);
269:       assertFalse(node1.equals((Object)node0));
270:       assertFalse(node1.isIf());
271:       assertFalse(node1.isDelProp());
272:       assertFalse(node1.isNE());
273:       assertFalse(node1.isFor());
274:       assertFalse(node1.isCase());
275:       assertFalse(node1.isIn());
276:       assertFalse(node1.isGetterDef());
277:       assertFalse(node1.isEmpty());
278:       assertFalse(node1.isString());
279:       assertFalse(node1.isVoid());
280:       assertFalse(node1.isTrue());
281:       assertFalse(node1.isRegExp());
282:       assertFalse(node1.isTry());
283:       assertFalse(node1.isBreak());
284:       assertFalse(node1.isCatch());
285:       assertFalse(node1.isThis());
286:       assertFalse(node1.isNull());
287:       assertFalse(node1.isStringKey());
288:       assertFalse(node1.isParamList());
289:       assertFalse(node1.isScript());
290:       assertFalse(node1.isAdd());
291:       assertEquals((-1), node1.getCharno());
292:       assertFalse(node1.isNew());
293:       assertFalse(node1.isDefaultCase());
294:       assertFalse(node1.isSwitch());
295:       assertFalse(node1.isVar());
296:       assertFalse(node1.isLabelName());
297:       assertFalse(node1.isArrayLit());
298:       assertEquals(0, node1.getChildCount());
299:       assertFalse(node1.isLabel());
300:       assertFalse(node1.isOr());
301:       assertEquals((-1), node1.getLineno());
302:       assertEquals((-1), node1.getSourcePosition());
303:       assertFalse(node1.isDec());
304:       assertFalse(node1.hasChildren());
305:       assertFalse(node1.isReturn());
306:       assertFalse(node1.isAssignAdd());
307:       assertFalse(node1.isDo());
308:       assertFalse(node1.hasOneChild());
309:       assertFalse(node1.isNumber());
310:       assertFalse(node1.isBlock());
311:       assertFalse(node1.isExprResult());
312:       assertFalse(node1.isWhile());
313:       assertFalse(node1.isName());
314:       assertFalse(node1.isCall());
315:       assertFalse(node1.isGetElem());
316:       assertFalse(node1.isAssign());
317:       assertFalse(node1.isWith());
318:       assertFalse(node1.isTypeOf());
319:       assertFalse(node1.hasMoreThanOneChild());
320:       assertTrue(node1.isHook());
321:       assertFalse(node1.isInstanceOf());
322:       assertFalse(node1.isGetProp());
323:       assertFalse(node1.isSetterDef());
324:       assertFalse(node1.isComma());
325:       assertFalse(node1.isObjectLit());
326:       assertFalse(node1.isNot());
327:       assertFalse(node1.isDebugger());
328:       assertFalse(node1.isFunction());
329:       assertFalse(node1.isInc());
330:       assertFalse(node1.isThrow());
331:       assertFalse(node1.isAnd());
332:       assertFalse(node1.isContinue());
333:       assertFalse(node1.isFalse());
334:       assertFalse(node1.isCast());
335:       assertEquals(98, node1.getType());
336:       assertNotNull(node1);
337:       
338:       int int0 = node1.getChangeTime();
339:       assertEquals(0, int0);
340:       assertEquals(43, Node.IS_CONSTANT_NAME);
341:       assertEquals(36, Node.QUOTED_PROP);
342:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
343:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
344:       assertEquals(53, Node.INPUT_ID);
345:       assertEquals(55, Node.INFERRED_FUNCTION);
346:       assertEquals(39, Node.EMPTY_BLOCK);
347:       assertEquals(29, Node.JSDOC_INFO_PROP);
348:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
349:       assertEquals(47, Node.IS_DISPATCHER);
350:       assertEquals(2, Node.POST_FLAG);
351:       assertEquals(50, Node.FREE_CALL);
352:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
353:       assertEquals(46, Node.IS_NAMESPACE);
354:       assertEquals(40, Node.ORIGINALNAME_PROP);
355:       assertEquals(15, Node.NO_SIDE_EFFECTS);
356:       assertEquals(57, Node.LAST_PROP);
357:       assertEquals(30, Node.VAR_ARGS_NAME);
358:       assertEquals(49, Node.DIRECT_EVAL);
359:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
360:       assertEquals(12, Node.COLUMN_BITS);
361:       assertEquals(54, Node.SLASH_V);
362:       assertEquals(51, Node.STATIC_SOURCE_FILE);
363:       assertEquals(57, Node.REFLECTED_OBJECT);
364:       assertEquals(52, Node.LENGTH);
365:       assertEquals(32, Node.INCRDECR_PROP);
366:       assertEquals(1, Node.DECR_FLAG);
367:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
368:       assertEquals(56, Node.CHANGE_TIME);
369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
370:       assertEquals(8, Node.FLAG_NO_THROWS);
371:       assertEquals(48, Node.DIRECTIVES);
372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
373:       assertEquals(4095, Node.COLUMN_MASK);
374:       assertEquals(37, Node.OPT_ARG_NAME);
375:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
376:       assertNotSame(node1, node0);
377:       assertFalse(node1.equals((Object)node0));
378:       assertFalse(node1.isIf());
379:       assertFalse(node1.isDelProp());
380:       assertFalse(node1.isNE());
381:       assertFalse(node1.isFor());
382:       assertFalse(node1.isCase());
383:       assertFalse(node1.isIn());
384:       assertFalse(node1.isGetterDef());
385:       assertFalse(node1.isEmpty());
386:       assertFalse(node1.isString());
387:       assertFalse(node1.isVoid());
388:       assertFalse(node1.isTrue());
389:       assertFalse(node1.isRegExp());
390:       assertFalse(node1.isTry());
391:       assertFalse(node1.isBreak());
392:       assertFalse(node1.isCatch());
393:       assertFalse(node1.isThis());
394:       assertFalse(node1.isNull());
395:       assertFalse(node1.isStringKey());
396:       assertFalse(node1.isParamList());
397:       assertFalse(node1.isScript());
398:       assertFalse(node1.isAdd());
399:       assertEquals((-1), node1.getCharno());
400:       assertFalse(node1.isNew());
401:       assertFalse(node1.isDefaultCase());
402:       assertFalse(node1.isSwitch());
403:       assertFalse(node1.isVar());
404:       assertFalse(node1.isLabelName());
405:       assertFalse(node1.isArrayLit());
406:       assertEquals(0, node1.getChildCount());
407:       assertFalse(node1.isLabel());
408:       assertFalse(node1.isOr());
409:       assertEquals((-1), node1.getLineno());
410:       assertEquals((-1), node1.getSourcePosition());
411:       assertFalse(node1.isDec());
412:       assertFalse(node1.hasChildren());
413:       assertFalse(node1.isReturn());
414:       assertFalse(node1.isAssignAdd());
415:       assertFalse(node1.isDo());
416:       assertFalse(node1.hasOneChild());
417:       assertFalse(node1.isNumber());
418:       assertFalse(node1.isBlock());
419:       assertFalse(node1.isExprResult());
420:       assertFalse(node1.isWhile());
421:       assertFalse(node1.isName());
422:       assertFalse(node1.isCall());
423:       assertFalse(node1.isGetElem());
424:       assertFalse(node1.isAssign());
425:       assertFalse(node1.isWith());
426:       assertFalse(node1.isTypeOf());
427:       assertFalse(node1.hasMoreThanOneChild());
428:       assertTrue(node1.isHook());
429:       assertFalse(node1.isInstanceOf());
430:       assertFalse(node1.isGetProp());
431:       assertFalse(node1.isSetterDef());
432:       assertFalse(node1.isComma());
433:       assertFalse(node1.isObjectLit());
434:       assertFalse(node1.isNot());
435:       assertFalse(node1.isDebugger());
436:       assertFalse(node1.isFunction());
437:       assertFalse(node1.isInc());
438:       assertFalse(node1.isThrow());
439:       assertFalse(node1.isAnd());
440:       assertFalse(node1.isContinue());
441:       assertFalse(node1.isFalse());
442:       assertFalse(node1.isCast());
443:       assertEquals(98, node1.getType());
444:       
445:       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("lk;-\tjZ,", true);
446:       assertEquals("lk;-\tjZ,", simpleSourceFile0.toString());
447:       assertTrue(simpleSourceFile0.isExtern());
448:       assertEquals("lk;-\tjZ,", simpleSourceFile0.getName());
449:       assertNotNull(simpleSourceFile0);
450:       
451:       Node node2 = Node.newNumber(1.0);
452:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
453:       assertEquals(8, Node.FLAG_NO_THROWS);
454:       assertEquals(39, Node.EMPTY_BLOCK);
455:       assertEquals(4095, Node.COLUMN_MASK);
456:       assertEquals(55, Node.INFERRED_FUNCTION);
457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
458:       assertEquals(52, Node.LENGTH);
459:       assertEquals(57, Node.REFLECTED_OBJECT);
460:       assertEquals(53, Node.INPUT_ID);
461:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
462:       assertEquals(29, Node.JSDOC_INFO_PROP);
463:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
464:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
465:       assertEquals(49, Node.DIRECT_EVAL);
466:       assertEquals(37, Node.OPT_ARG_NAME);
467:       assertEquals(36, Node.QUOTED_PROP);
468:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
469:       assertEquals(48, Node.DIRECTIVES);
470:       assertEquals(56, Node.CHANGE_TIME);
471:       assertEquals(32, Node.INCRDECR_PROP);
472:       assertEquals(46, Node.IS_NAMESPACE);
473:       assertEquals(51, Node.STATIC_SOURCE_FILE);
474:       assertEquals(57, Node.LAST_PROP);
475:       assertEquals(15, Node.NO_SIDE_EFFECTS);
476:       assertEquals(47, Node.IS_DISPATCHER);
477:       assertEquals(2, Node.POST_FLAG);
478:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
479:       assertEquals(30, Node.VAR_ARGS_NAME);
480:       assertEquals(1, Node.DECR_FLAG);
481:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
482:       assertEquals(12, Node.COLUMN_BITS);
483:       assertEquals(40, Node.ORIGINALNAME_PROP);
484:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
485:       assertEquals(50, Node.FREE_CALL);
486:       assertEquals(54, Node.SLASH_V);
487:       assertEquals(43, Node.IS_CONSTANT_NAME);
488:       assertFalse(node2.equals((Object)node1));
489:       assertFalse(node2.equals((Object)node0));
490:       assertFalse(node2.isArrayLit());
491:       assertFalse(node2.isGetterDef());
492:       assertFalse(node2.isEmpty());
493:       assertFalse(node2.isFunction());
494:       assertTrue(node2.isNumber());
495:       assertFalse(node2.isFor());
496:       assertFalse(node2.isTry());
497:       assertFalse(node2.isDefaultCase());
498:       assertFalse(node2.isCase());
499:       assertFalse(node2.isString());
500:       assertEquals(0, node2.getChildCount());
501:       assertFalse(node2.isParamList());
502:       assertFalse(node2.isDebugger());
503:       assertEquals((-1), node2.getCharno());
504:       assertFalse(node2.isStringKey());
505:       assertFalse(node2.isSwitch());
506:       assertFalse(node2.isThrow());
507:       assertFalse(node2.isHook());
508:       assertFalse(node2.isFalse());
509:       assertFalse(node2.isThis());
510:       assertFalse(node2.isInc());
511:       assertFalse(node2.isSetterDef());
512:       assertFalse(node2.isBlock());
513:       assertFalse(node2.isCatch());
514:       assertEquals(39, node2.getType());
515:       assertFalse(node2.isInstanceOf());
516:       assertFalse(node2.isRegExp());
517:       assertFalse(node2.isWith());
518:       assertFalse(node2.hasMoreThanOneChild());
519:       assertFalse(node2.isIn());
520:       assertFalse(node2.isNE());
521:       assertEquals((-1), node2.getLineno());
522:       assertFalse(node2.isIf());
523:       assertFalse(node2.isCast());
524:       assertFalse(node2.hasOneChild());
525:       assertFalse(node2.isGetElem());
526:       assertFalse(node2.isAssign());
527:       assertFalse(node2.isTypeOf());
528:       assertFalse(node2.isScript());
529:       assertFalse(node2.isDec());
530:       assertFalse(node2.hasChildren());
531:       assertFalse(node2.isLabel());
532:       assertFalse(node2.isReturn());
533:       assertFalse(node2.isAssignAdd());
534:       assertFalse(node2.isObjectLit());
535:       assertFalse(node2.isNot());
536:       assertFalse(node2.isContinue());
537:       assertEquals((-1), node2.getSourcePosition());
538:       assertFalse(node2.isLabelName());
539:       assertFalse(node2.isAnd());
540:       assertFalse(node2.isCall());
541:       assertFalse(node2.isVar());
542:       assertFalse(node2.isAdd());
543:       assertFalse(node2.isComma());
544:       assertFalse(node2.isNew());
545:       assertFalse(node2.isGetProp());
546:       assertFalse(node2.isWhile());
547:       assertFalse(node2.isDo());
548:       assertFalse(node2.isOr());
549:       assertFalse(node2.isExprResult());
550:       assertFalse(node2.isTrue());
551:       assertFalse(node2.isVoid());
552:       assertFalse(node2.isNull());
553:       assertFalse(node2.isBreak());
554:       assertFalse(node2.isDelProp());
555:       assertFalse(node2.isName());
556:       assertNotNull(node2);
557:       
558:       boolean boolean1 = node2.isVarArgs();
559:       assertFalse(boolean1);
560:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
561:       assertEquals(8, Node.FLAG_NO_THROWS);
562:       assertEquals(39, Node.EMPTY_BLOCK);
563:       assertEquals(4095, Node.COLUMN_MASK);
564:       assertEquals(55, Node.INFERRED_FUNCTION);
565:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
566:       assertEquals(52, Node.LENGTH);
567:       assertEquals(57, Node.REFLECTED_OBJECT);
568:       assertEquals(53, Node.INPUT_ID);
569:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
570:       assertEquals(29, Node.JSDOC_INFO_PROP);
571:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
572:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
573:       assertEquals(49, Node.DIRECT_EVAL);
574:       assertEquals(37, Node.OPT_ARG_NAME);
575:       assertEquals(36, Node.QUOTED_PROP);
576:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
577:       assertEquals(48, Node.DIRECTIVES);
578:       assertEquals(56, Node.CHANGE_TIME);
579:       assertEquals(32, Node.INCRDECR_PROP);
580:       assertEquals(46, Node.IS_NAMESPACE);
581:       assertEquals(51, Node.STATIC_SOURCE_FILE);
582:       assertEquals(57, Node.LAST_PROP);
583:       assertEquals(15, Node.NO_SIDE_EFFECTS);
584:       assertEquals(47, Node.IS_DISPATCHER);
585:       assertEquals(2, Node.POST_FLAG);
586:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
587:       assertEquals(30, Node.VAR_ARGS_NAME);
588:       assertEquals(1, Node.DECR_FLAG);
589:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
590:       assertEquals(12, Node.COLUMN_BITS);
591:       assertEquals(40, Node.ORIGINALNAME_PROP);
592:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
593:       assertEquals(50, Node.FREE_CALL);
594:       assertEquals(54, Node.SLASH_V);
595:       assertEquals(43, Node.IS_CONSTANT_NAME);
596:       assertFalse(node2.equals((Object)node1));
597:       assertFalse(node2.equals((Object)node0));
598:       assertTrue(boolean1 == boolean0);
599:       assertFalse(node2.isArrayLit());
600:       assertFalse(node2.isGetterDef());
601:       assertFalse(node2.isEmpty());
602:       assertFalse(node2.isFunction());
603:       assertTrue(node2.isNumber());
604:       assertFalse(node2.isFor());
605:       assertFalse(node2.isTry());
606:       assertFalse(node2.isDefaultCase());
607:       assertFalse(node2.isCase());
608:       assertFalse(node2.isString());
609:       assertEquals(0, node2.getChildCount());
610:       assertFalse(node2.isParamList());
611:       assertFalse(node2.isDebugger());
612:       assertEquals((-1), node2.getCharno());
613:       assertFalse(node2.isStringKey());
614:       assertFalse(node2.isSwitch());
615:       assertFalse(node2.isThrow());
616:       assertFalse(node2.isHook());
617:       assertFalse(node2.isFalse());
618:       assertFalse(node2.isThis());
619:       assertFalse(node2.isInc());
620:       assertFalse(node2.isSetterDef());
621:       assertFalse(node2.isBlock());
622:       assertFalse(node2.isCatch());
623:       assertEquals(39, node2.getType());
624:       assertFalse(node2.isInstanceOf());
625:       assertFalse(node2.isRegExp());
626:       assertFalse(node2.isWith());
627:       assertFalse(node2.hasMoreThanOneChild());
628:       assertFalse(node2.isIn());
629:       assertFalse(node2.isNE());
630:       assertEquals((-1), node2.getLineno());
631:       assertFalse(node2.isIf());
632:       assertFalse(node2.isCast());
633:       assertFalse(node2.hasOneChild());
634:       assertFalse(node2.isGetElem());
635:       assertFalse(node2.isAssign());
636:       assertFalse(node2.isTypeOf());
637:       assertFalse(node2.isScript());
638:       assertFalse(node2.isDec());
639:       assertFalse(node2.hasChildren());
640:       assertFalse(node2.isLabel());
641:       assertFalse(node2.isReturn());
642:       assertFalse(node2.isAssignAdd());
643:       assertFalse(node2.isObjectLit());
644:       assertFalse(node2.isNot());
645:       assertFalse(node2.isContinue());
646:       assertEquals((-1), node2.getSourcePosition());
647:       assertFalse(node2.isLabelName());
648:       assertFalse(node2.isAnd());
649:       assertFalse(node2.isCall());
650:       assertFalse(node2.isVar());
651:       assertFalse(node2.isAdd());
652:       assertFalse(node2.isComma());
653:       assertFalse(node2.isNew());
654:       assertFalse(node2.isGetProp());
655:       assertFalse(node2.isWhile());
656:       assertFalse(node2.isDo());
657:       assertFalse(node2.isOr());
658:       assertFalse(node2.isExprResult());
659:       assertFalse(node2.isTrue());
660:       assertFalse(node2.isVoid());
661:       assertFalse(node2.isNull());
662:       assertFalse(node2.isBreak());
663:       assertFalse(node2.isDelProp());
664:       assertFalse(node2.isName());
665:       
666:       Iterable<Node> iterable0 = node2.children();
667:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
668:       assertEquals(8, Node.FLAG_NO_THROWS);
669:       assertEquals(39, Node.EMPTY_BLOCK);
670:       assertEquals(4095, Node.COLUMN_MASK);
671:       assertEquals(55, Node.INFERRED_FUNCTION);
672:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
673:       assertEquals(52, Node.LENGTH);
674:       assertEquals(57, Node.REFLECTED_OBJECT);
675:       assertEquals(53, Node.INPUT_ID);
676:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
677:       assertEquals(29, Node.JSDOC_INFO_PROP);
678:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
679:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
680:       assertEquals(49, Node.DIRECT_EVAL);
681:       assertEquals(37, Node.OPT_ARG_NAME);
682:       assertEquals(36, Node.QUOTED_PROP);
683:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
684:       assertEquals(48, Node.DIRECTIVES);
685:       assertEquals(56, Node.CHANGE_TIME);
686:       assertEquals(32, Node.INCRDECR_PROP);
687:       assertEquals(46, Node.IS_NAMESPACE);
688:       assertEquals(51, Node.STATIC_SOURCE_FILE);
689:       assertEquals(57, Node.LAST_PROP);
690:       assertEquals(15, Node.NO_SIDE_EFFECTS);
691:       assertEquals(47, Node.IS_DISPATCHER);
692:       assertEquals(2, Node.POST_FLAG);
693:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
694:       assertEquals(30, Node.VAR_ARGS_NAME);
695:       assertEquals(1, Node.DECR_FLAG);
696:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
697:       assertEquals(12, Node.COLUMN_BITS);
698:       assertEquals(40, Node.ORIGINALNAME_PROP);
699:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
700:       assertEquals(50, Node.FREE_CALL);
701:       assertEquals(54, Node.SLASH_V);
702:       assertEquals(43, Node.IS_CONSTANT_NAME);
703:       assertFalse(node2.equals((Object)node1));
704:       assertFalse(node2.equals((Object)node0));
705:       assertFalse(iterable0.contains(node1));
706:       assertFalse(node2.isArrayLit());
707:       assertFalse(node2.isGetterDef());
708:       assertFalse(node2.isEmpty());
709:       assertFalse(node2.isFunction());
710:       assertTrue(node2.isNumber());
711:       assertFalse(node2.isFor());
712:       assertFalse(node2.isTry());
713:       assertFalse(node2.isDefaultCase());
714:       assertFalse(node2.isCase());
715:       assertFalse(node2.isString());
716:       assertEquals(0, node2.getChildCount());
717:       assertFalse(node2.isParamList());
718:       assertFalse(node2.isDebugger());
719:       assertEquals((-1), node2.getCharno());
720:       assertFalse(node2.isStringKey());
721:       assertFalse(node2.isSwitch());
722:       assertFalse(node2.isThrow());
723:       assertFalse(node2.isHook());
724:       assertFalse(node2.isFalse());
725:       assertFalse(node2.isThis());
726:       assertFalse(node2.isInc());
727:       assertFalse(node2.isSetterDef());
728:       assertFalse(node2.isBlock());
729:       assertFalse(node2.isCatch());
730:       assertEquals(39, node2.getType());
731:       assertFalse(node2.isInstanceOf());
732:       assertFalse(node2.isRegExp());
733:       assertFalse(node2.isWith());
734:       assertFalse(node2.hasMoreThanOneChild());
735:       assertFalse(node2.isIn());
736:       assertFalse(node2.isNE());
737:       assertEquals((-1), node2.getLineno());
738:       assertFalse(node2.isIf());
739:       assertFalse(node2.isCast());
740:       assertFalse(node2.hasOneChild());
741:       assertFalse(node2.isGetElem());
742:       assertFalse(node2.isAssign());
743:       assertFalse(node2.isTypeOf());
744:       assertFalse(node2.isScript());
745:       assertFalse(node2.isDec());
746:       assertFalse(node2.hasChildren());
747:       assertFalse(node2.isLabel());
748:       assertFalse(node2.isReturn());
749:       assertFalse(node2.isAssignAdd());
750:       assertFalse(node2.isObjectLit());
751:       assertFalse(node2.isNot());
752:       assertFalse(node2.isContinue());
753:       assertEquals((-1), node2.getSourcePosition());
754:       assertFalse(node2.isLabelName());
755:       assertFalse(node2.isAnd());
756:       assertFalse(node2.isCall());
757:       assertFalse(node2.isVar());
758:       assertFalse(node2.isAdd());
759:       assertFalse(node2.isComma());
760:       assertFalse(node2.isNew());
761:       assertFalse(node2.isGetProp());
762:       assertFalse(node2.isWhile());
763:       assertFalse(node2.isDo());
764:       assertFalse(node2.isOr());
765:       assertFalse(node2.isExprResult());
766:       assertFalse(node2.isTrue());
767:       assertFalse(node2.isVoid());
768:       assertFalse(node2.isNull());
769:       assertFalse(node2.isBreak());
770:       assertFalse(node2.isDelProp());
771:       assertFalse(node2.isName());
772:       assertNotNull(iterable0);
773:       
774:       boolean boolean2 = node2.isOptionalArg();
775:       assertFalse(boolean2);
776:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
777:       assertEquals(8, Node.FLAG_NO_THROWS);
778:       assertEquals(39, Node.EMPTY_BLOCK);
779:       assertEquals(4095, Node.COLUMN_MASK);
780:       assertEquals(55, Node.INFERRED_FUNCTION);
781:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
782:       assertEquals(52, Node.LENGTH);
783:       assertEquals(57, Node.REFLECTED_OBJECT);
784:       assertEquals(53, Node.INPUT_ID);
785:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
786:       assertEquals(29, Node.JSDOC_INFO_PROP);
787:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
788:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
789:       assertEquals(49, Node.DIRECT_EVAL);
790:       assertEquals(37, Node.OPT_ARG_NAME);
791:       assertEquals(36, Node.QUOTED_PROP);
792:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
793:       assertEquals(48, Node.DIRECTIVES);
794:       assertEquals(56, Node.CHANGE_TIME);
795:       assertEquals(32, Node.INCRDECR_PROP);
796:       assertEquals(46, Node.IS_NAMESPACE);
797:       assertEquals(51, Node.STATIC_SOURCE_FILE);
798:       assertEquals(57, Node.LAST_PROP);
799:       assertEquals(15, Node.NO_SIDE_EFFECTS);
800:       assertEquals(47, Node.IS_DISPATCHER);
801:       assertEquals(2, Node.POST_FLAG);
802:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
803:       assertEquals(30, Node.VAR_ARGS_NAME);
804:       assertEquals(1, Node.DECR_FLAG);
805:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
806:       assertEquals(12, Node.COLUMN_BITS);
807:       assertEquals(40, Node.ORIGINALNAME_PROP);
808:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
809:       assertEquals(50, Node.FREE_CALL);
810:       assertEquals(54, Node.SLASH_V);
811:       assertEquals(43, Node.IS_CONSTANT_NAME);
812:       assertFalse(node2.equals((Object)node1));
813:       assertFalse(node2.equals((Object)node0));
814:       assertTrue(boolean2 == boolean0);
815:       assertTrue(boolean2 == boolean1);
816:       assertFalse(node2.isArrayLit());
817:       assertFalse(node2.isGetterDef());
818:       assertFalse(node2.isEmpty());
819:       assertFalse(node2.isFunction());
820:       assertTrue(node2.isNumber());
821:       assertFalse(node2.isFor());
822:       assertFalse(node2.isTry());
823:       assertFalse(node2.isDefaultCase());
824:       assertFalse(node2.isCase());
825:       assertFalse(node2.isString());
826:       assertEquals(0, node2.getChildCount());
827:       assertFalse(node2.isParamList());
828:       assertFalse(node2.isDebugger());
829:       assertEquals((-1), node2.getCharno());
830:       assertFalse(node2.isStringKey());
831:       assertFalse(node2.isSwitch());
832:       assertFalse(node2.isThrow());
833:       assertFalse(node2.isHook());
834:       assertFalse(node2.isFalse());
835:       assertFalse(node2.isThis());
836:       assertFalse(node2.isInc());
837:       assertFalse(node2.isSetterDef());
838:       assertFalse(node2.isBlock());
839:       assertFalse(node2.isCatch());
840:       assertEquals(39, node2.getType());
841:       assertFalse(node2.isInstanceOf());
842:       assertFalse(node2.isRegExp());
843:       assertFalse(node2.isWith());
844:       assertFalse(node2.hasMoreThanOneChild());
845:       assertFalse(node2.isIn());
846:       assertFalse(node2.isNE());
847:       assertEquals((-1), node2.getLineno());
848:       assertFalse(node2.isIf());
849:       assertFalse(node2.isCast());
850:       assertFalse(node2.hasOneChild());
851:       assertFalse(node2.isGetElem());
852:       assertFalse(node2.isAssign());
853:       assertFalse(node2.isTypeOf());
854:       assertFalse(node2.isScript());
855:       assertFalse(node2.isDec());
856:       assertFalse(node2.hasChildren());
857:       assertFalse(node2.isLabel());
858:       assertFalse(node2.isReturn());
859:       assertFalse(node2.isAssignAdd());
860:       assertFalse(node2.isObjectLit());
861:       assertFalse(node2.isNot());
862:       assertFalse(node2.isContinue());
863:       assertEquals((-1), node2.getSourcePosition());
864:       assertFalse(node2.isLabelName());
865:       assertFalse(node2.isAnd());
866:       assertFalse(node2.isCall());
867:       assertFalse(node2.isVar());
868:       assertFalse(node2.isAdd());
869:       assertFalse(node2.isComma());
870:       assertFalse(node2.isNew());
871:       assertFalse(node2.isGetProp());
872:       assertFalse(node2.isWhile());
873:       assertFalse(node2.isDo());
874:       assertFalse(node2.isOr());
875:       assertFalse(node2.isExprResult());
876:       assertFalse(node2.isTrue());
877:       assertFalse(node2.isVoid());
878:       assertFalse(node2.isNull());
879:       assertFalse(node2.isBreak());
880:       assertFalse(node2.isDelProp());
881:       assertFalse(node2.isName());
882:       
883:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
884:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
885:       assertEquals(0, node_SideEffectFlags0.valueOf());
886:       assertNotNull(node_SideEffectFlags0);
887:       
888:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
889:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
890:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
891:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
892:       assertEquals(0, node_SideEffectFlags0.valueOf());
893:       assertEquals(0, node_SideEffectFlags1.valueOf());
894:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
895:       assertNotNull(node_SideEffectFlags1);
896:       
897:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
898:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
899:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
900:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
901:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
902:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
903:       assertEquals(0, node_SideEffectFlags0.valueOf());
904:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
905:       assertEquals(0, node_SideEffectFlags2.valueOf());
906:       assertNotNull(node_SideEffectFlags2);
907:       
908:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
909:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
910:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
911:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
912:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
913:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
914:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
915:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
916:       assertEquals(0, node_SideEffectFlags0.valueOf());
917:       assertEquals(0, node_SideEffectFlags3.valueOf());
918:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
919:       assertNotNull(node_SideEffectFlags3);
920:       
921:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
922:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
923:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
924:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
925:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
926:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
927:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
928:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
929:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
930:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
931:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
932:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
933:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
934:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
935:       assertEquals(0, node_SideEffectFlags0.valueOf());
936:       assertEquals(0, node_SideEffectFlags3.valueOf());
937:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
938:       assertEquals(0, node_SideEffectFlags4.valueOf());
939:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
940:       assertNotNull(node_SideEffectFlags4);
941:       
942:       node_SideEffectFlags3.clearSideEffectFlags();
943:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
944:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
945:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
946:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
947:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
948:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
949:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
950:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
951:       assertEquals(15, node_SideEffectFlags0.valueOf());
952:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
953:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
954:       assertEquals(15, node_SideEffectFlags3.valueOf());
955:       
956:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setAllFlags();
957:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
958:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
959:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
960:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
961:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
962:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
963:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
964:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
965:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
966:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
967:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
968:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
969:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
970:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
971:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
972:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
973:       assertEquals(0, node_SideEffectFlags0.valueOf());
974:       assertEquals(0, node_SideEffectFlags3.valueOf());
975:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
976:       assertEquals(0, node_SideEffectFlags5.valueOf());
977:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
978:       assertNotNull(node_SideEffectFlags5);
979:       
980:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setThrows();
981:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
982:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
983:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
984:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
985:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
986:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
987:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
988:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
989:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
990:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
991:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
992:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
993:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
994:       assertEquals(0, node_SideEffectFlags6.valueOf());
995:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
996:       assertEquals(0, node_SideEffectFlags0.valueOf());
997:       assertNotNull(node_SideEffectFlags6);
998:       
999:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setAllFlags();
1000:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
1001:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
1002:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
1003:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
1004:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
1005:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
1006:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
1007:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1008:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1009:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1010:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1011:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1012:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1013:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1014:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1015:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1016:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1017:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1018:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1019:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1020:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1021:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
1022:       assertEquals(0, node_SideEffectFlags7.valueOf());
1023:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1024:       assertEquals(0, node_SideEffectFlags0.valueOf());
1025:       assertEquals(0, node_SideEffectFlags3.valueOf());
1026:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1027:       assertNotNull(node_SideEffectFlags7);
1028:       
1029:       int int1 = node2.getSourceOffset();
1030:       assertEquals((-1), int1);
1031:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1032:       assertEquals(8, Node.FLAG_NO_THROWS);
1033:       assertEquals(39, Node.EMPTY_BLOCK);
1034:       assertEquals(4095, Node.COLUMN_MASK);
1035:       assertEquals(55, Node.INFERRED_FUNCTION);
1036:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1037:       assertEquals(52, Node.LENGTH);
1038:       assertEquals(57, Node.REFLECTED_OBJECT);
1039:       assertEquals(53, Node.INPUT_ID);
1040:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1041:       assertEquals(29, Node.JSDOC_INFO_PROP);
1042:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1043:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1044:       assertEquals(49, Node.DIRECT_EVAL);
1045:       assertEquals(37, Node.OPT_ARG_NAME);
1046:       assertEquals(36, Node.QUOTED_PROP);
1047:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1048:       assertEquals(48, Node.DIRECTIVES);
1049:       assertEquals(56, Node.CHANGE_TIME);
1050:       assertEquals(32, Node.INCRDECR_PROP);
1051:       assertEquals(46, Node.IS_NAMESPACE);
1052:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1053:       assertEquals(57, Node.LAST_PROP);
1054:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1055:       assertEquals(47, Node.IS_DISPATCHER);
1056:       assertEquals(2, Node.POST_FLAG);
1057:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1058:       assertEquals(30, Node.VAR_ARGS_NAME);
1059:       assertEquals(1, Node.DECR_FLAG);
1060:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1061:       assertEquals(12, Node.COLUMN_BITS);
1062:       assertEquals(40, Node.ORIGINALNAME_PROP);
1063:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1064:       assertEquals(50, Node.FREE_CALL);
1065:       assertEquals(54, Node.SLASH_V);
1066:       assertEquals(43, Node.IS_CONSTANT_NAME);
1067:       assertFalse(int1 == int0);
1068:       assertFalse(node2.equals((Object)node1));
1069:       assertFalse(node2.equals((Object)node0));
1070:       assertFalse(node2.isArrayLit());
1071:       assertFalse(node2.isGetterDef());
1072:       assertFalse(node2.isEmpty());
1073:       assertFalse(node2.isFunction());
1074:       assertTrue(node2.isNumber());
1075:       assertFalse(node2.isFor());
1076:       assertFalse(node2.isTry());
1077:       assertFalse(node2.isDefaultCase());
1078:       assertFalse(node2.isCase());
1079:       assertFalse(node2.isString());
1080:       assertEquals(0, node2.getChildCount());
1081:       assertFalse(node2.isParamList());
1082:       assertFalse(node2.isDebugger());
1083:       assertEquals((-1), node2.getCharno());
1084:       assertFalse(node2.isStringKey());
1085:       assertFalse(node2.isSwitch());
1086:       assertFalse(node2.isThrow());
1087:       assertFalse(node2.isHook());
1088:       assertFalse(node2.isFalse());
1089:       assertFalse(node2.isThis());
1090:       assertFalse(node2.isInc());
1091:       assertFalse(node2.isSetterDef());
1092:       assertFalse(node2.isBlock());
1093:       assertFalse(node2.isCatch());
1094:       assertEquals(39, node2.getType());
1095:       assertFalse(node2.isInstanceOf());
1096:       assertFalse(node2.isRegExp());
1097:       assertFalse(node2.isWith());
1098:       assertFalse(node2.hasMoreThanOneChild());
1099:       assertFalse(node2.isIn());
1100:       assertFalse(node2.isNE());
1101:       assertEquals((-1), node2.getLineno());
1102:       assertFalse(node2.isIf());
1103:       assertFalse(node2.isCast());
1104:       assertFalse(node2.hasOneChild());
1105:       assertFalse(node2.isGetElem());
1106:       assertFalse(node2.isAssign());
1107:       assertFalse(node2.isTypeOf());
1108:       assertFalse(node2.isScript());
1109:       assertFalse(node2.isDec());
1110:       assertFalse(node2.hasChildren());
1111:       assertFalse(node2.isLabel());
1112:       assertFalse(node2.isReturn());
1113:       assertFalse(node2.isAssignAdd());
1114:       assertFalse(node2.isObjectLit());
1115:       assertFalse(node2.isNot());
1116:       assertFalse(node2.isContinue());
1117:       assertEquals((-1), node2.getSourcePosition());
1118:       assertFalse(node2.isLabelName());
1119:       assertFalse(node2.isAnd());
1120:       assertFalse(node2.isCall());
1121:       assertFalse(node2.isVar());
1122:       assertFalse(node2.isAdd());
1123:       assertFalse(node2.isComma());
1124:       assertFalse(node2.isNew());
1125:       assertFalse(node2.isGetProp());
1126:       assertFalse(node2.isWhile());
1127:       assertFalse(node2.isDo());
1128:       assertFalse(node2.isOr());
1129:       assertFalse(node2.isExprResult());
1130:       assertFalse(node2.isTrue());
1131:       assertFalse(node2.isVoid());
1132:       assertFalse(node2.isNull());
1133:       assertFalse(node2.isBreak());
1134:       assertFalse(node2.isDelProp());
1135:       assertFalse(node2.isName());
1136:       
1137:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags3.setThrows();
1138:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
1139:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
1140:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
1141:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
1142:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
1143:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
1144:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
1145:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
1146:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1147:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1148:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1149:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1150:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1151:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1152:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1153:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1154:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1155:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1156:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1157:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1158:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1159:       assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
1160:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1161:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1162:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
1163:       assertEquals(0, node_SideEffectFlags8.valueOf());
1164:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1165:       assertEquals(0, node_SideEffectFlags0.valueOf());
1166:       assertEquals(0, node_SideEffectFlags3.valueOf());
1167:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1168:       assertNotNull(node_SideEffectFlags8);
1169:       
1170:       boolean boolean3 = node2.isFromExterns();
1171:       assertFalse(boolean3);
1172:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1173:       assertEquals(8, Node.FLAG_NO_THROWS);
1174:       assertEquals(39, Node.EMPTY_BLOCK);
1175:       assertEquals(4095, Node.COLUMN_MASK);
1176:       assertEquals(55, Node.INFERRED_FUNCTION);
1177:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1178:       assertEquals(52, Node.LENGTH);
1179:       assertEquals(57, Node.REFLECTED_OBJECT);
1180:       assertEquals(53, Node.INPUT_ID);
1181:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1182:       assertEquals(29, Node.JSDOC_INFO_PROP);
1183:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1184:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1185:       assertEquals(49, Node.DIRECT_EVAL);
1186:       assertEquals(37, Node.OPT_ARG_NAME);
1187:       assertEquals(36, Node.QUOTED_PROP);
1188:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1189:       assertEquals(48, Node.DIRECTIVES);
1190:       assertEquals(56, Node.CHANGE_TIME);
1191:       assertEquals(32, Node.INCRDECR_PROP);
1192:       assertEquals(46, Node.IS_NAMESPACE);
1193:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1194:       assertEquals(57, Node.LAST_PROP);
1195:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1196:       assertEquals(47, Node.IS_DISPATCHER);
1197:       assertEquals(2, Node.POST_FLAG);
1198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1199:       assertEquals(30, Node.VAR_ARGS_NAME);
1200:       assertEquals(1, Node.DECR_FLAG);
1201:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1202:       assertEquals(12, Node.COLUMN_BITS);
1203:       assertEquals(40, Node.ORIGINALNAME_PROP);
1204:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1205:       assertEquals(50, Node.FREE_CALL);
1206:       assertEquals(54, Node.SLASH_V);
1207:       assertEquals(43, Node.IS_CONSTANT_NAME);
1208:       assertTrue(boolean3 == boolean1);
1209:       assertTrue(boolean3 == boolean0);
1210:       assertTrue(boolean3 == boolean2);
1211:       assertFalse(node2.equals((Object)node1));
1212:       assertFalse(node2.equals((Object)node0));
1213:       assertFalse(node2.isArrayLit());
1214:       assertFalse(node2.isGetterDef());
1215:       assertFalse(node2.isEmpty());
1216:       assertFalse(node2.isFunction());
1217:       assertTrue(node2.isNumber());
1218:       assertFalse(node2.isFor());
1219:       assertFalse(node2.isTry());
1220:       assertFalse(node2.isDefaultCase());
1221:       assertFalse(node2.isCase());
1222:       assertFalse(node2.isString());
1223:       assertEquals(0, node2.getChildCount());
1224:       assertFalse(node2.isParamList());
1225:       assertFalse(node2.isDebugger());
1226:       assertEquals((-1), node2.getCharno());
1227:       assertFalse(node2.isStringKey());
1228:       assertFalse(node2.isSwitch());
1229:       assertFalse(node2.isThrow());
1230:       assertFalse(node2.isHook());
1231:       assertFalse(node2.isFalse());
1232:       assertFalse(node2.isThis());
1233:       assertFalse(node2.isInc());
1234:       assertFalse(node2.isSetterDef());
1235:       assertFalse(node2.isBlock());
1236:       assertFalse(node2.isCatch());
1237:       assertEquals(39, node2.getType());
1238:       assertFalse(node2.isInstanceOf());
1239:       assertFalse(node2.isRegExp());
1240:       assertFalse(node2.isWith());
1241:       assertFalse(node2.hasMoreThanOneChild());
1242:       assertFalse(node2.isIn());
1243:       assertFalse(node2.isNE());
1244:       assertEquals((-1), node2.getLineno());
1245:       assertFalse(node2.isIf());
1246:       assertFalse(node2.isCast());
1247:       assertFalse(node2.hasOneChild());
1248:       assertFalse(node2.isGetElem());
1249:       assertFalse(node2.isAssign());
1250:       assertFalse(node2.isTypeOf());
1251:       assertFalse(node2.isScript());
1252:       assertFalse(node2.isDec());
1253:       assertFalse(node2.hasChildren());
1254:       assertFalse(node2.isLabel());
1255:       assertFalse(node2.isReturn());
1256:       assertFalse(node2.isAssignAdd());
1257:       assertFalse(node2.isObjectLit());
1258:       assertFalse(node2.isNot());
1259:       assertFalse(node2.isContinue());
1260:       assertEquals((-1), node2.getSourcePosition());
1261:       assertFalse(node2.isLabelName());
1262:       assertFalse(node2.isAnd());
1263:       assertFalse(node2.isCall());
1264:       assertFalse(node2.isVar());
1265:       assertFalse(node2.isAdd());
1266:       assertFalse(node2.isComma());
1267:       assertFalse(node2.isNew());
1268:       assertFalse(node2.isGetProp());
1269:       assertFalse(node2.isWhile());
1270:       assertFalse(node2.isDo());
1271:       assertFalse(node2.isOr());
1272:       assertFalse(node2.isExprResult());
1273:       assertFalse(node2.isTrue());
1274:       assertFalse(node2.isVoid());
1275:       assertFalse(node2.isNull());
1276:       assertFalse(node2.isBreak());
1277:       assertFalse(node2.isDelProp());
1278:       assertFalse(node2.isName());
1279:   }
1280: }
RegularFileObject[/tmp/EvoSuite_72_1629223334295/com/google/javascript/rhino/Node_72_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:14 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_72_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_72_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_72_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.JSTypeExpression",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.JSDocInfo$Marker",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.FluentIterable",
352:       "com.google.common.collect.Iterables$2",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 18:02:14.540 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("Nw5#j.#GSC`@nlQ)1a", (-1142), (-59));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertNotNull(node0);

boolean boolean0 = node0.isUnscopedQualifiedName();
assertFalse(boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isWith());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());

Node node1 = Node.newString(98, "");
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(98, node1.getType());
assertNotNull(node1);

int int0 = node1.getChangeTime();
assertEquals(0, int0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isBreak());
assertFalse(node1.isCatch());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertTrue(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertEquals(98, node1.getType());

SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("lk;-\tjZ,", true);
assertEquals("lk;-\tjZ,", simpleSourceFile0.toString());
assertTrue(simpleSourceFile0.isExtern());
assertEquals("lk;-\tjZ,", simpleSourceFile0.getName());
assertNotNull(simpleSourceFile0);

Node node2 = Node.newNumber(1.0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isFunction());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertEquals(39, node2.getType());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isScript());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isComma());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertNotNull(node2);

boolean boolean1 = node2.isVarArgs();
assertFalse(boolean1);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isFunction());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertEquals(39, node2.getType());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isScript());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isComma());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());

Iterable<Node> iterable0 = node2.children();
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(iterable0.contains(node1));
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isFunction());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertEquals(39, node2.getType());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isScript());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isComma());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertNotNull(iterable0);

boolean boolean2 = node2.isOptionalArg();
assertFalse(boolean2);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isFunction());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertEquals(39, node2.getType());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isScript());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isComma());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertNotNull(node_SideEffectFlags4);

node_SideEffectFlags3.clearSideEffectFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags3.valueOf());

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags7.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags7);

int int1 = node2.getSourceOffset();
assertEquals((-1), int1);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(int1 == int0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isFunction());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertEquals(39, node2.getType());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isScript());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isComma());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags3.setThrows();
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertTrue(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags8.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags8);

boolean boolean3 = node2.isFromExterns();
assertFalse(boolean3);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isFunction());
assertTrue(node2.isNumber());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBlock());
assertFalse(node2.isCatch());
assertEquals(39, node2.getType());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isScript());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isComma());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isOr());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());


[MASTER] 18:02:16.572 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_78_1629223336453/com/google/javascript/rhino/Node_78_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_78_1629223336453/com/google/javascript/rhino/Node_78_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:16.572 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:16.572 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:16.655 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 401
[MASTER] 18:02:16.656 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_78_1629223336453/com/google/javascript/rhino/Node_78_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:16 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import java.util.List;
15: import java.util.Stack;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_78_tmp__ESTest extends Node_78_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
26:       assertNotNull(simpleErrorReporter0);
27:       
28:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
29:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
30:       assertNotNull(jSTypeRegistry0);
31:       
32:       Stack<JSType> stack0 = new Stack<JSType>();
33:       assertTrue(stack0.isEmpty());
34:       assertTrue(stack0.empty());
35:       assertEquals(0, stack0.size());
36:       assertEquals("[]", stack0.toString());
37:       assertEquals(10, stack0.capacity());
38:       assertNotNull(stack0);
39:       
40:       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
41:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
42:       assertEquals(53, Node.INPUT_ID);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(4095, Node.COLUMN_MASK);
45:       assertEquals(47, Node.IS_DISPATCHER);
46:       assertEquals(37, Node.OPT_ARG_NAME);
47:       assertEquals(48, Node.DIRECTIVES);
48:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
49:       assertEquals(8, Node.FLAG_NO_THROWS);
50:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
51:       assertEquals(29, Node.JSDOC_INFO_PROP);
52:       assertEquals(39, Node.EMPTY_BLOCK);
53:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
54:       assertEquals(55, Node.INFERRED_FUNCTION);
55:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
56:       assertEquals(49, Node.DIRECT_EVAL);
57:       assertEquals(56, Node.CHANGE_TIME);
58:       assertEquals(36, Node.QUOTED_PROP);
59:       assertEquals(57, Node.REFLECTED_OBJECT);
60:       assertEquals(54, Node.SLASH_V);
61:       assertEquals(52, Node.LENGTH);
62:       assertEquals(57, Node.LAST_PROP);
63:       assertEquals(15, Node.NO_SIDE_EFFECTS);
64:       assertEquals(40, Node.ORIGINALNAME_PROP);
65:       assertEquals(1, Node.DECR_FLAG);
66:       assertEquals(30, Node.VAR_ARGS_NAME);
67:       assertEquals(12, Node.COLUMN_BITS);
68:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
69:       assertEquals(2, Node.POST_FLAG);
70:       assertEquals(32, Node.INCRDECR_PROP);
71:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
72:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
73:       assertEquals(50, Node.FREE_CALL);
74:       assertEquals(46, Node.IS_NAMESPACE);
75:       assertEquals(43, Node.IS_CONSTANT_NAME);
76:       assertEquals(51, Node.STATIC_SOURCE_FILE);
77:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
78:       assertTrue(stack0.isEmpty());
79:       assertTrue(stack0.empty());
80:       assertEquals(0, stack0.size());
81:       assertEquals("[]", stack0.toString());
82:       assertEquals(10, stack0.capacity());
83:       assertFalse(node0.isIn());
84:       assertFalse(node0.isCase());
85:       assertFalse(node0.isFor());
86:       assertFalse(node0.isTry());
87:       assertFalse(node0.isFunction());
88:       assertFalse(node0.isArrayLit());
89:       assertFalse(node0.isString());
90:       assertFalse(node0.isGetterDef());
91:       assertFalse(node0.isSwitch());
92:       assertFalse(node0.isDebugger());
93:       assertEquals((-1), node0.getCharno());
94:       assertFalse(node0.isSetterDef());
95:       assertFalse(node0.isCatch());
96:       assertFalse(node0.isInstanceOf());
97:       assertFalse(node0.isWith());
98:       assertFalse(node0.isFalse());
99:       assertFalse(node0.isRegExp());
100:       assertFalse(node0.isThis());
101:       assertFalse(node0.isHook());
102:       assertFalse(node0.isThrow());
103:       assertFalse(node0.isInc());
104:       assertFalse(node0.isIf());
105:       assertFalse(node0.isNE());
106:       assertEquals((-1), node0.getLineno());
107:       assertFalse(node0.isReturn());
108:       assertFalse(node0.isAssignAdd());
109:       assertFalse(node0.isLabel());
110:       assertFalse(node0.isOr());
111:       assertFalse(node0.hasMoreThanOneChild());
112:       assertFalse(node0.isContinue());
113:       assertFalse(node0.isWhile());
114:       assertFalse(node0.hasChildren());
115:       assertFalse(node0.isDec());
116:       assertFalse(node0.isAssign());
117:       assertFalse(node0.isTypeOf());
118:       assertFalse(node0.isDo());
119:       assertFalse(node0.isBlock());
120:       assertFalse(node0.hasOneChild());
121:       assertFalse(node0.isScript());
122:       assertFalse(node0.isCast());
123:       assertFalse(node0.isNumber());
124:       assertEquals((-1), node0.getSourcePosition());
125:       assertFalse(node0.isNot());
126:       assertFalse(node0.isObjectLit());
127:       assertFalse(node0.isLabelName());
128:       assertFalse(node0.isAnd());
129:       assertFalse(node0.isStringKey());
130:       assertTrue(node0.isParamList());
131:       assertEquals(0, node0.getChildCount());
132:       assertFalse(node0.isGetProp());
133:       assertEquals(83, node0.getType());
134:       assertFalse(node0.isDefaultCase());
135:       assertFalse(node0.isComma());
136:       assertFalse(node0.isVar());
137:       assertFalse(node0.isNew());
138:       assertFalse(node0.isVoid());
139:       assertFalse(node0.isGetElem());
140:       assertFalse(node0.isCall());
141:       assertFalse(node0.isEmpty());
142:       assertFalse(node0.isExprResult());
143:       assertFalse(node0.isAdd());
144:       assertFalse(node0.isBreak());
145:       assertFalse(node0.isName());
146:       assertFalse(node0.isDelProp());
147:       assertFalse(node0.isTrue());
148:       assertFalse(node0.isNull());
149:       assertNotNull(node0);
150:       
151:       Node node1 = Node.newNumber((double) 32);
152:       assertEquals(32, Node.INCRDECR_PROP);
153:       assertEquals(46, Node.IS_NAMESPACE);
154:       assertEquals(51, Node.STATIC_SOURCE_FILE);
155:       assertEquals(12, Node.COLUMN_BITS);
156:       assertEquals(47, Node.IS_DISPATCHER);
157:       assertEquals(57, Node.LAST_PROP);
158:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
159:       assertEquals(1, Node.DECR_FLAG);
160:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
161:       assertEquals(29, Node.JSDOC_INFO_PROP);
162:       assertEquals(15, Node.NO_SIDE_EFFECTS);
163:       assertEquals(54, Node.SLASH_V);
164:       assertEquals(43, Node.IS_CONSTANT_NAME);
165:       assertEquals(2, Node.POST_FLAG);
166:       assertEquals(30, Node.VAR_ARGS_NAME);
167:       assertEquals(40, Node.ORIGINALNAME_PROP);
168:       assertEquals(4095, Node.COLUMN_MASK);
169:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
170:       assertEquals(36, Node.QUOTED_PROP);
171:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
172:       assertEquals(50, Node.FREE_CALL);
173:       assertEquals(8, Node.FLAG_NO_THROWS);
174:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
175:       assertEquals(55, Node.INFERRED_FUNCTION);
176:       assertEquals(39, Node.EMPTY_BLOCK);
177:       assertEquals(53, Node.INPUT_ID);
178:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
179:       assertEquals(52, Node.LENGTH);
180:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
181:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
182:       assertEquals(57, Node.REFLECTED_OBJECT);
183:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
184:       assertEquals(56, Node.CHANGE_TIME);
185:       assertEquals(49, Node.DIRECT_EVAL);
186:       assertEquals(37, Node.OPT_ARG_NAME);
187:       assertEquals(48, Node.DIRECTIVES);
188:       assertFalse(node1.equals((Object)node0));
189:       assertFalse(node1.isCall());
190:       assertFalse(node1.isName());
191:       assertFalse(node1.isNull());
192:       assertFalse(node1.isStringKey());
193:       assertFalse(node1.isBlock());
194:       assertFalse(node1.isVar());
195:       assertFalse(node1.isSetterDef());
196:       assertFalse(node1.isNew());
197:       assertFalse(node1.isAdd());
198:       assertFalse(node1.isCatch());
199:       assertFalse(node1.hasMoreThanOneChild());
200:       assertFalse(node1.isWhile());
201:       assertFalse(node1.isReturn());
202:       assertEquals(39, node1.getType());
203:       assertFalse(node1.isDec());
204:       assertFalse(node1.isTypeOf());
205:       assertFalse(node1.isRegExp());
206:       assertFalse(node1.isVoid());
207:       assertEquals((-1), node1.getLineno());
208:       assertFalse(node1.isGetElem());
209:       assertFalse(node1.isArrayLit());
210:       assertFalse(node1.hasOneChild());
211:       assertFalse(node1.isLabelName());
212:       assertFalse(node1.isFor());
213:       assertFalse(node1.isTrue());
214:       assertFalse(node1.isTry());
215:       assertFalse(node1.isGetterDef());
216:       assertFalse(node1.isOr());
217:       assertFalse(node1.isScript());
218:       assertFalse(node1.isEmpty());
219:       assertEquals(0, node1.getChildCount());
220:       assertFalse(node1.isDo());
221:       assertFalse(node1.isAssignAdd());
222:       assertFalse(node1.isLabel());
223:       assertFalse(node1.isDefaultCase());
224:       assertFalse(node1.isParamList());
225:       assertFalse(node1.isSwitch());
226:       assertFalse(node1.isFalse());
227:       assertFalse(node1.isHook());
228:       assertFalse(node1.isThrow());
229:       assertFalse(node1.isInc());
230:       assertFalse(node1.isGetProp());
231:       assertEquals((-1), node1.getCharno());
232:       assertFalse(node1.isString());
233:       assertFalse(node1.isCase());
234:       assertFalse(node1.isThis());
235:       assertFalse(node1.isComma());
236:       assertFalse(node1.isExprResult());
237:       assertFalse(node1.isDelProp());
238:       assertFalse(node1.isWith());
239:       assertFalse(node1.isBreak());
240:       assertFalse(node1.isInstanceOf());
241:       assertFalse(node1.isAssign());
242:       assertFalse(node1.isIf());
243:       assertFalse(node1.hasChildren());
244:       assertFalse(node1.isNE());
245:       assertFalse(node1.isDebugger());
246:       assertEquals((-1), node1.getSourcePosition());
247:       assertTrue(node1.isNumber());
248:       assertFalse(node1.isIn());
249:       assertFalse(node1.isAnd());
250:       assertFalse(node1.isContinue());
251:       assertFalse(node1.isNot());
252:       assertFalse(node1.isObjectLit());
253:       assertFalse(node1.isFunction());
254:       assertFalse(node1.isCast());
255:       assertNotNull(node1);
256:       
257:       boolean boolean0 = node1.isVarArgs();
258:       assertFalse(boolean0);
259:       assertEquals(32, Node.INCRDECR_PROP);
260:       assertEquals(46, Node.IS_NAMESPACE);
261:       assertEquals(51, Node.STATIC_SOURCE_FILE);
262:       assertEquals(12, Node.COLUMN_BITS);
263:       assertEquals(47, Node.IS_DISPATCHER);
264:       assertEquals(57, Node.LAST_PROP);
265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
266:       assertEquals(1, Node.DECR_FLAG);
267:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
268:       assertEquals(29, Node.JSDOC_INFO_PROP);
269:       assertEquals(15, Node.NO_SIDE_EFFECTS);
270:       assertEquals(54, Node.SLASH_V);
271:       assertEquals(43, Node.IS_CONSTANT_NAME);
272:       assertEquals(2, Node.POST_FLAG);
273:       assertEquals(30, Node.VAR_ARGS_NAME);
274:       assertEquals(40, Node.ORIGINALNAME_PROP);
275:       assertEquals(4095, Node.COLUMN_MASK);
276:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
277:       assertEquals(36, Node.QUOTED_PROP);
278:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
279:       assertEquals(50, Node.FREE_CALL);
280:       assertEquals(8, Node.FLAG_NO_THROWS);
281:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
282:       assertEquals(55, Node.INFERRED_FUNCTION);
283:       assertEquals(39, Node.EMPTY_BLOCK);
284:       assertEquals(53, Node.INPUT_ID);
285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
286:       assertEquals(52, Node.LENGTH);
287:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
288:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
289:       assertEquals(57, Node.REFLECTED_OBJECT);
290:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
291:       assertEquals(56, Node.CHANGE_TIME);
292:       assertEquals(49, Node.DIRECT_EVAL);
293:       assertEquals(37, Node.OPT_ARG_NAME);
294:       assertEquals(48, Node.DIRECTIVES);
295:       assertFalse(node1.equals((Object)node0));
296:       assertFalse(node1.isCall());
297:       assertFalse(node1.isName());
298:       assertFalse(node1.isNull());
299:       assertFalse(node1.isStringKey());
300:       assertFalse(node1.isBlock());
301:       assertFalse(node1.isVar());
302:       assertFalse(node1.isSetterDef());
303:       assertFalse(node1.isNew());
304:       assertFalse(node1.isAdd());
305:       assertFalse(node1.isCatch());
306:       assertFalse(node1.hasMoreThanOneChild());
307:       assertFalse(node1.isWhile());
308:       assertFalse(node1.isReturn());
309:       assertEquals(39, node1.getType());
310:       assertFalse(node1.isDec());
311:       assertFalse(node1.isTypeOf());
312:       assertFalse(node1.isRegExp());
313:       assertFalse(node1.isVoid());
314:       assertEquals((-1), node1.getLineno());
315:       assertFalse(node1.isGetElem());
316:       assertFalse(node1.isArrayLit());
317:       assertFalse(node1.hasOneChild());
318:       assertFalse(node1.isLabelName());
319:       assertFalse(node1.isFor());
320:       assertFalse(node1.isTrue());
321:       assertFalse(node1.isTry());
322:       assertFalse(node1.isGetterDef());
323:       assertFalse(node1.isOr());
324:       assertFalse(node1.isScript());
325:       assertFalse(node1.isEmpty());
326:       assertEquals(0, node1.getChildCount());
327:       assertFalse(node1.isDo());
328:       assertFalse(node1.isAssignAdd());
329:       assertFalse(node1.isLabel());
330:       assertFalse(node1.isDefaultCase());
331:       assertFalse(node1.isParamList());
332:       assertFalse(node1.isSwitch());
333:       assertFalse(node1.isFalse());
334:       assertFalse(node1.isHook());
335:       assertFalse(node1.isThrow());
336:       assertFalse(node1.isInc());
337:       assertFalse(node1.isGetProp());
338:       assertEquals((-1), node1.getCharno());
339:       assertFalse(node1.isString());
340:       assertFalse(node1.isCase());
341:       assertFalse(node1.isThis());
342:       assertFalse(node1.isComma());
343:       assertFalse(node1.isExprResult());
344:       assertFalse(node1.isDelProp());
345:       assertFalse(node1.isWith());
346:       assertFalse(node1.isBreak());
347:       assertFalse(node1.isInstanceOf());
348:       assertFalse(node1.isAssign());
349:       assertFalse(node1.isIf());
350:       assertFalse(node1.hasChildren());
351:       assertFalse(node1.isNE());
352:       assertFalse(node1.isDebugger());
353:       assertEquals((-1), node1.getSourcePosition());
354:       assertTrue(node1.isNumber());
355:       assertFalse(node1.isIn());
356:       assertFalse(node1.isAnd());
357:       assertFalse(node1.isContinue());
358:       assertFalse(node1.isNot());
359:       assertFalse(node1.isObjectLit());
360:       assertFalse(node1.isFunction());
361:       assertFalse(node1.isCast());
362:       
363:       Iterable<Node> iterable0 = node0.children();
364:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
365:       assertEquals(53, Node.INPUT_ID);
366:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
367:       assertEquals(4095, Node.COLUMN_MASK);
368:       assertEquals(47, Node.IS_DISPATCHER);
369:       assertEquals(37, Node.OPT_ARG_NAME);
370:       assertEquals(48, Node.DIRECTIVES);
371:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
372:       assertEquals(8, Node.FLAG_NO_THROWS);
373:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
374:       assertEquals(29, Node.JSDOC_INFO_PROP);
375:       assertEquals(39, Node.EMPTY_BLOCK);
376:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
377:       assertEquals(55, Node.INFERRED_FUNCTION);
378:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
379:       assertEquals(49, Node.DIRECT_EVAL);
380:       assertEquals(56, Node.CHANGE_TIME);
381:       assertEquals(36, Node.QUOTED_PROP);
382:       assertEquals(57, Node.REFLECTED_OBJECT);
383:       assertEquals(54, Node.SLASH_V);
384:       assertEquals(52, Node.LENGTH);
385:       assertEquals(57, Node.LAST_PROP);
386:       assertEquals(15, Node.NO_SIDE_EFFECTS);
387:       assertEquals(40, Node.ORIGINALNAME_PROP);
388:       assertEquals(1, Node.DECR_FLAG);
389:       assertEquals(30, Node.VAR_ARGS_NAME);
390:       assertEquals(12, Node.COLUMN_BITS);
391:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
392:       assertEquals(2, Node.POST_FLAG);
393:       assertEquals(32, Node.INCRDECR_PROP);
394:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
395:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
396:       assertEquals(50, Node.FREE_CALL);
397:       assertEquals(46, Node.IS_NAMESPACE);
398:       assertEquals(43, Node.IS_CONSTANT_NAME);
399:       assertEquals(51, Node.STATIC_SOURCE_FILE);
400:       assertFalse(node0.equals((Object)node1));
401:       assertFalse(iterable0.contains(node0));
402:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
403:       assertTrue(stack0.isEmpty());
404:       assertTrue(stack0.empty());
405:       assertEquals(0, stack0.size());
406:       assertEquals("[]", stack0.toString());
407:       assertEquals(10, stack0.capacity());
408:       assertFalse(node0.isIn());
409:       assertFalse(node0.isCase());
410:       assertFalse(node0.isFor());
411:       assertFalse(node0.isTry());
412:       assertFalse(node0.isFunction());
413:       assertFalse(node0.isArrayLit());
414:       assertFalse(node0.isString());
415:       assertFalse(node0.isGetterDef());
416:       assertFalse(node0.isSwitch());
417:       assertFalse(node0.isDebugger());
418:       assertEquals((-1), node0.getCharno());
419:       assertFalse(node0.isSetterDef());
420:       assertFalse(node0.isCatch());
421:       assertFalse(node0.isInstanceOf());
422:       assertFalse(node0.isWith());
423:       assertFalse(node0.isFalse());
424:       assertFalse(node0.isRegExp());
425:       assertFalse(node0.isThis());
426:       assertFalse(node0.isHook());
427:       assertFalse(node0.isThrow());
428:       assertFalse(node0.isInc());
429:       assertFalse(node0.isIf());
430:       assertFalse(node0.isNE());
431:       assertEquals((-1), node0.getLineno());
432:       assertFalse(node0.isReturn());
433:       assertFalse(node0.isAssignAdd());
434:       assertFalse(node0.isLabel());
435:       assertFalse(node0.isOr());
436:       assertFalse(node0.hasMoreThanOneChild());
437:       assertFalse(node0.isContinue());
438:       assertFalse(node0.isWhile());
439:       assertFalse(node0.hasChildren());
440:       assertFalse(node0.isDec());
441:       assertFalse(node0.isAssign());
442:       assertFalse(node0.isTypeOf());
443:       assertFalse(node0.isDo());
444:       assertFalse(node0.isBlock());
445:       assertFalse(node0.hasOneChild());
446:       assertFalse(node0.isScript());
447:       assertFalse(node0.isCast());
448:       assertFalse(node0.isNumber());
449:       assertEquals((-1), node0.getSourcePosition());
450:       assertFalse(node0.isNot());
451:       assertFalse(node0.isObjectLit());
452:       assertFalse(node0.isLabelName());
453:       assertFalse(node0.isAnd());
454:       assertFalse(node0.isStringKey());
455:       assertTrue(node0.isParamList());
456:       assertEquals(0, node0.getChildCount());
457:       assertFalse(node0.isGetProp());
458:       assertEquals(83, node0.getType());
459:       assertFalse(node0.isDefaultCase());
460:       assertFalse(node0.isComma());
461:       assertFalse(node0.isVar());
462:       assertFalse(node0.isNew());
463:       assertFalse(node0.isVoid());
464:       assertFalse(node0.isGetElem());
465:       assertFalse(node0.isCall());
466:       assertFalse(node0.isEmpty());
467:       assertFalse(node0.isExprResult());
468:       assertFalse(node0.isAdd());
469:       assertFalse(node0.isBreak());
470:       assertFalse(node0.isName());
471:       assertFalse(node0.isDelProp());
472:       assertFalse(node0.isTrue());
473:       assertFalse(node0.isNull());
474:       assertNotNull(iterable0);
475:       
476:       boolean boolean1 = node0.isOptionalArg();
477:       assertFalse(boolean1);
478:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
479:       assertEquals(53, Node.INPUT_ID);
480:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
481:       assertEquals(4095, Node.COLUMN_MASK);
482:       assertEquals(47, Node.IS_DISPATCHER);
483:       assertEquals(37, Node.OPT_ARG_NAME);
484:       assertEquals(48, Node.DIRECTIVES);
485:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
486:       assertEquals(8, Node.FLAG_NO_THROWS);
487:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
488:       assertEquals(29, Node.JSDOC_INFO_PROP);
489:       assertEquals(39, Node.EMPTY_BLOCK);
490:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
491:       assertEquals(55, Node.INFERRED_FUNCTION);
492:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
493:       assertEquals(49, Node.DIRECT_EVAL);
494:       assertEquals(56, Node.CHANGE_TIME);
495:       assertEquals(36, Node.QUOTED_PROP);
496:       assertEquals(57, Node.REFLECTED_OBJECT);
497:       assertEquals(54, Node.SLASH_V);
498:       assertEquals(52, Node.LENGTH);
499:       assertEquals(57, Node.LAST_PROP);
500:       assertEquals(15, Node.NO_SIDE_EFFECTS);
501:       assertEquals(40, Node.ORIGINALNAME_PROP);
502:       assertEquals(1, Node.DECR_FLAG);
503:       assertEquals(30, Node.VAR_ARGS_NAME);
504:       assertEquals(12, Node.COLUMN_BITS);
505:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
506:       assertEquals(2, Node.POST_FLAG);
507:       assertEquals(32, Node.INCRDECR_PROP);
508:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
509:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
510:       assertEquals(50, Node.FREE_CALL);
511:       assertEquals(46, Node.IS_NAMESPACE);
512:       assertEquals(43, Node.IS_CONSTANT_NAME);
513:       assertEquals(51, Node.STATIC_SOURCE_FILE);
514:       assertFalse(node0.equals((Object)node1));
515:       assertTrue(boolean1 == boolean0);
516:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
517:       assertTrue(stack0.isEmpty());
518:       assertTrue(stack0.empty());
519:       assertEquals(0, stack0.size());
520:       assertEquals("[]", stack0.toString());
521:       assertEquals(10, stack0.capacity());
522:       assertFalse(node0.isIn());
523:       assertFalse(node0.isCase());
524:       assertFalse(node0.isFor());
525:       assertFalse(node0.isTry());
526:       assertFalse(node0.isFunction());
527:       assertFalse(node0.isArrayLit());
528:       assertFalse(node0.isString());
529:       assertFalse(node0.isGetterDef());
530:       assertFalse(node0.isSwitch());
531:       assertFalse(node0.isDebugger());
532:       assertEquals((-1), node0.getCharno());
533:       assertFalse(node0.isSetterDef());
534:       assertFalse(node0.isCatch());
535:       assertFalse(node0.isInstanceOf());
536:       assertFalse(node0.isWith());
537:       assertFalse(node0.isFalse());
538:       assertFalse(node0.isRegExp());
539:       assertFalse(node0.isThis());
540:       assertFalse(node0.isHook());
541:       assertFalse(node0.isThrow());
542:       assertFalse(node0.isInc());
543:       assertFalse(node0.isIf());
544:       assertFalse(node0.isNE());
545:       assertEquals((-1), node0.getLineno());
546:       assertFalse(node0.isReturn());
547:       assertFalse(node0.isAssignAdd());
548:       assertFalse(node0.isLabel());
549:       assertFalse(node0.isOr());
550:       assertFalse(node0.hasMoreThanOneChild());
551:       assertFalse(node0.isContinue());
552:       assertFalse(node0.isWhile());
553:       assertFalse(node0.hasChildren());
554:       assertFalse(node0.isDec());
555:       assertFalse(node0.isAssign());
556:       assertFalse(node0.isTypeOf());
557:       assertFalse(node0.isDo());
558:       assertFalse(node0.isBlock());
559:       assertFalse(node0.hasOneChild());
560:       assertFalse(node0.isScript());
561:       assertFalse(node0.isCast());
562:       assertFalse(node0.isNumber());
563:       assertEquals((-1), node0.getSourcePosition());
564:       assertFalse(node0.isNot());
565:       assertFalse(node0.isObjectLit());
566:       assertFalse(node0.isLabelName());
567:       assertFalse(node0.isAnd());
568:       assertFalse(node0.isStringKey());
569:       assertTrue(node0.isParamList());
570:       assertEquals(0, node0.getChildCount());
571:       assertFalse(node0.isGetProp());
572:       assertEquals(83, node0.getType());
573:       assertFalse(node0.isDefaultCase());
574:       assertFalse(node0.isComma());
575:       assertFalse(node0.isVar());
576:       assertFalse(node0.isNew());
577:       assertFalse(node0.isVoid());
578:       assertFalse(node0.isGetElem());
579:       assertFalse(node0.isCall());
580:       assertFalse(node0.isEmpty());
581:       assertFalse(node0.isExprResult());
582:       assertFalse(node0.isAdd());
583:       assertFalse(node0.isBreak());
584:       assertFalse(node0.isName());
585:       assertFalse(node0.isDelProp());
586:       assertFalse(node0.isTrue());
587:       assertFalse(node0.isNull());
588:       
589:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
590:       assertEquals(0, node_SideEffectFlags0.valueOf());
591:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
592:       assertNotNull(node_SideEffectFlags0);
593:       
594:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
595:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
596:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
597:       assertEquals(0, node_SideEffectFlags0.valueOf());
598:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
599:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
600:       assertEquals(0, node_SideEffectFlags1.valueOf());
601:       assertNotNull(node_SideEffectFlags1);
602:       
603:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
604:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
605:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
606:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
607:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
608:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
609:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
610:       assertEquals(0, node_SideEffectFlags0.valueOf());
611:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
612:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
613:       assertEquals(0, node_SideEffectFlags1.valueOf());
614:       assertEquals(0, node_SideEffectFlags2.valueOf());
615:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
616:       assertNotNull(node_SideEffectFlags2);
617:       
618:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
619:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
620:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
621:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
622:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
623:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
624:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
625:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
626:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
627:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
628:       assertEquals(0, node_SideEffectFlags0.valueOf());
629:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
630:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
631:       assertEquals(0, node_SideEffectFlags1.valueOf());
632:       assertEquals(0, node_SideEffectFlags3.valueOf());
633:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
634:       assertNotNull(node_SideEffectFlags3);
635:       
636:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
637:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
638:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
639:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
640:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
641:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
642:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
643:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
644:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
645:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
646:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
647:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
648:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
649:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
650:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
651:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
652:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
653:       assertEquals(0, node_SideEffectFlags0.valueOf());
654:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
655:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
656:       assertEquals(0, node_SideEffectFlags1.valueOf());
657:       assertEquals(0, node_SideEffectFlags2.valueOf());
658:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
659:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
660:       assertEquals(0, node_SideEffectFlags4.valueOf());
661:       assertNotNull(node_SideEffectFlags4);
662:       
663:       node_SideEffectFlags0.clearSideEffectFlags();
664:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
665:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
666:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
667:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
668:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
669:       assertEquals(15, node_SideEffectFlags0.valueOf());
670:       
671:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
672:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
673:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
674:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
675:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
676:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
677:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
678:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
679:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
680:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
681:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
682:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
683:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
684:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
685:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
686:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
687:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
688:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
689:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
690:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
691:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
692:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
693:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
694:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
695:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
696:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
697:       assertEquals(0, node_SideEffectFlags0.valueOf());
698:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
699:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
700:       assertEquals(0, node_SideEffectFlags1.valueOf());
701:       assertEquals(0, node_SideEffectFlags2.valueOf());
702:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
703:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
704:       assertEquals(0, node_SideEffectFlags4.valueOf());
705:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
706:       assertEquals(0, node_SideEffectFlags5.valueOf());
707:       assertNotNull(node_SideEffectFlags5);
708:       
709:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setThrows();
710:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
711:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
712:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
713:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
714:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
715:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
716:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
717:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
718:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
719:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
720:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
721:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
722:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
723:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
724:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
725:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
726:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
727:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
728:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
729:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
730:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
731:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
732:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
733:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
734:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
735:       assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
736:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
737:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
738:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
739:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
740:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
741:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
742:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
743:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
744:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
745:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
746:       assertEquals(0, node_SideEffectFlags0.valueOf());
747:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
748:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
749:       assertEquals(0, node_SideEffectFlags1.valueOf());
750:       assertEquals(0, node_SideEffectFlags2.valueOf());
751:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
752:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
753:       assertEquals(0, node_SideEffectFlags4.valueOf());
754:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
755:       assertEquals(0, node_SideEffectFlags5.valueOf());
756:       assertEquals(0, node_SideEffectFlags6.valueOf());
757:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
758:       assertNotNull(node_SideEffectFlags6);
759:       
760:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags5.setAllFlags();
761:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
762:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
763:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
764:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
765:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
766:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
767:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
768:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
769:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
770:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
771:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
772:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
773:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
774:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
775:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
776:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
777:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
778:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
779:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
780:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
781:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
782:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
783:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
784:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
785:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
786:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
787:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
788:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
789:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
790:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
791:       assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
792:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
793:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
794:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
795:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
796:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
797:       assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
798:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
799:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
800:       assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
801:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
802:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
803:       assertEquals(0, node_SideEffectFlags7.valueOf());
804:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
805:       assertEquals(0, node_SideEffectFlags0.valueOf());
806:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
807:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
808:       assertEquals(0, node_SideEffectFlags1.valueOf());
809:       assertEquals(0, node_SideEffectFlags2.valueOf());
810:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
811:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
812:       assertEquals(0, node_SideEffectFlags4.valueOf());
813:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
814:       assertEquals(0, node_SideEffectFlags5.valueOf());
815:       assertNotNull(node_SideEffectFlags7);
816:       
817:       int int0 = node1.getSourceOffset();
818:       assertEquals((-1), int0);
819:       assertEquals(32, Node.INCRDECR_PROP);
820:       assertEquals(46, Node.IS_NAMESPACE);
821:       assertEquals(51, Node.STATIC_SOURCE_FILE);
822:       assertEquals(12, Node.COLUMN_BITS);
823:       assertEquals(47, Node.IS_DISPATCHER);
824:       assertEquals(57, Node.LAST_PROP);
825:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
826:       assertEquals(1, Node.DECR_FLAG);
827:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
828:       assertEquals(29, Node.JSDOC_INFO_PROP);
829:       assertEquals(15, Node.NO_SIDE_EFFECTS);
830:       assertEquals(54, Node.SLASH_V);
831:       assertEquals(43, Node.IS_CONSTANT_NAME);
832:       assertEquals(2, Node.POST_FLAG);
833:       assertEquals(30, Node.VAR_ARGS_NAME);
834:       assertEquals(40, Node.ORIGINALNAME_PROP);
835:       assertEquals(4095, Node.COLUMN_MASK);
836:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
837:       assertEquals(36, Node.QUOTED_PROP);
838:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
839:       assertEquals(50, Node.FREE_CALL);
840:       assertEquals(8, Node.FLAG_NO_THROWS);
841:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
842:       assertEquals(55, Node.INFERRED_FUNCTION);
843:       assertEquals(39, Node.EMPTY_BLOCK);
844:       assertEquals(53, Node.INPUT_ID);
845:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
846:       assertEquals(52, Node.LENGTH);
847:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
848:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
849:       assertEquals(57, Node.REFLECTED_OBJECT);
850:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
851:       assertEquals(56, Node.CHANGE_TIME);
852:       assertEquals(49, Node.DIRECT_EVAL);
853:       assertEquals(37, Node.OPT_ARG_NAME);
854:       assertEquals(48, Node.DIRECTIVES);
855:       assertFalse(node1.equals((Object)node0));
856:       assertFalse(node1.isCall());
857:       assertFalse(node1.isName());
858:       assertFalse(node1.isNull());
859:       assertFalse(node1.isStringKey());
860:       assertFalse(node1.isBlock());
861:       assertFalse(node1.isVar());
862:       assertFalse(node1.isSetterDef());
863:       assertFalse(node1.isNew());
864:       assertFalse(node1.isAdd());
865:       assertFalse(node1.isCatch());
866:       assertFalse(node1.hasMoreThanOneChild());
867:       assertFalse(node1.isWhile());
868:       assertFalse(node1.isReturn());
869:       assertEquals(39, node1.getType());
870:       assertFalse(node1.isDec());
871:       assertFalse(node1.isTypeOf());
872:       assertFalse(node1.isRegExp());
873:       assertFalse(node1.isVoid());
874:       assertEquals((-1), node1.getLineno());
875:       assertFalse(node1.isGetElem());
876:       assertFalse(node1.isArrayLit());
877:       assertFalse(node1.hasOneChild());
878:       assertFalse(node1.isLabelName());
879:       assertFalse(node1.isFor());
880:       assertFalse(node1.isTrue());
881:       assertFalse(node1.isTry());
882:       assertFalse(node1.isGetterDef());
883:       assertFalse(node1.isOr());
884:       assertFalse(node1.isScript());
885:       assertFalse(node1.isEmpty());
886:       assertEquals(0, node1.getChildCount());
887:       assertFalse(node1.isDo());
888:       assertFalse(node1.isAssignAdd());
889:       assertFalse(node1.isLabel());
890:       assertFalse(node1.isDefaultCase());
891:       assertFalse(node1.isParamList());
892:       assertFalse(node1.isSwitch());
893:       assertFalse(node1.isFalse());
894:       assertFalse(node1.isHook());
895:       assertFalse(node1.isThrow());
896:       assertFalse(node1.isInc());
897:       assertFalse(node1.isGetProp());
898:       assertEquals((-1), node1.getCharno());
899:       assertFalse(node1.isString());
900:       assertFalse(node1.isCase());
901:       assertFalse(node1.isThis());
902:       assertFalse(node1.isComma());
903:       assertFalse(node1.isExprResult());
904:       assertFalse(node1.isDelProp());
905:       assertFalse(node1.isWith());
906:       assertFalse(node1.isBreak());
907:       assertFalse(node1.isInstanceOf());
908:       assertFalse(node1.isAssign());
909:       assertFalse(node1.isIf());
910:       assertFalse(node1.hasChildren());
911:       assertFalse(node1.isNE());
912:       assertFalse(node1.isDebugger());
913:       assertEquals((-1), node1.getSourcePosition());
914:       assertTrue(node1.isNumber());
915:       assertFalse(node1.isIn());
916:       assertFalse(node1.isAnd());
917:       assertFalse(node1.isContinue());
918:       assertFalse(node1.isNot());
919:       assertFalse(node1.isObjectLit());
920:       assertFalse(node1.isFunction());
921:       assertFalse(node1.isCast());
922:       
923:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags3.setThrows();
924:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
925:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
926:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
927:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
928:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
929:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
930:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
931:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
932:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
933:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
934:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
935:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
936:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
937:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
938:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
939:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
940:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
941:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
942:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
943:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
944:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
945:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
946:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
947:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
948:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
949:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
950:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
951:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
952:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
953:       assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
954:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
955:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
956:       assertEquals(0, node_SideEffectFlags8.valueOf());
957:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
958:       assertEquals(0, node_SideEffectFlags0.valueOf());
959:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
960:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
961:       assertEquals(0, node_SideEffectFlags1.valueOf());
962:       assertEquals(0, node_SideEffectFlags3.valueOf());
963:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
964:       assertNotNull(node_SideEffectFlags8);
965:       
966:       boolean boolean2 = node0.isFromExterns();
967:       assertFalse(boolean2);
968:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
969:       assertEquals(53, Node.INPUT_ID);
970:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
971:       assertEquals(4095, Node.COLUMN_MASK);
972:       assertEquals(47, Node.IS_DISPATCHER);
973:       assertEquals(37, Node.OPT_ARG_NAME);
974:       assertEquals(48, Node.DIRECTIVES);
975:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
976:       assertEquals(8, Node.FLAG_NO_THROWS);
977:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
978:       assertEquals(29, Node.JSDOC_INFO_PROP);
979:       assertEquals(39, Node.EMPTY_BLOCK);
980:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
981:       assertEquals(55, Node.INFERRED_FUNCTION);
982:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
983:       assertEquals(49, Node.DIRECT_EVAL);
984:       assertEquals(56, Node.CHANGE_TIME);
985:       assertEquals(36, Node.QUOTED_PROP);
986:       assertEquals(57, Node.REFLECTED_OBJECT);
987:       assertEquals(54, Node.SLASH_V);
988:       assertEquals(52, Node.LENGTH);
989:       assertEquals(57, Node.LAST_PROP);
990:       assertEquals(15, Node.NO_SIDE_EFFECTS);
991:       assertEquals(40, Node.ORIGINALNAME_PROP);
992:       assertEquals(1, Node.DECR_FLAG);
993:       assertEquals(30, Node.VAR_ARGS_NAME);
994:       assertEquals(12, Node.COLUMN_BITS);
995:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
996:       assertEquals(2, Node.POST_FLAG);
997:       assertEquals(32, Node.INCRDECR_PROP);
998:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
999:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1000:       assertEquals(50, Node.FREE_CALL);
1001:       assertEquals(46, Node.IS_NAMESPACE);
1002:       assertEquals(43, Node.IS_CONSTANT_NAME);
1003:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1004:       assertTrue(boolean2 == boolean0);
1005:       assertTrue(boolean2 == boolean1);
1006:       assertFalse(node0.equals((Object)node1));
1007:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1008:       assertTrue(stack0.isEmpty());
1009:       assertTrue(stack0.empty());
1010:       assertEquals(0, stack0.size());
1011:       assertEquals("[]", stack0.toString());
1012:       assertEquals(10, stack0.capacity());
1013:       assertFalse(node0.isIn());
1014:       assertFalse(node0.isCase());
1015:       assertFalse(node0.isFor());
1016:       assertFalse(node0.isTry());
1017:       assertFalse(node0.isFunction());
1018:       assertFalse(node0.isArrayLit());
1019:       assertFalse(node0.isString());
1020:       assertFalse(node0.isGetterDef());
1021:       assertFalse(node0.isSwitch());
1022:       assertFalse(node0.isDebugger());
1023:       assertEquals((-1), node0.getCharno());
1024:       assertFalse(node0.isSetterDef());
1025:       assertFalse(node0.isCatch());
1026:       assertFalse(node0.isInstanceOf());
1027:       assertFalse(node0.isWith());
1028:       assertFalse(node0.isFalse());
1029:       assertFalse(node0.isRegExp());
1030:       assertFalse(node0.isThis());
1031:       assertFalse(node0.isHook());
1032:       assertFalse(node0.isThrow());
1033:       assertFalse(node0.isInc());
1034:       assertFalse(node0.isIf());
1035:       assertFalse(node0.isNE());
1036:       assertEquals((-1), node0.getLineno());
1037:       assertFalse(node0.isReturn());
1038:       assertFalse(node0.isAssignAdd());
1039:       assertFalse(node0.isLabel());
1040:       assertFalse(node0.isOr());
1041:       assertFalse(node0.hasMoreThanOneChild());
1042:       assertFalse(node0.isContinue());
1043:       assertFalse(node0.isWhile());
1044:       assertFalse(node0.hasChildren());
1045:       assertFalse(node0.isDec());
1046:       assertFalse(node0.isAssign());
1047:       assertFalse(node0.isTypeOf());
1048:       assertFalse(node0.isDo());
1049:       assertFalse(node0.isBlock());
1050:       assertFalse(node0.hasOneChild());
1051:       assertFalse(node0.isScript());
1052:       assertFalse(node0.isCast());
1053:       assertFalse(node0.isNumber());
1054:       assertEquals((-1), node0.getSourcePosition());
1055:       assertFalse(node0.isNot());
1056:       assertFalse(node0.isObjectLit());
1057:       assertFalse(node0.isLabelName());
1058:       assertFalse(node0.isAnd());
1059:       assertFalse(node0.isStringKey());
1060:       assertTrue(node0.isParamList());
1061:       assertEquals(0, node0.getChildCount());
1062:       assertFalse(node0.isGetProp());
1063:       assertEquals(83, node0.getType());
1064:       assertFalse(node0.isDefaultCase());
1065:       assertFalse(node0.isComma());
1066:       assertFalse(node0.isVar());
1067:       assertFalse(node0.isNew());
1068:       assertFalse(node0.isVoid());
1069:       assertFalse(node0.isGetElem());
1070:       assertFalse(node0.isCall());
1071:       assertFalse(node0.isEmpty());
1072:       assertFalse(node0.isExprResult());
1073:       assertFalse(node0.isAdd());
1074:       assertFalse(node0.isBreak());
1075:       assertFalse(node0.isName());
1076:       assertFalse(node0.isDelProp());
1077:       assertFalse(node0.isTrue());
1078:       assertFalse(node0.isNull());
1079:       
1080:       boolean boolean3 = node0.isFunction();
1081:       assertFalse(boolean3);
1082:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1083:       assertEquals(53, Node.INPUT_ID);
1084:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1085:       assertEquals(4095, Node.COLUMN_MASK);
1086:       assertEquals(47, Node.IS_DISPATCHER);
1087:       assertEquals(37, Node.OPT_ARG_NAME);
1088:       assertEquals(48, Node.DIRECTIVES);
1089:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1090:       assertEquals(8, Node.FLAG_NO_THROWS);
1091:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1092:       assertEquals(29, Node.JSDOC_INFO_PROP);
1093:       assertEquals(39, Node.EMPTY_BLOCK);
1094:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1095:       assertEquals(55, Node.INFERRED_FUNCTION);
1096:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1097:       assertEquals(49, Node.DIRECT_EVAL);
1098:       assertEquals(56, Node.CHANGE_TIME);
1099:       assertEquals(36, Node.QUOTED_PROP);
1100:       assertEquals(57, Node.REFLECTED_OBJECT);
1101:       assertEquals(54, Node.SLASH_V);
1102:       assertEquals(52, Node.LENGTH);
1103:       assertEquals(57, Node.LAST_PROP);
1104:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1105:       assertEquals(40, Node.ORIGINALNAME_PROP);
1106:       assertEquals(1, Node.DECR_FLAG);
1107:       assertEquals(30, Node.VAR_ARGS_NAME);
1108:       assertEquals(12, Node.COLUMN_BITS);
1109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1110:       assertEquals(2, Node.POST_FLAG);
1111:       assertEquals(32, Node.INCRDECR_PROP);
1112:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1113:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1114:       assertEquals(50, Node.FREE_CALL);
1115:       assertEquals(46, Node.IS_NAMESPACE);
1116:       assertEquals(43, Node.IS_CONSTANT_NAME);
1117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1118:       assertFalse(node0.equals((Object)node1));
1119:       assertTrue(boolean3 == boolean2);
1120:       assertTrue(boolean3 == boolean1);
1121:       assertTrue(boolean3 == boolean0);
1122:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1123:       assertTrue(stack0.isEmpty());
1124:       assertTrue(stack0.empty());
1125:       assertEquals(0, stack0.size());
1126:       assertEquals("[]", stack0.toString());
1127:       assertEquals(10, stack0.capacity());
1128:       assertFalse(node0.isIn());
1129:       assertFalse(node0.isCase());
1130:       assertFalse(node0.isFor());
1131:       assertFalse(node0.isTry());
1132:       assertFalse(node0.isFunction());
1133:       assertFalse(node0.isArrayLit());
1134:       assertFalse(node0.isString());
1135:       assertFalse(node0.isGetterDef());
1136:       assertFalse(node0.isSwitch());
1137:       assertFalse(node0.isDebugger());
1138:       assertEquals((-1), node0.getCharno());
1139:       assertFalse(node0.isSetterDef());
1140:       assertFalse(node0.isCatch());
1141:       assertFalse(node0.isInstanceOf());
1142:       assertFalse(node0.isWith());
1143:       assertFalse(node0.isFalse());
1144:       assertFalse(node0.isRegExp());
1145:       assertFalse(node0.isThis());
1146:       assertFalse(node0.isHook());
1147:       assertFalse(node0.isThrow());
1148:       assertFalse(node0.isInc());
1149:       assertFalse(node0.isIf());
1150:       assertFalse(node0.isNE());
1151:       assertEquals((-1), node0.getLineno());
1152:       assertFalse(node0.isReturn());
1153:       assertFalse(node0.isAssignAdd());
1154:       assertFalse(node0.isLabel());
1155:       assertFalse(node0.isOr());
1156:       assertFalse(node0.hasMoreThanOneChild());
1157:       assertFalse(node0.isContinue());
1158:       assertFalse(node0.isWhile());
1159:       assertFalse(node0.hasChildren());
1160:       assertFalse(node0.isDec());
1161:       assertFalse(node0.isAssign());
1162:       assertFalse(node0.isTypeOf());
1163:       assertFalse(node0.isDo());
1164:       assertFalse(node0.isBlock());
1165:       assertFalse(node0.hasOneChild());
1166:       assertFalse(node0.isScript());
1167:       assertFalse(node0.isCast());
1168:       assertFalse(node0.isNumber());
1169:       assertEquals((-1), node0.getSourcePosition());
1170:       assertFalse(node0.isNot());
1171:       assertFalse(node0.isObjectLit());
1172:       assertFalse(node0.isLabelName());
1173:       assertFalse(node0.isAnd());
1174:       assertFalse(node0.isStringKey());
1175:       assertTrue(node0.isParamList());
1176:       assertEquals(0, node0.getChildCount());
1177:       assertFalse(node0.isGetProp());
1178:       assertEquals(83, node0.getType());
1179:       assertFalse(node0.isDefaultCase());
1180:       assertFalse(node0.isComma());
1181:       assertFalse(node0.isVar());
1182:       assertFalse(node0.isNew());
1183:       assertFalse(node0.isVoid());
1184:       assertFalse(node0.isGetElem());
1185:       assertFalse(node0.isCall());
1186:       assertFalse(node0.isEmpty());
1187:       assertFalse(node0.isExprResult());
1188:       assertFalse(node0.isAdd());
1189:       assertFalse(node0.isBreak());
1190:       assertFalse(node0.isName());
1191:       assertFalse(node0.isDelProp());
1192:       assertFalse(node0.isTrue());
1193:       assertFalse(node0.isNull());
1194:   }
1195: }
RegularFileObject[/tmp/EvoSuite_78_1629223336453/com/google/javascript/rhino/Node_78_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:16 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_78_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_78_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_78_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.JSTypeExpression",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.JSDocInfo$Marker",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.FluentIterable",
352:       "com.google.common.collect.Iterables$2",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 18:02:16.692 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

Stack<JSType> stack0 = new Stack<JSType>();
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertEquals(10, stack0.capacity());
assertNotNull(stack0);

Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertEquals(10, stack0.capacity());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertEquals(83, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotNull(node0);

Node node1 = Node.newNumber((double) 32);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals(39, node1.getType());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isEmpty());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertNotNull(node1);

boolean boolean0 = node1.isVarArgs();
assertFalse(boolean0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals(39, node1.getType());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isEmpty());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());

Iterable<Node> iterable0 = node0.children();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertEquals(10, stack0.capacity());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertEquals(83, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotNull(iterable0);

boolean boolean1 = node0.isOptionalArg();
assertFalse(boolean1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertEquals(10, stack0.capacity());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertEquals(83, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags4);

node_SideEffectFlags0.clearSideEffectFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags5.setAllFlags();
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertEquals(0, node_SideEffectFlags7.valueOf());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertNotNull(node_SideEffectFlags7);

int int0 = node1.getSourceOffset();
assertEquals((-1), int0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertEquals(39, node1.getType());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isEmpty());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isExprResult());
assertFalse(node1.isDelProp());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags3.setThrows();
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertEquals(0, node_SideEffectFlags8.valueOf());
assertTrue(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags8);

boolean boolean2 = node0.isFromExterns();
assertFalse(boolean2);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.equals((Object)node1));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertEquals(10, stack0.capacity());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertEquals(83, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());

boolean boolean3 = node0.isFunction();
assertFalse(boolean3);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertEquals(10, stack0.capacity());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertTrue(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertEquals(83, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());


[MASTER] 18:02:22.740 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_97_1629223342492/com/google/javascript/rhino/Node_97_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_97_1629223342492/com/google/javascript/rhino/Node_97_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:22.740 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:22.740 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:22.741 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 401
[MASTER] 18:02:22.742 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_97_1629223342492/com/google/javascript/rhino/Node_97_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:22 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import java.util.List;
15: import java.util.Stack;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_97_tmp__ESTest extends Node_97_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
26:       assertNotNull(simpleErrorReporter0);
27:       
28:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
29:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
30:       assertNotNull(jSTypeRegistry0);
31:       
32:       Stack<JSType> stack0 = new Stack<JSType>();
33:       assertEquals(0, stack0.size());
34:       assertTrue(stack0.empty());
35:       assertEquals("[]", stack0.toString());
36:       assertTrue(stack0.isEmpty());
37:       assertEquals(10, stack0.capacity());
38:       assertNotNull(stack0);
39:       
40:       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
41:       assertEquals(52, Node.LENGTH);
42:       assertEquals(40, Node.ORIGINALNAME_PROP);
43:       assertEquals(15, Node.NO_SIDE_EFFECTS);
44:       assertEquals(49, Node.DIRECT_EVAL);
45:       assertEquals(50, Node.FREE_CALL);
46:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
47:       assertEquals(8, Node.FLAG_NO_THROWS);
48:       assertEquals(54, Node.SLASH_V);
49:       assertEquals(51, Node.STATIC_SOURCE_FILE);
50:       assertEquals(57, Node.REFLECTED_OBJECT);
51:       assertEquals(32, Node.INCRDECR_PROP);
52:       assertEquals(4095, Node.COLUMN_MASK);
53:       assertEquals(37, Node.OPT_ARG_NAME);
54:       assertEquals(48, Node.DIRECTIVES);
55:       assertEquals(1, Node.DECR_FLAG);
56:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
57:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
58:       assertEquals(12, Node.COLUMN_BITS);
59:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
60:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
61:       assertEquals(53, Node.INPUT_ID);
62:       assertEquals(29, Node.JSDOC_INFO_PROP);
63:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
64:       assertEquals(43, Node.IS_CONSTANT_NAME);
65:       assertEquals(56, Node.CHANGE_TIME);
66:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
67:       assertEquals(36, Node.QUOTED_PROP);
68:       assertEquals(46, Node.IS_NAMESPACE);
69:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
70:       assertEquals(55, Node.INFERRED_FUNCTION);
71:       assertEquals(39, Node.EMPTY_BLOCK);
72:       assertEquals(30, Node.VAR_ARGS_NAME);
73:       assertEquals(57, Node.LAST_PROP);
74:       assertEquals(2, Node.POST_FLAG);
75:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
76:       assertEquals(47, Node.IS_DISPATCHER);
77:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
78:       assertEquals(0, stack0.size());
79:       assertTrue(stack0.empty());
80:       assertEquals("[]", stack0.toString());
81:       assertTrue(stack0.isEmpty());
82:       assertEquals(10, stack0.capacity());
83:       assertFalse(node0.isAnd());
84:       assertFalse(node0.isObjectLit());
85:       assertTrue(node0.isParamList());
86:       assertFalse(node0.isWith());
87:       assertFalse(node0.isGetProp());
88:       assertFalse(node0.isInstanceOf());
89:       assertFalse(node0.isScript());
90:       assertEquals(83, node0.getType());
91:       assertFalse(node0.isNot());
92:       assertFalse(node0.isCast());
93:       assertFalse(node0.isFalse());
94:       assertFalse(node0.isLabelName());
95:       assertFalse(node0.isInc());
96:       assertFalse(node0.isAssignAdd());
97:       assertFalse(node0.isLabel());
98:       assertFalse(node0.isThrow());
99:       assertFalse(node0.hasMoreThanOneChild());
100:       assertFalse(node0.isIn());
101:       assertEquals((-1), node0.getLineno());
102:       assertFalse(node0.isCase());
103:       assertFalse(node0.isSwitch());
104:       assertFalse(node0.isNE());
105:       assertEquals((-1), node0.getCharno());
106:       assertFalse(node0.isIf());
107:       assertFalse(node0.isNumber());
108:       assertFalse(node0.isGetterDef());
109:       assertFalse(node0.hasOneChild());
110:       assertFalse(node0.isTry());
111:       assertFalse(node0.isThis());
112:       assertFalse(node0.isRegExp());
113:       assertFalse(node0.isHook());
114:       assertFalse(node0.isFor());
115:       assertFalse(node0.isBlock());
116:       assertFalse(node0.isCatch());
117:       assertEquals(0, node0.getChildCount());
118:       assertFalse(node0.isDebugger());
119:       assertFalse(node0.isVoid());
120:       assertFalse(node0.isStringKey());
121:       assertFalse(node0.isNull());
122:       assertFalse(node0.isTrue());
123:       assertFalse(node0.isVar());
124:       assertFalse(node0.isArrayLit());
125:       assertFalse(node0.isEmpty());
126:       assertFalse(node0.isNew());
127:       assertFalse(node0.isAdd());
128:       assertFalse(node0.isSetterDef());
129:       assertFalse(node0.isDefaultCase());
130:       assertFalse(node0.isFunction());
131:       assertFalse(node0.isContinue());
132:       assertFalse(node0.isDo());
133:       assertFalse(node0.isString());
134:       assertEquals((-1), node0.getSourcePosition());
135:       assertFalse(node0.isDelProp());
136:       assertFalse(node0.isOr());
137:       assertFalse(node0.isName());
138:       assertFalse(node0.isBreak());
139:       assertFalse(node0.isCall());
140:       assertFalse(node0.isGetElem());
141:       assertFalse(node0.isExprResult());
142:       assertFalse(node0.isComma());
143:       assertFalse(node0.isDec());
144:       assertFalse(node0.isTypeOf());
145:       assertFalse(node0.isReturn());
146:       assertFalse(node0.isAssign());
147:       assertFalse(node0.isWhile());
148:       assertFalse(node0.hasChildren());
149:       assertNotNull(node0);
150:       
151:       Node node1 = Node.newNumber((double) 32);
152:       assertEquals(48, Node.DIRECTIVES);
153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
154:       assertEquals(8, Node.FLAG_NO_THROWS);
155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
156:       assertEquals(39, Node.EMPTY_BLOCK);
157:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
158:       assertEquals(55, Node.INFERRED_FUNCTION);
159:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
160:       assertEquals(50, Node.FREE_CALL);
161:       assertEquals(43, Node.IS_CONSTANT_NAME);
162:       assertEquals(36, Node.QUOTED_PROP);
163:       assertEquals(57, Node.REFLECTED_OBJECT);
164:       assertEquals(54, Node.SLASH_V);
165:       assertEquals(52, Node.LENGTH);
166:       assertEquals(40, Node.ORIGINALNAME_PROP);
167:       assertEquals(15, Node.NO_SIDE_EFFECTS);
168:       assertEquals(53, Node.INPUT_ID);
169:       assertEquals(30, Node.VAR_ARGS_NAME);
170:       assertEquals(57, Node.LAST_PROP);
171:       assertEquals(47, Node.IS_DISPATCHER);
172:       assertEquals(37, Node.OPT_ARG_NAME);
173:       assertEquals(2, Node.POST_FLAG);
174:       assertEquals(32, Node.INCRDECR_PROP);
175:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
176:       assertEquals(29, Node.JSDOC_INFO_PROP);
177:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
178:       assertEquals(49, Node.DIRECT_EVAL);
179:       assertEquals(46, Node.IS_NAMESPACE);
180:       assertEquals(56, Node.CHANGE_TIME);
181:       assertEquals(51, Node.STATIC_SOURCE_FILE);
182:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
183:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
184:       assertEquals(1, Node.DECR_FLAG);
185:       assertEquals(4095, Node.COLUMN_MASK);
186:       assertEquals(12, Node.COLUMN_BITS);
187:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
188:       assertFalse(node1.equals((Object)node0));
189:       assertFalse(node1.isArrayLit());
190:       assertFalse(node1.isTry());
191:       assertFalse(node1.isVoid());
192:       assertFalse(node1.isFunction());
193:       assertFalse(node1.isEmpty());
194:       assertFalse(node1.isIf());
195:       assertFalse(node1.isGetterDef());
196:       assertFalse(node1.isDelProp());
197:       assertFalse(node1.isDebugger());
198:       assertFalse(node1.isTrue());
199:       assertFalse(node1.isNE());
200:       assertTrue(node1.isNumber());
201:       assertFalse(node1.isCatch());
202:       assertFalse(node1.isCase());
203:       assertFalse(node1.isRegExp());
204:       assertFalse(node1.isFor());
205:       assertFalse(node1.isInc());
206:       assertFalse(node1.isString());
207:       assertFalse(node1.isIn());
208:       assertFalse(node1.isSetterDef());
209:       assertFalse(node1.isContinue());
210:       assertFalse(node1.isFalse());
211:       assertFalse(node1.isThrow());
212:       assertFalse(node1.hasOneChild());
213:       assertFalse(node1.isExprResult());
214:       assertFalse(node1.isGetElem());
215:       assertFalse(node1.isScript());
216:       assertFalse(node1.isCast());
217:       assertEquals((-1), node1.getSourcePosition());
218:       assertFalse(node1.isNot());
219:       assertFalse(node1.isLabelName());
220:       assertFalse(node1.isAnd());
221:       assertEquals((-1), node1.getLineno());
222:       assertFalse(node1.isReturn());
223:       assertFalse(node1.isObjectLit());
224:       assertFalse(node1.isGetProp());
225:       assertFalse(node1.hasMoreThanOneChild());
226:       assertFalse(node1.isInstanceOf());
227:       assertFalse(node1.isWhile());
228:       assertFalse(node1.isWith());
229:       assertEquals(39, node1.getType());
230:       assertFalse(node1.hasChildren());
231:       assertFalse(node1.isDec());
232:       assertFalse(node1.isTypeOf());
233:       assertFalse(node1.isAssign());
234:       assertFalse(node1.isThis());
235:       assertFalse(node1.isComma());
236:       assertFalse(node1.isHook());
237:       assertFalse(node1.isBlock());
238:       assertFalse(node1.isNew());
239:       assertFalse(node1.isCall());
240:       assertFalse(node1.isAdd());
241:       assertFalse(node1.isBreak());
242:       assertFalse(node1.isName());
243:       assertFalse(node1.isParamList());
244:       assertFalse(node1.isSwitch());
245:       assertEquals((-1), node1.getCharno());
246:       assertFalse(node1.isNull());
247:       assertFalse(node1.isStringKey());
248:       assertFalse(node1.isAssignAdd());
249:       assertFalse(node1.isLabel());
250:       assertEquals(0, node1.getChildCount());
251:       assertFalse(node1.isOr());
252:       assertFalse(node1.isDefaultCase());
253:       assertFalse(node1.isDo());
254:       assertFalse(node1.isVar());
255:       assertNotNull(node1);
256:       
257:       boolean boolean0 = node1.isVarArgs();
258:       assertFalse(boolean0);
259:       assertEquals(48, Node.DIRECTIVES);
260:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
261:       assertEquals(8, Node.FLAG_NO_THROWS);
262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
263:       assertEquals(39, Node.EMPTY_BLOCK);
264:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
265:       assertEquals(55, Node.INFERRED_FUNCTION);
266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
267:       assertEquals(50, Node.FREE_CALL);
268:       assertEquals(43, Node.IS_CONSTANT_NAME);
269:       assertEquals(36, Node.QUOTED_PROP);
270:       assertEquals(57, Node.REFLECTED_OBJECT);
271:       assertEquals(54, Node.SLASH_V);
272:       assertEquals(52, Node.LENGTH);
273:       assertEquals(40, Node.ORIGINALNAME_PROP);
274:       assertEquals(15, Node.NO_SIDE_EFFECTS);
275:       assertEquals(53, Node.INPUT_ID);
276:       assertEquals(30, Node.VAR_ARGS_NAME);
277:       assertEquals(57, Node.LAST_PROP);
278:       assertEquals(47, Node.IS_DISPATCHER);
279:       assertEquals(37, Node.OPT_ARG_NAME);
280:       assertEquals(2, Node.POST_FLAG);
281:       assertEquals(32, Node.INCRDECR_PROP);
282:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
283:       assertEquals(29, Node.JSDOC_INFO_PROP);
284:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
285:       assertEquals(49, Node.DIRECT_EVAL);
286:       assertEquals(46, Node.IS_NAMESPACE);
287:       assertEquals(56, Node.CHANGE_TIME);
288:       assertEquals(51, Node.STATIC_SOURCE_FILE);
289:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
290:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
291:       assertEquals(1, Node.DECR_FLAG);
292:       assertEquals(4095, Node.COLUMN_MASK);
293:       assertEquals(12, Node.COLUMN_BITS);
294:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
295:       assertFalse(node1.equals((Object)node0));
296:       assertFalse(node1.isArrayLit());
297:       assertFalse(node1.isTry());
298:       assertFalse(node1.isVoid());
299:       assertFalse(node1.isFunction());
300:       assertFalse(node1.isEmpty());
301:       assertFalse(node1.isIf());
302:       assertFalse(node1.isGetterDef());
303:       assertFalse(node1.isDelProp());
304:       assertFalse(node1.isDebugger());
305:       assertFalse(node1.isTrue());
306:       assertFalse(node1.isNE());
307:       assertTrue(node1.isNumber());
308:       assertFalse(node1.isCatch());
309:       assertFalse(node1.isCase());
310:       assertFalse(node1.isRegExp());
311:       assertFalse(node1.isFor());
312:       assertFalse(node1.isInc());
313:       assertFalse(node1.isString());
314:       assertFalse(node1.isIn());
315:       assertFalse(node1.isSetterDef());
316:       assertFalse(node1.isContinue());
317:       assertFalse(node1.isFalse());
318:       assertFalse(node1.isThrow());
319:       assertFalse(node1.hasOneChild());
320:       assertFalse(node1.isExprResult());
321:       assertFalse(node1.isGetElem());
322:       assertFalse(node1.isScript());
323:       assertFalse(node1.isCast());
324:       assertEquals((-1), node1.getSourcePosition());
325:       assertFalse(node1.isNot());
326:       assertFalse(node1.isLabelName());
327:       assertFalse(node1.isAnd());
328:       assertEquals((-1), node1.getLineno());
329:       assertFalse(node1.isReturn());
330:       assertFalse(node1.isObjectLit());
331:       assertFalse(node1.isGetProp());
332:       assertFalse(node1.hasMoreThanOneChild());
333:       assertFalse(node1.isInstanceOf());
334:       assertFalse(node1.isWhile());
335:       assertFalse(node1.isWith());
336:       assertEquals(39, node1.getType());
337:       assertFalse(node1.hasChildren());
338:       assertFalse(node1.isDec());
339:       assertFalse(node1.isTypeOf());
340:       assertFalse(node1.isAssign());
341:       assertFalse(node1.isThis());
342:       assertFalse(node1.isComma());
343:       assertFalse(node1.isHook());
344:       assertFalse(node1.isBlock());
345:       assertFalse(node1.isNew());
346:       assertFalse(node1.isCall());
347:       assertFalse(node1.isAdd());
348:       assertFalse(node1.isBreak());
349:       assertFalse(node1.isName());
350:       assertFalse(node1.isParamList());
351:       assertFalse(node1.isSwitch());
352:       assertEquals((-1), node1.getCharno());
353:       assertFalse(node1.isNull());
354:       assertFalse(node1.isStringKey());
355:       assertFalse(node1.isAssignAdd());
356:       assertFalse(node1.isLabel());
357:       assertEquals(0, node1.getChildCount());
358:       assertFalse(node1.isOr());
359:       assertFalse(node1.isDefaultCase());
360:       assertFalse(node1.isDo());
361:       assertFalse(node1.isVar());
362:       
363:       Iterable<Node> iterable0 = node0.children();
364:       assertEquals(52, Node.LENGTH);
365:       assertEquals(40, Node.ORIGINALNAME_PROP);
366:       assertEquals(15, Node.NO_SIDE_EFFECTS);
367:       assertEquals(49, Node.DIRECT_EVAL);
368:       assertEquals(50, Node.FREE_CALL);
369:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
370:       assertEquals(8, Node.FLAG_NO_THROWS);
371:       assertEquals(54, Node.SLASH_V);
372:       assertEquals(51, Node.STATIC_SOURCE_FILE);
373:       assertEquals(57, Node.REFLECTED_OBJECT);
374:       assertEquals(32, Node.INCRDECR_PROP);
375:       assertEquals(4095, Node.COLUMN_MASK);
376:       assertEquals(37, Node.OPT_ARG_NAME);
377:       assertEquals(48, Node.DIRECTIVES);
378:       assertEquals(1, Node.DECR_FLAG);
379:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
380:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
381:       assertEquals(12, Node.COLUMN_BITS);
382:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
383:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
384:       assertEquals(53, Node.INPUT_ID);
385:       assertEquals(29, Node.JSDOC_INFO_PROP);
386:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
387:       assertEquals(43, Node.IS_CONSTANT_NAME);
388:       assertEquals(56, Node.CHANGE_TIME);
389:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
390:       assertEquals(36, Node.QUOTED_PROP);
391:       assertEquals(46, Node.IS_NAMESPACE);
392:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
393:       assertEquals(55, Node.INFERRED_FUNCTION);
394:       assertEquals(39, Node.EMPTY_BLOCK);
395:       assertEquals(30, Node.VAR_ARGS_NAME);
396:       assertEquals(57, Node.LAST_PROP);
397:       assertEquals(2, Node.POST_FLAG);
398:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
399:       assertEquals(47, Node.IS_DISPATCHER);
400:       assertFalse(node0.equals((Object)node1));
401:       assertFalse(iterable0.contains(node0));
402:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
403:       assertEquals(0, stack0.size());
404:       assertTrue(stack0.empty());
405:       assertEquals("[]", stack0.toString());
406:       assertTrue(stack0.isEmpty());
407:       assertEquals(10, stack0.capacity());
408:       assertFalse(node0.isAnd());
409:       assertFalse(node0.isObjectLit());
410:       assertTrue(node0.isParamList());
411:       assertFalse(node0.isWith());
412:       assertFalse(node0.isGetProp());
413:       assertFalse(node0.isInstanceOf());
414:       assertFalse(node0.isScript());
415:       assertEquals(83, node0.getType());
416:       assertFalse(node0.isNot());
417:       assertFalse(node0.isCast());
418:       assertFalse(node0.isFalse());
419:       assertFalse(node0.isLabelName());
420:       assertFalse(node0.isInc());
421:       assertFalse(node0.isAssignAdd());
422:       assertFalse(node0.isLabel());
423:       assertFalse(node0.isThrow());
424:       assertFalse(node0.hasMoreThanOneChild());
425:       assertFalse(node0.isIn());
426:       assertEquals((-1), node0.getLineno());
427:       assertFalse(node0.isCase());
428:       assertFalse(node0.isSwitch());
429:       assertFalse(node0.isNE());
430:       assertEquals((-1), node0.getCharno());
431:       assertFalse(node0.isIf());
432:       assertFalse(node0.isNumber());
433:       assertFalse(node0.isGetterDef());
434:       assertFalse(node0.hasOneChild());
435:       assertFalse(node0.isTry());
436:       assertFalse(node0.isThis());
437:       assertFalse(node0.isRegExp());
438:       assertFalse(node0.isHook());
439:       assertFalse(node0.isFor());
440:       assertFalse(node0.isBlock());
441:       assertFalse(node0.isCatch());
442:       assertEquals(0, node0.getChildCount());
443:       assertFalse(node0.isDebugger());
444:       assertFalse(node0.isVoid());
445:       assertFalse(node0.isStringKey());
446:       assertFalse(node0.isNull());
447:       assertFalse(node0.isTrue());
448:       assertFalse(node0.isVar());
449:       assertFalse(node0.isArrayLit());
450:       assertFalse(node0.isEmpty());
451:       assertFalse(node0.isNew());
452:       assertFalse(node0.isAdd());
453:       assertFalse(node0.isSetterDef());
454:       assertFalse(node0.isDefaultCase());
455:       assertFalse(node0.isFunction());
456:       assertFalse(node0.isContinue());
457:       assertFalse(node0.isDo());
458:       assertFalse(node0.isString());
459:       assertEquals((-1), node0.getSourcePosition());
460:       assertFalse(node0.isDelProp());
461:       assertFalse(node0.isOr());
462:       assertFalse(node0.isName());
463:       assertFalse(node0.isBreak());
464:       assertFalse(node0.isCall());
465:       assertFalse(node0.isGetElem());
466:       assertFalse(node0.isExprResult());
467:       assertFalse(node0.isComma());
468:       assertFalse(node0.isDec());
469:       assertFalse(node0.isTypeOf());
470:       assertFalse(node0.isReturn());
471:       assertFalse(node0.isAssign());
472:       assertFalse(node0.isWhile());
473:       assertFalse(node0.hasChildren());
474:       assertNotNull(iterable0);
475:       
476:       boolean boolean1 = node0.isOptionalArg();
477:       assertFalse(boolean1);
478:       assertEquals(52, Node.LENGTH);
479:       assertEquals(40, Node.ORIGINALNAME_PROP);
480:       assertEquals(15, Node.NO_SIDE_EFFECTS);
481:       assertEquals(49, Node.DIRECT_EVAL);
482:       assertEquals(50, Node.FREE_CALL);
483:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
484:       assertEquals(8, Node.FLAG_NO_THROWS);
485:       assertEquals(54, Node.SLASH_V);
486:       assertEquals(51, Node.STATIC_SOURCE_FILE);
487:       assertEquals(57, Node.REFLECTED_OBJECT);
488:       assertEquals(32, Node.INCRDECR_PROP);
489:       assertEquals(4095, Node.COLUMN_MASK);
490:       assertEquals(37, Node.OPT_ARG_NAME);
491:       assertEquals(48, Node.DIRECTIVES);
492:       assertEquals(1, Node.DECR_FLAG);
493:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
494:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
495:       assertEquals(12, Node.COLUMN_BITS);
496:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
497:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
498:       assertEquals(53, Node.INPUT_ID);
499:       assertEquals(29, Node.JSDOC_INFO_PROP);
500:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
501:       assertEquals(43, Node.IS_CONSTANT_NAME);
502:       assertEquals(56, Node.CHANGE_TIME);
503:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
504:       assertEquals(36, Node.QUOTED_PROP);
505:       assertEquals(46, Node.IS_NAMESPACE);
506:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
507:       assertEquals(55, Node.INFERRED_FUNCTION);
508:       assertEquals(39, Node.EMPTY_BLOCK);
509:       assertEquals(30, Node.VAR_ARGS_NAME);
510:       assertEquals(57, Node.LAST_PROP);
511:       assertEquals(2, Node.POST_FLAG);
512:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
513:       assertEquals(47, Node.IS_DISPATCHER);
514:       assertFalse(node0.equals((Object)node1));
515:       assertTrue(boolean1 == boolean0);
516:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
517:       assertEquals(0, stack0.size());
518:       assertTrue(stack0.empty());
519:       assertEquals("[]", stack0.toString());
520:       assertTrue(stack0.isEmpty());
521:       assertEquals(10, stack0.capacity());
522:       assertFalse(node0.isAnd());
523:       assertFalse(node0.isObjectLit());
524:       assertTrue(node0.isParamList());
525:       assertFalse(node0.isWith());
526:       assertFalse(node0.isGetProp());
527:       assertFalse(node0.isInstanceOf());
528:       assertFalse(node0.isScript());
529:       assertEquals(83, node0.getType());
530:       assertFalse(node0.isNot());
531:       assertFalse(node0.isCast());
532:       assertFalse(node0.isFalse());
533:       assertFalse(node0.isLabelName());
534:       assertFalse(node0.isInc());
535:       assertFalse(node0.isAssignAdd());
536:       assertFalse(node0.isLabel());
537:       assertFalse(node0.isThrow());
538:       assertFalse(node0.hasMoreThanOneChild());
539:       assertFalse(node0.isIn());
540:       assertEquals((-1), node0.getLineno());
541:       assertFalse(node0.isCase());
542:       assertFalse(node0.isSwitch());
543:       assertFalse(node0.isNE());
544:       assertEquals((-1), node0.getCharno());
545:       assertFalse(node0.isIf());
546:       assertFalse(node0.isNumber());
547:       assertFalse(node0.isGetterDef());
548:       assertFalse(node0.hasOneChild());
549:       assertFalse(node0.isTry());
550:       assertFalse(node0.isThis());
551:       assertFalse(node0.isRegExp());
552:       assertFalse(node0.isHook());
553:       assertFalse(node0.isFor());
554:       assertFalse(node0.isBlock());
555:       assertFalse(node0.isCatch());
556:       assertEquals(0, node0.getChildCount());
557:       assertFalse(node0.isDebugger());
558:       assertFalse(node0.isVoid());
559:       assertFalse(node0.isStringKey());
560:       assertFalse(node0.isNull());
561:       assertFalse(node0.isTrue());
562:       assertFalse(node0.isVar());
563:       assertFalse(node0.isArrayLit());
564:       assertFalse(node0.isEmpty());
565:       assertFalse(node0.isNew());
566:       assertFalse(node0.isAdd());
567:       assertFalse(node0.isSetterDef());
568:       assertFalse(node0.isDefaultCase());
569:       assertFalse(node0.isFunction());
570:       assertFalse(node0.isContinue());
571:       assertFalse(node0.isDo());
572:       assertFalse(node0.isString());
573:       assertEquals((-1), node0.getSourcePosition());
574:       assertFalse(node0.isDelProp());
575:       assertFalse(node0.isOr());
576:       assertFalse(node0.isName());
577:       assertFalse(node0.isBreak());
578:       assertFalse(node0.isCall());
579:       assertFalse(node0.isGetElem());
580:       assertFalse(node0.isExprResult());
581:       assertFalse(node0.isComma());
582:       assertFalse(node0.isDec());
583:       assertFalse(node0.isTypeOf());
584:       assertFalse(node0.isReturn());
585:       assertFalse(node0.isAssign());
586:       assertFalse(node0.isWhile());
587:       assertFalse(node0.hasChildren());
588:       
589:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
590:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
591:       assertEquals(0, node_SideEffectFlags0.valueOf());
592:       assertNotNull(node_SideEffectFlags0);
593:       
594:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
595:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
596:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
597:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
598:       assertEquals(0, node_SideEffectFlags0.valueOf());
599:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
600:       assertEquals(0, node_SideEffectFlags1.valueOf());
601:       assertNotNull(node_SideEffectFlags1);
602:       
603:       simpleErrorReporter0.warning("Object#Element", "Object#Element", 276, 46);
604:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
605:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
606:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
607:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
608:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
609:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
610:       assertEquals(0, node_SideEffectFlags0.valueOf());
611:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
612:       assertEquals(0, node_SideEffectFlags2.valueOf());
613:       assertNotNull(node_SideEffectFlags2);
614:       
615:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
616:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
617:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
618:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
619:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
620:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
621:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
622:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
623:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
624:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
625:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
626:       assertEquals(0, node_SideEffectFlags0.valueOf());
627:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
628:       assertEquals(0, node_SideEffectFlags1.valueOf());
629:       assertEquals(0, node_SideEffectFlags3.valueOf());
630:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
631:       assertNotNull(node_SideEffectFlags3);
632:       
633:       node_SideEffectFlags0.clearSideEffectFlags();
634:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
635:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
636:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
637:       assertEquals(15, node_SideEffectFlags0.valueOf());
638:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
639:       
640:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
641:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
642:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
643:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
644:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
645:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
646:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
647:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
648:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
649:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
650:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
651:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
652:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
653:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
654:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
655:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
656:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
657:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
658:       assertEquals(0, node_SideEffectFlags0.valueOf());
659:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
660:       assertEquals(0, node_SideEffectFlags1.valueOf());
661:       assertEquals(0, node_SideEffectFlags3.valueOf());
662:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
663:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
664:       assertEquals(0, node_SideEffectFlags4.valueOf());
665:       assertNotNull(node_SideEffectFlags4);
666:       
667:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
668:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
669:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
670:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
671:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
672:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
673:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
674:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
675:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
676:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
677:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
678:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
679:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
680:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
681:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
682:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
683:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
684:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
685:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
686:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
687:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
688:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
689:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
690:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
691:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
692:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
693:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
694:       assertEquals(0, node_SideEffectFlags0.valueOf());
695:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
696:       assertEquals(0, node_SideEffectFlags1.valueOf());
697:       assertEquals(0, node_SideEffectFlags3.valueOf());
698:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
699:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
700:       assertEquals(0, node_SideEffectFlags4.valueOf());
701:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
702:       assertEquals(0, node_SideEffectFlags5.valueOf());
703:       assertNotNull(node_SideEffectFlags5);
704:       
705:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
706:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
707:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
708:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
709:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
710:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
711:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
712:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
713:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
714:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
715:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
716:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
717:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
718:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
719:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
720:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
721:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
722:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
723:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
724:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
725:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
726:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
727:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
728:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
729:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
730:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
731:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
732:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
733:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
734:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
735:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
736:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
737:       assertEquals(0, node_SideEffectFlags6.valueOf());
738:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
739:       assertEquals(0, node_SideEffectFlags0.valueOf());
740:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
741:       assertEquals(0, node_SideEffectFlags1.valueOf());
742:       assertEquals(0, node_SideEffectFlags3.valueOf());
743:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
744:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
745:       assertEquals(0, node_SideEffectFlags4.valueOf());
746:       assertNotNull(node_SideEffectFlags6);
747:       
748:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setAllFlags();
749:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
750:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
751:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
752:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
753:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
754:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
755:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
756:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
757:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
758:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
759:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
760:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
761:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
762:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
763:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
764:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
765:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
766:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
767:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
768:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
769:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
770:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
771:       assertEquals(0, node_SideEffectFlags7.valueOf());
772:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
773:       assertEquals(0, node_SideEffectFlags0.valueOf());
774:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
775:       assertEquals(0, node_SideEffectFlags2.valueOf());
776:       assertNotNull(node_SideEffectFlags7);
777:       
778:       int int0 = node1.getSourceOffset();
779:       assertEquals((-1), int0);
780:       assertEquals(48, Node.DIRECTIVES);
781:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
782:       assertEquals(8, Node.FLAG_NO_THROWS);
783:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
784:       assertEquals(39, Node.EMPTY_BLOCK);
785:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
786:       assertEquals(55, Node.INFERRED_FUNCTION);
787:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
788:       assertEquals(50, Node.FREE_CALL);
789:       assertEquals(43, Node.IS_CONSTANT_NAME);
790:       assertEquals(36, Node.QUOTED_PROP);
791:       assertEquals(57, Node.REFLECTED_OBJECT);
792:       assertEquals(54, Node.SLASH_V);
793:       assertEquals(52, Node.LENGTH);
794:       assertEquals(40, Node.ORIGINALNAME_PROP);
795:       assertEquals(15, Node.NO_SIDE_EFFECTS);
796:       assertEquals(53, Node.INPUT_ID);
797:       assertEquals(30, Node.VAR_ARGS_NAME);
798:       assertEquals(57, Node.LAST_PROP);
799:       assertEquals(47, Node.IS_DISPATCHER);
800:       assertEquals(37, Node.OPT_ARG_NAME);
801:       assertEquals(2, Node.POST_FLAG);
802:       assertEquals(32, Node.INCRDECR_PROP);
803:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
804:       assertEquals(29, Node.JSDOC_INFO_PROP);
805:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
806:       assertEquals(49, Node.DIRECT_EVAL);
807:       assertEquals(46, Node.IS_NAMESPACE);
808:       assertEquals(56, Node.CHANGE_TIME);
809:       assertEquals(51, Node.STATIC_SOURCE_FILE);
810:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
811:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
812:       assertEquals(1, Node.DECR_FLAG);
813:       assertEquals(4095, Node.COLUMN_MASK);
814:       assertEquals(12, Node.COLUMN_BITS);
815:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
816:       assertFalse(node1.equals((Object)node0));
817:       assertFalse(node1.isArrayLit());
818:       assertFalse(node1.isTry());
819:       assertFalse(node1.isVoid());
820:       assertFalse(node1.isFunction());
821:       assertFalse(node1.isEmpty());
822:       assertFalse(node1.isIf());
823:       assertFalse(node1.isGetterDef());
824:       assertFalse(node1.isDelProp());
825:       assertFalse(node1.isDebugger());
826:       assertFalse(node1.isTrue());
827:       assertFalse(node1.isNE());
828:       assertTrue(node1.isNumber());
829:       assertFalse(node1.isCatch());
830:       assertFalse(node1.isCase());
831:       assertFalse(node1.isRegExp());
832:       assertFalse(node1.isFor());
833:       assertFalse(node1.isInc());
834:       assertFalse(node1.isString());
835:       assertFalse(node1.isIn());
836:       assertFalse(node1.isSetterDef());
837:       assertFalse(node1.isContinue());
838:       assertFalse(node1.isFalse());
839:       assertFalse(node1.isThrow());
840:       assertFalse(node1.hasOneChild());
841:       assertFalse(node1.isExprResult());
842:       assertFalse(node1.isGetElem());
843:       assertFalse(node1.isScript());
844:       assertFalse(node1.isCast());
845:       assertEquals((-1), node1.getSourcePosition());
846:       assertFalse(node1.isNot());
847:       assertFalse(node1.isLabelName());
848:       assertFalse(node1.isAnd());
849:       assertEquals((-1), node1.getLineno());
850:       assertFalse(node1.isReturn());
851:       assertFalse(node1.isObjectLit());
852:       assertFalse(node1.isGetProp());
853:       assertFalse(node1.hasMoreThanOneChild());
854:       assertFalse(node1.isInstanceOf());
855:       assertFalse(node1.isWhile());
856:       assertFalse(node1.isWith());
857:       assertEquals(39, node1.getType());
858:       assertFalse(node1.hasChildren());
859:       assertFalse(node1.isDec());
860:       assertFalse(node1.isTypeOf());
861:       assertFalse(node1.isAssign());
862:       assertFalse(node1.isThis());
863:       assertFalse(node1.isComma());
864:       assertFalse(node1.isHook());
865:       assertFalse(node1.isBlock());
866:       assertFalse(node1.isNew());
867:       assertFalse(node1.isCall());
868:       assertFalse(node1.isAdd());
869:       assertFalse(node1.isBreak());
870:       assertFalse(node1.isName());
871:       assertFalse(node1.isParamList());
872:       assertFalse(node1.isSwitch());
873:       assertEquals((-1), node1.getCharno());
874:       assertFalse(node1.isNull());
875:       assertFalse(node1.isStringKey());
876:       assertFalse(node1.isAssignAdd());
877:       assertFalse(node1.isLabel());
878:       assertEquals(0, node1.getChildCount());
879:       assertFalse(node1.isOr());
880:       assertFalse(node1.isDefaultCase());
881:       assertFalse(node1.isDo());
882:       assertFalse(node1.isVar());
883:       
884:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags2.setThrows();
885:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
886:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
887:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
888:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
889:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
890:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
891:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
892:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
893:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
894:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
895:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
896:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
897:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
898:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
899:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
900:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
901:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
902:       assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
903:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
904:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
905:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
906:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
907:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
908:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
909:       assertEquals(0, node_SideEffectFlags8.valueOf());
910:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
911:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
912:       assertEquals(0, node_SideEffectFlags0.valueOf());
913:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
914:       assertEquals(0, node_SideEffectFlags2.valueOf());
915:       assertNotNull(node_SideEffectFlags8);
916:       
917:       boolean boolean2 = node0.isFromExterns();
918:       assertFalse(boolean2);
919:       assertEquals(52, Node.LENGTH);
920:       assertEquals(40, Node.ORIGINALNAME_PROP);
921:       assertEquals(15, Node.NO_SIDE_EFFECTS);
922:       assertEquals(49, Node.DIRECT_EVAL);
923:       assertEquals(50, Node.FREE_CALL);
924:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
925:       assertEquals(8, Node.FLAG_NO_THROWS);
926:       assertEquals(54, Node.SLASH_V);
927:       assertEquals(51, Node.STATIC_SOURCE_FILE);
928:       assertEquals(57, Node.REFLECTED_OBJECT);
929:       assertEquals(32, Node.INCRDECR_PROP);
930:       assertEquals(4095, Node.COLUMN_MASK);
931:       assertEquals(37, Node.OPT_ARG_NAME);
932:       assertEquals(48, Node.DIRECTIVES);
933:       assertEquals(1, Node.DECR_FLAG);
934:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
935:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
936:       assertEquals(12, Node.COLUMN_BITS);
937:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
938:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
939:       assertEquals(53, Node.INPUT_ID);
940:       assertEquals(29, Node.JSDOC_INFO_PROP);
941:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
942:       assertEquals(43, Node.IS_CONSTANT_NAME);
943:       assertEquals(56, Node.CHANGE_TIME);
944:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
945:       assertEquals(36, Node.QUOTED_PROP);
946:       assertEquals(46, Node.IS_NAMESPACE);
947:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
948:       assertEquals(55, Node.INFERRED_FUNCTION);
949:       assertEquals(39, Node.EMPTY_BLOCK);
950:       assertEquals(30, Node.VAR_ARGS_NAME);
951:       assertEquals(57, Node.LAST_PROP);
952:       assertEquals(2, Node.POST_FLAG);
953:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
954:       assertEquals(47, Node.IS_DISPATCHER);
955:       assertFalse(node0.equals((Object)node1));
956:       assertTrue(boolean2 == boolean0);
957:       assertTrue(boolean2 == boolean1);
958:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
959:       assertEquals(0, stack0.size());
960:       assertTrue(stack0.empty());
961:       assertEquals("[]", stack0.toString());
962:       assertTrue(stack0.isEmpty());
963:       assertEquals(10, stack0.capacity());
964:       assertFalse(node0.isAnd());
965:       assertFalse(node0.isObjectLit());
966:       assertTrue(node0.isParamList());
967:       assertFalse(node0.isWith());
968:       assertFalse(node0.isGetProp());
969:       assertFalse(node0.isInstanceOf());
970:       assertFalse(node0.isScript());
971:       assertEquals(83, node0.getType());
972:       assertFalse(node0.isNot());
973:       assertFalse(node0.isCast());
974:       assertFalse(node0.isFalse());
975:       assertFalse(node0.isLabelName());
976:       assertFalse(node0.isInc());
977:       assertFalse(node0.isAssignAdd());
978:       assertFalse(node0.isLabel());
979:       assertFalse(node0.isThrow());
980:       assertFalse(node0.hasMoreThanOneChild());
981:       assertFalse(node0.isIn());
982:       assertEquals((-1), node0.getLineno());
983:       assertFalse(node0.isCase());
984:       assertFalse(node0.isSwitch());
985:       assertFalse(node0.isNE());
986:       assertEquals((-1), node0.getCharno());
987:       assertFalse(node0.isIf());
988:       assertFalse(node0.isNumber());
989:       assertFalse(node0.isGetterDef());
990:       assertFalse(node0.hasOneChild());
991:       assertFalse(node0.isTry());
992:       assertFalse(node0.isThis());
993:       assertFalse(node0.isRegExp());
994:       assertFalse(node0.isHook());
995:       assertFalse(node0.isFor());
996:       assertFalse(node0.isBlock());
997:       assertFalse(node0.isCatch());
998:       assertEquals(0, node0.getChildCount());
999:       assertFalse(node0.isDebugger());
1000:       assertFalse(node0.isVoid());
1001:       assertFalse(node0.isStringKey());
1002:       assertFalse(node0.isNull());
1003:       assertFalse(node0.isTrue());
1004:       assertFalse(node0.isVar());
1005:       assertFalse(node0.isArrayLit());
1006:       assertFalse(node0.isEmpty());
1007:       assertFalse(node0.isNew());
1008:       assertFalse(node0.isAdd());
1009:       assertFalse(node0.isSetterDef());
1010:       assertFalse(node0.isDefaultCase());
1011:       assertFalse(node0.isFunction());
1012:       assertFalse(node0.isContinue());
1013:       assertFalse(node0.isDo());
1014:       assertFalse(node0.isString());
1015:       assertEquals((-1), node0.getSourcePosition());
1016:       assertFalse(node0.isDelProp());
1017:       assertFalse(node0.isOr());
1018:       assertFalse(node0.isName());
1019:       assertFalse(node0.isBreak());
1020:       assertFalse(node0.isCall());
1021:       assertFalse(node0.isGetElem());
1022:       assertFalse(node0.isExprResult());
1023:       assertFalse(node0.isComma());
1024:       assertFalse(node0.isDec());
1025:       assertFalse(node0.isTypeOf());
1026:       assertFalse(node0.isReturn());
1027:       assertFalse(node0.isAssign());
1028:       assertFalse(node0.isWhile());
1029:       assertFalse(node0.hasChildren());
1030:       
1031:       boolean boolean3 = node0.isFunction();
1032:       assertFalse(boolean3);
1033:       assertEquals(52, Node.LENGTH);
1034:       assertEquals(40, Node.ORIGINALNAME_PROP);
1035:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1036:       assertEquals(49, Node.DIRECT_EVAL);
1037:       assertEquals(50, Node.FREE_CALL);
1038:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1039:       assertEquals(8, Node.FLAG_NO_THROWS);
1040:       assertEquals(54, Node.SLASH_V);
1041:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1042:       assertEquals(57, Node.REFLECTED_OBJECT);
1043:       assertEquals(32, Node.INCRDECR_PROP);
1044:       assertEquals(4095, Node.COLUMN_MASK);
1045:       assertEquals(37, Node.OPT_ARG_NAME);
1046:       assertEquals(48, Node.DIRECTIVES);
1047:       assertEquals(1, Node.DECR_FLAG);
1048:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1049:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1050:       assertEquals(12, Node.COLUMN_BITS);
1051:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1052:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1053:       assertEquals(53, Node.INPUT_ID);
1054:       assertEquals(29, Node.JSDOC_INFO_PROP);
1055:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1056:       assertEquals(43, Node.IS_CONSTANT_NAME);
1057:       assertEquals(56, Node.CHANGE_TIME);
1058:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1059:       assertEquals(36, Node.QUOTED_PROP);
1060:       assertEquals(46, Node.IS_NAMESPACE);
1061:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1062:       assertEquals(55, Node.INFERRED_FUNCTION);
1063:       assertEquals(39, Node.EMPTY_BLOCK);
1064:       assertEquals(30, Node.VAR_ARGS_NAME);
1065:       assertEquals(57, Node.LAST_PROP);
1066:       assertEquals(2, Node.POST_FLAG);
1067:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1068:       assertEquals(47, Node.IS_DISPATCHER);
1069:       assertFalse(node0.equals((Object)node1));
1070:       assertTrue(boolean3 == boolean1);
1071:       assertTrue(boolean3 == boolean2);
1072:       assertTrue(boolean3 == boolean0);
1073:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1074:       assertEquals(0, stack0.size());
1075:       assertTrue(stack0.empty());
1076:       assertEquals("[]", stack0.toString());
1077:       assertTrue(stack0.isEmpty());
1078:       assertEquals(10, stack0.capacity());
1079:       assertFalse(node0.isAnd());
1080:       assertFalse(node0.isObjectLit());
1081:       assertTrue(node0.isParamList());
1082:       assertFalse(node0.isWith());
1083:       assertFalse(node0.isGetProp());
1084:       assertFalse(node0.isInstanceOf());
1085:       assertFalse(node0.isScript());
1086:       assertEquals(83, node0.getType());
1087:       assertFalse(node0.isNot());
1088:       assertFalse(node0.isCast());
1089:       assertFalse(node0.isFalse());
1090:       assertFalse(node0.isLabelName());
1091:       assertFalse(node0.isInc());
1092:       assertFalse(node0.isAssignAdd());
1093:       assertFalse(node0.isLabel());
1094:       assertFalse(node0.isThrow());
1095:       assertFalse(node0.hasMoreThanOneChild());
1096:       assertFalse(node0.isIn());
1097:       assertEquals((-1), node0.getLineno());
1098:       assertFalse(node0.isCase());
1099:       assertFalse(node0.isSwitch());
1100:       assertFalse(node0.isNE());
1101:       assertEquals((-1), node0.getCharno());
1102:       assertFalse(node0.isIf());
1103:       assertFalse(node0.isNumber());
1104:       assertFalse(node0.isGetterDef());
1105:       assertFalse(node0.hasOneChild());
1106:       assertFalse(node0.isTry());
1107:       assertFalse(node0.isThis());
1108:       assertFalse(node0.isRegExp());
1109:       assertFalse(node0.isHook());
1110:       assertFalse(node0.isFor());
1111:       assertFalse(node0.isBlock());
1112:       assertFalse(node0.isCatch());
1113:       assertEquals(0, node0.getChildCount());
1114:       assertFalse(node0.isDebugger());
1115:       assertFalse(node0.isVoid());
1116:       assertFalse(node0.isStringKey());
1117:       assertFalse(node0.isNull());
1118:       assertFalse(node0.isTrue());
1119:       assertFalse(node0.isVar());
1120:       assertFalse(node0.isArrayLit());
1121:       assertFalse(node0.isEmpty());
1122:       assertFalse(node0.isNew());
1123:       assertFalse(node0.isAdd());
1124:       assertFalse(node0.isSetterDef());
1125:       assertFalse(node0.isDefaultCase());
1126:       assertFalse(node0.isFunction());
1127:       assertFalse(node0.isContinue());
1128:       assertFalse(node0.isDo());
1129:       assertFalse(node0.isString());
1130:       assertEquals((-1), node0.getSourcePosition());
1131:       assertFalse(node0.isDelProp());
1132:       assertFalse(node0.isOr());
1133:       assertFalse(node0.isName());
1134:       assertFalse(node0.isBreak());
1135:       assertFalse(node0.isCall());
1136:       assertFalse(node0.isGetElem());
1137:       assertFalse(node0.isExprResult());
1138:       assertFalse(node0.isComma());
1139:       assertFalse(node0.isDec());
1140:       assertFalse(node0.isTypeOf());
1141:       assertFalse(node0.isReturn());
1142:       assertFalse(node0.isAssign());
1143:       assertFalse(node0.isWhile());
1144:       assertFalse(node0.hasChildren());
1145:       
1146:       boolean boolean4 = node0.isExprResult();
1147:       assertFalse(boolean4);
1148:       assertEquals(52, Node.LENGTH);
1149:       assertEquals(40, Node.ORIGINALNAME_PROP);
1150:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1151:       assertEquals(49, Node.DIRECT_EVAL);
1152:       assertEquals(50, Node.FREE_CALL);
1153:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1154:       assertEquals(8, Node.FLAG_NO_THROWS);
1155:       assertEquals(54, Node.SLASH_V);
1156:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1157:       assertEquals(57, Node.REFLECTED_OBJECT);
1158:       assertEquals(32, Node.INCRDECR_PROP);
1159:       assertEquals(4095, Node.COLUMN_MASK);
1160:       assertEquals(37, Node.OPT_ARG_NAME);
1161:       assertEquals(48, Node.DIRECTIVES);
1162:       assertEquals(1, Node.DECR_FLAG);
1163:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1164:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1165:       assertEquals(12, Node.COLUMN_BITS);
1166:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1167:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1168:       assertEquals(53, Node.INPUT_ID);
1169:       assertEquals(29, Node.JSDOC_INFO_PROP);
1170:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1171:       assertEquals(43, Node.IS_CONSTANT_NAME);
1172:       assertEquals(56, Node.CHANGE_TIME);
1173:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1174:       assertEquals(36, Node.QUOTED_PROP);
1175:       assertEquals(46, Node.IS_NAMESPACE);
1176:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1177:       assertEquals(55, Node.INFERRED_FUNCTION);
1178:       assertEquals(39, Node.EMPTY_BLOCK);
1179:       assertEquals(30, Node.VAR_ARGS_NAME);
1180:       assertEquals(57, Node.LAST_PROP);
1181:       assertEquals(2, Node.POST_FLAG);
1182:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1183:       assertEquals(47, Node.IS_DISPATCHER);
1184:       assertFalse(node0.equals((Object)node1));
1185:       assertTrue(boolean4 == boolean1);
1186:       assertTrue(boolean4 == boolean0);
1187:       assertTrue(boolean4 == boolean3);
1188:       assertTrue(boolean4 == boolean2);
1189:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1190:       assertEquals(0, stack0.size());
1191:       assertTrue(stack0.empty());
1192:       assertEquals("[]", stack0.toString());
1193:       assertTrue(stack0.isEmpty());
1194:       assertEquals(10, stack0.capacity());
1195:       assertFalse(node0.isAnd());
1196:       assertFalse(node0.isObjectLit());
1197:       assertTrue(node0.isParamList());
1198:       assertFalse(node0.isWith());
1199:       assertFalse(node0.isGetProp());
1200:       assertFalse(node0.isInstanceOf());
1201:       assertFalse(node0.isScript());
1202:       assertEquals(83, node0.getType());
1203:       assertFalse(node0.isNot());
1204:       assertFalse(node0.isCast());
1205:       assertFalse(node0.isFalse());
1206:       assertFalse(node0.isLabelName());
1207:       assertFalse(node0.isInc());
1208:       assertFalse(node0.isAssignAdd());
1209:       assertFalse(node0.isLabel());
1210:       assertFalse(node0.isThrow());
1211:       assertFalse(node0.hasMoreThanOneChild());
1212:       assertFalse(node0.isIn());
1213:       assertEquals((-1), node0.getLineno());
1214:       assertFalse(node0.isCase());
1215:       assertFalse(node0.isSwitch());
1216:       assertFalse(node0.isNE());
1217:       assertEquals((-1), node0.getCharno());
1218:       assertFalse(node0.isIf());
1219:       assertFalse(node0.isNumber());
1220:       assertFalse(node0.isGetterDef());
1221:       assertFalse(node0.hasOneChild());
1222:       assertFalse(node0.isTry());
1223:       assertFalse(node0.isThis());
1224:       assertFalse(node0.isRegExp());
1225:       assertFalse(node0.isHook());
1226:       assertFalse(node0.isFor());
1227:       assertFalse(node0.isBlock());
1228:       assertFalse(node0.isCatch());
1229:       assertEquals(0, node0.getChildCount());
1230:       assertFalse(node0.isDebugger());
1231:       assertFalse(node0.isVoid());
1232:       assertFalse(node0.isStringKey());
1233:       assertFalse(node0.isNull());
1234:       assertFalse(node0.isTrue());
1235:       assertFalse(node0.isVar());
1236:       assertFalse(node0.isArrayLit());
1237:       assertFalse(node0.isEmpty());
1238:       assertFalse(node0.isNew());
1239:       assertFalse(node0.isAdd());
1240:       assertFalse(node0.isSetterDef());
1241:       assertFalse(node0.isDefaultCase());
1242:       assertFalse(node0.isFunction());
1243:       assertFalse(node0.isContinue());
1244:       assertFalse(node0.isDo());
1245:       assertFalse(node0.isString());
1246:       assertEquals((-1), node0.getSourcePosition());
1247:       assertFalse(node0.isDelProp());
1248:       assertFalse(node0.isOr());
1249:       assertFalse(node0.isName());
1250:       assertFalse(node0.isBreak());
1251:       assertFalse(node0.isCall());
1252:       assertFalse(node0.isGetElem());
1253:       assertFalse(node0.isExprResult());
1254:       assertFalse(node0.isComma());
1255:       assertFalse(node0.isDec());
1256:       assertFalse(node0.isTypeOf());
1257:       assertFalse(node0.isReturn());
1258:       assertFalse(node0.isAssign());
1259:       assertFalse(node0.isWhile());
1260:       assertFalse(node0.hasChildren());
1261:   }
1262: }
RegularFileObject[/tmp/EvoSuite_97_1629223342492/com/google/javascript/rhino/Node_97_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:22 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_97_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_97_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_97_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.JSTypeExpression",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.JSDocInfo$Marker",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.FluentIterable",
352:       "com.google.common.collect.Iterables$2",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 18:02:22.781 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

Stack<JSType> stack0 = new Stack<JSType>();
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertNotNull(stack0);

Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertEquals(83, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertNotNull(node0);

Node node1 = Node.newNumber((double) 32);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertTrue(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertNotNull(node1);

boolean boolean0 = node1.isVarArgs();
assertFalse(boolean0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertTrue(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVar());

Iterable<Node> iterable0 = node0.children();
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertEquals(83, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertNotNull(iterable0);

boolean boolean1 = node0.isOptionalArg();
assertFalse(boolean1);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertEquals(83, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);

simpleErrorReporter0.warning("Object#Element", "Object#Element", 276, 46);
Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);

node_SideEffectFlags0.clearSideEffectFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setAllFlags();
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags7.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags7);

int int0 = node1.getSourceOffset();
assertEquals((-1), int0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertTrue(node1.isNumber());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.hasOneChild());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isScript());
assertFalse(node1.isCast());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isLabelName());
assertFalse(node1.isAnd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWhile());
assertFalse(node1.isWith());
assertEquals(39, node1.getType());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVar());

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags2.setThrows();
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertEquals(0, node_SideEffectFlags8.valueOf());
assertTrue(node_SideEffectFlags8.areAllFlagsSet());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags8);

boolean boolean2 = node0.isFromExterns();
assertFalse(boolean2);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertEquals(83, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());

boolean boolean3 = node0.isFunction();
assertFalse(boolean3);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertEquals(83, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());

boolean boolean4 = node0.isExprResult();
assertFalse(boolean4);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isScript());
assertEquals(83, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isLabelName());
assertFalse(node0.isInc());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDelProp());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());


[MASTER] 18:02:23.178 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_100_1629223343071/com/google/javascript/rhino/Node_100_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_100_1629223343071/com/google/javascript/rhino/Node_100_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:23.178 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:23.178 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:23.180 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 377
[MASTER] 18:02:23.181 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_100_1629223343071/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:23 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_100_tmp__ESTest extends Node_100_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString("");
25:       assertEquals(53, Node.INPUT_ID);
26:       assertEquals(29, Node.JSDOC_INFO_PROP);
27:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
28:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
29:       assertEquals(47, Node.IS_DISPATCHER);
30:       assertEquals(2, Node.POST_FLAG);
31:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
32:       assertEquals(46, Node.IS_NAMESPACE);
33:       assertEquals(32, Node.INCRDECR_PROP);
34:       assertEquals(51, Node.STATIC_SOURCE_FILE);
35:       assertEquals(50, Node.FREE_CALL);
36:       assertEquals(54, Node.SLASH_V);
37:       assertEquals(43, Node.IS_CONSTANT_NAME);
38:       assertEquals(57, Node.REFLECTED_OBJECT);
39:       assertEquals(40, Node.ORIGINALNAME_PROP);
40:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
41:       assertEquals(52, Node.LENGTH);
42:       assertEquals(15, Node.NO_SIDE_EFFECTS);
43:       assertEquals(57, Node.LAST_PROP);
44:       assertEquals(30, Node.VAR_ARGS_NAME);
45:       assertEquals(1, Node.DECR_FLAG);
46:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
47:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
48:       assertEquals(12, Node.COLUMN_BITS);
49:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
50:       assertEquals(8, Node.FLAG_NO_THROWS);
51:       assertEquals(39, Node.EMPTY_BLOCK);
52:       assertEquals(55, Node.INFERRED_FUNCTION);
53:       assertEquals(4095, Node.COLUMN_MASK);
54:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
55:       assertEquals(49, Node.DIRECT_EVAL);
56:       assertEquals(37, Node.OPT_ARG_NAME);
57:       assertEquals(36, Node.QUOTED_PROP);
58:       assertEquals(48, Node.DIRECTIVES);
59:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
60:       assertEquals(56, Node.CHANGE_TIME);
61:       assertFalse(node0.isContinue());
62:       assertFalse(node0.isOr());
63:       assertFalse(node0.hasMoreThanOneChild());
64:       assertFalse(node0.isBlock());
65:       assertFalse(node0.isNew());
66:       assertFalse(node0.isAdd());
67:       assertFalse(node0.hasChildren());
68:       assertFalse(node0.isLabel());
69:       assertFalse(node0.isWhile());
70:       assertFalse(node0.isReturn());
71:       assertFalse(node0.isDo());
72:       assertTrue(node0.isString());
73:       assertFalse(node0.isAssignAdd());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isGetElem());
76:       assertFalse(node0.isDec());
77:       assertFalse(node0.isAssign());
78:       assertFalse(node0.isTypeOf());
79:       assertFalse(node0.isExprResult());
80:       assertFalse(node0.isNull());
81:       assertEquals((-1), node0.getLineno());
82:       assertFalse(node0.isName());
83:       assertFalse(node0.isCatch());
84:       assertFalse(node0.isInstanceOf());
85:       assertEquals(0, node0.getChildCount());
86:       assertFalse(node0.isRegExp());
87:       assertFalse(node0.isWith());
88:       assertFalse(node0.isThis());
89:       assertFalse(node0.isScript());
90:       assertFalse(node0.isTry());
91:       assertFalse(node0.isDefaultCase());
92:       assertFalse(node0.isStringKey());
93:       assertFalse(node0.isVar());
94:       assertFalse(node0.hasOneChild());
95:       assertFalse(node0.isArrayLit());
96:       assertFalse(node0.isGetterDef());
97:       assertFalse(node0.isNumber());
98:       assertFalse(node0.isParamList());
99:       assertEquals((-1), node0.getCharno());
100:       assertFalse(node0.isLabelName());
101:       assertFalse(node0.isSwitch());
102:       assertFalse(node0.isCase());
103:       assertFalse(node0.isIn());
104:       assertFalse(node0.isInc());
105:       assertFalse(node0.isFor());
106:       assertFalse(node0.isHook());
107:       assertFalse(node0.isEmpty());
108:       assertFalse(node0.isTrue());
109:       assertFalse(node0.isNE());
110:       assertFalse(node0.isVoid());
111:       assertFalse(node0.isBreak());
112:       assertFalse(node0.isDelProp());
113:       assertFalse(node0.isIf());
114:       assertFalse(node0.isAnd());
115:       assertFalse(node0.isObjectLit());
116:       assertEquals(40, node0.getType());
117:       assertFalse(node0.isNot());
118:       assertFalse(node0.isFunction());
119:       assertFalse(node0.isComma());
120:       assertFalse(node0.isGetProp());
121:       assertFalse(node0.isSetterDef());
122:       assertFalse(node0.isThrow());
123:       assertFalse(node0.isCast());
124:       assertFalse(node0.isFalse());
125:       assertFalse(node0.isDebugger());
126:       assertEquals((-1), node0.getSourcePosition());
127:       assertNotNull(node0);
128:       
129:       boolean boolean0 = node0.mayMutateArguments();
130:       assertTrue(boolean0);
131:       assertEquals(53, Node.INPUT_ID);
132:       assertEquals(29, Node.JSDOC_INFO_PROP);
133:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
134:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
135:       assertEquals(47, Node.IS_DISPATCHER);
136:       assertEquals(2, Node.POST_FLAG);
137:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
138:       assertEquals(46, Node.IS_NAMESPACE);
139:       assertEquals(32, Node.INCRDECR_PROP);
140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
141:       assertEquals(50, Node.FREE_CALL);
142:       assertEquals(54, Node.SLASH_V);
143:       assertEquals(43, Node.IS_CONSTANT_NAME);
144:       assertEquals(57, Node.REFLECTED_OBJECT);
145:       assertEquals(40, Node.ORIGINALNAME_PROP);
146:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
147:       assertEquals(52, Node.LENGTH);
148:       assertEquals(15, Node.NO_SIDE_EFFECTS);
149:       assertEquals(57, Node.LAST_PROP);
150:       assertEquals(30, Node.VAR_ARGS_NAME);
151:       assertEquals(1, Node.DECR_FLAG);
152:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
154:       assertEquals(12, Node.COLUMN_BITS);
155:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
156:       assertEquals(8, Node.FLAG_NO_THROWS);
157:       assertEquals(39, Node.EMPTY_BLOCK);
158:       assertEquals(55, Node.INFERRED_FUNCTION);
159:       assertEquals(4095, Node.COLUMN_MASK);
160:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
161:       assertEquals(49, Node.DIRECT_EVAL);
162:       assertEquals(37, Node.OPT_ARG_NAME);
163:       assertEquals(36, Node.QUOTED_PROP);
164:       assertEquals(48, Node.DIRECTIVES);
165:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
166:       assertEquals(56, Node.CHANGE_TIME);
167:       assertFalse(node0.isContinue());
168:       assertFalse(node0.isOr());
169:       assertFalse(node0.hasMoreThanOneChild());
170:       assertFalse(node0.isBlock());
171:       assertFalse(node0.isNew());
172:       assertFalse(node0.isAdd());
173:       assertFalse(node0.hasChildren());
174:       assertFalse(node0.isLabel());
175:       assertFalse(node0.isWhile());
176:       assertFalse(node0.isReturn());
177:       assertFalse(node0.isDo());
178:       assertTrue(node0.isString());
179:       assertFalse(node0.isAssignAdd());
180:       assertFalse(node0.isCall());
181:       assertFalse(node0.isGetElem());
182:       assertFalse(node0.isDec());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.isTypeOf());
185:       assertFalse(node0.isExprResult());
186:       assertFalse(node0.isNull());
187:       assertEquals((-1), node0.getLineno());
188:       assertFalse(node0.isName());
189:       assertFalse(node0.isCatch());
190:       assertFalse(node0.isInstanceOf());
191:       assertEquals(0, node0.getChildCount());
192:       assertFalse(node0.isRegExp());
193:       assertFalse(node0.isWith());
194:       assertFalse(node0.isThis());
195:       assertFalse(node0.isScript());
196:       assertFalse(node0.isTry());
197:       assertFalse(node0.isDefaultCase());
198:       assertFalse(node0.isStringKey());
199:       assertFalse(node0.isVar());
200:       assertFalse(node0.hasOneChild());
201:       assertFalse(node0.isArrayLit());
202:       assertFalse(node0.isGetterDef());
203:       assertFalse(node0.isNumber());
204:       assertFalse(node0.isParamList());
205:       assertEquals((-1), node0.getCharno());
206:       assertFalse(node0.isLabelName());
207:       assertFalse(node0.isSwitch());
208:       assertFalse(node0.isCase());
209:       assertFalse(node0.isIn());
210:       assertFalse(node0.isInc());
211:       assertFalse(node0.isFor());
212:       assertFalse(node0.isHook());
213:       assertFalse(node0.isEmpty());
214:       assertFalse(node0.isTrue());
215:       assertFalse(node0.isNE());
216:       assertFalse(node0.isVoid());
217:       assertFalse(node0.isBreak());
218:       assertFalse(node0.isDelProp());
219:       assertFalse(node0.isIf());
220:       assertFalse(node0.isAnd());
221:       assertFalse(node0.isObjectLit());
222:       assertEquals(40, node0.getType());
223:       assertFalse(node0.isNot());
224:       assertFalse(node0.isFunction());
225:       assertFalse(node0.isComma());
226:       assertFalse(node0.isGetProp());
227:       assertFalse(node0.isSetterDef());
228:       assertFalse(node0.isThrow());
229:       assertFalse(node0.isCast());
230:       assertFalse(node0.isFalse());
231:       assertFalse(node0.isDebugger());
232:       assertEquals((-1), node0.getSourcePosition());
233:       
234:       String string0 = node0.toString();
235:       assertEquals("STRING ", string0);
236:       assertEquals(53, Node.INPUT_ID);
237:       assertEquals(29, Node.JSDOC_INFO_PROP);
238:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
239:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
240:       assertEquals(47, Node.IS_DISPATCHER);
241:       assertEquals(2, Node.POST_FLAG);
242:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
243:       assertEquals(46, Node.IS_NAMESPACE);
244:       assertEquals(32, Node.INCRDECR_PROP);
245:       assertEquals(51, Node.STATIC_SOURCE_FILE);
246:       assertEquals(50, Node.FREE_CALL);
247:       assertEquals(54, Node.SLASH_V);
248:       assertEquals(43, Node.IS_CONSTANT_NAME);
249:       assertEquals(57, Node.REFLECTED_OBJECT);
250:       assertEquals(40, Node.ORIGINALNAME_PROP);
251:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
252:       assertEquals(52, Node.LENGTH);
253:       assertEquals(15, Node.NO_SIDE_EFFECTS);
254:       assertEquals(57, Node.LAST_PROP);
255:       assertEquals(30, Node.VAR_ARGS_NAME);
256:       assertEquals(1, Node.DECR_FLAG);
257:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
258:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
259:       assertEquals(12, Node.COLUMN_BITS);
260:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
261:       assertEquals(8, Node.FLAG_NO_THROWS);
262:       assertEquals(39, Node.EMPTY_BLOCK);
263:       assertEquals(55, Node.INFERRED_FUNCTION);
264:       assertEquals(4095, Node.COLUMN_MASK);
265:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
266:       assertEquals(49, Node.DIRECT_EVAL);
267:       assertEquals(37, Node.OPT_ARG_NAME);
268:       assertEquals(36, Node.QUOTED_PROP);
269:       assertEquals(48, Node.DIRECTIVES);
270:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
271:       assertEquals(56, Node.CHANGE_TIME);
272:       assertFalse(node0.isContinue());
273:       assertFalse(node0.isOr());
274:       assertFalse(node0.hasMoreThanOneChild());
275:       assertFalse(node0.isBlock());
276:       assertFalse(node0.isNew());
277:       assertFalse(node0.isAdd());
278:       assertFalse(node0.hasChildren());
279:       assertFalse(node0.isLabel());
280:       assertFalse(node0.isWhile());
281:       assertFalse(node0.isReturn());
282:       assertFalse(node0.isDo());
283:       assertTrue(node0.isString());
284:       assertFalse(node0.isAssignAdd());
285:       assertFalse(node0.isCall());
286:       assertFalse(node0.isGetElem());
287:       assertFalse(node0.isDec());
288:       assertFalse(node0.isAssign());
289:       assertFalse(node0.isTypeOf());
290:       assertFalse(node0.isExprResult());
291:       assertFalse(node0.isNull());
292:       assertEquals((-1), node0.getLineno());
293:       assertFalse(node0.isName());
294:       assertFalse(node0.isCatch());
295:       assertFalse(node0.isInstanceOf());
296:       assertEquals(0, node0.getChildCount());
297:       assertFalse(node0.isRegExp());
298:       assertFalse(node0.isWith());
299:       assertFalse(node0.isThis());
300:       assertFalse(node0.isScript());
301:       assertFalse(node0.isTry());
302:       assertFalse(node0.isDefaultCase());
303:       assertFalse(node0.isStringKey());
304:       assertFalse(node0.isVar());
305:       assertFalse(node0.hasOneChild());
306:       assertFalse(node0.isArrayLit());
307:       assertFalse(node0.isGetterDef());
308:       assertFalse(node0.isNumber());
309:       assertFalse(node0.isParamList());
310:       assertEquals((-1), node0.getCharno());
311:       assertFalse(node0.isLabelName());
312:       assertFalse(node0.isSwitch());
313:       assertFalse(node0.isCase());
314:       assertFalse(node0.isIn());
315:       assertFalse(node0.isInc());
316:       assertFalse(node0.isFor());
317:       assertFalse(node0.isHook());
318:       assertFalse(node0.isEmpty());
319:       assertFalse(node0.isTrue());
320:       assertFalse(node0.isNE());
321:       assertFalse(node0.isVoid());
322:       assertFalse(node0.isBreak());
323:       assertFalse(node0.isDelProp());
324:       assertFalse(node0.isIf());
325:       assertFalse(node0.isAnd());
326:       assertFalse(node0.isObjectLit());
327:       assertEquals(40, node0.getType());
328:       assertFalse(node0.isNot());
329:       assertFalse(node0.isFunction());
330:       assertFalse(node0.isComma());
331:       assertFalse(node0.isGetProp());
332:       assertFalse(node0.isSetterDef());
333:       assertFalse(node0.isThrow());
334:       assertFalse(node0.isCast());
335:       assertFalse(node0.isFalse());
336:       assertFalse(node0.isDebugger());
337:       assertEquals((-1), node0.getSourcePosition());
338:       assertNotNull(string0);
339:       
340:       Iterable<Node> iterable0 = node0.children();
341:       assertEquals(53, Node.INPUT_ID);
342:       assertEquals(29, Node.JSDOC_INFO_PROP);
343:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
344:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
345:       assertEquals(47, Node.IS_DISPATCHER);
346:       assertEquals(2, Node.POST_FLAG);
347:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
348:       assertEquals(46, Node.IS_NAMESPACE);
349:       assertEquals(32, Node.INCRDECR_PROP);
350:       assertEquals(51, Node.STATIC_SOURCE_FILE);
351:       assertEquals(50, Node.FREE_CALL);
352:       assertEquals(54, Node.SLASH_V);
353:       assertEquals(43, Node.IS_CONSTANT_NAME);
354:       assertEquals(57, Node.REFLECTED_OBJECT);
355:       assertEquals(40, Node.ORIGINALNAME_PROP);
356:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
357:       assertEquals(52, Node.LENGTH);
358:       assertEquals(15, Node.NO_SIDE_EFFECTS);
359:       assertEquals(57, Node.LAST_PROP);
360:       assertEquals(30, Node.VAR_ARGS_NAME);
361:       assertEquals(1, Node.DECR_FLAG);
362:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
363:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
364:       assertEquals(12, Node.COLUMN_BITS);
365:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
366:       assertEquals(8, Node.FLAG_NO_THROWS);
367:       assertEquals(39, Node.EMPTY_BLOCK);
368:       assertEquals(55, Node.INFERRED_FUNCTION);
369:       assertEquals(4095, Node.COLUMN_MASK);
370:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
371:       assertEquals(49, Node.DIRECT_EVAL);
372:       assertEquals(37, Node.OPT_ARG_NAME);
373:       assertEquals(36, Node.QUOTED_PROP);
374:       assertEquals(48, Node.DIRECTIVES);
375:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
376:       assertEquals(56, Node.CHANGE_TIME);
377:       assertFalse(iterable0.contains(node0));
378:       assertFalse(node0.isContinue());
379:       assertFalse(node0.isOr());
380:       assertFalse(node0.hasMoreThanOneChild());
381:       assertFalse(node0.isBlock());
382:       assertFalse(node0.isNew());
383:       assertFalse(node0.isAdd());
384:       assertFalse(node0.hasChildren());
385:       assertFalse(node0.isLabel());
386:       assertFalse(node0.isWhile());
387:       assertFalse(node0.isReturn());
388:       assertFalse(node0.isDo());
389:       assertTrue(node0.isString());
390:       assertFalse(node0.isAssignAdd());
391:       assertFalse(node0.isCall());
392:       assertFalse(node0.isGetElem());
393:       assertFalse(node0.isDec());
394:       assertFalse(node0.isAssign());
395:       assertFalse(node0.isTypeOf());
396:       assertFalse(node0.isExprResult());
397:       assertFalse(node0.isNull());
398:       assertEquals((-1), node0.getLineno());
399:       assertFalse(node0.isName());
400:       assertFalse(node0.isCatch());
401:       assertFalse(node0.isInstanceOf());
402:       assertEquals(0, node0.getChildCount());
403:       assertFalse(node0.isRegExp());
404:       assertFalse(node0.isWith());
405:       assertFalse(node0.isThis());
406:       assertFalse(node0.isScript());
407:       assertFalse(node0.isTry());
408:       assertFalse(node0.isDefaultCase());
409:       assertFalse(node0.isStringKey());
410:       assertFalse(node0.isVar());
411:       assertFalse(node0.hasOneChild());
412:       assertFalse(node0.isArrayLit());
413:       assertFalse(node0.isGetterDef());
414:       assertFalse(node0.isNumber());
415:       assertFalse(node0.isParamList());
416:       assertEquals((-1), node0.getCharno());
417:       assertFalse(node0.isLabelName());
418:       assertFalse(node0.isSwitch());
419:       assertFalse(node0.isCase());
420:       assertFalse(node0.isIn());
421:       assertFalse(node0.isInc());
422:       assertFalse(node0.isFor());
423:       assertFalse(node0.isHook());
424:       assertFalse(node0.isEmpty());
425:       assertFalse(node0.isTrue());
426:       assertFalse(node0.isNE());
427:       assertFalse(node0.isVoid());
428:       assertFalse(node0.isBreak());
429:       assertFalse(node0.isDelProp());
430:       assertFalse(node0.isIf());
431:       assertFalse(node0.isAnd());
432:       assertFalse(node0.isObjectLit());
433:       assertEquals(40, node0.getType());
434:       assertFalse(node0.isNot());
435:       assertFalse(node0.isFunction());
436:       assertFalse(node0.isComma());
437:       assertFalse(node0.isGetProp());
438:       assertFalse(node0.isSetterDef());
439:       assertFalse(node0.isThrow());
440:       assertFalse(node0.isCast());
441:       assertFalse(node0.isFalse());
442:       assertFalse(node0.isDebugger());
443:       assertEquals((-1), node0.getSourcePosition());
444:       assertNotNull(iterable0);
445:       
446:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
447:       assertNotNull(fileSystemHandling0);
448:       
449:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
450:       assertNotNull(simpleErrorReporter0);
451:       
452:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
453:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
454:       assertNotNull(jSTypeRegistry0);
455:       
456:       JSType[] jSTypeArray0 = new JSType[0];
457:       boolean boolean1 = node0.isEquivalentTo(node0, false, false, false);
458:       assertTrue(boolean1);
459:       assertEquals(53, Node.INPUT_ID);
460:       assertEquals(29, Node.JSDOC_INFO_PROP);
461:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
462:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
463:       assertEquals(47, Node.IS_DISPATCHER);
464:       assertEquals(2, Node.POST_FLAG);
465:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
466:       assertEquals(46, Node.IS_NAMESPACE);
467:       assertEquals(32, Node.INCRDECR_PROP);
468:       assertEquals(51, Node.STATIC_SOURCE_FILE);
469:       assertEquals(50, Node.FREE_CALL);
470:       assertEquals(54, Node.SLASH_V);
471:       assertEquals(43, Node.IS_CONSTANT_NAME);
472:       assertEquals(57, Node.REFLECTED_OBJECT);
473:       assertEquals(40, Node.ORIGINALNAME_PROP);
474:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
475:       assertEquals(52, Node.LENGTH);
476:       assertEquals(15, Node.NO_SIDE_EFFECTS);
477:       assertEquals(57, Node.LAST_PROP);
478:       assertEquals(30, Node.VAR_ARGS_NAME);
479:       assertEquals(1, Node.DECR_FLAG);
480:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
481:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
482:       assertEquals(12, Node.COLUMN_BITS);
483:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
484:       assertEquals(8, Node.FLAG_NO_THROWS);
485:       assertEquals(39, Node.EMPTY_BLOCK);
486:       assertEquals(55, Node.INFERRED_FUNCTION);
487:       assertEquals(4095, Node.COLUMN_MASK);
488:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
489:       assertEquals(49, Node.DIRECT_EVAL);
490:       assertEquals(37, Node.OPT_ARG_NAME);
491:       assertEquals(36, Node.QUOTED_PROP);
492:       assertEquals(48, Node.DIRECTIVES);
493:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
494:       assertEquals(56, Node.CHANGE_TIME);
495:       assertTrue(boolean1 == boolean0);
496:       assertFalse(node0.isContinue());
497:       assertFalse(node0.isOr());
498:       assertFalse(node0.hasMoreThanOneChild());
499:       assertFalse(node0.isBlock());
500:       assertFalse(node0.isNew());
501:       assertFalse(node0.isAdd());
502:       assertFalse(node0.hasChildren());
503:       assertFalse(node0.isLabel());
504:       assertFalse(node0.isWhile());
505:       assertFalse(node0.isReturn());
506:       assertFalse(node0.isDo());
507:       assertTrue(node0.isString());
508:       assertFalse(node0.isAssignAdd());
509:       assertFalse(node0.isCall());
510:       assertFalse(node0.isGetElem());
511:       assertFalse(node0.isDec());
512:       assertFalse(node0.isAssign());
513:       assertFalse(node0.isTypeOf());
514:       assertFalse(node0.isExprResult());
515:       assertFalse(node0.isNull());
516:       assertEquals((-1), node0.getLineno());
517:       assertFalse(node0.isName());
518:       assertFalse(node0.isCatch());
519:       assertFalse(node0.isInstanceOf());
520:       assertEquals(0, node0.getChildCount());
521:       assertFalse(node0.isRegExp());
522:       assertFalse(node0.isWith());
523:       assertFalse(node0.isThis());
524:       assertFalse(node0.isScript());
525:       assertFalse(node0.isTry());
526:       assertFalse(node0.isDefaultCase());
527:       assertFalse(node0.isStringKey());
528:       assertFalse(node0.isVar());
529:       assertFalse(node0.hasOneChild());
530:       assertFalse(node0.isArrayLit());
531:       assertFalse(node0.isGetterDef());
532:       assertFalse(node0.isNumber());
533:       assertFalse(node0.isParamList());
534:       assertEquals((-1), node0.getCharno());
535:       assertFalse(node0.isLabelName());
536:       assertFalse(node0.isSwitch());
537:       assertFalse(node0.isCase());
538:       assertFalse(node0.isIn());
539:       assertFalse(node0.isInc());
540:       assertFalse(node0.isFor());
541:       assertFalse(node0.isHook());
542:       assertFalse(node0.isEmpty());
543:       assertFalse(node0.isTrue());
544:       assertFalse(node0.isNE());
545:       assertFalse(node0.isVoid());
546:       assertFalse(node0.isBreak());
547:       assertFalse(node0.isDelProp());
548:       assertFalse(node0.isIf());
549:       assertFalse(node0.isAnd());
550:       assertFalse(node0.isObjectLit());
551:       assertEquals(40, node0.getType());
552:       assertFalse(node0.isNot());
553:       assertFalse(node0.isFunction());
554:       assertFalse(node0.isComma());
555:       assertFalse(node0.isGetProp());
556:       assertFalse(node0.isSetterDef());
557:       assertFalse(node0.isThrow());
558:       assertFalse(node0.isCast());
559:       assertFalse(node0.isFalse());
560:       assertFalse(node0.isDebugger());
561:       assertEquals((-1), node0.getSourcePosition());
562:       
563:       node0.addSuppression("");
564:       assertEquals(53, Node.INPUT_ID);
565:       assertEquals(29, Node.JSDOC_INFO_PROP);
566:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
567:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
568:       assertEquals(47, Node.IS_DISPATCHER);
569:       assertEquals(2, Node.POST_FLAG);
570:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
571:       assertEquals(46, Node.IS_NAMESPACE);
572:       assertEquals(32, Node.INCRDECR_PROP);
573:       assertEquals(51, Node.STATIC_SOURCE_FILE);
574:       assertEquals(50, Node.FREE_CALL);
575:       assertEquals(54, Node.SLASH_V);
576:       assertEquals(43, Node.IS_CONSTANT_NAME);
577:       assertEquals(57, Node.REFLECTED_OBJECT);
578:       assertEquals(40, Node.ORIGINALNAME_PROP);
579:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
580:       assertEquals(52, Node.LENGTH);
581:       assertEquals(15, Node.NO_SIDE_EFFECTS);
582:       assertEquals(57, Node.LAST_PROP);
583:       assertEquals(30, Node.VAR_ARGS_NAME);
584:       assertEquals(1, Node.DECR_FLAG);
585:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
586:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
587:       assertEquals(12, Node.COLUMN_BITS);
588:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
589:       assertEquals(8, Node.FLAG_NO_THROWS);
590:       assertEquals(39, Node.EMPTY_BLOCK);
591:       assertEquals(55, Node.INFERRED_FUNCTION);
592:       assertEquals(4095, Node.COLUMN_MASK);
593:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
594:       assertEquals(49, Node.DIRECT_EVAL);
595:       assertEquals(37, Node.OPT_ARG_NAME);
596:       assertEquals(36, Node.QUOTED_PROP);
597:       assertEquals(48, Node.DIRECTIVES);
598:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
599:       assertEquals(56, Node.CHANGE_TIME);
600:       assertFalse(node0.isContinue());
601:       assertFalse(node0.isOr());
602:       assertFalse(node0.hasMoreThanOneChild());
603:       assertFalse(node0.isBlock());
604:       assertFalse(node0.isNew());
605:       assertFalse(node0.isAdd());
606:       assertFalse(node0.hasChildren());
607:       assertFalse(node0.isLabel());
608:       assertFalse(node0.isWhile());
609:       assertFalse(node0.isReturn());
610:       assertFalse(node0.isDo());
611:       assertTrue(node0.isString());
612:       assertFalse(node0.isAssignAdd());
613:       assertFalse(node0.isCall());
614:       assertFalse(node0.isGetElem());
615:       assertFalse(node0.isDec());
616:       assertFalse(node0.isAssign());
617:       assertFalse(node0.isTypeOf());
618:       assertFalse(node0.isExprResult());
619:       assertFalse(node0.isNull());
620:       assertEquals((-1), node0.getLineno());
621:       assertFalse(node0.isName());
622:       assertFalse(node0.isCatch());
623:       assertFalse(node0.isInstanceOf());
624:       assertEquals(0, node0.getChildCount());
625:       assertFalse(node0.isRegExp());
626:       assertFalse(node0.isWith());
627:       assertFalse(node0.isThis());
628:       assertFalse(node0.isScript());
629:       assertFalse(node0.isTry());
630:       assertFalse(node0.isDefaultCase());
631:       assertFalse(node0.isStringKey());
632:       assertFalse(node0.isVar());
633:       assertFalse(node0.hasOneChild());
634:       assertFalse(node0.isArrayLit());
635:       assertFalse(node0.isGetterDef());
636:       assertFalse(node0.isNumber());
637:       assertFalse(node0.isParamList());
638:       assertEquals((-1), node0.getCharno());
639:       assertFalse(node0.isLabelName());
640:       assertFalse(node0.isSwitch());
641:       assertFalse(node0.isCase());
642:       assertFalse(node0.isIn());
643:       assertFalse(node0.isInc());
644:       assertFalse(node0.isFor());
645:       assertFalse(node0.isHook());
646:       assertFalse(node0.isEmpty());
647:       assertFalse(node0.isTrue());
648:       assertFalse(node0.isNE());
649:       assertFalse(node0.isVoid());
650:       assertFalse(node0.isBreak());
651:       assertFalse(node0.isDelProp());
652:       assertFalse(node0.isIf());
653:       assertFalse(node0.isAnd());
654:       assertFalse(node0.isObjectLit());
655:       assertEquals(40, node0.getType());
656:       assertFalse(node0.isNot());
657:       assertFalse(node0.isFunction());
658:       assertFalse(node0.isComma());
659:       assertFalse(node0.isGetProp());
660:       assertFalse(node0.isSetterDef());
661:       assertFalse(node0.isThrow());
662:       assertFalse(node0.isCast());
663:       assertFalse(node0.isFalse());
664:       assertFalse(node0.isDebugger());
665:       assertEquals((-1), node0.getSourcePosition());
666:       
667:       int int0 = node0.getSourcePosition();
668:       assertEquals((-1), int0);
669:       assertEquals(53, Node.INPUT_ID);
670:       assertEquals(29, Node.JSDOC_INFO_PROP);
671:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
672:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
673:       assertEquals(47, Node.IS_DISPATCHER);
674:       assertEquals(2, Node.POST_FLAG);
675:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
676:       assertEquals(46, Node.IS_NAMESPACE);
677:       assertEquals(32, Node.INCRDECR_PROP);
678:       assertEquals(51, Node.STATIC_SOURCE_FILE);
679:       assertEquals(50, Node.FREE_CALL);
680:       assertEquals(54, Node.SLASH_V);
681:       assertEquals(43, Node.IS_CONSTANT_NAME);
682:       assertEquals(57, Node.REFLECTED_OBJECT);
683:       assertEquals(40, Node.ORIGINALNAME_PROP);
684:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
685:       assertEquals(52, Node.LENGTH);
686:       assertEquals(15, Node.NO_SIDE_EFFECTS);
687:       assertEquals(57, Node.LAST_PROP);
688:       assertEquals(30, Node.VAR_ARGS_NAME);
689:       assertEquals(1, Node.DECR_FLAG);
690:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
691:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
692:       assertEquals(12, Node.COLUMN_BITS);
693:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
694:       assertEquals(8, Node.FLAG_NO_THROWS);
695:       assertEquals(39, Node.EMPTY_BLOCK);
696:       assertEquals(55, Node.INFERRED_FUNCTION);
697:       assertEquals(4095, Node.COLUMN_MASK);
698:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
699:       assertEquals(49, Node.DIRECT_EVAL);
700:       assertEquals(37, Node.OPT_ARG_NAME);
701:       assertEquals(36, Node.QUOTED_PROP);
702:       assertEquals(48, Node.DIRECTIVES);
703:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
704:       assertEquals(56, Node.CHANGE_TIME);
705:       assertFalse(node0.isContinue());
706:       assertFalse(node0.isOr());
707:       assertFalse(node0.hasMoreThanOneChild());
708:       assertFalse(node0.isBlock());
709:       assertFalse(node0.isNew());
710:       assertFalse(node0.isAdd());
711:       assertFalse(node0.hasChildren());
712:       assertFalse(node0.isLabel());
713:       assertFalse(node0.isWhile());
714:       assertFalse(node0.isReturn());
715:       assertFalse(node0.isDo());
716:       assertTrue(node0.isString());
717:       assertFalse(node0.isAssignAdd());
718:       assertFalse(node0.isCall());
719:       assertFalse(node0.isGetElem());
720:       assertFalse(node0.isDec());
721:       assertFalse(node0.isAssign());
722:       assertFalse(node0.isTypeOf());
723:       assertFalse(node0.isExprResult());
724:       assertFalse(node0.isNull());
725:       assertEquals((-1), node0.getLineno());
726:       assertFalse(node0.isName());
727:       assertFalse(node0.isCatch());
728:       assertFalse(node0.isInstanceOf());
729:       assertEquals(0, node0.getChildCount());
730:       assertFalse(node0.isRegExp());
731:       assertFalse(node0.isWith());
732:       assertFalse(node0.isThis());
733:       assertFalse(node0.isScript());
734:       assertFalse(node0.isTry());
735:       assertFalse(node0.isDefaultCase());
736:       assertFalse(node0.isStringKey());
737:       assertFalse(node0.isVar());
738:       assertFalse(node0.hasOneChild());
739:       assertFalse(node0.isArrayLit());
740:       assertFalse(node0.isGetterDef());
741:       assertFalse(node0.isNumber());
742:       assertFalse(node0.isParamList());
743:       assertEquals((-1), node0.getCharno());
744:       assertFalse(node0.isLabelName());
745:       assertFalse(node0.isSwitch());
746:       assertFalse(node0.isCase());
747:       assertFalse(node0.isIn());
748:       assertFalse(node0.isInc());
749:       assertFalse(node0.isFor());
750:       assertFalse(node0.isHook());
751:       assertFalse(node0.isEmpty());
752:       assertFalse(node0.isTrue());
753:       assertFalse(node0.isNE());
754:       assertFalse(node0.isVoid());
755:       assertFalse(node0.isBreak());
756:       assertFalse(node0.isDelProp());
757:       assertFalse(node0.isIf());
758:       assertFalse(node0.isAnd());
759:       assertFalse(node0.isObjectLit());
760:       assertEquals(40, node0.getType());
761:       assertFalse(node0.isNot());
762:       assertFalse(node0.isFunction());
763:       assertFalse(node0.isComma());
764:       assertFalse(node0.isGetProp());
765:       assertFalse(node0.isSetterDef());
766:       assertFalse(node0.isThrow());
767:       assertFalse(node0.isCast());
768:       assertFalse(node0.isFalse());
769:       assertFalse(node0.isDebugger());
770:       assertEquals((-1), node0.getSourcePosition());
771:       
772:       Node node1 = node0.getFirstChild();
773:       assertEquals(53, Node.INPUT_ID);
774:       assertEquals(29, Node.JSDOC_INFO_PROP);
775:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
776:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
777:       assertEquals(47, Node.IS_DISPATCHER);
778:       assertEquals(2, Node.POST_FLAG);
779:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
780:       assertEquals(46, Node.IS_NAMESPACE);
781:       assertEquals(32, Node.INCRDECR_PROP);
782:       assertEquals(51, Node.STATIC_SOURCE_FILE);
783:       assertEquals(50, Node.FREE_CALL);
784:       assertEquals(54, Node.SLASH_V);
785:       assertEquals(43, Node.IS_CONSTANT_NAME);
786:       assertEquals(57, Node.REFLECTED_OBJECT);
787:       assertEquals(40, Node.ORIGINALNAME_PROP);
788:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
789:       assertEquals(52, Node.LENGTH);
790:       assertEquals(15, Node.NO_SIDE_EFFECTS);
791:       assertEquals(57, Node.LAST_PROP);
792:       assertEquals(30, Node.VAR_ARGS_NAME);
793:       assertEquals(1, Node.DECR_FLAG);
794:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
795:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
796:       assertEquals(12, Node.COLUMN_BITS);
797:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
798:       assertEquals(8, Node.FLAG_NO_THROWS);
799:       assertEquals(39, Node.EMPTY_BLOCK);
800:       assertEquals(55, Node.INFERRED_FUNCTION);
801:       assertEquals(4095, Node.COLUMN_MASK);
802:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
803:       assertEquals(49, Node.DIRECT_EVAL);
804:       assertEquals(37, Node.OPT_ARG_NAME);
805:       assertEquals(36, Node.QUOTED_PROP);
806:       assertEquals(48, Node.DIRECTIVES);
807:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
808:       assertEquals(56, Node.CHANGE_TIME);
809:       assertFalse(node0.isContinue());
810:       assertFalse(node0.isOr());
811:       assertFalse(node0.hasMoreThanOneChild());
812:       assertFalse(node0.isBlock());
813:       assertFalse(node0.isNew());
814:       assertFalse(node0.isAdd());
815:       assertFalse(node0.hasChildren());
816:       assertFalse(node0.isLabel());
817:       assertFalse(node0.isWhile());
818:       assertFalse(node0.isReturn());
819:       assertFalse(node0.isDo());
820:       assertTrue(node0.isString());
821:       assertFalse(node0.isAssignAdd());
822:       assertFalse(node0.isCall());
823:       assertFalse(node0.isGetElem());
824:       assertFalse(node0.isDec());
825:       assertFalse(node0.isAssign());
826:       assertFalse(node0.isTypeOf());
827:       assertFalse(node0.isExprResult());
828:       assertFalse(node0.isNull());
829:       assertEquals((-1), node0.getLineno());
830:       assertFalse(node0.isName());
831:       assertFalse(node0.isCatch());
832:       assertFalse(node0.isInstanceOf());
833:       assertEquals(0, node0.getChildCount());
834:       assertFalse(node0.isRegExp());
835:       assertFalse(node0.isWith());
836:       assertFalse(node0.isThis());
837:       assertFalse(node0.isScript());
838:       assertFalse(node0.isTry());
839:       assertFalse(node0.isDefaultCase());
840:       assertFalse(node0.isStringKey());
841:       assertFalse(node0.isVar());
842:       assertFalse(node0.hasOneChild());
843:       assertFalse(node0.isArrayLit());
844:       assertFalse(node0.isGetterDef());
845:       assertFalse(node0.isNumber());
846:       assertFalse(node0.isParamList());
847:       assertEquals((-1), node0.getCharno());
848:       assertFalse(node0.isLabelName());
849:       assertFalse(node0.isSwitch());
850:       assertFalse(node0.isCase());
851:       assertFalse(node0.isIn());
852:       assertFalse(node0.isInc());
853:       assertFalse(node0.isFor());
854:       assertFalse(node0.isHook());
855:       assertFalse(node0.isEmpty());
856:       assertFalse(node0.isTrue());
857:       assertFalse(node0.isNE());
858:       assertFalse(node0.isVoid());
859:       assertFalse(node0.isBreak());
860:       assertFalse(node0.isDelProp());
861:       assertFalse(node0.isIf());
862:       assertFalse(node0.isAnd());
863:       assertFalse(node0.isObjectLit());
864:       assertEquals(40, node0.getType());
865:       assertFalse(node0.isNot());
866:       assertFalse(node0.isFunction());
867:       assertFalse(node0.isComma());
868:       assertFalse(node0.isGetProp());
869:       assertFalse(node0.isSetterDef());
870:       assertFalse(node0.isThrow());
871:       assertFalse(node0.isCast());
872:       assertFalse(node0.isFalse());
873:       assertFalse(node0.isDebugger());
874:       assertEquals((-1), node0.getSourcePosition());
875:       assertNull(node1);
876:       
877:       boolean boolean2 = node0.isNull();
878:       assertFalse(boolean2);
879:       assertEquals(53, Node.INPUT_ID);
880:       assertEquals(29, Node.JSDOC_INFO_PROP);
881:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
882:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
883:       assertEquals(47, Node.IS_DISPATCHER);
884:       assertEquals(2, Node.POST_FLAG);
885:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
886:       assertEquals(46, Node.IS_NAMESPACE);
887:       assertEquals(32, Node.INCRDECR_PROP);
888:       assertEquals(51, Node.STATIC_SOURCE_FILE);
889:       assertEquals(50, Node.FREE_CALL);
890:       assertEquals(54, Node.SLASH_V);
891:       assertEquals(43, Node.IS_CONSTANT_NAME);
892:       assertEquals(57, Node.REFLECTED_OBJECT);
893:       assertEquals(40, Node.ORIGINALNAME_PROP);
894:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
895:       assertEquals(52, Node.LENGTH);
896:       assertEquals(15, Node.NO_SIDE_EFFECTS);
897:       assertEquals(57, Node.LAST_PROP);
898:       assertEquals(30, Node.VAR_ARGS_NAME);
899:       assertEquals(1, Node.DECR_FLAG);
900:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
901:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
902:       assertEquals(12, Node.COLUMN_BITS);
903:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
904:       assertEquals(8, Node.FLAG_NO_THROWS);
905:       assertEquals(39, Node.EMPTY_BLOCK);
906:       assertEquals(55, Node.INFERRED_FUNCTION);
907:       assertEquals(4095, Node.COLUMN_MASK);
908:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
909:       assertEquals(49, Node.DIRECT_EVAL);
910:       assertEquals(37, Node.OPT_ARG_NAME);
911:       assertEquals(36, Node.QUOTED_PROP);
912:       assertEquals(48, Node.DIRECTIVES);
913:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
914:       assertEquals(56, Node.CHANGE_TIME);
915:       assertFalse(boolean2 == boolean1);
916:       assertFalse(boolean2 == boolean0);
917:       assertFalse(node0.isContinue());
918:       assertFalse(node0.isOr());
919:       assertFalse(node0.hasMoreThanOneChild());
920:       assertFalse(node0.isBlock());
921:       assertFalse(node0.isNew());
922:       assertFalse(node0.isAdd());
923:       assertFalse(node0.hasChildren());
924:       assertFalse(node0.isLabel());
925:       assertFalse(node0.isWhile());
926:       assertFalse(node0.isReturn());
927:       assertFalse(node0.isDo());
928:       assertTrue(node0.isString());
929:       assertFalse(node0.isAssignAdd());
930:       assertFalse(node0.isCall());
931:       assertFalse(node0.isGetElem());
932:       assertFalse(node0.isDec());
933:       assertFalse(node0.isAssign());
934:       assertFalse(node0.isTypeOf());
935:       assertFalse(node0.isExprResult());
936:       assertFalse(node0.isNull());
937:       assertEquals((-1), node0.getLineno());
938:       assertFalse(node0.isName());
939:       assertFalse(node0.isCatch());
940:       assertFalse(node0.isInstanceOf());
941:       assertEquals(0, node0.getChildCount());
942:       assertFalse(node0.isRegExp());
943:       assertFalse(node0.isWith());
944:       assertFalse(node0.isThis());
945:       assertFalse(node0.isScript());
946:       assertFalse(node0.isTry());
947:       assertFalse(node0.isDefaultCase());
948:       assertFalse(node0.isStringKey());
949:       assertFalse(node0.isVar());
950:       assertFalse(node0.hasOneChild());
951:       assertFalse(node0.isArrayLit());
952:       assertFalse(node0.isGetterDef());
953:       assertFalse(node0.isNumber());
954:       assertFalse(node0.isParamList());
955:       assertEquals((-1), node0.getCharno());
956:       assertFalse(node0.isLabelName());
957:       assertFalse(node0.isSwitch());
958:       assertFalse(node0.isCase());
959:       assertFalse(node0.isIn());
960:       assertFalse(node0.isInc());
961:       assertFalse(node0.isFor());
962:       assertFalse(node0.isHook());
963:       assertFalse(node0.isEmpty());
964:       assertFalse(node0.isTrue());
965:       assertFalse(node0.isNE());
966:       assertFalse(node0.isVoid());
967:       assertFalse(node0.isBreak());
968:       assertFalse(node0.isDelProp());
969:       assertFalse(node0.isIf());
970:       assertFalse(node0.isAnd());
971:       assertFalse(node0.isObjectLit());
972:       assertEquals(40, node0.getType());
973:       assertFalse(node0.isNot());
974:       assertFalse(node0.isFunction());
975:       assertFalse(node0.isComma());
976:       assertFalse(node0.isGetProp());
977:       assertFalse(node0.isSetterDef());
978:       assertFalse(node0.isThrow());
979:       assertFalse(node0.isCast());
980:       assertFalse(node0.isFalse());
981:       assertFalse(node0.isDebugger());
982:       assertEquals((-1), node0.getSourcePosition());
983:       
984:       boolean boolean3 = node0.isCatch();
985:       assertFalse(boolean3);
986:       assertEquals(53, Node.INPUT_ID);
987:       assertEquals(29, Node.JSDOC_INFO_PROP);
988:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
989:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
990:       assertEquals(47, Node.IS_DISPATCHER);
991:       assertEquals(2, Node.POST_FLAG);
992:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
993:       assertEquals(46, Node.IS_NAMESPACE);
994:       assertEquals(32, Node.INCRDECR_PROP);
995:       assertEquals(51, Node.STATIC_SOURCE_FILE);
996:       assertEquals(50, Node.FREE_CALL);
997:       assertEquals(54, Node.SLASH_V);
998:       assertEquals(43, Node.IS_CONSTANT_NAME);
999:       assertEquals(57, Node.REFLECTED_OBJECT);
1000:       assertEquals(40, Node.ORIGINALNAME_PROP);
1001:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1002:       assertEquals(52, Node.LENGTH);
1003:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1004:       assertEquals(57, Node.LAST_PROP);
1005:       assertEquals(30, Node.VAR_ARGS_NAME);
1006:       assertEquals(1, Node.DECR_FLAG);
1007:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1008:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1009:       assertEquals(12, Node.COLUMN_BITS);
1010:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1011:       assertEquals(8, Node.FLAG_NO_THROWS);
1012:       assertEquals(39, Node.EMPTY_BLOCK);
1013:       assertEquals(55, Node.INFERRED_FUNCTION);
1014:       assertEquals(4095, Node.COLUMN_MASK);
1015:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1016:       assertEquals(49, Node.DIRECT_EVAL);
1017:       assertEquals(37, Node.OPT_ARG_NAME);
1018:       assertEquals(36, Node.QUOTED_PROP);
1019:       assertEquals(48, Node.DIRECTIVES);
1020:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1021:       assertEquals(56, Node.CHANGE_TIME);
1022:       assertFalse(boolean3 == boolean1);
1023:       assertFalse(boolean3 == boolean0);
1024:       assertTrue(boolean3 == boolean2);
1025:       assertFalse(node0.isContinue());
1026:       assertFalse(node0.isOr());
1027:       assertFalse(node0.hasMoreThanOneChild());
1028:       assertFalse(node0.isBlock());
1029:       assertFalse(node0.isNew());
1030:       assertFalse(node0.isAdd());
1031:       assertFalse(node0.hasChildren());
1032:       assertFalse(node0.isLabel());
1033:       assertFalse(node0.isWhile());
1034:       assertFalse(node0.isReturn());
1035:       assertFalse(node0.isDo());
1036:       assertTrue(node0.isString());
1037:       assertFalse(node0.isAssignAdd());
1038:       assertFalse(node0.isCall());
1039:       assertFalse(node0.isGetElem());
1040:       assertFalse(node0.isDec());
1041:       assertFalse(node0.isAssign());
1042:       assertFalse(node0.isTypeOf());
1043:       assertFalse(node0.isExprResult());
1044:       assertFalse(node0.isNull());
1045:       assertEquals((-1), node0.getLineno());
1046:       assertFalse(node0.isName());
1047:       assertFalse(node0.isCatch());
1048:       assertFalse(node0.isInstanceOf());
1049:       assertEquals(0, node0.getChildCount());
1050:       assertFalse(node0.isRegExp());
1051:       assertFalse(node0.isWith());
1052:       assertFalse(node0.isThis());
1053:       assertFalse(node0.isScript());
1054:       assertFalse(node0.isTry());
1055:       assertFalse(node0.isDefaultCase());
1056:       assertFalse(node0.isStringKey());
1057:       assertFalse(node0.isVar());
1058:       assertFalse(node0.hasOneChild());
1059:       assertFalse(node0.isArrayLit());
1060:       assertFalse(node0.isGetterDef());
1061:       assertFalse(node0.isNumber());
1062:       assertFalse(node0.isParamList());
1063:       assertEquals((-1), node0.getCharno());
1064:       assertFalse(node0.isLabelName());
1065:       assertFalse(node0.isSwitch());
1066:       assertFalse(node0.isCase());
1067:       assertFalse(node0.isIn());
1068:       assertFalse(node0.isInc());
1069:       assertFalse(node0.isFor());
1070:       assertFalse(node0.isHook());
1071:       assertFalse(node0.isEmpty());
1072:       assertFalse(node0.isTrue());
1073:       assertFalse(node0.isNE());
1074:       assertFalse(node0.isVoid());
1075:       assertFalse(node0.isBreak());
1076:       assertFalse(node0.isDelProp());
1077:       assertFalse(node0.isIf());
1078:       assertFalse(node0.isAnd());
1079:       assertFalse(node0.isObjectLit());
1080:       assertEquals(40, node0.getType());
1081:       assertFalse(node0.isNot());
1082:       assertFalse(node0.isFunction());
1083:       assertFalse(node0.isComma());
1084:       assertFalse(node0.isGetProp());
1085:       assertFalse(node0.isSetterDef());
1086:       assertFalse(node0.isThrow());
1087:       assertFalse(node0.isCast());
1088:       assertFalse(node0.isFalse());
1089:       assertFalse(node0.isDebugger());
1090:       assertEquals((-1), node0.getSourcePosition());
1091:       
1092:       boolean boolean4 = node0.isCatch();
1093:       assertFalse(boolean4);
1094:       assertEquals(53, Node.INPUT_ID);
1095:       assertEquals(29, Node.JSDOC_INFO_PROP);
1096:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1097:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1098:       assertEquals(47, Node.IS_DISPATCHER);
1099:       assertEquals(2, Node.POST_FLAG);
1100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1101:       assertEquals(46, Node.IS_NAMESPACE);
1102:       assertEquals(32, Node.INCRDECR_PROP);
1103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1104:       assertEquals(50, Node.FREE_CALL);
1105:       assertEquals(54, Node.SLASH_V);
1106:       assertEquals(43, Node.IS_CONSTANT_NAME);
1107:       assertEquals(57, Node.REFLECTED_OBJECT);
1108:       assertEquals(40, Node.ORIGINALNAME_PROP);
1109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1110:       assertEquals(52, Node.LENGTH);
1111:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1112:       assertEquals(57, Node.LAST_PROP);
1113:       assertEquals(30, Node.VAR_ARGS_NAME);
1114:       assertEquals(1, Node.DECR_FLAG);
1115:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1116:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1117:       assertEquals(12, Node.COLUMN_BITS);
1118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1119:       assertEquals(8, Node.FLAG_NO_THROWS);
1120:       assertEquals(39, Node.EMPTY_BLOCK);
1121:       assertEquals(55, Node.INFERRED_FUNCTION);
1122:       assertEquals(4095, Node.COLUMN_MASK);
1123:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1124:       assertEquals(49, Node.DIRECT_EVAL);
1125:       assertEquals(37, Node.OPT_ARG_NAME);
1126:       assertEquals(36, Node.QUOTED_PROP);
1127:       assertEquals(48, Node.DIRECTIVES);
1128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1129:       assertEquals(56, Node.CHANGE_TIME);
1130:       assertTrue(boolean4 == boolean2);
1131:       assertFalse(boolean4 == boolean1);
1132:       assertTrue(boolean4 == boolean3);
1133:       assertFalse(boolean4 == boolean0);
1134:       assertFalse(node0.isContinue());
1135:       assertFalse(node0.isOr());
1136:       assertFalse(node0.hasMoreThanOneChild());
1137:       assertFalse(node0.isBlock());
1138:       assertFalse(node0.isNew());
1139:       assertFalse(node0.isAdd());
1140:       assertFalse(node0.hasChildren());
1141:       assertFalse(node0.isLabel());
1142:       assertFalse(node0.isWhile());
1143:       assertFalse(node0.isReturn());
1144:       assertFalse(node0.isDo());
1145:       assertTrue(node0.isString());
1146:       assertFalse(node0.isAssignAdd());
1147:       assertFalse(node0.isCall());
1148:       assertFalse(node0.isGetElem());
1149:       assertFalse(node0.isDec());
1150:       assertFalse(node0.isAssign());
1151:       assertFalse(node0.isTypeOf());
1152:       assertFalse(node0.isExprResult());
1153:       assertFalse(node0.isNull());
1154:       assertEquals((-1), node0.getLineno());
1155:       assertFalse(node0.isName());
1156:       assertFalse(node0.isCatch());
1157:       assertFalse(node0.isInstanceOf());
1158:       assertEquals(0, node0.getChildCount());
1159:       assertFalse(node0.isRegExp());
1160:       assertFalse(node0.isWith());
1161:       assertFalse(node0.isThis());
1162:       assertFalse(node0.isScript());
1163:       assertFalse(node0.isTry());
1164:       assertFalse(node0.isDefaultCase());
1165:       assertFalse(node0.isStringKey());
1166:       assertFalse(node0.isVar());
1167:       assertFalse(node0.hasOneChild());
1168:       assertFalse(node0.isArrayLit());
1169:       assertFalse(node0.isGetterDef());
1170:       assertFalse(node0.isNumber());
1171:       assertFalse(node0.isParamList());
1172:       assertEquals((-1), node0.getCharno());
1173:       assertFalse(node0.isLabelName());
1174:       assertFalse(node0.isSwitch());
1175:       assertFalse(node0.isCase());
1176:       assertFalse(node0.isIn());
1177:       assertFalse(node0.isInc());
1178:       assertFalse(node0.isFor());
1179:       assertFalse(node0.isHook());
1180:       assertFalse(node0.isEmpty());
1181:       assertFalse(node0.isTrue());
1182:       assertFalse(node0.isNE());
1183:       assertFalse(node0.isVoid());
1184:       assertFalse(node0.isBreak());
1185:       assertFalse(node0.isDelProp());
1186:       assertFalse(node0.isIf());
1187:       assertFalse(node0.isAnd());
1188:       assertFalse(node0.isObjectLit());
1189:       assertEquals(40, node0.getType());
1190:       assertFalse(node0.isNot());
1191:       assertFalse(node0.isFunction());
1192:       assertFalse(node0.isComma());
1193:       assertFalse(node0.isGetProp());
1194:       assertFalse(node0.isSetterDef());
1195:       assertFalse(node0.isThrow());
1196:       assertFalse(node0.isCast());
1197:       assertFalse(node0.isFalse());
1198:       assertFalse(node0.isDebugger());
1199:       assertEquals((-1), node0.getSourcePosition());
1200:   }
1201: }
RegularFileObject[/tmp/EvoSuite_100_1629223343071/com/google/javascript/rhino/Node_100_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:23 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_100_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_100_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_100_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.JSTypeExpression",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.JSDocInfo$Marker",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.FluentIterable",
352:       "com.google.common.collect.Iterables$2",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 18:02:23.272 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertNotNull(node0);

boolean boolean0 = node0.mayMutateArguments();
assertTrue(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());

String string0 = node0.toString();
assertEquals("STRING ", string0);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertNotNull(string0);

Iterable<Node> iterable0 = node0.children();
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertNotNull(iterable0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

JSType[] jSTypeArray0 = new JSType[0];
boolean boolean1 = node0.isEquivalentTo(node0, false, false, false);
assertTrue(boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());

node0.addSuppression("");
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());

int int0 = node0.getSourcePosition();
assertEquals((-1), int0);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());

Node node1 = node0.getFirstChild();
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertNull(node1);

boolean boolean2 = node0.isNull();
assertFalse(boolean2);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());

boolean boolean3 = node0.isCatch();
assertFalse(boolean3);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(boolean3 == boolean1);
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());

boolean boolean4 = node0.isCatch();
assertFalse(boolean4);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4 == boolean0);
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDo());
assertTrue(node0.isString());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isNull());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals(40, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());


[MASTER] 18:02:23.730 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_102_1629223343419/com/google/javascript/rhino/Node_102_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_102_1629223343419/com/google/javascript/rhino/Node_102_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:23.731 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:23.731 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:23.739 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 401
[MASTER] 18:02:23.740 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_102_1629223343419/com/google/javascript/rhino/Node_102_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:23 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import java.util.List;
15: import java.util.Stack;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_102_tmp__ESTest extends Node_102_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
26:       assertNotNull(simpleErrorReporter0);
27:       
28:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
29:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
30:       assertNotNull(jSTypeRegistry0);
31:       
32:       Stack<JSType> stack0 = new Stack<JSType>();
33:       assertEquals(10, stack0.capacity());
34:       assertEquals(0, stack0.size());
35:       assertEquals("[]", stack0.toString());
36:       assertTrue(stack0.isEmpty());
37:       assertTrue(stack0.empty());
38:       assertNotNull(stack0);
39:       
40:       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
41:       assertEquals(53, Node.INPUT_ID);
42:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(29, Node.JSDOC_INFO_PROP);
45:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
46:       assertEquals(43, Node.IS_CONSTANT_NAME);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(36, Node.QUOTED_PROP);
49:       assertEquals(32, Node.INCRDECR_PROP);
50:       assertEquals(4095, Node.COLUMN_MASK);
51:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
52:       assertEquals(48, Node.DIRECTIVES);
53:       assertEquals(1, Node.DECR_FLAG);
54:       assertEquals(37, Node.OPT_ARG_NAME);
55:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
56:       assertEquals(12, Node.COLUMN_BITS);
57:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
58:       assertEquals(52, Node.LENGTH);
59:       assertEquals(54, Node.SLASH_V);
60:       assertEquals(40, Node.ORIGINALNAME_PROP);
61:       assertEquals(15, Node.NO_SIDE_EFFECTS);
62:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
63:       assertEquals(49, Node.DIRECT_EVAL);
64:       assertEquals(50, Node.FREE_CALL);
65:       assertEquals(8, Node.FLAG_NO_THROWS);
66:       assertEquals(57, Node.REFLECTED_OBJECT);
67:       assertEquals(51, Node.STATIC_SOURCE_FILE);
68:       assertEquals(46, Node.IS_NAMESPACE);
69:       assertEquals(55, Node.INFERRED_FUNCTION);
70:       assertEquals(39, Node.EMPTY_BLOCK);
71:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
72:       assertEquals(30, Node.VAR_ARGS_NAME);
73:       assertEquals(57, Node.LAST_PROP);
74:       assertEquals(2, Node.POST_FLAG);
75:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
76:       assertEquals(47, Node.IS_DISPATCHER);
77:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
78:       assertEquals(10, stack0.capacity());
79:       assertEquals(0, stack0.size());
80:       assertEquals("[]", stack0.toString());
81:       assertTrue(stack0.isEmpty());
82:       assertTrue(stack0.empty());
83:       assertFalse(node0.isContinue());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isAssignAdd());
86:       assertFalse(node0.isDo());
87:       assertEquals((-1), node0.getLineno());
88:       assertEquals((-1), node0.getSourcePosition());
89:       assertFalse(node0.isNumber());
90:       assertFalse(node0.isOr());
91:       assertFalse(node0.isVar());
92:       assertFalse(node0.isCast());
93:       assertFalse(node0.isNew());
94:       assertFalse(node0.isAdd());
95:       assertFalse(node0.isLabelName());
96:       assertFalse(node0.isLabel());
97:       assertTrue(node0.isParamList());
98:       assertFalse(node0.isAnd());
99:       assertFalse(node0.isObjectLit());
100:       assertFalse(node0.isGetProp());
101:       assertFalse(node0.isNull());
102:       assertFalse(node0.isVoid());
103:       assertEquals(83, node0.getType());
104:       assertFalse(node0.isNot());
105:       assertFalse(node0.isDebugger());
106:       assertFalse(node0.isTrue());
107:       assertFalse(node0.isName());
108:       assertFalse(node0.isCall());
109:       assertFalse(node0.isExprResult());
110:       assertFalse(node0.isBreak());
111:       assertFalse(node0.isGetElem());
112:       assertFalse(node0.isTypeOf());
113:       assertFalse(node0.isComma());
114:       assertFalse(node0.isDec());
115:       assertFalse(node0.isWhile());
116:       assertFalse(node0.isAssign());
117:       assertFalse(node0.hasChildren());
118:       assertFalse(node0.isReturn());
119:       assertFalse(node0.isIn());
120:       assertFalse(node0.isCase());
121:       assertFalse(node0.isNE());
122:       assertFalse(node0.isString());
123:       assertFalse(node0.isGetterDef());
124:       assertFalse(node0.isDelProp());
125:       assertFalse(node0.isSwitch());
126:       assertFalse(node0.isIf());
127:       assertEquals((-1), node0.getCharno());
128:       assertFalse(node0.isArrayLit());
129:       assertFalse(node0.isFalse());
130:       assertFalse(node0.isEmpty());
131:       assertFalse(node0.isInc());
132:       assertFalse(node0.isFunction());
133:       assertFalse(node0.isDefaultCase());
134:       assertFalse(node0.isThrow());
135:       assertFalse(node0.isInstanceOf());
136:       assertEquals(0, node0.getChildCount());
137:       assertFalse(node0.isCatch());
138:       assertFalse(node0.isSetterDef());
139:       assertFalse(node0.isScript());
140:       assertFalse(node0.isStringKey());
141:       assertFalse(node0.hasOneChild());
142:       assertFalse(node0.isTry());
143:       assertFalse(node0.isRegExp());
144:       assertFalse(node0.isWith());
145:       assertFalse(node0.isFor());
146:       assertFalse(node0.isBlock());
147:       assertFalse(node0.isThis());
148:       assertFalse(node0.isHook());
149:       assertNotNull(node0);
150:       
151:       Node node1 = Node.newNumber((double) 32);
152:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
153:       assertEquals(54, Node.SLASH_V);
154:       assertEquals(52, Node.LENGTH);
155:       assertEquals(30, Node.VAR_ARGS_NAME);
156:       assertEquals(12, Node.COLUMN_BITS);
157:       assertEquals(32, Node.INCRDECR_PROP);
158:       assertEquals(15, Node.NO_SIDE_EFFECTS);
159:       assertEquals(57, Node.LAST_PROP);
160:       assertEquals(1, Node.DECR_FLAG);
161:       assertEquals(37, Node.OPT_ARG_NAME);
162:       assertEquals(8, Node.FLAG_NO_THROWS);
163:       assertEquals(39, Node.EMPTY_BLOCK);
164:       assertEquals(56, Node.CHANGE_TIME);
165:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
166:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
167:       assertEquals(4095, Node.COLUMN_MASK);
168:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
169:       assertEquals(57, Node.REFLECTED_OBJECT);
170:       assertEquals(48, Node.DIRECTIVES);
171:       assertEquals(49, Node.DIRECT_EVAL);
172:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
173:       assertEquals(43, Node.IS_CONSTANT_NAME);
174:       assertEquals(53, Node.INPUT_ID);
175:       assertEquals(36, Node.QUOTED_PROP);
176:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
177:       assertEquals(55, Node.INFERRED_FUNCTION);
178:       assertEquals(29, Node.JSDOC_INFO_PROP);
179:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
180:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
181:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
182:       assertEquals(47, Node.IS_DISPATCHER);
183:       assertEquals(51, Node.STATIC_SOURCE_FILE);
184:       assertEquals(2, Node.POST_FLAG);
185:       assertEquals(50, Node.FREE_CALL);
186:       assertEquals(40, Node.ORIGINALNAME_PROP);
187:       assertEquals(46, Node.IS_NAMESPACE);
188:       assertFalse(node1.equals((Object)node0));
189:       assertFalse(node1.isParamList());
190:       assertFalse(node1.isNull());
191:       assertEquals(0, node1.getChildCount());
192:       assertFalse(node1.isDefaultCase());
193:       assertFalse(node1.isSetterDef());
194:       assertFalse(node1.isVar());
195:       assertFalse(node1.isFunction());
196:       assertFalse(node1.isDebugger());
197:       assertFalse(node1.isContinue());
198:       assertFalse(node1.isStringKey());
199:       assertFalse(node1.isArrayLit());
200:       assertFalse(node1.isAssignAdd());
201:       assertFalse(node1.isLabel());
202:       assertFalse(node1.isOr());
203:       assertFalse(node1.isReturn());
204:       assertFalse(node1.isTypeOf());
205:       assertFalse(node1.isDec());
206:       assertFalse(node1.hasChildren());
207:       assertEquals((-1), node1.getSourcePosition());
208:       assertFalse(node1.isEmpty());
209:       assertFalse(node1.isDo());
210:       assertFalse(node1.isString());
211:       assertFalse(node1.isWhile());
212:       assertTrue(node1.isNumber());
213:       assertFalse(node1.isNew());
214:       assertFalse(node1.isAdd());
215:       assertFalse(node1.isTrue());
216:       assertFalse(node1.isAssign());
217:       assertFalse(node1.isName());
218:       assertFalse(node1.isGetElem());
219:       assertFalse(node1.isDelProp());
220:       assertFalse(node1.isCall());
221:       assertFalse(node1.isExprResult());
222:       assertFalse(node1.isBreak());
223:       assertFalse(node1.isVoid());
224:       assertFalse(node1.isInstanceOf());
225:       assertFalse(node1.isThis());
226:       assertFalse(node1.isObjectLit());
227:       assertFalse(node1.isComma());
228:       assertFalse(node1.isNot());
229:       assertFalse(node1.isThrow());
230:       assertFalse(node1.isScript());
231:       assertFalse(node1.isGetProp());
232:       assertEquals((-1), node1.getCharno());
233:       assertFalse(node1.isLabelName());
234:       assertFalse(node1.isFalse());
235:       assertFalse(node1.isAnd());
236:       assertFalse(node1.isSwitch());
237:       assertFalse(node1.isCast());
238:       assertFalse(node1.isIn());
239:       assertFalse(node1.isNE());
240:       assertFalse(node1.hasMoreThanOneChild());
241:       assertEquals(39, node1.getType());
242:       assertFalse(node1.isFor());
243:       assertFalse(node1.isGetterDef());
244:       assertFalse(node1.isInc());
245:       assertFalse(node1.isCase());
246:       assertFalse(node1.hasOneChild());
247:       assertFalse(node1.isTry());
248:       assertFalse(node1.isBlock());
249:       assertFalse(node1.isHook());
250:       assertFalse(node1.isRegExp());
251:       assertFalse(node1.isWith());
252:       assertFalse(node1.isIf());
253:       assertFalse(node1.isCatch());
254:       assertEquals((-1), node1.getLineno());
255:       assertNotNull(node1);
256:       
257:       boolean boolean0 = node1.isVarArgs();
258:       assertFalse(boolean0);
259:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
260:       assertEquals(54, Node.SLASH_V);
261:       assertEquals(52, Node.LENGTH);
262:       assertEquals(30, Node.VAR_ARGS_NAME);
263:       assertEquals(12, Node.COLUMN_BITS);
264:       assertEquals(32, Node.INCRDECR_PROP);
265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
266:       assertEquals(57, Node.LAST_PROP);
267:       assertEquals(1, Node.DECR_FLAG);
268:       assertEquals(37, Node.OPT_ARG_NAME);
269:       assertEquals(8, Node.FLAG_NO_THROWS);
270:       assertEquals(39, Node.EMPTY_BLOCK);
271:       assertEquals(56, Node.CHANGE_TIME);
272:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
273:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
274:       assertEquals(4095, Node.COLUMN_MASK);
275:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
276:       assertEquals(57, Node.REFLECTED_OBJECT);
277:       assertEquals(48, Node.DIRECTIVES);
278:       assertEquals(49, Node.DIRECT_EVAL);
279:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
280:       assertEquals(43, Node.IS_CONSTANT_NAME);
281:       assertEquals(53, Node.INPUT_ID);
282:       assertEquals(36, Node.QUOTED_PROP);
283:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
284:       assertEquals(55, Node.INFERRED_FUNCTION);
285:       assertEquals(29, Node.JSDOC_INFO_PROP);
286:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
287:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
288:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
289:       assertEquals(47, Node.IS_DISPATCHER);
290:       assertEquals(51, Node.STATIC_SOURCE_FILE);
291:       assertEquals(2, Node.POST_FLAG);
292:       assertEquals(50, Node.FREE_CALL);
293:       assertEquals(40, Node.ORIGINALNAME_PROP);
294:       assertEquals(46, Node.IS_NAMESPACE);
295:       assertFalse(node1.equals((Object)node0));
296:       assertFalse(node1.isParamList());
297:       assertFalse(node1.isNull());
298:       assertEquals(0, node1.getChildCount());
299:       assertFalse(node1.isDefaultCase());
300:       assertFalse(node1.isSetterDef());
301:       assertFalse(node1.isVar());
302:       assertFalse(node1.isFunction());
303:       assertFalse(node1.isDebugger());
304:       assertFalse(node1.isContinue());
305:       assertFalse(node1.isStringKey());
306:       assertFalse(node1.isArrayLit());
307:       assertFalse(node1.isAssignAdd());
308:       assertFalse(node1.isLabel());
309:       assertFalse(node1.isOr());
310:       assertFalse(node1.isReturn());
311:       assertFalse(node1.isTypeOf());
312:       assertFalse(node1.isDec());
313:       assertFalse(node1.hasChildren());
314:       assertEquals((-1), node1.getSourcePosition());
315:       assertFalse(node1.isEmpty());
316:       assertFalse(node1.isDo());
317:       assertFalse(node1.isString());
318:       assertFalse(node1.isWhile());
319:       assertTrue(node1.isNumber());
320:       assertFalse(node1.isNew());
321:       assertFalse(node1.isAdd());
322:       assertFalse(node1.isTrue());
323:       assertFalse(node1.isAssign());
324:       assertFalse(node1.isName());
325:       assertFalse(node1.isGetElem());
326:       assertFalse(node1.isDelProp());
327:       assertFalse(node1.isCall());
328:       assertFalse(node1.isExprResult());
329:       assertFalse(node1.isBreak());
330:       assertFalse(node1.isVoid());
331:       assertFalse(node1.isInstanceOf());
332:       assertFalse(node1.isThis());
333:       assertFalse(node1.isObjectLit());
334:       assertFalse(node1.isComma());
335:       assertFalse(node1.isNot());
336:       assertFalse(node1.isThrow());
337:       assertFalse(node1.isScript());
338:       assertFalse(node1.isGetProp());
339:       assertEquals((-1), node1.getCharno());
340:       assertFalse(node1.isLabelName());
341:       assertFalse(node1.isFalse());
342:       assertFalse(node1.isAnd());
343:       assertFalse(node1.isSwitch());
344:       assertFalse(node1.isCast());
345:       assertFalse(node1.isIn());
346:       assertFalse(node1.isNE());
347:       assertFalse(node1.hasMoreThanOneChild());
348:       assertEquals(39, node1.getType());
349:       assertFalse(node1.isFor());
350:       assertFalse(node1.isGetterDef());
351:       assertFalse(node1.isInc());
352:       assertFalse(node1.isCase());
353:       assertFalse(node1.hasOneChild());
354:       assertFalse(node1.isTry());
355:       assertFalse(node1.isBlock());
356:       assertFalse(node1.isHook());
357:       assertFalse(node1.isRegExp());
358:       assertFalse(node1.isWith());
359:       assertFalse(node1.isIf());
360:       assertFalse(node1.isCatch());
361:       assertEquals((-1), node1.getLineno());
362:       
363:       Iterable<Node> iterable0 = node0.children();
364:       assertEquals(53, Node.INPUT_ID);
365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
366:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
367:       assertEquals(29, Node.JSDOC_INFO_PROP);
368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
369:       assertEquals(43, Node.IS_CONSTANT_NAME);
370:       assertEquals(56, Node.CHANGE_TIME);
371:       assertEquals(36, Node.QUOTED_PROP);
372:       assertEquals(32, Node.INCRDECR_PROP);
373:       assertEquals(4095, Node.COLUMN_MASK);
374:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
375:       assertEquals(48, Node.DIRECTIVES);
376:       assertEquals(1, Node.DECR_FLAG);
377:       assertEquals(37, Node.OPT_ARG_NAME);
378:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
379:       assertEquals(12, Node.COLUMN_BITS);
380:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
381:       assertEquals(52, Node.LENGTH);
382:       assertEquals(54, Node.SLASH_V);
383:       assertEquals(40, Node.ORIGINALNAME_PROP);
384:       assertEquals(15, Node.NO_SIDE_EFFECTS);
385:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
386:       assertEquals(49, Node.DIRECT_EVAL);
387:       assertEquals(50, Node.FREE_CALL);
388:       assertEquals(8, Node.FLAG_NO_THROWS);
389:       assertEquals(57, Node.REFLECTED_OBJECT);
390:       assertEquals(51, Node.STATIC_SOURCE_FILE);
391:       assertEquals(46, Node.IS_NAMESPACE);
392:       assertEquals(55, Node.INFERRED_FUNCTION);
393:       assertEquals(39, Node.EMPTY_BLOCK);
394:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
395:       assertEquals(30, Node.VAR_ARGS_NAME);
396:       assertEquals(57, Node.LAST_PROP);
397:       assertEquals(2, Node.POST_FLAG);
398:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
399:       assertEquals(47, Node.IS_DISPATCHER);
400:       assertFalse(node0.equals((Object)node1));
401:       assertFalse(iterable0.contains(node0));
402:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
403:       assertEquals(10, stack0.capacity());
404:       assertEquals(0, stack0.size());
405:       assertEquals("[]", stack0.toString());
406:       assertTrue(stack0.isEmpty());
407:       assertTrue(stack0.empty());
408:       assertFalse(node0.isContinue());
409:       assertFalse(node0.hasMoreThanOneChild());
410:       assertFalse(node0.isAssignAdd());
411:       assertFalse(node0.isDo());
412:       assertEquals((-1), node0.getLineno());
413:       assertEquals((-1), node0.getSourcePosition());
414:       assertFalse(node0.isNumber());
415:       assertFalse(node0.isOr());
416:       assertFalse(node0.isVar());
417:       assertFalse(node0.isCast());
418:       assertFalse(node0.isNew());
419:       assertFalse(node0.isAdd());
420:       assertFalse(node0.isLabelName());
421:       assertFalse(node0.isLabel());
422:       assertTrue(node0.isParamList());
423:       assertFalse(node0.isAnd());
424:       assertFalse(node0.isObjectLit());
425:       assertFalse(node0.isGetProp());
426:       assertFalse(node0.isNull());
427:       assertFalse(node0.isVoid());
428:       assertEquals(83, node0.getType());
429:       assertFalse(node0.isNot());
430:       assertFalse(node0.isDebugger());
431:       assertFalse(node0.isTrue());
432:       assertFalse(node0.isName());
433:       assertFalse(node0.isCall());
434:       assertFalse(node0.isExprResult());
435:       assertFalse(node0.isBreak());
436:       assertFalse(node0.isGetElem());
437:       assertFalse(node0.isTypeOf());
438:       assertFalse(node0.isComma());
439:       assertFalse(node0.isDec());
440:       assertFalse(node0.isWhile());
441:       assertFalse(node0.isAssign());
442:       assertFalse(node0.hasChildren());
443:       assertFalse(node0.isReturn());
444:       assertFalse(node0.isIn());
445:       assertFalse(node0.isCase());
446:       assertFalse(node0.isNE());
447:       assertFalse(node0.isString());
448:       assertFalse(node0.isGetterDef());
449:       assertFalse(node0.isDelProp());
450:       assertFalse(node0.isSwitch());
451:       assertFalse(node0.isIf());
452:       assertEquals((-1), node0.getCharno());
453:       assertFalse(node0.isArrayLit());
454:       assertFalse(node0.isFalse());
455:       assertFalse(node0.isEmpty());
456:       assertFalse(node0.isInc());
457:       assertFalse(node0.isFunction());
458:       assertFalse(node0.isDefaultCase());
459:       assertFalse(node0.isThrow());
460:       assertFalse(node0.isInstanceOf());
461:       assertEquals(0, node0.getChildCount());
462:       assertFalse(node0.isCatch());
463:       assertFalse(node0.isSetterDef());
464:       assertFalse(node0.isScript());
465:       assertFalse(node0.isStringKey());
466:       assertFalse(node0.hasOneChild());
467:       assertFalse(node0.isTry());
468:       assertFalse(node0.isRegExp());
469:       assertFalse(node0.isWith());
470:       assertFalse(node0.isFor());
471:       assertFalse(node0.isBlock());
472:       assertFalse(node0.isThis());
473:       assertFalse(node0.isHook());
474:       assertNotNull(iterable0);
475:       
476:       boolean boolean1 = node0.isOptionalArg();
477:       assertFalse(boolean1);
478:       assertEquals(53, Node.INPUT_ID);
479:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
480:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
481:       assertEquals(29, Node.JSDOC_INFO_PROP);
482:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
483:       assertEquals(43, Node.IS_CONSTANT_NAME);
484:       assertEquals(56, Node.CHANGE_TIME);
485:       assertEquals(36, Node.QUOTED_PROP);
486:       assertEquals(32, Node.INCRDECR_PROP);
487:       assertEquals(4095, Node.COLUMN_MASK);
488:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
489:       assertEquals(48, Node.DIRECTIVES);
490:       assertEquals(1, Node.DECR_FLAG);
491:       assertEquals(37, Node.OPT_ARG_NAME);
492:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
493:       assertEquals(12, Node.COLUMN_BITS);
494:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
495:       assertEquals(52, Node.LENGTH);
496:       assertEquals(54, Node.SLASH_V);
497:       assertEquals(40, Node.ORIGINALNAME_PROP);
498:       assertEquals(15, Node.NO_SIDE_EFFECTS);
499:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
500:       assertEquals(49, Node.DIRECT_EVAL);
501:       assertEquals(50, Node.FREE_CALL);
502:       assertEquals(8, Node.FLAG_NO_THROWS);
503:       assertEquals(57, Node.REFLECTED_OBJECT);
504:       assertEquals(51, Node.STATIC_SOURCE_FILE);
505:       assertEquals(46, Node.IS_NAMESPACE);
506:       assertEquals(55, Node.INFERRED_FUNCTION);
507:       assertEquals(39, Node.EMPTY_BLOCK);
508:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
509:       assertEquals(30, Node.VAR_ARGS_NAME);
510:       assertEquals(57, Node.LAST_PROP);
511:       assertEquals(2, Node.POST_FLAG);
512:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
513:       assertEquals(47, Node.IS_DISPATCHER);
514:       assertFalse(node0.equals((Object)node1));
515:       assertTrue(boolean1 == boolean0);
516:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
517:       assertEquals(10, stack0.capacity());
518:       assertEquals(0, stack0.size());
519:       assertEquals("[]", stack0.toString());
520:       assertTrue(stack0.isEmpty());
521:       assertTrue(stack0.empty());
522:       assertFalse(node0.isContinue());
523:       assertFalse(node0.hasMoreThanOneChild());
524:       assertFalse(node0.isAssignAdd());
525:       assertFalse(node0.isDo());
526:       assertEquals((-1), node0.getLineno());
527:       assertEquals((-1), node0.getSourcePosition());
528:       assertFalse(node0.isNumber());
529:       assertFalse(node0.isOr());
530:       assertFalse(node0.isVar());
531:       assertFalse(node0.isCast());
532:       assertFalse(node0.isNew());
533:       assertFalse(node0.isAdd());
534:       assertFalse(node0.isLabelName());
535:       assertFalse(node0.isLabel());
536:       assertTrue(node0.isParamList());
537:       assertFalse(node0.isAnd());
538:       assertFalse(node0.isObjectLit());
539:       assertFalse(node0.isGetProp());
540:       assertFalse(node0.isNull());
541:       assertFalse(node0.isVoid());
542:       assertEquals(83, node0.getType());
543:       assertFalse(node0.isNot());
544:       assertFalse(node0.isDebugger());
545:       assertFalse(node0.isTrue());
546:       assertFalse(node0.isName());
547:       assertFalse(node0.isCall());
548:       assertFalse(node0.isExprResult());
549:       assertFalse(node0.isBreak());
550:       assertFalse(node0.isGetElem());
551:       assertFalse(node0.isTypeOf());
552:       assertFalse(node0.isComma());
553:       assertFalse(node0.isDec());
554:       assertFalse(node0.isWhile());
555:       assertFalse(node0.isAssign());
556:       assertFalse(node0.hasChildren());
557:       assertFalse(node0.isReturn());
558:       assertFalse(node0.isIn());
559:       assertFalse(node0.isCase());
560:       assertFalse(node0.isNE());
561:       assertFalse(node0.isString());
562:       assertFalse(node0.isGetterDef());
563:       assertFalse(node0.isDelProp());
564:       assertFalse(node0.isSwitch());
565:       assertFalse(node0.isIf());
566:       assertEquals((-1), node0.getCharno());
567:       assertFalse(node0.isArrayLit());
568:       assertFalse(node0.isFalse());
569:       assertFalse(node0.isEmpty());
570:       assertFalse(node0.isInc());
571:       assertFalse(node0.isFunction());
572:       assertFalse(node0.isDefaultCase());
573:       assertFalse(node0.isThrow());
574:       assertFalse(node0.isInstanceOf());
575:       assertEquals(0, node0.getChildCount());
576:       assertFalse(node0.isCatch());
577:       assertFalse(node0.isSetterDef());
578:       assertFalse(node0.isScript());
579:       assertFalse(node0.isStringKey());
580:       assertFalse(node0.hasOneChild());
581:       assertFalse(node0.isTry());
582:       assertFalse(node0.isRegExp());
583:       assertFalse(node0.isWith());
584:       assertFalse(node0.isFor());
585:       assertFalse(node0.isBlock());
586:       assertFalse(node0.isThis());
587:       assertFalse(node0.isHook());
588:       
589:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
590:       assertEquals(0, node_SideEffectFlags0.valueOf());
591:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
592:       assertNotNull(node_SideEffectFlags0);
593:       
594:       node_SideEffectFlags0.clearSideEffectFlags();
595:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
596:       assertEquals(15, node_SideEffectFlags0.valueOf());
597:       
598:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
599:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
600:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
601:       assertEquals(7, node_SideEffectFlags0.valueOf());
602:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
603:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
604:       assertEquals(7, node_SideEffectFlags1.valueOf());
605:       assertNotNull(node_SideEffectFlags1);
606:       
607:       simpleErrorReporter0.warning("Object#Element", "Object#Element", 276, 46);
608:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
609:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
610:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
611:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
612:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
613:       assertEquals(7, node_SideEffectFlags0.valueOf());
614:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
615:       assertEquals(7, node_SideEffectFlags2.valueOf());
616:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
617:       assertNotNull(node_SideEffectFlags2);
618:       
619:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
620:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
621:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
622:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
623:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
624:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
625:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
626:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
627:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
628:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
629:       assertEquals(7, node_SideEffectFlags0.valueOf());
630:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
631:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
632:       assertEquals(7, node_SideEffectFlags1.valueOf());
633:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
634:       assertEquals(7, node_SideEffectFlags3.valueOf());
635:       assertNotNull(node_SideEffectFlags3);
636:       
637:       node_SideEffectFlags0.clearSideEffectFlags();
638:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
639:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
640:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
641:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
642:       assertEquals(15, node_SideEffectFlags0.valueOf());
643:       
644:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
645:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
646:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
647:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
648:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
649:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
650:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
651:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
652:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
653:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
654:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
655:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
656:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
657:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
658:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
659:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
660:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
661:       assertEquals(0, node_SideEffectFlags0.valueOf());
662:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
663:       assertEquals(0, node_SideEffectFlags1.valueOf());
664:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
665:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
666:       assertEquals(0, node_SideEffectFlags3.valueOf());
667:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
668:       assertEquals(0, node_SideEffectFlags4.valueOf());
669:       assertNotNull(node_SideEffectFlags4);
670:       
671:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
672:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
673:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
674:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
675:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
676:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
677:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
678:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
679:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
680:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
681:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
682:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
683:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
684:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
685:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
686:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
687:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
688:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
689:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
690:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
691:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
692:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
693:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
694:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
695:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
696:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
697:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
698:       assertEquals(0, node_SideEffectFlags5.valueOf());
699:       assertEquals(0, node_SideEffectFlags0.valueOf());
700:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
701:       assertEquals(0, node_SideEffectFlags1.valueOf());
702:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
703:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
704:       assertEquals(0, node_SideEffectFlags3.valueOf());
705:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
706:       assertEquals(0, node_SideEffectFlags4.valueOf());
707:       assertNotNull(node_SideEffectFlags5);
708:       
709:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
710:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
711:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
712:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
713:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
714:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
715:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
716:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
717:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
718:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
719:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
720:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
721:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
722:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
723:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
724:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
725:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
726:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
727:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
728:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
729:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
730:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
731:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
732:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
733:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
734:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
735:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
736:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
737:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
738:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
739:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
740:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
741:       assertEquals(0, node_SideEffectFlags6.valueOf());
742:       assertEquals(0, node_SideEffectFlags0.valueOf());
743:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
744:       assertEquals(0, node_SideEffectFlags1.valueOf());
745:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
746:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
747:       assertEquals(0, node_SideEffectFlags3.valueOf());
748:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
749:       assertEquals(0, node_SideEffectFlags4.valueOf());
750:       assertNotNull(node_SideEffectFlags6);
751:       
752:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setAllFlags();
753:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
754:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
755:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
756:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
757:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
758:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
759:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
760:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
761:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
762:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
763:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
764:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
765:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
766:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
767:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
768:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
769:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
770:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
771:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
772:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
773:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
774:       assertEquals(0, node_SideEffectFlags7.valueOf());
775:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
776:       assertEquals(0, node_SideEffectFlags0.valueOf());
777:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
778:       assertEquals(0, node_SideEffectFlags2.valueOf());
779:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
780:       assertNotNull(node_SideEffectFlags7);
781:       
782:       int int0 = node1.getSourceOffset();
783:       assertEquals((-1), int0);
784:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
785:       assertEquals(54, Node.SLASH_V);
786:       assertEquals(52, Node.LENGTH);
787:       assertEquals(30, Node.VAR_ARGS_NAME);
788:       assertEquals(12, Node.COLUMN_BITS);
789:       assertEquals(32, Node.INCRDECR_PROP);
790:       assertEquals(15, Node.NO_SIDE_EFFECTS);
791:       assertEquals(57, Node.LAST_PROP);
792:       assertEquals(1, Node.DECR_FLAG);
793:       assertEquals(37, Node.OPT_ARG_NAME);
794:       assertEquals(8, Node.FLAG_NO_THROWS);
795:       assertEquals(39, Node.EMPTY_BLOCK);
796:       assertEquals(56, Node.CHANGE_TIME);
797:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
798:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
799:       assertEquals(4095, Node.COLUMN_MASK);
800:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
801:       assertEquals(57, Node.REFLECTED_OBJECT);
802:       assertEquals(48, Node.DIRECTIVES);
803:       assertEquals(49, Node.DIRECT_EVAL);
804:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
805:       assertEquals(43, Node.IS_CONSTANT_NAME);
806:       assertEquals(53, Node.INPUT_ID);
807:       assertEquals(36, Node.QUOTED_PROP);
808:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
809:       assertEquals(55, Node.INFERRED_FUNCTION);
810:       assertEquals(29, Node.JSDOC_INFO_PROP);
811:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
812:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
813:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
814:       assertEquals(47, Node.IS_DISPATCHER);
815:       assertEquals(51, Node.STATIC_SOURCE_FILE);
816:       assertEquals(2, Node.POST_FLAG);
817:       assertEquals(50, Node.FREE_CALL);
818:       assertEquals(40, Node.ORIGINALNAME_PROP);
819:       assertEquals(46, Node.IS_NAMESPACE);
820:       assertFalse(node1.equals((Object)node0));
821:       assertFalse(node1.isParamList());
822:       assertFalse(node1.isNull());
823:       assertEquals(0, node1.getChildCount());
824:       assertFalse(node1.isDefaultCase());
825:       assertFalse(node1.isSetterDef());
826:       assertFalse(node1.isVar());
827:       assertFalse(node1.isFunction());
828:       assertFalse(node1.isDebugger());
829:       assertFalse(node1.isContinue());
830:       assertFalse(node1.isStringKey());
831:       assertFalse(node1.isArrayLit());
832:       assertFalse(node1.isAssignAdd());
833:       assertFalse(node1.isLabel());
834:       assertFalse(node1.isOr());
835:       assertFalse(node1.isReturn());
836:       assertFalse(node1.isTypeOf());
837:       assertFalse(node1.isDec());
838:       assertFalse(node1.hasChildren());
839:       assertEquals((-1), node1.getSourcePosition());
840:       assertFalse(node1.isEmpty());
841:       assertFalse(node1.isDo());
842:       assertFalse(node1.isString());
843:       assertFalse(node1.isWhile());
844:       assertTrue(node1.isNumber());
845:       assertFalse(node1.isNew());
846:       assertFalse(node1.isAdd());
847:       assertFalse(node1.isTrue());
848:       assertFalse(node1.isAssign());
849:       assertFalse(node1.isName());
850:       assertFalse(node1.isGetElem());
851:       assertFalse(node1.isDelProp());
852:       assertFalse(node1.isCall());
853:       assertFalse(node1.isExprResult());
854:       assertFalse(node1.isBreak());
855:       assertFalse(node1.isVoid());
856:       assertFalse(node1.isInstanceOf());
857:       assertFalse(node1.isThis());
858:       assertFalse(node1.isObjectLit());
859:       assertFalse(node1.isComma());
860:       assertFalse(node1.isNot());
861:       assertFalse(node1.isThrow());
862:       assertFalse(node1.isScript());
863:       assertFalse(node1.isGetProp());
864:       assertEquals((-1), node1.getCharno());
865:       assertFalse(node1.isLabelName());
866:       assertFalse(node1.isFalse());
867:       assertFalse(node1.isAnd());
868:       assertFalse(node1.isSwitch());
869:       assertFalse(node1.isCast());
870:       assertFalse(node1.isIn());
871:       assertFalse(node1.isNE());
872:       assertFalse(node1.hasMoreThanOneChild());
873:       assertEquals(39, node1.getType());
874:       assertFalse(node1.isFor());
875:       assertFalse(node1.isGetterDef());
876:       assertFalse(node1.isInc());
877:       assertFalse(node1.isCase());
878:       assertFalse(node1.hasOneChild());
879:       assertFalse(node1.isTry());
880:       assertFalse(node1.isBlock());
881:       assertFalse(node1.isHook());
882:       assertFalse(node1.isRegExp());
883:       assertFalse(node1.isWith());
884:       assertFalse(node1.isIf());
885:       assertFalse(node1.isCatch());
886:       assertEquals((-1), node1.getLineno());
887:       
888:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags2.setThrows();
889:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
890:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
891:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
892:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
893:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
894:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
895:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
896:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
897:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
898:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
899:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
900:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
901:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
902:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
903:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
904:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
905:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
906:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
907:       assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
908:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
909:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
910:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
911:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
912:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
913:       assertEquals(0, node_SideEffectFlags8.valueOf());
914:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
915:       assertEquals(0, node_SideEffectFlags0.valueOf());
916:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
917:       assertEquals(0, node_SideEffectFlags2.valueOf());
918:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
919:       assertNotNull(node_SideEffectFlags8);
920:       
921:       boolean boolean2 = node0.isFromExterns();
922:       assertFalse(boolean2);
923:       assertEquals(53, Node.INPUT_ID);
924:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
925:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
926:       assertEquals(29, Node.JSDOC_INFO_PROP);
927:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
928:       assertEquals(43, Node.IS_CONSTANT_NAME);
929:       assertEquals(56, Node.CHANGE_TIME);
930:       assertEquals(36, Node.QUOTED_PROP);
931:       assertEquals(32, Node.INCRDECR_PROP);
932:       assertEquals(4095, Node.COLUMN_MASK);
933:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
934:       assertEquals(48, Node.DIRECTIVES);
935:       assertEquals(1, Node.DECR_FLAG);
936:       assertEquals(37, Node.OPT_ARG_NAME);
937:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
938:       assertEquals(12, Node.COLUMN_BITS);
939:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
940:       assertEquals(52, Node.LENGTH);
941:       assertEquals(54, Node.SLASH_V);
942:       assertEquals(40, Node.ORIGINALNAME_PROP);
943:       assertEquals(15, Node.NO_SIDE_EFFECTS);
944:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
945:       assertEquals(49, Node.DIRECT_EVAL);
946:       assertEquals(50, Node.FREE_CALL);
947:       assertEquals(8, Node.FLAG_NO_THROWS);
948:       assertEquals(57, Node.REFLECTED_OBJECT);
949:       assertEquals(51, Node.STATIC_SOURCE_FILE);
950:       assertEquals(46, Node.IS_NAMESPACE);
951:       assertEquals(55, Node.INFERRED_FUNCTION);
952:       assertEquals(39, Node.EMPTY_BLOCK);
953:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
954:       assertEquals(30, Node.VAR_ARGS_NAME);
955:       assertEquals(57, Node.LAST_PROP);
956:       assertEquals(2, Node.POST_FLAG);
957:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
958:       assertEquals(47, Node.IS_DISPATCHER);
959:       assertFalse(node0.equals((Object)node1));
960:       assertTrue(boolean2 == boolean0);
961:       assertTrue(boolean2 == boolean1);
962:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
963:       assertEquals(10, stack0.capacity());
964:       assertEquals(0, stack0.size());
965:       assertEquals("[]", stack0.toString());
966:       assertTrue(stack0.isEmpty());
967:       assertTrue(stack0.empty());
968:       assertFalse(node0.isContinue());
969:       assertFalse(node0.hasMoreThanOneChild());
970:       assertFalse(node0.isAssignAdd());
971:       assertFalse(node0.isDo());
972:       assertEquals((-1), node0.getLineno());
973:       assertEquals((-1), node0.getSourcePosition());
974:       assertFalse(node0.isNumber());
975:       assertFalse(node0.isOr());
976:       assertFalse(node0.isVar());
977:       assertFalse(node0.isCast());
978:       assertFalse(node0.isNew());
979:       assertFalse(node0.isAdd());
980:       assertFalse(node0.isLabelName());
981:       assertFalse(node0.isLabel());
982:       assertTrue(node0.isParamList());
983:       assertFalse(node0.isAnd());
984:       assertFalse(node0.isObjectLit());
985:       assertFalse(node0.isGetProp());
986:       assertFalse(node0.isNull());
987:       assertFalse(node0.isVoid());
988:       assertEquals(83, node0.getType());
989:       assertFalse(node0.isNot());
990:       assertFalse(node0.isDebugger());
991:       assertFalse(node0.isTrue());
992:       assertFalse(node0.isName());
993:       assertFalse(node0.isCall());
994:       assertFalse(node0.isExprResult());
995:       assertFalse(node0.isBreak());
996:       assertFalse(node0.isGetElem());
997:       assertFalse(node0.isTypeOf());
998:       assertFalse(node0.isComma());
999:       assertFalse(node0.isDec());
1000:       assertFalse(node0.isWhile());
1001:       assertFalse(node0.isAssign());
1002:       assertFalse(node0.hasChildren());
1003:       assertFalse(node0.isReturn());
1004:       assertFalse(node0.isIn());
1005:       assertFalse(node0.isCase());
1006:       assertFalse(node0.isNE());
1007:       assertFalse(node0.isString());
1008:       assertFalse(node0.isGetterDef());
1009:       assertFalse(node0.isDelProp());
1010:       assertFalse(node0.isSwitch());
1011:       assertFalse(node0.isIf());
1012:       assertEquals((-1), node0.getCharno());
1013:       assertFalse(node0.isArrayLit());
1014:       assertFalse(node0.isFalse());
1015:       assertFalse(node0.isEmpty());
1016:       assertFalse(node0.isInc());
1017:       assertFalse(node0.isFunction());
1018:       assertFalse(node0.isDefaultCase());
1019:       assertFalse(node0.isThrow());
1020:       assertFalse(node0.isInstanceOf());
1021:       assertEquals(0, node0.getChildCount());
1022:       assertFalse(node0.isCatch());
1023:       assertFalse(node0.isSetterDef());
1024:       assertFalse(node0.isScript());
1025:       assertFalse(node0.isStringKey());
1026:       assertFalse(node0.hasOneChild());
1027:       assertFalse(node0.isTry());
1028:       assertFalse(node0.isRegExp());
1029:       assertFalse(node0.isWith());
1030:       assertFalse(node0.isFor());
1031:       assertFalse(node0.isBlock());
1032:       assertFalse(node0.isThis());
1033:       assertFalse(node0.isHook());
1034:       
1035:       boolean boolean3 = node0.isFunction();
1036:       assertFalse(boolean3);
1037:       assertEquals(53, Node.INPUT_ID);
1038:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1039:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1040:       assertEquals(29, Node.JSDOC_INFO_PROP);
1041:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1042:       assertEquals(43, Node.IS_CONSTANT_NAME);
1043:       assertEquals(56, Node.CHANGE_TIME);
1044:       assertEquals(36, Node.QUOTED_PROP);
1045:       assertEquals(32, Node.INCRDECR_PROP);
1046:       assertEquals(4095, Node.COLUMN_MASK);
1047:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1048:       assertEquals(48, Node.DIRECTIVES);
1049:       assertEquals(1, Node.DECR_FLAG);
1050:       assertEquals(37, Node.OPT_ARG_NAME);
1051:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1052:       assertEquals(12, Node.COLUMN_BITS);
1053:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1054:       assertEquals(52, Node.LENGTH);
1055:       assertEquals(54, Node.SLASH_V);
1056:       assertEquals(40, Node.ORIGINALNAME_PROP);
1057:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1058:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1059:       assertEquals(49, Node.DIRECT_EVAL);
1060:       assertEquals(50, Node.FREE_CALL);
1061:       assertEquals(8, Node.FLAG_NO_THROWS);
1062:       assertEquals(57, Node.REFLECTED_OBJECT);
1063:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1064:       assertEquals(46, Node.IS_NAMESPACE);
1065:       assertEquals(55, Node.INFERRED_FUNCTION);
1066:       assertEquals(39, Node.EMPTY_BLOCK);
1067:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1068:       assertEquals(30, Node.VAR_ARGS_NAME);
1069:       assertEquals(57, Node.LAST_PROP);
1070:       assertEquals(2, Node.POST_FLAG);
1071:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1072:       assertEquals(47, Node.IS_DISPATCHER);
1073:       assertFalse(node0.equals((Object)node1));
1074:       assertTrue(boolean3 == boolean0);
1075:       assertTrue(boolean3 == boolean1);
1076:       assertTrue(boolean3 == boolean2);
1077:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1078:       assertEquals(10, stack0.capacity());
1079:       assertEquals(0, stack0.size());
1080:       assertEquals("[]", stack0.toString());
1081:       assertTrue(stack0.isEmpty());
1082:       assertTrue(stack0.empty());
1083:       assertFalse(node0.isContinue());
1084:       assertFalse(node0.hasMoreThanOneChild());
1085:       assertFalse(node0.isAssignAdd());
1086:       assertFalse(node0.isDo());
1087:       assertEquals((-1), node0.getLineno());
1088:       assertEquals((-1), node0.getSourcePosition());
1089:       assertFalse(node0.isNumber());
1090:       assertFalse(node0.isOr());
1091:       assertFalse(node0.isVar());
1092:       assertFalse(node0.isCast());
1093:       assertFalse(node0.isNew());
1094:       assertFalse(node0.isAdd());
1095:       assertFalse(node0.isLabelName());
1096:       assertFalse(node0.isLabel());
1097:       assertTrue(node0.isParamList());
1098:       assertFalse(node0.isAnd());
1099:       assertFalse(node0.isObjectLit());
1100:       assertFalse(node0.isGetProp());
1101:       assertFalse(node0.isNull());
1102:       assertFalse(node0.isVoid());
1103:       assertEquals(83, node0.getType());
1104:       assertFalse(node0.isNot());
1105:       assertFalse(node0.isDebugger());
1106:       assertFalse(node0.isTrue());
1107:       assertFalse(node0.isName());
1108:       assertFalse(node0.isCall());
1109:       assertFalse(node0.isExprResult());
1110:       assertFalse(node0.isBreak());
1111:       assertFalse(node0.isGetElem());
1112:       assertFalse(node0.isTypeOf());
1113:       assertFalse(node0.isComma());
1114:       assertFalse(node0.isDec());
1115:       assertFalse(node0.isWhile());
1116:       assertFalse(node0.isAssign());
1117:       assertFalse(node0.hasChildren());
1118:       assertFalse(node0.isReturn());
1119:       assertFalse(node0.isIn());
1120:       assertFalse(node0.isCase());
1121:       assertFalse(node0.isNE());
1122:       assertFalse(node0.isString());
1123:       assertFalse(node0.isGetterDef());
1124:       assertFalse(node0.isDelProp());
1125:       assertFalse(node0.isSwitch());
1126:       assertFalse(node0.isIf());
1127:       assertEquals((-1), node0.getCharno());
1128:       assertFalse(node0.isArrayLit());
1129:       assertFalse(node0.isFalse());
1130:       assertFalse(node0.isEmpty());
1131:       assertFalse(node0.isInc());
1132:       assertFalse(node0.isFunction());
1133:       assertFalse(node0.isDefaultCase());
1134:       assertFalse(node0.isThrow());
1135:       assertFalse(node0.isInstanceOf());
1136:       assertEquals(0, node0.getChildCount());
1137:       assertFalse(node0.isCatch());
1138:       assertFalse(node0.isSetterDef());
1139:       assertFalse(node0.isScript());
1140:       assertFalse(node0.isStringKey());
1141:       assertFalse(node0.hasOneChild());
1142:       assertFalse(node0.isTry());
1143:       assertFalse(node0.isRegExp());
1144:       assertFalse(node0.isWith());
1145:       assertFalse(node0.isFor());
1146:       assertFalse(node0.isBlock());
1147:       assertFalse(node0.isThis());
1148:       assertFalse(node0.isHook());
1149:       
1150:       boolean boolean4 = node0.isExprResult();
1151:       assertFalse(boolean4);
1152:       assertEquals(53, Node.INPUT_ID);
1153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1154:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1155:       assertEquals(29, Node.JSDOC_INFO_PROP);
1156:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1157:       assertEquals(43, Node.IS_CONSTANT_NAME);
1158:       assertEquals(56, Node.CHANGE_TIME);
1159:       assertEquals(36, Node.QUOTED_PROP);
1160:       assertEquals(32, Node.INCRDECR_PROP);
1161:       assertEquals(4095, Node.COLUMN_MASK);
1162:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1163:       assertEquals(48, Node.DIRECTIVES);
1164:       assertEquals(1, Node.DECR_FLAG);
1165:       assertEquals(37, Node.OPT_ARG_NAME);
1166:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1167:       assertEquals(12, Node.COLUMN_BITS);
1168:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1169:       assertEquals(52, Node.LENGTH);
1170:       assertEquals(54, Node.SLASH_V);
1171:       assertEquals(40, Node.ORIGINALNAME_PROP);
1172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1173:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1174:       assertEquals(49, Node.DIRECT_EVAL);
1175:       assertEquals(50, Node.FREE_CALL);
1176:       assertEquals(8, Node.FLAG_NO_THROWS);
1177:       assertEquals(57, Node.REFLECTED_OBJECT);
1178:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1179:       assertEquals(46, Node.IS_NAMESPACE);
1180:       assertEquals(55, Node.INFERRED_FUNCTION);
1181:       assertEquals(39, Node.EMPTY_BLOCK);
1182:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1183:       assertEquals(30, Node.VAR_ARGS_NAME);
1184:       assertEquals(57, Node.LAST_PROP);
1185:       assertEquals(2, Node.POST_FLAG);
1186:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1187:       assertEquals(47, Node.IS_DISPATCHER);
1188:       assertFalse(node0.equals((Object)node1));
1189:       assertTrue(boolean4 == boolean3);
1190:       assertTrue(boolean4 == boolean1);
1191:       assertTrue(boolean4 == boolean2);
1192:       assertTrue(boolean4 == boolean0);
1193:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1194:       assertEquals(10, stack0.capacity());
1195:       assertEquals(0, stack0.size());
1196:       assertEquals("[]", stack0.toString());
1197:       assertTrue(stack0.isEmpty());
1198:       assertTrue(stack0.empty());
1199:       assertFalse(node0.isContinue());
1200:       assertFalse(node0.hasMoreThanOneChild());
1201:       assertFalse(node0.isAssignAdd());
1202:       assertFalse(node0.isDo());
1203:       assertEquals((-1), node0.getLineno());
1204:       assertEquals((-1), node0.getSourcePosition());
1205:       assertFalse(node0.isNumber());
1206:       assertFalse(node0.isOr());
1207:       assertFalse(node0.isVar());
1208:       assertFalse(node0.isCast());
1209:       assertFalse(node0.isNew());
1210:       assertFalse(node0.isAdd());
1211:       assertFalse(node0.isLabelName());
1212:       assertFalse(node0.isLabel());
1213:       assertTrue(node0.isParamList());
1214:       assertFalse(node0.isAnd());
1215:       assertFalse(node0.isObjectLit());
1216:       assertFalse(node0.isGetProp());
1217:       assertFalse(node0.isNull());
1218:       assertFalse(node0.isVoid());
1219:       assertEquals(83, node0.getType());
1220:       assertFalse(node0.isNot());
1221:       assertFalse(node0.isDebugger());
1222:       assertFalse(node0.isTrue());
1223:       assertFalse(node0.isName());
1224:       assertFalse(node0.isCall());
1225:       assertFalse(node0.isExprResult());
1226:       assertFalse(node0.isBreak());
1227:       assertFalse(node0.isGetElem());
1228:       assertFalse(node0.isTypeOf());
1229:       assertFalse(node0.isComma());
1230:       assertFalse(node0.isDec());
1231:       assertFalse(node0.isWhile());
1232:       assertFalse(node0.isAssign());
1233:       assertFalse(node0.hasChildren());
1234:       assertFalse(node0.isReturn());
1235:       assertFalse(node0.isIn());
1236:       assertFalse(node0.isCase());
1237:       assertFalse(node0.isNE());
1238:       assertFalse(node0.isString());
1239:       assertFalse(node0.isGetterDef());
1240:       assertFalse(node0.isDelProp());
1241:       assertFalse(node0.isSwitch());
1242:       assertFalse(node0.isIf());
1243:       assertEquals((-1), node0.getCharno());
1244:       assertFalse(node0.isArrayLit());
1245:       assertFalse(node0.isFalse());
1246:       assertFalse(node0.isEmpty());
1247:       assertFalse(node0.isInc());
1248:       assertFalse(node0.isFunction());
1249:       assertFalse(node0.isDefaultCase());
1250:       assertFalse(node0.isThrow());
1251:       assertFalse(node0.isInstanceOf());
1252:       assertEquals(0, node0.getChildCount());
1253:       assertFalse(node0.isCatch());
1254:       assertFalse(node0.isSetterDef());
1255:       assertFalse(node0.isScript());
1256:       assertFalse(node0.isStringKey());
1257:       assertFalse(node0.hasOneChild());
1258:       assertFalse(node0.isTry());
1259:       assertFalse(node0.isRegExp());
1260:       assertFalse(node0.isWith());
1261:       assertFalse(node0.isFor());
1262:       assertFalse(node0.isBlock());
1263:       assertFalse(node0.isThis());
1264:       assertFalse(node0.isHook());
1265:       
1266:       boolean boolean5 = node0.hasMoreThanOneChild();
1267:       assertFalse(boolean5);
1268:       assertEquals(53, Node.INPUT_ID);
1269:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1270:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1271:       assertEquals(29, Node.JSDOC_INFO_PROP);
1272:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1273:       assertEquals(43, Node.IS_CONSTANT_NAME);
1274:       assertEquals(56, Node.CHANGE_TIME);
1275:       assertEquals(36, Node.QUOTED_PROP);
1276:       assertEquals(32, Node.INCRDECR_PROP);
1277:       assertEquals(4095, Node.COLUMN_MASK);
1278:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1279:       assertEquals(48, Node.DIRECTIVES);
1280:       assertEquals(1, Node.DECR_FLAG);
1281:       assertEquals(37, Node.OPT_ARG_NAME);
1282:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1283:       assertEquals(12, Node.COLUMN_BITS);
1284:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1285:       assertEquals(52, Node.LENGTH);
1286:       assertEquals(54, Node.SLASH_V);
1287:       assertEquals(40, Node.ORIGINALNAME_PROP);
1288:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1289:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1290:       assertEquals(49, Node.DIRECT_EVAL);
1291:       assertEquals(50, Node.FREE_CALL);
1292:       assertEquals(8, Node.FLAG_NO_THROWS);
1293:       assertEquals(57, Node.REFLECTED_OBJECT);
1294:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1295:       assertEquals(46, Node.IS_NAMESPACE);
1296:       assertEquals(55, Node.INFERRED_FUNCTION);
1297:       assertEquals(39, Node.EMPTY_BLOCK);
1298:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1299:       assertEquals(30, Node.VAR_ARGS_NAME);
1300:       assertEquals(57, Node.LAST_PROP);
1301:       assertEquals(2, Node.POST_FLAG);
1302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1303:       assertEquals(47, Node.IS_DISPATCHER);
1304:       assertFalse(node0.equals((Object)node1));
1305:       assertTrue(boolean5 == boolean2);
1306:       assertTrue(boolean5 == boolean4);
1307:       assertTrue(boolean5 == boolean1);
1308:       assertTrue(boolean5 == boolean0);
1309:       assertTrue(boolean5 == boolean3);
1310:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1311:       assertEquals(10, stack0.capacity());
1312:       assertEquals(0, stack0.size());
1313:       assertEquals("[]", stack0.toString());
1314:       assertTrue(stack0.isEmpty());
1315:       assertTrue(stack0.empty());
1316:       assertFalse(node0.isContinue());
1317:       assertFalse(node0.hasMoreThanOneChild());
1318:       assertFalse(node0.isAssignAdd());
1319:       assertFalse(node0.isDo());
1320:       assertEquals((-1), node0.getLineno());
1321:       assertEquals((-1), node0.getSourcePosition());
1322:       assertFalse(node0.isNumber());
1323:       assertFalse(node0.isOr());
1324:       assertFalse(node0.isVar());
1325:       assertFalse(node0.isCast());
1326:       assertFalse(node0.isNew());
1327:       assertFalse(node0.isAdd());
1328:       assertFalse(node0.isLabelName());
1329:       assertFalse(node0.isLabel());
1330:       assertTrue(node0.isParamList());
1331:       assertFalse(node0.isAnd());
1332:       assertFalse(node0.isObjectLit());
1333:       assertFalse(node0.isGetProp());
1334:       assertFalse(node0.isNull());
1335:       assertFalse(node0.isVoid());
1336:       assertEquals(83, node0.getType());
1337:       assertFalse(node0.isNot());
1338:       assertFalse(node0.isDebugger());
1339:       assertFalse(node0.isTrue());
1340:       assertFalse(node0.isName());
1341:       assertFalse(node0.isCall());
1342:       assertFalse(node0.isExprResult());
1343:       assertFalse(node0.isBreak());
1344:       assertFalse(node0.isGetElem());
1345:       assertFalse(node0.isTypeOf());
1346:       assertFalse(node0.isComma());
1347:       assertFalse(node0.isDec());
1348:       assertFalse(node0.isWhile());
1349:       assertFalse(node0.isAssign());
1350:       assertFalse(node0.hasChildren());
1351:       assertFalse(node0.isReturn());
1352:       assertFalse(node0.isIn());
1353:       assertFalse(node0.isCase());
1354:       assertFalse(node0.isNE());
1355:       assertFalse(node0.isString());
1356:       assertFalse(node0.isGetterDef());
1357:       assertFalse(node0.isDelProp());
1358:       assertFalse(node0.isSwitch());
1359:       assertFalse(node0.isIf());
1360:       assertEquals((-1), node0.getCharno());
1361:       assertFalse(node0.isArrayLit());
1362:       assertFalse(node0.isFalse());
1363:       assertFalse(node0.isEmpty());
1364:       assertFalse(node0.isInc());
1365:       assertFalse(node0.isFunction());
1366:       assertFalse(node0.isDefaultCase());
1367:       assertFalse(node0.isThrow());
1368:       assertFalse(node0.isInstanceOf());
1369:       assertEquals(0, node0.getChildCount());
1370:       assertFalse(node0.isCatch());
1371:       assertFalse(node0.isSetterDef());
1372:       assertFalse(node0.isScript());
1373:       assertFalse(node0.isStringKey());
1374:       assertFalse(node0.hasOneChild());
1375:       assertFalse(node0.isTry());
1376:       assertFalse(node0.isRegExp());
1377:       assertFalse(node0.isWith());
1378:       assertFalse(node0.isFor());
1379:       assertFalse(node0.isBlock());
1380:       assertFalse(node0.isThis());
1381:       assertFalse(node0.isHook());
1382:   }
1383: }
RegularFileObject[/tmp/EvoSuite_102_1629223343419/com/google/javascript/rhino/Node_102_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:23 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_102_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_102_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_102_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.JSTypeExpression",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.JSDocInfo$Marker",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.FluentIterable",
352:       "com.google.common.collect.Iterables$2",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 18:02:23.844 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

Stack<JSType> stack0 = new Stack<JSType>();
assertEquals(10, stack0.capacity());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertNotNull(stack0);

Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertEquals(83, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertNotNull(node0);

Node node1 = Node.newNumber((double) 32);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertTrue(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isThrow());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertNotNull(node1);

boolean boolean0 = node1.isVarArgs();
assertFalse(boolean0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertTrue(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isThrow());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());

Iterable<Node> iterable0 = node0.children();
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertEquals(83, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertNotNull(iterable0);

boolean boolean1 = node0.isOptionalArg();
assertFalse(boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertEquals(83, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

node_SideEffectFlags0.clearSideEffectFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(7, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);

simpleErrorReporter0.warning("Object#Element", "Object#Element", 276, 46);
Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertEquals(7, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertEquals(7, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags3.valueOf());
assertNotNull(node_SideEffectFlags3);

node_SideEffectFlags0.clearSideEffectFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags6.valueOf());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setAllFlags();
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertEquals(0, node_SideEffectFlags7.valueOf());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags7);

int int0 = node1.getSourceOffset();
assertEquals((-1), int0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertTrue(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isVoid());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isThrow());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabelName());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isCast());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags2.setThrows();
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertEquals(0, node_SideEffectFlags8.valueOf());
assertTrue(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags8);

boolean boolean2 = node0.isFromExterns();
assertFalse(boolean2);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertEquals(83, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());

boolean boolean3 = node0.isFunction();
assertFalse(boolean3);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertEquals(83, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());

boolean boolean4 = node0.isExprResult();
assertFalse(boolean4);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertEquals(83, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());

boolean boolean5 = node0.hasMoreThanOneChild();
assertFalse(boolean5);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(10, stack0.capacity());
assertEquals(0, stack0.size());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isVoid());
assertEquals(83, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isFunction());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isHook());


[MASTER] 18:02:23.918 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_103_1629223343845/com/google/javascript/rhino/Node_103_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_103_1629223343845/com/google/javascript/rhino/Node_103_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:23.918 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:23.918 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:23.919 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 378
[MASTER] 18:02:23.919 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_103_1629223343845/com/google/javascript/rhino/Node_103_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:23 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.EvoSuiteFile;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_103_tmp__ESTest extends Node_103_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = new Node(63, 63, 63);
23:       assertEquals(48, Node.DIRECTIVES);
24:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
25:       assertEquals(39, Node.EMPTY_BLOCK);
26:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
27:       assertEquals(55, Node.INFERRED_FUNCTION);
28:       assertEquals(57, Node.REFLECTED_OBJECT);
29:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
30:       assertEquals(50, Node.FREE_CALL);
31:       assertEquals(52, Node.LENGTH);
32:       assertEquals(8, Node.FLAG_NO_THROWS);
33:       assertEquals(54, Node.SLASH_V);
34:       assertEquals(53, Node.INPUT_ID);
35:       assertEquals(15, Node.NO_SIDE_EFFECTS);
36:       assertEquals(43, Node.IS_CONSTANT_NAME);
37:       assertEquals(57, Node.LAST_PROP);
38:       assertEquals(40, Node.ORIGINALNAME_PROP);
39:       assertEquals(30, Node.VAR_ARGS_NAME);
40:       assertEquals(2, Node.POST_FLAG);
41:       assertEquals(37, Node.OPT_ARG_NAME);
42:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
43:       assertEquals(47, Node.IS_DISPATCHER);
44:       assertEquals(32, Node.INCRDECR_PROP);
45:       assertEquals(46, Node.IS_NAMESPACE);
46:       assertEquals(56, Node.CHANGE_TIME);
47:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
48:       assertEquals(1, Node.DECR_FLAG);
49:       assertEquals(29, Node.JSDOC_INFO_PROP);
50:       assertEquals(51, Node.STATIC_SOURCE_FILE);
51:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
52:       assertEquals(36, Node.QUOTED_PROP);
53:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
54:       assertEquals(49, Node.DIRECT_EVAL);
55:       assertEquals(12, Node.COLUMN_BITS);
56:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
57:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
58:       assertEquals(4095, Node.COLUMN_MASK);
59:       assertFalse(node0.isTrue());
60:       assertFalse(node0.isDefaultCase());
61:       assertFalse(node0.isTry());
62:       assertFalse(node0.isVoid());
63:       assertFalse(node0.isIf());
64:       assertFalse(node0.isNE());
65:       assertFalse(node0.isEmpty());
66:       assertFalse(node0.isDebugger());
67:       assertFalse(node0.isGetterDef());
68:       assertEquals(63, node0.getLineno());
69:       assertFalse(node0.isDelProp());
70:       assertFalse(node0.isFor());
71:       assertFalse(node0.isCall());
72:       assertFalse(node0.isCatch());
73:       assertFalse(node0.isRegExp());
74:       assertFalse(node0.isHook());
75:       assertFalse(node0.isBlock());
76:       assertFalse(node0.isVar());
77:       assertFalse(node0.isAdd());
78:       assertFalse(node0.isSwitch());
79:       assertFalse(node0.isNew());
80:       assertFalse(node0.isName());
81:       assertFalse(node0.isCase());
82:       assertFalse(node0.isStringKey());
83:       assertFalse(node0.isNull());
84:       assertEquals(258111, node0.getSourcePosition());
85:       assertFalse(node0.isAssignAdd());
86:       assertFalse(node0.isLabel());
87:       assertFalse(node0.isParamList());
88:       assertFalse(node0.isDo());
89:       assertEquals(0, node0.getChildCount());
90:       assertEquals(63, node0.getType());
91:       assertFalse(node0.isExprResult());
92:       assertFalse(node0.hasOneChild());
93:       assertFalse(node0.isLabelName());
94:       assertFalse(node0.isScript());
95:       assertTrue(node0.isArrayLit());
96:       assertFalse(node0.isNumber());
97:       assertFalse(node0.isNot());
98:       assertFalse(node0.isObjectLit());
99:       assertFalse(node0.isOr());
100:       assertFalse(node0.isReturn());
101:       assertFalse(node0.isGetProp());
102:       assertFalse(node0.isInstanceOf());
103:       assertFalse(node0.isWith());
104:       assertFalse(node0.isWhile());
105:       assertFalse(node0.isBreak());
106:       assertFalse(node0.hasChildren());
107:       assertFalse(node0.isGetElem());
108:       assertFalse(node0.isThis());
109:       assertFalse(node0.isComma());
110:       assertFalse(node0.hasMoreThanOneChild());
111:       assertFalse(node0.isDec());
112:       assertFalse(node0.isAssign());
113:       assertFalse(node0.isTypeOf());
114:       assertFalse(node0.isInc());
115:       assertFalse(node0.isString());
116:       assertEquals(63, node0.getCharno());
117:       assertFalse(node0.isIn());
118:       assertFalse(node0.isSetterDef());
119:       assertFalse(node0.isAnd());
120:       assertFalse(node0.isThrow());
121:       assertFalse(node0.isCast());
122:       assertFalse(node0.isFunction());
123:       assertFalse(node0.isContinue());
124:       assertFalse(node0.isFalse());
125:       assertNotNull(node0);
126:       
127:       boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
128:       assertFalse(boolean0);
129:       
130:       int int0 = node0.getChangeTime();
131:       assertEquals(0, int0);
132:       assertEquals(48, Node.DIRECTIVES);
133:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
134:       assertEquals(39, Node.EMPTY_BLOCK);
135:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
136:       assertEquals(55, Node.INFERRED_FUNCTION);
137:       assertEquals(57, Node.REFLECTED_OBJECT);
138:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
139:       assertEquals(50, Node.FREE_CALL);
140:       assertEquals(52, Node.LENGTH);
141:       assertEquals(8, Node.FLAG_NO_THROWS);
142:       assertEquals(54, Node.SLASH_V);
143:       assertEquals(53, Node.INPUT_ID);
144:       assertEquals(15, Node.NO_SIDE_EFFECTS);
145:       assertEquals(43, Node.IS_CONSTANT_NAME);
146:       assertEquals(57, Node.LAST_PROP);
147:       assertEquals(40, Node.ORIGINALNAME_PROP);
148:       assertEquals(30, Node.VAR_ARGS_NAME);
149:       assertEquals(2, Node.POST_FLAG);
150:       assertEquals(37, Node.OPT_ARG_NAME);
151:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
152:       assertEquals(47, Node.IS_DISPATCHER);
153:       assertEquals(32, Node.INCRDECR_PROP);
154:       assertEquals(46, Node.IS_NAMESPACE);
155:       assertEquals(56, Node.CHANGE_TIME);
156:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
157:       assertEquals(1, Node.DECR_FLAG);
158:       assertEquals(29, Node.JSDOC_INFO_PROP);
159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
160:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
161:       assertEquals(36, Node.QUOTED_PROP);
162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
163:       assertEquals(49, Node.DIRECT_EVAL);
164:       assertEquals(12, Node.COLUMN_BITS);
165:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
166:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
167:       assertEquals(4095, Node.COLUMN_MASK);
168:       assertFalse(node0.isTrue());
169:       assertFalse(node0.isDefaultCase());
170:       assertFalse(node0.isTry());
171:       assertFalse(node0.isVoid());
172:       assertFalse(node0.isIf());
173:       assertFalse(node0.isNE());
174:       assertFalse(node0.isEmpty());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isGetterDef());
177:       assertEquals(63, node0.getLineno());
178:       assertFalse(node0.isDelProp());
179:       assertFalse(node0.isFor());
180:       assertFalse(node0.isCall());
181:       assertFalse(node0.isCatch());
182:       assertFalse(node0.isRegExp());
183:       assertFalse(node0.isHook());
184:       assertFalse(node0.isBlock());
185:       assertFalse(node0.isVar());
186:       assertFalse(node0.isAdd());
187:       assertFalse(node0.isSwitch());
188:       assertFalse(node0.isNew());
189:       assertFalse(node0.isName());
190:       assertFalse(node0.isCase());
191:       assertFalse(node0.isStringKey());
192:       assertFalse(node0.isNull());
193:       assertEquals(258111, node0.getSourcePosition());
194:       assertFalse(node0.isAssignAdd());
195:       assertFalse(node0.isLabel());
196:       assertFalse(node0.isParamList());
197:       assertFalse(node0.isDo());
198:       assertEquals(0, node0.getChildCount());
199:       assertEquals(63, node0.getType());
200:       assertFalse(node0.isExprResult());
201:       assertFalse(node0.hasOneChild());
202:       assertFalse(node0.isLabelName());
203:       assertFalse(node0.isScript());
204:       assertTrue(node0.isArrayLit());
205:       assertFalse(node0.isNumber());
206:       assertFalse(node0.isNot());
207:       assertFalse(node0.isObjectLit());
208:       assertFalse(node0.isOr());
209:       assertFalse(node0.isReturn());
210:       assertFalse(node0.isGetProp());
211:       assertFalse(node0.isInstanceOf());
212:       assertFalse(node0.isWith());
213:       assertFalse(node0.isWhile());
214:       assertFalse(node0.isBreak());
215:       assertFalse(node0.hasChildren());
216:       assertFalse(node0.isGetElem());
217:       assertFalse(node0.isThis());
218:       assertFalse(node0.isComma());
219:       assertFalse(node0.hasMoreThanOneChild());
220:       assertFalse(node0.isDec());
221:       assertFalse(node0.isAssign());
222:       assertFalse(node0.isTypeOf());
223:       assertFalse(node0.isInc());
224:       assertFalse(node0.isString());
225:       assertEquals(63, node0.getCharno());
226:       assertFalse(node0.isIn());
227:       assertFalse(node0.isSetterDef());
228:       assertFalse(node0.isAnd());
229:       assertFalse(node0.isThrow());
230:       assertFalse(node0.isCast());
231:       assertFalse(node0.isFunction());
232:       assertFalse(node0.isContinue());
233:       assertFalse(node0.isFalse());
234:       
235:       boolean boolean1 = node0.isVarArgs();
236:       assertFalse(boolean1);
237:       assertEquals(48, Node.DIRECTIVES);
238:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
239:       assertEquals(39, Node.EMPTY_BLOCK);
240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
241:       assertEquals(55, Node.INFERRED_FUNCTION);
242:       assertEquals(57, Node.REFLECTED_OBJECT);
243:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
244:       assertEquals(50, Node.FREE_CALL);
245:       assertEquals(52, Node.LENGTH);
246:       assertEquals(8, Node.FLAG_NO_THROWS);
247:       assertEquals(54, Node.SLASH_V);
248:       assertEquals(53, Node.INPUT_ID);
249:       assertEquals(15, Node.NO_SIDE_EFFECTS);
250:       assertEquals(43, Node.IS_CONSTANT_NAME);
251:       assertEquals(57, Node.LAST_PROP);
252:       assertEquals(40, Node.ORIGINALNAME_PROP);
253:       assertEquals(30, Node.VAR_ARGS_NAME);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(37, Node.OPT_ARG_NAME);
256:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
257:       assertEquals(47, Node.IS_DISPATCHER);
258:       assertEquals(32, Node.INCRDECR_PROP);
259:       assertEquals(46, Node.IS_NAMESPACE);
260:       assertEquals(56, Node.CHANGE_TIME);
261:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
262:       assertEquals(1, Node.DECR_FLAG);
263:       assertEquals(29, Node.JSDOC_INFO_PROP);
264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
265:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
266:       assertEquals(36, Node.QUOTED_PROP);
267:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
268:       assertEquals(49, Node.DIRECT_EVAL);
269:       assertEquals(12, Node.COLUMN_BITS);
270:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
271:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
272:       assertEquals(4095, Node.COLUMN_MASK);
273:       assertTrue(boolean1 == boolean0);
274:       assertFalse(node0.isTrue());
275:       assertFalse(node0.isDefaultCase());
276:       assertFalse(node0.isTry());
277:       assertFalse(node0.isVoid());
278:       assertFalse(node0.isIf());
279:       assertFalse(node0.isNE());
280:       assertFalse(node0.isEmpty());
281:       assertFalse(node0.isDebugger());
282:       assertFalse(node0.isGetterDef());
283:       assertEquals(63, node0.getLineno());
284:       assertFalse(node0.isDelProp());
285:       assertFalse(node0.isFor());
286:       assertFalse(node0.isCall());
287:       assertFalse(node0.isCatch());
288:       assertFalse(node0.isRegExp());
289:       assertFalse(node0.isHook());
290:       assertFalse(node0.isBlock());
291:       assertFalse(node0.isVar());
292:       assertFalse(node0.isAdd());
293:       assertFalse(node0.isSwitch());
294:       assertFalse(node0.isNew());
295:       assertFalse(node0.isName());
296:       assertFalse(node0.isCase());
297:       assertFalse(node0.isStringKey());
298:       assertFalse(node0.isNull());
299:       assertEquals(258111, node0.getSourcePosition());
300:       assertFalse(node0.isAssignAdd());
301:       assertFalse(node0.isLabel());
302:       assertFalse(node0.isParamList());
303:       assertFalse(node0.isDo());
304:       assertEquals(0, node0.getChildCount());
305:       assertEquals(63, node0.getType());
306:       assertFalse(node0.isExprResult());
307:       assertFalse(node0.hasOneChild());
308:       assertFalse(node0.isLabelName());
309:       assertFalse(node0.isScript());
310:       assertTrue(node0.isArrayLit());
311:       assertFalse(node0.isNumber());
312:       assertFalse(node0.isNot());
313:       assertFalse(node0.isObjectLit());
314:       assertFalse(node0.isOr());
315:       assertFalse(node0.isReturn());
316:       assertFalse(node0.isGetProp());
317:       assertFalse(node0.isInstanceOf());
318:       assertFalse(node0.isWith());
319:       assertFalse(node0.isWhile());
320:       assertFalse(node0.isBreak());
321:       assertFalse(node0.hasChildren());
322:       assertFalse(node0.isGetElem());
323:       assertFalse(node0.isThis());
324:       assertFalse(node0.isComma());
325:       assertFalse(node0.hasMoreThanOneChild());
326:       assertFalse(node0.isDec());
327:       assertFalse(node0.isAssign());
328:       assertFalse(node0.isTypeOf());
329:       assertFalse(node0.isInc());
330:       assertFalse(node0.isString());
331:       assertEquals(63, node0.getCharno());
332:       assertFalse(node0.isIn());
333:       assertFalse(node0.isSetterDef());
334:       assertFalse(node0.isAnd());
335:       assertFalse(node0.isThrow());
336:       assertFalse(node0.isCast());
337:       assertFalse(node0.isFunction());
338:       assertFalse(node0.isContinue());
339:       assertFalse(node0.isFalse());
340:       
341:       Iterable<Node> iterable0 = node0.children();
342:       assertEquals(48, Node.DIRECTIVES);
343:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
344:       assertEquals(39, Node.EMPTY_BLOCK);
345:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
346:       assertEquals(55, Node.INFERRED_FUNCTION);
347:       assertEquals(57, Node.REFLECTED_OBJECT);
348:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
349:       assertEquals(50, Node.FREE_CALL);
350:       assertEquals(52, Node.LENGTH);
351:       assertEquals(8, Node.FLAG_NO_THROWS);
352:       assertEquals(54, Node.SLASH_V);
353:       assertEquals(53, Node.INPUT_ID);
354:       assertEquals(15, Node.NO_SIDE_EFFECTS);
355:       assertEquals(43, Node.IS_CONSTANT_NAME);
356:       assertEquals(57, Node.LAST_PROP);
357:       assertEquals(40, Node.ORIGINALNAME_PROP);
358:       assertEquals(30, Node.VAR_ARGS_NAME);
359:       assertEquals(2, Node.POST_FLAG);
360:       assertEquals(37, Node.OPT_ARG_NAME);
361:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
362:       assertEquals(47, Node.IS_DISPATCHER);
363:       assertEquals(32, Node.INCRDECR_PROP);
364:       assertEquals(46, Node.IS_NAMESPACE);
365:       assertEquals(56, Node.CHANGE_TIME);
366:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
367:       assertEquals(1, Node.DECR_FLAG);
368:       assertEquals(29, Node.JSDOC_INFO_PROP);
369:       assertEquals(51, Node.STATIC_SOURCE_FILE);
370:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
371:       assertEquals(36, Node.QUOTED_PROP);
372:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
373:       assertEquals(49, Node.DIRECT_EVAL);
374:       assertEquals(12, Node.COLUMN_BITS);
375:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
376:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
377:       assertEquals(4095, Node.COLUMN_MASK);
378:       assertFalse(iterable0.contains(node0));
379:       assertFalse(node0.isTrue());
380:       assertFalse(node0.isDefaultCase());
381:       assertFalse(node0.isTry());
382:       assertFalse(node0.isVoid());
383:       assertFalse(node0.isIf());
384:       assertFalse(node0.isNE());
385:       assertFalse(node0.isEmpty());
386:       assertFalse(node0.isDebugger());
387:       assertFalse(node0.isGetterDef());
388:       assertEquals(63, node0.getLineno());
389:       assertFalse(node0.isDelProp());
390:       assertFalse(node0.isFor());
391:       assertFalse(node0.isCall());
392:       assertFalse(node0.isCatch());
393:       assertFalse(node0.isRegExp());
394:       assertFalse(node0.isHook());
395:       assertFalse(node0.isBlock());
396:       assertFalse(node0.isVar());
397:       assertFalse(node0.isAdd());
398:       assertFalse(node0.isSwitch());
399:       assertFalse(node0.isNew());
400:       assertFalse(node0.isName());
401:       assertFalse(node0.isCase());
402:       assertFalse(node0.isStringKey());
403:       assertFalse(node0.isNull());
404:       assertEquals(258111, node0.getSourcePosition());
405:       assertFalse(node0.isAssignAdd());
406:       assertFalse(node0.isLabel());
407:       assertFalse(node0.isParamList());
408:       assertFalse(node0.isDo());
409:       assertEquals(0, node0.getChildCount());
410:       assertEquals(63, node0.getType());
411:       assertFalse(node0.isExprResult());
412:       assertFalse(node0.hasOneChild());
413:       assertFalse(node0.isLabelName());
414:       assertFalse(node0.isScript());
415:       assertTrue(node0.isArrayLit());
416:       assertFalse(node0.isNumber());
417:       assertFalse(node0.isNot());
418:       assertFalse(node0.isObjectLit());
419:       assertFalse(node0.isOr());
420:       assertFalse(node0.isReturn());
421:       assertFalse(node0.isGetProp());
422:       assertFalse(node0.isInstanceOf());
423:       assertFalse(node0.isWith());
424:       assertFalse(node0.isWhile());
425:       assertFalse(node0.isBreak());
426:       assertFalse(node0.hasChildren());
427:       assertFalse(node0.isGetElem());
428:       assertFalse(node0.isThis());
429:       assertFalse(node0.isComma());
430:       assertFalse(node0.hasMoreThanOneChild());
431:       assertFalse(node0.isDec());
432:       assertFalse(node0.isAssign());
433:       assertFalse(node0.isTypeOf());
434:       assertFalse(node0.isInc());
435:       assertFalse(node0.isString());
436:       assertEquals(63, node0.getCharno());
437:       assertFalse(node0.isIn());
438:       assertFalse(node0.isSetterDef());
439:       assertFalse(node0.isAnd());
440:       assertFalse(node0.isThrow());
441:       assertFalse(node0.isCast());
442:       assertFalse(node0.isFunction());
443:       assertFalse(node0.isContinue());
444:       assertFalse(node0.isFalse());
445:       assertNotNull(iterable0);
446:       
447:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
448:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
449:       assertEquals(0, node_SideEffectFlags0.valueOf());
450:       assertNotNull(node_SideEffectFlags0);
451:       
452:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
453:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
454:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
455:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
456:       assertEquals(31, node_SideEffectFlags0.valueOf());
457:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
458:       assertEquals(31, node_SideEffectFlags1.valueOf());
459:       assertNotNull(node_SideEffectFlags1);
460:       
461:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
462:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
463:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
464:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
465:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
466:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
467:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
468:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
469:       assertEquals(31, node_SideEffectFlags0.valueOf());
470:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
471:       assertEquals(31, node_SideEffectFlags1.valueOf());
472:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
473:       assertEquals(31, node_SideEffectFlags2.valueOf());
474:       assertNotNull(node_SideEffectFlags2);
475:       
476:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
477:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
478:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
479:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
480:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
481:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
482:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
483:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
484:       assertEquals(27, node_SideEffectFlags0.valueOf());
485:       assertEquals(27, node_SideEffectFlags3.valueOf());
486:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
487:       assertNotNull(node_SideEffectFlags3);
488:       
489:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
490:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
491:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
492:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
493:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
494:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
495:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
496:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
497:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
498:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
499:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
500:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
501:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
502:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
503:       assertEquals(0, node_SideEffectFlags0.valueOf());
504:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
505:       assertEquals(0, node_SideEffectFlags3.valueOf());
506:       assertEquals(0, node_SideEffectFlags4.valueOf());
507:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
508:       assertNotNull(node_SideEffectFlags4);
509:       
510:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
511:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
512:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
513:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
514:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
515:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
516:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
517:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
518:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
519:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
520:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
521:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
522:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
523:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
524:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
525:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
526:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
527:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
528:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
529:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
530:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
531:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
532:       assertEquals(31, node_SideEffectFlags0.valueOf());
533:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
534:       assertEquals(31, node_SideEffectFlags3.valueOf());
535:       assertEquals(31, node_SideEffectFlags4.valueOf());
536:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
537:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
538:       assertEquals(31, node_SideEffectFlags5.valueOf());
539:       assertNotNull(node_SideEffectFlags5);
540:       
541:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags1.setAllFlags();
542:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
543:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
544:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
545:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
546:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
547:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
548:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
549:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
550:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
551:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
552:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
553:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
554:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
555:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
556:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
557:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
558:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
559:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
560:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
561:       assertEquals(0, node_SideEffectFlags0.valueOf());
562:       assertEquals(0, node_SideEffectFlags1.valueOf());
563:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
564:       assertEquals(0, node_SideEffectFlags6.valueOf());
565:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
566:       assertNotNull(node_SideEffectFlags6);
567:       
568:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.setThrows();
569:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
570:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
571:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
572:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
573:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
574:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
575:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
576:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
577:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
578:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
579:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
580:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
581:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
582:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
583:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
584:       assertEquals(0, node_SideEffectFlags0.valueOf());
585:       assertEquals(0, node_SideEffectFlags7.valueOf());
586:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
587:       assertNotNull(node_SideEffectFlags7);
588:       
589:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags2.setAllFlags();
590:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
591:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
592:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
593:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
594:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
595:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
596:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
597:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
598:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
599:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
600:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
601:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
602:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
603:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
604:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
605:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
606:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
607:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
608:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
609:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
610:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
611:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
612:       assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
613:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
614:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
615:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
616:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
617:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
618:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
619:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
620:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
621:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
622:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
623:       assertEquals(0, node_SideEffectFlags0.valueOf());
624:       assertEquals(0, node_SideEffectFlags1.valueOf());
625:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
626:       assertEquals(0, node_SideEffectFlags2.valueOf());
627:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
628:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
629:       assertEquals(0, node_SideEffectFlags8.valueOf());
630:       assertNotNull(node_SideEffectFlags8);
631:       
632:       node0.setIsSyntheticBlock(false);
633:       assertEquals(48, Node.DIRECTIVES);
634:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
635:       assertEquals(39, Node.EMPTY_BLOCK);
636:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
637:       assertEquals(55, Node.INFERRED_FUNCTION);
638:       assertEquals(57, Node.REFLECTED_OBJECT);
639:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
640:       assertEquals(50, Node.FREE_CALL);
641:       assertEquals(52, Node.LENGTH);
642:       assertEquals(8, Node.FLAG_NO_THROWS);
643:       assertEquals(54, Node.SLASH_V);
644:       assertEquals(53, Node.INPUT_ID);
645:       assertEquals(15, Node.NO_SIDE_EFFECTS);
646:       assertEquals(43, Node.IS_CONSTANT_NAME);
647:       assertEquals(57, Node.LAST_PROP);
648:       assertEquals(40, Node.ORIGINALNAME_PROP);
649:       assertEquals(30, Node.VAR_ARGS_NAME);
650:       assertEquals(2, Node.POST_FLAG);
651:       assertEquals(37, Node.OPT_ARG_NAME);
652:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
653:       assertEquals(47, Node.IS_DISPATCHER);
654:       assertEquals(32, Node.INCRDECR_PROP);
655:       assertEquals(46, Node.IS_NAMESPACE);
656:       assertEquals(56, Node.CHANGE_TIME);
657:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
658:       assertEquals(1, Node.DECR_FLAG);
659:       assertEquals(29, Node.JSDOC_INFO_PROP);
660:       assertEquals(51, Node.STATIC_SOURCE_FILE);
661:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
662:       assertEquals(36, Node.QUOTED_PROP);
663:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
664:       assertEquals(49, Node.DIRECT_EVAL);
665:       assertEquals(12, Node.COLUMN_BITS);
666:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
667:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
668:       assertEquals(4095, Node.COLUMN_MASK);
669:       assertFalse(node0.isTrue());
670:       assertFalse(node0.isDefaultCase());
671:       assertFalse(node0.isTry());
672:       assertFalse(node0.isVoid());
673:       assertFalse(node0.isIf());
674:       assertFalse(node0.isNE());
675:       assertFalse(node0.isEmpty());
676:       assertFalse(node0.isDebugger());
677:       assertFalse(node0.isGetterDef());
678:       assertEquals(63, node0.getLineno());
679:       assertFalse(node0.isDelProp());
680:       assertFalse(node0.isFor());
681:       assertFalse(node0.isCall());
682:       assertFalse(node0.isCatch());
683:       assertFalse(node0.isRegExp());
684:       assertFalse(node0.isHook());
685:       assertFalse(node0.isBlock());
686:       assertFalse(node0.isVar());
687:       assertFalse(node0.isAdd());
688:       assertFalse(node0.isSwitch());
689:       assertFalse(node0.isNew());
690:       assertFalse(node0.isName());
691:       assertFalse(node0.isCase());
692:       assertFalse(node0.isStringKey());
693:       assertFalse(node0.isNull());
694:       assertEquals(258111, node0.getSourcePosition());
695:       assertFalse(node0.isAssignAdd());
696:       assertFalse(node0.isLabel());
697:       assertFalse(node0.isParamList());
698:       assertFalse(node0.isDo());
699:       assertEquals(0, node0.getChildCount());
700:       assertEquals(63, node0.getType());
701:       assertFalse(node0.isExprResult());
702:       assertFalse(node0.hasOneChild());
703:       assertFalse(node0.isLabelName());
704:       assertFalse(node0.isScript());
705:       assertTrue(node0.isArrayLit());
706:       assertFalse(node0.isNumber());
707:       assertFalse(node0.isNot());
708:       assertFalse(node0.isObjectLit());
709:       assertFalse(node0.isOr());
710:       assertFalse(node0.isReturn());
711:       assertFalse(node0.isGetProp());
712:       assertFalse(node0.isInstanceOf());
713:       assertFalse(node0.isWith());
714:       assertFalse(node0.isWhile());
715:       assertFalse(node0.isBreak());
716:       assertFalse(node0.hasChildren());
717:       assertFalse(node0.isGetElem());
718:       assertFalse(node0.isThis());
719:       assertFalse(node0.isComma());
720:       assertFalse(node0.hasMoreThanOneChild());
721:       assertFalse(node0.isDec());
722:       assertFalse(node0.isAssign());
723:       assertFalse(node0.isTypeOf());
724:       assertFalse(node0.isInc());
725:       assertFalse(node0.isString());
726:       assertEquals(63, node0.getCharno());
727:       assertFalse(node0.isIn());
728:       assertFalse(node0.isSetterDef());
729:       assertFalse(node0.isAnd());
730:       assertFalse(node0.isThrow());
731:       assertFalse(node0.isCast());
732:       assertFalse(node0.isFunction());
733:       assertFalse(node0.isContinue());
734:       assertFalse(node0.isFalse());
735:   }
736: }
RegularFileObject[/tmp/EvoSuite_103_1629223343845/com/google/javascript/rhino/Node_103_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:23 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_103_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_103_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_103_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.JSTypeExpression",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.JSDocInfo$Marker",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.FluentIterable",
352:       "com.google.common.collect.Iterables$2",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 18:02:23.934 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(63, 63, 63);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertEquals(63, node0.getLineno());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(258111, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertEquals(63, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertTrue(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals(63, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertNotNull(node0);

boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
assertFalse(boolean0);

int int0 = node0.getChangeTime();
assertEquals(0, int0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertEquals(63, node0.getLineno());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(258111, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertEquals(63, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertTrue(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals(63, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());

boolean boolean1 = node0.isVarArgs();
assertFalse(boolean1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertEquals(63, node0.getLineno());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(258111, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertEquals(63, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertTrue(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals(63, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());

Iterable<Node> iterable0 = node0.children();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertEquals(63, node0.getLineno());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(258111, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertEquals(63, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertTrue(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals(63, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertNotNull(iterable0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(27, node_SideEffectFlags0.valueOf());
assertEquals(27, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertEquals(31, node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags5.valueOf());
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags1.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags7.valueOf());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertNotNull(node_SideEffectFlags7);

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags2.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags8.valueOf());
assertNotNull(node_SideEffectFlags8);

node0.setIsSyntheticBlock(false);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertEquals(63, node0.getLineno());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isName());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(258111, node0.getSourcePosition());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertEquals(63, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertTrue(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertEquals(63, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());


[MASTER] 18:02:25.897 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_110_1629223345712/com/google/javascript/rhino/Node_110_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_110_1629223345712/com/google/javascript/rhino/Node_110_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:25.897 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:25.897 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:25.897 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 407
[MASTER] 18:02:25.898 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_110_1629223345712/com/google/javascript/rhino/Node_110_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:25 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import java.util.List;
15: import java.util.Stack;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.testdata.EvoSuiteFile;
19: import org.evosuite.runtime.testdata.FileSystemHandling;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Node_110_tmp__ESTest extends Node_110_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
28:       assertNotNull(simpleErrorReporter0);
29:       
30:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
31:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
32:       assertNotNull(jSTypeRegistry0);
33:       
34:       Stack<JSType> stack0 = new Stack<JSType>();
35:       assertEquals(0, stack0.size());
36:       assertTrue(stack0.empty());
37:       assertTrue(stack0.isEmpty());
38:       assertEquals(10, stack0.capacity());
39:       assertEquals("[]", stack0.toString());
40:       assertNotNull(stack0);
41:       
42:       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
43:       assertEquals(8, Node.FLAG_NO_THROWS);
44:       assertEquals(39, Node.EMPTY_BLOCK);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
47:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
48:       assertEquals(4095, Node.COLUMN_MASK);
49:       assertEquals(55, Node.INFERRED_FUNCTION);
50:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
51:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
52:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
53:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
54:       assertEquals(36, Node.QUOTED_PROP);
55:       assertEquals(52, Node.LENGTH);
56:       assertEquals(15, Node.NO_SIDE_EFFECTS);
57:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
58:       assertEquals(53, Node.INPUT_ID);
59:       assertEquals(49, Node.DIRECT_EVAL);
60:       assertEquals(57, Node.REFLECTED_OBJECT);
61:       assertEquals(56, Node.CHANGE_TIME);
62:       assertEquals(37, Node.OPT_ARG_NAME);
63:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
64:       assertEquals(2, Node.POST_FLAG);
65:       assertEquals(29, Node.JSDOC_INFO_PROP);
66:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
67:       assertEquals(30, Node.VAR_ARGS_NAME);
68:       assertEquals(1, Node.DECR_FLAG);
69:       assertEquals(32, Node.INCRDECR_PROP);
70:       assertEquals(57, Node.LAST_PROP);
71:       assertEquals(47, Node.IS_DISPATCHER);
72:       assertEquals(12, Node.COLUMN_BITS);
73:       assertEquals(54, Node.SLASH_V);
74:       assertEquals(40, Node.ORIGINALNAME_PROP);
75:       assertEquals(51, Node.STATIC_SOURCE_FILE);
76:       assertEquals(50, Node.FREE_CALL);
77:       assertEquals(46, Node.IS_NAMESPACE);
78:       assertEquals(43, Node.IS_CONSTANT_NAME);
79:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
80:       assertEquals(0, stack0.size());
81:       assertTrue(stack0.empty());
82:       assertTrue(stack0.isEmpty());
83:       assertEquals(10, stack0.capacity());
84:       assertEquals("[]", stack0.toString());
85:       assertFalse(node0.isTry());
86:       assertFalse(node0.isDebugger());
87:       assertFalse(node0.isArrayLit());
88:       assertFalse(node0.isFunction());
89:       assertFalse(node0.isRegExp());
90:       assertFalse(node0.isFor());
91:       assertFalse(node0.isEmpty());
92:       assertFalse(node0.isDefaultCase());
93:       assertEquals(0, node0.getChildCount());
94:       assertFalse(node0.isGetterDef());
95:       assertFalse(node0.isSwitch());
96:       assertFalse(node0.isStringKey());
97:       assertFalse(node0.isAdd());
98:       assertFalse(node0.isNew());
99:       assertFalse(node0.isCall());
100:       assertFalse(node0.isString());
101:       assertFalse(node0.isDo());
102:       assertFalse(node0.isVar());
103:       assertFalse(node0.isWhile());
104:       assertFalse(node0.isReturn());
105:       assertFalse(node0.isOr());
106:       assertFalse(node0.isComma());
107:       assertEquals(83, node0.getType());
108:       assertFalse(node0.isTypeOf());
109:       assertFalse(node0.isName());
110:       assertFalse(node0.isDelProp());
111:       assertFalse(node0.isGetElem());
112:       assertFalse(node0.isBreak());
113:       assertFalse(node0.isNull());
114:       assertFalse(node0.isTrue());
115:       assertFalse(node0.isVoid());
116:       assertFalse(node0.hasOneChild());
117:       assertFalse(node0.isCast());
118:       assertFalse(node0.isScript());
119:       assertFalse(node0.isExprResult());
120:       assertFalse(node0.isWith());
121:       assertFalse(node0.isAssign());
122:       assertFalse(node0.isDec());
123:       assertFalse(node0.hasChildren());
124:       assertFalse(node0.isAssignAdd());
125:       assertFalse(node0.isGetProp());
126:       assertFalse(node0.isLabel());
127:       assertFalse(node0.isObjectLit());
128:       assertFalse(node0.isNumber());
129:       assertTrue(node0.isParamList());
130:       assertFalse(node0.isContinue());
131:       assertFalse(node0.isNot());
132:       assertFalse(node0.isLabelName());
133:       assertEquals((-1), node0.getSourcePosition());
134:       assertFalse(node0.isAnd());
135:       assertFalse(node0.isHook());
136:       assertFalse(node0.isBlock());
137:       assertEquals((-1), node0.getCharno());
138:       assertFalse(node0.isInc());
139:       assertFalse(node0.isFalse());
140:       assertFalse(node0.isCase());
141:       assertFalse(node0.isThis());
142:       assertFalse(node0.isThrow());
143:       assertEquals((-1), node0.getLineno());
144:       assertFalse(node0.hasMoreThanOneChild());
145:       assertFalse(node0.isSetterDef());
146:       assertFalse(node0.isCatch());
147:       assertFalse(node0.isInstanceOf());
148:       assertFalse(node0.isIn());
149:       assertFalse(node0.isNE());
150:       assertFalse(node0.isIf());
151:       assertNotNull(node0);
152:       
153:       boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Element");
154:       assertFalse(boolean0);
155:       
156:       Node node1 = Node.newNumber((double) 32);
157:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(36, Node.QUOTED_PROP);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(56, Node.CHANGE_TIME);
162:       assertEquals(37, Node.OPT_ARG_NAME);
163:       assertEquals(32, Node.INCRDECR_PROP);
164:       assertEquals(46, Node.IS_NAMESPACE);
165:       assertEquals(4095, Node.COLUMN_MASK);
166:       assertEquals(12, Node.COLUMN_BITS);
167:       assertEquals(51, Node.STATIC_SOURCE_FILE);
168:       assertEquals(50, Node.FREE_CALL);
169:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
170:       assertEquals(1, Node.DECR_FLAG);
171:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
172:       assertEquals(52, Node.LENGTH);
173:       assertEquals(54, Node.SLASH_V);
174:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
175:       assertEquals(57, Node.REFLECTED_OBJECT);
176:       assertEquals(30, Node.VAR_ARGS_NAME);
177:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
178:       assertEquals(49, Node.DIRECT_EVAL);
179:       assertEquals(40, Node.ORIGINALNAME_PROP);
180:       assertEquals(48, Node.DIRECTIVES);
181:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
182:       assertEquals(8, Node.FLAG_NO_THROWS);
183:       assertEquals(2, Node.POST_FLAG);
184:       assertEquals(47, Node.IS_DISPATCHER);
185:       assertEquals(29, Node.JSDOC_INFO_PROP);
186:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
187:       assertEquals(57, Node.LAST_PROP);
188:       assertEquals(55, Node.INFERRED_FUNCTION);
189:       assertEquals(39, Node.EMPTY_BLOCK);
190:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
191:       assertEquals(15, Node.NO_SIDE_EFFECTS);
192:       assertEquals(53, Node.INPUT_ID);
193:       assertFalse(node1.equals((Object)node0));
194:       assertFalse(node1.isIn());
195:       assertFalse(node1.isSwitch());
196:       assertFalse(node1.isNE());
197:       assertFalse(node1.isIf());
198:       assertFalse(node1.isDelProp());
199:       assertFalse(node1.isFalse());
200:       assertFalse(node1.isThrow());
201:       assertFalse(node1.isTrue());
202:       assertFalse(node1.isDefaultCase());
203:       assertFalse(node1.isEmpty());
204:       assertFalse(node1.isInc());
205:       assertFalse(node1.isCatch());
206:       assertFalse(node1.isInstanceOf());
207:       assertEquals(0, node1.getChildCount());
208:       assertFalse(node1.isThis());
209:       assertFalse(node1.isParamList());
210:       assertFalse(node1.isRegExp());
211:       assertFalse(node1.isWith());
212:       assertFalse(node1.hasOneChild());
213:       assertFalse(node1.isArrayLit());
214:       assertFalse(node1.isFor());
215:       assertFalse(node1.isStringKey());
216:       assertEquals((-1), node1.getCharno());
217:       assertFalse(node1.isHook());
218:       assertFalse(node1.isBlock());
219:       assertFalse(node1.isScript());
220:       assertFalse(node1.isGetterDef());
221:       assertFalse(node1.isTry());
222:       assertFalse(node1.isCase());
223:       assertFalse(node1.hasMoreThanOneChild());
224:       assertFalse(node1.isContinue());
225:       assertEquals(39, node1.getType());
226:       assertFalse(node1.isAssignAdd());
227:       assertFalse(node1.isLabel());
228:       assertFalse(node1.isOr());
229:       assertFalse(node1.isWhile());
230:       assertFalse(node1.isReturn());
231:       assertFalse(node1.isDec());
232:       assertFalse(node1.isTypeOf());
233:       assertFalse(node1.isLabelName());
234:       assertEquals((-1), node1.getLineno());
235:       assertFalse(node1.isGetElem());
236:       assertFalse(node1.isCast());
237:       assertFalse(node1.isVar());
238:       assertFalse(node1.isName());
239:       assertFalse(node1.isNull());
240:       assertFalse(node1.isDo());
241:       assertFalse(node1.isAdd());
242:       assertFalse(node1.isNew());
243:       assertFalse(node1.isSetterDef());
244:       assertFalse(node1.isAnd());
245:       assertFalse(node1.isObjectLit());
246:       assertFalse(node1.isNot());
247:       assertFalse(node1.isComma());
248:       assertFalse(node1.isVoid());
249:       assertFalse(node1.isFunction());
250:       assertFalse(node1.isBreak());
251:       assertFalse(node1.isCall());
252:       assertFalse(node1.isExprResult());
253:       assertFalse(node1.isAssign());
254:       assertFalse(node1.hasChildren());
255:       assertEquals((-1), node1.getSourcePosition());
256:       assertFalse(node1.isDebugger());
257:       assertFalse(node1.isString());
258:       assertTrue(node1.isNumber());
259:       assertFalse(node1.isGetProp());
260:       assertNotNull(node1);
261:       
262:       boolean boolean1 = node1.isVarArgs();
263:       assertFalse(boolean1);
264:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
265:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
266:       assertEquals(36, Node.QUOTED_PROP);
267:       assertEquals(43, Node.IS_CONSTANT_NAME);
268:       assertEquals(56, Node.CHANGE_TIME);
269:       assertEquals(37, Node.OPT_ARG_NAME);
270:       assertEquals(32, Node.INCRDECR_PROP);
271:       assertEquals(46, Node.IS_NAMESPACE);
272:       assertEquals(4095, Node.COLUMN_MASK);
273:       assertEquals(12, Node.COLUMN_BITS);
274:       assertEquals(51, Node.STATIC_SOURCE_FILE);
275:       assertEquals(50, Node.FREE_CALL);
276:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
277:       assertEquals(1, Node.DECR_FLAG);
278:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
279:       assertEquals(52, Node.LENGTH);
280:       assertEquals(54, Node.SLASH_V);
281:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
282:       assertEquals(57, Node.REFLECTED_OBJECT);
283:       assertEquals(30, Node.VAR_ARGS_NAME);
284:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
285:       assertEquals(49, Node.DIRECT_EVAL);
286:       assertEquals(40, Node.ORIGINALNAME_PROP);
287:       assertEquals(48, Node.DIRECTIVES);
288:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
289:       assertEquals(8, Node.FLAG_NO_THROWS);
290:       assertEquals(2, Node.POST_FLAG);
291:       assertEquals(47, Node.IS_DISPATCHER);
292:       assertEquals(29, Node.JSDOC_INFO_PROP);
293:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
294:       assertEquals(57, Node.LAST_PROP);
295:       assertEquals(55, Node.INFERRED_FUNCTION);
296:       assertEquals(39, Node.EMPTY_BLOCK);
297:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
298:       assertEquals(15, Node.NO_SIDE_EFFECTS);
299:       assertEquals(53, Node.INPUT_ID);
300:       assertFalse(node1.equals((Object)node0));
301:       assertTrue(boolean1 == boolean0);
302:       assertFalse(node1.isIn());
303:       assertFalse(node1.isSwitch());
304:       assertFalse(node1.isNE());
305:       assertFalse(node1.isIf());
306:       assertFalse(node1.isDelProp());
307:       assertFalse(node1.isFalse());
308:       assertFalse(node1.isThrow());
309:       assertFalse(node1.isTrue());
310:       assertFalse(node1.isDefaultCase());
311:       assertFalse(node1.isEmpty());
312:       assertFalse(node1.isInc());
313:       assertFalse(node1.isCatch());
314:       assertFalse(node1.isInstanceOf());
315:       assertEquals(0, node1.getChildCount());
316:       assertFalse(node1.isThis());
317:       assertFalse(node1.isParamList());
318:       assertFalse(node1.isRegExp());
319:       assertFalse(node1.isWith());
320:       assertFalse(node1.hasOneChild());
321:       assertFalse(node1.isArrayLit());
322:       assertFalse(node1.isFor());
323:       assertFalse(node1.isStringKey());
324:       assertEquals((-1), node1.getCharno());
325:       assertFalse(node1.isHook());
326:       assertFalse(node1.isBlock());
327:       assertFalse(node1.isScript());
328:       assertFalse(node1.isGetterDef());
329:       assertFalse(node1.isTry());
330:       assertFalse(node1.isCase());
331:       assertFalse(node1.hasMoreThanOneChild());
332:       assertFalse(node1.isContinue());
333:       assertEquals(39, node1.getType());
334:       assertFalse(node1.isAssignAdd());
335:       assertFalse(node1.isLabel());
336:       assertFalse(node1.isOr());
337:       assertFalse(node1.isWhile());
338:       assertFalse(node1.isReturn());
339:       assertFalse(node1.isDec());
340:       assertFalse(node1.isTypeOf());
341:       assertFalse(node1.isLabelName());
342:       assertEquals((-1), node1.getLineno());
343:       assertFalse(node1.isGetElem());
344:       assertFalse(node1.isCast());
345:       assertFalse(node1.isVar());
346:       assertFalse(node1.isName());
347:       assertFalse(node1.isNull());
348:       assertFalse(node1.isDo());
349:       assertFalse(node1.isAdd());
350:       assertFalse(node1.isNew());
351:       assertFalse(node1.isSetterDef());
352:       assertFalse(node1.isAnd());
353:       assertFalse(node1.isObjectLit());
354:       assertFalse(node1.isNot());
355:       assertFalse(node1.isComma());
356:       assertFalse(node1.isVoid());
357:       assertFalse(node1.isFunction());
358:       assertFalse(node1.isBreak());
359:       assertFalse(node1.isCall());
360:       assertFalse(node1.isExprResult());
361:       assertFalse(node1.isAssign());
362:       assertFalse(node1.hasChildren());
363:       assertEquals((-1), node1.getSourcePosition());
364:       assertFalse(node1.isDebugger());
365:       assertFalse(node1.isString());
366:       assertTrue(node1.isNumber());
367:       assertFalse(node1.isGetProp());
368:       
369:       Iterable<Node> iterable0 = node0.children();
370:       assertEquals(8, Node.FLAG_NO_THROWS);
371:       assertEquals(39, Node.EMPTY_BLOCK);
372:       assertEquals(48, Node.DIRECTIVES);
373:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
374:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
375:       assertEquals(4095, Node.COLUMN_MASK);
376:       assertEquals(55, Node.INFERRED_FUNCTION);
377:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
378:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
379:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
380:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
381:       assertEquals(36, Node.QUOTED_PROP);
382:       assertEquals(52, Node.LENGTH);
383:       assertEquals(15, Node.NO_SIDE_EFFECTS);
384:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
385:       assertEquals(53, Node.INPUT_ID);
386:       assertEquals(49, Node.DIRECT_EVAL);
387:       assertEquals(57, Node.REFLECTED_OBJECT);
388:       assertEquals(56, Node.CHANGE_TIME);
389:       assertEquals(37, Node.OPT_ARG_NAME);
390:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
391:       assertEquals(2, Node.POST_FLAG);
392:       assertEquals(29, Node.JSDOC_INFO_PROP);
393:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
394:       assertEquals(30, Node.VAR_ARGS_NAME);
395:       assertEquals(1, Node.DECR_FLAG);
396:       assertEquals(32, Node.INCRDECR_PROP);
397:       assertEquals(57, Node.LAST_PROP);
398:       assertEquals(47, Node.IS_DISPATCHER);
399:       assertEquals(12, Node.COLUMN_BITS);
400:       assertEquals(54, Node.SLASH_V);
401:       assertEquals(40, Node.ORIGINALNAME_PROP);
402:       assertEquals(51, Node.STATIC_SOURCE_FILE);
403:       assertEquals(50, Node.FREE_CALL);
404:       assertEquals(46, Node.IS_NAMESPACE);
405:       assertEquals(43, Node.IS_CONSTANT_NAME);
406:       assertFalse(node0.equals((Object)node1));
407:       assertFalse(iterable0.contains(node0));
408:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
409:       assertEquals(0, stack0.size());
410:       assertTrue(stack0.empty());
411:       assertTrue(stack0.isEmpty());
412:       assertEquals(10, stack0.capacity());
413:       assertEquals("[]", stack0.toString());
414:       assertFalse(node0.isTry());
415:       assertFalse(node0.isDebugger());
416:       assertFalse(node0.isArrayLit());
417:       assertFalse(node0.isFunction());
418:       assertFalse(node0.isRegExp());
419:       assertFalse(node0.isFor());
420:       assertFalse(node0.isEmpty());
421:       assertFalse(node0.isDefaultCase());
422:       assertEquals(0, node0.getChildCount());
423:       assertFalse(node0.isGetterDef());
424:       assertFalse(node0.isSwitch());
425:       assertFalse(node0.isStringKey());
426:       assertFalse(node0.isAdd());
427:       assertFalse(node0.isNew());
428:       assertFalse(node0.isCall());
429:       assertFalse(node0.isString());
430:       assertFalse(node0.isDo());
431:       assertFalse(node0.isVar());
432:       assertFalse(node0.isWhile());
433:       assertFalse(node0.isReturn());
434:       assertFalse(node0.isOr());
435:       assertFalse(node0.isComma());
436:       assertEquals(83, node0.getType());
437:       assertFalse(node0.isTypeOf());
438:       assertFalse(node0.isName());
439:       assertFalse(node0.isDelProp());
440:       assertFalse(node0.isGetElem());
441:       assertFalse(node0.isBreak());
442:       assertFalse(node0.isNull());
443:       assertFalse(node0.isTrue());
444:       assertFalse(node0.isVoid());
445:       assertFalse(node0.hasOneChild());
446:       assertFalse(node0.isCast());
447:       assertFalse(node0.isScript());
448:       assertFalse(node0.isExprResult());
449:       assertFalse(node0.isWith());
450:       assertFalse(node0.isAssign());
451:       assertFalse(node0.isDec());
452:       assertFalse(node0.hasChildren());
453:       assertFalse(node0.isAssignAdd());
454:       assertFalse(node0.isGetProp());
455:       assertFalse(node0.isLabel());
456:       assertFalse(node0.isObjectLit());
457:       assertFalse(node0.isNumber());
458:       assertTrue(node0.isParamList());
459:       assertFalse(node0.isContinue());
460:       assertFalse(node0.isNot());
461:       assertFalse(node0.isLabelName());
462:       assertEquals((-1), node0.getSourcePosition());
463:       assertFalse(node0.isAnd());
464:       assertFalse(node0.isHook());
465:       assertFalse(node0.isBlock());
466:       assertEquals((-1), node0.getCharno());
467:       assertFalse(node0.isInc());
468:       assertFalse(node0.isFalse());
469:       assertFalse(node0.isCase());
470:       assertFalse(node0.isThis());
471:       assertFalse(node0.isThrow());
472:       assertEquals((-1), node0.getLineno());
473:       assertFalse(node0.hasMoreThanOneChild());
474:       assertFalse(node0.isSetterDef());
475:       assertFalse(node0.isCatch());
476:       assertFalse(node0.isInstanceOf());
477:       assertFalse(node0.isIn());
478:       assertFalse(node0.isNE());
479:       assertFalse(node0.isIf());
480:       assertNotNull(iterable0);
481:       
482:       boolean boolean2 = node0.isOptionalArg();
483:       assertFalse(boolean2);
484:       assertEquals(8, Node.FLAG_NO_THROWS);
485:       assertEquals(39, Node.EMPTY_BLOCK);
486:       assertEquals(48, Node.DIRECTIVES);
487:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
488:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
489:       assertEquals(4095, Node.COLUMN_MASK);
490:       assertEquals(55, Node.INFERRED_FUNCTION);
491:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
492:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
493:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
494:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
495:       assertEquals(36, Node.QUOTED_PROP);
496:       assertEquals(52, Node.LENGTH);
497:       assertEquals(15, Node.NO_SIDE_EFFECTS);
498:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
499:       assertEquals(53, Node.INPUT_ID);
500:       assertEquals(49, Node.DIRECT_EVAL);
501:       assertEquals(57, Node.REFLECTED_OBJECT);
502:       assertEquals(56, Node.CHANGE_TIME);
503:       assertEquals(37, Node.OPT_ARG_NAME);
504:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
505:       assertEquals(2, Node.POST_FLAG);
506:       assertEquals(29, Node.JSDOC_INFO_PROP);
507:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
508:       assertEquals(30, Node.VAR_ARGS_NAME);
509:       assertEquals(1, Node.DECR_FLAG);
510:       assertEquals(32, Node.INCRDECR_PROP);
511:       assertEquals(57, Node.LAST_PROP);
512:       assertEquals(47, Node.IS_DISPATCHER);
513:       assertEquals(12, Node.COLUMN_BITS);
514:       assertEquals(54, Node.SLASH_V);
515:       assertEquals(40, Node.ORIGINALNAME_PROP);
516:       assertEquals(51, Node.STATIC_SOURCE_FILE);
517:       assertEquals(50, Node.FREE_CALL);
518:       assertEquals(46, Node.IS_NAMESPACE);
519:       assertEquals(43, Node.IS_CONSTANT_NAME);
520:       assertFalse(node0.equals((Object)node1));
521:       assertTrue(boolean2 == boolean0);
522:       assertTrue(boolean2 == boolean1);
523:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
524:       assertEquals(0, stack0.size());
525:       assertTrue(stack0.empty());
526:       assertTrue(stack0.isEmpty());
527:       assertEquals(10, stack0.capacity());
528:       assertEquals("[]", stack0.toString());
529:       assertFalse(node0.isTry());
530:       assertFalse(node0.isDebugger());
531:       assertFalse(node0.isArrayLit());
532:       assertFalse(node0.isFunction());
533:       assertFalse(node0.isRegExp());
534:       assertFalse(node0.isFor());
535:       assertFalse(node0.isEmpty());
536:       assertFalse(node0.isDefaultCase());
537:       assertEquals(0, node0.getChildCount());
538:       assertFalse(node0.isGetterDef());
539:       assertFalse(node0.isSwitch());
540:       assertFalse(node0.isStringKey());
541:       assertFalse(node0.isAdd());
542:       assertFalse(node0.isNew());
543:       assertFalse(node0.isCall());
544:       assertFalse(node0.isString());
545:       assertFalse(node0.isDo());
546:       assertFalse(node0.isVar());
547:       assertFalse(node0.isWhile());
548:       assertFalse(node0.isReturn());
549:       assertFalse(node0.isOr());
550:       assertFalse(node0.isComma());
551:       assertEquals(83, node0.getType());
552:       assertFalse(node0.isTypeOf());
553:       assertFalse(node0.isName());
554:       assertFalse(node0.isDelProp());
555:       assertFalse(node0.isGetElem());
556:       assertFalse(node0.isBreak());
557:       assertFalse(node0.isNull());
558:       assertFalse(node0.isTrue());
559:       assertFalse(node0.isVoid());
560:       assertFalse(node0.hasOneChild());
561:       assertFalse(node0.isCast());
562:       assertFalse(node0.isScript());
563:       assertFalse(node0.isExprResult());
564:       assertFalse(node0.isWith());
565:       assertFalse(node0.isAssign());
566:       assertFalse(node0.isDec());
567:       assertFalse(node0.hasChildren());
568:       assertFalse(node0.isAssignAdd());
569:       assertFalse(node0.isGetProp());
570:       assertFalse(node0.isLabel());
571:       assertFalse(node0.isObjectLit());
572:       assertFalse(node0.isNumber());
573:       assertTrue(node0.isParamList());
574:       assertFalse(node0.isContinue());
575:       assertFalse(node0.isNot());
576:       assertFalse(node0.isLabelName());
577:       assertEquals((-1), node0.getSourcePosition());
578:       assertFalse(node0.isAnd());
579:       assertFalse(node0.isHook());
580:       assertFalse(node0.isBlock());
581:       assertEquals((-1), node0.getCharno());
582:       assertFalse(node0.isInc());
583:       assertFalse(node0.isFalse());
584:       assertFalse(node0.isCase());
585:       assertFalse(node0.isThis());
586:       assertFalse(node0.isThrow());
587:       assertEquals((-1), node0.getLineno());
588:       assertFalse(node0.hasMoreThanOneChild());
589:       assertFalse(node0.isSetterDef());
590:       assertFalse(node0.isCatch());
591:       assertFalse(node0.isInstanceOf());
592:       assertFalse(node0.isIn());
593:       assertFalse(node0.isNE());
594:       assertFalse(node0.isIf());
595:       
596:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
597:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
598:       assertEquals(0, node_SideEffectFlags0.valueOf());
599:       assertNotNull(node_SideEffectFlags0);
600:       
601:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
602:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
603:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
604:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
605:       assertEquals(0, node_SideEffectFlags0.valueOf());
606:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
607:       assertEquals(0, node_SideEffectFlags1.valueOf());
608:       assertNotNull(node_SideEffectFlags1);
609:       
610:       simpleErrorReporter0.warning("Object#Element", "Object#Element", 276, 46);
611:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
612:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
613:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
614:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
615:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
616:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
617:       assertEquals(0, node_SideEffectFlags0.valueOf());
618:       assertEquals(0, node_SideEffectFlags2.valueOf());
619:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
620:       assertNotNull(node_SideEffectFlags2);
621:       
622:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
623:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
624:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
625:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
626:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
627:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
628:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
629:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
630:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
631:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
632:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
633:       assertEquals(0, node_SideEffectFlags0.valueOf());
634:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
635:       assertEquals(0, node_SideEffectFlags1.valueOf());
636:       assertEquals(0, node_SideEffectFlags3.valueOf());
637:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
638:       assertNotNull(node_SideEffectFlags3);
639:       
640:       node_SideEffectFlags0.clearSideEffectFlags();
641:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
642:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
643:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
644:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
645:       assertEquals(15, node_SideEffectFlags0.valueOf());
646:       
647:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
648:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
649:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
650:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
651:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
652:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
653:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
654:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
655:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
656:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
657:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
658:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
659:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
660:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
661:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
662:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
663:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
664:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
665:       assertEquals(0, node_SideEffectFlags0.valueOf());
666:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
667:       assertEquals(0, node_SideEffectFlags1.valueOf());
668:       assertEquals(0, node_SideEffectFlags3.valueOf());
669:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
670:       assertEquals(0, node_SideEffectFlags4.valueOf());
671:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
672:       assertNotNull(node_SideEffectFlags4);
673:       
674:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
675:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
676:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
677:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
678:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
679:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
680:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
681:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
682:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
683:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
684:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
685:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
686:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
687:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
688:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
689:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
690:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
691:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
692:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
693:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
694:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
695:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
696:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
697:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
698:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
699:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
700:       assertEquals(0, node_SideEffectFlags5.valueOf());
701:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
702:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
703:       assertEquals(0, node_SideEffectFlags0.valueOf());
704:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
705:       assertEquals(0, node_SideEffectFlags1.valueOf());
706:       assertEquals(0, node_SideEffectFlags3.valueOf());
707:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
708:       assertEquals(0, node_SideEffectFlags4.valueOf());
709:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
710:       assertNotNull(node_SideEffectFlags5);
711:       
712:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
713:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
714:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
715:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
716:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
717:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
718:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
719:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
720:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
721:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
722:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
723:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
724:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
725:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
726:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
727:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
728:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
729:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
730:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
731:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
732:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
733:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
734:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
735:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
736:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
737:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
738:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
739:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
740:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
741:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
742:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
743:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
744:       assertEquals(0, node_SideEffectFlags6.valueOf());
745:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
746:       assertEquals(0, node_SideEffectFlags0.valueOf());
747:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
748:       assertEquals(0, node_SideEffectFlags1.valueOf());
749:       assertEquals(0, node_SideEffectFlags3.valueOf());
750:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
751:       assertEquals(0, node_SideEffectFlags4.valueOf());
752:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
753:       assertNotNull(node_SideEffectFlags6);
754:       
755:       node_SideEffectFlags2.clearSideEffectFlags();
756:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
757:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
758:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
759:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
760:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
761:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
762:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
763:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
764:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
765:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
766:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
767:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
768:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
769:       assertEquals(15, node_SideEffectFlags0.valueOf());
770:       assertEquals(15, node_SideEffectFlags2.valueOf());
771:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
772:       
773:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setAllFlags();
774:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
775:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
776:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
777:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
778:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
779:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
780:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
781:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
782:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
783:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
784:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
785:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
786:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
787:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
788:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
789:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
790:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
791:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
792:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
793:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
794:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
795:       assertEquals(0, node_SideEffectFlags7.valueOf());
796:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
797:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
798:       assertEquals(0, node_SideEffectFlags0.valueOf());
799:       assertEquals(0, node_SideEffectFlags2.valueOf());
800:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
801:       assertNotNull(node_SideEffectFlags7);
802:       
803:       int int0 = node1.getSourceOffset();
804:       assertEquals((-1), int0);
805:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
806:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
807:       assertEquals(36, Node.QUOTED_PROP);
808:       assertEquals(43, Node.IS_CONSTANT_NAME);
809:       assertEquals(56, Node.CHANGE_TIME);
810:       assertEquals(37, Node.OPT_ARG_NAME);
811:       assertEquals(32, Node.INCRDECR_PROP);
812:       assertEquals(46, Node.IS_NAMESPACE);
813:       assertEquals(4095, Node.COLUMN_MASK);
814:       assertEquals(12, Node.COLUMN_BITS);
815:       assertEquals(51, Node.STATIC_SOURCE_FILE);
816:       assertEquals(50, Node.FREE_CALL);
817:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
818:       assertEquals(1, Node.DECR_FLAG);
819:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
820:       assertEquals(52, Node.LENGTH);
821:       assertEquals(54, Node.SLASH_V);
822:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
823:       assertEquals(57, Node.REFLECTED_OBJECT);
824:       assertEquals(30, Node.VAR_ARGS_NAME);
825:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
826:       assertEquals(49, Node.DIRECT_EVAL);
827:       assertEquals(40, Node.ORIGINALNAME_PROP);
828:       assertEquals(48, Node.DIRECTIVES);
829:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
830:       assertEquals(8, Node.FLAG_NO_THROWS);
831:       assertEquals(2, Node.POST_FLAG);
832:       assertEquals(47, Node.IS_DISPATCHER);
833:       assertEquals(29, Node.JSDOC_INFO_PROP);
834:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
835:       assertEquals(57, Node.LAST_PROP);
836:       assertEquals(55, Node.INFERRED_FUNCTION);
837:       assertEquals(39, Node.EMPTY_BLOCK);
838:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
839:       assertEquals(15, Node.NO_SIDE_EFFECTS);
840:       assertEquals(53, Node.INPUT_ID);
841:       assertFalse(node1.equals((Object)node0));
842:       assertFalse(node1.isIn());
843:       assertFalse(node1.isSwitch());
844:       assertFalse(node1.isNE());
845:       assertFalse(node1.isIf());
846:       assertFalse(node1.isDelProp());
847:       assertFalse(node1.isFalse());
848:       assertFalse(node1.isThrow());
849:       assertFalse(node1.isTrue());
850:       assertFalse(node1.isDefaultCase());
851:       assertFalse(node1.isEmpty());
852:       assertFalse(node1.isInc());
853:       assertFalse(node1.isCatch());
854:       assertFalse(node1.isInstanceOf());
855:       assertEquals(0, node1.getChildCount());
856:       assertFalse(node1.isThis());
857:       assertFalse(node1.isParamList());
858:       assertFalse(node1.isRegExp());
859:       assertFalse(node1.isWith());
860:       assertFalse(node1.hasOneChild());
861:       assertFalse(node1.isArrayLit());
862:       assertFalse(node1.isFor());
863:       assertFalse(node1.isStringKey());
864:       assertEquals((-1), node1.getCharno());
865:       assertFalse(node1.isHook());
866:       assertFalse(node1.isBlock());
867:       assertFalse(node1.isScript());
868:       assertFalse(node1.isGetterDef());
869:       assertFalse(node1.isTry());
870:       assertFalse(node1.isCase());
871:       assertFalse(node1.hasMoreThanOneChild());
872:       assertFalse(node1.isContinue());
873:       assertEquals(39, node1.getType());
874:       assertFalse(node1.isAssignAdd());
875:       assertFalse(node1.isLabel());
876:       assertFalse(node1.isOr());
877:       assertFalse(node1.isWhile());
878:       assertFalse(node1.isReturn());
879:       assertFalse(node1.isDec());
880:       assertFalse(node1.isTypeOf());
881:       assertFalse(node1.isLabelName());
882:       assertEquals((-1), node1.getLineno());
883:       assertFalse(node1.isGetElem());
884:       assertFalse(node1.isCast());
885:       assertFalse(node1.isVar());
886:       assertFalse(node1.isName());
887:       assertFalse(node1.isNull());
888:       assertFalse(node1.isDo());
889:       assertFalse(node1.isAdd());
890:       assertFalse(node1.isNew());
891:       assertFalse(node1.isSetterDef());
892:       assertFalse(node1.isAnd());
893:       assertFalse(node1.isObjectLit());
894:       assertFalse(node1.isNot());
895:       assertFalse(node1.isComma());
896:       assertFalse(node1.isVoid());
897:       assertFalse(node1.isFunction());
898:       assertFalse(node1.isBreak());
899:       assertFalse(node1.isCall());
900:       assertFalse(node1.isExprResult());
901:       assertFalse(node1.isAssign());
902:       assertFalse(node1.hasChildren());
903:       assertEquals((-1), node1.getSourcePosition());
904:       assertFalse(node1.isDebugger());
905:       assertFalse(node1.isString());
906:       assertTrue(node1.isNumber());
907:       assertFalse(node1.isGetProp());
908:       
909:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags2.setThrows();
910:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
911:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
912:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
913:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
914:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
915:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
916:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
917:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
918:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
919:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
920:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
921:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
922:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
923:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
924:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
925:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
926:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
927:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
928:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
929:       assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
930:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
931:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
932:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
933:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
934:       assertTrue(node_SideEffectFlags8.areAllFlagsSet());
935:       assertEquals(0, node_SideEffectFlags8.valueOf());
936:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
937:       assertEquals(0, node_SideEffectFlags0.valueOf());
938:       assertEquals(0, node_SideEffectFlags2.valueOf());
939:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
940:       assertNotNull(node_SideEffectFlags8);
941:       
942:       boolean boolean3 = node0.isFromExterns();
943:       assertFalse(boolean3);
944:       assertEquals(8, Node.FLAG_NO_THROWS);
945:       assertEquals(39, Node.EMPTY_BLOCK);
946:       assertEquals(48, Node.DIRECTIVES);
947:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
948:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
949:       assertEquals(4095, Node.COLUMN_MASK);
950:       assertEquals(55, Node.INFERRED_FUNCTION);
951:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
952:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
953:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
954:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
955:       assertEquals(36, Node.QUOTED_PROP);
956:       assertEquals(52, Node.LENGTH);
957:       assertEquals(15, Node.NO_SIDE_EFFECTS);
958:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
959:       assertEquals(53, Node.INPUT_ID);
960:       assertEquals(49, Node.DIRECT_EVAL);
961:       assertEquals(57, Node.REFLECTED_OBJECT);
962:       assertEquals(56, Node.CHANGE_TIME);
963:       assertEquals(37, Node.OPT_ARG_NAME);
964:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
965:       assertEquals(2, Node.POST_FLAG);
966:       assertEquals(29, Node.JSDOC_INFO_PROP);
967:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
968:       assertEquals(30, Node.VAR_ARGS_NAME);
969:       assertEquals(1, Node.DECR_FLAG);
970:       assertEquals(32, Node.INCRDECR_PROP);
971:       assertEquals(57, Node.LAST_PROP);
972:       assertEquals(47, Node.IS_DISPATCHER);
973:       assertEquals(12, Node.COLUMN_BITS);
974:       assertEquals(54, Node.SLASH_V);
975:       assertEquals(40, Node.ORIGINALNAME_PROP);
976:       assertEquals(51, Node.STATIC_SOURCE_FILE);
977:       assertEquals(50, Node.FREE_CALL);
978:       assertEquals(46, Node.IS_NAMESPACE);
979:       assertEquals(43, Node.IS_CONSTANT_NAME);
980:       assertFalse(node0.equals((Object)node1));
981:       assertTrue(boolean3 == boolean2);
982:       assertTrue(boolean3 == boolean0);
983:       assertTrue(boolean3 == boolean1);
984:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
985:       assertEquals(0, stack0.size());
986:       assertTrue(stack0.empty());
987:       assertTrue(stack0.isEmpty());
988:       assertEquals(10, stack0.capacity());
989:       assertEquals("[]", stack0.toString());
990:       assertFalse(node0.isTry());
991:       assertFalse(node0.isDebugger());
992:       assertFalse(node0.isArrayLit());
993:       assertFalse(node0.isFunction());
994:       assertFalse(node0.isRegExp());
995:       assertFalse(node0.isFor());
996:       assertFalse(node0.isEmpty());
997:       assertFalse(node0.isDefaultCase());
998:       assertEquals(0, node0.getChildCount());
999:       assertFalse(node0.isGetterDef());
1000:       assertFalse(node0.isSwitch());
1001:       assertFalse(node0.isStringKey());
1002:       assertFalse(node0.isAdd());
1003:       assertFalse(node0.isNew());
1004:       assertFalse(node0.isCall());
1005:       assertFalse(node0.isString());
1006:       assertFalse(node0.isDo());
1007:       assertFalse(node0.isVar());
1008:       assertFalse(node0.isWhile());
1009:       assertFalse(node0.isReturn());
1010:       assertFalse(node0.isOr());
1011:       assertFalse(node0.isComma());
1012:       assertEquals(83, node0.getType());
1013:       assertFalse(node0.isTypeOf());
1014:       assertFalse(node0.isName());
1015:       assertFalse(node0.isDelProp());
1016:       assertFalse(node0.isGetElem());
1017:       assertFalse(node0.isBreak());
1018:       assertFalse(node0.isNull());
1019:       assertFalse(node0.isTrue());
1020:       assertFalse(node0.isVoid());
1021:       assertFalse(node0.hasOneChild());
1022:       assertFalse(node0.isCast());
1023:       assertFalse(node0.isScript());
1024:       assertFalse(node0.isExprResult());
1025:       assertFalse(node0.isWith());
1026:       assertFalse(node0.isAssign());
1027:       assertFalse(node0.isDec());
1028:       assertFalse(node0.hasChildren());
1029:       assertFalse(node0.isAssignAdd());
1030:       assertFalse(node0.isGetProp());
1031:       assertFalse(node0.isLabel());
1032:       assertFalse(node0.isObjectLit());
1033:       assertFalse(node0.isNumber());
1034:       assertTrue(node0.isParamList());
1035:       assertFalse(node0.isContinue());
1036:       assertFalse(node0.isNot());
1037:       assertFalse(node0.isLabelName());
1038:       assertEquals((-1), node0.getSourcePosition());
1039:       assertFalse(node0.isAnd());
1040:       assertFalse(node0.isHook());
1041:       assertFalse(node0.isBlock());
1042:       assertEquals((-1), node0.getCharno());
1043:       assertFalse(node0.isInc());
1044:       assertFalse(node0.isFalse());
1045:       assertFalse(node0.isCase());
1046:       assertFalse(node0.isThis());
1047:       assertFalse(node0.isThrow());
1048:       assertEquals((-1), node0.getLineno());
1049:       assertFalse(node0.hasMoreThanOneChild());
1050:       assertFalse(node0.isSetterDef());
1051:       assertFalse(node0.isCatch());
1052:       assertFalse(node0.isInstanceOf());
1053:       assertFalse(node0.isIn());
1054:       assertFalse(node0.isNE());
1055:       assertFalse(node0.isIf());
1056:       
1057:       boolean boolean4 = node0.isFunction();
1058:       assertFalse(boolean4);
1059:       assertEquals(8, Node.FLAG_NO_THROWS);
1060:       assertEquals(39, Node.EMPTY_BLOCK);
1061:       assertEquals(48, Node.DIRECTIVES);
1062:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1063:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1064:       assertEquals(4095, Node.COLUMN_MASK);
1065:       assertEquals(55, Node.INFERRED_FUNCTION);
1066:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1067:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1068:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1069:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1070:       assertEquals(36, Node.QUOTED_PROP);
1071:       assertEquals(52, Node.LENGTH);
1072:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1073:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1074:       assertEquals(53, Node.INPUT_ID);
1075:       assertEquals(49, Node.DIRECT_EVAL);
1076:       assertEquals(57, Node.REFLECTED_OBJECT);
1077:       assertEquals(56, Node.CHANGE_TIME);
1078:       assertEquals(37, Node.OPT_ARG_NAME);
1079:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1080:       assertEquals(2, Node.POST_FLAG);
1081:       assertEquals(29, Node.JSDOC_INFO_PROP);
1082:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1083:       assertEquals(30, Node.VAR_ARGS_NAME);
1084:       assertEquals(1, Node.DECR_FLAG);
1085:       assertEquals(32, Node.INCRDECR_PROP);
1086:       assertEquals(57, Node.LAST_PROP);
1087:       assertEquals(47, Node.IS_DISPATCHER);
1088:       assertEquals(12, Node.COLUMN_BITS);
1089:       assertEquals(54, Node.SLASH_V);
1090:       assertEquals(40, Node.ORIGINALNAME_PROP);
1091:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1092:       assertEquals(50, Node.FREE_CALL);
1093:       assertEquals(46, Node.IS_NAMESPACE);
1094:       assertEquals(43, Node.IS_CONSTANT_NAME);
1095:       assertFalse(node0.equals((Object)node1));
1096:       assertTrue(boolean4 == boolean2);
1097:       assertTrue(boolean4 == boolean1);
1098:       assertTrue(boolean4 == boolean0);
1099:       assertTrue(boolean4 == boolean3);
1100:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1101:       assertEquals(0, stack0.size());
1102:       assertTrue(stack0.empty());
1103:       assertTrue(stack0.isEmpty());
1104:       assertEquals(10, stack0.capacity());
1105:       assertEquals("[]", stack0.toString());
1106:       assertFalse(node0.isTry());
1107:       assertFalse(node0.isDebugger());
1108:       assertFalse(node0.isArrayLit());
1109:       assertFalse(node0.isFunction());
1110:       assertFalse(node0.isRegExp());
1111:       assertFalse(node0.isFor());
1112:       assertFalse(node0.isEmpty());
1113:       assertFalse(node0.isDefaultCase());
1114:       assertEquals(0, node0.getChildCount());
1115:       assertFalse(node0.isGetterDef());
1116:       assertFalse(node0.isSwitch());
1117:       assertFalse(node0.isStringKey());
1118:       assertFalse(node0.isAdd());
1119:       assertFalse(node0.isNew());
1120:       assertFalse(node0.isCall());
1121:       assertFalse(node0.isString());
1122:       assertFalse(node0.isDo());
1123:       assertFalse(node0.isVar());
1124:       assertFalse(node0.isWhile());
1125:       assertFalse(node0.isReturn());
1126:       assertFalse(node0.isOr());
1127:       assertFalse(node0.isComma());
1128:       assertEquals(83, node0.getType());
1129:       assertFalse(node0.isTypeOf());
1130:       assertFalse(node0.isName());
1131:       assertFalse(node0.isDelProp());
1132:       assertFalse(node0.isGetElem());
1133:       assertFalse(node0.isBreak());
1134:       assertFalse(node0.isNull());
1135:       assertFalse(node0.isTrue());
1136:       assertFalse(node0.isVoid());
1137:       assertFalse(node0.hasOneChild());
1138:       assertFalse(node0.isCast());
1139:       assertFalse(node0.isScript());
1140:       assertFalse(node0.isExprResult());
1141:       assertFalse(node0.isWith());
1142:       assertFalse(node0.isAssign());
1143:       assertFalse(node0.isDec());
1144:       assertFalse(node0.hasChildren());
1145:       assertFalse(node0.isAssignAdd());
1146:       assertFalse(node0.isGetProp());
1147:       assertFalse(node0.isLabel());
1148:       assertFalse(node0.isObjectLit());
1149:       assertFalse(node0.isNumber());
1150:       assertTrue(node0.isParamList());
1151:       assertFalse(node0.isContinue());
1152:       assertFalse(node0.isNot());
1153:       assertFalse(node0.isLabelName());
1154:       assertEquals((-1), node0.getSourcePosition());
1155:       assertFalse(node0.isAnd());
1156:       assertFalse(node0.isHook());
1157:       assertFalse(node0.isBlock());
1158:       assertEquals((-1), node0.getCharno());
1159:       assertFalse(node0.isInc());
1160:       assertFalse(node0.isFalse());
1161:       assertFalse(node0.isCase());
1162:       assertFalse(node0.isThis());
1163:       assertFalse(node0.isThrow());
1164:       assertEquals((-1), node0.getLineno());
1165:       assertFalse(node0.hasMoreThanOneChild());
1166:       assertFalse(node0.isSetterDef());
1167:       assertFalse(node0.isCatch());
1168:       assertFalse(node0.isInstanceOf());
1169:       assertFalse(node0.isIn());
1170:       assertFalse(node0.isNE());
1171:       assertFalse(node0.isIf());
1172:       
1173:       boolean boolean5 = node0.isExprResult();
1174:       assertFalse(boolean5);
1175:       assertEquals(8, Node.FLAG_NO_THROWS);
1176:       assertEquals(39, Node.EMPTY_BLOCK);
1177:       assertEquals(48, Node.DIRECTIVES);
1178:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1179:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1180:       assertEquals(4095, Node.COLUMN_MASK);
1181:       assertEquals(55, Node.INFERRED_FUNCTION);
1182:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1183:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1184:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1185:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1186:       assertEquals(36, Node.QUOTED_PROP);
1187:       assertEquals(52, Node.LENGTH);
1188:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1189:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1190:       assertEquals(53, Node.INPUT_ID);
1191:       assertEquals(49, Node.DIRECT_EVAL);
1192:       assertEquals(57, Node.REFLECTED_OBJECT);
1193:       assertEquals(56, Node.CHANGE_TIME);
1194:       assertEquals(37, Node.OPT_ARG_NAME);
1195:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1196:       assertEquals(2, Node.POST_FLAG);
1197:       assertEquals(29, Node.JSDOC_INFO_PROP);
1198:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1199:       assertEquals(30, Node.VAR_ARGS_NAME);
1200:       assertEquals(1, Node.DECR_FLAG);
1201:       assertEquals(32, Node.INCRDECR_PROP);
1202:       assertEquals(57, Node.LAST_PROP);
1203:       assertEquals(47, Node.IS_DISPATCHER);
1204:       assertEquals(12, Node.COLUMN_BITS);
1205:       assertEquals(54, Node.SLASH_V);
1206:       assertEquals(40, Node.ORIGINALNAME_PROP);
1207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1208:       assertEquals(50, Node.FREE_CALL);
1209:       assertEquals(46, Node.IS_NAMESPACE);
1210:       assertEquals(43, Node.IS_CONSTANT_NAME);
1211:       assertFalse(node0.equals((Object)node1));
1212:       assertTrue(boolean5 == boolean1);
1213:       assertTrue(boolean5 == boolean4);
1214:       assertTrue(boolean5 == boolean0);
1215:       assertTrue(boolean5 == boolean3);
1216:       assertTrue(boolean5 == boolean2);
1217:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1218:       assertEquals(0, stack0.size());
1219:       assertTrue(stack0.empty());
1220:       assertTrue(stack0.isEmpty());
1221:       assertEquals(10, stack0.capacity());
1222:       assertEquals("[]", stack0.toString());
1223:       assertFalse(node0.isTry());
1224:       assertFalse(node0.isDebugger());
1225:       assertFalse(node0.isArrayLit());
1226:       assertFalse(node0.isFunction());
1227:       assertFalse(node0.isRegExp());
1228:       assertFalse(node0.isFor());
1229:       assertFalse(node0.isEmpty());
1230:       assertFalse(node0.isDefaultCase());
1231:       assertEquals(0, node0.getChildCount());
1232:       assertFalse(node0.isGetterDef());
1233:       assertFalse(node0.isSwitch());
1234:       assertFalse(node0.isStringKey());
1235:       assertFalse(node0.isAdd());
1236:       assertFalse(node0.isNew());
1237:       assertFalse(node0.isCall());
1238:       assertFalse(node0.isString());
1239:       assertFalse(node0.isDo());
1240:       assertFalse(node0.isVar());
1241:       assertFalse(node0.isWhile());
1242:       assertFalse(node0.isReturn());
1243:       assertFalse(node0.isOr());
1244:       assertFalse(node0.isComma());
1245:       assertEquals(83, node0.getType());
1246:       assertFalse(node0.isTypeOf());
1247:       assertFalse(node0.isName());
1248:       assertFalse(node0.isDelProp());
1249:       assertFalse(node0.isGetElem());
1250:       assertFalse(node0.isBreak());
1251:       assertFalse(node0.isNull());
1252:       assertFalse(node0.isTrue());
1253:       assertFalse(node0.isVoid());
1254:       assertFalse(node0.hasOneChild());
1255:       assertFalse(node0.isCast());
1256:       assertFalse(node0.isScript());
1257:       assertFalse(node0.isExprResult());
1258:       assertFalse(node0.isWith());
1259:       assertFalse(node0.isAssign());
1260:       assertFalse(node0.isDec());
1261:       assertFalse(node0.hasChildren());
1262:       assertFalse(node0.isAssignAdd());
1263:       assertFalse(node0.isGetProp());
1264:       assertFalse(node0.isLabel());
1265:       assertFalse(node0.isObjectLit());
1266:       assertFalse(node0.isNumber());
1267:       assertTrue(node0.isParamList());
1268:       assertFalse(node0.isContinue());
1269:       assertFalse(node0.isNot());
1270:       assertFalse(node0.isLabelName());
1271:       assertEquals((-1), node0.getSourcePosition());
1272:       assertFalse(node0.isAnd());
1273:       assertFalse(node0.isHook());
1274:       assertFalse(node0.isBlock());
1275:       assertEquals((-1), node0.getCharno());
1276:       assertFalse(node0.isInc());
1277:       assertFalse(node0.isFalse());
1278:       assertFalse(node0.isCase());
1279:       assertFalse(node0.isThis());
1280:       assertFalse(node0.isThrow());
1281:       assertEquals((-1), node0.getLineno());
1282:       assertFalse(node0.hasMoreThanOneChild());
1283:       assertFalse(node0.isSetterDef());
1284:       assertFalse(node0.isCatch());
1285:       assertFalse(node0.isInstanceOf());
1286:       assertFalse(node0.isIn());
1287:       assertFalse(node0.isNE());
1288:       assertFalse(node0.isIf());
1289:       
1290:       Node node2 = node0.getNext();
1291:       assertEquals(8, Node.FLAG_NO_THROWS);
1292:       assertEquals(39, Node.EMPTY_BLOCK);
1293:       assertEquals(48, Node.DIRECTIVES);
1294:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1295:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1296:       assertEquals(4095, Node.COLUMN_MASK);
1297:       assertEquals(55, Node.INFERRED_FUNCTION);
1298:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1299:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1300:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1301:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1302:       assertEquals(36, Node.QUOTED_PROP);
1303:       assertEquals(52, Node.LENGTH);
1304:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1305:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1306:       assertEquals(53, Node.INPUT_ID);
1307:       assertEquals(49, Node.DIRECT_EVAL);
1308:       assertEquals(57, Node.REFLECTED_OBJECT);
1309:       assertEquals(56, Node.CHANGE_TIME);
1310:       assertEquals(37, Node.OPT_ARG_NAME);
1311:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1312:       assertEquals(2, Node.POST_FLAG);
1313:       assertEquals(29, Node.JSDOC_INFO_PROP);
1314:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1315:       assertEquals(30, Node.VAR_ARGS_NAME);
1316:       assertEquals(1, Node.DECR_FLAG);
1317:       assertEquals(32, Node.INCRDECR_PROP);
1318:       assertEquals(57, Node.LAST_PROP);
1319:       assertEquals(47, Node.IS_DISPATCHER);
1320:       assertEquals(12, Node.COLUMN_BITS);
1321:       assertEquals(54, Node.SLASH_V);
1322:       assertEquals(40, Node.ORIGINALNAME_PROP);
1323:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1324:       assertEquals(50, Node.FREE_CALL);
1325:       assertEquals(46, Node.IS_NAMESPACE);
1326:       assertEquals(43, Node.IS_CONSTANT_NAME);
1327:       assertFalse(node0.equals((Object)node1));
1328:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1329:       assertEquals(0, stack0.size());
1330:       assertTrue(stack0.empty());
1331:       assertTrue(stack0.isEmpty());
1332:       assertEquals(10, stack0.capacity());
1333:       assertEquals("[]", stack0.toString());
1334:       assertFalse(node0.isTry());
1335:       assertFalse(node0.isDebugger());
1336:       assertFalse(node0.isArrayLit());
1337:       assertFalse(node0.isFunction());
1338:       assertFalse(node0.isRegExp());
1339:       assertFalse(node0.isFor());
1340:       assertFalse(node0.isEmpty());
1341:       assertFalse(node0.isDefaultCase());
1342:       assertEquals(0, node0.getChildCount());
1343:       assertFalse(node0.isGetterDef());
1344:       assertFalse(node0.isSwitch());
1345:       assertFalse(node0.isStringKey());
1346:       assertFalse(node0.isAdd());
1347:       assertFalse(node0.isNew());
1348:       assertFalse(node0.isCall());
1349:       assertFalse(node0.isString());
1350:       assertFalse(node0.isDo());
1351:       assertFalse(node0.isVar());
1352:       assertFalse(node0.isWhile());
1353:       assertFalse(node0.isReturn());
1354:       assertFalse(node0.isOr());
1355:       assertFalse(node0.isComma());
1356:       assertEquals(83, node0.getType());
1357:       assertFalse(node0.isTypeOf());
1358:       assertFalse(node0.isName());
1359:       assertFalse(node0.isDelProp());
1360:       assertFalse(node0.isGetElem());
1361:       assertFalse(node0.isBreak());
1362:       assertFalse(node0.isNull());
1363:       assertFalse(node0.isTrue());
1364:       assertFalse(node0.isVoid());
1365:       assertFalse(node0.hasOneChild());
1366:       assertFalse(node0.isCast());
1367:       assertFalse(node0.isScript());
1368:       assertFalse(node0.isExprResult());
1369:       assertFalse(node0.isWith());
1370:       assertFalse(node0.isAssign());
1371:       assertFalse(node0.isDec());
1372:       assertFalse(node0.hasChildren());
1373:       assertFalse(node0.isAssignAdd());
1374:       assertFalse(node0.isGetProp());
1375:       assertFalse(node0.isLabel());
1376:       assertFalse(node0.isObjectLit());
1377:       assertFalse(node0.isNumber());
1378:       assertTrue(node0.isParamList());
1379:       assertFalse(node0.isContinue());
1380:       assertFalse(node0.isNot());
1381:       assertFalse(node0.isLabelName());
1382:       assertEquals((-1), node0.getSourcePosition());
1383:       assertFalse(node0.isAnd());
1384:       assertFalse(node0.isHook());
1385:       assertFalse(node0.isBlock());
1386:       assertEquals((-1), node0.getCharno());
1387:       assertFalse(node0.isInc());
1388:       assertFalse(node0.isFalse());
1389:       assertFalse(node0.isCase());
1390:       assertFalse(node0.isThis());
1391:       assertFalse(node0.isThrow());
1392:       assertEquals((-1), node0.getLineno());
1393:       assertFalse(node0.hasMoreThanOneChild());
1394:       assertFalse(node0.isSetterDef());
1395:       assertFalse(node0.isCatch());
1396:       assertFalse(node0.isInstanceOf());
1397:       assertFalse(node0.isIn());
1398:       assertFalse(node0.isNE());
1399:       assertFalse(node0.isIf());
1400:       assertNull(node2);
1401:   }
1402: }
RegularFileObject[/tmp/EvoSuite_110_1629223345712/com/google/javascript/rhino/Node_110_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:25 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_110_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_110_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_110_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.JSTypeExpression",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.JSDocInfo$Marker",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.FluentIterable",
352:       "com.google.common.collect.Iterables$2",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 18:02:25.944 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

Stack<JSType> stack0 = new Stack<JSType>();
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertNotNull(stack0);

Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals(83, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabel());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertNotNull(node0);

boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Element");
assertFalse(boolean0);

Node node1 = Node.newNumber((double) 32);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertNotNull(node1);

boolean boolean1 = node1.isVarArgs();
assertFalse(boolean1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(node1.isIn());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());

Iterable<Node> iterable0 = node0.children();
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals(83, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabel());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertNotNull(iterable0);

boolean boolean2 = node0.isOptionalArg();
assertFalse(boolean2);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals(83, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabel());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);

simpleErrorReporter0.warning("Object#Element", "Object#Element", 276, 46);
Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);

node_SideEffectFlags0.clearSideEffectFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertEquals(0, node_SideEffectFlags5.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertNotNull(node_SideEffectFlags6);

node_SideEffectFlags2.clearSideEffectFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());
assertEquals(15, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setAllFlags();
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertEquals(0, node_SideEffectFlags7.valueOf());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags7);

int int0 = node1.getSourceOffset();
assertEquals((-1), int0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isIn());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals(39, node1.getType());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isVoid());
assertFalse(node1.isFunction());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags2.setThrows();
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertTrue(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags8.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags8);

boolean boolean3 = node0.isFromExterns();
assertFalse(boolean3);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals(83, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabel());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

boolean boolean4 = node0.isFunction();
assertFalse(boolean4);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals(83, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabel());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

boolean boolean5 = node0.isExprResult();
assertFalse(boolean5);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean2);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals(83, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabel());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());

Node node2 = node0.getNext();
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertEquals(83, node0.getType());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isLabel());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertTrue(node0.isParamList());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertNull(node2);


[MASTER] 18:02:27.231 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_116_1629223346852/com/google/javascript/rhino/Node_116_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_116_1629223346852/com/google/javascript/rhino/Node_116_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:27.231 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:27.231 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:27.232 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 403
[MASTER] 18:02:27.233 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_116_1629223346852/com/google/javascript/rhino/Node_116_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:26 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.List;
16: import java.util.Stack;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.testdata.FileSystemHandling;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Node_116_tmp__ESTest extends Node_116_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
28:       assertNotNull(simpleErrorReporter0);
29:       
30:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
31:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
32:       assertNotNull(jSTypeRegistry0);
33:       
34:       Stack<JSType> stack0 = new Stack<JSType>();
35:       assertTrue(stack0.empty());
36:       assertTrue(stack0.isEmpty());
37:       assertEquals(0, stack0.size());
38:       assertEquals(10, stack0.capacity());
39:       assertEquals("[]", stack0.toString());
40:       assertNotNull(stack0);
41:       
42:       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
43:       assertEquals(48, Node.DIRECTIVES);
44:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
45:       assertEquals(39, Node.EMPTY_BLOCK);
46:       assertEquals(40, Node.ORIGINALNAME_PROP);
47:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
48:       assertEquals(4095, Node.COLUMN_MASK);
49:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
50:       assertEquals(53, Node.INPUT_ID);
51:       assertEquals(15, Node.NO_SIDE_EFFECTS);
52:       assertEquals(49, Node.DIRECT_EVAL);
53:       assertEquals(57, Node.LAST_PROP);
54:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
55:       assertEquals(55, Node.INFERRED_FUNCTION);
56:       assertEquals(29, Node.JSDOC_INFO_PROP);
57:       assertEquals(57, Node.REFLECTED_OBJECT);
58:       assertEquals(36, Node.QUOTED_PROP);
59:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
60:       assertEquals(52, Node.LENGTH);
61:       assertEquals(8, Node.FLAG_NO_THROWS);
62:       assertEquals(37, Node.OPT_ARG_NAME);
63:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
64:       assertEquals(47, Node.IS_DISPATCHER);
65:       assertEquals(32, Node.INCRDECR_PROP);
66:       assertEquals(46, Node.IS_NAMESPACE);
67:       assertEquals(56, Node.CHANGE_TIME);
68:       assertEquals(12, Node.COLUMN_BITS);
69:       assertEquals(30, Node.VAR_ARGS_NAME);
70:       assertEquals(2, Node.POST_FLAG);
71:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
72:       assertEquals(54, Node.SLASH_V);
73:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
74:       assertEquals(43, Node.IS_CONSTANT_NAME);
75:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
76:       assertEquals(1, Node.DECR_FLAG);
77:       assertEquals(51, Node.STATIC_SOURCE_FILE);
78:       assertEquals(50, Node.FREE_CALL);
79:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
80:       assertTrue(stack0.empty());
81:       assertTrue(stack0.isEmpty());
82:       assertEquals(0, stack0.size());
83:       assertEquals(10, stack0.capacity());
84:       assertEquals("[]", stack0.toString());
85:       assertFalse(node0.isCast());
86:       assertFalse(node0.isExprResult());
87:       assertFalse(node0.hasOneChild());
88:       assertFalse(node0.isLabelName());
89:       assertFalse(node0.isWith());
90:       assertFalse(node0.hasChildren());
91:       assertFalse(node0.isGetElem());
92:       assertFalse(node0.isDec());
93:       assertFalse(node0.isTypeOf());
94:       assertFalse(node0.isAssign());
95:       assertFalse(node0.isReturn());
96:       assertFalse(node0.isGetProp());
97:       assertFalse(node0.isAnd());
98:       assertFalse(node0.isScript());
99:       assertFalse(node0.isNumber());
100:       assertEquals((-1), node0.getSourcePosition());
101:       assertTrue(node0.isParamList());
102:       assertFalse(node0.isNot());
103:       assertFalse(node0.isObjectLit());
104:       assertFalse(node0.isHook());
105:       assertFalse(node0.isBlock());
106:       assertFalse(node0.isInc());
107:       assertFalse(node0.isThrow());
108:       assertFalse(node0.isThis());
109:       assertFalse(node0.hasMoreThanOneChild());
110:       assertFalse(node0.isContinue());
111:       assertFalse(node0.isFalse());
112:       assertEquals((-1), node0.getLineno());
113:       assertFalse(node0.isIn());
114:       assertFalse(node0.isInstanceOf());
115:       assertFalse(node0.isSetterDef());
116:       assertFalse(node0.isIf());
117:       assertFalse(node0.isNE());
118:       assertFalse(node0.isArrayLit());
119:       assertFalse(node0.isTry());
120:       assertFalse(node0.isVoid());
121:       assertFalse(node0.isDefaultCase());
122:       assertFalse(node0.isFor());
123:       assertFalse(node0.isFunction());
124:       assertFalse(node0.isCatch());
125:       assertEquals(0, node0.getChildCount());
126:       assertFalse(node0.isRegExp());
127:       assertFalse(node0.isCase());
128:       assertFalse(node0.isString());
129:       assertFalse(node0.isStringKey());
130:       assertFalse(node0.isDebugger());
131:       assertEquals((-1), node0.getCharno());
132:       assertFalse(node0.isGetterDef());
133:       assertFalse(node0.isVar());
134:       assertFalse(node0.isAdd());
135:       assertFalse(node0.isSwitch());
136:       assertFalse(node0.isCall());
137:       assertFalse(node0.isName());
138:       assertFalse(node0.isNew());
139:       assertFalse(node0.isWhile());
140:       assertFalse(node0.isBreak());
141:       assertFalse(node0.isComma());
142:       assertFalse(node0.isAssignAdd());
143:       assertFalse(node0.isLabel());
144:       assertFalse(node0.isDelProp());
145:       assertFalse(node0.isDo());
146:       assertFalse(node0.isNull());
147:       assertFalse(node0.isEmpty());
148:       assertFalse(node0.isTrue());
149:       assertEquals(83, node0.getType());
150:       assertFalse(node0.isOr());
151:       assertNotNull(node0);
152:       
153:       Node node1 = Node.newNumber((double) 32);
154:       assertEquals(43, Node.IS_CONSTANT_NAME);
155:       assertEquals(36, Node.QUOTED_PROP);
156:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
157:       assertEquals(55, Node.INFERRED_FUNCTION);
158:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
160:       assertEquals(53, Node.INPUT_ID);
161:       assertEquals(29, Node.JSDOC_INFO_PROP);
162:       assertEquals(8, Node.FLAG_NO_THROWS);
163:       assertEquals(2, Node.POST_FLAG);
164:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
165:       assertEquals(39, Node.EMPTY_BLOCK);
166:       assertEquals(47, Node.IS_DISPATCHER);
167:       assertEquals(40, Node.ORIGINALNAME_PROP);
168:       assertEquals(30, Node.VAR_ARGS_NAME);
169:       assertEquals(15, Node.NO_SIDE_EFFECTS);
170:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
171:       assertEquals(49, Node.DIRECT_EVAL);
172:       assertEquals(1, Node.DECR_FLAG);
173:       assertEquals(54, Node.SLASH_V);
174:       assertEquals(57, Node.LAST_PROP);
175:       assertEquals(51, Node.STATIC_SOURCE_FILE);
176:       assertEquals(57, Node.REFLECTED_OBJECT);
177:       assertEquals(46, Node.IS_NAMESPACE);
178:       assertEquals(50, Node.FREE_CALL);
179:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
180:       assertEquals(52, Node.LENGTH);
181:       assertEquals(56, Node.CHANGE_TIME);
182:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
183:       assertEquals(37, Node.OPT_ARG_NAME);
184:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
185:       assertEquals(48, Node.DIRECTIVES);
186:       assertEquals(32, Node.INCRDECR_PROP);
187:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
188:       assertEquals(12, Node.COLUMN_BITS);
189:       assertEquals(4095, Node.COLUMN_MASK);
190:       assertFalse(node1.equals((Object)node0));
191:       assertFalse(node1.isNE());
192:       assertFalse(node1.isIf());
193:       assertTrue(node1.isNumber());
194:       assertFalse(node1.isDelProp());
195:       assertFalse(node1.isCase());
196:       assertFalse(node1.isEmpty());
197:       assertFalse(node1.isIn());
198:       assertFalse(node1.isString());
199:       assertFalse(node1.isGetterDef());
200:       assertFalse(node1.isTrue());
201:       assertFalse(node1.isTry());
202:       assertFalse(node1.isVoid());
203:       assertFalse(node1.isCatch());
204:       assertFalse(node1.isFor());
205:       assertFalse(node1.isHook());
206:       assertFalse(node1.isComma());
207:       assertFalse(node1.isRegExp());
208:       assertFalse(node1.isGetProp());
209:       assertFalse(node1.isSetterDef());
210:       assertFalse(node1.isAnd());
211:       assertFalse(node1.isNot());
212:       assertFalse(node1.isObjectLit());
213:       assertFalse(node1.isDebugger());
214:       assertFalse(node1.isInc());
215:       assertFalse(node1.isThrow());
216:       assertFalse(node1.isFalse());
217:       assertFalse(node1.isContinue());
218:       assertFalse(node1.isCast());
219:       assertFalse(node1.isFunction());
220:       assertFalse(node1.isLabel());
221:       assertFalse(node1.isReturn());
222:       assertEquals((-1), node1.getLineno());
223:       assertFalse(node1.isAssignAdd());
224:       assertFalse(node1.isLabelName());
225:       assertEquals((-1), node1.getSourcePosition());
226:       assertFalse(node1.isOr());
227:       assertFalse(node1.isScript());
228:       assertFalse(node1.isBlock());
229:       assertFalse(node1.isExprResult());
230:       assertFalse(node1.hasOneChild());
231:       assertFalse(node1.isWhile());
232:       assertFalse(node1.isGetElem());
233:       assertEquals(39, node1.getType());
234:       assertFalse(node1.isCall());
235:       assertFalse(node1.isInstanceOf());
236:       assertFalse(node1.isDec());
237:       assertFalse(node1.hasChildren());
238:       assertFalse(node1.isWith());
239:       assertFalse(node1.hasMoreThanOneChild());
240:       assertFalse(node1.isAssign());
241:       assertFalse(node1.isTypeOf());
242:       assertFalse(node1.isParamList());
243:       assertFalse(node1.isThis());
244:       assertFalse(node1.isNull());
245:       assertFalse(node1.isBreak());
246:       assertFalse(node1.isName());
247:       assertFalse(node1.isStringKey());
248:       assertEquals((-1), node1.getCharno());
249:       assertFalse(node1.isNew());
250:       assertFalse(node1.isAdd());
251:       assertFalse(node1.isDefaultCase());
252:       assertFalse(node1.isArrayLit());
253:       assertFalse(node1.isSwitch());
254:       assertFalse(node1.isDo());
255:       assertFalse(node1.isVar());
256:       assertEquals(0, node1.getChildCount());
257:       assertNotNull(node1);
258:       
259:       boolean boolean0 = node1.isVarArgs();
260:       assertFalse(boolean0);
261:       assertEquals(43, Node.IS_CONSTANT_NAME);
262:       assertEquals(36, Node.QUOTED_PROP);
263:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
264:       assertEquals(55, Node.INFERRED_FUNCTION);
265:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
266:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
267:       assertEquals(53, Node.INPUT_ID);
268:       assertEquals(29, Node.JSDOC_INFO_PROP);
269:       assertEquals(8, Node.FLAG_NO_THROWS);
270:       assertEquals(2, Node.POST_FLAG);
271:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
272:       assertEquals(39, Node.EMPTY_BLOCK);
273:       assertEquals(47, Node.IS_DISPATCHER);
274:       assertEquals(40, Node.ORIGINALNAME_PROP);
275:       assertEquals(30, Node.VAR_ARGS_NAME);
276:       assertEquals(15, Node.NO_SIDE_EFFECTS);
277:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
278:       assertEquals(49, Node.DIRECT_EVAL);
279:       assertEquals(1, Node.DECR_FLAG);
280:       assertEquals(54, Node.SLASH_V);
281:       assertEquals(57, Node.LAST_PROP);
282:       assertEquals(51, Node.STATIC_SOURCE_FILE);
283:       assertEquals(57, Node.REFLECTED_OBJECT);
284:       assertEquals(46, Node.IS_NAMESPACE);
285:       assertEquals(50, Node.FREE_CALL);
286:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
287:       assertEquals(52, Node.LENGTH);
288:       assertEquals(56, Node.CHANGE_TIME);
289:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
290:       assertEquals(37, Node.OPT_ARG_NAME);
291:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
292:       assertEquals(48, Node.DIRECTIVES);
293:       assertEquals(32, Node.INCRDECR_PROP);
294:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
295:       assertEquals(12, Node.COLUMN_BITS);
296:       assertEquals(4095, Node.COLUMN_MASK);
297:       assertFalse(node1.equals((Object)node0));
298:       assertFalse(node1.isNE());
299:       assertFalse(node1.isIf());
300:       assertTrue(node1.isNumber());
301:       assertFalse(node1.isDelProp());
302:       assertFalse(node1.isCase());
303:       assertFalse(node1.isEmpty());
304:       assertFalse(node1.isIn());
305:       assertFalse(node1.isString());
306:       assertFalse(node1.isGetterDef());
307:       assertFalse(node1.isTrue());
308:       assertFalse(node1.isTry());
309:       assertFalse(node1.isVoid());
310:       assertFalse(node1.isCatch());
311:       assertFalse(node1.isFor());
312:       assertFalse(node1.isHook());
313:       assertFalse(node1.isComma());
314:       assertFalse(node1.isRegExp());
315:       assertFalse(node1.isGetProp());
316:       assertFalse(node1.isSetterDef());
317:       assertFalse(node1.isAnd());
318:       assertFalse(node1.isNot());
319:       assertFalse(node1.isObjectLit());
320:       assertFalse(node1.isDebugger());
321:       assertFalse(node1.isInc());
322:       assertFalse(node1.isThrow());
323:       assertFalse(node1.isFalse());
324:       assertFalse(node1.isContinue());
325:       assertFalse(node1.isCast());
326:       assertFalse(node1.isFunction());
327:       assertFalse(node1.isLabel());
328:       assertFalse(node1.isReturn());
329:       assertEquals((-1), node1.getLineno());
330:       assertFalse(node1.isAssignAdd());
331:       assertFalse(node1.isLabelName());
332:       assertEquals((-1), node1.getSourcePosition());
333:       assertFalse(node1.isOr());
334:       assertFalse(node1.isScript());
335:       assertFalse(node1.isBlock());
336:       assertFalse(node1.isExprResult());
337:       assertFalse(node1.hasOneChild());
338:       assertFalse(node1.isWhile());
339:       assertFalse(node1.isGetElem());
340:       assertEquals(39, node1.getType());
341:       assertFalse(node1.isCall());
342:       assertFalse(node1.isInstanceOf());
343:       assertFalse(node1.isDec());
344:       assertFalse(node1.hasChildren());
345:       assertFalse(node1.isWith());
346:       assertFalse(node1.hasMoreThanOneChild());
347:       assertFalse(node1.isAssign());
348:       assertFalse(node1.isTypeOf());
349:       assertFalse(node1.isParamList());
350:       assertFalse(node1.isThis());
351:       assertFalse(node1.isNull());
352:       assertFalse(node1.isBreak());
353:       assertFalse(node1.isName());
354:       assertFalse(node1.isStringKey());
355:       assertEquals((-1), node1.getCharno());
356:       assertFalse(node1.isNew());
357:       assertFalse(node1.isAdd());
358:       assertFalse(node1.isDefaultCase());
359:       assertFalse(node1.isArrayLit());
360:       assertFalse(node1.isSwitch());
361:       assertFalse(node1.isDo());
362:       assertFalse(node1.isVar());
363:       assertEquals(0, node1.getChildCount());
364:       
365:       Iterable<Node> iterable0 = node0.children();
366:       assertEquals(48, Node.DIRECTIVES);
367:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
368:       assertEquals(39, Node.EMPTY_BLOCK);
369:       assertEquals(40, Node.ORIGINALNAME_PROP);
370:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
371:       assertEquals(4095, Node.COLUMN_MASK);
372:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
373:       assertEquals(53, Node.INPUT_ID);
374:       assertEquals(15, Node.NO_SIDE_EFFECTS);
375:       assertEquals(49, Node.DIRECT_EVAL);
376:       assertEquals(57, Node.LAST_PROP);
377:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
378:       assertEquals(55, Node.INFERRED_FUNCTION);
379:       assertEquals(29, Node.JSDOC_INFO_PROP);
380:       assertEquals(57, Node.REFLECTED_OBJECT);
381:       assertEquals(36, Node.QUOTED_PROP);
382:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
383:       assertEquals(52, Node.LENGTH);
384:       assertEquals(8, Node.FLAG_NO_THROWS);
385:       assertEquals(37, Node.OPT_ARG_NAME);
386:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
387:       assertEquals(47, Node.IS_DISPATCHER);
388:       assertEquals(32, Node.INCRDECR_PROP);
389:       assertEquals(46, Node.IS_NAMESPACE);
390:       assertEquals(56, Node.CHANGE_TIME);
391:       assertEquals(12, Node.COLUMN_BITS);
392:       assertEquals(30, Node.VAR_ARGS_NAME);
393:       assertEquals(2, Node.POST_FLAG);
394:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
395:       assertEquals(54, Node.SLASH_V);
396:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
397:       assertEquals(43, Node.IS_CONSTANT_NAME);
398:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
399:       assertEquals(1, Node.DECR_FLAG);
400:       assertEquals(51, Node.STATIC_SOURCE_FILE);
401:       assertEquals(50, Node.FREE_CALL);
402:       assertFalse(node0.equals((Object)node1));
403:       assertFalse(iterable0.contains(node0));
404:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
405:       assertTrue(stack0.empty());
406:       assertTrue(stack0.isEmpty());
407:       assertEquals(0, stack0.size());
408:       assertEquals(10, stack0.capacity());
409:       assertEquals("[]", stack0.toString());
410:       assertFalse(node0.isCast());
411:       assertFalse(node0.isExprResult());
412:       assertFalse(node0.hasOneChild());
413:       assertFalse(node0.isLabelName());
414:       assertFalse(node0.isWith());
415:       assertFalse(node0.hasChildren());
416:       assertFalse(node0.isGetElem());
417:       assertFalse(node0.isDec());
418:       assertFalse(node0.isTypeOf());
419:       assertFalse(node0.isAssign());
420:       assertFalse(node0.isReturn());
421:       assertFalse(node0.isGetProp());
422:       assertFalse(node0.isAnd());
423:       assertFalse(node0.isScript());
424:       assertFalse(node0.isNumber());
425:       assertEquals((-1), node0.getSourcePosition());
426:       assertTrue(node0.isParamList());
427:       assertFalse(node0.isNot());
428:       assertFalse(node0.isObjectLit());
429:       assertFalse(node0.isHook());
430:       assertFalse(node0.isBlock());
431:       assertFalse(node0.isInc());
432:       assertFalse(node0.isThrow());
433:       assertFalse(node0.isThis());
434:       assertFalse(node0.hasMoreThanOneChild());
435:       assertFalse(node0.isContinue());
436:       assertFalse(node0.isFalse());
437:       assertEquals((-1), node0.getLineno());
438:       assertFalse(node0.isIn());
439:       assertFalse(node0.isInstanceOf());
440:       assertFalse(node0.isSetterDef());
441:       assertFalse(node0.isIf());
442:       assertFalse(node0.isNE());
443:       assertFalse(node0.isArrayLit());
444:       assertFalse(node0.isTry());
445:       assertFalse(node0.isVoid());
446:       assertFalse(node0.isDefaultCase());
447:       assertFalse(node0.isFor());
448:       assertFalse(node0.isFunction());
449:       assertFalse(node0.isCatch());
450:       assertEquals(0, node0.getChildCount());
451:       assertFalse(node0.isRegExp());
452:       assertFalse(node0.isCase());
453:       assertFalse(node0.isString());
454:       assertFalse(node0.isStringKey());
455:       assertFalse(node0.isDebugger());
456:       assertEquals((-1), node0.getCharno());
457:       assertFalse(node0.isGetterDef());
458:       assertFalse(node0.isVar());
459:       assertFalse(node0.isAdd());
460:       assertFalse(node0.isSwitch());
461:       assertFalse(node0.isCall());
462:       assertFalse(node0.isName());
463:       assertFalse(node0.isNew());
464:       assertFalse(node0.isWhile());
465:       assertFalse(node0.isBreak());
466:       assertFalse(node0.isComma());
467:       assertFalse(node0.isAssignAdd());
468:       assertFalse(node0.isLabel());
469:       assertFalse(node0.isDelProp());
470:       assertFalse(node0.isDo());
471:       assertFalse(node0.isNull());
472:       assertFalse(node0.isEmpty());
473:       assertFalse(node0.isTrue());
474:       assertEquals(83, node0.getType());
475:       assertFalse(node0.isOr());
476:       assertNotNull(iterable0);
477:       
478:       boolean boolean1 = node0.isOptionalArg();
479:       assertFalse(boolean1);
480:       assertEquals(48, Node.DIRECTIVES);
481:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
482:       assertEquals(39, Node.EMPTY_BLOCK);
483:       assertEquals(40, Node.ORIGINALNAME_PROP);
484:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
485:       assertEquals(4095, Node.COLUMN_MASK);
486:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
487:       assertEquals(53, Node.INPUT_ID);
488:       assertEquals(15, Node.NO_SIDE_EFFECTS);
489:       assertEquals(49, Node.DIRECT_EVAL);
490:       assertEquals(57, Node.LAST_PROP);
491:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
492:       assertEquals(55, Node.INFERRED_FUNCTION);
493:       assertEquals(29, Node.JSDOC_INFO_PROP);
494:       assertEquals(57, Node.REFLECTED_OBJECT);
495:       assertEquals(36, Node.QUOTED_PROP);
496:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
497:       assertEquals(52, Node.LENGTH);
498:       assertEquals(8, Node.FLAG_NO_THROWS);
499:       assertEquals(37, Node.OPT_ARG_NAME);
500:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
501:       assertEquals(47, Node.IS_DISPATCHER);
502:       assertEquals(32, Node.INCRDECR_PROP);
503:       assertEquals(46, Node.IS_NAMESPACE);
504:       assertEquals(56, Node.CHANGE_TIME);
505:       assertEquals(12, Node.COLUMN_BITS);
506:       assertEquals(30, Node.VAR_ARGS_NAME);
507:       assertEquals(2, Node.POST_FLAG);
508:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
509:       assertEquals(54, Node.SLASH_V);
510:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
511:       assertEquals(43, Node.IS_CONSTANT_NAME);
512:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
513:       assertEquals(1, Node.DECR_FLAG);
514:       assertEquals(51, Node.STATIC_SOURCE_FILE);
515:       assertEquals(50, Node.FREE_CALL);
516:       assertFalse(node0.equals((Object)node1));
517:       assertTrue(boolean1 == boolean0);
518:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
519:       assertTrue(stack0.empty());
520:       assertTrue(stack0.isEmpty());
521:       assertEquals(0, stack0.size());
522:       assertEquals(10, stack0.capacity());
523:       assertEquals("[]", stack0.toString());
524:       assertFalse(node0.isCast());
525:       assertFalse(node0.isExprResult());
526:       assertFalse(node0.hasOneChild());
527:       assertFalse(node0.isLabelName());
528:       assertFalse(node0.isWith());
529:       assertFalse(node0.hasChildren());
530:       assertFalse(node0.isGetElem());
531:       assertFalse(node0.isDec());
532:       assertFalse(node0.isTypeOf());
533:       assertFalse(node0.isAssign());
534:       assertFalse(node0.isReturn());
535:       assertFalse(node0.isGetProp());
536:       assertFalse(node0.isAnd());
537:       assertFalse(node0.isScript());
538:       assertFalse(node0.isNumber());
539:       assertEquals((-1), node0.getSourcePosition());
540:       assertTrue(node0.isParamList());
541:       assertFalse(node0.isNot());
542:       assertFalse(node0.isObjectLit());
543:       assertFalse(node0.isHook());
544:       assertFalse(node0.isBlock());
545:       assertFalse(node0.isInc());
546:       assertFalse(node0.isThrow());
547:       assertFalse(node0.isThis());
548:       assertFalse(node0.hasMoreThanOneChild());
549:       assertFalse(node0.isContinue());
550:       assertFalse(node0.isFalse());
551:       assertEquals((-1), node0.getLineno());
552:       assertFalse(node0.isIn());
553:       assertFalse(node0.isInstanceOf());
554:       assertFalse(node0.isSetterDef());
555:       assertFalse(node0.isIf());
556:       assertFalse(node0.isNE());
557:       assertFalse(node0.isArrayLit());
558:       assertFalse(node0.isTry());
559:       assertFalse(node0.isVoid());
560:       assertFalse(node0.isDefaultCase());
561:       assertFalse(node0.isFor());
562:       assertFalse(node0.isFunction());
563:       assertFalse(node0.isCatch());
564:       assertEquals(0, node0.getChildCount());
565:       assertFalse(node0.isRegExp());
566:       assertFalse(node0.isCase());
567:       assertFalse(node0.isString());
568:       assertFalse(node0.isStringKey());
569:       assertFalse(node0.isDebugger());
570:       assertEquals((-1), node0.getCharno());
571:       assertFalse(node0.isGetterDef());
572:       assertFalse(node0.isVar());
573:       assertFalse(node0.isAdd());
574:       assertFalse(node0.isSwitch());
575:       assertFalse(node0.isCall());
576:       assertFalse(node0.isName());
577:       assertFalse(node0.isNew());
578:       assertFalse(node0.isWhile());
579:       assertFalse(node0.isBreak());
580:       assertFalse(node0.isComma());
581:       assertFalse(node0.isAssignAdd());
582:       assertFalse(node0.isLabel());
583:       assertFalse(node0.isDelProp());
584:       assertFalse(node0.isDo());
585:       assertFalse(node0.isNull());
586:       assertFalse(node0.isEmpty());
587:       assertFalse(node0.isTrue());
588:       assertEquals(83, node0.getType());
589:       assertFalse(node0.isOr());
590:       
591:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
592:       assertEquals(0, node_SideEffectFlags0.valueOf());
593:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
594:       assertNotNull(node_SideEffectFlags0);
595:       
596:       boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
597:       assertTrue(boolean2);
598:       assertFalse(boolean2 == boolean1);
599:       assertFalse(boolean2 == boolean0);
600:       
601:       node_SideEffectFlags0.clearSideEffectFlags();
602:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
603:       assertEquals(15, node_SideEffectFlags0.valueOf());
604:       
605:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
606:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
607:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
608:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
609:       assertEquals(7, node_SideEffectFlags0.valueOf());
610:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
611:       assertEquals(7, node_SideEffectFlags1.valueOf());
612:       assertNotNull(node_SideEffectFlags1);
613:       
614:       simpleErrorReporter0.warning("Object#Element", "Object#Element", 276, 46);
615:       Node node2 = Node.newNumber(1.0);
616:       assertEquals(30, Node.VAR_ARGS_NAME);
617:       assertEquals(49, Node.DIRECT_EVAL);
618:       assertEquals(57, Node.LAST_PROP);
619:       assertEquals(15, Node.NO_SIDE_EFFECTS);
620:       assertEquals(32, Node.INCRDECR_PROP);
621:       assertEquals(1, Node.DECR_FLAG);
622:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
623:       assertEquals(2, Node.POST_FLAG);
624:       assertEquals(12, Node.COLUMN_BITS);
625:       assertEquals(47, Node.IS_DISPATCHER);
626:       assertEquals(50, Node.FREE_CALL);
627:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
628:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
629:       assertEquals(40, Node.ORIGINALNAME_PROP);
630:       assertEquals(46, Node.IS_NAMESPACE);
631:       assertEquals(54, Node.SLASH_V);
632:       assertEquals(51, Node.STATIC_SOURCE_FILE);
633:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
634:       assertEquals(55, Node.INFERRED_FUNCTION);
635:       assertEquals(43, Node.IS_CONSTANT_NAME);
636:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
637:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
638:       assertEquals(4095, Node.COLUMN_MASK);
639:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
640:       assertEquals(29, Node.JSDOC_INFO_PROP);
641:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
642:       assertEquals(56, Node.CHANGE_TIME);
643:       assertEquals(39, Node.EMPTY_BLOCK);
644:       assertEquals(48, Node.DIRECTIVES);
645:       assertEquals(37, Node.OPT_ARG_NAME);
646:       assertEquals(52, Node.LENGTH);
647:       assertEquals(53, Node.INPUT_ID);
648:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
649:       assertEquals(8, Node.FLAG_NO_THROWS);
650:       assertEquals(57, Node.REFLECTED_OBJECT);
651:       assertEquals(36, Node.QUOTED_PROP);
652:       assertNotSame(node2, node1);
653:       assertFalse(node2.equals((Object)node0));
654:       assertFalse(node2.equals((Object)node1));
655:       assertFalse(node2.isBreak());
656:       assertFalse(node2.isGetProp());
657:       assertFalse(node2.isHook());
658:       assertFalse(node2.isInstanceOf());
659:       assertFalse(node2.isFalse());
660:       assertFalse(node2.isThrow());
661:       assertFalse(node2.isThis());
662:       assertFalse(node2.isComma());
663:       assertFalse(node2.isWith());
664:       assertFalse(node2.isInc());
665:       assertFalse(node2.isExprResult());
666:       assertFalse(node2.isIn());
667:       assertFalse(node2.isNE());
668:       assertFalse(node2.isGetterDef());
669:       assertFalse(node2.isIf());
670:       assertFalse(node2.isEmpty());
671:       assertFalse(node2.isLabelName());
672:       assertEquals((-1), node2.getLineno());
673:       assertFalse(node2.isArrayLit());
674:       assertFalse(node2.hasOneChild());
675:       assertFalse(node2.hasMoreThanOneChild());
676:       assertFalse(node2.isAssignAdd());
677:       assertFalse(node2.isFor());
678:       assertEquals(39, node2.getType());
679:       assertFalse(node2.isLabel());
680:       assertFalse(node2.isScript());
681:       assertFalse(node2.isSwitch());
682:       assertFalse(node2.isCase());
683:       assertFalse(node2.isTry());
684:       assertFalse(node2.isStringKey());
685:       assertEquals((-1), node2.getCharno());
686:       assertFalse(node2.isNull());
687:       assertFalse(node2.isParamList());
688:       assertFalse(node2.isName());
689:       assertFalse(node2.isSetterDef());
690:       assertFalse(node2.isCall());
691:       assertEquals(0, node2.getChildCount());
692:       assertFalse(node2.isVar());
693:       assertFalse(node2.isCatch());
694:       assertFalse(node2.isBlock());
695:       assertFalse(node2.isRegExp());
696:       assertFalse(node2.isDefaultCase());
697:       assertFalse(node2.isNew());
698:       assertFalse(node2.isDo());
699:       assertFalse(node2.isVoid());
700:       assertFalse(node2.isAdd());
701:       assertFalse(node2.isOr());
702:       assertFalse(node2.isTrue());
703:       assertEquals((-1), node2.getSourcePosition());
704:       assertFalse(node2.isDec());
705:       assertFalse(node2.isTypeOf());
706:       assertFalse(node2.isDelProp());
707:       assertFalse(node2.isGetElem());
708:       assertTrue(node2.isNumber());
709:       assertFalse(node2.isCast());
710:       assertFalse(node2.isContinue());
711:       assertFalse(node2.isAssign());
712:       assertFalse(node2.isReturn());
713:       assertFalse(node2.hasChildren());
714:       assertFalse(node2.isString());
715:       assertFalse(node2.isFunction());
716:       assertFalse(node2.isWhile());
717:       assertFalse(node2.isObjectLit());
718:       assertFalse(node2.isAnd());
719:       assertFalse(node2.isNot());
720:       assertFalse(node2.isDebugger());
721:       assertNotNull(node2);
722:       
723:       node2.setChangeTime(4095);
724:       assertEquals(30, Node.VAR_ARGS_NAME);
725:       assertEquals(49, Node.DIRECT_EVAL);
726:       assertEquals(57, Node.LAST_PROP);
727:       assertEquals(15, Node.NO_SIDE_EFFECTS);
728:       assertEquals(32, Node.INCRDECR_PROP);
729:       assertEquals(1, Node.DECR_FLAG);
730:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
731:       assertEquals(2, Node.POST_FLAG);
732:       assertEquals(12, Node.COLUMN_BITS);
733:       assertEquals(47, Node.IS_DISPATCHER);
734:       assertEquals(50, Node.FREE_CALL);
735:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
736:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
737:       assertEquals(40, Node.ORIGINALNAME_PROP);
738:       assertEquals(46, Node.IS_NAMESPACE);
739:       assertEquals(54, Node.SLASH_V);
740:       assertEquals(51, Node.STATIC_SOURCE_FILE);
741:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
742:       assertEquals(55, Node.INFERRED_FUNCTION);
743:       assertEquals(43, Node.IS_CONSTANT_NAME);
744:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
745:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
746:       assertEquals(4095, Node.COLUMN_MASK);
747:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
748:       assertEquals(29, Node.JSDOC_INFO_PROP);
749:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
750:       assertEquals(56, Node.CHANGE_TIME);
751:       assertEquals(39, Node.EMPTY_BLOCK);
752:       assertEquals(48, Node.DIRECTIVES);
753:       assertEquals(37, Node.OPT_ARG_NAME);
754:       assertEquals(52, Node.LENGTH);
755:       assertEquals(53, Node.INPUT_ID);
756:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
757:       assertEquals(8, Node.FLAG_NO_THROWS);
758:       assertEquals(57, Node.REFLECTED_OBJECT);
759:       assertEquals(36, Node.QUOTED_PROP);
760:       assertNotSame(node2, node1);
761:       assertFalse(node2.equals((Object)node0));
762:       assertFalse(node2.equals((Object)node1));
763:       assertFalse(node2.isBreak());
764:       assertFalse(node2.isGetProp());
765:       assertFalse(node2.isHook());
766:       assertFalse(node2.isInstanceOf());
767:       assertFalse(node2.isFalse());
768:       assertFalse(node2.isThrow());
769:       assertFalse(node2.isThis());
770:       assertFalse(node2.isComma());
771:       assertFalse(node2.isWith());
772:       assertFalse(node2.isInc());
773:       assertFalse(node2.isExprResult());
774:       assertFalse(node2.isIn());
775:       assertFalse(node2.isNE());
776:       assertFalse(node2.isGetterDef());
777:       assertFalse(node2.isIf());
778:       assertFalse(node2.isEmpty());
779:       assertFalse(node2.isLabelName());
780:       assertEquals((-1), node2.getLineno());
781:       assertFalse(node2.isArrayLit());
782:       assertFalse(node2.hasOneChild());
783:       assertFalse(node2.hasMoreThanOneChild());
784:       assertFalse(node2.isAssignAdd());
785:       assertFalse(node2.isFor());
786:       assertEquals(39, node2.getType());
787:       assertFalse(node2.isLabel());
788:       assertFalse(node2.isScript());
789:       assertFalse(node2.isSwitch());
790:       assertFalse(node2.isCase());
791:       assertFalse(node2.isTry());
792:       assertFalse(node2.isStringKey());
793:       assertEquals((-1), node2.getCharno());
794:       assertFalse(node2.isNull());
795:       assertFalse(node2.isParamList());
796:       assertFalse(node2.isName());
797:       assertFalse(node2.isSetterDef());
798:       assertFalse(node2.isCall());
799:       assertEquals(0, node2.getChildCount());
800:       assertFalse(node2.isVar());
801:       assertFalse(node2.isCatch());
802:       assertFalse(node2.isBlock());
803:       assertFalse(node2.isRegExp());
804:       assertFalse(node2.isDefaultCase());
805:       assertFalse(node2.isNew());
806:       assertFalse(node2.isDo());
807:       assertFalse(node2.isVoid());
808:       assertFalse(node2.isAdd());
809:       assertFalse(node2.isOr());
810:       assertFalse(node2.isTrue());
811:       assertEquals((-1), node2.getSourcePosition());
812:       assertFalse(node2.isDec());
813:       assertFalse(node2.isTypeOf());
814:       assertFalse(node2.isDelProp());
815:       assertFalse(node2.isGetElem());
816:       assertTrue(node2.isNumber());
817:       assertFalse(node2.isCast());
818:       assertFalse(node2.isContinue());
819:       assertFalse(node2.isAssign());
820:       assertFalse(node2.isReturn());
821:       assertFalse(node2.hasChildren());
822:       assertFalse(node2.isString());
823:       assertFalse(node2.isFunction());
824:       assertFalse(node2.isWhile());
825:       assertFalse(node2.isObjectLit());
826:       assertFalse(node2.isAnd());
827:       assertFalse(node2.isNot());
828:       assertFalse(node2.isDebugger());
829:       
830:       node0.removeProp(751);
831:       assertEquals(48, Node.DIRECTIVES);
832:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
833:       assertEquals(39, Node.EMPTY_BLOCK);
834:       assertEquals(40, Node.ORIGINALNAME_PROP);
835:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
836:       assertEquals(4095, Node.COLUMN_MASK);
837:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
838:       assertEquals(53, Node.INPUT_ID);
839:       assertEquals(15, Node.NO_SIDE_EFFECTS);
840:       assertEquals(49, Node.DIRECT_EVAL);
841:       assertEquals(57, Node.LAST_PROP);
842:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
843:       assertEquals(55, Node.INFERRED_FUNCTION);
844:       assertEquals(29, Node.JSDOC_INFO_PROP);
845:       assertEquals(57, Node.REFLECTED_OBJECT);
846:       assertEquals(36, Node.QUOTED_PROP);
847:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
848:       assertEquals(52, Node.LENGTH);
849:       assertEquals(8, Node.FLAG_NO_THROWS);
850:       assertEquals(37, Node.OPT_ARG_NAME);
851:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
852:       assertEquals(47, Node.IS_DISPATCHER);
853:       assertEquals(32, Node.INCRDECR_PROP);
854:       assertEquals(46, Node.IS_NAMESPACE);
855:       assertEquals(56, Node.CHANGE_TIME);
856:       assertEquals(12, Node.COLUMN_BITS);
857:       assertEquals(30, Node.VAR_ARGS_NAME);
858:       assertEquals(2, Node.POST_FLAG);
859:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
860:       assertEquals(54, Node.SLASH_V);
861:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
862:       assertEquals(43, Node.IS_CONSTANT_NAME);
863:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
864:       assertEquals(1, Node.DECR_FLAG);
865:       assertEquals(51, Node.STATIC_SOURCE_FILE);
866:       assertEquals(50, Node.FREE_CALL);
867:       assertFalse(node0.equals((Object)node1));
868:       assertFalse(node0.equals((Object)node2));
869:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
870:       assertTrue(stack0.empty());
871:       assertTrue(stack0.isEmpty());
872:       assertEquals(0, stack0.size());
873:       assertEquals(10, stack0.capacity());
874:       assertEquals("[]", stack0.toString());
875:       assertFalse(node0.isCast());
876:       assertFalse(node0.isExprResult());
877:       assertFalse(node0.hasOneChild());
878:       assertFalse(node0.isLabelName());
879:       assertFalse(node0.isWith());
880:       assertFalse(node0.hasChildren());
881:       assertFalse(node0.isGetElem());
882:       assertFalse(node0.isDec());
883:       assertFalse(node0.isTypeOf());
884:       assertFalse(node0.isAssign());
885:       assertFalse(node0.isReturn());
886:       assertFalse(node0.isGetProp());
887:       assertFalse(node0.isAnd());
888:       assertFalse(node0.isScript());
889:       assertFalse(node0.isNumber());
890:       assertEquals((-1), node0.getSourcePosition());
891:       assertTrue(node0.isParamList());
892:       assertFalse(node0.isNot());
893:       assertFalse(node0.isObjectLit());
894:       assertFalse(node0.isHook());
895:       assertFalse(node0.isBlock());
896:       assertFalse(node0.isInc());
897:       assertFalse(node0.isThrow());
898:       assertFalse(node0.isThis());
899:       assertFalse(node0.hasMoreThanOneChild());
900:       assertFalse(node0.isContinue());
901:       assertFalse(node0.isFalse());
902:       assertEquals((-1), node0.getLineno());
903:       assertFalse(node0.isIn());
904:       assertFalse(node0.isInstanceOf());
905:       assertFalse(node0.isSetterDef());
906:       assertFalse(node0.isIf());
907:       assertFalse(node0.isNE());
908:       assertFalse(node0.isArrayLit());
909:       assertFalse(node0.isTry());
910:       assertFalse(node0.isVoid());
911:       assertFalse(node0.isDefaultCase());
912:       assertFalse(node0.isFor());
913:       assertFalse(node0.isFunction());
914:       assertFalse(node0.isCatch());
915:       assertEquals(0, node0.getChildCount());
916:       assertFalse(node0.isRegExp());
917:       assertFalse(node0.isCase());
918:       assertFalse(node0.isString());
919:       assertFalse(node0.isStringKey());
920:       assertFalse(node0.isDebugger());
921:       assertEquals((-1), node0.getCharno());
922:       assertFalse(node0.isGetterDef());
923:       assertFalse(node0.isVar());
924:       assertFalse(node0.isAdd());
925:       assertFalse(node0.isSwitch());
926:       assertFalse(node0.isCall());
927:       assertFalse(node0.isName());
928:       assertFalse(node0.isNew());
929:       assertFalse(node0.isWhile());
930:       assertFalse(node0.isBreak());
931:       assertFalse(node0.isComma());
932:       assertFalse(node0.isAssignAdd());
933:       assertFalse(node0.isLabel());
934:       assertFalse(node0.isDelProp());
935:       assertFalse(node0.isDo());
936:       assertFalse(node0.isNull());
937:       assertFalse(node0.isEmpty());
938:       assertFalse(node0.isTrue());
939:       assertEquals(83, node0.getType());
940:       assertFalse(node0.isOr());
941:       
942:       boolean boolean3 = node2.isUnscopedQualifiedName();
943:       assertFalse(boolean3);
944:       assertEquals(30, Node.VAR_ARGS_NAME);
945:       assertEquals(49, Node.DIRECT_EVAL);
946:       assertEquals(57, Node.LAST_PROP);
947:       assertEquals(15, Node.NO_SIDE_EFFECTS);
948:       assertEquals(32, Node.INCRDECR_PROP);
949:       assertEquals(1, Node.DECR_FLAG);
950:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
951:       assertEquals(2, Node.POST_FLAG);
952:       assertEquals(12, Node.COLUMN_BITS);
953:       assertEquals(47, Node.IS_DISPATCHER);
954:       assertEquals(50, Node.FREE_CALL);
955:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
956:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
957:       assertEquals(40, Node.ORIGINALNAME_PROP);
958:       assertEquals(46, Node.IS_NAMESPACE);
959:       assertEquals(54, Node.SLASH_V);
960:       assertEquals(51, Node.STATIC_SOURCE_FILE);
961:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
962:       assertEquals(55, Node.INFERRED_FUNCTION);
963:       assertEquals(43, Node.IS_CONSTANT_NAME);
964:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
965:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
966:       assertEquals(4095, Node.COLUMN_MASK);
967:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
968:       assertEquals(29, Node.JSDOC_INFO_PROP);
969:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
970:       assertEquals(56, Node.CHANGE_TIME);
971:       assertEquals(39, Node.EMPTY_BLOCK);
972:       assertEquals(48, Node.DIRECTIVES);
973:       assertEquals(37, Node.OPT_ARG_NAME);
974:       assertEquals(52, Node.LENGTH);
975:       assertEquals(53, Node.INPUT_ID);
976:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
977:       assertEquals(8, Node.FLAG_NO_THROWS);
978:       assertEquals(57, Node.REFLECTED_OBJECT);
979:       assertEquals(36, Node.QUOTED_PROP);
980:       assertNotSame(node2, node1);
981:       assertTrue(boolean3 == boolean1);
982:       assertFalse(boolean3 == boolean2);
983:       assertTrue(boolean3 == boolean0);
984:       assertFalse(node2.equals((Object)node0));
985:       assertFalse(node2.equals((Object)node1));
986:       assertFalse(node2.isBreak());
987:       assertFalse(node2.isGetProp());
988:       assertFalse(node2.isHook());
989:       assertFalse(node2.isInstanceOf());
990:       assertFalse(node2.isFalse());
991:       assertFalse(node2.isThrow());
992:       assertFalse(node2.isThis());
993:       assertFalse(node2.isComma());
994:       assertFalse(node2.isWith());
995:       assertFalse(node2.isInc());
996:       assertFalse(node2.isExprResult());
997:       assertFalse(node2.isIn());
998:       assertFalse(node2.isNE());
999:       assertFalse(node2.isGetterDef());
1000:       assertFalse(node2.isIf());
1001:       assertFalse(node2.isEmpty());
1002:       assertFalse(node2.isLabelName());
1003:       assertEquals((-1), node2.getLineno());
1004:       assertFalse(node2.isArrayLit());
1005:       assertFalse(node2.hasOneChild());
1006:       assertFalse(node2.hasMoreThanOneChild());
1007:       assertFalse(node2.isAssignAdd());
1008:       assertFalse(node2.isFor());
1009:       assertEquals(39, node2.getType());
1010:       assertFalse(node2.isLabel());
1011:       assertFalse(node2.isScript());
1012:       assertFalse(node2.isSwitch());
1013:       assertFalse(node2.isCase());
1014:       assertFalse(node2.isTry());
1015:       assertFalse(node2.isStringKey());
1016:       assertEquals((-1), node2.getCharno());
1017:       assertFalse(node2.isNull());
1018:       assertFalse(node2.isParamList());
1019:       assertFalse(node2.isName());
1020:       assertFalse(node2.isSetterDef());
1021:       assertFalse(node2.isCall());
1022:       assertEquals(0, node2.getChildCount());
1023:       assertFalse(node2.isVar());
1024:       assertFalse(node2.isCatch());
1025:       assertFalse(node2.isBlock());
1026:       assertFalse(node2.isRegExp());
1027:       assertFalse(node2.isDefaultCase());
1028:       assertFalse(node2.isNew());
1029:       assertFalse(node2.isDo());
1030:       assertFalse(node2.isVoid());
1031:       assertFalse(node2.isAdd());
1032:       assertFalse(node2.isOr());
1033:       assertFalse(node2.isTrue());
1034:       assertEquals((-1), node2.getSourcePosition());
1035:       assertFalse(node2.isDec());
1036:       assertFalse(node2.isTypeOf());
1037:       assertFalse(node2.isDelProp());
1038:       assertFalse(node2.isGetElem());
1039:       assertTrue(node2.isNumber());
1040:       assertFalse(node2.isCast());
1041:       assertFalse(node2.isContinue());
1042:       assertFalse(node2.isAssign());
1043:       assertFalse(node2.isReturn());
1044:       assertFalse(node2.hasChildren());
1045:       assertFalse(node2.isString());
1046:       assertFalse(node2.isFunction());
1047:       assertFalse(node2.isWhile());
1048:       assertFalse(node2.isObjectLit());
1049:       assertFalse(node2.isAnd());
1050:       assertFalse(node2.isNot());
1051:       assertFalse(node2.isDebugger());
1052:       
1053:       Node node3 = new Node(42, node0, 38, 57);
1054:       assertEquals(47, Node.IS_DISPATCHER);
1055:       assertEquals(2, Node.POST_FLAG);
1056:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1057:       assertEquals(56, Node.CHANGE_TIME);
1058:       assertEquals(32, Node.INCRDECR_PROP);
1059:       assertEquals(46, Node.IS_NAMESPACE);
1060:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1061:       assertEquals(29, Node.JSDOC_INFO_PROP);
1062:       assertEquals(53, Node.INPUT_ID);
1063:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1064:       assertEquals(49, Node.DIRECT_EVAL);
1065:       assertEquals(1, Node.DECR_FLAG);
1066:       assertEquals(36, Node.QUOTED_PROP);
1067:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1068:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1069:       assertEquals(12, Node.COLUMN_BITS);
1070:       assertEquals(37, Node.OPT_ARG_NAME);
1071:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1072:       assertEquals(4095, Node.COLUMN_MASK);
1073:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1074:       assertEquals(50, Node.FREE_CALL);
1075:       assertEquals(48, Node.DIRECTIVES);
1076:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1077:       assertEquals(52, Node.LENGTH);
1078:       assertEquals(57, Node.REFLECTED_OBJECT);
1079:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1080:       assertEquals(8, Node.FLAG_NO_THROWS);
1081:       assertEquals(39, Node.EMPTY_BLOCK);
1082:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1083:       assertEquals(55, Node.INFERRED_FUNCTION);
1084:       assertEquals(57, Node.LAST_PROP);
1085:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1086:       assertEquals(30, Node.VAR_ARGS_NAME);
1087:       assertEquals(54, Node.SLASH_V);
1088:       assertEquals(43, Node.IS_CONSTANT_NAME);
1089:       assertEquals(40, Node.ORIGINALNAME_PROP);
1090:       assertEquals(48, Node.DIRECTIVES);
1091:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1092:       assertEquals(39, Node.EMPTY_BLOCK);
1093:       assertEquals(40, Node.ORIGINALNAME_PROP);
1094:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1095:       assertEquals(4095, Node.COLUMN_MASK);
1096:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1097:       assertEquals(53, Node.INPUT_ID);
1098:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1099:       assertEquals(49, Node.DIRECT_EVAL);
1100:       assertEquals(57, Node.LAST_PROP);
1101:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1102:       assertEquals(55, Node.INFERRED_FUNCTION);
1103:       assertEquals(29, Node.JSDOC_INFO_PROP);
1104:       assertEquals(57, Node.REFLECTED_OBJECT);
1105:       assertEquals(36, Node.QUOTED_PROP);
1106:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1107:       assertEquals(52, Node.LENGTH);
1108:       assertEquals(8, Node.FLAG_NO_THROWS);
1109:       assertEquals(37, Node.OPT_ARG_NAME);
1110:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1111:       assertEquals(47, Node.IS_DISPATCHER);
1112:       assertEquals(32, Node.INCRDECR_PROP);
1113:       assertEquals(46, Node.IS_NAMESPACE);
1114:       assertEquals(56, Node.CHANGE_TIME);
1115:       assertEquals(12, Node.COLUMN_BITS);
1116:       assertEquals(30, Node.VAR_ARGS_NAME);
1117:       assertEquals(2, Node.POST_FLAG);
1118:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1119:       assertEquals(54, Node.SLASH_V);
1120:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1121:       assertEquals(43, Node.IS_CONSTANT_NAME);
1122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1123:       assertEquals(1, Node.DECR_FLAG);
1124:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1125:       assertEquals(50, Node.FREE_CALL);
1126:       assertFalse(node3.equals((Object)node1));
1127:       assertFalse(node3.equals((Object)node0));
1128:       assertFalse(node3.equals((Object)node2));
1129:       assertFalse(node0.equals((Object)node1));
1130:       assertFalse(node0.equals((Object)node2));
1131:       assertFalse(node3.isInc());
1132:       assertFalse(node3.isSwitch());
1133:       assertEquals(57, node3.getCharno());
1134:       assertFalse(node3.isCase());
1135:       assertFalse(node3.isString());
1136:       assertFalse(node3.isIn());
1137:       assertEquals(42, node3.getType());
1138:       assertFalse(node3.isThrow());
1139:       assertFalse(node3.isArrayLit());
1140:       assertFalse(node3.isFalse());
1141:       assertFalse(node3.isExprResult());
1142:       assertFalse(node3.isTrue());
1143:       assertFalse(node3.isVoid());
1144:       assertFalse(node3.isDebugger());
1145:       assertFalse(node3.isAnd());
1146:       assertFalse(node3.isDefaultCase());
1147:       assertFalse(node3.isObjectLit());
1148:       assertFalse(node3.isNot());
1149:       assertFalse(node3.isEmpty());
1150:       assertFalse(node3.isComma());
1151:       assertFalse(node3.isNull());
1152:       assertFalse(node3.isDec());
1153:       assertFalse(node3.isBreak());
1154:       assertFalse(node3.isGetProp());
1155:       assertTrue(node3.hasOneChild());
1156:       assertFalse(node3.isReturn());
1157:       assertFalse(node3.isDelProp());
1158:       assertFalse(node3.isName());
1159:       assertFalse(node3.isCall());
1160:       assertFalse(node3.isGetElem());
1161:       assertEquals(38, node3.getLineno());
1162:       assertFalse(node3.isAssign());
1163:       assertTrue(node3.isThis());
1164:       assertFalse(node3.isTypeOf());
1165:       assertFalse(node3.isBlock());
1166:       assertFalse(node3.isNew());
1167:       assertFalse(node3.isWhile());
1168:       assertFalse(node3.isDo());
1169:       assertFalse(node3.isAdd());
1170:       assertFalse(node3.isOr());
1171:       assertFalse(node3.isSetterDef());
1172:       assertFalse(node3.isParamList());
1173:       assertFalse(node3.isLabel());
1174:       assertFalse(node3.isLabelName());
1175:       assertFalse(node3.isStringKey());
1176:       assertFalse(node3.isAssignAdd());
1177:       assertFalse(node3.isCast());
1178:       assertFalse(node3.isVar());
1179:       assertFalse(node3.isContinue());
1180:       assertFalse(node3.isFunction());
1181:       assertFalse(node3.isScript());
1182:       assertFalse(node3.isRegExp());
1183:       assertFalse(node3.isTry());
1184:       assertFalse(node3.isGetterDef());
1185:       assertFalse(node3.isNumber());
1186:       assertFalse(node3.isNE());
1187:       assertFalse(node3.isFor());
1188:       assertFalse(node3.isIf());
1189:       assertFalse(node3.hasMoreThanOneChild());
1190:       assertFalse(node3.isCatch());
1191:       assertFalse(node3.isHook());
1192:       assertEquals(155705, node3.getSourcePosition());
1193:       assertFalse(node3.isWith());
1194:       assertEquals(1, node3.getChildCount());
1195:       assertTrue(node3.hasChildren());
1196:       assertFalse(node3.isInstanceOf());
1197:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1198:       assertTrue(stack0.empty());
1199:       assertTrue(stack0.isEmpty());
1200:       assertEquals(0, stack0.size());
1201:       assertEquals(10, stack0.capacity());
1202:       assertEquals("[]", stack0.toString());
1203:       assertFalse(node0.isCast());
1204:       assertFalse(node0.isExprResult());
1205:       assertFalse(node0.hasOneChild());
1206:       assertFalse(node0.isLabelName());
1207:       assertFalse(node0.isWith());
1208:       assertFalse(node0.hasChildren());
1209:       assertFalse(node0.isGetElem());
1210:       assertFalse(node0.isDec());
1211:       assertFalse(node0.isTypeOf());
1212:       assertFalse(node0.isAssign());
1213:       assertFalse(node0.isReturn());
1214:       assertFalse(node0.isGetProp());
1215:       assertFalse(node0.isAnd());
1216:       assertFalse(node0.isScript());
1217:       assertFalse(node0.isNumber());
1218:       assertEquals((-1), node0.getSourcePosition());
1219:       assertTrue(node0.isParamList());
1220:       assertFalse(node0.isNot());
1221:       assertFalse(node0.isObjectLit());
1222:       assertFalse(node0.isHook());
1223:       assertFalse(node0.isBlock());
1224:       assertFalse(node0.isInc());
1225:       assertFalse(node0.isThrow());
1226:       assertFalse(node0.isThis());
1227:       assertFalse(node0.hasMoreThanOneChild());
1228:       assertFalse(node0.isContinue());
1229:       assertFalse(node0.isFalse());
1230:       assertEquals((-1), node0.getLineno());
1231:       assertFalse(node0.isIn());
1232:       assertFalse(node0.isInstanceOf());
1233:       assertFalse(node0.isSetterDef());
1234:       assertFalse(node0.isIf());
1235:       assertFalse(node0.isNE());
1236:       assertFalse(node0.isArrayLit());
1237:       assertFalse(node0.isTry());
1238:       assertFalse(node0.isVoid());
1239:       assertFalse(node0.isDefaultCase());
1240:       assertFalse(node0.isFor());
1241:       assertFalse(node0.isFunction());
1242:       assertFalse(node0.isCatch());
1243:       assertEquals(0, node0.getChildCount());
1244:       assertFalse(node0.isRegExp());
1245:       assertFalse(node0.isCase());
1246:       assertFalse(node0.isString());
1247:       assertFalse(node0.isStringKey());
1248:       assertFalse(node0.isDebugger());
1249:       assertEquals((-1), node0.getCharno());
1250:       assertFalse(node0.isGetterDef());
1251:       assertFalse(node0.isVar());
1252:       assertFalse(node0.isAdd());
1253:       assertFalse(node0.isSwitch());
1254:       assertFalse(node0.isCall());
1255:       assertFalse(node0.isName());
1256:       assertFalse(node0.isNew());
1257:       assertFalse(node0.isWhile());
1258:       assertFalse(node0.isBreak());
1259:       assertFalse(node0.isComma());
1260:       assertFalse(node0.isAssignAdd());
1261:       assertFalse(node0.isLabel());
1262:       assertFalse(node0.isDelProp());
1263:       assertFalse(node0.isDo());
1264:       assertFalse(node0.isNull());
1265:       assertFalse(node0.isEmpty());
1266:       assertFalse(node0.isTrue());
1267:       assertEquals(83, node0.getType());
1268:       assertFalse(node0.isOr());
1269:       assertNotNull(node3);
1270:       
1271:       node2.removeProp(30);
1272:       assertEquals(30, Node.VAR_ARGS_NAME);
1273:       assertEquals(49, Node.DIRECT_EVAL);
1274:       assertEquals(57, Node.LAST_PROP);
1275:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1276:       assertEquals(32, Node.INCRDECR_PROP);
1277:       assertEquals(1, Node.DECR_FLAG);
1278:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1279:       assertEquals(2, Node.POST_FLAG);
1280:       assertEquals(12, Node.COLUMN_BITS);
1281:       assertEquals(47, Node.IS_DISPATCHER);
1282:       assertEquals(50, Node.FREE_CALL);
1283:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1284:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1285:       assertEquals(40, Node.ORIGINALNAME_PROP);
1286:       assertEquals(46, Node.IS_NAMESPACE);
1287:       assertEquals(54, Node.SLASH_V);
1288:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1289:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1290:       assertEquals(55, Node.INFERRED_FUNCTION);
1291:       assertEquals(43, Node.IS_CONSTANT_NAME);
1292:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1293:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1294:       assertEquals(4095, Node.COLUMN_MASK);
1295:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1296:       assertEquals(29, Node.JSDOC_INFO_PROP);
1297:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1298:       assertEquals(56, Node.CHANGE_TIME);
1299:       assertEquals(39, Node.EMPTY_BLOCK);
1300:       assertEquals(48, Node.DIRECTIVES);
1301:       assertEquals(37, Node.OPT_ARG_NAME);
1302:       assertEquals(52, Node.LENGTH);
1303:       assertEquals(53, Node.INPUT_ID);
1304:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1305:       assertEquals(8, Node.FLAG_NO_THROWS);
1306:       assertEquals(57, Node.REFLECTED_OBJECT);
1307:       assertEquals(36, Node.QUOTED_PROP);
1308:       assertNotSame(node2, node1);
1309:       assertFalse(node2.equals((Object)node0));
1310:       assertFalse(node2.equals((Object)node3));
1311:       assertFalse(node2.equals((Object)node1));
1312:       assertFalse(node2.isBreak());
1313:       assertFalse(node2.isGetProp());
1314:       assertFalse(node2.isHook());
1315:       assertFalse(node2.isInstanceOf());
1316:       assertFalse(node2.isFalse());
1317:       assertFalse(node2.isThrow());
1318:       assertFalse(node2.isThis());
1319:       assertFalse(node2.isComma());
1320:       assertFalse(node2.isWith());
1321:       assertFalse(node2.isInc());
1322:       assertFalse(node2.isExprResult());
1323:       assertFalse(node2.isIn());
1324:       assertFalse(node2.isNE());
1325:       assertFalse(node2.isGetterDef());
1326:       assertFalse(node2.isIf());
1327:       assertFalse(node2.isEmpty());
1328:       assertFalse(node2.isLabelName());
1329:       assertEquals((-1), node2.getLineno());
1330:       assertFalse(node2.isArrayLit());
1331:       assertFalse(node2.hasOneChild());
1332:       assertFalse(node2.hasMoreThanOneChild());
1333:       assertFalse(node2.isAssignAdd());
1334:       assertFalse(node2.isFor());
1335:       assertEquals(39, node2.getType());
1336:       assertFalse(node2.isLabel());
1337:       assertFalse(node2.isScript());
1338:       assertFalse(node2.isSwitch());
1339:       assertFalse(node2.isCase());
1340:       assertFalse(node2.isTry());
1341:       assertFalse(node2.isStringKey());
1342:       assertEquals((-1), node2.getCharno());
1343:       assertFalse(node2.isNull());
1344:       assertFalse(node2.isParamList());
1345:       assertFalse(node2.isName());
1346:       assertFalse(node2.isSetterDef());
1347:       assertFalse(node2.isCall());
1348:       assertEquals(0, node2.getChildCount());
1349:       assertFalse(node2.isVar());
1350:       assertFalse(node2.isCatch());
1351:       assertFalse(node2.isBlock());
1352:       assertFalse(node2.isRegExp());
1353:       assertFalse(node2.isDefaultCase());
1354:       assertFalse(node2.isNew());
1355:       assertFalse(node2.isDo());
1356:       assertFalse(node2.isVoid());
1357:       assertFalse(node2.isAdd());
1358:       assertFalse(node2.isOr());
1359:       assertFalse(node2.isTrue());
1360:       assertEquals((-1), node2.getSourcePosition());
1361:       assertFalse(node2.isDec());
1362:       assertFalse(node2.isTypeOf());
1363:       assertFalse(node2.isDelProp());
1364:       assertFalse(node2.isGetElem());
1365:       assertTrue(node2.isNumber());
1366:       assertFalse(node2.isCast());
1367:       assertFalse(node2.isContinue());
1368:       assertFalse(node2.isAssign());
1369:       assertFalse(node2.isReturn());
1370:       assertFalse(node2.hasChildren());
1371:       assertFalse(node2.isString());
1372:       assertFalse(node2.isFunction());
1373:       assertFalse(node2.isWhile());
1374:       assertFalse(node2.isObjectLit());
1375:       assertFalse(node2.isAnd());
1376:       assertFalse(node2.isNot());
1377:       assertFalse(node2.isDebugger());
1378:       
1379:       int int0 = node3.getSourceOffset();
1380:       assertEquals((-1), int0);
1381:       assertEquals(47, Node.IS_DISPATCHER);
1382:       assertEquals(2, Node.POST_FLAG);
1383:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1384:       assertEquals(56, Node.CHANGE_TIME);
1385:       assertEquals(32, Node.INCRDECR_PROP);
1386:       assertEquals(46, Node.IS_NAMESPACE);
1387:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1388:       assertEquals(29, Node.JSDOC_INFO_PROP);
1389:       assertEquals(53, Node.INPUT_ID);
1390:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1391:       assertEquals(49, Node.DIRECT_EVAL);
1392:       assertEquals(1, Node.DECR_FLAG);
1393:       assertEquals(36, Node.QUOTED_PROP);
1394:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1395:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1396:       assertEquals(12, Node.COLUMN_BITS);
1397:       assertEquals(37, Node.OPT_ARG_NAME);
1398:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1399:       assertEquals(4095, Node.COLUMN_MASK);
1400:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1401:       assertEquals(50, Node.FREE_CALL);
1402:       assertEquals(48, Node.DIRECTIVES);
1403:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1404:       assertEquals(52, Node.LENGTH);
1405:       assertEquals(57, Node.REFLECTED_OBJECT);
1406:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1407:       assertEquals(8, Node.FLAG_NO_THROWS);
1408:       assertEquals(39, Node.EMPTY_BLOCK);
1409:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1410:       assertEquals(55, Node.INFERRED_FUNCTION);
1411:       assertEquals(57, Node.LAST_PROP);
1412:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1413:       assertEquals(30, Node.VAR_ARGS_NAME);
1414:       assertEquals(54, Node.SLASH_V);
1415:       assertEquals(43, Node.IS_CONSTANT_NAME);
1416:       assertEquals(40, Node.ORIGINALNAME_PROP);
1417:       assertEquals(48, Node.DIRECTIVES);
1418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1419:       assertEquals(39, Node.EMPTY_BLOCK);
1420:       assertEquals(40, Node.ORIGINALNAME_PROP);
1421:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1422:       assertEquals(4095, Node.COLUMN_MASK);
1423:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1424:       assertEquals(53, Node.INPUT_ID);
1425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1426:       assertEquals(49, Node.DIRECT_EVAL);
1427:       assertEquals(57, Node.LAST_PROP);
1428:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1429:       assertEquals(55, Node.INFERRED_FUNCTION);
1430:       assertEquals(29, Node.JSDOC_INFO_PROP);
1431:       assertEquals(57, Node.REFLECTED_OBJECT);
1432:       assertEquals(36, Node.QUOTED_PROP);
1433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1434:       assertEquals(52, Node.LENGTH);
1435:       assertEquals(8, Node.FLAG_NO_THROWS);
1436:       assertEquals(37, Node.OPT_ARG_NAME);
1437:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1438:       assertEquals(47, Node.IS_DISPATCHER);
1439:       assertEquals(32, Node.INCRDECR_PROP);
1440:       assertEquals(46, Node.IS_NAMESPACE);
1441:       assertEquals(56, Node.CHANGE_TIME);
1442:       assertEquals(12, Node.COLUMN_BITS);
1443:       assertEquals(30, Node.VAR_ARGS_NAME);
1444:       assertEquals(2, Node.POST_FLAG);
1445:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1446:       assertEquals(54, Node.SLASH_V);
1447:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1448:       assertEquals(43, Node.IS_CONSTANT_NAME);
1449:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1450:       assertEquals(1, Node.DECR_FLAG);
1451:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1452:       assertEquals(50, Node.FREE_CALL);
1453:       assertNotSame(node3, node0);
1454:       assertNotSame(node0, node3);
1455:       assertFalse(node3.equals((Object)node1));
1456:       assertFalse(node3.equals((Object)node0));
1457:       assertFalse(node3.equals((Object)node2));
1458:       assertFalse(node0.equals((Object)node1));
1459:       assertFalse(node0.equals((Object)node3));
1460:       assertFalse(node0.equals((Object)node2));
1461:       assertFalse(node3.isInc());
1462:       assertFalse(node3.isSwitch());
1463:       assertEquals(57, node3.getCharno());
1464:       assertFalse(node3.isCase());
1465:       assertFalse(node3.isString());
1466:       assertFalse(node3.isIn());
1467:       assertEquals(42, node3.getType());
1468:       assertFalse(node3.isThrow());
1469:       assertFalse(node3.isArrayLit());
1470:       assertFalse(node3.isFalse());
1471:       assertFalse(node3.isExprResult());
1472:       assertFalse(node3.isTrue());
1473:       assertFalse(node3.isVoid());
1474:       assertFalse(node3.isDebugger());
1475:       assertFalse(node3.isAnd());
1476:       assertFalse(node3.isDefaultCase());
1477:       assertFalse(node3.isObjectLit());
1478:       assertFalse(node3.isNot());
1479:       assertFalse(node3.isEmpty());
1480:       assertFalse(node3.isComma());
1481:       assertFalse(node3.isNull());
1482:       assertFalse(node3.isDec());
1483:       assertFalse(node3.isBreak());
1484:       assertFalse(node3.isGetProp());
1485:       assertTrue(node3.hasOneChild());
1486:       assertFalse(node3.isReturn());
1487:       assertFalse(node3.isDelProp());
1488:       assertFalse(node3.isName());
1489:       assertFalse(node3.isCall());
1490:       assertFalse(node3.isGetElem());
1491:       assertEquals(38, node3.getLineno());
1492:       assertFalse(node3.isAssign());
1493:       assertTrue(node3.isThis());
1494:       assertFalse(node3.isTypeOf());
1495:       assertFalse(node3.isBlock());
1496:       assertFalse(node3.isNew());
1497:       assertFalse(node3.isWhile());
1498:       assertFalse(node3.isDo());
1499:       assertFalse(node3.isAdd());
1500:       assertFalse(node3.isOr());
1501:       assertFalse(node3.isSetterDef());
1502:       assertFalse(node3.isParamList());
1503:       assertFalse(node3.isLabel());
1504:       assertFalse(node3.isLabelName());
1505:       assertFalse(node3.isStringKey());
1506:       assertFalse(node3.isAssignAdd());
1507:       assertFalse(node3.isCast());
1508:       assertFalse(node3.isVar());
1509:       assertFalse(node3.isContinue());
1510:       assertFalse(node3.isFunction());
1511:       assertFalse(node3.isScript());
1512:       assertFalse(node3.isRegExp());
1513:       assertFalse(node3.isTry());
1514:       assertFalse(node3.isGetterDef());
1515:       assertFalse(node3.isNumber());
1516:       assertFalse(node3.isNE());
1517:       assertFalse(node3.isFor());
1518:       assertFalse(node3.isIf());
1519:       assertFalse(node3.hasMoreThanOneChild());
1520:       assertFalse(node3.isCatch());
1521:       assertFalse(node3.isHook());
1522:       assertEquals(155705, node3.getSourcePosition());
1523:       assertFalse(node3.isWith());
1524:       assertEquals(1, node3.getChildCount());
1525:       assertTrue(node3.hasChildren());
1526:       assertFalse(node3.isInstanceOf());
1527:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1528:       assertTrue(stack0.empty());
1529:       assertTrue(stack0.isEmpty());
1530:       assertEquals(0, stack0.size());
1531:       assertEquals(10, stack0.capacity());
1532:       assertEquals("[]", stack0.toString());
1533:       assertFalse(node0.isCast());
1534:       assertFalse(node0.isExprResult());
1535:       assertFalse(node0.hasOneChild());
1536:       assertFalse(node0.isLabelName());
1537:       assertFalse(node0.isWith());
1538:       assertFalse(node0.hasChildren());
1539:       assertFalse(node0.isGetElem());
1540:       assertFalse(node0.isDec());
1541:       assertFalse(node0.isTypeOf());
1542:       assertFalse(node0.isAssign());
1543:       assertFalse(node0.isReturn());
1544:       assertFalse(node0.isGetProp());
1545:       assertFalse(node0.isAnd());
1546:       assertFalse(node0.isScript());
1547:       assertFalse(node0.isNumber());
1548:       assertEquals((-1), node0.getSourcePosition());
1549:       assertTrue(node0.isParamList());
1550:       assertFalse(node0.isNot());
1551:       assertFalse(node0.isObjectLit());
1552:       assertFalse(node0.isHook());
1553:       assertFalse(node0.isBlock());
1554:       assertFalse(node0.isInc());
1555:       assertFalse(node0.isThrow());
1556:       assertFalse(node0.isThis());
1557:       assertFalse(node0.hasMoreThanOneChild());
1558:       assertFalse(node0.isContinue());
1559:       assertFalse(node0.isFalse());
1560:       assertEquals((-1), node0.getLineno());
1561:       assertFalse(node0.isIn());
1562:       assertFalse(node0.isInstanceOf());
1563:       assertFalse(node0.isSetterDef());
1564:       assertFalse(node0.isIf());
1565:       assertFalse(node0.isNE());
1566:       assertFalse(node0.isArrayLit());
1567:       assertFalse(node0.isTry());
1568:       assertFalse(node0.isVoid());
1569:       assertFalse(node0.isDefaultCase());
1570:       assertFalse(node0.isFor());
1571:       assertFalse(node0.isFunction());
1572:       assertFalse(node0.isCatch());
1573:       assertEquals(0, node0.getChildCount());
1574:       assertFalse(node0.isRegExp());
1575:       assertFalse(node0.isCase());
1576:       assertFalse(node0.isString());
1577:       assertFalse(node0.isStringKey());
1578:       assertFalse(node0.isDebugger());
1579:       assertEquals((-1), node0.getCharno());
1580:       assertFalse(node0.isGetterDef());
1581:       assertFalse(node0.isVar());
1582:       assertFalse(node0.isAdd());
1583:       assertFalse(node0.isSwitch());
1584:       assertFalse(node0.isCall());
1585:       assertFalse(node0.isName());
1586:       assertFalse(node0.isNew());
1587:       assertFalse(node0.isWhile());
1588:       assertFalse(node0.isBreak());
1589:       assertFalse(node0.isComma());
1590:       assertFalse(node0.isAssignAdd());
1591:       assertFalse(node0.isLabel());
1592:       assertFalse(node0.isDelProp());
1593:       assertFalse(node0.isDo());
1594:       assertFalse(node0.isNull());
1595:       assertFalse(node0.isEmpty());
1596:       assertFalse(node0.isTrue());
1597:       assertEquals(83, node0.getType());
1598:       assertFalse(node0.isOr());
1599:       
1600:       Node node4 = Node.newString("nR\"E2", 1, 55);
1601:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1602:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1603:       assertEquals(54, Node.SLASH_V);
1604:       assertEquals(49, Node.DIRECT_EVAL);
1605:       assertEquals(57, Node.LAST_PROP);
1606:       assertEquals(1, Node.DECR_FLAG);
1607:       assertEquals(40, Node.ORIGINALNAME_PROP);
1608:       assertEquals(12, Node.COLUMN_BITS);
1609:       assertEquals(30, Node.VAR_ARGS_NAME);
1610:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1611:       assertEquals(32, Node.INCRDECR_PROP);
1612:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1613:       assertEquals(46, Node.IS_NAMESPACE);
1614:       assertEquals(50, Node.FREE_CALL);
1615:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1616:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1617:       assertEquals(43, Node.IS_CONSTANT_NAME);
1618:       assertEquals(36, Node.QUOTED_PROP);
1619:       assertEquals(53, Node.INPUT_ID);
1620:       assertEquals(4095, Node.COLUMN_MASK);
1621:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1622:       assertEquals(2, Node.POST_FLAG);
1623:       assertEquals(37, Node.OPT_ARG_NAME);
1624:       assertEquals(56, Node.CHANGE_TIME);
1625:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1626:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1627:       assertEquals(47, Node.IS_DISPATCHER);
1628:       assertEquals(39, Node.EMPTY_BLOCK);
1629:       assertEquals(48, Node.DIRECTIVES);
1630:       assertEquals(55, Node.INFERRED_FUNCTION);
1631:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1632:       assertEquals(57, Node.REFLECTED_OBJECT);
1633:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1634:       assertEquals(29, Node.JSDOC_INFO_PROP);
1635:       assertEquals(52, Node.LENGTH);
1636:       assertEquals(8, Node.FLAG_NO_THROWS);
1637:       assertFalse(node4.equals((Object)node1));
1638:       assertFalse(node4.equals((Object)node3));
1639:       assertFalse(node4.equals((Object)node0));
1640:       assertFalse(node4.equals((Object)node2));
1641:       assertFalse(node4.isParamList());
1642:       assertFalse(node4.isSetterDef());
1643:       assertEquals(40, node4.getType());
1644:       assertFalse(node4.isCall());
1645:       assertFalse(node4.isCatch());
1646:       assertFalse(node4.isVar());
1647:       assertFalse(node4.isRegExp());
1648:       assertFalse(node4.isFunction());
1649:       assertEquals(0, node4.getChildCount());
1650:       assertFalse(node4.isNew());
1651:       assertFalse(node4.isAdd());
1652:       assertFalse(node4.isTrue());
1653:       assertFalse(node4.isDefaultCase());
1654:       assertFalse(node4.isDo());
1655:       assertFalse(node4.isVoid());
1656:       assertFalse(node4.isName());
1657:       assertFalse(node4.isEmpty());
1658:       assertFalse(node4.isNull());
1659:       assertFalse(node4.isOr());
1660:       assertFalse(node4.isAssignAdd());
1661:       assertFalse(node4.isLabel());
1662:       assertFalse(node4.isNE());
1663:       assertFalse(node4.isIf());
1664:       assertEquals(4151, node4.getSourcePosition());
1665:       assertFalse(node4.isLabelName());
1666:       assertFalse(node4.isFor());
1667:       assertFalse(node4.hasMoreThanOneChild());
1668:       assertTrue(node4.isString());
1669:       assertFalse(node4.isBlock());
1670:       assertFalse(node4.isScript());
1671:       assertFalse(node4.hasOneChild());
1672:       assertFalse(node4.isArrayLit());
1673:       assertFalse(node4.isSwitch());
1674:       assertFalse(node4.isTry());
1675:       assertFalse(node4.isCase());
1676:       assertFalse(node4.isStringKey());
1677:       assertFalse(node4.isNumber());
1678:       assertFalse(node4.isGetterDef());
1679:       assertFalse(node4.isGetProp());
1680:       assertFalse(node4.isThis());
1681:       assertFalse(node4.isBreak());
1682:       assertFalse(node4.isFalse());
1683:       assertFalse(node4.isWith());
1684:       assertFalse(node4.isThrow());
1685:       assertFalse(node4.isHook());
1686:       assertFalse(node4.isInstanceOf());
1687:       assertFalse(node4.isComma());
1688:       assertFalse(node4.isInc());
1689:       assertFalse(node4.isExprResult());
1690:       assertFalse(node4.isIn());
1691:       assertEquals(1, node4.getLineno());
1692:       assertFalse(node4.isReturn());
1693:       assertFalse(node4.isDelProp());
1694:       assertFalse(node4.isGetElem());
1695:       assertFalse(node4.isContinue());
1696:       assertFalse(node4.isWhile());
1697:       assertFalse(node4.isCast());
1698:       assertFalse(node4.isTypeOf());
1699:       assertFalse(node4.hasChildren());
1700:       assertFalse(node4.isDec());
1701:       assertFalse(node4.isAssign());
1702:       assertEquals(55, node4.getCharno());
1703:       assertFalse(node4.isAnd());
1704:       assertFalse(node4.isObjectLit());
1705:       assertFalse(node4.isDebugger());
1706:       assertFalse(node4.isNot());
1707:       assertNotNull(node4);
1708:       
1709:       boolean boolean4 = node4.isAssign();
1710:       assertFalse(boolean4);
1711:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1712:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1713:       assertEquals(54, Node.SLASH_V);
1714:       assertEquals(49, Node.DIRECT_EVAL);
1715:       assertEquals(57, Node.LAST_PROP);
1716:       assertEquals(1, Node.DECR_FLAG);
1717:       assertEquals(40, Node.ORIGINALNAME_PROP);
1718:       assertEquals(12, Node.COLUMN_BITS);
1719:       assertEquals(30, Node.VAR_ARGS_NAME);
1720:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1721:       assertEquals(32, Node.INCRDECR_PROP);
1722:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1723:       assertEquals(46, Node.IS_NAMESPACE);
1724:       assertEquals(50, Node.FREE_CALL);
1725:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1726:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1727:       assertEquals(43, Node.IS_CONSTANT_NAME);
1728:       assertEquals(36, Node.QUOTED_PROP);
1729:       assertEquals(53, Node.INPUT_ID);
1730:       assertEquals(4095, Node.COLUMN_MASK);
1731:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1732:       assertEquals(2, Node.POST_FLAG);
1733:       assertEquals(37, Node.OPT_ARG_NAME);
1734:       assertEquals(56, Node.CHANGE_TIME);
1735:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1736:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1737:       assertEquals(47, Node.IS_DISPATCHER);
1738:       assertEquals(39, Node.EMPTY_BLOCK);
1739:       assertEquals(48, Node.DIRECTIVES);
1740:       assertEquals(55, Node.INFERRED_FUNCTION);
1741:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1742:       assertEquals(57, Node.REFLECTED_OBJECT);
1743:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1744:       assertEquals(29, Node.JSDOC_INFO_PROP);
1745:       assertEquals(52, Node.LENGTH);
1746:       assertEquals(8, Node.FLAG_NO_THROWS);
1747:       assertFalse(node4.equals((Object)node1));
1748:       assertFalse(node4.equals((Object)node3));
1749:       assertFalse(node4.equals((Object)node0));
1750:       assertFalse(node4.equals((Object)node2));
1751:       assertTrue(boolean4 == boolean3);
1752:       assertFalse(boolean4 == boolean2);
1753:       assertTrue(boolean4 == boolean1);
1754:       assertTrue(boolean4 == boolean0);
1755:       assertFalse(node4.isParamList());
1756:       assertFalse(node4.isSetterDef());
1757:       assertEquals(40, node4.getType());
1758:       assertFalse(node4.isCall());
1759:       assertFalse(node4.isCatch());
1760:       assertFalse(node4.isVar());
1761:       assertFalse(node4.isRegExp());
1762:       assertFalse(node4.isFunction());
1763:       assertEquals(0, node4.getChildCount());
1764:       assertFalse(node4.isNew());
1765:       assertFalse(node4.isAdd());
1766:       assertFalse(node4.isTrue());
1767:       assertFalse(node4.isDefaultCase());
1768:       assertFalse(node4.isDo());
1769:       assertFalse(node4.isVoid());
1770:       assertFalse(node4.isName());
1771:       assertFalse(node4.isEmpty());
1772:       assertFalse(node4.isNull());
1773:       assertFalse(node4.isOr());
1774:       assertFalse(node4.isAssignAdd());
1775:       assertFalse(node4.isLabel());
1776:       assertFalse(node4.isNE());
1777:       assertFalse(node4.isIf());
1778:       assertEquals(4151, node4.getSourcePosition());
1779:       assertFalse(node4.isLabelName());
1780:       assertFalse(node4.isFor());
1781:       assertFalse(node4.hasMoreThanOneChild());
1782:       assertTrue(node4.isString());
1783:       assertFalse(node4.isBlock());
1784:       assertFalse(node4.isScript());
1785:       assertFalse(node4.hasOneChild());
1786:       assertFalse(node4.isArrayLit());
1787:       assertFalse(node4.isSwitch());
1788:       assertFalse(node4.isTry());
1789:       assertFalse(node4.isCase());
1790:       assertFalse(node4.isStringKey());
1791:       assertFalse(node4.isNumber());
1792:       assertFalse(node4.isGetterDef());
1793:       assertFalse(node4.isGetProp());
1794:       assertFalse(node4.isThis());
1795:       assertFalse(node4.isBreak());
1796:       assertFalse(node4.isFalse());
1797:       assertFalse(node4.isWith());
1798:       assertFalse(node4.isThrow());
1799:       assertFalse(node4.isHook());
1800:       assertFalse(node4.isInstanceOf());
1801:       assertFalse(node4.isComma());
1802:       assertFalse(node4.isInc());
1803:       assertFalse(node4.isExprResult());
1804:       assertFalse(node4.isIn());
1805:       assertEquals(1, node4.getLineno());
1806:       assertFalse(node4.isReturn());
1807:       assertFalse(node4.isDelProp());
1808:       assertFalse(node4.isGetElem());
1809:       assertFalse(node4.isContinue());
1810:       assertFalse(node4.isWhile());
1811:       assertFalse(node4.isCast());
1812:       assertFalse(node4.isTypeOf());
1813:       assertFalse(node4.hasChildren());
1814:       assertFalse(node4.isDec());
1815:       assertFalse(node4.isAssign());
1816:       assertEquals(55, node4.getCharno());
1817:       assertFalse(node4.isAnd());
1818:       assertFalse(node4.isObjectLit());
1819:       assertFalse(node4.isDebugger());
1820:       assertFalse(node4.isNot());
1821:       
1822:       try { 
1823:         node1.getString();
1824:         fail("Expecting exception: UnsupportedOperationException");
1825:       
1826:       } catch(UnsupportedOperationException e) {
1827:          //
1828:          // NUMBER 32.0 is not a string node
1829:          //
1830:          verifyException("com.google.javascript.rhino.Node", e);
1831:       }
1832:   }
1833: }
RegularFileObject[/tmp/EvoSuite_116_1629223346852/com/google/javascript/rhino/Node_116_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:27 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_116_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_116_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_116_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.JSTypeExpression",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.JSDocInfo$Marker",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.FluentIterable",
352:       "com.google.common.collect.Iterables$2",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 18:02:27.315 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

Stack<JSType> stack0 = new Stack<JSType>();
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertNotNull(stack0);

Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertNotNull(node0);

Node node1 = Node.newNumber((double) 32);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isRegExp());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertEquals(39, node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertNotNull(node1);

boolean boolean0 = node1.isVarArgs();
assertFalse(boolean0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isComma());
assertFalse(node1.isRegExp());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertEquals(39, node1.getType());
assertFalse(node1.isCall());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());

Iterable<Node> iterable0 = node0.children();
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertNotNull(iterable0);

boolean boolean1 = node0.isOptionalArg();
assertFalse(boolean1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean2);
assertFalse(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);

node_SideEffectFlags0.clearSideEffectFlags();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);

simpleErrorReporter0.warning("Object#Element", "Object#Element", 276, 46);
Node node2 = Node.newNumber(1.0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isInc());
assertFalse(node2.isExprResult());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isVoid());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertTrue(node2.isNumber());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isWhile());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertNotNull(node2);

node2.setChangeTime(4095);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isInc());
assertFalse(node2.isExprResult());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isVoid());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertTrue(node2.isNumber());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isWhile());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());

node0.removeProp(751);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());

boolean boolean3 = node2.isUnscopedQualifiedName();
assertFalse(boolean3);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertNotSame(node2, node1);
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isInc());
assertFalse(node2.isExprResult());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isVoid());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertTrue(node2.isNumber());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isWhile());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());

Node node3 = new Node(42, node0, 38, 57);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node3.isInc());
assertFalse(node3.isSwitch());
assertEquals(57, node3.getCharno());
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isIn());
assertEquals(42, node3.getType());
assertFalse(node3.isThrow());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFalse());
assertFalse(node3.isExprResult());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isDebugger());
assertFalse(node3.isAnd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isEmpty());
assertFalse(node3.isComma());
assertFalse(node3.isNull());
assertFalse(node3.isDec());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertTrue(node3.hasOneChild());
assertFalse(node3.isReturn());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertEquals(38, node3.getLineno());
assertFalse(node3.isAssign());
assertTrue(node3.isThis());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isLabel());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCast());
assertFalse(node3.isVar());
assertFalse(node3.isContinue());
assertFalse(node3.isFunction());
assertFalse(node3.isScript());
assertFalse(node3.isRegExp());
assertFalse(node3.isTry());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isHook());
assertEquals(155705, node3.getSourcePosition());
assertFalse(node3.isWith());
assertEquals(1, node3.getChildCount());
assertTrue(node3.hasChildren());
assertFalse(node3.isInstanceOf());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());
assertNotNull(node3);

node2.removeProp(30);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isInc());
assertFalse(node2.isExprResult());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFor());
assertEquals(39, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVar());
assertFalse(node2.isCatch());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isVoid());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertTrue(node2.isNumber());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isString());
assertFalse(node2.isFunction());
assertFalse(node2.isWhile());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());

int int0 = node3.getSourceOffset();
assertEquals((-1), int0);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotSame(node3, node0);
assertNotSame(node0, node3);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node3.isInc());
assertFalse(node3.isSwitch());
assertEquals(57, node3.getCharno());
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isIn());
assertEquals(42, node3.getType());
assertFalse(node3.isThrow());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFalse());
assertFalse(node3.isExprResult());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isDebugger());
assertFalse(node3.isAnd());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isEmpty());
assertFalse(node3.isComma());
assertFalse(node3.isNull());
assertFalse(node3.isDec());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertTrue(node3.hasOneChild());
assertFalse(node3.isReturn());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isGetElem());
assertEquals(38, node3.getLineno());
assertFalse(node3.isAssign());
assertTrue(node3.isThis());
assertFalse(node3.isTypeOf());
assertFalse(node3.isBlock());
assertFalse(node3.isNew());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isLabel());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isCast());
assertFalse(node3.isVar());
assertFalse(node3.isContinue());
assertFalse(node3.isFunction());
assertFalse(node3.isScript());
assertFalse(node3.isRegExp());
assertFalse(node3.isTry());
assertFalse(node3.isGetterDef());
assertFalse(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isFor());
assertFalse(node3.isIf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isHook());
assertEquals(155705, node3.getSourcePosition());
assertFalse(node3.isWith());
assertEquals(1, node3.getChildCount());
assertTrue(node3.hasChildren());
assertFalse(node3.isInstanceOf());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(stack0.empty());
assertTrue(stack0.isEmpty());
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertEquals(83, node0.getType());
assertFalse(node0.isOr());

Node node4 = Node.newString("nR\"E2", 1, 55);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertEquals(40, node4.getType());
assertFalse(node4.isCall());
assertFalse(node4.isCatch());
assertFalse(node4.isVar());
assertFalse(node4.isRegExp());
assertFalse(node4.isFunction());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isTrue());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isVoid());
assertFalse(node4.isName());
assertFalse(node4.isEmpty());
assertFalse(node4.isNull());
assertFalse(node4.isOr());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(4151, node4.getSourcePosition());
assertFalse(node4.isLabelName());
assertFalse(node4.isFor());
assertFalse(node4.hasMoreThanOneChild());
assertTrue(node4.isString());
assertFalse(node4.isBlock());
assertFalse(node4.isScript());
assertFalse(node4.hasOneChild());
assertFalse(node4.isArrayLit());
assertFalse(node4.isSwitch());
assertFalse(node4.isTry());
assertFalse(node4.isCase());
assertFalse(node4.isStringKey());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isGetProp());
assertFalse(node4.isThis());
assertFalse(node4.isBreak());
assertFalse(node4.isFalse());
assertFalse(node4.isWith());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isComma());
assertFalse(node4.isInc());
assertFalse(node4.isExprResult());
assertFalse(node4.isIn());
assertEquals(1, node4.getLineno());
assertFalse(node4.isReturn());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isCast());
assertFalse(node4.isTypeOf());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertEquals(55, node4.getCharno());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());
assertNotNull(node4);

boolean boolean4 = node4.isAssign();
assertFalse(boolean4);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node2));
assertTrue(boolean4 == boolean3);
assertFalse(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertFalse(node4.isParamList());
assertFalse(node4.isSetterDef());
assertEquals(40, node4.getType());
assertFalse(node4.isCall());
assertFalse(node4.isCatch());
assertFalse(node4.isVar());
assertFalse(node4.isRegExp());
assertFalse(node4.isFunction());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isTrue());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isDo());
assertFalse(node4.isVoid());
assertFalse(node4.isName());
assertFalse(node4.isEmpty());
assertFalse(node4.isNull());
assertFalse(node4.isOr());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertEquals(4151, node4.getSourcePosition());
assertFalse(node4.isLabelName());
assertFalse(node4.isFor());
assertFalse(node4.hasMoreThanOneChild());
assertTrue(node4.isString());
assertFalse(node4.isBlock());
assertFalse(node4.isScript());
assertFalse(node4.hasOneChild());
assertFalse(node4.isArrayLit());
assertFalse(node4.isSwitch());
assertFalse(node4.isTry());
assertFalse(node4.isCase());
assertFalse(node4.isStringKey());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isGetProp());
assertFalse(node4.isThis());
assertFalse(node4.isBreak());
assertFalse(node4.isFalse());
assertFalse(node4.isWith());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isComma());
assertFalse(node4.isInc());
assertFalse(node4.isExprResult());
assertFalse(node4.isIn());
assertEquals(1, node4.getLineno());
assertFalse(node4.isReturn());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isCast());
assertFalse(node4.isTypeOf());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isAssign());
assertEquals(55, node4.getCharno());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());

node1.getString();

[MASTER] 18:02:30.480 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_130_1629223350020/com/google/javascript/rhino/Node_130_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_130_1629223350020/com/google/javascript/rhino/Node_130_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:30.480 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:30.480 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:30.480 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 372
[MASTER] 18:02:30.482 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_130_1629223350020/com/google/javascript/rhino/Node_130_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:30 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.SimpleSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_130_tmp__ESTest extends Node_130_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("");
22:       assertEquals(40, Node.ORIGINALNAME_PROP);
23:       assertEquals(57, Node.REFLECTED_OBJECT);
24:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
25:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
26:       assertEquals(52, Node.LENGTH);
27:       assertEquals(8, Node.FLAG_NO_THROWS);
28:       assertEquals(50, Node.FREE_CALL);
29:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
30:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
31:       assertEquals(39, Node.EMPTY_BLOCK);
32:       assertEquals(15, Node.NO_SIDE_EFFECTS);
33:       assertEquals(57, Node.LAST_PROP);
34:       assertEquals(1, Node.DECR_FLAG);
35:       assertEquals(51, Node.STATIC_SOURCE_FILE);
36:       assertEquals(30, Node.VAR_ARGS_NAME);
37:       assertEquals(46, Node.IS_NAMESPACE);
38:       assertEquals(54, Node.SLASH_V);
39:       assertEquals(43, Node.IS_CONSTANT_NAME);
40:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
41:       assertEquals(29, Node.JSDOC_INFO_PROP);
42:       assertEquals(47, Node.IS_DISPATCHER);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(2, Node.POST_FLAG);
45:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
46:       assertEquals(53, Node.INPUT_ID);
47:       assertEquals(32, Node.INCRDECR_PROP);
48:       assertEquals(55, Node.INFERRED_FUNCTION);
49:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
50:       assertEquals(12, Node.COLUMN_BITS);
51:       assertEquals(36, Node.QUOTED_PROP);
52:       assertEquals(4095, Node.COLUMN_MASK);
53:       assertEquals(48, Node.DIRECTIVES);
54:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
55:       assertEquals(37, Node.OPT_ARG_NAME);
56:       assertEquals(56, Node.CHANGE_TIME);
57:       assertEquals(49, Node.DIRECT_EVAL);
58:       assertFalse(node0.isDefaultCase());
59:       assertEquals(40, node0.getType());
60:       assertFalse(node0.isFunction());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isTrue());
63:       assertFalse(node0.isRegExp());
64:       assertEquals(0, node0.getChildCount());
65:       assertFalse(node0.isSetterDef());
66:       assertFalse(node0.isTry());
67:       assertFalse(node0.isDelProp());
68:       assertFalse(node0.isIf());
69:       assertFalse(node0.isFor());
70:       assertFalse(node0.isNull());
71:       assertFalse(node0.isEmpty());
72:       assertFalse(node0.isNE());
73:       assertFalse(node0.isCatch());
74:       assertFalse(node0.isCall());
75:       assertFalse(node0.isVoid());
76:       assertFalse(node0.isName());
77:       assertFalse(node0.isWhile());
78:       assertFalse(node0.isContinue());
79:       assertFalse(node0.isIn());
80:       assertFalse(node0.isReturn());
81:       assertFalse(node0.isInc());
82:       assertFalse(node0.isThrow());
83:       assertFalse(node0.isFalse());
84:       assertEquals((-1), node0.getSourcePosition());
85:       assertFalse(node0.isCast());
86:       assertFalse(node0.isAnd());
87:       assertFalse(node0.isWith());
88:       assertFalse(node0.isScript());
89:       assertFalse(node0.isObjectLit());
90:       assertFalse(node0.isNot());
91:       assertFalse(node0.isGetProp());
92:       assertFalse(node0.hasOneChild());
93:       assertFalse(node0.isBreak());
94:       assertFalse(node0.hasChildren());
95:       assertFalse(node0.isThis());
96:       assertFalse(node0.isTypeOf());
97:       assertFalse(node0.isComma());
98:       assertFalse(node0.isDec());
99:       assertFalse(node0.isAssign());
100:       assertFalse(node0.isOr());
101:       assertFalse(node0.isInstanceOf());
102:       assertFalse(node0.isExprResult());
103:       assertFalse(node0.isGetElem());
104:       assertEquals((-1), node0.getLineno());
105:       assertEquals((-1), node0.getCharno());
106:       assertFalse(node0.hasMoreThanOneChild());
107:       assertFalse(node0.isHook());
108:       assertFalse(node0.isAssignAdd());
109:       assertFalse(node0.isBlock());
110:       assertFalse(node0.isVar());
111:       assertFalse(node0.isAdd());
112:       assertTrue(node0.isString());
113:       assertFalse(node0.isCase());
114:       assertFalse(node0.isNew());
115:       assertFalse(node0.isDo());
116:       assertFalse(node0.isGetterDef());
117:       assertFalse(node0.isNumber());
118:       assertFalse(node0.isStringKey());
119:       assertFalse(node0.isLabel());
120:       assertFalse(node0.isParamList());
121:       assertFalse(node0.isSwitch());
122:       assertFalse(node0.isArrayLit());
123:       assertFalse(node0.isLabelName());
124:       
125:       boolean boolean0 = node0.mayMutateArguments();
126:       assertTrue(boolean0);
127:       assertEquals(40, Node.ORIGINALNAME_PROP);
128:       assertEquals(57, Node.REFLECTED_OBJECT);
129:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
130:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
131:       assertEquals(52, Node.LENGTH);
132:       assertEquals(8, Node.FLAG_NO_THROWS);
133:       assertEquals(50, Node.FREE_CALL);
134:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
135:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
136:       assertEquals(39, Node.EMPTY_BLOCK);
137:       assertEquals(15, Node.NO_SIDE_EFFECTS);
138:       assertEquals(57, Node.LAST_PROP);
139:       assertEquals(1, Node.DECR_FLAG);
140:       assertEquals(51, Node.STATIC_SOURCE_FILE);
141:       assertEquals(30, Node.VAR_ARGS_NAME);
142:       assertEquals(46, Node.IS_NAMESPACE);
143:       assertEquals(54, Node.SLASH_V);
144:       assertEquals(43, Node.IS_CONSTANT_NAME);
145:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
146:       assertEquals(29, Node.JSDOC_INFO_PROP);
147:       assertEquals(47, Node.IS_DISPATCHER);
148:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
149:       assertEquals(2, Node.POST_FLAG);
150:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
151:       assertEquals(53, Node.INPUT_ID);
152:       assertEquals(32, Node.INCRDECR_PROP);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(12, Node.COLUMN_BITS);
156:       assertEquals(36, Node.QUOTED_PROP);
157:       assertEquals(4095, Node.COLUMN_MASK);
158:       assertEquals(48, Node.DIRECTIVES);
159:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
160:       assertEquals(37, Node.OPT_ARG_NAME);
161:       assertEquals(56, Node.CHANGE_TIME);
162:       assertEquals(49, Node.DIRECT_EVAL);
163:       assertFalse(node0.isDefaultCase());
164:       assertEquals(40, node0.getType());
165:       assertFalse(node0.isFunction());
166:       assertFalse(node0.isDebugger());
167:       assertFalse(node0.isTrue());
168:       assertFalse(node0.isRegExp());
169:       assertEquals(0, node0.getChildCount());
170:       assertFalse(node0.isSetterDef());
171:       assertFalse(node0.isTry());
172:       assertFalse(node0.isDelProp());
173:       assertFalse(node0.isIf());
174:       assertFalse(node0.isFor());
175:       assertFalse(node0.isNull());
176:       assertFalse(node0.isEmpty());
177:       assertFalse(node0.isNE());
178:       assertFalse(node0.isCatch());
179:       assertFalse(node0.isCall());
180:       assertFalse(node0.isVoid());
181:       assertFalse(node0.isName());
182:       assertFalse(node0.isWhile());
183:       assertFalse(node0.isContinue());
184:       assertFalse(node0.isIn());
185:       assertFalse(node0.isReturn());
186:       assertFalse(node0.isInc());
187:       assertFalse(node0.isThrow());
188:       assertFalse(node0.isFalse());
189:       assertEquals((-1), node0.getSourcePosition());
190:       assertFalse(node0.isCast());
191:       assertFalse(node0.isAnd());
192:       assertFalse(node0.isWith());
193:       assertFalse(node0.isScript());
194:       assertFalse(node0.isObjectLit());
195:       assertFalse(node0.isNot());
196:       assertFalse(node0.isGetProp());
197:       assertFalse(node0.hasOneChild());
198:       assertFalse(node0.isBreak());
199:       assertFalse(node0.hasChildren());
200:       assertFalse(node0.isThis());
201:       assertFalse(node0.isTypeOf());
202:       assertFalse(node0.isComma());
203:       assertFalse(node0.isDec());
204:       assertFalse(node0.isAssign());
205:       assertFalse(node0.isOr());
206:       assertFalse(node0.isInstanceOf());
207:       assertFalse(node0.isExprResult());
208:       assertFalse(node0.isGetElem());
209:       assertEquals((-1), node0.getLineno());
210:       assertEquals((-1), node0.getCharno());
211:       assertFalse(node0.hasMoreThanOneChild());
212:       assertFalse(node0.isHook());
213:       assertFalse(node0.isAssignAdd());
214:       assertFalse(node0.isBlock());
215:       assertFalse(node0.isVar());
216:       assertFalse(node0.isAdd());
217:       assertTrue(node0.isString());
218:       assertFalse(node0.isCase());
219:       assertFalse(node0.isNew());
220:       assertFalse(node0.isDo());
221:       assertFalse(node0.isGetterDef());
222:       assertFalse(node0.isNumber());
223:       assertFalse(node0.isStringKey());
224:       assertFalse(node0.isLabel());
225:       assertFalse(node0.isParamList());
226:       assertFalse(node0.isSwitch());
227:       assertFalse(node0.isArrayLit());
228:       assertFalse(node0.isLabelName());
229:       
230:       String string0 = node0.toString();
231:       assertEquals("STRING ", string0);
232:       assertEquals(40, Node.ORIGINALNAME_PROP);
233:       assertEquals(57, Node.REFLECTED_OBJECT);
234:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
236:       assertEquals(52, Node.LENGTH);
237:       assertEquals(8, Node.FLAG_NO_THROWS);
238:       assertEquals(50, Node.FREE_CALL);
239:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
241:       assertEquals(39, Node.EMPTY_BLOCK);
242:       assertEquals(15, Node.NO_SIDE_EFFECTS);
243:       assertEquals(57, Node.LAST_PROP);
244:       assertEquals(1, Node.DECR_FLAG);
245:       assertEquals(51, Node.STATIC_SOURCE_FILE);
246:       assertEquals(30, Node.VAR_ARGS_NAME);
247:       assertEquals(46, Node.IS_NAMESPACE);
248:       assertEquals(54, Node.SLASH_V);
249:       assertEquals(43, Node.IS_CONSTANT_NAME);
250:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
251:       assertEquals(29, Node.JSDOC_INFO_PROP);
252:       assertEquals(47, Node.IS_DISPATCHER);
253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
256:       assertEquals(53, Node.INPUT_ID);
257:       assertEquals(32, Node.INCRDECR_PROP);
258:       assertEquals(55, Node.INFERRED_FUNCTION);
259:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
260:       assertEquals(12, Node.COLUMN_BITS);
261:       assertEquals(36, Node.QUOTED_PROP);
262:       assertEquals(4095, Node.COLUMN_MASK);
263:       assertEquals(48, Node.DIRECTIVES);
264:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
265:       assertEquals(37, Node.OPT_ARG_NAME);
266:       assertEquals(56, Node.CHANGE_TIME);
267:       assertEquals(49, Node.DIRECT_EVAL);
268:       assertFalse(node0.isDefaultCase());
269:       assertEquals(40, node0.getType());
270:       assertFalse(node0.isFunction());
271:       assertFalse(node0.isDebugger());
272:       assertFalse(node0.isTrue());
273:       assertFalse(node0.isRegExp());
274:       assertEquals(0, node0.getChildCount());
275:       assertFalse(node0.isSetterDef());
276:       assertFalse(node0.isTry());
277:       assertFalse(node0.isDelProp());
278:       assertFalse(node0.isIf());
279:       assertFalse(node0.isFor());
280:       assertFalse(node0.isNull());
281:       assertFalse(node0.isEmpty());
282:       assertFalse(node0.isNE());
283:       assertFalse(node0.isCatch());
284:       assertFalse(node0.isCall());
285:       assertFalse(node0.isVoid());
286:       assertFalse(node0.isName());
287:       assertFalse(node0.isWhile());
288:       assertFalse(node0.isContinue());
289:       assertFalse(node0.isIn());
290:       assertFalse(node0.isReturn());
291:       assertFalse(node0.isInc());
292:       assertFalse(node0.isThrow());
293:       assertFalse(node0.isFalse());
294:       assertEquals((-1), node0.getSourcePosition());
295:       assertFalse(node0.isCast());
296:       assertFalse(node0.isAnd());
297:       assertFalse(node0.isWith());
298:       assertFalse(node0.isScript());
299:       assertFalse(node0.isObjectLit());
300:       assertFalse(node0.isNot());
301:       assertFalse(node0.isGetProp());
302:       assertFalse(node0.hasOneChild());
303:       assertFalse(node0.isBreak());
304:       assertFalse(node0.hasChildren());
305:       assertFalse(node0.isThis());
306:       assertFalse(node0.isTypeOf());
307:       assertFalse(node0.isComma());
308:       assertFalse(node0.isDec());
309:       assertFalse(node0.isAssign());
310:       assertFalse(node0.isOr());
311:       assertFalse(node0.isInstanceOf());
312:       assertFalse(node0.isExprResult());
313:       assertFalse(node0.isGetElem());
314:       assertEquals((-1), node0.getLineno());
315:       assertEquals((-1), node0.getCharno());
316:       assertFalse(node0.hasMoreThanOneChild());
317:       assertFalse(node0.isHook());
318:       assertFalse(node0.isAssignAdd());
319:       assertFalse(node0.isBlock());
320:       assertFalse(node0.isVar());
321:       assertFalse(node0.isAdd());
322:       assertTrue(node0.isString());
323:       assertFalse(node0.isCase());
324:       assertFalse(node0.isNew());
325:       assertFalse(node0.isDo());
326:       assertFalse(node0.isGetterDef());
327:       assertFalse(node0.isNumber());
328:       assertFalse(node0.isStringKey());
329:       assertFalse(node0.isLabel());
330:       assertFalse(node0.isParamList());
331:       assertFalse(node0.isSwitch());
332:       assertFalse(node0.isArrayLit());
333:       assertFalse(node0.isLabelName());
334:       
335:       Iterable<Node> iterable0 = node0.children();
336:       assertEquals(40, Node.ORIGINALNAME_PROP);
337:       assertEquals(57, Node.REFLECTED_OBJECT);
338:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
339:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
340:       assertEquals(52, Node.LENGTH);
341:       assertEquals(8, Node.FLAG_NO_THROWS);
342:       assertEquals(50, Node.FREE_CALL);
343:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
344:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
345:       assertEquals(39, Node.EMPTY_BLOCK);
346:       assertEquals(15, Node.NO_SIDE_EFFECTS);
347:       assertEquals(57, Node.LAST_PROP);
348:       assertEquals(1, Node.DECR_FLAG);
349:       assertEquals(51, Node.STATIC_SOURCE_FILE);
350:       assertEquals(30, Node.VAR_ARGS_NAME);
351:       assertEquals(46, Node.IS_NAMESPACE);
352:       assertEquals(54, Node.SLASH_V);
353:       assertEquals(43, Node.IS_CONSTANT_NAME);
354:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
355:       assertEquals(29, Node.JSDOC_INFO_PROP);
356:       assertEquals(47, Node.IS_DISPATCHER);
357:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
358:       assertEquals(2, Node.POST_FLAG);
359:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
360:       assertEquals(53, Node.INPUT_ID);
361:       assertEquals(32, Node.INCRDECR_PROP);
362:       assertEquals(55, Node.INFERRED_FUNCTION);
363:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
364:       assertEquals(12, Node.COLUMN_BITS);
365:       assertEquals(36, Node.QUOTED_PROP);
366:       assertEquals(4095, Node.COLUMN_MASK);
367:       assertEquals(48, Node.DIRECTIVES);
368:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
369:       assertEquals(37, Node.OPT_ARG_NAME);
370:       assertEquals(56, Node.CHANGE_TIME);
371:       assertEquals(49, Node.DIRECT_EVAL);
372:       assertFalse(iterable0.contains(node0));
373:       assertFalse(node0.isDefaultCase());
374:       assertEquals(40, node0.getType());
375:       assertFalse(node0.isFunction());
376:       assertFalse(node0.isDebugger());
377:       assertFalse(node0.isTrue());
378:       assertFalse(node0.isRegExp());
379:       assertEquals(0, node0.getChildCount());
380:       assertFalse(node0.isSetterDef());
381:       assertFalse(node0.isTry());
382:       assertFalse(node0.isDelProp());
383:       assertFalse(node0.isIf());
384:       assertFalse(node0.isFor());
385:       assertFalse(node0.isNull());
386:       assertFalse(node0.isEmpty());
387:       assertFalse(node0.isNE());
388:       assertFalse(node0.isCatch());
389:       assertFalse(node0.isCall());
390:       assertFalse(node0.isVoid());
391:       assertFalse(node0.isName());
392:       assertFalse(node0.isWhile());
393:       assertFalse(node0.isContinue());
394:       assertFalse(node0.isIn());
395:       assertFalse(node0.isReturn());
396:       assertFalse(node0.isInc());
397:       assertFalse(node0.isThrow());
398:       assertFalse(node0.isFalse());
399:       assertEquals((-1), node0.getSourcePosition());
400:       assertFalse(node0.isCast());
401:       assertFalse(node0.isAnd());
402:       assertFalse(node0.isWith());
403:       assertFalse(node0.isScript());
404:       assertFalse(node0.isObjectLit());
405:       assertFalse(node0.isNot());
406:       assertFalse(node0.isGetProp());
407:       assertFalse(node0.hasOneChild());
408:       assertFalse(node0.isBreak());
409:       assertFalse(node0.hasChildren());
410:       assertFalse(node0.isThis());
411:       assertFalse(node0.isTypeOf());
412:       assertFalse(node0.isComma());
413:       assertFalse(node0.isDec());
414:       assertFalse(node0.isAssign());
415:       assertFalse(node0.isOr());
416:       assertFalse(node0.isInstanceOf());
417:       assertFalse(node0.isExprResult());
418:       assertFalse(node0.isGetElem());
419:       assertEquals((-1), node0.getLineno());
420:       assertEquals((-1), node0.getCharno());
421:       assertFalse(node0.hasMoreThanOneChild());
422:       assertFalse(node0.isHook());
423:       assertFalse(node0.isAssignAdd());
424:       assertFalse(node0.isBlock());
425:       assertFalse(node0.isVar());
426:       assertFalse(node0.isAdd());
427:       assertTrue(node0.isString());
428:       assertFalse(node0.isCase());
429:       assertFalse(node0.isNew());
430:       assertFalse(node0.isDo());
431:       assertFalse(node0.isGetterDef());
432:       assertFalse(node0.isNumber());
433:       assertFalse(node0.isStringKey());
434:       assertFalse(node0.isLabel());
435:       assertFalse(node0.isParamList());
436:       assertFalse(node0.isSwitch());
437:       assertFalse(node0.isArrayLit());
438:       assertFalse(node0.isLabelName());
439:       
440:       node0.setSourceEncodedPosition(77);
441:       assertEquals(40, Node.ORIGINALNAME_PROP);
442:       assertEquals(57, Node.REFLECTED_OBJECT);
443:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
444:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
445:       assertEquals(52, Node.LENGTH);
446:       assertEquals(8, Node.FLAG_NO_THROWS);
447:       assertEquals(50, Node.FREE_CALL);
448:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
449:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
450:       assertEquals(39, Node.EMPTY_BLOCK);
451:       assertEquals(15, Node.NO_SIDE_EFFECTS);
452:       assertEquals(57, Node.LAST_PROP);
453:       assertEquals(1, Node.DECR_FLAG);
454:       assertEquals(51, Node.STATIC_SOURCE_FILE);
455:       assertEquals(30, Node.VAR_ARGS_NAME);
456:       assertEquals(46, Node.IS_NAMESPACE);
457:       assertEquals(54, Node.SLASH_V);
458:       assertEquals(43, Node.IS_CONSTANT_NAME);
459:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
460:       assertEquals(29, Node.JSDOC_INFO_PROP);
461:       assertEquals(47, Node.IS_DISPATCHER);
462:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
463:       assertEquals(2, Node.POST_FLAG);
464:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
465:       assertEquals(53, Node.INPUT_ID);
466:       assertEquals(32, Node.INCRDECR_PROP);
467:       assertEquals(55, Node.INFERRED_FUNCTION);
468:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
469:       assertEquals(12, Node.COLUMN_BITS);
470:       assertEquals(36, Node.QUOTED_PROP);
471:       assertEquals(4095, Node.COLUMN_MASK);
472:       assertEquals(48, Node.DIRECTIVES);
473:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
474:       assertEquals(37, Node.OPT_ARG_NAME);
475:       assertEquals(56, Node.CHANGE_TIME);
476:       assertEquals(49, Node.DIRECT_EVAL);
477:       assertFalse(node0.isDefaultCase());
478:       assertEquals(40, node0.getType());
479:       assertFalse(node0.isFunction());
480:       assertFalse(node0.isDebugger());
481:       assertFalse(node0.isTrue());
482:       assertFalse(node0.isRegExp());
483:       assertEquals(0, node0.getChildCount());
484:       assertFalse(node0.isSetterDef());
485:       assertFalse(node0.isTry());
486:       assertFalse(node0.isDelProp());
487:       assertFalse(node0.isIf());
488:       assertFalse(node0.isFor());
489:       assertFalse(node0.isNull());
490:       assertFalse(node0.isEmpty());
491:       assertFalse(node0.isNE());
492:       assertFalse(node0.isCatch());
493:       assertFalse(node0.isCall());
494:       assertFalse(node0.isVoid());
495:       assertFalse(node0.isName());
496:       assertFalse(node0.isWhile());
497:       assertFalse(node0.isContinue());
498:       assertFalse(node0.isIn());
499:       assertFalse(node0.isReturn());
500:       assertFalse(node0.isInc());
501:       assertFalse(node0.isThrow());
502:       assertFalse(node0.isFalse());
503:       assertFalse(node0.isCast());
504:       assertFalse(node0.isAnd());
505:       assertEquals(0, node0.getLineno());
506:       assertFalse(node0.isWith());
507:       assertFalse(node0.isScript());
508:       assertFalse(node0.isObjectLit());
509:       assertEquals(77, node0.getSourcePosition());
510:       assertFalse(node0.isNot());
511:       assertFalse(node0.isGetProp());
512:       assertFalse(node0.hasOneChild());
513:       assertFalse(node0.isBreak());
514:       assertFalse(node0.hasChildren());
515:       assertFalse(node0.isThis());
516:       assertFalse(node0.isTypeOf());
517:       assertFalse(node0.isComma());
518:       assertFalse(node0.isDec());
519:       assertFalse(node0.isAssign());
520:       assertFalse(node0.isOr());
521:       assertFalse(node0.isInstanceOf());
522:       assertFalse(node0.isExprResult());
523:       assertFalse(node0.isGetElem());
524:       assertFalse(node0.hasMoreThanOneChild());
525:       assertFalse(node0.isHook());
526:       assertFalse(node0.isAssignAdd());
527:       assertFalse(node0.isBlock());
528:       assertFalse(node0.isVar());
529:       assertFalse(node0.isAdd());
530:       assertTrue(node0.isString());
531:       assertFalse(node0.isCase());
532:       assertFalse(node0.isNew());
533:       assertFalse(node0.isDo());
534:       assertFalse(node0.isGetterDef());
535:       assertFalse(node0.isNumber());
536:       assertFalse(node0.isStringKey());
537:       assertEquals(77, node0.getCharno());
538:       assertFalse(node0.isLabel());
539:       assertFalse(node0.isParamList());
540:       assertFalse(node0.isSwitch());
541:       assertFalse(node0.isArrayLit());
542:       assertFalse(node0.isLabelName());
543:       
544:       node0.addSuppression("");
545:       assertEquals(40, Node.ORIGINALNAME_PROP);
546:       assertEquals(57, Node.REFLECTED_OBJECT);
547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
548:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
549:       assertEquals(52, Node.LENGTH);
550:       assertEquals(8, Node.FLAG_NO_THROWS);
551:       assertEquals(50, Node.FREE_CALL);
552:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
553:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
554:       assertEquals(39, Node.EMPTY_BLOCK);
555:       assertEquals(15, Node.NO_SIDE_EFFECTS);
556:       assertEquals(57, Node.LAST_PROP);
557:       assertEquals(1, Node.DECR_FLAG);
558:       assertEquals(51, Node.STATIC_SOURCE_FILE);
559:       assertEquals(30, Node.VAR_ARGS_NAME);
560:       assertEquals(46, Node.IS_NAMESPACE);
561:       assertEquals(54, Node.SLASH_V);
562:       assertEquals(43, Node.IS_CONSTANT_NAME);
563:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
564:       assertEquals(29, Node.JSDOC_INFO_PROP);
565:       assertEquals(47, Node.IS_DISPATCHER);
566:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
567:       assertEquals(2, Node.POST_FLAG);
568:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
569:       assertEquals(53, Node.INPUT_ID);
570:       assertEquals(32, Node.INCRDECR_PROP);
571:       assertEquals(55, Node.INFERRED_FUNCTION);
572:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
573:       assertEquals(12, Node.COLUMN_BITS);
574:       assertEquals(36, Node.QUOTED_PROP);
575:       assertEquals(4095, Node.COLUMN_MASK);
576:       assertEquals(48, Node.DIRECTIVES);
577:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
578:       assertEquals(37, Node.OPT_ARG_NAME);
579:       assertEquals(56, Node.CHANGE_TIME);
580:       assertEquals(49, Node.DIRECT_EVAL);
581:       assertFalse(node0.isDefaultCase());
582:       assertEquals(40, node0.getType());
583:       assertFalse(node0.isFunction());
584:       assertFalse(node0.isDebugger());
585:       assertFalse(node0.isTrue());
586:       assertFalse(node0.isRegExp());
587:       assertEquals(0, node0.getChildCount());
588:       assertFalse(node0.isSetterDef());
589:       assertFalse(node0.isTry());
590:       assertFalse(node0.isDelProp());
591:       assertFalse(node0.isIf());
592:       assertFalse(node0.isFor());
593:       assertFalse(node0.isNull());
594:       assertFalse(node0.isEmpty());
595:       assertFalse(node0.isNE());
596:       assertFalse(node0.isCatch());
597:       assertFalse(node0.isCall());
598:       assertFalse(node0.isVoid());
599:       assertFalse(node0.isName());
600:       assertFalse(node0.isWhile());
601:       assertFalse(node0.isContinue());
602:       assertFalse(node0.isIn());
603:       assertFalse(node0.isReturn());
604:       assertFalse(node0.isInc());
605:       assertFalse(node0.isThrow());
606:       assertFalse(node0.isFalse());
607:       assertFalse(node0.isCast());
608:       assertFalse(node0.isAnd());
609:       assertEquals(0, node0.getLineno());
610:       assertFalse(node0.isWith());
611:       assertFalse(node0.isScript());
612:       assertFalse(node0.isObjectLit());
613:       assertEquals(77, node0.getSourcePosition());
614:       assertFalse(node0.isNot());
615:       assertFalse(node0.isGetProp());
616:       assertFalse(node0.hasOneChild());
617:       assertFalse(node0.isBreak());
618:       assertFalse(node0.hasChildren());
619:       assertFalse(node0.isThis());
620:       assertFalse(node0.isTypeOf());
621:       assertFalse(node0.isComma());
622:       assertFalse(node0.isDec());
623:       assertFalse(node0.isAssign());
624:       assertFalse(node0.isOr());
625:       assertFalse(node0.isInstanceOf());
626:       assertFalse(node0.isExprResult());
627:       assertFalse(node0.isGetElem());
628:       assertFalse(node0.hasMoreThanOneChild());
629:       assertFalse(node0.isHook());
630:       assertFalse(node0.isAssignAdd());
631:       assertFalse(node0.isBlock());
632:       assertFalse(node0.isVar());
633:       assertFalse(node0.isAdd());
634:       assertTrue(node0.isString());
635:       assertFalse(node0.isCase());
636:       assertFalse(node0.isNew());
637:       assertFalse(node0.isDo());
638:       assertFalse(node0.isGetterDef());
639:       assertFalse(node0.isNumber());
640:       assertFalse(node0.isStringKey());
641:       assertEquals(77, node0.getCharno());
642:       assertFalse(node0.isLabel());
643:       assertFalse(node0.isParamList());
644:       assertFalse(node0.isSwitch());
645:       assertFalse(node0.isArrayLit());
646:       assertFalse(node0.isLabelName());
647:       
648:       boolean boolean1 = node0.mayMutateArguments();
649:       assertTrue(boolean1);
650:       assertEquals(40, Node.ORIGINALNAME_PROP);
651:       assertEquals(57, Node.REFLECTED_OBJECT);
652:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
653:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
654:       assertEquals(52, Node.LENGTH);
655:       assertEquals(8, Node.FLAG_NO_THROWS);
656:       assertEquals(50, Node.FREE_CALL);
657:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
658:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
659:       assertEquals(39, Node.EMPTY_BLOCK);
660:       assertEquals(15, Node.NO_SIDE_EFFECTS);
661:       assertEquals(57, Node.LAST_PROP);
662:       assertEquals(1, Node.DECR_FLAG);
663:       assertEquals(51, Node.STATIC_SOURCE_FILE);
664:       assertEquals(30, Node.VAR_ARGS_NAME);
665:       assertEquals(46, Node.IS_NAMESPACE);
666:       assertEquals(54, Node.SLASH_V);
667:       assertEquals(43, Node.IS_CONSTANT_NAME);
668:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
669:       assertEquals(29, Node.JSDOC_INFO_PROP);
670:       assertEquals(47, Node.IS_DISPATCHER);
671:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
672:       assertEquals(2, Node.POST_FLAG);
673:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
674:       assertEquals(53, Node.INPUT_ID);
675:       assertEquals(32, Node.INCRDECR_PROP);
676:       assertEquals(55, Node.INFERRED_FUNCTION);
677:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
678:       assertEquals(12, Node.COLUMN_BITS);
679:       assertEquals(36, Node.QUOTED_PROP);
680:       assertEquals(4095, Node.COLUMN_MASK);
681:       assertEquals(48, Node.DIRECTIVES);
682:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
683:       assertEquals(37, Node.OPT_ARG_NAME);
684:       assertEquals(56, Node.CHANGE_TIME);
685:       assertEquals(49, Node.DIRECT_EVAL);
686:       assertTrue(boolean1 == boolean0);
687:       assertFalse(node0.isDefaultCase());
688:       assertEquals(40, node0.getType());
689:       assertFalse(node0.isFunction());
690:       assertFalse(node0.isDebugger());
691:       assertFalse(node0.isTrue());
692:       assertFalse(node0.isRegExp());
693:       assertEquals(0, node0.getChildCount());
694:       assertFalse(node0.isSetterDef());
695:       assertFalse(node0.isTry());
696:       assertFalse(node0.isDelProp());
697:       assertFalse(node0.isIf());
698:       assertFalse(node0.isFor());
699:       assertFalse(node0.isNull());
700:       assertFalse(node0.isEmpty());
701:       assertFalse(node0.isNE());
702:       assertFalse(node0.isCatch());
703:       assertFalse(node0.isCall());
704:       assertFalse(node0.isVoid());
705:       assertFalse(node0.isName());
706:       assertFalse(node0.isWhile());
707:       assertFalse(node0.isContinue());
708:       assertFalse(node0.isIn());
709:       assertFalse(node0.isReturn());
710:       assertFalse(node0.isInc());
711:       assertFalse(node0.isThrow());
712:       assertFalse(node0.isFalse());
713:       assertFalse(node0.isCast());
714:       assertFalse(node0.isAnd());
715:       assertEquals(0, node0.getLineno());
716:       assertFalse(node0.isWith());
717:       assertFalse(node0.isScript());
718:       assertFalse(node0.isObjectLit());
719:       assertEquals(77, node0.getSourcePosition());
720:       assertFalse(node0.isNot());
721:       assertFalse(node0.isGetProp());
722:       assertFalse(node0.hasOneChild());
723:       assertFalse(node0.isBreak());
724:       assertFalse(node0.hasChildren());
725:       assertFalse(node0.isThis());
726:       assertFalse(node0.isTypeOf());
727:       assertFalse(node0.isComma());
728:       assertFalse(node0.isDec());
729:       assertFalse(node0.isAssign());
730:       assertFalse(node0.isOr());
731:       assertFalse(node0.isInstanceOf());
732:       assertFalse(node0.isExprResult());
733:       assertFalse(node0.isGetElem());
734:       assertFalse(node0.hasMoreThanOneChild());
735:       assertFalse(node0.isHook());
736:       assertFalse(node0.isAssignAdd());
737:       assertFalse(node0.isBlock());
738:       assertFalse(node0.isVar());
739:       assertFalse(node0.isAdd());
740:       assertTrue(node0.isString());
741:       assertFalse(node0.isCase());
742:       assertFalse(node0.isNew());
743:       assertFalse(node0.isDo());
744:       assertFalse(node0.isGetterDef());
745:       assertFalse(node0.isNumber());
746:       assertFalse(node0.isStringKey());
747:       assertEquals(77, node0.getCharno());
748:       assertFalse(node0.isLabel());
749:       assertFalse(node0.isParamList());
750:       assertFalse(node0.isSwitch());
751:       assertFalse(node0.isArrayLit());
752:       assertFalse(node0.isLabelName());
753:       
754:       Node node1 = Node.newString(21, "", 3, 30);
755:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
756:       assertEquals(36, Node.QUOTED_PROP);
757:       assertEquals(56, Node.CHANGE_TIME);
758:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
759:       assertEquals(43, Node.IS_CONSTANT_NAME);
760:       assertEquals(37, Node.OPT_ARG_NAME);
761:       assertEquals(55, Node.INFERRED_FUNCTION);
762:       assertEquals(2, Node.POST_FLAG);
763:       assertEquals(30, Node.VAR_ARGS_NAME);
764:       assertEquals(15, Node.NO_SIDE_EFFECTS);
765:       assertEquals(57, Node.LAST_PROP);
766:       assertEquals(47, Node.IS_DISPATCHER);
767:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
768:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
769:       assertEquals(8, Node.FLAG_NO_THROWS);
770:       assertEquals(29, Node.JSDOC_INFO_PROP);
771:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
772:       assertEquals(53, Node.INPUT_ID);
773:       assertEquals(39, Node.EMPTY_BLOCK);
774:       assertEquals(57, Node.REFLECTED_OBJECT);
775:       assertEquals(52, Node.LENGTH);
776:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
777:       assertEquals(50, Node.FREE_CALL);
778:       assertEquals(54, Node.SLASH_V);
779:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
780:       assertEquals(48, Node.DIRECTIVES);
781:       assertEquals(40, Node.ORIGINALNAME_PROP);
782:       assertEquals(49, Node.DIRECT_EVAL);
783:       assertEquals(12, Node.COLUMN_BITS);
784:       assertEquals(32, Node.INCRDECR_PROP);
785:       assertEquals(46, Node.IS_NAMESPACE);
786:       assertEquals(4095, Node.COLUMN_MASK);
787:       assertEquals(51, Node.STATIC_SOURCE_FILE);
788:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
789:       assertEquals(1, Node.DECR_FLAG);
790:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
791:       assertNotSame(node1, node0);
792:       assertFalse(node1.equals((Object)node0));
793:       assertFalse(node1.isSwitch());
794:       assertFalse(node1.isDelProp());
795:       assertFalse(node1.isGetterDef());
796:       assertFalse(node1.isFor());
797:       assertFalse(node1.isThis());
798:       assertFalse(node1.isHook());
799:       assertFalse(node1.isDebugger());
800:       assertFalse(node1.isTry());
801:       assertFalse(node1.isString());
802:       assertFalse(node1.isCase());
803:       assertFalse(node1.isGetProp());
804:       assertEquals(12318, node1.getSourcePosition());
805:       assertFalse(node1.isAnd());
806:       assertFalse(node1.isObjectLit());
807:       assertFalse(node1.isCatch());
808:       assertFalse(node1.isNot());
809:       assertFalse(node1.isWith());
810:       assertFalse(node1.isRegExp());
811:       assertFalse(node1.isFunction());
812:       assertFalse(node1.isInstanceOf());
813:       assertTrue(node1.isAdd());
814:       assertFalse(node1.isThrow());
815:       assertFalse(node1.isCast());
816:       assertFalse(node1.isFalse());
817:       assertFalse(node1.isIf());
818:       assertFalse(node1.isNE());
819:       assertFalse(node1.isIn());
820:       assertFalse(node1.isInc());
821:       assertFalse(node1.isSetterDef());
822:       assertFalse(node1.isContinue());
823:       assertFalse(node1.isDo());
824:       assertFalse(node1.hasMoreThanOneChild());
825:       assertFalse(node1.isWhile());
826:       assertFalse(node1.isLabel());
827:       assertFalse(node1.isReturn());
828:       assertEquals(3, node1.getLineno());
829:       assertFalse(node1.isTypeOf());
830:       assertFalse(node1.isGetElem());
831:       assertFalse(node1.isCall());
832:       assertFalse(node1.isStringKey());
833:       assertFalse(node1.isLabelName());
834:       assertFalse(node1.isAssign());
835:       assertFalse(node1.hasChildren());
836:       assertFalse(node1.isDec());
837:       assertFalse(node1.isBlock());
838:       assertEquals(30, node1.getCharno());
839:       assertFalse(node1.isNumber());
840:       assertFalse(node1.hasOneChild());
841:       assertFalse(node1.isScript());
842:       assertEquals(0, node1.getChildCount());
843:       assertFalse(node1.isExprResult());
844:       assertFalse(node1.isTrue());
845:       assertFalse(node1.isVoid());
846:       assertFalse(node1.isComma());
847:       assertFalse(node1.isParamList());
848:       assertFalse(node1.isBreak());
849:       assertFalse(node1.isArrayLit());
850:       assertFalse(node1.isName());
851:       assertEquals(21, node1.getType());
852:       assertFalse(node1.isNull());
853:       assertFalse(node1.isVar());
854:       assertFalse(node1.isNew());
855:       assertFalse(node1.isAssignAdd());
856:       assertFalse(node1.isOr());
857:       assertFalse(node1.isDefaultCase());
858:       assertFalse(node1.isEmpty());
859:       
860:       node0.addChildrenToBack(node1);
861:       assertEquals(40, Node.ORIGINALNAME_PROP);
862:       assertEquals(57, Node.REFLECTED_OBJECT);
863:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
864:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
865:       assertEquals(52, Node.LENGTH);
866:       assertEquals(8, Node.FLAG_NO_THROWS);
867:       assertEquals(50, Node.FREE_CALL);
868:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
869:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
870:       assertEquals(39, Node.EMPTY_BLOCK);
871:       assertEquals(15, Node.NO_SIDE_EFFECTS);
872:       assertEquals(57, Node.LAST_PROP);
873:       assertEquals(1, Node.DECR_FLAG);
874:       assertEquals(51, Node.STATIC_SOURCE_FILE);
875:       assertEquals(30, Node.VAR_ARGS_NAME);
876:       assertEquals(46, Node.IS_NAMESPACE);
877:       assertEquals(54, Node.SLASH_V);
878:       assertEquals(43, Node.IS_CONSTANT_NAME);
879:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
880:       assertEquals(29, Node.JSDOC_INFO_PROP);
881:       assertEquals(47, Node.IS_DISPATCHER);
882:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
883:       assertEquals(2, Node.POST_FLAG);
884:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
885:       assertEquals(53, Node.INPUT_ID);
886:       assertEquals(32, Node.INCRDECR_PROP);
887:       assertEquals(55, Node.INFERRED_FUNCTION);
888:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
889:       assertEquals(12, Node.COLUMN_BITS);
890:       assertEquals(36, Node.QUOTED_PROP);
891:       assertEquals(4095, Node.COLUMN_MASK);
892:       assertEquals(48, Node.DIRECTIVES);
893:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
894:       assertEquals(37, Node.OPT_ARG_NAME);
895:       assertEquals(56, Node.CHANGE_TIME);
896:       assertEquals(49, Node.DIRECT_EVAL);
897:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
898:       assertEquals(36, Node.QUOTED_PROP);
899:       assertEquals(56, Node.CHANGE_TIME);
900:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
901:       assertEquals(43, Node.IS_CONSTANT_NAME);
902:       assertEquals(37, Node.OPT_ARG_NAME);
903:       assertEquals(55, Node.INFERRED_FUNCTION);
904:       assertEquals(2, Node.POST_FLAG);
905:       assertEquals(30, Node.VAR_ARGS_NAME);
906:       assertEquals(15, Node.NO_SIDE_EFFECTS);
907:       assertEquals(57, Node.LAST_PROP);
908:       assertEquals(47, Node.IS_DISPATCHER);
909:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
910:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
911:       assertEquals(8, Node.FLAG_NO_THROWS);
912:       assertEquals(29, Node.JSDOC_INFO_PROP);
913:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
914:       assertEquals(53, Node.INPUT_ID);
915:       assertEquals(39, Node.EMPTY_BLOCK);
916:       assertEquals(57, Node.REFLECTED_OBJECT);
917:       assertEquals(52, Node.LENGTH);
918:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
919:       assertEquals(50, Node.FREE_CALL);
920:       assertEquals(54, Node.SLASH_V);
921:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
922:       assertEquals(48, Node.DIRECTIVES);
923:       assertEquals(40, Node.ORIGINALNAME_PROP);
924:       assertEquals(49, Node.DIRECT_EVAL);
925:       assertEquals(12, Node.COLUMN_BITS);
926:       assertEquals(32, Node.INCRDECR_PROP);
927:       assertEquals(46, Node.IS_NAMESPACE);
928:       assertEquals(4095, Node.COLUMN_MASK);
929:       assertEquals(51, Node.STATIC_SOURCE_FILE);
930:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
931:       assertEquals(1, Node.DECR_FLAG);
932:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
933:       assertNotSame(node0, node1);
934:       assertNotSame(node1, node0);
935:       assertFalse(node0.equals((Object)node1));
936:       assertFalse(node1.equals((Object)node0));
937:       assertFalse(node0.isDefaultCase());
938:       assertEquals(40, node0.getType());
939:       assertFalse(node0.isFunction());
940:       assertFalse(node0.isDebugger());
941:       assertFalse(node0.isTrue());
942:       assertFalse(node0.isRegExp());
943:       assertFalse(node0.isSetterDef());
944:       assertFalse(node0.isTry());
945:       assertFalse(node0.isDelProp());
946:       assertTrue(node0.hasOneChild());
947:       assertFalse(node0.isIf());
948:       assertFalse(node0.isFor());
949:       assertFalse(node0.isNull());
950:       assertFalse(node0.isEmpty());
951:       assertFalse(node0.isNE());
952:       assertFalse(node0.isCatch());
953:       assertTrue(node0.hasChildren());
954:       assertFalse(node0.isCall());
955:       assertFalse(node0.isVoid());
956:       assertFalse(node0.isName());
957:       assertFalse(node0.isWhile());
958:       assertFalse(node0.isContinue());
959:       assertFalse(node0.isIn());
960:       assertFalse(node0.isReturn());
961:       assertFalse(node0.isInc());
962:       assertFalse(node0.isThrow());
963:       assertFalse(node0.isFalse());
964:       assertFalse(node0.isCast());
965:       assertFalse(node0.isAnd());
966:       assertEquals(0, node0.getLineno());
967:       assertFalse(node0.isWith());
968:       assertFalse(node0.isScript());
969:       assertFalse(node0.isObjectLit());
970:       assertEquals(77, node0.getSourcePosition());
971:       assertFalse(node0.isNot());
972:       assertFalse(node0.isGetProp());
973:       assertFalse(node0.isBreak());
974:       assertFalse(node0.isThis());
975:       assertFalse(node0.isTypeOf());
976:       assertFalse(node0.isComma());
977:       assertFalse(node0.isDec());
978:       assertFalse(node0.isAssign());
979:       assertFalse(node0.isOr());
980:       assertFalse(node0.isInstanceOf());
981:       assertFalse(node0.isExprResult());
982:       assertFalse(node0.isGetElem());
983:       assertFalse(node0.hasMoreThanOneChild());
984:       assertEquals(1, node0.getChildCount());
985:       assertFalse(node0.isHook());
986:       assertFalse(node0.isAssignAdd());
987:       assertFalse(node0.isBlock());
988:       assertFalse(node0.isVar());
989:       assertFalse(node0.isAdd());
990:       assertTrue(node0.isString());
991:       assertFalse(node0.isCase());
992:       assertFalse(node0.isNew());
993:       assertFalse(node0.isDo());
994:       assertFalse(node0.isGetterDef());
995:       assertFalse(node0.isNumber());
996:       assertFalse(node0.isStringKey());
997:       assertEquals(77, node0.getCharno());
998:       assertFalse(node0.isLabel());
999:       assertFalse(node0.isParamList());
1000:       assertFalse(node0.isSwitch());
1001:       assertFalse(node0.isArrayLit());
1002:       assertFalse(node0.isLabelName());
1003:       assertFalse(node1.isSwitch());
1004:       assertFalse(node1.isDelProp());
1005:       assertFalse(node1.isGetterDef());
1006:       assertFalse(node1.isFor());
1007:       assertFalse(node1.isThis());
1008:       assertFalse(node1.isHook());
1009:       assertFalse(node1.isDebugger());
1010:       assertFalse(node1.isTry());
1011:       assertFalse(node1.isString());
1012:       assertFalse(node1.isCase());
1013:       assertFalse(node1.isGetProp());
1014:       assertEquals(12318, node1.getSourcePosition());
1015:       assertFalse(node1.isAnd());
1016:       assertFalse(node1.isObjectLit());
1017:       assertFalse(node1.isCatch());
1018:       assertFalse(node1.isNot());
1019:       assertFalse(node1.isWith());
1020:       assertFalse(node1.isRegExp());
1021:       assertFalse(node1.isFunction());
1022:       assertFalse(node1.isInstanceOf());
1023:       assertTrue(node1.isAdd());
1024:       assertFalse(node1.isThrow());
1025:       assertFalse(node1.isCast());
1026:       assertFalse(node1.isFalse());
1027:       assertFalse(node1.isIf());
1028:       assertFalse(node1.isNE());
1029:       assertFalse(node1.isIn());
1030:       assertFalse(node1.isInc());
1031:       assertFalse(node1.isSetterDef());
1032:       assertFalse(node1.isContinue());
1033:       assertFalse(node1.isDo());
1034:       assertFalse(node1.hasMoreThanOneChild());
1035:       assertFalse(node1.isWhile());
1036:       assertFalse(node1.isLabel());
1037:       assertFalse(node1.isReturn());
1038:       assertEquals(3, node1.getLineno());
1039:       assertFalse(node1.isTypeOf());
1040:       assertFalse(node1.isGetElem());
1041:       assertFalse(node1.isCall());
1042:       assertFalse(node1.isStringKey());
1043:       assertFalse(node1.isLabelName());
1044:       assertFalse(node1.isAssign());
1045:       assertFalse(node1.hasChildren());
1046:       assertFalse(node1.isDec());
1047:       assertFalse(node1.isBlock());
1048:       assertEquals(30, node1.getCharno());
1049:       assertFalse(node1.isNumber());
1050:       assertFalse(node1.hasOneChild());
1051:       assertFalse(node1.isScript());
1052:       assertEquals(0, node1.getChildCount());
1053:       assertFalse(node1.isExprResult());
1054:       assertFalse(node1.isTrue());
1055:       assertFalse(node1.isVoid());
1056:       assertFalse(node1.isComma());
1057:       assertFalse(node1.isParamList());
1058:       assertFalse(node1.isBreak());
1059:       assertFalse(node1.isArrayLit());
1060:       assertFalse(node1.isName());
1061:       assertEquals(21, node1.getType());
1062:       assertFalse(node1.isNull());
1063:       assertFalse(node1.isVar());
1064:       assertFalse(node1.isNew());
1065:       assertFalse(node1.isAssignAdd());
1066:       assertFalse(node1.isOr());
1067:       assertFalse(node1.isDefaultCase());
1068:       assertFalse(node1.isEmpty());
1069:       
1070:       boolean boolean2 = node1.isQualifiedName();
1071:       assertFalse(boolean2);
1072:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1073:       assertEquals(36, Node.QUOTED_PROP);
1074:       assertEquals(56, Node.CHANGE_TIME);
1075:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1076:       assertEquals(43, Node.IS_CONSTANT_NAME);
1077:       assertEquals(37, Node.OPT_ARG_NAME);
1078:       assertEquals(55, Node.INFERRED_FUNCTION);
1079:       assertEquals(2, Node.POST_FLAG);
1080:       assertEquals(30, Node.VAR_ARGS_NAME);
1081:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1082:       assertEquals(57, Node.LAST_PROP);
1083:       assertEquals(47, Node.IS_DISPATCHER);
1084:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1085:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1086:       assertEquals(8, Node.FLAG_NO_THROWS);
1087:       assertEquals(29, Node.JSDOC_INFO_PROP);
1088:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1089:       assertEquals(53, Node.INPUT_ID);
1090:       assertEquals(39, Node.EMPTY_BLOCK);
1091:       assertEquals(57, Node.REFLECTED_OBJECT);
1092:       assertEquals(52, Node.LENGTH);
1093:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1094:       assertEquals(50, Node.FREE_CALL);
1095:       assertEquals(54, Node.SLASH_V);
1096:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1097:       assertEquals(48, Node.DIRECTIVES);
1098:       assertEquals(40, Node.ORIGINALNAME_PROP);
1099:       assertEquals(49, Node.DIRECT_EVAL);
1100:       assertEquals(12, Node.COLUMN_BITS);
1101:       assertEquals(32, Node.INCRDECR_PROP);
1102:       assertEquals(46, Node.IS_NAMESPACE);
1103:       assertEquals(4095, Node.COLUMN_MASK);
1104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1105:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1106:       assertEquals(1, Node.DECR_FLAG);
1107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1108:       assertNotSame(node1, node0);
1109:       assertFalse(node1.equals((Object)node0));
1110:       assertFalse(boolean2 == boolean0);
1111:       assertFalse(boolean2 == boolean1);
1112:       assertFalse(node1.isSwitch());
1113:       assertFalse(node1.isDelProp());
1114:       assertFalse(node1.isGetterDef());
1115:       assertFalse(node1.isFor());
1116:       assertFalse(node1.isThis());
1117:       assertFalse(node1.isHook());
1118:       assertFalse(node1.isDebugger());
1119:       assertFalse(node1.isTry());
1120:       assertFalse(node1.isString());
1121:       assertFalse(node1.isCase());
1122:       assertFalse(node1.isGetProp());
1123:       assertEquals(12318, node1.getSourcePosition());
1124:       assertFalse(node1.isAnd());
1125:       assertFalse(node1.isObjectLit());
1126:       assertFalse(node1.isCatch());
1127:       assertFalse(node1.isNot());
1128:       assertFalse(node1.isWith());
1129:       assertFalse(node1.isRegExp());
1130:       assertFalse(node1.isFunction());
1131:       assertFalse(node1.isInstanceOf());
1132:       assertTrue(node1.isAdd());
1133:       assertFalse(node1.isThrow());
1134:       assertFalse(node1.isCast());
1135:       assertFalse(node1.isFalse());
1136:       assertFalse(node1.isIf());
1137:       assertFalse(node1.isNE());
1138:       assertFalse(node1.isIn());
1139:       assertFalse(node1.isInc());
1140:       assertFalse(node1.isSetterDef());
1141:       assertFalse(node1.isContinue());
1142:       assertFalse(node1.isDo());
1143:       assertFalse(node1.hasMoreThanOneChild());
1144:       assertFalse(node1.isWhile());
1145:       assertFalse(node1.isLabel());
1146:       assertFalse(node1.isReturn());
1147:       assertEquals(3, node1.getLineno());
1148:       assertFalse(node1.isTypeOf());
1149:       assertFalse(node1.isGetElem());
1150:       assertFalse(node1.isCall());
1151:       assertFalse(node1.isStringKey());
1152:       assertFalse(node1.isLabelName());
1153:       assertFalse(node1.isAssign());
1154:       assertFalse(node1.hasChildren());
1155:       assertFalse(node1.isDec());
1156:       assertFalse(node1.isBlock());
1157:       assertEquals(30, node1.getCharno());
1158:       assertFalse(node1.isNumber());
1159:       assertFalse(node1.hasOneChild());
1160:       assertFalse(node1.isScript());
1161:       assertEquals(0, node1.getChildCount());
1162:       assertFalse(node1.isExprResult());
1163:       assertFalse(node1.isTrue());
1164:       assertFalse(node1.isVoid());
1165:       assertFalse(node1.isComma());
1166:       assertFalse(node1.isParamList());
1167:       assertFalse(node1.isBreak());
1168:       assertFalse(node1.isArrayLit());
1169:       assertFalse(node1.isName());
1170:       assertEquals(21, node1.getType());
1171:       assertFalse(node1.isNull());
1172:       assertFalse(node1.isVar());
1173:       assertFalse(node1.isNew());
1174:       assertFalse(node1.isAssignAdd());
1175:       assertFalse(node1.isOr());
1176:       assertFalse(node1.isDefaultCase());
1177:       assertFalse(node1.isEmpty());
1178:       
1179:       boolean boolean3 = node1.isDec();
1180:       assertFalse(boolean3);
1181:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1182:       assertEquals(36, Node.QUOTED_PROP);
1183:       assertEquals(56, Node.CHANGE_TIME);
1184:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1185:       assertEquals(43, Node.IS_CONSTANT_NAME);
1186:       assertEquals(37, Node.OPT_ARG_NAME);
1187:       assertEquals(55, Node.INFERRED_FUNCTION);
1188:       assertEquals(2, Node.POST_FLAG);
1189:       assertEquals(30, Node.VAR_ARGS_NAME);
1190:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1191:       assertEquals(57, Node.LAST_PROP);
1192:       assertEquals(47, Node.IS_DISPATCHER);
1193:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1194:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1195:       assertEquals(8, Node.FLAG_NO_THROWS);
1196:       assertEquals(29, Node.JSDOC_INFO_PROP);
1197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1198:       assertEquals(53, Node.INPUT_ID);
1199:       assertEquals(39, Node.EMPTY_BLOCK);
1200:       assertEquals(57, Node.REFLECTED_OBJECT);
1201:       assertEquals(52, Node.LENGTH);
1202:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1203:       assertEquals(50, Node.FREE_CALL);
1204:       assertEquals(54, Node.SLASH_V);
1205:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1206:       assertEquals(48, Node.DIRECTIVES);
1207:       assertEquals(40, Node.ORIGINALNAME_PROP);
1208:       assertEquals(49, Node.DIRECT_EVAL);
1209:       assertEquals(12, Node.COLUMN_BITS);
1210:       assertEquals(32, Node.INCRDECR_PROP);
1211:       assertEquals(46, Node.IS_NAMESPACE);
1212:       assertEquals(4095, Node.COLUMN_MASK);
1213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1214:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1215:       assertEquals(1, Node.DECR_FLAG);
1216:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1217:       assertNotSame(node1, node0);
1218:       assertFalse(node1.equals((Object)node0));
1219:       assertTrue(boolean3 == boolean2);
1220:       assertFalse(boolean3 == boolean0);
1221:       assertFalse(boolean3 == boolean1);
1222:       assertFalse(node1.isSwitch());
1223:       assertFalse(node1.isDelProp());
1224:       assertFalse(node1.isGetterDef());
1225:       assertFalse(node1.isFor());
1226:       assertFalse(node1.isThis());
1227:       assertFalse(node1.isHook());
1228:       assertFalse(node1.isDebugger());
1229:       assertFalse(node1.isTry());
1230:       assertFalse(node1.isString());
1231:       assertFalse(node1.isCase());
1232:       assertFalse(node1.isGetProp());
1233:       assertEquals(12318, node1.getSourcePosition());
1234:       assertFalse(node1.isAnd());
1235:       assertFalse(node1.isObjectLit());
1236:       assertFalse(node1.isCatch());
1237:       assertFalse(node1.isNot());
1238:       assertFalse(node1.isWith());
1239:       assertFalse(node1.isRegExp());
1240:       assertFalse(node1.isFunction());
1241:       assertFalse(node1.isInstanceOf());
1242:       assertTrue(node1.isAdd());
1243:       assertFalse(node1.isThrow());
1244:       assertFalse(node1.isCast());
1245:       assertFalse(node1.isFalse());
1246:       assertFalse(node1.isIf());
1247:       assertFalse(node1.isNE());
1248:       assertFalse(node1.isIn());
1249:       assertFalse(node1.isInc());
1250:       assertFalse(node1.isSetterDef());
1251:       assertFalse(node1.isContinue());
1252:       assertFalse(node1.isDo());
1253:       assertFalse(node1.hasMoreThanOneChild());
1254:       assertFalse(node1.isWhile());
1255:       assertFalse(node1.isLabel());
1256:       assertFalse(node1.isReturn());
1257:       assertEquals(3, node1.getLineno());
1258:       assertFalse(node1.isTypeOf());
1259:       assertFalse(node1.isGetElem());
1260:       assertFalse(node1.isCall());
1261:       assertFalse(node1.isStringKey());
1262:       assertFalse(node1.isLabelName());
1263:       assertFalse(node1.isAssign());
1264:       assertFalse(node1.hasChildren());
1265:       assertFalse(node1.isDec());
1266:       assertFalse(node1.isBlock());
1267:       assertEquals(30, node1.getCharno());
1268:       assertFalse(node1.isNumber());
1269:       assertFalse(node1.hasOneChild());
1270:       assertFalse(node1.isScript());
1271:       assertEquals(0, node1.getChildCount());
1272:       assertFalse(node1.isExprResult());
1273:       assertFalse(node1.isTrue());
1274:       assertFalse(node1.isVoid());
1275:       assertFalse(node1.isComma());
1276:       assertFalse(node1.isParamList());
1277:       assertFalse(node1.isBreak());
1278:       assertFalse(node1.isArrayLit());
1279:       assertFalse(node1.isName());
1280:       assertEquals(21, node1.getType());
1281:       assertFalse(node1.isNull());
1282:       assertFalse(node1.isVar());
1283:       assertFalse(node1.isNew());
1284:       assertFalse(node1.isAssignAdd());
1285:       assertFalse(node1.isOr());
1286:       assertFalse(node1.isDefaultCase());
1287:       assertFalse(node1.isEmpty());
1288:       
1289:       Node node2 = node0.useSourceInfoIfMissingFrom(node1);
1290:       assertEquals(40, Node.ORIGINALNAME_PROP);
1291:       assertEquals(57, Node.REFLECTED_OBJECT);
1292:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1293:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1294:       assertEquals(52, Node.LENGTH);
1295:       assertEquals(8, Node.FLAG_NO_THROWS);
1296:       assertEquals(50, Node.FREE_CALL);
1297:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1298:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1299:       assertEquals(39, Node.EMPTY_BLOCK);
1300:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1301:       assertEquals(57, Node.LAST_PROP);
1302:       assertEquals(1, Node.DECR_FLAG);
1303:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1304:       assertEquals(30, Node.VAR_ARGS_NAME);
1305:       assertEquals(46, Node.IS_NAMESPACE);
1306:       assertEquals(54, Node.SLASH_V);
1307:       assertEquals(43, Node.IS_CONSTANT_NAME);
1308:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1309:       assertEquals(29, Node.JSDOC_INFO_PROP);
1310:       assertEquals(47, Node.IS_DISPATCHER);
1311:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1312:       assertEquals(2, Node.POST_FLAG);
1313:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1314:       assertEquals(53, Node.INPUT_ID);
1315:       assertEquals(32, Node.INCRDECR_PROP);
1316:       assertEquals(55, Node.INFERRED_FUNCTION);
1317:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1318:       assertEquals(12, Node.COLUMN_BITS);
1319:       assertEquals(36, Node.QUOTED_PROP);
1320:       assertEquals(4095, Node.COLUMN_MASK);
1321:       assertEquals(48, Node.DIRECTIVES);
1322:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1323:       assertEquals(37, Node.OPT_ARG_NAME);
1324:       assertEquals(56, Node.CHANGE_TIME);
1325:       assertEquals(49, Node.DIRECT_EVAL);
1326:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1327:       assertEquals(36, Node.QUOTED_PROP);
1328:       assertEquals(56, Node.CHANGE_TIME);
1329:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1330:       assertEquals(43, Node.IS_CONSTANT_NAME);
1331:       assertEquals(37, Node.OPT_ARG_NAME);
1332:       assertEquals(55, Node.INFERRED_FUNCTION);
1333:       assertEquals(2, Node.POST_FLAG);
1334:       assertEquals(30, Node.VAR_ARGS_NAME);
1335:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1336:       assertEquals(57, Node.LAST_PROP);
1337:       assertEquals(47, Node.IS_DISPATCHER);
1338:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1339:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1340:       assertEquals(8, Node.FLAG_NO_THROWS);
1341:       assertEquals(29, Node.JSDOC_INFO_PROP);
1342:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1343:       assertEquals(53, Node.INPUT_ID);
1344:       assertEquals(39, Node.EMPTY_BLOCK);
1345:       assertEquals(57, Node.REFLECTED_OBJECT);
1346:       assertEquals(52, Node.LENGTH);
1347:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1348:       assertEquals(50, Node.FREE_CALL);
1349:       assertEquals(54, Node.SLASH_V);
1350:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1351:       assertEquals(48, Node.DIRECTIVES);
1352:       assertEquals(40, Node.ORIGINALNAME_PROP);
1353:       assertEquals(49, Node.DIRECT_EVAL);
1354:       assertEquals(12, Node.COLUMN_BITS);
1355:       assertEquals(32, Node.INCRDECR_PROP);
1356:       assertEquals(46, Node.IS_NAMESPACE);
1357:       assertEquals(4095, Node.COLUMN_MASK);
1358:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1359:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1360:       assertEquals(1, Node.DECR_FLAG);
1361:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1362:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1363:       assertEquals(1, Node.DECR_FLAG);
1364:       assertEquals(32, Node.INCRDECR_PROP);
1365:       assertEquals(49, Node.DIRECT_EVAL);
1366:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1367:       assertEquals(37, Node.OPT_ARG_NAME);
1368:       assertEquals(56, Node.CHANGE_TIME);
1369:       assertEquals(46, Node.IS_NAMESPACE);
1370:       assertEquals(54, Node.SLASH_V);
1371:       assertEquals(57, Node.REFLECTED_OBJECT);
1372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1373:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1374:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1375:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1376:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1377:       assertEquals(12, Node.COLUMN_BITS);
1378:       assertEquals(55, Node.INFERRED_FUNCTION);
1379:       assertEquals(4095, Node.COLUMN_MASK);
1380:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1381:       assertEquals(8, Node.FLAG_NO_THROWS);
1382:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1383:       assertEquals(43, Node.IS_CONSTANT_NAME);
1384:       assertEquals(36, Node.QUOTED_PROP);
1385:       assertEquals(48, Node.DIRECTIVES);
1386:       assertEquals(50, Node.FREE_CALL);
1387:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1388:       assertEquals(29, Node.JSDOC_INFO_PROP);
1389:       assertEquals(52, Node.LENGTH);
1390:       assertEquals(40, Node.ORIGINALNAME_PROP);
1391:       assertEquals(53, Node.INPUT_ID);
1392:       assertEquals(2, Node.POST_FLAG);
1393:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1394:       assertEquals(39, Node.EMPTY_BLOCK);
1395:       assertEquals(57, Node.LAST_PROP);
1396:       assertEquals(30, Node.VAR_ARGS_NAME);
1397:       assertEquals(47, Node.IS_DISPATCHER);
1398:       assertNotSame(node0, node1);
1399:       assertSame(node0, node2);
1400:       assertNotSame(node1, node0);
1401:       assertNotSame(node1, node2);
1402:       assertSame(node2, node0);
1403:       assertNotSame(node2, node1);
1404:       assertFalse(node0.equals((Object)node1));
1405:       assertFalse(node1.equals((Object)node0));
1406:       assertFalse(node2.equals((Object)node1));
1407:       assertFalse(node0.isDefaultCase());
1408:       assertEquals(40, node0.getType());
1409:       assertFalse(node0.isFunction());
1410:       assertFalse(node0.isDebugger());
1411:       assertFalse(node0.isTrue());
1412:       assertFalse(node0.isRegExp());
1413:       assertEquals(12318, node0.getSourcePosition());
1414:       assertFalse(node0.isSetterDef());
1415:       assertFalse(node0.isTry());
1416:       assertFalse(node0.isDelProp());
1417:       assertTrue(node0.hasOneChild());
1418:       assertFalse(node0.isIf());
1419:       assertFalse(node0.isFor());
1420:       assertFalse(node0.isNull());
1421:       assertFalse(node0.isEmpty());
1422:       assertFalse(node0.isNE());
1423:       assertFalse(node0.isCatch());
1424:       assertTrue(node0.hasChildren());
1425:       assertFalse(node0.isCall());
1426:       assertFalse(node0.isVoid());
1427:       assertFalse(node0.isName());
1428:       assertFalse(node0.isWhile());
1429:       assertFalse(node0.isContinue());
1430:       assertEquals(30, node0.getCharno());
1431:       assertFalse(node0.isIn());
1432:       assertFalse(node0.isReturn());
1433:       assertFalse(node0.isInc());
1434:       assertFalse(node0.isThrow());
1435:       assertFalse(node0.isFalse());
1436:       assertFalse(node0.isCast());
1437:       assertFalse(node0.isAnd());
1438:       assertFalse(node0.isWith());
1439:       assertFalse(node0.isScript());
1440:       assertFalse(node0.isObjectLit());
1441:       assertFalse(node0.isNot());
1442:       assertFalse(node0.isGetProp());
1443:       assertFalse(node0.isBreak());
1444:       assertEquals(3, node0.getLineno());
1445:       assertFalse(node0.isThis());
1446:       assertFalse(node0.isTypeOf());
1447:       assertFalse(node0.isComma());
1448:       assertFalse(node0.isDec());
1449:       assertFalse(node0.isAssign());
1450:       assertFalse(node0.isOr());
1451:       assertFalse(node0.isInstanceOf());
1452:       assertFalse(node0.isExprResult());
1453:       assertFalse(node0.isGetElem());
1454:       assertFalse(node0.hasMoreThanOneChild());
1455:       assertEquals(1, node0.getChildCount());
1456:       assertFalse(node0.isHook());
1457:       assertFalse(node0.isAssignAdd());
1458:       assertFalse(node0.isBlock());
1459:       assertFalse(node0.isVar());
1460:       assertFalse(node0.isAdd());
1461:       assertTrue(node0.isString());
1462:       assertFalse(node0.isCase());
1463:       assertFalse(node0.isNew());
1464:       assertFalse(node0.isDo());
1465:       assertFalse(node0.isGetterDef());
1466:       assertFalse(node0.isNumber());
1467:       assertFalse(node0.isStringKey());
1468:       assertFalse(node0.isLabel());
1469:       assertFalse(node0.isParamList());
1470:       assertFalse(node0.isSwitch());
1471:       assertFalse(node0.isArrayLit());
1472:       assertFalse(node0.isLabelName());
1473:       assertFalse(node1.isSwitch());
1474:       assertFalse(node1.isDelProp());
1475:       assertFalse(node1.isGetterDef());
1476:       assertFalse(node1.isFor());
1477:       assertFalse(node1.isThis());
1478:       assertFalse(node1.isHook());
1479:       assertFalse(node1.isDebugger());
1480:       assertFalse(node1.isTry());
1481:       assertFalse(node1.isString());
1482:       assertFalse(node1.isCase());
1483:       assertFalse(node1.isGetProp());
1484:       assertEquals(12318, node1.getSourcePosition());
1485:       assertFalse(node1.isAnd());
1486:       assertFalse(node1.isObjectLit());
1487:       assertFalse(node1.isCatch());
1488:       assertFalse(node1.isNot());
1489:       assertFalse(node1.isWith());
1490:       assertFalse(node1.isRegExp());
1491:       assertFalse(node1.isFunction());
1492:       assertFalse(node1.isInstanceOf());
1493:       assertTrue(node1.isAdd());
1494:       assertFalse(node1.isThrow());
1495:       assertFalse(node1.isCast());
1496:       assertFalse(node1.isFalse());
1497:       assertFalse(node1.isIf());
1498:       assertFalse(node1.isNE());
1499:       assertFalse(node1.isIn());
1500:       assertFalse(node1.isInc());
1501:       assertFalse(node1.isSetterDef());
1502:       assertFalse(node1.isContinue());
1503:       assertFalse(node1.isDo());
1504:       assertFalse(node1.hasMoreThanOneChild());
1505:       assertFalse(node1.isWhile());
1506:       assertFalse(node1.isLabel());
1507:       assertFalse(node1.isReturn());
1508:       assertEquals(3, node1.getLineno());
1509:       assertFalse(node1.isTypeOf());
1510:       assertFalse(node1.isGetElem());
1511:       assertFalse(node1.isCall());
1512:       assertFalse(node1.isStringKey());
1513:       assertFalse(node1.isLabelName());
1514:       assertFalse(node1.isAssign());
1515:       assertFalse(node1.hasChildren());
1516:       assertFalse(node1.isDec());
1517:       assertFalse(node1.isBlock());
1518:       assertEquals(30, node1.getCharno());
1519:       assertFalse(node1.isNumber());
1520:       assertFalse(node1.hasOneChild());
1521:       assertFalse(node1.isScript());
1522:       assertEquals(0, node1.getChildCount());
1523:       assertFalse(node1.isExprResult());
1524:       assertFalse(node1.isTrue());
1525:       assertFalse(node1.isVoid());
1526:       assertFalse(node1.isComma());
1527:       assertFalse(node1.isParamList());
1528:       assertFalse(node1.isBreak());
1529:       assertFalse(node1.isArrayLit());
1530:       assertFalse(node1.isName());
1531:       assertEquals(21, node1.getType());
1532:       assertFalse(node1.isNull());
1533:       assertFalse(node1.isVar());
1534:       assertFalse(node1.isNew());
1535:       assertFalse(node1.isAssignAdd());
1536:       assertFalse(node1.isOr());
1537:       assertFalse(node1.isDefaultCase());
1538:       assertFalse(node1.isEmpty());
1539:       assertFalse(node2.isFalse());
1540:       assertFalse(node2.isBreak());
1541:       assertFalse(node2.isSwitch());
1542:       assertFalse(node2.isAnd());
1543:       assertFalse(node2.isIn());
1544:       assertFalse(node2.isInc());
1545:       assertFalse(node2.isThrow());
1546:       assertFalse(node2.isFor());
1547:       assertEquals(12318, node2.getSourcePosition());
1548:       assertFalse(node2.isGetterDef());
1549:       assertFalse(node2.isLabelName());
1550:       assertFalse(node2.isArrayLit());
1551:       assertFalse(node2.isNumber());
1552:       assertEquals(3, node2.getLineno());
1553:       assertFalse(node2.isIf());
1554:       assertFalse(node2.isNE());
1555:       assertFalse(node2.isCase());
1556:       assertFalse(node2.isWith());
1557:       assertFalse(node2.isScript());
1558:       assertFalse(node2.isRegExp());
1559:       assertFalse(node2.hasMoreThanOneChild());
1560:       assertFalse(node2.isInstanceOf());
1561:       assertFalse(node2.isCatch());
1562:       assertTrue(node2.hasChildren());
1563:       assertTrue(node2.isString());
1564:       assertFalse(node2.isBlock());
1565:       assertEquals(1, node2.getChildCount());
1566:       assertFalse(node2.isTry());
1567:       assertFalse(node2.isThis());
1568:       assertFalse(node2.isHook());
1569:       assertFalse(node2.isName());
1570:       assertFalse(node2.isSetterDef());
1571:       assertFalse(node2.isCall());
1572:       assertEquals(30, node2.getCharno());
1573:       assertFalse(node2.isNull());
1574:       assertFalse(node2.isParamList());
1575:       assertFalse(node2.isStringKey());
1576:       assertEquals(40, node2.getType());
1577:       assertFalse(node2.isDo());
1578:       assertFalse(node2.isContinue());
1579:       assertFalse(node2.isLabel());
1580:       assertFalse(node2.isNew());
1581:       assertFalse(node2.isAdd());
1582:       assertFalse(node2.isAssignAdd());
1583:       assertFalse(node2.isFunction());
1584:       assertFalse(node2.isDefaultCase());
1585:       assertFalse(node2.isVar());
1586:       assertFalse(node2.isGetElem());
1587:       assertTrue(node2.hasOneChild());
1588:       assertFalse(node2.isDelProp());
1589:       assertFalse(node2.isDec());
1590:       assertFalse(node2.isAssign());
1591:       assertFalse(node2.isTypeOf());
1592:       assertFalse(node2.isCast());
1593:       assertFalse(node2.isEmpty());
1594:       assertFalse(node2.isDebugger());
1595:       assertFalse(node2.isVoid());
1596:       assertFalse(node2.isOr());
1597:       assertFalse(node2.isTrue());
1598:       assertFalse(node2.isObjectLit());
1599:       assertFalse(node2.isNot());
1600:       assertFalse(node2.isExprResult());
1601:       assertFalse(node2.isGetProp());
1602:       assertFalse(node2.isReturn());
1603:       assertFalse(node2.isComma());
1604:       assertFalse(node2.isWhile());
1605:       
1606:       Node node3 = node0.removeChildren();
1607:       assertEquals(40, Node.ORIGINALNAME_PROP);
1608:       assertEquals(57, Node.REFLECTED_OBJECT);
1609:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1610:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1611:       assertEquals(52, Node.LENGTH);
1612:       assertEquals(8, Node.FLAG_NO_THROWS);
1613:       assertEquals(50, Node.FREE_CALL);
1614:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1615:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1616:       assertEquals(39, Node.EMPTY_BLOCK);
1617:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1618:       assertEquals(57, Node.LAST_PROP);
1619:       assertEquals(1, Node.DECR_FLAG);
1620:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1621:       assertEquals(30, Node.VAR_ARGS_NAME);
1622:       assertEquals(46, Node.IS_NAMESPACE);
1623:       assertEquals(54, Node.SLASH_V);
1624:       assertEquals(43, Node.IS_CONSTANT_NAME);
1625:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1626:       assertEquals(29, Node.JSDOC_INFO_PROP);
1627:       assertEquals(47, Node.IS_DISPATCHER);
1628:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1629:       assertEquals(2, Node.POST_FLAG);
1630:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1631:       assertEquals(53, Node.INPUT_ID);
1632:       assertEquals(32, Node.INCRDECR_PROP);
1633:       assertEquals(55, Node.INFERRED_FUNCTION);
1634:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1635:       assertEquals(12, Node.COLUMN_BITS);
1636:       assertEquals(36, Node.QUOTED_PROP);
1637:       assertEquals(4095, Node.COLUMN_MASK);
1638:       assertEquals(48, Node.DIRECTIVES);
1639:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1640:       assertEquals(37, Node.OPT_ARG_NAME);
1641:       assertEquals(56, Node.CHANGE_TIME);
1642:       assertEquals(49, Node.DIRECT_EVAL);
1643:       assertEquals(57, Node.REFLECTED_OBJECT);
1644:       assertEquals(40, Node.ORIGINALNAME_PROP);
1645:       assertEquals(57, Node.LAST_PROP);
1646:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1647:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1648:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1649:       assertEquals(30, Node.VAR_ARGS_NAME);
1650:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1651:       assertEquals(12, Node.COLUMN_BITS);
1652:       assertEquals(46, Node.IS_NAMESPACE);
1653:       assertEquals(32, Node.INCRDECR_PROP);
1654:       assertEquals(1, Node.DECR_FLAG);
1655:       assertEquals(43, Node.IS_CONSTANT_NAME);
1656:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1657:       assertEquals(54, Node.SLASH_V);
1658:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1659:       assertEquals(50, Node.FREE_CALL);
1660:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1661:       assertEquals(53, Node.INPUT_ID);
1662:       assertEquals(47, Node.IS_DISPATCHER);
1663:       assertEquals(2, Node.POST_FLAG);
1664:       assertEquals(4095, Node.COLUMN_MASK);
1665:       assertEquals(55, Node.INFERRED_FUNCTION);
1666:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1667:       assertEquals(37, Node.OPT_ARG_NAME);
1668:       assertEquals(48, Node.DIRECTIVES);
1669:       assertEquals(49, Node.DIRECT_EVAL);
1670:       assertEquals(56, Node.CHANGE_TIME);
1671:       assertEquals(36, Node.QUOTED_PROP);
1672:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1673:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1674:       assertEquals(39, Node.EMPTY_BLOCK);
1675:       assertEquals(29, Node.JSDOC_INFO_PROP);
1676:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1677:       assertEquals(52, Node.LENGTH);
1678:       assertEquals(8, Node.FLAG_NO_THROWS);
1679:       assertNotSame(node0, node1);
1680:       assertSame(node0, node2);
1681:       assertNotSame(node0, node3);
1682:       assertNotSame(node3, node0);
1683:       assertNotSame(node3, node2);
1684:       assertSame(node3, node1);
1685:       assertFalse(node0.equals((Object)node1));
1686:       assertFalse(node3.equals((Object)node0));
1687:       assertFalse(node3.equals((Object)node2));
1688:       assertFalse(node0.isDefaultCase());
1689:       assertEquals(40, node0.getType());
1690:       assertFalse(node0.isFunction());
1691:       assertFalse(node0.isDebugger());
1692:       assertFalse(node0.isTrue());
1693:       assertFalse(node0.isRegExp());
1694:       assertEquals(0, node0.getChildCount());
1695:       assertEquals(12318, node0.getSourcePosition());
1696:       assertFalse(node0.isSetterDef());
1697:       assertFalse(node0.isTry());
1698:       assertFalse(node0.isDelProp());
1699:       assertFalse(node0.isIf());
1700:       assertFalse(node0.isFor());
1701:       assertFalse(node0.isNull());
1702:       assertFalse(node0.isEmpty());
1703:       assertFalse(node0.isNE());
1704:       assertFalse(node0.isCatch());
1705:       assertFalse(node0.isCall());
1706:       assertFalse(node0.isVoid());
1707:       assertFalse(node0.isName());
1708:       assertFalse(node0.isWhile());
1709:       assertFalse(node0.isContinue());
1710:       assertEquals(30, node0.getCharno());
1711:       assertFalse(node0.isIn());
1712:       assertFalse(node0.isReturn());
1713:       assertFalse(node0.isInc());
1714:       assertFalse(node0.isThrow());
1715:       assertFalse(node0.isFalse());
1716:       assertFalse(node0.isCast());
1717:       assertFalse(node0.isAnd());
1718:       assertFalse(node0.isWith());
1719:       assertFalse(node0.isScript());
1720:       assertFalse(node0.isObjectLit());
1721:       assertFalse(node0.isNot());
1722:       assertFalse(node0.isGetProp());
1723:       assertFalse(node0.hasOneChild());
1724:       assertFalse(node0.isBreak());
1725:       assertFalse(node0.hasChildren());
1726:       assertEquals(3, node0.getLineno());
1727:       assertFalse(node0.isThis());
1728:       assertFalse(node0.isTypeOf());
1729:       assertFalse(node0.isComma());
1730:       assertFalse(node0.isDec());
1731:       assertFalse(node0.isAssign());
1732:       assertFalse(node0.isOr());
1733:       assertFalse(node0.isInstanceOf());
1734:       assertFalse(node0.isExprResult());
1735:       assertFalse(node0.isGetElem());
1736:       assertFalse(node0.hasMoreThanOneChild());
1737:       assertFalse(node0.isHook());
1738:       assertFalse(node0.isAssignAdd());
1739:       assertFalse(node0.isBlock());
1740:       assertFalse(node0.isVar());
1741:       assertFalse(node0.isAdd());
1742:       assertTrue(node0.isString());
1743:       assertFalse(node0.isCase());
1744:       assertFalse(node0.isNew());
1745:       assertFalse(node0.isDo());
1746:       assertFalse(node0.isGetterDef());
1747:       assertFalse(node0.isNumber());
1748:       assertFalse(node0.isStringKey());
1749:       assertFalse(node0.isLabel());
1750:       assertFalse(node0.isParamList());
1751:       assertFalse(node0.isSwitch());
1752:       assertFalse(node0.isArrayLit());
1753:       assertFalse(node0.isLabelName());
1754:       assertFalse(node3.isCatch());
1755:       assertFalse(node3.isDefaultCase());
1756:       assertFalse(node3.isFunction());
1757:       assertEquals(0, node3.getChildCount());
1758:       assertFalse(node3.isRegExp());
1759:       assertFalse(node3.isName());
1760:       assertFalse(node3.isCall());
1761:       assertFalse(node3.isVar());
1762:       assertFalse(node3.isEmpty());
1763:       assertFalse(node3.isIf());
1764:       assertFalse(node3.isDelProp());
1765:       assertFalse(node3.isSetterDef());
1766:       assertFalse(node3.isNew());
1767:       assertFalse(node3.isVoid());
1768:       assertFalse(node3.isTrue());
1769:       assertFalse(node3.isNE());
1770:       assertFalse(node3.isIn());
1771:       assertFalse(node3.isNull());
1772:       assertFalse(node3.hasMoreThanOneChild());
1773:       assertFalse(node3.isDo());
1774:       assertFalse(node3.isCase());
1775:       assertFalse(node3.isBlock());
1776:       assertFalse(node3.isAssignAdd());
1777:       assertEquals(3, node3.getLineno());
1778:       assertFalse(node3.isHook());
1779:       assertFalse(node3.isLabel());
1780:       assertEquals(12318, node3.getSourcePosition());
1781:       assertFalse(node3.isStringKey());
1782:       assertFalse(node3.isFor());
1783:       assertFalse(node3.isTry());
1784:       assertFalse(node3.isLabelName());
1785:       assertFalse(node3.hasOneChild());
1786:       assertFalse(node3.isArrayLit());
1787:       assertFalse(node3.isSwitch());
1788:       assertFalse(node3.isParamList());
1789:       assertFalse(node3.isNumber());
1790:       assertFalse(node3.isGetterDef());
1791:       assertFalse(node3.isObjectLit());
1792:       assertFalse(node3.isWith());
1793:       assertFalse(node3.isAnd());
1794:       assertFalse(node3.isInstanceOf());
1795:       assertFalse(node3.isScript());
1796:       assertFalse(node3.isThis());
1797:       assertFalse(node3.isExprResult());
1798:       assertFalse(node3.isComma());
1799:       assertFalse(node3.isThrow());
1800:       assertFalse(node3.isGetElem());
1801:       assertTrue(node3.isAdd());
1802:       assertFalse(node3.isBreak());
1803:       assertFalse(node3.isInc());
1804:       assertEquals(21, node3.getType());
1805:       assertFalse(node3.isOr());
1806:       assertFalse(node3.isString());
1807:       assertFalse(node3.isContinue());
1808:       assertFalse(node3.isWhile());
1809:       assertFalse(node3.isDec());
1810:       assertFalse(node3.hasChildren());
1811:       assertFalse(node3.isReturn());
1812:       assertFalse(node3.isTypeOf());
1813:       assertFalse(node3.isAssign());
1814:       assertFalse(node3.isFalse());
1815:       assertFalse(node3.isCast());
1816:       assertFalse(node3.isGetProp());
1817:       assertFalse(node3.isNot());
1818:       assertFalse(node3.isDebugger());
1819:       assertEquals(30, node3.getCharno());
1820:       
1821:       node3.removeChildren();
1822:       assertEquals(40, Node.ORIGINALNAME_PROP);
1823:       assertEquals(57, Node.REFLECTED_OBJECT);
1824:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1825:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1826:       assertEquals(52, Node.LENGTH);
1827:       assertEquals(8, Node.FLAG_NO_THROWS);
1828:       assertEquals(50, Node.FREE_CALL);
1829:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1830:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1831:       assertEquals(39, Node.EMPTY_BLOCK);
1832:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1833:       assertEquals(57, Node.LAST_PROP);
1834:       assertEquals(1, Node.DECR_FLAG);
1835:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1836:       assertEquals(30, Node.VAR_ARGS_NAME);
1837:       assertEquals(46, Node.IS_NAMESPACE);
1838:       assertEquals(54, Node.SLASH_V);
1839:       assertEquals(43, Node.IS_CONSTANT_NAME);
1840:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1841:       assertEquals(29, Node.JSDOC_INFO_PROP);
1842:       assertEquals(47, Node.IS_DISPATCHER);
1843:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1844:       assertEquals(2, Node.POST_FLAG);
1845:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1846:       assertEquals(53, Node.INPUT_ID);
1847:       assertEquals(32, Node.INCRDECR_PROP);
1848:       assertEquals(55, Node.INFERRED_FUNCTION);
1849:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1850:       assertEquals(12, Node.COLUMN_BITS);
1851:       assertEquals(36, Node.QUOTED_PROP);
1852:       assertEquals(4095, Node.COLUMN_MASK);
1853:       assertEquals(48, Node.DIRECTIVES);
1854:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1855:       assertEquals(37, Node.OPT_ARG_NAME);
1856:       assertEquals(56, Node.CHANGE_TIME);
1857:       assertEquals(49, Node.DIRECT_EVAL);
1858:       assertEquals(57, Node.REFLECTED_OBJECT);
1859:       assertEquals(40, Node.ORIGINALNAME_PROP);
1860:       assertEquals(57, Node.LAST_PROP);
1861:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1862:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1863:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1864:       assertEquals(30, Node.VAR_ARGS_NAME);
1865:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1866:       assertEquals(12, Node.COLUMN_BITS);
1867:       assertEquals(46, Node.IS_NAMESPACE);
1868:       assertEquals(32, Node.INCRDECR_PROP);
1869:       assertEquals(1, Node.DECR_FLAG);
1870:       assertEquals(43, Node.IS_CONSTANT_NAME);
1871:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1872:       assertEquals(54, Node.SLASH_V);
1873:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1874:       assertEquals(50, Node.FREE_CALL);
1875:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1876:       assertEquals(53, Node.INPUT_ID);
1877:       assertEquals(47, Node.IS_DISPATCHER);
1878:       assertEquals(2, Node.POST_FLAG);
1879:       assertEquals(4095, Node.COLUMN_MASK);
1880:       assertEquals(55, Node.INFERRED_FUNCTION);
1881:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1882:       assertEquals(37, Node.OPT_ARG_NAME);
1883:       assertEquals(48, Node.DIRECTIVES);
1884:       assertEquals(49, Node.DIRECT_EVAL);
1885:       assertEquals(56, Node.CHANGE_TIME);
1886:       assertEquals(36, Node.QUOTED_PROP);
1887:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1888:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1889:       assertEquals(39, Node.EMPTY_BLOCK);
1890:       assertEquals(29, Node.JSDOC_INFO_PROP);
1891:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1892:       assertEquals(52, Node.LENGTH);
1893:       assertEquals(8, Node.FLAG_NO_THROWS);
1894:       assertNotSame(node0, node1);
1895:       assertSame(node0, node2);
1896:       assertNotSame(node0, node3);
1897:       assertNotSame(node3, node0);
1898:       assertNotSame(node3, node2);
1899:       assertSame(node3, node1);
1900:       assertFalse(node0.equals((Object)node1));
1901:       assertFalse(node0.equals((Object)node3));
1902:       assertFalse(node3.equals((Object)node0));
1903:       assertFalse(node3.equals((Object)node2));
1904:       assertFalse(node0.isDefaultCase());
1905:       assertEquals(40, node0.getType());
1906:       assertFalse(node0.isFunction());
1907:       assertFalse(node0.isDebugger());
1908:       assertFalse(node0.isTrue());
1909:       assertFalse(node0.isRegExp());
1910:       assertEquals(0, node0.getChildCount());
1911:       assertEquals(12318, node0.getSourcePosition());
1912:       assertFalse(node0.isSetterDef());
1913:       assertFalse(node0.isTry());
1914:       assertFalse(node0.isDelProp());
1915:       assertFalse(node0.isIf());
1916:       assertFalse(node0.isFor());
1917:       assertFalse(node0.isNull());
1918:       assertFalse(node0.isEmpty());
1919:       assertFalse(node0.isNE());
1920:       assertFalse(node0.isCatch());
1921:       assertFalse(node0.isCall());
1922:       assertFalse(node0.isVoid());
1923:       assertFalse(node0.isName());
1924:       assertFalse(node0.isWhile());
1925:       assertFalse(node0.isContinue());
1926:       assertEquals(30, node0.getCharno());
1927:       assertFalse(node0.isIn());
1928:       assertFalse(node0.isReturn());
1929:       assertFalse(node0.isInc());
1930:       assertFalse(node0.isThrow());
1931:       assertFalse(node0.isFalse());
1932:       assertFalse(node0.isCast());
1933:       assertFalse(node0.isAnd());
1934:       assertFalse(node0.isWith());
1935:       assertFalse(node0.isScript());
1936:       assertFalse(node0.isObjectLit());
1937:       assertFalse(node0.isNot());
1938:       assertFalse(node0.isGetProp());
1939:       assertFalse(node0.hasOneChild());
1940:       assertFalse(node0.isBreak());
1941:       assertFalse(node0.hasChildren());
1942:       assertEquals(3, node0.getLineno());
1943:       assertFalse(node0.isThis());
1944:       assertFalse(node0.isTypeOf());
1945:       assertFalse(node0.isComma());
1946:       assertFalse(node0.isDec());
1947:       assertFalse(node0.isAssign());
1948:       assertFalse(node0.isOr());
1949:       assertFalse(node0.isInstanceOf());
1950:       assertFalse(node0.isExprResult());
1951:       assertFalse(node0.isGetElem());
1952:       assertFalse(node0.hasMoreThanOneChild());
1953:       assertFalse(node0.isHook());
1954:       assertFalse(node0.isAssignAdd());
1955:       assertFalse(node0.isBlock());
1956:       assertFalse(node0.isVar());
1957:       assertFalse(node0.isAdd());
1958:       assertTrue(node0.isString());
1959:       assertFalse(node0.isCase());
1960:       assertFalse(node0.isNew());
1961:       assertFalse(node0.isDo());
1962:       assertFalse(node0.isGetterDef());
1963:       assertFalse(node0.isNumber());
1964:       assertFalse(node0.isStringKey());
1965:       assertFalse(node0.isLabel());
1966:       assertFalse(node0.isParamList());
1967:       assertFalse(node0.isSwitch());
1968:       assertFalse(node0.isArrayLit());
1969:       assertFalse(node0.isLabelName());
1970:       assertFalse(node3.isCatch());
1971:       assertFalse(node3.isDefaultCase());
1972:       assertFalse(node3.isFunction());
1973:       assertEquals(0, node3.getChildCount());
1974:       assertFalse(node3.isRegExp());
1975:       assertFalse(node3.isName());
1976:       assertFalse(node3.isCall());
1977:       assertFalse(node3.isVar());
1978:       assertFalse(node3.isEmpty());
1979:       assertFalse(node3.isIf());
1980:       assertFalse(node3.isDelProp());
1981:       assertFalse(node3.isSetterDef());
1982:       assertFalse(node3.isNew());
1983:       assertFalse(node3.isVoid());
1984:       assertFalse(node3.isTrue());
1985:       assertFalse(node3.isNE());
1986:       assertFalse(node3.isIn());
1987:       assertFalse(node3.isNull());
1988:       assertFalse(node3.hasMoreThanOneChild());
1989:       assertFalse(node3.isDo());
1990:       assertFalse(node3.isCase());
1991:       assertFalse(node3.isBlock());
1992:       assertFalse(node3.isAssignAdd());
1993:       assertEquals(3, node3.getLineno());
1994:       assertFalse(node3.isHook());
1995:       assertFalse(node3.isLabel());
1996:       assertEquals(12318, node3.getSourcePosition());
1997:       assertFalse(node3.isStringKey());
1998:       assertFalse(node3.isFor());
1999:       assertFalse(node3.isTry());
2000:       assertFalse(node3.isLabelName());
2001:       assertFalse(node3.hasOneChild());
2002:       assertFalse(node3.isArrayLit());
2003:       assertFalse(node3.isSwitch());
2004:       assertFalse(node3.isParamList());
2005:       assertFalse(node3.isNumber());
2006:       assertFalse(node3.isGetterDef());
2007:       assertFalse(node3.isObjectLit());
2008:       assertFalse(node3.isWith());
2009:       assertFalse(node3.isAnd());
2010:       assertFalse(node3.isInstanceOf());
2011:       assertFalse(node3.isScript());
2012:       assertFalse(node3.isThis());
2013:       assertFalse(node3.isExprResult());
2014:       assertFalse(node3.isComma());
2015:       assertFalse(node3.isThrow());
2016:       assertFalse(node3.isGetElem());
2017:       assertTrue(node3.isAdd());
2018:       assertFalse(node3.isBreak());
2019:       assertFalse(node3.isInc());
2020:       assertEquals(21, node3.getType());
2021:       assertFalse(node3.isOr());
2022:       assertFalse(node3.isString());
2023:       assertFalse(node3.isContinue());
2024:       assertFalse(node3.isWhile());
2025:       assertFalse(node3.isDec());
2026:       assertFalse(node3.hasChildren());
2027:       assertFalse(node3.isReturn());
2028:       assertFalse(node3.isTypeOf());
2029:       assertFalse(node3.isAssign());
2030:       assertFalse(node3.isFalse());
2031:       assertFalse(node3.isCast());
2032:       assertFalse(node3.isGetProp());
2033:       assertFalse(node3.isNot());
2034:       assertFalse(node3.isDebugger());
2035:       assertEquals(30, node3.getCharno());
2036:       
2037:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
2038:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
2039:       assertEquals(0, node_SideEffectFlags0.valueOf());
2040:       
2041:       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
2042:       assertFalse(simpleSourceFile0.isExtern());
2043:       assertNull(simpleSourceFile0.getName());
2044:       assertNull(simpleSourceFile0.toString());
2045:       
2046:       Node node4 = new Node(31, 49, (-4836));
2047:       assertEquals(43, Node.IS_CONSTANT_NAME);
2048:       assertEquals(36, Node.QUOTED_PROP);
2049:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2050:       assertEquals(53, Node.INPUT_ID);
2051:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2052:       assertEquals(4095, Node.COLUMN_MASK);
2053:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2054:       assertEquals(32, Node.INCRDECR_PROP);
2055:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2056:       assertEquals(46, Node.IS_NAMESPACE);
2057:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2058:       assertEquals(50, Node.FREE_CALL);
2059:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2060:       assertEquals(57, Node.LAST_PROP);
2061:       assertEquals(54, Node.SLASH_V);
2062:       assertEquals(49, Node.DIRECT_EVAL);
2063:       assertEquals(1, Node.DECR_FLAG);
2064:       assertEquals(12, Node.COLUMN_BITS);
2065:       assertEquals(40, Node.ORIGINALNAME_PROP);
2066:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2067:       assertEquals(2, Node.POST_FLAG);
2068:       assertEquals(30, Node.VAR_ARGS_NAME);
2069:       assertEquals(56, Node.CHANGE_TIME);
2070:       assertEquals(39, Node.EMPTY_BLOCK);
2071:       assertEquals(47, Node.IS_DISPATCHER);
2072:       assertEquals(29, Node.JSDOC_INFO_PROP);
2073:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2074:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2075:       assertEquals(37, Node.OPT_ARG_NAME);
2076:       assertEquals(48, Node.DIRECTIVES);
2077:       assertEquals(57, Node.REFLECTED_OBJECT);
2078:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2079:       assertEquals(55, Node.INFERRED_FUNCTION);
2080:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2081:       assertEquals(52, Node.LENGTH);
2082:       assertEquals(8, Node.FLAG_NO_THROWS);
2083:       assertFalse(node4.equals((Object)node2));
2084:       assertFalse(node4.equals((Object)node0));
2085:       assertFalse(node4.equals((Object)node3));
2086:       assertFalse(node4.equals((Object)node1));
2087:       assertFalse(node4.isNE());
2088:       assertFalse(node4.isIf());
2089:       assertFalse(node4.isFor());
2090:       assertFalse(node4.isVoid());
2091:       assertFalse(node4.isInc());
2092:       assertFalse(node4.isTrue());
2093:       assertFalse(node4.isDefaultCase());
2094:       assertFalse(node4.isEmpty());
2095:       assertFalse(node4.isIn());
2096:       assertFalse(node4.isGetProp());
2097:       assertFalse(node4.isBreak());
2098:       assertFalse(node4.isSetterDef());
2099:       assertFalse(node4.isThrow());
2100:       assertFalse(node4.isFalse());
2101:       assertFalse(node4.isCall());
2102:       assertFalse(node4.isComma());
2103:       assertFalse(node4.isFunction());
2104:       assertFalse(node4.isObjectLit());
2105:       assertFalse(node4.isString());
2106:       assertFalse(node4.isAnd());
2107:       assertFalse(node4.isNot());
2108:       assertEquals((-1), node4.getSourcePosition());
2109:       assertFalse(node4.isDebugger());
2110:       assertFalse(node4.isAssignAdd());
2111:       assertFalse(node4.isLabelName());
2112:       assertEquals((-1), node4.getLineno());
2113:       assertFalse(node4.isGetElem());
2114:       assertFalse(node4.isCast());
2115:       assertFalse(node4.hasMoreThanOneChild());
2116:       assertFalse(node4.isContinue());
2117:       assertFalse(node4.isWhile());
2118:       assertFalse(node4.isDec());
2119:       assertFalse(node4.hasChildren());
2120:       assertFalse(node4.isReturn());
2121:       assertFalse(node4.isTypeOf());
2122:       assertFalse(node4.isAssign());
2123:       assertFalse(node4.isLabel());
2124:       assertFalse(node4.isExprResult());
2125:       assertFalse(node4.isAdd());
2126:       assertEquals(31, node4.getType());
2127:       assertFalse(node4.isDo());
2128:       assertFalse(node4.isNew());
2129:       assertFalse(node4.isName());
2130:       assertFalse(node4.isNull());
2131:       assertFalse(node4.isOr());
2132:       assertTrue(node4.isDelProp());
2133:       assertFalse(node4.isParamList());
2134:       assertFalse(node4.isInstanceOf());
2135:       assertFalse(node4.isWith());
2136:       assertFalse(node4.isCatch());
2137:       assertFalse(node4.isVar());
2138:       assertFalse(node4.isHook());
2139:       assertEquals(0, node4.getChildCount());
2140:       assertFalse(node4.isRegExp());
2141:       assertFalse(node4.isThis());
2142:       assertFalse(node4.isBlock());
2143:       assertFalse(node4.isSwitch());
2144:       assertFalse(node4.hasOneChild());
2145:       assertFalse(node4.isScript());
2146:       assertFalse(node4.isTry());
2147:       assertFalse(node4.isCase());
2148:       assertFalse(node4.isArrayLit());
2149:       assertFalse(node4.isStringKey());
2150:       assertFalse(node4.isNumber());
2151:       assertFalse(node4.isGetterDef());
2152:       assertEquals((-1), node4.getCharno());
2153:       
2154:       node1.putProp(48, node4);
2155:       assertEquals(43, Node.IS_CONSTANT_NAME);
2156:       assertEquals(36, Node.QUOTED_PROP);
2157:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2158:       assertEquals(53, Node.INPUT_ID);
2159:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2160:       assertEquals(4095, Node.COLUMN_MASK);
2161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2162:       assertEquals(32, Node.INCRDECR_PROP);
2163:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2164:       assertEquals(46, Node.IS_NAMESPACE);
2165:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2166:       assertEquals(50, Node.FREE_CALL);
2167:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2168:       assertEquals(57, Node.LAST_PROP);
2169:       assertEquals(54, Node.SLASH_V);
2170:       assertEquals(49, Node.DIRECT_EVAL);
2171:       assertEquals(1, Node.DECR_FLAG);
2172:       assertEquals(12, Node.COLUMN_BITS);
2173:       assertEquals(40, Node.ORIGINALNAME_PROP);
2174:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2175:       assertEquals(2, Node.POST_FLAG);
2176:       assertEquals(30, Node.VAR_ARGS_NAME);
2177:       assertEquals(56, Node.CHANGE_TIME);
2178:       assertEquals(39, Node.EMPTY_BLOCK);
2179:       assertEquals(47, Node.IS_DISPATCHER);
2180:       assertEquals(29, Node.JSDOC_INFO_PROP);
2181:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2182:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2183:       assertEquals(37, Node.OPT_ARG_NAME);
2184:       assertEquals(48, Node.DIRECTIVES);
2185:       assertEquals(57, Node.REFLECTED_OBJECT);
2186:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2187:       assertEquals(55, Node.INFERRED_FUNCTION);
2188:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2189:       assertEquals(52, Node.LENGTH);
2190:       assertEquals(8, Node.FLAG_NO_THROWS);
2191:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2192:       assertEquals(36, Node.QUOTED_PROP);
2193:       assertEquals(56, Node.CHANGE_TIME);
2194:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2195:       assertEquals(43, Node.IS_CONSTANT_NAME);
2196:       assertEquals(37, Node.OPT_ARG_NAME);
2197:       assertEquals(55, Node.INFERRED_FUNCTION);
2198:       assertEquals(2, Node.POST_FLAG);
2199:       assertEquals(30, Node.VAR_ARGS_NAME);
2200:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2201:       assertEquals(57, Node.LAST_PROP);
2202:       assertEquals(47, Node.IS_DISPATCHER);
2203:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2204:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2205:       assertEquals(8, Node.FLAG_NO_THROWS);
2206:       assertEquals(29, Node.JSDOC_INFO_PROP);
2207:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2208:       assertEquals(53, Node.INPUT_ID);
2209:       assertEquals(39, Node.EMPTY_BLOCK);
2210:       assertEquals(57, Node.REFLECTED_OBJECT);
2211:       assertEquals(52, Node.LENGTH);
2212:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2213:       assertEquals(50, Node.FREE_CALL);
2214:       assertEquals(54, Node.SLASH_V);
2215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2216:       assertEquals(48, Node.DIRECTIVES);
2217:       assertEquals(40, Node.ORIGINALNAME_PROP);
2218:       assertEquals(49, Node.DIRECT_EVAL);
2219:       assertEquals(12, Node.COLUMN_BITS);
2220:       assertEquals(32, Node.INCRDECR_PROP);
2221:       assertEquals(46, Node.IS_NAMESPACE);
2222:       assertEquals(4095, Node.COLUMN_MASK);
2223:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2224:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2225:       assertEquals(1, Node.DECR_FLAG);
2226:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2227:       assertNotSame(node1, node0);
2228:       assertSame(node1, node3);
2229:       assertNotSame(node1, node2);
2230:       assertFalse(node4.equals((Object)node2));
2231:       assertFalse(node4.equals((Object)node0));
2232:       assertFalse(node4.equals((Object)node3));
2233:       assertFalse(node4.equals((Object)node1));
2234:       assertFalse(node1.equals((Object)node0));
2235:       assertFalse(node1.equals((Object)node4));
2236:       assertFalse(node1.equals((Object)node2));
2237:       assertFalse(node4.isNE());
2238:       assertFalse(node4.isIf());
2239:       assertFalse(node4.isFor());
2240:       assertFalse(node4.isVoid());
2241:       assertFalse(node4.isInc());
2242:       assertFalse(node4.isTrue());
2243:       assertFalse(node4.isDefaultCase());
2244:       assertFalse(node4.isEmpty());
2245:       assertFalse(node4.isIn());
2246:       assertFalse(node4.isGetProp());
2247:       assertFalse(node4.isBreak());
2248:       assertFalse(node4.isSetterDef());
2249:       assertFalse(node4.isThrow());
2250:       assertFalse(node4.isFalse());
2251:       assertFalse(node4.isCall());
2252:       assertFalse(node4.isComma());
2253:       assertFalse(node4.isFunction());
2254:       assertFalse(node4.isObjectLit());
2255:       assertFalse(node4.isString());
2256:       assertFalse(node4.isAnd());
2257:       assertFalse(node4.isNot());
2258:       assertEquals((-1), node4.getSourcePosition());
2259:       assertFalse(node4.isDebugger());
2260:       assertFalse(node4.isAssignAdd());
2261:       assertFalse(node4.isLabelName());
2262:       assertEquals((-1), node4.getLineno());
2263:       assertFalse(node4.isGetElem());
2264:       assertFalse(node4.isCast());
2265:       assertFalse(node4.hasMoreThanOneChild());
2266:       assertFalse(node4.isContinue());
2267:       assertFalse(node4.isWhile());
2268:       assertFalse(node4.isDec());
2269:       assertFalse(node4.hasChildren());
2270:       assertFalse(node4.isReturn());
2271:       assertFalse(node4.isTypeOf());
2272:       assertFalse(node4.isAssign());
2273:       assertFalse(node4.isLabel());
2274:       assertFalse(node4.isExprResult());
2275:       assertFalse(node4.isAdd());
2276:       assertEquals(31, node4.getType());
2277:       assertFalse(node4.isDo());
2278:       assertFalse(node4.isNew());
2279:       assertFalse(node4.isName());
2280:       assertFalse(node4.isNull());
2281:       assertFalse(node4.isOr());
2282:       assertTrue(node4.isDelProp());
2283:       assertFalse(node4.isParamList());
2284:       assertFalse(node4.isInstanceOf());
2285:       assertFalse(node4.isWith());
2286:       assertFalse(node4.isCatch());
2287:       assertFalse(node4.isVar());
2288:       assertFalse(node4.isHook());
2289:       assertEquals(0, node4.getChildCount());
2290:       assertFalse(node4.isRegExp());
2291:       assertFalse(node4.isThis());
2292:       assertFalse(node4.isBlock());
2293:       assertFalse(node4.isSwitch());
2294:       assertFalse(node4.hasOneChild());
2295:       assertFalse(node4.isScript());
2296:       assertFalse(node4.isTry());
2297:       assertFalse(node4.isCase());
2298:       assertFalse(node4.isArrayLit());
2299:       assertFalse(node4.isStringKey());
2300:       assertFalse(node4.isNumber());
2301:       assertFalse(node4.isGetterDef());
2302:       assertEquals((-1), node4.getCharno());
2303:       assertFalse(node1.isSwitch());
2304:       assertFalse(node1.isDelProp());
2305:       assertFalse(node1.isGetterDef());
2306:       assertFalse(node1.isFor());
2307:       assertFalse(node1.isThis());
2308:       assertFalse(node1.isHook());
2309:       assertFalse(node1.isDebugger());
2310:       assertFalse(node1.isTry());
2311:       assertFalse(node1.isString());
2312:       assertFalse(node1.isCase());
2313:       assertFalse(node1.isGetProp());
2314:       assertEquals(12318, node1.getSourcePosition());
2315:       assertFalse(node1.isAnd());
2316:       assertFalse(node1.isObjectLit());
2317:       assertFalse(node1.isCatch());
2318:       assertFalse(node1.isNot());
2319:       assertFalse(node1.isWith());
2320:       assertFalse(node1.isRegExp());
2321:       assertFalse(node1.isFunction());
2322:       assertFalse(node1.isInstanceOf());
2323:       assertTrue(node1.isAdd());
2324:       assertFalse(node1.isThrow());
2325:       assertFalse(node1.isCast());
2326:       assertFalse(node1.isFalse());
2327:       assertFalse(node1.isIf());
2328:       assertFalse(node1.isNE());
2329:       assertFalse(node1.isIn());
2330:       assertFalse(node1.isInc());
2331:       assertFalse(node1.isSetterDef());
2332:       assertFalse(node1.isContinue());
2333:       assertFalse(node1.isDo());
2334:       assertFalse(node1.hasMoreThanOneChild());
2335:       assertFalse(node1.isWhile());
2336:       assertFalse(node1.isLabel());
2337:       assertFalse(node1.isReturn());
2338:       assertEquals(3, node1.getLineno());
2339:       assertFalse(node1.isTypeOf());
2340:       assertFalse(node1.isGetElem());
2341:       assertFalse(node1.isCall());
2342:       assertFalse(node1.isStringKey());
2343:       assertFalse(node1.isLabelName());
2344:       assertFalse(node1.isAssign());
2345:       assertFalse(node1.hasChildren());
2346:       
2347:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
2348:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2349:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2350:       
2351:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
2352:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2353:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2354:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
2355:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
2356:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2357:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2358:       
2359:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
2360:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
2361:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
2362:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
2363:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2364:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2365:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2366:       
2367:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
2368:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
2369:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
2370:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2371:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2372:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
2373:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
2374:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
2375:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
2376:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
2377:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
2378:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
2379:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
2380:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2381:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2382:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
2383:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2384:       
2385:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.clearAllFlags();
2386:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
2387:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
2388:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
2389:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
2390:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
2391:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
2392:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
2393:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
2394:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
2395:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
2396:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2397:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2398:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
2399:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
2400:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2401:       
2402:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesArguments();
2403:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
2404:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
2405:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
2406:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
2407:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
2408:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
2409:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
2410:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
2411:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
2412:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
2413:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
2414:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
2415:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
2416:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
2417:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
2418:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
2419:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
2420:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
2421:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
2422:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
2423:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
2424:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
2425:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
2426:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
2427:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2428:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
2429:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2430:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
2431:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
2432:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2433:       
2434:       boolean boolean4 = node_SideEffectFlags0.areAllFlagsSet();
2435:       assertFalse(boolean4);
2436:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
2437:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
2438:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
2439:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
2440:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
2441:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
2442:       assertFalse(boolean4 == boolean1);
2443:       assertTrue(boolean4 == boolean2);
2444:       assertFalse(boolean4 == boolean0);
2445:       assertTrue(boolean4 == boolean3);
2446:       
2447:       boolean boolean5 = node0.isReturn();
2448:       assertFalse(boolean5);
2449:       assertEquals(40, Node.ORIGINALNAME_PROP);
2450:       assertEquals(57, Node.REFLECTED_OBJECT);
2451:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2452:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2453:       assertEquals(52, Node.LENGTH);
2454:       assertEquals(8, Node.FLAG_NO_THROWS);
2455:       assertEquals(50, Node.FREE_CALL);
2456:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2458:       assertEquals(39, Node.EMPTY_BLOCK);
2459:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2460:       assertEquals(57, Node.LAST_PROP);
2461:       assertEquals(1, Node.DECR_FLAG);
2462:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2463:       assertEquals(30, Node.VAR_ARGS_NAME);
2464:       assertEquals(46, Node.IS_NAMESPACE);
2465:       assertEquals(54, Node.SLASH_V);
2466:       assertEquals(43, Node.IS_CONSTANT_NAME);
2467:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2468:       assertEquals(29, Node.JSDOC_INFO_PROP);
2469:       assertEquals(47, Node.IS_DISPATCHER);
2470:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2471:       assertEquals(2, Node.POST_FLAG);
2472:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2473:       assertEquals(53, Node.INPUT_ID);
2474:       assertEquals(32, Node.INCRDECR_PROP);
2475:       assertEquals(55, Node.INFERRED_FUNCTION);
2476:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2477:       assertEquals(12, Node.COLUMN_BITS);
2478:       assertEquals(36, Node.QUOTED_PROP);
2479:       assertEquals(4095, Node.COLUMN_MASK);
2480:       assertEquals(48, Node.DIRECTIVES);
2481:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2482:       assertEquals(37, Node.OPT_ARG_NAME);
2483:       assertEquals(56, Node.CHANGE_TIME);
2484:       assertEquals(49, Node.DIRECT_EVAL);
2485:       assertNotSame(node0, node1);
2486:       assertSame(node0, node2);
2487:       assertNotSame(node0, node3);
2488:       assertFalse(node0.equals((Object)node1));
2489:       assertFalse(node0.equals((Object)node4));
2490:       assertFalse(node0.equals((Object)node3));
2491:       assertTrue(boolean5 == boolean4);
2492:       assertTrue(boolean5 == boolean3);
2493:       assertFalse(boolean5 == boolean0);
2494:       assertFalse(boolean5 == boolean1);
2495:       assertTrue(boolean5 == boolean2);
2496:       
2497:       boolean boolean6 = node1.isReturn();
2498:       assertFalse(boolean6);
2499:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2500:       assertEquals(36, Node.QUOTED_PROP);
2501:       assertEquals(56, Node.CHANGE_TIME);
2502:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2503:       assertEquals(43, Node.IS_CONSTANT_NAME);
2504:       assertEquals(37, Node.OPT_ARG_NAME);
2505:       assertEquals(55, Node.INFERRED_FUNCTION);
2506:       assertEquals(2, Node.POST_FLAG);
2507:       assertEquals(30, Node.VAR_ARGS_NAME);
2508:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2509:       assertEquals(57, Node.LAST_PROP);
2510:       assertEquals(47, Node.IS_DISPATCHER);
2511:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2512:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2513:       assertEquals(8, Node.FLAG_NO_THROWS);
2514:       assertEquals(29, Node.JSDOC_INFO_PROP);
2515:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2516:       assertEquals(53, Node.INPUT_ID);
2517:       assertEquals(39, Node.EMPTY_BLOCK);
2518:       assertEquals(57, Node.REFLECTED_OBJECT);
2519:       assertEquals(52, Node.LENGTH);
2520:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2521:       assertEquals(50, Node.FREE_CALL);
2522:       assertEquals(54, Node.SLASH_V);
2523:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2524:       assertEquals(48, Node.DIRECTIVES);
2525:       assertEquals(40, Node.ORIGINALNAME_PROP);
2526:       assertEquals(49, Node.DIRECT_EVAL);
2527:       assertEquals(12, Node.COLUMN_BITS);
2528:       assertEquals(32, Node.INCRDECR_PROP);
2529:       assertEquals(46, Node.IS_NAMESPACE);
2530:       assertEquals(4095, Node.COLUMN_MASK);
2531:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2532:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2533:       assertEquals(1, Node.DECR_FLAG);
2534:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2535:       assertNotSame(node1, node0);
2536:       assertSame(node1, node3);
2537:       assertNotSame(node1, node2);
2538:       assertFalse(node1.equals((Object)node0));
2539:       assertFalse(node1.equals((Object)node4));
2540:       assertFalse(node1.equals((Object)node2));
2541:       assertTrue(boolean6 == boolean5);
2542:       assertTrue(boolean6 == boolean2);
2543:       assertFalse(boolean6 == boolean1);
2544:       assertTrue(boolean6 == boolean4);
2545:       assertFalse(boolean6 == boolean0);
2546:       assertTrue(boolean6 == boolean3);
2547:   }
2548: }
RegularFileObject[/tmp/EvoSuite_130_1629223350020/com/google/javascript/rhino/Node_130_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:30 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_130_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_130_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_130_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.JSTypeExpression",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.JSDocInfo$Marker",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.FluentIterable",
352:       "com.google.common.collect.Iterables$2",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 18:02:30.756 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("");
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

boolean boolean0 = node0.mayMutateArguments();
assertTrue(boolean0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

String string0 = node0.toString();
assertEquals("STRING ", string0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

Iterable<Node> iterable0 = node0.children();
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

node0.setSourceEncodedPosition(77);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertEquals(0, node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals(77, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals(77, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

node0.addSuppression("");
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertEquals(0, node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals(77, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals(77, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

boolean boolean1 = node0.mayMutateArguments();
assertTrue(boolean1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertEquals(0, node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals(77, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals(77, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

Node node1 = Node.newString(21, "", 3, 30);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertEquals(12318, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals(3, node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertEquals(30, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isArrayLit());
assertFalse(node1.isName());
assertEquals(21, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());

node0.addChildrenToBack(node1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertTrue(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCatch());
assertTrue(node0.hasChildren());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertEquals(0, node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals(77, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals(77, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertEquals(12318, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals(3, node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertEquals(30, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isArrayLit());
assertFalse(node1.isName());
assertEquals(21, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());

boolean boolean2 = node1.isQualifiedName();
assertFalse(boolean2);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertEquals(12318, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals(3, node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertEquals(30, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isArrayLit());
assertFalse(node1.isName());
assertEquals(21, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());

boolean boolean3 = node1.isDec();
assertFalse(boolean3);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertFalse(boolean3 == boolean0);
assertFalse(boolean3 == boolean1);
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertEquals(12318, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals(3, node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertEquals(30, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isArrayLit());
assertFalse(node1.isName());
assertEquals(21, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());

Node node2 = node0.useSourceInfoIfMissingFrom(node1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(12318, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertTrue(node0.hasOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCatch());
assertTrue(node0.hasChildren());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertEquals(30, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertEquals(3, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertEquals(12318, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals(3, node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isBlock());
assertEquals(30, node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isComma());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isArrayLit());
assertFalse(node1.isName());
assertEquals(21, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isFor());
assertEquals(12318, node2.getSourcePosition());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNumber());
assertEquals(3, node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertTrue(node2.hasChildren());
assertTrue(node2.isString());
assertFalse(node2.isBlock());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isName());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertEquals(30, node2.getCharno());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals(40, node2.getType());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isGetElem());
assertTrue(node2.hasOneChild());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isEmpty());
assertFalse(node2.isDebugger());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());

Node node3 = node0.removeChildren();
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node3, node0);
assertNotSame(node3, node2);
assertSame(node3, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertEquals(12318, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertEquals(30, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertEquals(3, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node3.isCatch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isRegExp());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isVar());
assertFalse(node3.isEmpty());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isNull());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertFalse(node3.isBlock());
assertFalse(node3.isAssignAdd());
assertEquals(3, node3.getLineno());
assertFalse(node3.isHook());
assertFalse(node3.isLabel());
assertEquals(12318, node3.getSourcePosition());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isTry());
assertFalse(node3.isLabelName());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isObjectLit());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isExprResult());
assertFalse(node3.isComma());
assertFalse(node3.isThrow());
assertFalse(node3.isGetElem());
assertTrue(node3.isAdd());
assertFalse(node3.isBreak());
assertFalse(node3.isInc());
assertEquals(21, node3.getType());
assertFalse(node3.isOr());
assertFalse(node3.isString());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isGetProp());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertEquals(30, node3.getCharno());

node3.removeChildren();
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node3, node0);
assertNotSame(node3, node2);
assertSame(node3, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isDefaultCase());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getChildCount());
assertEquals(12318, node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isFor());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertEquals(30, node0.getCharno());
assertFalse(node0.isIn());
assertFalse(node0.isReturn());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertEquals(3, node0.getLineno());
assertFalse(node0.isThis());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabel());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node3.isCatch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isRegExp());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isVar());
assertFalse(node3.isEmpty());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isNew());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isIn());
assertFalse(node3.isNull());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertFalse(node3.isBlock());
assertFalse(node3.isAssignAdd());
assertEquals(3, node3.getLineno());
assertFalse(node3.isHook());
assertFalse(node3.isLabel());
assertEquals(12318, node3.getSourcePosition());
assertFalse(node3.isStringKey());
assertFalse(node3.isFor());
assertFalse(node3.isTry());
assertFalse(node3.isLabelName());
assertFalse(node3.hasOneChild());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertFalse(node3.isObjectLit());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isScript());
assertFalse(node3.isThis());
assertFalse(node3.isExprResult());
assertFalse(node3.isComma());
assertFalse(node3.isThrow());
assertFalse(node3.isGetElem());
assertTrue(node3.isAdd());
assertFalse(node3.isBreak());
assertFalse(node3.isInc());
assertEquals(21, node3.getType());
assertFalse(node3.isOr());
assertFalse(node3.isString());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isReturn());
assertFalse(node3.isTypeOf());
assertFalse(node3.isAssign());
assertFalse(node3.isFalse());
assertFalse(node3.isCast());
assertFalse(node3.isGetProp());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertEquals(30, node3.getCharno());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
assertFalse(simpleSourceFile0.isExtern());
assertNull(simpleSourceFile0.getName());
assertNull(simpleSourceFile0.toString());

Node node4 = new Node(31, 49, (-4836));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isVoid());
assertFalse(node4.isInc());
assertFalse(node4.isTrue());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertFalse(node4.isGetProp());
assertFalse(node4.isBreak());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isCall());
assertFalse(node4.isComma());
assertFalse(node4.isFunction());
assertFalse(node4.isObjectLit());
assertFalse(node4.isString());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isDebugger());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabelName());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isGetElem());
assertFalse(node4.isCast());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isReturn());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertFalse(node4.isLabel());
assertFalse(node4.isExprResult());
assertFalse(node4.isAdd());
assertEquals(31, node4.getType());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isName());
assertFalse(node4.isNull());
assertFalse(node4.isOr());
assertTrue(node4.isDelProp());
assertFalse(node4.isParamList());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertFalse(node4.isCatch());
assertFalse(node4.isVar());
assertFalse(node4.isHook());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isRegExp());
assertFalse(node4.isThis());
assertFalse(node4.isBlock());
assertFalse(node4.isSwitch());
assertFalse(node4.hasOneChild());
assertFalse(node4.isScript());
assertFalse(node4.isTry());
assertFalse(node4.isCase());
assertFalse(node4.isArrayLit());
assertFalse(node4.isStringKey());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertEquals((-1), node4.getCharno());

node1.putProp(48, node4);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node1, node0);
assertSame(node1, node3);
assertNotSame(node1, node2);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node4.isNE());
assertFalse(node4.isIf());
assertFalse(node4.isFor());
assertFalse(node4.isVoid());
assertFalse(node4.isInc());
assertFalse(node4.isTrue());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertFalse(node4.isGetProp());
assertFalse(node4.isBreak());
assertFalse(node4.isSetterDef());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertFalse(node4.isCall());
assertFalse(node4.isComma());
assertFalse(node4.isFunction());
assertFalse(node4.isObjectLit());
assertFalse(node4.isString());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isDebugger());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabelName());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isGetElem());
assertFalse(node4.isCast());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isContinue());
assertFalse(node4.isWhile());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertFalse(node4.isReturn());
assertFalse(node4.isTypeOf());
assertFalse(node4.isAssign());
assertFalse(node4.isLabel());
assertFalse(node4.isExprResult());
assertFalse(node4.isAdd());
assertEquals(31, node4.getType());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isName());
assertFalse(node4.isNull());
assertFalse(node4.isOr());
assertTrue(node4.isDelProp());
assertFalse(node4.isParamList());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertFalse(node4.isCatch());
assertFalse(node4.isVar());
assertFalse(node4.isHook());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isRegExp());
assertFalse(node4.isThis());
assertFalse(node4.isBlock());
assertFalse(node4.isSwitch());
assertFalse(node4.hasOneChild());
assertFalse(node4.isScript());
assertFalse(node4.isTry());
assertFalse(node4.isCase());
assertFalse(node4.isArrayLit());
assertFalse(node4.isStringKey());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertEquals((-1), node4.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isGetProp());
assertEquals(12318, node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isInstanceOf());
assertTrue(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertEquals(3, node1.getLineno());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesArguments();
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.clearAllFlags();
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setMutatesArguments();
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);

boolean boolean4 = node_SideEffectFlags0.areAllFlagsSet();
assertFalse(boolean4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertFalse(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);

boolean boolean5 = node0.isReturn();
assertFalse(boolean5);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node0, node3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertFalse(boolean5 == boolean0);
assertFalse(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);

boolean boolean6 = node1.isReturn();
assertFalse(boolean6);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotSame(node1, node0);
assertSame(node1, node3);
assertNotSame(node1, node2);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean2);
assertFalse(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertFalse(boolean6 == boolean0);
assertTrue(boolean6 == boolean3);


[MASTER] 18:02:39.294 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_165_1629223359194/com/google/javascript/rhino/Node_165_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_165_1629223359194/com/google/javascript/rhino/Node_165_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:39.294 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:39.294 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:39.294 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 402
[MASTER] 18:02:39.295 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_165_1629223359194/com/google/javascript/rhino/Node_165_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:39 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.List;
16: import java.util.Stack;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_165_tmp__ESTest extends Node_165_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
27:       assertNotNull(simpleErrorReporter0);
28:       
29:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
30:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
31:       assertNotNull(jSTypeRegistry0);
32:       
33:       Stack<JSType> stack0 = new Stack<JSType>();
34:       assertEquals("[]", stack0.toString());
35:       assertTrue(stack0.isEmpty());
36:       assertEquals(10, stack0.capacity());
37:       assertTrue(stack0.empty());
38:       assertEquals(0, stack0.size());
39:       assertNotNull(stack0);
40:       
41:       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
42:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
43:       assertEquals(43, Node.IS_CONSTANT_NAME);
44:       assertEquals(36, Node.QUOTED_PROP);
45:       assertEquals(4095, Node.COLUMN_MASK);
46:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
47:       assertEquals(48, Node.DIRECTIVES);
48:       assertEquals(47, Node.IS_DISPATCHER);
49:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
50:       assertEquals(29, Node.JSDOC_INFO_PROP);
51:       assertEquals(56, Node.CHANGE_TIME);
52:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
53:       assertEquals(8, Node.FLAG_NO_THROWS);
54:       assertEquals(2, Node.POST_FLAG);
55:       assertEquals(55, Node.INFERRED_FUNCTION);
56:       assertEquals(52, Node.LENGTH);
57:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
58:       assertEquals(39, Node.EMPTY_BLOCK);
59:       assertEquals(53, Node.INPUT_ID);
60:       assertEquals(15, Node.NO_SIDE_EFFECTS);
61:       assertEquals(57, Node.LAST_PROP);
62:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
63:       assertEquals(54, Node.SLASH_V);
64:       assertEquals(30, Node.VAR_ARGS_NAME);
65:       assertEquals(51, Node.STATIC_SOURCE_FILE);
66:       assertEquals(46, Node.IS_NAMESPACE);
67:       assertEquals(57, Node.REFLECTED_OBJECT);
68:       assertEquals(40, Node.ORIGINALNAME_PROP);
69:       assertEquals(49, Node.DIRECT_EVAL);
70:       assertEquals(37, Node.OPT_ARG_NAME);
71:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
72:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
73:       assertEquals(50, Node.FREE_CALL);
74:       assertEquals(32, Node.INCRDECR_PROP);
75:       assertEquals(12, Node.COLUMN_BITS);
76:       assertEquals(1, Node.DECR_FLAG);
77:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
78:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
79:       assertEquals("[]", stack0.toString());
80:       assertTrue(stack0.isEmpty());
81:       assertEquals(10, stack0.capacity());
82:       assertTrue(stack0.empty());
83:       assertEquals(0, stack0.size());
84:       assertFalse(node0.isNE());
85:       assertFalse(node0.isIf());
86:       assertFalse(node0.isGetterDef());
87:       assertFalse(node0.isFor());
88:       assertFalse(node0.isDelProp());
89:       assertFalse(node0.isArrayLit());
90:       assertFalse(node0.isDebugger());
91:       assertFalse(node0.isRegExp());
92:       assertFalse(node0.isSwitch());
93:       assertFalse(node0.isHook());
94:       assertEquals((-1), node0.getCharno());
95:       assertFalse(node0.isString());
96:       assertFalse(node0.isTry());
97:       assertFalse(node0.isCase());
98:       assertFalse(node0.isComma());
99:       assertEquals(83, node0.getType());
100:       assertEquals(0, node0.getChildCount());
101:       assertFalse(node0.isNull());
102:       assertFalse(node0.isCall());
103:       assertFalse(node0.isStringKey());
104:       assertFalse(node0.isName());
105:       assertFalse(node0.isBreak());
106:       assertFalse(node0.isTrue());
107:       assertFalse(node0.isVoid());
108:       assertFalse(node0.isDefaultCase());
109:       assertFalse(node0.isVar());
110:       assertFalse(node0.isEmpty());
111:       assertFalse(node0.isDo());
112:       assertFalse(node0.isNew());
113:       assertFalse(node0.isAdd());
114:       assertFalse(node0.isNumber());
115:       assertFalse(node0.isTypeOf());
116:       assertFalse(node0.isAssignAdd());
117:       assertFalse(node0.isReturn());
118:       assertFalse(node0.isDec());
119:       assertFalse(node0.isAssign());
120:       assertFalse(node0.isOr());
121:       assertEquals((-1), node0.getSourcePosition());
122:       assertFalse(node0.hasChildren());
123:       assertFalse(node0.isLabel());
124:       assertFalse(node0.isCast());
125:       assertFalse(node0.isContinue());
126:       assertFalse(node0.hasMoreThanOneChild());
127:       assertEquals((-1), node0.getLineno());
128:       assertFalse(node0.isLabelName());
129:       assertFalse(node0.isGetElem());
130:       assertFalse(node0.isExprResult());
131:       assertFalse(node0.isWhile());
132:       assertFalse(node0.isNot());
133:       assertFalse(node0.isBlock());
134:       assertFalse(node0.isObjectLit());
135:       assertTrue(node0.isParamList());
136:       assertFalse(node0.isScript());
137:       assertFalse(node0.hasOneChild());
138:       assertFalse(node0.isGetProp());
139:       assertFalse(node0.isThis());
140:       assertFalse(node0.isAnd());
141:       assertFalse(node0.isCatch());
142:       assertFalse(node0.isFalse());
143:       assertFalse(node0.isWith());
144:       assertFalse(node0.isInstanceOf());
145:       assertFalse(node0.isFunction());
146:       assertFalse(node0.isInc());
147:       assertFalse(node0.isThrow());
148:       assertFalse(node0.isIn());
149:       assertFalse(node0.isSetterDef());
150:       assertNotNull(node0);
151:       
152:       Node node1 = Node.newNumber((double) 32);
153:       assertEquals(29, Node.JSDOC_INFO_PROP);
154:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
155:       assertEquals(47, Node.IS_DISPATCHER);
156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
157:       assertEquals(56, Node.CHANGE_TIME);
158:       assertEquals(46, Node.IS_NAMESPACE);
159:       assertEquals(53, Node.INPUT_ID);
160:       assertEquals(51, Node.STATIC_SOURCE_FILE);
161:       assertEquals(36, Node.QUOTED_PROP);
162:       assertEquals(49, Node.DIRECT_EVAL);
163:       assertEquals(1, Node.DECR_FLAG);
164:       assertEquals(12, Node.COLUMN_BITS);
165:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
166:       assertEquals(32, Node.INCRDECR_PROP);
167:       assertEquals(37, Node.OPT_ARG_NAME);
168:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
170:       assertEquals(4095, Node.COLUMN_MASK);
171:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
172:       assertEquals(50, Node.FREE_CALL);
173:       assertEquals(40, Node.ORIGINALNAME_PROP);
174:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
175:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
176:       assertEquals(48, Node.DIRECTIVES);
177:       assertEquals(54, Node.SLASH_V);
178:       assertEquals(39, Node.EMPTY_BLOCK);
179:       assertEquals(57, Node.REFLECTED_OBJECT);
180:       assertEquals(55, Node.INFERRED_FUNCTION);
181:       assertEquals(52, Node.LENGTH);
182:       assertEquals(8, Node.FLAG_NO_THROWS);
183:       assertEquals(30, Node.VAR_ARGS_NAME);
184:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
185:       assertEquals(15, Node.NO_SIDE_EFFECTS);
186:       assertEquals(43, Node.IS_CONSTANT_NAME);
187:       assertEquals(57, Node.LAST_PROP);
188:       assertEquals(2, Node.POST_FLAG);
189:       assertFalse(node1.equals((Object)node0));
190:       assertFalse(node1.isSwitch());
191:       assertFalse(node1.isString());
192:       assertFalse(node1.isInc());
193:       assertFalse(node1.isCase());
194:       assertFalse(node1.isIn());
195:       assertEquals((-1), node1.getCharno());
196:       assertFalse(node1.isEmpty());
197:       assertFalse(node1.isArrayLit());
198:       assertFalse(node1.isThrow());
199:       assertFalse(node1.isFalse());
200:       assertFalse(node1.isFunction());
201:       assertFalse(node1.isScript());
202:       assertFalse(node1.isTry());
203:       assertFalse(node1.hasOneChild());
204:       assertFalse(node1.isGetterDef());
205:       assertFalse(node1.isIf());
206:       assertFalse(node1.isThis());
207:       assertFalse(node1.isNE());
208:       assertFalse(node1.isFor());
209:       assertEquals((-1), node1.getLineno());
210:       assertFalse(node1.isHook());
211:       assertFalse(node1.isInstanceOf());
212:       assertFalse(node1.isCatch());
213:       assertFalse(node1.isBlock());
214:       assertEquals(39, node1.getType());
215:       assertFalse(node1.isWith());
216:       assertFalse(node1.hasMoreThanOneChild());
217:       assertFalse(node1.isRegExp());
218:       assertFalse(node1.isWhile());
219:       assertFalse(node1.isNew());
220:       assertFalse(node1.isDo());
221:       assertFalse(node1.isAdd());
222:       assertFalse(node1.isOr());
223:       assertEquals((-1), node1.getSourcePosition());
224:       assertFalse(node1.isSetterDef());
225:       assertFalse(node1.isParamList());
226:       assertFalse(node1.isStringKey());
227:       assertFalse(node1.isAssignAdd());
228:       assertFalse(node1.isLabelName());
229:       assertFalse(node1.isCast());
230:       assertFalse(node1.isVar());
231:       assertFalse(node1.isContinue());
232:       assertFalse(node1.isLabel());
233:       assertEquals(0, node1.getChildCount());
234:       assertFalse(node1.isDefaultCase());
235:       assertFalse(node1.isExprResult());
236:       assertFalse(node1.isTrue());
237:       assertFalse(node1.isAnd());
238:       assertFalse(node1.isVoid());
239:       assertFalse(node1.isDebugger());
240:       assertFalse(node1.isNot());
241:       assertFalse(node1.isObjectLit());
242:       assertFalse(node1.isNull());
243:       assertFalse(node1.isDec());
244:       assertFalse(node1.isTypeOf());
245:       assertFalse(node1.isBreak());
246:       assertFalse(node1.hasChildren());
247:       assertFalse(node1.isName());
248:       assertFalse(node1.isGetElem());
249:       assertFalse(node1.isGetProp());
250:       assertTrue(node1.isNumber());
251:       assertFalse(node1.isDelProp());
252:       assertFalse(node1.isCall());
253:       assertFalse(node1.isReturn());
254:       assertFalse(node1.isComma());
255:       assertFalse(node1.isAssign());
256:       assertNotNull(node1);
257:       
258:       boolean boolean0 = node1.isVarArgs();
259:       assertFalse(boolean0);
260:       assertEquals(29, Node.JSDOC_INFO_PROP);
261:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
262:       assertEquals(47, Node.IS_DISPATCHER);
263:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
264:       assertEquals(56, Node.CHANGE_TIME);
265:       assertEquals(46, Node.IS_NAMESPACE);
266:       assertEquals(53, Node.INPUT_ID);
267:       assertEquals(51, Node.STATIC_SOURCE_FILE);
268:       assertEquals(36, Node.QUOTED_PROP);
269:       assertEquals(49, Node.DIRECT_EVAL);
270:       assertEquals(1, Node.DECR_FLAG);
271:       assertEquals(12, Node.COLUMN_BITS);
272:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
273:       assertEquals(32, Node.INCRDECR_PROP);
274:       assertEquals(37, Node.OPT_ARG_NAME);
275:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
276:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
277:       assertEquals(4095, Node.COLUMN_MASK);
278:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
279:       assertEquals(50, Node.FREE_CALL);
280:       assertEquals(40, Node.ORIGINALNAME_PROP);
281:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
282:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
283:       assertEquals(48, Node.DIRECTIVES);
284:       assertEquals(54, Node.SLASH_V);
285:       assertEquals(39, Node.EMPTY_BLOCK);
286:       assertEquals(57, Node.REFLECTED_OBJECT);
287:       assertEquals(55, Node.INFERRED_FUNCTION);
288:       assertEquals(52, Node.LENGTH);
289:       assertEquals(8, Node.FLAG_NO_THROWS);
290:       assertEquals(30, Node.VAR_ARGS_NAME);
291:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
292:       assertEquals(15, Node.NO_SIDE_EFFECTS);
293:       assertEquals(43, Node.IS_CONSTANT_NAME);
294:       assertEquals(57, Node.LAST_PROP);
295:       assertEquals(2, Node.POST_FLAG);
296:       assertFalse(node1.equals((Object)node0));
297:       assertFalse(node1.isSwitch());
298:       assertFalse(node1.isString());
299:       assertFalse(node1.isInc());
300:       assertFalse(node1.isCase());
301:       assertFalse(node1.isIn());
302:       assertEquals((-1), node1.getCharno());
303:       assertFalse(node1.isEmpty());
304:       assertFalse(node1.isArrayLit());
305:       assertFalse(node1.isThrow());
306:       assertFalse(node1.isFalse());
307:       assertFalse(node1.isFunction());
308:       assertFalse(node1.isScript());
309:       assertFalse(node1.isTry());
310:       assertFalse(node1.hasOneChild());
311:       assertFalse(node1.isGetterDef());
312:       assertFalse(node1.isIf());
313:       assertFalse(node1.isThis());
314:       assertFalse(node1.isNE());
315:       assertFalse(node1.isFor());
316:       assertEquals((-1), node1.getLineno());
317:       assertFalse(node1.isHook());
318:       assertFalse(node1.isInstanceOf());
319:       assertFalse(node1.isCatch());
320:       assertFalse(node1.isBlock());
321:       assertEquals(39, node1.getType());
322:       assertFalse(node1.isWith());
323:       assertFalse(node1.hasMoreThanOneChild());
324:       assertFalse(node1.isRegExp());
325:       assertFalse(node1.isWhile());
326:       assertFalse(node1.isNew());
327:       assertFalse(node1.isDo());
328:       assertFalse(node1.isAdd());
329:       assertFalse(node1.isOr());
330:       assertEquals((-1), node1.getSourcePosition());
331:       assertFalse(node1.isSetterDef());
332:       assertFalse(node1.isParamList());
333:       assertFalse(node1.isStringKey());
334:       assertFalse(node1.isAssignAdd());
335:       assertFalse(node1.isLabelName());
336:       assertFalse(node1.isCast());
337:       assertFalse(node1.isVar());
338:       assertFalse(node1.isContinue());
339:       assertFalse(node1.isLabel());
340:       assertEquals(0, node1.getChildCount());
341:       assertFalse(node1.isDefaultCase());
342:       assertFalse(node1.isExprResult());
343:       assertFalse(node1.isTrue());
344:       assertFalse(node1.isAnd());
345:       assertFalse(node1.isVoid());
346:       assertFalse(node1.isDebugger());
347:       assertFalse(node1.isNot());
348:       assertFalse(node1.isObjectLit());
349:       assertFalse(node1.isNull());
350:       assertFalse(node1.isDec());
351:       assertFalse(node1.isTypeOf());
352:       assertFalse(node1.isBreak());
353:       assertFalse(node1.hasChildren());
354:       assertFalse(node1.isName());
355:       assertFalse(node1.isGetElem());
356:       assertFalse(node1.isGetProp());
357:       assertTrue(node1.isNumber());
358:       assertFalse(node1.isDelProp());
359:       assertFalse(node1.isCall());
360:       assertFalse(node1.isReturn());
361:       assertFalse(node1.isComma());
362:       assertFalse(node1.isAssign());
363:       
364:       Iterable<Node> iterable0 = node0.children();
365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
366:       assertEquals(43, Node.IS_CONSTANT_NAME);
367:       assertEquals(36, Node.QUOTED_PROP);
368:       assertEquals(4095, Node.COLUMN_MASK);
369:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
370:       assertEquals(48, Node.DIRECTIVES);
371:       assertEquals(47, Node.IS_DISPATCHER);
372:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
373:       assertEquals(29, Node.JSDOC_INFO_PROP);
374:       assertEquals(56, Node.CHANGE_TIME);
375:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
376:       assertEquals(8, Node.FLAG_NO_THROWS);
377:       assertEquals(2, Node.POST_FLAG);
378:       assertEquals(55, Node.INFERRED_FUNCTION);
379:       assertEquals(52, Node.LENGTH);
380:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
381:       assertEquals(39, Node.EMPTY_BLOCK);
382:       assertEquals(53, Node.INPUT_ID);
383:       assertEquals(15, Node.NO_SIDE_EFFECTS);
384:       assertEquals(57, Node.LAST_PROP);
385:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
386:       assertEquals(54, Node.SLASH_V);
387:       assertEquals(30, Node.VAR_ARGS_NAME);
388:       assertEquals(51, Node.STATIC_SOURCE_FILE);
389:       assertEquals(46, Node.IS_NAMESPACE);
390:       assertEquals(57, Node.REFLECTED_OBJECT);
391:       assertEquals(40, Node.ORIGINALNAME_PROP);
392:       assertEquals(49, Node.DIRECT_EVAL);
393:       assertEquals(37, Node.OPT_ARG_NAME);
394:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
395:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
396:       assertEquals(50, Node.FREE_CALL);
397:       assertEquals(32, Node.INCRDECR_PROP);
398:       assertEquals(12, Node.COLUMN_BITS);
399:       assertEquals(1, Node.DECR_FLAG);
400:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
401:       assertFalse(node0.equals((Object)node1));
402:       assertFalse(iterable0.contains(node0));
403:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
404:       assertEquals("[]", stack0.toString());
405:       assertTrue(stack0.isEmpty());
406:       assertEquals(10, stack0.capacity());
407:       assertTrue(stack0.empty());
408:       assertEquals(0, stack0.size());
409:       assertFalse(node0.isNE());
410:       assertFalse(node0.isIf());
411:       assertFalse(node0.isGetterDef());
412:       assertFalse(node0.isFor());
413:       assertFalse(node0.isDelProp());
414:       assertFalse(node0.isArrayLit());
415:       assertFalse(node0.isDebugger());
416:       assertFalse(node0.isRegExp());
417:       assertFalse(node0.isSwitch());
418:       assertFalse(node0.isHook());
419:       assertEquals((-1), node0.getCharno());
420:       assertFalse(node0.isString());
421:       assertFalse(node0.isTry());
422:       assertFalse(node0.isCase());
423:       assertFalse(node0.isComma());
424:       assertEquals(83, node0.getType());
425:       assertEquals(0, node0.getChildCount());
426:       assertFalse(node0.isNull());
427:       assertFalse(node0.isCall());
428:       assertFalse(node0.isStringKey());
429:       assertFalse(node0.isName());
430:       assertFalse(node0.isBreak());
431:       assertFalse(node0.isTrue());
432:       assertFalse(node0.isVoid());
433:       assertFalse(node0.isDefaultCase());
434:       assertFalse(node0.isVar());
435:       assertFalse(node0.isEmpty());
436:       assertFalse(node0.isDo());
437:       assertFalse(node0.isNew());
438:       assertFalse(node0.isAdd());
439:       assertFalse(node0.isNumber());
440:       assertFalse(node0.isTypeOf());
441:       assertFalse(node0.isAssignAdd());
442:       assertFalse(node0.isReturn());
443:       assertFalse(node0.isDec());
444:       assertFalse(node0.isAssign());
445:       assertFalse(node0.isOr());
446:       assertEquals((-1), node0.getSourcePosition());
447:       assertFalse(node0.hasChildren());
448:       assertFalse(node0.isLabel());
449:       assertFalse(node0.isCast());
450:       assertFalse(node0.isContinue());
451:       assertFalse(node0.hasMoreThanOneChild());
452:       assertEquals((-1), node0.getLineno());
453:       assertFalse(node0.isLabelName());
454:       assertFalse(node0.isGetElem());
455:       assertFalse(node0.isExprResult());
456:       assertFalse(node0.isWhile());
457:       assertFalse(node0.isNot());
458:       assertFalse(node0.isBlock());
459:       assertFalse(node0.isObjectLit());
460:       assertTrue(node0.isParamList());
461:       assertFalse(node0.isScript());
462:       assertFalse(node0.hasOneChild());
463:       assertFalse(node0.isGetProp());
464:       assertFalse(node0.isThis());
465:       assertFalse(node0.isAnd());
466:       assertFalse(node0.isCatch());
467:       assertFalse(node0.isFalse());
468:       assertFalse(node0.isWith());
469:       assertFalse(node0.isInstanceOf());
470:       assertFalse(node0.isFunction());
471:       assertFalse(node0.isInc());
472:       assertFalse(node0.isThrow());
473:       assertFalse(node0.isIn());
474:       assertFalse(node0.isSetterDef());
475:       assertNotNull(iterable0);
476:       
477:       boolean boolean1 = node0.isOptionalArg();
478:       assertFalse(boolean1);
479:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
480:       assertEquals(43, Node.IS_CONSTANT_NAME);
481:       assertEquals(36, Node.QUOTED_PROP);
482:       assertEquals(4095, Node.COLUMN_MASK);
483:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
484:       assertEquals(48, Node.DIRECTIVES);
485:       assertEquals(47, Node.IS_DISPATCHER);
486:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
487:       assertEquals(29, Node.JSDOC_INFO_PROP);
488:       assertEquals(56, Node.CHANGE_TIME);
489:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
490:       assertEquals(8, Node.FLAG_NO_THROWS);
491:       assertEquals(2, Node.POST_FLAG);
492:       assertEquals(55, Node.INFERRED_FUNCTION);
493:       assertEquals(52, Node.LENGTH);
494:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
495:       assertEquals(39, Node.EMPTY_BLOCK);
496:       assertEquals(53, Node.INPUT_ID);
497:       assertEquals(15, Node.NO_SIDE_EFFECTS);
498:       assertEquals(57, Node.LAST_PROP);
499:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
500:       assertEquals(54, Node.SLASH_V);
501:       assertEquals(30, Node.VAR_ARGS_NAME);
502:       assertEquals(51, Node.STATIC_SOURCE_FILE);
503:       assertEquals(46, Node.IS_NAMESPACE);
504:       assertEquals(57, Node.REFLECTED_OBJECT);
505:       assertEquals(40, Node.ORIGINALNAME_PROP);
506:       assertEquals(49, Node.DIRECT_EVAL);
507:       assertEquals(37, Node.OPT_ARG_NAME);
508:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
509:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
510:       assertEquals(50, Node.FREE_CALL);
511:       assertEquals(32, Node.INCRDECR_PROP);
512:       assertEquals(12, Node.COLUMN_BITS);
513:       assertEquals(1, Node.DECR_FLAG);
514:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
515:       assertFalse(node0.equals((Object)node1));
516:       assertTrue(boolean1 == boolean0);
517:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
518:       assertEquals("[]", stack0.toString());
519:       assertTrue(stack0.isEmpty());
520:       assertEquals(10, stack0.capacity());
521:       assertTrue(stack0.empty());
522:       assertEquals(0, stack0.size());
523:       assertFalse(node0.isNE());
524:       assertFalse(node0.isIf());
525:       assertFalse(node0.isGetterDef());
526:       assertFalse(node0.isFor());
527:       assertFalse(node0.isDelProp());
528:       assertFalse(node0.isArrayLit());
529:       assertFalse(node0.isDebugger());
530:       assertFalse(node0.isRegExp());
531:       assertFalse(node0.isSwitch());
532:       assertFalse(node0.isHook());
533:       assertEquals((-1), node0.getCharno());
534:       assertFalse(node0.isString());
535:       assertFalse(node0.isTry());
536:       assertFalse(node0.isCase());
537:       assertFalse(node0.isComma());
538:       assertEquals(83, node0.getType());
539:       assertEquals(0, node0.getChildCount());
540:       assertFalse(node0.isNull());
541:       assertFalse(node0.isCall());
542:       assertFalse(node0.isStringKey());
543:       assertFalse(node0.isName());
544:       assertFalse(node0.isBreak());
545:       assertFalse(node0.isTrue());
546:       assertFalse(node0.isVoid());
547:       assertFalse(node0.isDefaultCase());
548:       assertFalse(node0.isVar());
549:       assertFalse(node0.isEmpty());
550:       assertFalse(node0.isDo());
551:       assertFalse(node0.isNew());
552:       assertFalse(node0.isAdd());
553:       assertFalse(node0.isNumber());
554:       assertFalse(node0.isTypeOf());
555:       assertFalse(node0.isAssignAdd());
556:       assertFalse(node0.isReturn());
557:       assertFalse(node0.isDec());
558:       assertFalse(node0.isAssign());
559:       assertFalse(node0.isOr());
560:       assertEquals((-1), node0.getSourcePosition());
561:       assertFalse(node0.hasChildren());
562:       assertFalse(node0.isLabel());
563:       assertFalse(node0.isCast());
564:       assertFalse(node0.isContinue());
565:       assertFalse(node0.hasMoreThanOneChild());
566:       assertEquals((-1), node0.getLineno());
567:       assertFalse(node0.isLabelName());
568:       assertFalse(node0.isGetElem());
569:       assertFalse(node0.isExprResult());
570:       assertFalse(node0.isWhile());
571:       assertFalse(node0.isNot());
572:       assertFalse(node0.isBlock());
573:       assertFalse(node0.isObjectLit());
574:       assertTrue(node0.isParamList());
575:       assertFalse(node0.isScript());
576:       assertFalse(node0.hasOneChild());
577:       assertFalse(node0.isGetProp());
578:       assertFalse(node0.isThis());
579:       assertFalse(node0.isAnd());
580:       assertFalse(node0.isCatch());
581:       assertFalse(node0.isFalse());
582:       assertFalse(node0.isWith());
583:       assertFalse(node0.isInstanceOf());
584:       assertFalse(node0.isFunction());
585:       assertFalse(node0.isInc());
586:       assertFalse(node0.isThrow());
587:       assertFalse(node0.isIn());
588:       assertFalse(node0.isSetterDef());
589:       
590:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
591:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
592:       assertEquals(0, node_SideEffectFlags0.valueOf());
593:       assertNotNull(node_SideEffectFlags0);
594:       
595:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
596:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
597:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
598:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
599:       assertEquals(0, node_SideEffectFlags0.valueOf());
600:       assertEquals(0, node_SideEffectFlags1.valueOf());
601:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
602:       assertNotNull(node_SideEffectFlags1);
603:       
604:       simpleErrorReporter0.warning("Object#Element", "Object#Element", 276, 46);
605:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
606:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
607:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
608:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
609:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
610:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
611:       assertEquals(0, node_SideEffectFlags0.valueOf());
612:       assertEquals(0, node_SideEffectFlags2.valueOf());
613:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
614:       assertNotNull(node_SideEffectFlags2);
615:       
616:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
617:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
618:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
619:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
620:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
621:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
622:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
623:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
624:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
625:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
626:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
627:       assertEquals(0, node_SideEffectFlags0.valueOf());
628:       assertEquals(0, node_SideEffectFlags1.valueOf());
629:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
630:       assertEquals(0, node_SideEffectFlags3.valueOf());
631:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
632:       assertNotNull(node_SideEffectFlags3);
633:       
634:       node_SideEffectFlags0.clearSideEffectFlags();
635:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
636:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
637:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
638:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
639:       assertEquals(15, node_SideEffectFlags0.valueOf());
640:       
641:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
642:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
643:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
644:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
645:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
646:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
647:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
648:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
649:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
650:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
651:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
652:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
653:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
654:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
655:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
656:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
657:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
658:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
659:       assertEquals(0, node_SideEffectFlags0.valueOf());
660:       assertEquals(0, node_SideEffectFlags1.valueOf());
661:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
662:       assertEquals(0, node_SideEffectFlags3.valueOf());
663:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
664:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
665:       assertEquals(0, node_SideEffectFlags4.valueOf());
666:       assertNotNull(node_SideEffectFlags4);
667:       
668:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
669:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
670:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
671:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
672:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
673:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
674:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
675:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
676:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
677:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
678:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
679:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
680:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
681:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
682:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
683:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
684:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
685:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
686:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
687:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
688:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
689:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
690:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
691:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
692:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
693:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
694:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
695:       assertEquals(0, node_SideEffectFlags0.valueOf());
696:       assertEquals(0, node_SideEffectFlags1.valueOf());
697:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
698:       assertEquals(0, node_SideEffectFlags3.valueOf());
699:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
700:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
701:       assertEquals(0, node_SideEffectFlags4.valueOf());
702:       assertEquals(0, node_SideEffectFlags5.valueOf());
703:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
704:       assertNotNull(node_SideEffectFlags5);
705:       
706:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
707:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
708:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
709:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
710:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
711:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
712:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
713:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
714:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
715:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
716:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
717:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
718:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
719:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
720:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
721:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
722:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
723:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
724:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
725:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
726:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
727:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
728:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
729:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
730:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
731:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
732:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
733:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
734:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
735:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
736:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
737:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
738:       assertEquals(0, node_SideEffectFlags6.valueOf());
739:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
740:       assertEquals(0, node_SideEffectFlags0.valueOf());
741:       assertEquals(0, node_SideEffectFlags1.valueOf());
742:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
743:       assertEquals(0, node_SideEffectFlags3.valueOf());
744:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
745:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
746:       assertEquals(0, node_SideEffectFlags4.valueOf());
747:       assertNotNull(node_SideEffectFlags6);
748:       
749:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setAllFlags();
750:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
751:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
752:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
753:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
754:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
755:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
756:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
757:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
758:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
759:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
760:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
761:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
762:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
763:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
764:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
765:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
766:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
767:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
768:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
769:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
770:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
771:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
772:       assertEquals(0, node_SideEffectFlags7.valueOf());
773:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
774:       assertEquals(0, node_SideEffectFlags0.valueOf());
775:       assertEquals(0, node_SideEffectFlags2.valueOf());
776:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
777:       assertNotNull(node_SideEffectFlags7);
778:       
779:       int int0 = node1.getSourceOffset();
780:       assertEquals((-1), int0);
781:       assertEquals(29, Node.JSDOC_INFO_PROP);
782:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
783:       assertEquals(47, Node.IS_DISPATCHER);
784:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
785:       assertEquals(56, Node.CHANGE_TIME);
786:       assertEquals(46, Node.IS_NAMESPACE);
787:       assertEquals(53, Node.INPUT_ID);
788:       assertEquals(51, Node.STATIC_SOURCE_FILE);
789:       assertEquals(36, Node.QUOTED_PROP);
790:       assertEquals(49, Node.DIRECT_EVAL);
791:       assertEquals(1, Node.DECR_FLAG);
792:       assertEquals(12, Node.COLUMN_BITS);
793:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
794:       assertEquals(32, Node.INCRDECR_PROP);
795:       assertEquals(37, Node.OPT_ARG_NAME);
796:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
797:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
798:       assertEquals(4095, Node.COLUMN_MASK);
799:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
800:       assertEquals(50, Node.FREE_CALL);
801:       assertEquals(40, Node.ORIGINALNAME_PROP);
802:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
803:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
804:       assertEquals(48, Node.DIRECTIVES);
805:       assertEquals(54, Node.SLASH_V);
806:       assertEquals(39, Node.EMPTY_BLOCK);
807:       assertEquals(57, Node.REFLECTED_OBJECT);
808:       assertEquals(55, Node.INFERRED_FUNCTION);
809:       assertEquals(52, Node.LENGTH);
810:       assertEquals(8, Node.FLAG_NO_THROWS);
811:       assertEquals(30, Node.VAR_ARGS_NAME);
812:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
813:       assertEquals(15, Node.NO_SIDE_EFFECTS);
814:       assertEquals(43, Node.IS_CONSTANT_NAME);
815:       assertEquals(57, Node.LAST_PROP);
816:       assertEquals(2, Node.POST_FLAG);
817:       assertFalse(node1.equals((Object)node0));
818:       assertFalse(node1.isSwitch());
819:       assertFalse(node1.isString());
820:       assertFalse(node1.isInc());
821:       assertFalse(node1.isCase());
822:       assertFalse(node1.isIn());
823:       assertEquals((-1), node1.getCharno());
824:       assertFalse(node1.isEmpty());
825:       assertFalse(node1.isArrayLit());
826:       assertFalse(node1.isThrow());
827:       assertFalse(node1.isFalse());
828:       assertFalse(node1.isFunction());
829:       assertFalse(node1.isScript());
830:       assertFalse(node1.isTry());
831:       assertFalse(node1.hasOneChild());
832:       assertFalse(node1.isGetterDef());
833:       assertFalse(node1.isIf());
834:       assertFalse(node1.isThis());
835:       assertFalse(node1.isNE());
836:       assertFalse(node1.isFor());
837:       assertEquals((-1), node1.getLineno());
838:       assertFalse(node1.isHook());
839:       assertFalse(node1.isInstanceOf());
840:       assertFalse(node1.isCatch());
841:       assertFalse(node1.isBlock());
842:       assertEquals(39, node1.getType());
843:       assertFalse(node1.isWith());
844:       assertFalse(node1.hasMoreThanOneChild());
845:       assertFalse(node1.isRegExp());
846:       assertFalse(node1.isWhile());
847:       assertFalse(node1.isNew());
848:       assertFalse(node1.isDo());
849:       assertFalse(node1.isAdd());
850:       assertFalse(node1.isOr());
851:       assertEquals((-1), node1.getSourcePosition());
852:       assertFalse(node1.isSetterDef());
853:       assertFalse(node1.isParamList());
854:       assertFalse(node1.isStringKey());
855:       assertFalse(node1.isAssignAdd());
856:       assertFalse(node1.isLabelName());
857:       assertFalse(node1.isCast());
858:       assertFalse(node1.isVar());
859:       assertFalse(node1.isContinue());
860:       assertFalse(node1.isLabel());
861:       assertEquals(0, node1.getChildCount());
862:       assertFalse(node1.isDefaultCase());
863:       assertFalse(node1.isExprResult());
864:       assertFalse(node1.isTrue());
865:       assertFalse(node1.isAnd());
866:       assertFalse(node1.isVoid());
867:       assertFalse(node1.isDebugger());
868:       assertFalse(node1.isNot());
869:       assertFalse(node1.isObjectLit());
870:       assertFalse(node1.isNull());
871:       assertFalse(node1.isDec());
872:       assertFalse(node1.isTypeOf());
873:       assertFalse(node1.isBreak());
874:       assertFalse(node1.hasChildren());
875:       assertFalse(node1.isName());
876:       assertFalse(node1.isGetElem());
877:       assertFalse(node1.isGetProp());
878:       assertTrue(node1.isNumber());
879:       assertFalse(node1.isDelProp());
880:       assertFalse(node1.isCall());
881:       assertFalse(node1.isReturn());
882:       assertFalse(node1.isComma());
883:       assertFalse(node1.isAssign());
884:       
885:       boolean boolean2 = node1.isCatch();
886:       assertFalse(boolean2);
887:       assertEquals(29, Node.JSDOC_INFO_PROP);
888:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
889:       assertEquals(47, Node.IS_DISPATCHER);
890:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
891:       assertEquals(56, Node.CHANGE_TIME);
892:       assertEquals(46, Node.IS_NAMESPACE);
893:       assertEquals(53, Node.INPUT_ID);
894:       assertEquals(51, Node.STATIC_SOURCE_FILE);
895:       assertEquals(36, Node.QUOTED_PROP);
896:       assertEquals(49, Node.DIRECT_EVAL);
897:       assertEquals(1, Node.DECR_FLAG);
898:       assertEquals(12, Node.COLUMN_BITS);
899:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
900:       assertEquals(32, Node.INCRDECR_PROP);
901:       assertEquals(37, Node.OPT_ARG_NAME);
902:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
903:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
904:       assertEquals(4095, Node.COLUMN_MASK);
905:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
906:       assertEquals(50, Node.FREE_CALL);
907:       assertEquals(40, Node.ORIGINALNAME_PROP);
908:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
909:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
910:       assertEquals(48, Node.DIRECTIVES);
911:       assertEquals(54, Node.SLASH_V);
912:       assertEquals(39, Node.EMPTY_BLOCK);
913:       assertEquals(57, Node.REFLECTED_OBJECT);
914:       assertEquals(55, Node.INFERRED_FUNCTION);
915:       assertEquals(52, Node.LENGTH);
916:       assertEquals(8, Node.FLAG_NO_THROWS);
917:       assertEquals(30, Node.VAR_ARGS_NAME);
918:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
919:       assertEquals(15, Node.NO_SIDE_EFFECTS);
920:       assertEquals(43, Node.IS_CONSTANT_NAME);
921:       assertEquals(57, Node.LAST_PROP);
922:       assertEquals(2, Node.POST_FLAG);
923:       assertTrue(boolean2 == boolean1);
924:       assertTrue(boolean2 == boolean0);
925:       assertFalse(node1.equals((Object)node0));
926:       assertFalse(node1.isSwitch());
927:       assertFalse(node1.isString());
928:       assertFalse(node1.isInc());
929:       assertFalse(node1.isCase());
930:       assertFalse(node1.isIn());
931:       assertEquals((-1), node1.getCharno());
932:       assertFalse(node1.isEmpty());
933:       assertFalse(node1.isArrayLit());
934:       assertFalse(node1.isThrow());
935:       assertFalse(node1.isFalse());
936:       assertFalse(node1.isFunction());
937:       assertFalse(node1.isScript());
938:       assertFalse(node1.isTry());
939:       assertFalse(node1.hasOneChild());
940:       assertFalse(node1.isGetterDef());
941:       assertFalse(node1.isIf());
942:       assertFalse(node1.isThis());
943:       assertFalse(node1.isNE());
944:       assertFalse(node1.isFor());
945:       assertEquals((-1), node1.getLineno());
946:       assertFalse(node1.isHook());
947:       assertFalse(node1.isInstanceOf());
948:       assertFalse(node1.isCatch());
949:       assertFalse(node1.isBlock());
950:       assertEquals(39, node1.getType());
951:       assertFalse(node1.isWith());
952:       assertFalse(node1.hasMoreThanOneChild());
953:       assertFalse(node1.isRegExp());
954:       assertFalse(node1.isWhile());
955:       assertFalse(node1.isNew());
956:       assertFalse(node1.isDo());
957:       assertFalse(node1.isAdd());
958:       assertFalse(node1.isOr());
959:       assertEquals((-1), node1.getSourcePosition());
960:       assertFalse(node1.isSetterDef());
961:       assertFalse(node1.isParamList());
962:       assertFalse(node1.isStringKey());
963:       assertFalse(node1.isAssignAdd());
964:       assertFalse(node1.isLabelName());
965:       assertFalse(node1.isCast());
966:       assertFalse(node1.isVar());
967:       assertFalse(node1.isContinue());
968:       assertFalse(node1.isLabel());
969:       assertEquals(0, node1.getChildCount());
970:       assertFalse(node1.isDefaultCase());
971:       assertFalse(node1.isExprResult());
972:       assertFalse(node1.isTrue());
973:       assertFalse(node1.isAnd());
974:       assertFalse(node1.isVoid());
975:       assertFalse(node1.isDebugger());
976:       assertFalse(node1.isNot());
977:       assertFalse(node1.isObjectLit());
978:       assertFalse(node1.isNull());
979:       assertFalse(node1.isDec());
980:       assertFalse(node1.isTypeOf());
981:       assertFalse(node1.isBreak());
982:       assertFalse(node1.hasChildren());
983:       assertFalse(node1.isName());
984:       assertFalse(node1.isGetElem());
985:       assertFalse(node1.isGetProp());
986:       assertTrue(node1.isNumber());
987:       assertFalse(node1.isDelProp());
988:       assertFalse(node1.isCall());
989:       assertFalse(node1.isReturn());
990:       assertFalse(node1.isComma());
991:       assertFalse(node1.isAssign());
992:       
993:       boolean boolean3 = node0.isCatch();
994:       assertFalse(boolean3);
995:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
996:       assertEquals(43, Node.IS_CONSTANT_NAME);
997:       assertEquals(36, Node.QUOTED_PROP);
998:       assertEquals(4095, Node.COLUMN_MASK);
999:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1000:       assertEquals(48, Node.DIRECTIVES);
1001:       assertEquals(47, Node.IS_DISPATCHER);
1002:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1003:       assertEquals(29, Node.JSDOC_INFO_PROP);
1004:       assertEquals(56, Node.CHANGE_TIME);
1005:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1006:       assertEquals(8, Node.FLAG_NO_THROWS);
1007:       assertEquals(2, Node.POST_FLAG);
1008:       assertEquals(55, Node.INFERRED_FUNCTION);
1009:       assertEquals(52, Node.LENGTH);
1010:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1011:       assertEquals(39, Node.EMPTY_BLOCK);
1012:       assertEquals(53, Node.INPUT_ID);
1013:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1014:       assertEquals(57, Node.LAST_PROP);
1015:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1016:       assertEquals(54, Node.SLASH_V);
1017:       assertEquals(30, Node.VAR_ARGS_NAME);
1018:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1019:       assertEquals(46, Node.IS_NAMESPACE);
1020:       assertEquals(57, Node.REFLECTED_OBJECT);
1021:       assertEquals(40, Node.ORIGINALNAME_PROP);
1022:       assertEquals(49, Node.DIRECT_EVAL);
1023:       assertEquals(37, Node.OPT_ARG_NAME);
1024:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1025:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1026:       assertEquals(50, Node.FREE_CALL);
1027:       assertEquals(32, Node.INCRDECR_PROP);
1028:       assertEquals(12, Node.COLUMN_BITS);
1029:       assertEquals(1, Node.DECR_FLAG);
1030:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1031:       assertFalse(node0.equals((Object)node1));
1032:       assertTrue(boolean3 == boolean0);
1033:       assertTrue(boolean3 == boolean1);
1034:       assertTrue(boolean3 == boolean2);
1035:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1036:       assertEquals("[]", stack0.toString());
1037:       assertTrue(stack0.isEmpty());
1038:       assertEquals(10, stack0.capacity());
1039:       assertTrue(stack0.empty());
1040:       assertEquals(0, stack0.size());
1041:       assertFalse(node0.isNE());
1042:       assertFalse(node0.isIf());
1043:       assertFalse(node0.isGetterDef());
1044:       assertFalse(node0.isFor());
1045:       assertFalse(node0.isDelProp());
1046:       assertFalse(node0.isArrayLit());
1047:       assertFalse(node0.isDebugger());
1048:       assertFalse(node0.isRegExp());
1049:       assertFalse(node0.isSwitch());
1050:       assertFalse(node0.isHook());
1051:       assertEquals((-1), node0.getCharno());
1052:       assertFalse(node0.isString());
1053:       assertFalse(node0.isTry());
1054:       assertFalse(node0.isCase());
1055:       assertFalse(node0.isComma());
1056:       assertEquals(83, node0.getType());
1057:       assertEquals(0, node0.getChildCount());
1058:       assertFalse(node0.isNull());
1059:       assertFalse(node0.isCall());
1060:       assertFalse(node0.isStringKey());
1061:       assertFalse(node0.isName());
1062:       assertFalse(node0.isBreak());
1063:       assertFalse(node0.isTrue());
1064:       assertFalse(node0.isVoid());
1065:       assertFalse(node0.isDefaultCase());
1066:       assertFalse(node0.isVar());
1067:       assertFalse(node0.isEmpty());
1068:       assertFalse(node0.isDo());
1069:       assertFalse(node0.isNew());
1070:       assertFalse(node0.isAdd());
1071:       assertFalse(node0.isNumber());
1072:       assertFalse(node0.isTypeOf());
1073:       assertFalse(node0.isAssignAdd());
1074:       assertFalse(node0.isReturn());
1075:       assertFalse(node0.isDec());
1076:       assertFalse(node0.isAssign());
1077:       assertFalse(node0.isOr());
1078:       assertEquals((-1), node0.getSourcePosition());
1079:       assertFalse(node0.hasChildren());
1080:       assertFalse(node0.isLabel());
1081:       assertFalse(node0.isCast());
1082:       assertFalse(node0.isContinue());
1083:       assertFalse(node0.hasMoreThanOneChild());
1084:       assertEquals((-1), node0.getLineno());
1085:       assertFalse(node0.isLabelName());
1086:       assertFalse(node0.isGetElem());
1087:       assertFalse(node0.isExprResult());
1088:       assertFalse(node0.isWhile());
1089:       assertFalse(node0.isNot());
1090:       assertFalse(node0.isBlock());
1091:       assertFalse(node0.isObjectLit());
1092:       assertTrue(node0.isParamList());
1093:       assertFalse(node0.isScript());
1094:       assertFalse(node0.hasOneChild());
1095:       assertFalse(node0.isGetProp());
1096:       assertFalse(node0.isThis());
1097:       assertFalse(node0.isAnd());
1098:       assertFalse(node0.isCatch());
1099:       assertFalse(node0.isFalse());
1100:       assertFalse(node0.isWith());
1101:       assertFalse(node0.isInstanceOf());
1102:       assertFalse(node0.isFunction());
1103:       assertFalse(node0.isInc());
1104:       assertFalse(node0.isThrow());
1105:       assertFalse(node0.isIn());
1106:       assertFalse(node0.isSetterDef());
1107:       
1108:       // Undeclared exception!
1109:       try { 
1110:         node1.replaceChildAfter(node0, node0);
1111:         fail("Expecting exception: IllegalArgumentException");
1112:       
1113:       } catch(IllegalArgumentException e) {
1114:          //
1115:          // prev is not a child of this node.
1116:          //
1117:          verifyException("com.google.common.base.Preconditions", e);
1118:       }
1119:   }
1120: }
RegularFileObject[/tmp/EvoSuite_165_1629223359194/com/google/javascript/rhino/Node_165_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:39 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_165_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_165_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
156:       "com.google.common.base.Joiner$MapJoiner",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_165_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.EnumType",
332:       "com.google.javascript.rhino.jstype.EnumElementType",
333:       "com.google.javascript.rhino.InputId",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.jstype.TemplatizedType",
340:       "com.google.javascript.rhino.JSTypeExpression",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
342:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
343:       "com.google.common.collect.Iterables",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractIndexedListIterator",
347:       "com.google.common.collect.Iterators$11",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.JSDocInfo$Marker",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.FluentIterable",
352:       "com.google.common.collect.Iterables$2",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.common.collect.Sets$ImprovedAbstractSet",
358:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
359:       "com.google.common.collect.Hashing",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
361:       "com.google.javascript.rhino.jstype.JSType$TypePair",
362:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
363:     );
364:   }
365: }

[MASTER] 18:02:39.356 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

Stack<JSType> stack0 = new Stack<JSType>();
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertTrue(stack0.empty());
assertEquals(0, stack0.size());
assertNotNull(stack0);

Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertTrue(stack0.empty());
assertEquals(0, stack0.size());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertEquals(83, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertNotNull(node0);

Node node1 = Node.newNumber((double) 32);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNull());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isGetProp());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertNotNull(node1);

boolean boolean0 = node1.isVarArgs();
assertFalse(boolean0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNull());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isGetProp());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());

Iterable<Node> iterable0 = node0.children();
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertTrue(stack0.empty());
assertEquals(0, stack0.size());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertEquals(83, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertNotNull(iterable0);

boolean boolean1 = node0.isOptionalArg();
assertFalse(boolean1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertTrue(stack0.empty());
assertEquals(0, stack0.size());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertEquals(83, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);

simpleErrorReporter0.warning("Object#Element", "Object#Element", 276, 46);
Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);

node_SideEffectFlags0.clearSideEffectFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags4.setAllFlags();
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setAllFlags();
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags7.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags7);

int int0 = node1.getSourceOffset();
assertEquals((-1), int0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNull());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isGetProp());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());

boolean boolean2 = node1.isCatch();
assertFalse(boolean2);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isSwitch());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isVar());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isAnd());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNull());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isGetProp());
assertTrue(node1.isNumber());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());

boolean boolean3 = node0.isCatch();
assertFalse(boolean3);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertEquals(10, stack0.capacity());
assertTrue(stack0.empty());
assertEquals(0, stack0.size());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isComma());
assertEquals(83, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isBlock());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());

node1.replaceChildAfter(node0, node0);

[MASTER] 18:02:53.069 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:02.196 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/24
* Done!

* Computation finished
