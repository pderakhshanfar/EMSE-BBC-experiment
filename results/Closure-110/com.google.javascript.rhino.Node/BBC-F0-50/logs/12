* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 19985
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3863607879
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:14:38.346 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:14:40.741 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:14:41.017 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 10:14:41.018 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 10:14:41.156 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 10:14:41.161 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch in context: com.google.javascript.rhino.Node:getJSType()Lcom/google/javascript/rhino/jstype/JSType;
[MASTER] 10:14:41.684 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:15:43.109 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.google.javascript.rhino.jstype.EnumType canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 10:18:55.523 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:23:18.585 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.Node due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 127
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 425
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 26841
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 531
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 425
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 425
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 300
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 5561
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 905
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 219
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 495
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 1326
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 48
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 389
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 634
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 10352
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 634
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 425
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 634
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 68
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 634
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 2641
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 2984
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 9122
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 634
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 1729
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 120
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 1586
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 531
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 2466
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 217
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 531
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 15302
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 905
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 1741
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 1440
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 656
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 2678
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 887
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 55
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 71
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 15012
Number of times BBC is called for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 219
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 2090
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 1207
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 486
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 3634
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 2346
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 2160
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1483: 63
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 4244
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 554
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 425
Number of times BBC is called for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: Line 1323: 43
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 392
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 3341
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 11885
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 302
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 3869
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 451
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 3869
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 15486
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 401
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 3869
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 61
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 4063
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 1948
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1441
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 2038
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 43
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 3869
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 6739
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 3869
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 1610
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 2641
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 163
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 425
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 425
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 425
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 1302
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 322
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 425
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 292
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 99
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 1162
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 1053
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 1889
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 17049
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 43
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 43
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 1162
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 6199
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 14576
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 127
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 2066
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 1162
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 425
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 69
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 2804
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 11976
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 2066
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 3169
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 3047
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 3341
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 4458
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 29448
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 50
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 5123
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 86647
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 1162
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 495
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 1729
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 59
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1684
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 425
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 2163
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 501
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 126
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 2122
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 3060
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 59
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 6805
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 81
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 43
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 5477
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 9751
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 6315
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 1729
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 219
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 2190
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 5016
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 7257
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 531
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 5614
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 1136
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 777
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 512
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 1252
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 219
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 654
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 44
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 48
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 5308
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 868
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 2615
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 15226
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 425
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 1083
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 13166
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 219
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 9076
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 531
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 1300
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 185
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 219
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 1300
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 777
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 4477
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 2505
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 1149
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 2804
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 26996
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: Line 1144: 2038
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 1300
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 43
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 8983
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 16550
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 656
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 1036
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 4273
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 9998
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 4266
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 2066
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 2066
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 7727
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 2792
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 127
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 531
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 905
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 86647
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 4279
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 1586
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 15987
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 55
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - false: 56
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 10892
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - false: 155
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 219
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 531
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 4279
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 3169
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 18
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 619
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 5016
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 4616
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 5016
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 5016
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1595
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 48803
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 531
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 532
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 473
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 492
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 9076
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 15000
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 1440
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 1300
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 3646
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 2257
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 3528
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 913
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 322
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 905
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 1077
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 656
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1090
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 2038
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 2087
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 222
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 935
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 11976
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 6642
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 56
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - false: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 3341
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 2164
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 3249
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 3869
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 2109
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 14032
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 6826
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 1166
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 4626
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 1440
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 1440
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 1715
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 656
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 1586
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 1544
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 397
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 38
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 868
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - false: 47
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 91
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 608
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 531
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 531
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 27721
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 4908
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 768
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 1162
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 531
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 482
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 3417
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 531
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 465
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 531
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 531
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 531
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 465
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 465
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 7141
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 465
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 952
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 1918
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 219
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 1948
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 322
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 2037
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 3547
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 79
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 1
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 1875
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1727: 237
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 531
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1730: 237
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 2095
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1723: 237
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 13151
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 2391
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 3347
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1724: 237
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 8469
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 1875
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 1586
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 1875
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 531
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 8321
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 43
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 4244
Number of times BBC is called for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 1162
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1243
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1725
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 1162
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 8116
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 2038
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 1300
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 690
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 33037
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 2038
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 1129
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 3436
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 2806
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 60
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 184
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 4950
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 322
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 2713
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 437: 56
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 219
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 438: 56
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 435: 56
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 436: 56
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 1032
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 219
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 24536
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 439: 56
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 2095
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 440: 56
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 429: 56
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 4527
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: Line 2351: 43
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 430: 56
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 3869
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 427: 56
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 559
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 428: 56
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 433: 56
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 434: 56
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 15294
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 431: 56
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 432: 56
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 1162
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 2697
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 19895
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 1729
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 4328
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 1141
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 3393
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 127
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 36
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 15276
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 1300
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 7857
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 322
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 2038
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 1586
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 2329
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 3488
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 15228
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 134
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 471
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 1524
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 18417
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 2262
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 1524
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 1586
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 975
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 68
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 19
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 1586
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 8983
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 426: 56
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 13151
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 8983
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 265
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 8983
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 3077
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 928
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 8983
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 29363
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 8983
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 8983
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 322
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 58
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 161
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 531
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 9888
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 9888
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 217
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 905
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 19011
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 22
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 425
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 1440
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 3488
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 8805
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 763
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 425
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 3641
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 389
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 425
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 219
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 2770
Number of times BBC is called for com.google.javascript.rhino.Node.getCharno()I: root-Branch: 2038
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 2038
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 526
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 1190
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 8465
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 5215
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 425
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2084: 43
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 1
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 1729
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2085: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 2631
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 219
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 5047
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 83
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 710
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 4214
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 25905
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 133
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 8321
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 3890
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 8321
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 1440
Number of times BBC is called for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 219
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 743
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 3459
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 2109
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 425
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - true: 32
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 15055
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 1440
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 2038
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 3946
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 4622
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 634
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 1729
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 512
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 216
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 2109
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 216
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 1450
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 24554
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 77
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 63
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 1440
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 36464
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 36464
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 1360
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 1524
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 5779
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 656
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 15382
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 425
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 425
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 425
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: root-Branch: 2664
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 1190
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 531: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 530: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 1227
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 2599
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 1300
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 2830
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 252
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 99
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 322
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 322
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 9
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 1495
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 322
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 738
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1446: 219
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 59
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 792
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 7727
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 14622
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 2260
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 777
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 1956
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 777
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 656
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 14622
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 510
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 142
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 496
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 7
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 36464
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 34
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 43
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 1290
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 36464
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 322
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 36464
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 36464
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 2935
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 1340
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 17345
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 36464
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 501
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 36464
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 2038
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 17345
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 17345
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 24760
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1706: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 2346
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1703: 43
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 9183
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1709: 43
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1708: 43
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1707: 43
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1713: 43
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1712: 43
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: Line 1132: 2664
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 9183
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 19280
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 19368
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 1875
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 425
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 1440
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 4888
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 1440
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 7074
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 26146
Number of times BBC is called for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 425
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 12072
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 5016
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 5215
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 2718
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 1162
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 2069
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: Line 889: 322
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 14532
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 5346
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 1900
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 127
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 3347
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 1246
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 3382
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 12108
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 127
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 322
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 2505
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 156
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 5215
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 60
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 3754
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 1287
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 425
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 10
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 12746
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 219
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 634
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 17347
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 14087
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 1300
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 1729
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 531
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 466: 190
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 2742
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 465
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 1162
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 2509
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 2601
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 24932
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 6199
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 67
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 467: 190
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 468: 190
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 2069
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 10303
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 425
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 531
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 531
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 500
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 2830
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 1032
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 16213
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 27721
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 2830
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 43
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 777
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 1162
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 500
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 1162
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 3742
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 1162
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 1162
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 219
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 219
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 1162
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 18650
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 1032
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 944
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 1111
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 425
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 5215
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 23627
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 53
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 458
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 86647
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 22
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 11952
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 26
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 219
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - true: 3
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 127
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 1300
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 5016
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 3341
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 11116
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 5788
Number of times BBC is called in total: 4633437
* Search finished after 605s and 572 generations, 252310 statements, best individual has fitness: 2776.0
* Minimizing test suite
[MASTER] 10:26:06.517 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 853
* Number of covered goals: 807
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 714
* Number of covered goals: 638
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 105
* Number of covered goals: 105
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 530
* Number of covered goals: 479
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2225
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 600
* Generated 831 tests with total length 11414
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:27:19.761 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6719833333333334% of time used, but only 53/831 tests minimized), falling back to using all assertions
[MASTER] 10:27:39.654 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
[MASTER] 10:27:50.723 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 10:28:10.395 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_125_1628159290326/com/google/javascript/rhino/Node_125_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_125_1628159290326/com/google/javascript/rhino/Node_125_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:10.395 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:10.395 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:10.399 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 668
[MASTER] 10:28:10.400 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_125_1628159290326/com/google/javascript/rhino/Node_125_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:10 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.SimpleErrorReporter;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import java.util.List;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_125_tmp__ESTest extends Node_125_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Node node0 = new Node(55, 55, 2);
27:       assertEquals(8, Node.FLAG_NO_THROWS);
28:       assertEquals(39, Node.EMPTY_BLOCK);
29:       assertEquals(48, Node.DIRECTIVES);
30:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
31:       assertEquals(4095, Node.COLUMN_MASK);
32:       assertEquals(40, Node.ORIGINALNAME_PROP);
33:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
34:       assertEquals(36, Node.QUOTED_PROP);
35:       assertEquals(15, Node.NO_SIDE_EFFECTS);
36:       assertEquals(57, Node.LAST_PROP);
37:       assertEquals(30, Node.VAR_ARGS_NAME);
38:       assertEquals(49, Node.DIRECT_EVAL);
39:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
40:       assertEquals(57, Node.REFLECTED_OBJECT);
41:       assertEquals(53, Node.INPUT_ID);
42:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
43:       assertEquals(52, Node.LENGTH);
44:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
45:       assertEquals(55, Node.INFERRED_FUNCTION);
46:       assertEquals(29, Node.JSDOC_INFO_PROP);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
49:       assertEquals(47, Node.IS_DISPATCHER);
50:       assertEquals(37, Node.OPT_ARG_NAME);
51:       assertEquals(2, Node.POST_FLAG);
52:       assertEquals(46, Node.IS_NAMESPACE);
53:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
54:       assertEquals(12, Node.COLUMN_BITS);
55:       assertEquals(43, Node.IS_CONSTANT_NAME);
56:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
57:       assertEquals(54, Node.SLASH_V);
58:       assertEquals(51, Node.STATIC_SOURCE_FILE);
59:       assertEquals(32, Node.INCRDECR_PROP);
60:       assertEquals(1, Node.DECR_FLAG);
61:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
62:       assertEquals(50, Node.FREE_CALL);
63:       assertNotNull(node0);
64:       assertFalse(node0.isWith());
65:       assertFalse(node0.isNot());
66:       assertEquals(225282, node0.getSourcePosition());
67:       assertFalse(node0.isExprResult());
68:       assertFalse(node0.isScript());
69:       assertFalse(node0.hasOneChild());
70:       assertFalse(node0.isInstanceOf());
71:       assertFalse(node0.isThis());
72:       assertFalse(node0.isNumber());
73:       assertFalse(node0.isLabelName());
74:       assertFalse(node0.isFalse());
75:       assertFalse(node0.isGetProp());
76:       assertFalse(node0.isCast());
77:       assertFalse(node0.isObjectLit());
78:       assertEquals(55, node0.getType());
79:       assertFalse(node0.isAnd());
80:       assertFalse(node0.isSwitch());
81:       assertEquals(55, node0.getLineno());
82:       assertFalse(node0.isDo());
83:       assertFalse(node0.isNew());
84:       assertFalse(node0.isString());
85:       assertFalse(node0.isAdd());
86:       assertFalse(node0.isLabel());
87:       assertFalse(node0.isAssignAdd());
88:       assertFalse(node0.isWhile());
89:       assertFalse(node0.isReturn());
90:       assertFalse(node0.isVar());
91:       assertFalse(node0.isDec());
92:       assertFalse(node0.isTypeOf());
93:       assertFalse(node0.isNull());
94:       assertFalse(node0.isBreak());
95:       assertFalse(node0.hasChildren());
96:       assertFalse(node0.isComma());
97:       assertFalse(node0.isAssign());
98:       assertFalse(node0.isDelProp());
99:       assertFalse(node0.isGetElem());
100:       assertFalse(node0.isCall());
101:       assertFalse(node0.isEmpty());
102:       assertFalse(node0.isOr());
103:       assertFalse(node0.isName());
104:       assertFalse(node0.isTrue());
105:       assertEquals(2, node0.getCharno());
106:       assertFalse(node0.isDefaultCase());
107:       assertFalse(node0.isFunction());
108:       assertFalse(node0.isRegExp());
109:       assertFalse(node0.isVoid());
110:       assertFalse(node0.isCatch());
111:       assertFalse(node0.isTry());
112:       assertEquals(0, node0.getChildCount());
113:       assertFalse(node0.isFor());
114:       assertFalse(node0.isGetterDef());
115:       assertFalse(node0.isArrayLit());
116:       assertFalse(node0.isStringKey());
117:       assertFalse(node0.isDebugger());
118:       assertFalse(node0.isParamList());
119:       assertFalse(node0.isCase());
120:       assertFalse(node0.isContinue());
121:       assertFalse(node0.isInc());
122:       assertFalse(node0.isHook());
123:       assertFalse(node0.hasMoreThanOneChild());
124:       assertFalse(node0.isBlock());
125:       assertFalse(node0.isThrow());
126:       assertFalse(node0.isIf());
127:       assertFalse(node0.isSetterDef());
128:       assertFalse(node0.isIn());
129:       assertFalse(node0.isNE());
130:       
131:       Node node1 = Node.newString(54, "fZ", 46, 47);
132:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
133:       assertEquals(54, Node.SLASH_V);
134:       assertEquals(57, Node.REFLECTED_OBJECT);
135:       assertEquals(30, Node.VAR_ARGS_NAME);
136:       assertEquals(52, Node.LENGTH);
137:       assertEquals(40, Node.ORIGINALNAME_PROP);
138:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
139:       assertEquals(48, Node.DIRECTIVES);
140:       assertEquals(49, Node.DIRECT_EVAL);
141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
142:       assertEquals(39, Node.EMPTY_BLOCK);
143:       assertEquals(47, Node.IS_DISPATCHER);
144:       assertEquals(8, Node.FLAG_NO_THROWS);
145:       assertEquals(2, Node.POST_FLAG);
146:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
147:       assertEquals(55, Node.INFERRED_FUNCTION);
148:       assertEquals(29, Node.JSDOC_INFO_PROP);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(15, Node.NO_SIDE_EFFECTS);
151:       assertEquals(57, Node.LAST_PROP);
152:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
153:       assertEquals(53, Node.INPUT_ID);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
156:       assertEquals(43, Node.IS_CONSTANT_NAME);
157:       assertEquals(56, Node.CHANGE_TIME);
158:       assertEquals(37, Node.OPT_ARG_NAME);
159:       assertEquals(46, Node.IS_NAMESPACE);
160:       assertEquals(51, Node.STATIC_SOURCE_FILE);
161:       assertEquals(4095, Node.COLUMN_MASK);
162:       assertEquals(50, Node.FREE_CALL);
163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
164:       assertEquals(1, Node.DECR_FLAG);
165:       assertEquals(12, Node.COLUMN_BITS);
166:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
167:       assertEquals(32, Node.INCRDECR_PROP);
168:       assertFalse(node1.equals((Object)node0));
169:       assertNotNull(node1);
170:       assertFalse(node1.isGetProp());
171:       assertFalse(node1.isComma());
172:       assertFalse(node1.isThis());
173:       assertFalse(node1.isBreak());
174:       assertFalse(node1.isFalse());
175:       assertFalse(node1.isThrow());
176:       assertFalse(node1.isInstanceOf());
177:       assertFalse(node1.isHook());
178:       assertFalse(node1.isWith());
179:       assertFalse(node1.isScript());
180:       assertFalse(node1.hasOneChild());
181:       assertFalse(node1.isSwitch());
182:       assertFalse(node1.isCase());
183:       assertFalse(node1.isAnd());
184:       assertFalse(node1.isNumber());
185:       assertFalse(node1.isString());
186:       assertFalse(node1.isNot());
187:       assertFalse(node1.isObjectLit());
188:       assertFalse(node1.isNE());
189:       assertFalse(node1.isIf());
190:       assertFalse(node1.isContinue());
191:       assertFalse(node1.isCast());
192:       assertFalse(node1.isFor());
193:       assertFalse(node1.hasMoreThanOneChild());
194:       assertFalse(node1.isInc());
195:       assertFalse(node1.isIn());
196:       assertFalse(node1.isParamList());
197:       assertEquals(47, node1.getCharno());
198:       assertFalse(node1.isSetterDef());
199:       assertFalse(node1.isNull());
200:       assertFalse(node1.isName());
201:       assertFalse(node1.isVar());
202:       assertFalse(node1.isCatch());
203:       assertFalse(node1.isCall());
204:       assertEquals(0, node1.getChildCount());
205:       assertFalse(node1.isFunction());
206:       assertFalse(node1.isRegExp());
207:       assertFalse(node1.isDebugger());
208:       assertFalse(node1.isBlock());
209:       assertEquals(46, node1.getLineno());
210:       assertFalse(node1.isWhile());
211:       assertFalse(node1.isArrayLit());
212:       assertFalse(node1.isTry());
213:       assertFalse(node1.isStringKey());
214:       assertFalse(node1.isGetterDef());
215:       assertFalse(node1.isLabel());
216:       assertFalse(node1.isReturn());
217:       assertFalse(node1.isLabelName());
218:       assertFalse(node1.isAssignAdd());
219:       assertFalse(node1.isDelProp());
220:       assertFalse(node1.isGetElem());
221:       assertFalse(node1.hasChildren());
222:       assertFalse(node1.isDec());
223:       assertFalse(node1.isAssign());
224:       assertFalse(node1.isTypeOf());
225:       assertFalse(node1.isVoid());
226:       assertFalse(node1.isNew());
227:       assertFalse(node1.isAdd());
228:       assertFalse(node1.isExprResult());
229:       assertFalse(node1.isTrue());
230:       assertEquals(188463, node1.getSourcePosition());
231:       assertFalse(node1.isDefaultCase());
232:       assertFalse(node1.isDo());
233:       assertFalse(node1.isEmpty());
234:       assertEquals(54, node1.getType());
235:       assertFalse(node1.isOr());
236:       
237:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
238:       assertEquals(8, Node.FLAG_NO_THROWS);
239:       assertEquals(39, Node.EMPTY_BLOCK);
240:       assertEquals(48, Node.DIRECTIVES);
241:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
242:       assertEquals(4095, Node.COLUMN_MASK);
243:       assertEquals(40, Node.ORIGINALNAME_PROP);
244:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
245:       assertEquals(36, Node.QUOTED_PROP);
246:       assertEquals(15, Node.NO_SIDE_EFFECTS);
247:       assertEquals(57, Node.LAST_PROP);
248:       assertEquals(30, Node.VAR_ARGS_NAME);
249:       assertEquals(49, Node.DIRECT_EVAL);
250:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
251:       assertEquals(57, Node.REFLECTED_OBJECT);
252:       assertEquals(53, Node.INPUT_ID);
253:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
254:       assertEquals(52, Node.LENGTH);
255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
256:       assertEquals(55, Node.INFERRED_FUNCTION);
257:       assertEquals(29, Node.JSDOC_INFO_PROP);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
260:       assertEquals(47, Node.IS_DISPATCHER);
261:       assertEquals(37, Node.OPT_ARG_NAME);
262:       assertEquals(2, Node.POST_FLAG);
263:       assertEquals(46, Node.IS_NAMESPACE);
264:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
265:       assertEquals(12, Node.COLUMN_BITS);
266:       assertEquals(43, Node.IS_CONSTANT_NAME);
267:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
268:       assertEquals(54, Node.SLASH_V);
269:       assertEquals(51, Node.STATIC_SOURCE_FILE);
270:       assertEquals(32, Node.INCRDECR_PROP);
271:       assertEquals(1, Node.DECR_FLAG);
272:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
273:       assertEquals(50, Node.FREE_CALL);
274:       assertFalse(node0.equals((Object)node1));
275:       assertNull(jSDocInfo0);
276:       assertFalse(node0.isWith());
277:       assertFalse(node0.isNot());
278:       assertEquals(225282, node0.getSourcePosition());
279:       assertFalse(node0.isExprResult());
280:       assertFalse(node0.isScript());
281:       assertFalse(node0.hasOneChild());
282:       assertFalse(node0.isInstanceOf());
283:       assertFalse(node0.isThis());
284:       assertFalse(node0.isNumber());
285:       assertFalse(node0.isLabelName());
286:       assertFalse(node0.isFalse());
287:       assertFalse(node0.isGetProp());
288:       assertFalse(node0.isCast());
289:       assertFalse(node0.isObjectLit());
290:       assertEquals(55, node0.getType());
291:       assertFalse(node0.isAnd());
292:       assertFalse(node0.isSwitch());
293:       assertEquals(55, node0.getLineno());
294:       assertFalse(node0.isDo());
295:       assertFalse(node0.isNew());
296:       assertFalse(node0.isString());
297:       assertFalse(node0.isAdd());
298:       assertFalse(node0.isLabel());
299:       assertFalse(node0.isAssignAdd());
300:       assertFalse(node0.isWhile());
301:       assertFalse(node0.isReturn());
302:       assertFalse(node0.isVar());
303:       assertFalse(node0.isDec());
304:       assertFalse(node0.isTypeOf());
305:       assertFalse(node0.isNull());
306:       assertFalse(node0.isBreak());
307:       assertFalse(node0.hasChildren());
308:       assertFalse(node0.isComma());
309:       assertFalse(node0.isAssign());
310:       assertFalse(node0.isDelProp());
311:       assertFalse(node0.isGetElem());
312:       assertFalse(node0.isCall());
313:       assertFalse(node0.isEmpty());
314:       assertFalse(node0.isOr());
315:       assertFalse(node0.isName());
316:       assertFalse(node0.isTrue());
317:       assertEquals(2, node0.getCharno());
318:       assertFalse(node0.isDefaultCase());
319:       assertFalse(node0.isFunction());
320:       assertFalse(node0.isRegExp());
321:       assertFalse(node0.isVoid());
322:       assertFalse(node0.isCatch());
323:       assertFalse(node0.isTry());
324:       assertEquals(0, node0.getChildCount());
325:       assertFalse(node0.isFor());
326:       assertFalse(node0.isGetterDef());
327:       assertFalse(node0.isArrayLit());
328:       assertFalse(node0.isStringKey());
329:       assertFalse(node0.isDebugger());
330:       assertFalse(node0.isParamList());
331:       assertFalse(node0.isCase());
332:       assertFalse(node0.isContinue());
333:       assertFalse(node0.isInc());
334:       assertFalse(node0.isHook());
335:       assertFalse(node0.hasMoreThanOneChild());
336:       assertFalse(node0.isBlock());
337:       assertFalse(node0.isThrow());
338:       assertFalse(node0.isIf());
339:       assertFalse(node0.isSetterDef());
340:       assertFalse(node0.isIn());
341:       assertFalse(node0.isNE());
342:       
343:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
344:       assertNotNull(node_SideEffectFlags0);
345:       assertEquals(32, node_SideEffectFlags0.valueOf());
346:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
347:       
348:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
349:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
350:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
351:       assertNotNull(node_SideEffectFlags1);
352:       assertEquals(31, node_SideEffectFlags0.valueOf());
353:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
354:       assertEquals(31, node_SideEffectFlags1.valueOf());
355:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
356:       
357:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
358:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
359:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
360:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
361:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
362:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
363:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
364:       assertNotNull(node_SideEffectFlags2);
365:       assertEquals(31, node_SideEffectFlags0.valueOf());
366:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
367:       assertEquals(31, node_SideEffectFlags1.valueOf());
368:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
369:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
370:       assertEquals(31, node_SideEffectFlags2.valueOf());
371:       
372:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
373:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
374:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
375:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
376:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
377:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
378:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
379:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
380:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
381:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
382:       assertNotNull(node_SideEffectFlags3);
383:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
384:       assertEquals(24, node_SideEffectFlags0.valueOf());
385:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
386:       assertEquals(24, node_SideEffectFlags1.valueOf());
387:       assertEquals(24, node_SideEffectFlags3.valueOf());
388:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
389:       
390:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
391:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
392:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
393:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
394:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
395:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
396:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
397:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
398:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
399:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
400:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
401:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
402:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
403:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
404:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
405:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
406:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
407:       assertNotNull(node_SideEffectFlags4);
408:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
409:       assertEquals(8, node_SideEffectFlags0.valueOf());
410:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
411:       assertEquals(8, node_SideEffectFlags1.valueOf());
412:       assertEquals(8, node_SideEffectFlags3.valueOf());
413:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
414:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
415:       assertEquals(8, node_SideEffectFlags4.valueOf());
416:       
417:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
418:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
419:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
420:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
421:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
422:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
423:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
424:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
425:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
426:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
427:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
428:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
429:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
430:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
431:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
432:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
433:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
434:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
435:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
436:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
437:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
438:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
439:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
440:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
441:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
442:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
443:       assertNotNull(node_SideEffectFlags5);
444:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
445:       assertEquals(8, node_SideEffectFlags0.valueOf());
446:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
447:       assertEquals(8, node_SideEffectFlags1.valueOf());
448:       assertEquals(8, node_SideEffectFlags3.valueOf());
449:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
450:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
451:       assertEquals(8, node_SideEffectFlags4.valueOf());
452:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
453:       assertEquals(8, node_SideEffectFlags5.valueOf());
454:       
455:       Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
456:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
457:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
458:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
459:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
460:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags5));
461:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
462:       assertNotNull(node_SideEffectFlags6);
463:       assertEquals(0, node_SideEffectFlags6.valueOf());
464:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
465:       
466:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.clearAllFlags();
467:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags0);
468:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags4);
469:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags3);
470:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags2);
471:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags5);
472:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags1);
473:       assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
474:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags5);
475:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
476:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags0);
477:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags2);
478:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags3);
479:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags4);
480:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags1);
481:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
482:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
483:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
484:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
485:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags5));
486:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
487:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags5));
488:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags0));
489:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags2));
490:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags3));
491:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags4));
492:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags1));
493:       assertNotNull(node_SideEffectFlags7);
494:       assertFalse(node_SideEffectFlags6.areAllFlagsSet());
495:       assertEquals(31, node_SideEffectFlags6.valueOf());
496:       assertEquals(31, node_SideEffectFlags7.valueOf());
497:       assertFalse(node_SideEffectFlags7.areAllFlagsSet());
498:       
499:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags0.setReturnsTainted();
500:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
501:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
502:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
503:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags6);
504:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
505:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
506:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
507:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags7);
508:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags6);
509:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags7);
510:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
511:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
512:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
513:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
514:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
515:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
516:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags6));
517:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags7));
518:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
519:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
520:       assertNotNull(node_SideEffectFlags8);
521:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
522:       assertEquals(8, node_SideEffectFlags0.valueOf());
523:       assertFalse(node_SideEffectFlags8.areAllFlagsSet());
524:       assertEquals(8, node_SideEffectFlags8.valueOf());
525:       
526:       node1.addSuppression("Zkg+&~");
527:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
528:       assertEquals(54, Node.SLASH_V);
529:       assertEquals(57, Node.REFLECTED_OBJECT);
530:       assertEquals(30, Node.VAR_ARGS_NAME);
531:       assertEquals(52, Node.LENGTH);
532:       assertEquals(40, Node.ORIGINALNAME_PROP);
533:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
534:       assertEquals(48, Node.DIRECTIVES);
535:       assertEquals(49, Node.DIRECT_EVAL);
536:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
537:       assertEquals(39, Node.EMPTY_BLOCK);
538:       assertEquals(47, Node.IS_DISPATCHER);
539:       assertEquals(8, Node.FLAG_NO_THROWS);
540:       assertEquals(2, Node.POST_FLAG);
541:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
542:       assertEquals(55, Node.INFERRED_FUNCTION);
543:       assertEquals(29, Node.JSDOC_INFO_PROP);
544:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
545:       assertEquals(15, Node.NO_SIDE_EFFECTS);
546:       assertEquals(57, Node.LAST_PROP);
547:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
548:       assertEquals(53, Node.INPUT_ID);
549:       assertEquals(36, Node.QUOTED_PROP);
550:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
551:       assertEquals(43, Node.IS_CONSTANT_NAME);
552:       assertEquals(56, Node.CHANGE_TIME);
553:       assertEquals(37, Node.OPT_ARG_NAME);
554:       assertEquals(46, Node.IS_NAMESPACE);
555:       assertEquals(51, Node.STATIC_SOURCE_FILE);
556:       assertEquals(4095, Node.COLUMN_MASK);
557:       assertEquals(50, Node.FREE_CALL);
558:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
559:       assertEquals(1, Node.DECR_FLAG);
560:       assertEquals(12, Node.COLUMN_BITS);
561:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
562:       assertEquals(32, Node.INCRDECR_PROP);
563:       assertFalse(node1.equals((Object)node0));
564:       assertFalse(node1.isGetProp());
565:       assertFalse(node1.isComma());
566:       assertFalse(node1.isThis());
567:       assertFalse(node1.isBreak());
568:       assertFalse(node1.isFalse());
569:       assertFalse(node1.isThrow());
570:       assertFalse(node1.isInstanceOf());
571:       assertFalse(node1.isHook());
572:       assertFalse(node1.isWith());
573:       assertFalse(node1.isScript());
574:       assertFalse(node1.hasOneChild());
575:       assertFalse(node1.isSwitch());
576:       assertFalse(node1.isCase());
577:       assertFalse(node1.isAnd());
578:       assertFalse(node1.isNumber());
579:       assertFalse(node1.isString());
580:       assertFalse(node1.isNot());
581:       assertFalse(node1.isObjectLit());
582:       assertFalse(node1.isNE());
583:       assertFalse(node1.isIf());
584:       assertFalse(node1.isContinue());
585:       assertFalse(node1.isCast());
586:       assertFalse(node1.isFor());
587:       assertFalse(node1.hasMoreThanOneChild());
588:       assertFalse(node1.isInc());
589:       assertFalse(node1.isIn());
590:       assertFalse(node1.isParamList());
591:       assertEquals(47, node1.getCharno());
592:       assertFalse(node1.isSetterDef());
593:       assertFalse(node1.isNull());
594:       assertFalse(node1.isName());
595:       assertFalse(node1.isVar());
596:       assertFalse(node1.isCatch());
597:       assertFalse(node1.isCall());
598:       assertEquals(0, node1.getChildCount());
599:       assertFalse(node1.isFunction());
600:       assertFalse(node1.isRegExp());
601:       assertFalse(node1.isDebugger());
602:       assertFalse(node1.isBlock());
603:       assertEquals(46, node1.getLineno());
604:       assertFalse(node1.isWhile());
605:       assertFalse(node1.isArrayLit());
606:       assertFalse(node1.isTry());
607:       assertFalse(node1.isStringKey());
608:       assertFalse(node1.isGetterDef());
609:       assertFalse(node1.isLabel());
610:       assertFalse(node1.isReturn());
611:       assertFalse(node1.isLabelName());
612:       assertFalse(node1.isAssignAdd());
613:       assertFalse(node1.isDelProp());
614:       assertFalse(node1.isGetElem());
615:       assertFalse(node1.hasChildren());
616:       assertFalse(node1.isDec());
617:       assertFalse(node1.isAssign());
618:       assertFalse(node1.isTypeOf());
619:       assertFalse(node1.isVoid());
620:       assertFalse(node1.isNew());
621:       assertFalse(node1.isAdd());
622:       assertFalse(node1.isExprResult());
623:       assertFalse(node1.isTrue());
624:       assertEquals(188463, node1.getSourcePosition());
625:       assertFalse(node1.isDefaultCase());
626:       assertFalse(node1.isDo());
627:       assertFalse(node1.isEmpty());
628:       assertEquals(54, node1.getType());
629:       assertFalse(node1.isOr());
630:       
631:       Iterable<Node> iterable0 = node0.children();
632:       assertEquals(8, Node.FLAG_NO_THROWS);
633:       assertEquals(39, Node.EMPTY_BLOCK);
634:       assertEquals(48, Node.DIRECTIVES);
635:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
636:       assertEquals(4095, Node.COLUMN_MASK);
637:       assertEquals(40, Node.ORIGINALNAME_PROP);
638:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
639:       assertEquals(36, Node.QUOTED_PROP);
640:       assertEquals(15, Node.NO_SIDE_EFFECTS);
641:       assertEquals(57, Node.LAST_PROP);
642:       assertEquals(30, Node.VAR_ARGS_NAME);
643:       assertEquals(49, Node.DIRECT_EVAL);
644:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
645:       assertEquals(57, Node.REFLECTED_OBJECT);
646:       assertEquals(53, Node.INPUT_ID);
647:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
648:       assertEquals(52, Node.LENGTH);
649:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
650:       assertEquals(55, Node.INFERRED_FUNCTION);
651:       assertEquals(29, Node.JSDOC_INFO_PROP);
652:       assertEquals(56, Node.CHANGE_TIME);
653:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
654:       assertEquals(47, Node.IS_DISPATCHER);
655:       assertEquals(37, Node.OPT_ARG_NAME);
656:       assertEquals(2, Node.POST_FLAG);
657:       assertEquals(46, Node.IS_NAMESPACE);
658:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
659:       assertEquals(12, Node.COLUMN_BITS);
660:       assertEquals(43, Node.IS_CONSTANT_NAME);
661:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
662:       assertEquals(54, Node.SLASH_V);
663:       assertEquals(51, Node.STATIC_SOURCE_FILE);
664:       assertEquals(32, Node.INCRDECR_PROP);
665:       assertEquals(1, Node.DECR_FLAG);
666:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
667:       assertEquals(50, Node.FREE_CALL);
668:       assertFalse(iterable0.contains(node1));
669:       assertFalse(node0.equals((Object)node1));
670:       assertNotNull(iterable0);
671:       assertFalse(node0.isWith());
672:       assertFalse(node0.isNot());
673:       assertEquals(225282, node0.getSourcePosition());
674:       assertFalse(node0.isExprResult());
675:       assertFalse(node0.isScript());
676:       assertFalse(node0.hasOneChild());
677:       assertFalse(node0.isInstanceOf());
678:       assertFalse(node0.isThis());
679:       assertFalse(node0.isNumber());
680:       assertFalse(node0.isLabelName());
681:       assertFalse(node0.isFalse());
682:       assertFalse(node0.isGetProp());
683:       assertFalse(node0.isCast());
684:       assertFalse(node0.isObjectLit());
685:       assertEquals(55, node0.getType());
686:       assertFalse(node0.isAnd());
687:       assertFalse(node0.isSwitch());
688:       assertEquals(55, node0.getLineno());
689:       assertFalse(node0.isDo());
690:       assertFalse(node0.isNew());
691:       assertFalse(node0.isString());
692:       assertFalse(node0.isAdd());
693:       assertFalse(node0.isLabel());
694:       assertFalse(node0.isAssignAdd());
695:       assertFalse(node0.isWhile());
696:       assertFalse(node0.isReturn());
697:       assertFalse(node0.isVar());
698:       assertFalse(node0.isDec());
699:       assertFalse(node0.isTypeOf());
700:       assertFalse(node0.isNull());
701:       assertFalse(node0.isBreak());
702:       assertFalse(node0.hasChildren());
703:       assertFalse(node0.isComma());
704:       assertFalse(node0.isAssign());
705:       assertFalse(node0.isDelProp());
706:       assertFalse(node0.isGetElem());
707:       assertFalse(node0.isCall());
708:       assertFalse(node0.isEmpty());
709:       assertFalse(node0.isOr());
710:       assertFalse(node0.isName());
711:       assertFalse(node0.isTrue());
712:       assertEquals(2, node0.getCharno());
713:       assertFalse(node0.isDefaultCase());
714:       assertFalse(node0.isFunction());
715:       assertFalse(node0.isRegExp());
716:       assertFalse(node0.isVoid());
717:       assertFalse(node0.isCatch());
718:       assertFalse(node0.isTry());
719:       assertEquals(0, node0.getChildCount());
720:       assertFalse(node0.isFor());
721:       assertFalse(node0.isGetterDef());
722:       assertFalse(node0.isArrayLit());
723:       assertFalse(node0.isStringKey());
724:       assertFalse(node0.isDebugger());
725:       assertFalse(node0.isParamList());
726:       assertFalse(node0.isCase());
727:       assertFalse(node0.isContinue());
728:       assertFalse(node0.isInc());
729:       assertFalse(node0.isHook());
730:       assertFalse(node0.hasMoreThanOneChild());
731:       assertFalse(node0.isBlock());
732:       assertFalse(node0.isThrow());
733:       assertFalse(node0.isIf());
734:       assertFalse(node0.isSetterDef());
735:       assertFalse(node0.isIn());
736:       assertFalse(node0.isNE());
737:       
738:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
739:       assertNotNull(simpleErrorReporter0);
740:       
741:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
742:       assertNotNull(jSTypeRegistry0);
743:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
744:       
745:       // Undeclared exception!
746:       try { 
747:         jSTypeRegistry0.createParameters((List<JSType>) null);
748:         fail("Expecting exception: NullPointerException");
749:       
750:       } catch(NullPointerException e) {
751:          //
752:          // no message in exception (getMessage() returned null)
753:          //
754:          verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
755:       }
756:   }
757: }
RegularFileObject[/tmp/EvoSuite_125_1628159290326/com/google/javascript/rhino/Node_125_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:10 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_125_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_125_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_125_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.JSTypeNative",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
333:       "com.google.javascript.rhino.SimpleErrorReporter",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.Iterables",
343:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
344:       "com.google.javascript.rhino.JSDocInfo$Visibility",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.javascript.rhino.jstype.JSType$TypePair",
360:       "com.google.common.collect.Platform"
361:     );
362:   }
363: }

[MASTER] 10:28:10.419 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(55, 55, 2);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertNotNull(node0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertEquals(225282, node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertEquals(55, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertEquals(55, node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertEquals(2, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());

Node node1 = Node.newString(54, "fZ", 46, 47);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isParamList());
assertEquals(47, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isBlock());
assertEquals(46, node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertEquals(188463, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertEquals(54, node1.getType());
assertFalse(node1.isOr());

JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(node0.equals((Object)node1));
assertNull(jSDocInfo0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertEquals(225282, node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertEquals(55, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertEquals(55, node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertEquals(2, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
assertNotNull(node_SideEffectFlags0);
assertEquals(32, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags3);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags1.valueOf());
assertEquals(24, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags4);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags1.valueOf());
assertEquals(8, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags4.valueOf());

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertNotNull(node_SideEffectFlags5);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags1.valueOf());
assertEquals(8, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags5.valueOf());

Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
assertNotNull(node_SideEffectFlags6);
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.clearAllFlags();
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags1));
assertNotNull(node_SideEffectFlags7);
assertFalse(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags6.valueOf());
assertEquals(31, node_SideEffectFlags7.valueOf());
assertFalse(node_SideEffectFlags7.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags0.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags7));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
assertNotNull(node_SideEffectFlags8);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags8.valueOf());

node1.addSuppression("Zkg+&~");
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isParamList());
assertEquals(47, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isBlock());
assertEquals(46, node1.getLineno());
assertFalse(node1.isWhile());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertEquals(188463, node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertEquals(54, node1.getType());
assertFalse(node1.isOr());

Iterable<Node> iterable0 = node0.children();
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertFalse(iterable0.contains(node1));
assertFalse(node0.equals((Object)node1));
assertNotNull(iterable0);
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertEquals(225282, node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertEquals(55, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertEquals(55, node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertEquals(2, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isTry());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isParamList());
assertFalse(node0.isCase());
assertFalse(node0.isContinue());
assertFalse(node0.isInc());
assertFalse(node0.isHook());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNE());

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertNotNull(jSTypeRegistry0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());

jSTypeRegistry0.createParameters((List<JSType>) null);

[MASTER] 10:28:13.489 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_136_1628159292906/com/google/javascript/rhino/Node_136_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_136_1628159292906/com/google/javascript/rhino/Node_136_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:13.489 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:13.489 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:13.492 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2290
[MASTER] 10:28:13.495 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_136_1628159292906/com/google/javascript/rhino/Node_136_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:12 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_136_tmp__ESTest extends Node_136_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("J.g=");
22:       assertEquals(1, Node.DECR_FLAG);
23:       assertEquals(49, Node.DIRECT_EVAL);
24:       assertEquals(32, Node.INCRDECR_PROP);
25:       assertEquals(15, Node.NO_SIDE_EFFECTS);
26:       assertEquals(37, Node.OPT_ARG_NAME);
27:       assertEquals(54, Node.SLASH_V);
28:       assertEquals(52, Node.LENGTH);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(56, Node.CHANGE_TIME);
31:       assertEquals(51, Node.STATIC_SOURCE_FILE);
32:       assertEquals(57, Node.REFLECTED_OBJECT);
33:       assertEquals(40, Node.ORIGINALNAME_PROP);
34:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
35:       assertEquals(29, Node.JSDOC_INFO_PROP);
36:       assertEquals(39, Node.EMPTY_BLOCK);
37:       assertEquals(53, Node.INPUT_ID);
38:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
39:       assertEquals(2, Node.POST_FLAG);
40:       assertEquals(57, Node.LAST_PROP);
41:       assertEquals(30, Node.VAR_ARGS_NAME);
42:       assertEquals(47, Node.IS_DISPATCHER);
43:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
44:       assertEquals(55, Node.INFERRED_FUNCTION);
45:       assertEquals(4095, Node.COLUMN_MASK);
46:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
47:       assertEquals(48, Node.DIRECTIVES);
48:       assertEquals(8, Node.FLAG_NO_THROWS);
49:       assertEquals(43, Node.IS_CONSTANT_NAME);
50:       assertEquals(36, Node.QUOTED_PROP);
51:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
52:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
53:       assertEquals(50, Node.FREE_CALL);
54:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
55:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
56:       assertEquals(12, Node.COLUMN_BITS);
57:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
58:       assertNotNull(node0);
59:       assertFalse(node0.isThrow());
60:       assertFalse(node0.isFalse());
61:       assertFalse(node0.isThis());
62:       assertFalse(node0.isHook());
63:       assertFalse(node0.isComma());
64:       assertFalse(node0.isSwitch());
65:       assertFalse(node0.isInstanceOf());
66:       assertFalse(node0.isBreak());
67:       assertFalse(node0.isObjectLit());
68:       assertFalse(node0.isAnd());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.isNot());
71:       assertEquals((-1), node0.getCharno());
72:       assertFalse(node0.hasOneChild());
73:       assertFalse(node0.isCase());
74:       assertFalse(node0.isScript());
75:       assertFalse(node0.isGetProp());
76:       assertFalse(node0.isGetterDef());
77:       assertFalse(node0.isAssign());
78:       assertFalse(node0.isDec());
79:       assertFalse(node0.hasChildren());
80:       assertFalse(node0.isExprResult());
81:       assertFalse(node0.isTrue());
82:       assertFalse(node0.isVoid());
83:       assertFalse(node0.isTypeOf());
84:       assertFalse(node0.isDelProp());
85:       assertFalse(node0.isLabelName());
86:       assertFalse(node0.isGetElem());
87:       assertFalse(node0.isArrayLit());
88:       assertEquals(0, node0.getChildCount());
89:       assertFalse(node0.isOr());
90:       assertFalse(node0.isLabel());
91:       assertFalse(node0.isDefaultCase());
92:       assertFalse(node0.isAssignAdd());
93:       assertFalse(node0.isEmpty());
94:       assertFalse(node0.isDo());
95:       assertFalse(node0.isNew());
96:       assertFalse(node0.isAdd());
97:       assertFalse(node0.isCall());
98:       assertFalse(node0.isStringKey());
99:       assertFalse(node0.isVar());
100:       assertFalse(node0.isName());
101:       assertFalse(node0.isBlock());
102:       assertFalse(node0.isNull());
103:       assertFalse(node0.isParamList());
104:       assertFalse(node0.isCatch());
105:       assertFalse(node0.hasMoreThanOneChild());
106:       assertFalse(node0.isWhile());
107:       assertFalse(node0.isReturn());
108:       assertFalse(node0.isDebugger());
109:       assertTrue(node0.isString());
110:       assertFalse(node0.isNumber());
111:       assertFalse(node0.isTry());
112:       assertFalse(node0.isCast());
113:       assertFalse(node0.isFor());
114:       assertEquals((-1), node0.getSourcePosition());
115:       assertFalse(node0.isFunction());
116:       assertFalse(node0.isNE());
117:       assertFalse(node0.isRegExp());
118:       assertFalse(node0.isIf());
119:       assertEquals((-1), node0.getLineno());
120:       assertFalse(node0.isContinue());
121:       assertFalse(node0.isIn());
122:       assertEquals(40, node0.getType());
123:       assertFalse(node0.isInc());
124:       assertFalse(node0.isSetterDef());
125:       
126:       boolean boolean0 = node0.isLabel();
127:       assertFalse(boolean0);
128:       assertEquals(1, Node.DECR_FLAG);
129:       assertEquals(49, Node.DIRECT_EVAL);
130:       assertEquals(32, Node.INCRDECR_PROP);
131:       assertEquals(15, Node.NO_SIDE_EFFECTS);
132:       assertEquals(37, Node.OPT_ARG_NAME);
133:       assertEquals(54, Node.SLASH_V);
134:       assertEquals(52, Node.LENGTH);
135:       assertEquals(46, Node.IS_NAMESPACE);
136:       assertEquals(56, Node.CHANGE_TIME);
137:       assertEquals(51, Node.STATIC_SOURCE_FILE);
138:       assertEquals(57, Node.REFLECTED_OBJECT);
139:       assertEquals(40, Node.ORIGINALNAME_PROP);
140:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
141:       assertEquals(29, Node.JSDOC_INFO_PROP);
142:       assertEquals(39, Node.EMPTY_BLOCK);
143:       assertEquals(53, Node.INPUT_ID);
144:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
145:       assertEquals(2, Node.POST_FLAG);
146:       assertEquals(57, Node.LAST_PROP);
147:       assertEquals(30, Node.VAR_ARGS_NAME);
148:       assertEquals(47, Node.IS_DISPATCHER);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(55, Node.INFERRED_FUNCTION);
151:       assertEquals(4095, Node.COLUMN_MASK);
152:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
153:       assertEquals(48, Node.DIRECTIVES);
154:       assertEquals(8, Node.FLAG_NO_THROWS);
155:       assertEquals(43, Node.IS_CONSTANT_NAME);
156:       assertEquals(36, Node.QUOTED_PROP);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(50, Node.FREE_CALL);
160:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
162:       assertEquals(12, Node.COLUMN_BITS);
163:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
164:       assertFalse(node0.isThrow());
165:       assertFalse(node0.isFalse());
166:       assertFalse(node0.isThis());
167:       assertFalse(node0.isHook());
168:       assertFalse(node0.isComma());
169:       assertFalse(node0.isSwitch());
170:       assertFalse(node0.isInstanceOf());
171:       assertFalse(node0.isBreak());
172:       assertFalse(node0.isObjectLit());
173:       assertFalse(node0.isAnd());
174:       assertFalse(node0.isWith());
175:       assertFalse(node0.isNot());
176:       assertEquals((-1), node0.getCharno());
177:       assertFalse(node0.hasOneChild());
178:       assertFalse(node0.isCase());
179:       assertFalse(node0.isScript());
180:       assertFalse(node0.isGetProp());
181:       assertFalse(node0.isGetterDef());
182:       assertFalse(node0.isAssign());
183:       assertFalse(node0.isDec());
184:       assertFalse(node0.hasChildren());
185:       assertFalse(node0.isExprResult());
186:       assertFalse(node0.isTrue());
187:       assertFalse(node0.isVoid());
188:       assertFalse(node0.isTypeOf());
189:       assertFalse(node0.isDelProp());
190:       assertFalse(node0.isLabelName());
191:       assertFalse(node0.isGetElem());
192:       assertFalse(node0.isArrayLit());
193:       assertEquals(0, node0.getChildCount());
194:       assertFalse(node0.isOr());
195:       assertFalse(node0.isLabel());
196:       assertFalse(node0.isDefaultCase());
197:       assertFalse(node0.isAssignAdd());
198:       assertFalse(node0.isEmpty());
199:       assertFalse(node0.isDo());
200:       assertFalse(node0.isNew());
201:       assertFalse(node0.isAdd());
202:       assertFalse(node0.isCall());
203:       assertFalse(node0.isStringKey());
204:       assertFalse(node0.isVar());
205:       assertFalse(node0.isName());
206:       assertFalse(node0.isBlock());
207:       assertFalse(node0.isNull());
208:       assertFalse(node0.isParamList());
209:       assertFalse(node0.isCatch());
210:       assertFalse(node0.hasMoreThanOneChild());
211:       assertFalse(node0.isWhile());
212:       assertFalse(node0.isReturn());
213:       assertFalse(node0.isDebugger());
214:       assertTrue(node0.isString());
215:       assertFalse(node0.isNumber());
216:       assertFalse(node0.isTry());
217:       assertFalse(node0.isCast());
218:       assertFalse(node0.isFor());
219:       assertEquals((-1), node0.getSourcePosition());
220:       assertFalse(node0.isFunction());
221:       assertFalse(node0.isNE());
222:       assertFalse(node0.isRegExp());
223:       assertFalse(node0.isIf());
224:       assertEquals((-1), node0.getLineno());
225:       assertFalse(node0.isContinue());
226:       assertFalse(node0.isIn());
227:       assertEquals(40, node0.getType());
228:       assertFalse(node0.isInc());
229:       assertFalse(node0.isSetterDef());
230:       
231:       String string0 = node0.toStringTree();
232:       assertEquals("STRING J.g=\n", string0);
233:       assertEquals(1, Node.DECR_FLAG);
234:       assertEquals(49, Node.DIRECT_EVAL);
235:       assertEquals(32, Node.INCRDECR_PROP);
236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
237:       assertEquals(37, Node.OPT_ARG_NAME);
238:       assertEquals(54, Node.SLASH_V);
239:       assertEquals(52, Node.LENGTH);
240:       assertEquals(46, Node.IS_NAMESPACE);
241:       assertEquals(56, Node.CHANGE_TIME);
242:       assertEquals(51, Node.STATIC_SOURCE_FILE);
243:       assertEquals(57, Node.REFLECTED_OBJECT);
244:       assertEquals(40, Node.ORIGINALNAME_PROP);
245:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
246:       assertEquals(29, Node.JSDOC_INFO_PROP);
247:       assertEquals(39, Node.EMPTY_BLOCK);
248:       assertEquals(53, Node.INPUT_ID);
249:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
250:       assertEquals(2, Node.POST_FLAG);
251:       assertEquals(57, Node.LAST_PROP);
252:       assertEquals(30, Node.VAR_ARGS_NAME);
253:       assertEquals(47, Node.IS_DISPATCHER);
254:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
255:       assertEquals(55, Node.INFERRED_FUNCTION);
256:       assertEquals(4095, Node.COLUMN_MASK);
257:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
258:       assertEquals(48, Node.DIRECTIVES);
259:       assertEquals(8, Node.FLAG_NO_THROWS);
260:       assertEquals(43, Node.IS_CONSTANT_NAME);
261:       assertEquals(36, Node.QUOTED_PROP);
262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
263:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
264:       assertEquals(50, Node.FREE_CALL);
265:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
266:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
267:       assertEquals(12, Node.COLUMN_BITS);
268:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
269:       assertNotNull(string0);
270:       assertFalse(node0.isThrow());
271:       assertFalse(node0.isFalse());
272:       assertFalse(node0.isThis());
273:       assertFalse(node0.isHook());
274:       assertFalse(node0.isComma());
275:       assertFalse(node0.isSwitch());
276:       assertFalse(node0.isInstanceOf());
277:       assertFalse(node0.isBreak());
278:       assertFalse(node0.isObjectLit());
279:       assertFalse(node0.isAnd());
280:       assertFalse(node0.isWith());
281:       assertFalse(node0.isNot());
282:       assertEquals((-1), node0.getCharno());
283:       assertFalse(node0.hasOneChild());
284:       assertFalse(node0.isCase());
285:       assertFalse(node0.isScript());
286:       assertFalse(node0.isGetProp());
287:       assertFalse(node0.isGetterDef());
288:       assertFalse(node0.isAssign());
289:       assertFalse(node0.isDec());
290:       assertFalse(node0.hasChildren());
291:       assertFalse(node0.isExprResult());
292:       assertFalse(node0.isTrue());
293:       assertFalse(node0.isVoid());
294:       assertFalse(node0.isTypeOf());
295:       assertFalse(node0.isDelProp());
296:       assertFalse(node0.isLabelName());
297:       assertFalse(node0.isGetElem());
298:       assertFalse(node0.isArrayLit());
299:       assertEquals(0, node0.getChildCount());
300:       assertFalse(node0.isOr());
301:       assertFalse(node0.isLabel());
302:       assertFalse(node0.isDefaultCase());
303:       assertFalse(node0.isAssignAdd());
304:       assertFalse(node0.isEmpty());
305:       assertFalse(node0.isDo());
306:       assertFalse(node0.isNew());
307:       assertFalse(node0.isAdd());
308:       assertFalse(node0.isCall());
309:       assertFalse(node0.isStringKey());
310:       assertFalse(node0.isVar());
311:       assertFalse(node0.isName());
312:       assertFalse(node0.isBlock());
313:       assertFalse(node0.isNull());
314:       assertFalse(node0.isParamList());
315:       assertFalse(node0.isCatch());
316:       assertFalse(node0.hasMoreThanOneChild());
317:       assertFalse(node0.isWhile());
318:       assertFalse(node0.isReturn());
319:       assertFalse(node0.isDebugger());
320:       assertTrue(node0.isString());
321:       assertFalse(node0.isNumber());
322:       assertFalse(node0.isTry());
323:       assertFalse(node0.isCast());
324:       assertFalse(node0.isFor());
325:       assertEquals((-1), node0.getSourcePosition());
326:       assertFalse(node0.isFunction());
327:       assertFalse(node0.isNE());
328:       assertFalse(node0.isRegExp());
329:       assertFalse(node0.isIf());
330:       assertEquals((-1), node0.getLineno());
331:       assertFalse(node0.isContinue());
332:       assertFalse(node0.isIn());
333:       assertEquals(40, node0.getType());
334:       assertFalse(node0.isInc());
335:       assertFalse(node0.isSetterDef());
336:       
337:       int int0 = node0.getIntProp(375);
338:       assertEquals(0, int0);
339:       assertEquals(1, Node.DECR_FLAG);
340:       assertEquals(49, Node.DIRECT_EVAL);
341:       assertEquals(32, Node.INCRDECR_PROP);
342:       assertEquals(15, Node.NO_SIDE_EFFECTS);
343:       assertEquals(37, Node.OPT_ARG_NAME);
344:       assertEquals(54, Node.SLASH_V);
345:       assertEquals(52, Node.LENGTH);
346:       assertEquals(46, Node.IS_NAMESPACE);
347:       assertEquals(56, Node.CHANGE_TIME);
348:       assertEquals(51, Node.STATIC_SOURCE_FILE);
349:       assertEquals(57, Node.REFLECTED_OBJECT);
350:       assertEquals(40, Node.ORIGINALNAME_PROP);
351:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
352:       assertEquals(29, Node.JSDOC_INFO_PROP);
353:       assertEquals(39, Node.EMPTY_BLOCK);
354:       assertEquals(53, Node.INPUT_ID);
355:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
356:       assertEquals(2, Node.POST_FLAG);
357:       assertEquals(57, Node.LAST_PROP);
358:       assertEquals(30, Node.VAR_ARGS_NAME);
359:       assertEquals(47, Node.IS_DISPATCHER);
360:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
361:       assertEquals(55, Node.INFERRED_FUNCTION);
362:       assertEquals(4095, Node.COLUMN_MASK);
363:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
364:       assertEquals(48, Node.DIRECTIVES);
365:       assertEquals(8, Node.FLAG_NO_THROWS);
366:       assertEquals(43, Node.IS_CONSTANT_NAME);
367:       assertEquals(36, Node.QUOTED_PROP);
368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
369:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
370:       assertEquals(50, Node.FREE_CALL);
371:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
372:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
373:       assertEquals(12, Node.COLUMN_BITS);
374:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
375:       assertFalse(node0.isThrow());
376:       assertFalse(node0.isFalse());
377:       assertFalse(node0.isThis());
378:       assertFalse(node0.isHook());
379:       assertFalse(node0.isComma());
380:       assertFalse(node0.isSwitch());
381:       assertFalse(node0.isInstanceOf());
382:       assertFalse(node0.isBreak());
383:       assertFalse(node0.isObjectLit());
384:       assertFalse(node0.isAnd());
385:       assertFalse(node0.isWith());
386:       assertFalse(node0.isNot());
387:       assertEquals((-1), node0.getCharno());
388:       assertFalse(node0.hasOneChild());
389:       assertFalse(node0.isCase());
390:       assertFalse(node0.isScript());
391:       assertFalse(node0.isGetProp());
392:       assertFalse(node0.isGetterDef());
393:       assertFalse(node0.isAssign());
394:       assertFalse(node0.isDec());
395:       assertFalse(node0.hasChildren());
396:       assertFalse(node0.isExprResult());
397:       assertFalse(node0.isTrue());
398:       assertFalse(node0.isVoid());
399:       assertFalse(node0.isTypeOf());
400:       assertFalse(node0.isDelProp());
401:       assertFalse(node0.isLabelName());
402:       assertFalse(node0.isGetElem());
403:       assertFalse(node0.isArrayLit());
404:       assertEquals(0, node0.getChildCount());
405:       assertFalse(node0.isOr());
406:       assertFalse(node0.isLabel());
407:       assertFalse(node0.isDefaultCase());
408:       assertFalse(node0.isAssignAdd());
409:       assertFalse(node0.isEmpty());
410:       assertFalse(node0.isDo());
411:       assertFalse(node0.isNew());
412:       assertFalse(node0.isAdd());
413:       assertFalse(node0.isCall());
414:       assertFalse(node0.isStringKey());
415:       assertFalse(node0.isVar());
416:       assertFalse(node0.isName());
417:       assertFalse(node0.isBlock());
418:       assertFalse(node0.isNull());
419:       assertFalse(node0.isParamList());
420:       assertFalse(node0.isCatch());
421:       assertFalse(node0.hasMoreThanOneChild());
422:       assertFalse(node0.isWhile());
423:       assertFalse(node0.isReturn());
424:       assertFalse(node0.isDebugger());
425:       assertTrue(node0.isString());
426:       assertFalse(node0.isNumber());
427:       assertFalse(node0.isTry());
428:       assertFalse(node0.isCast());
429:       assertFalse(node0.isFor());
430:       assertEquals((-1), node0.getSourcePosition());
431:       assertFalse(node0.isFunction());
432:       assertFalse(node0.isNE());
433:       assertFalse(node0.isRegExp());
434:       assertFalse(node0.isIf());
435:       assertEquals((-1), node0.getLineno());
436:       assertFalse(node0.isContinue());
437:       assertFalse(node0.isIn());
438:       assertEquals(40, node0.getType());
439:       assertFalse(node0.isInc());
440:       assertFalse(node0.isSetterDef());
441:       
442:       boolean boolean1 = node0.isAssign();
443:       assertFalse(boolean1);
444:       assertEquals(1, Node.DECR_FLAG);
445:       assertEquals(49, Node.DIRECT_EVAL);
446:       assertEquals(32, Node.INCRDECR_PROP);
447:       assertEquals(15, Node.NO_SIDE_EFFECTS);
448:       assertEquals(37, Node.OPT_ARG_NAME);
449:       assertEquals(54, Node.SLASH_V);
450:       assertEquals(52, Node.LENGTH);
451:       assertEquals(46, Node.IS_NAMESPACE);
452:       assertEquals(56, Node.CHANGE_TIME);
453:       assertEquals(51, Node.STATIC_SOURCE_FILE);
454:       assertEquals(57, Node.REFLECTED_OBJECT);
455:       assertEquals(40, Node.ORIGINALNAME_PROP);
456:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
457:       assertEquals(29, Node.JSDOC_INFO_PROP);
458:       assertEquals(39, Node.EMPTY_BLOCK);
459:       assertEquals(53, Node.INPUT_ID);
460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
461:       assertEquals(2, Node.POST_FLAG);
462:       assertEquals(57, Node.LAST_PROP);
463:       assertEquals(30, Node.VAR_ARGS_NAME);
464:       assertEquals(47, Node.IS_DISPATCHER);
465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
466:       assertEquals(55, Node.INFERRED_FUNCTION);
467:       assertEquals(4095, Node.COLUMN_MASK);
468:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
469:       assertEquals(48, Node.DIRECTIVES);
470:       assertEquals(8, Node.FLAG_NO_THROWS);
471:       assertEquals(43, Node.IS_CONSTANT_NAME);
472:       assertEquals(36, Node.QUOTED_PROP);
473:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
474:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
475:       assertEquals(50, Node.FREE_CALL);
476:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
477:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
478:       assertEquals(12, Node.COLUMN_BITS);
479:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
480:       assertTrue(boolean1 == boolean0);
481:       assertFalse(node0.isThrow());
482:       assertFalse(node0.isFalse());
483:       assertFalse(node0.isThis());
484:       assertFalse(node0.isHook());
485:       assertFalse(node0.isComma());
486:       assertFalse(node0.isSwitch());
487:       assertFalse(node0.isInstanceOf());
488:       assertFalse(node0.isBreak());
489:       assertFalse(node0.isObjectLit());
490:       assertFalse(node0.isAnd());
491:       assertFalse(node0.isWith());
492:       assertFalse(node0.isNot());
493:       assertEquals((-1), node0.getCharno());
494:       assertFalse(node0.hasOneChild());
495:       assertFalse(node0.isCase());
496:       assertFalse(node0.isScript());
497:       assertFalse(node0.isGetProp());
498:       assertFalse(node0.isGetterDef());
499:       assertFalse(node0.isAssign());
500:       assertFalse(node0.isDec());
501:       assertFalse(node0.hasChildren());
502:       assertFalse(node0.isExprResult());
503:       assertFalse(node0.isTrue());
504:       assertFalse(node0.isVoid());
505:       assertFalse(node0.isTypeOf());
506:       assertFalse(node0.isDelProp());
507:       assertFalse(node0.isLabelName());
508:       assertFalse(node0.isGetElem());
509:       assertFalse(node0.isArrayLit());
510:       assertEquals(0, node0.getChildCount());
511:       assertFalse(node0.isOr());
512:       assertFalse(node0.isLabel());
513:       assertFalse(node0.isDefaultCase());
514:       assertFalse(node0.isAssignAdd());
515:       assertFalse(node0.isEmpty());
516:       assertFalse(node0.isDo());
517:       assertFalse(node0.isNew());
518:       assertFalse(node0.isAdd());
519:       assertFalse(node0.isCall());
520:       assertFalse(node0.isStringKey());
521:       assertFalse(node0.isVar());
522:       assertFalse(node0.isName());
523:       assertFalse(node0.isBlock());
524:       assertFalse(node0.isNull());
525:       assertFalse(node0.isParamList());
526:       assertFalse(node0.isCatch());
527:       assertFalse(node0.hasMoreThanOneChild());
528:       assertFalse(node0.isWhile());
529:       assertFalse(node0.isReturn());
530:       assertFalse(node0.isDebugger());
531:       assertTrue(node0.isString());
532:       assertFalse(node0.isNumber());
533:       assertFalse(node0.isTry());
534:       assertFalse(node0.isCast());
535:       assertFalse(node0.isFor());
536:       assertEquals((-1), node0.getSourcePosition());
537:       assertFalse(node0.isFunction());
538:       assertFalse(node0.isNE());
539:       assertFalse(node0.isRegExp());
540:       assertFalse(node0.isIf());
541:       assertEquals((-1), node0.getLineno());
542:       assertFalse(node0.isContinue());
543:       assertFalse(node0.isIn());
544:       assertEquals(40, node0.getType());
545:       assertFalse(node0.isInc());
546:       assertFalse(node0.isSetterDef());
547:       
548:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
549:       assertNotNull(node_SideEffectFlags0);
550:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
551:       assertEquals(0, node_SideEffectFlags0.valueOf());
552:       
553:       Node node1 = Node.newNumber((double) 4095, 8, 20);
554:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
555:       assertEquals(50, Node.FREE_CALL);
556:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
557:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
558:       assertEquals(8, Node.FLAG_NO_THROWS);
559:       assertEquals(57, Node.REFLECTED_OBJECT);
560:       assertEquals(54, Node.SLASH_V);
561:       assertEquals(4095, Node.COLUMN_MASK);
562:       assertEquals(40, Node.ORIGINALNAME_PROP);
563:       assertEquals(48, Node.DIRECTIVES);
564:       assertEquals(43, Node.IS_CONSTANT_NAME);
565:       assertEquals(12, Node.COLUMN_BITS);
566:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
567:       assertEquals(51, Node.STATIC_SOURCE_FILE);
568:       assertEquals(32, Node.INCRDECR_PROP);
569:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
570:       assertEquals(1, Node.DECR_FLAG);
571:       assertEquals(29, Node.JSDOC_INFO_PROP);
572:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
573:       assertEquals(56, Node.CHANGE_TIME);
574:       assertEquals(2, Node.POST_FLAG);
575:       assertEquals(47, Node.IS_DISPATCHER);
576:       assertEquals(46, Node.IS_NAMESPACE);
577:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
578:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
579:       assertEquals(37, Node.OPT_ARG_NAME);
580:       assertEquals(30, Node.VAR_ARGS_NAME);
581:       assertEquals(49, Node.DIRECT_EVAL);
582:       assertEquals(57, Node.LAST_PROP);
583:       assertEquals(36, Node.QUOTED_PROP);
584:       assertEquals(52, Node.LENGTH);
585:       assertEquals(53, Node.INPUT_ID);
586:       assertEquals(55, Node.INFERRED_FUNCTION);
587:       assertEquals(39, Node.EMPTY_BLOCK);
588:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
589:       assertEquals(15, Node.NO_SIDE_EFFECTS);
590:       assertFalse(node1.equals((Object)node0));
591:       assertNotNull(node1);
592:       assertFalse(node1.isNot());
593:       assertFalse(node1.isWith());
594:       assertFalse(node1.isAnd());
595:       assertFalse(node1.isScript());
596:       assertFalse(node1.isExprResult());
597:       assertFalse(node1.isInstanceOf());
598:       assertFalse(node1.isThis());
599:       assertFalse(node1.isComma());
600:       assertFalse(node1.isAssign());
601:       assertEquals(32788, node1.getSourcePosition());
602:       assertFalse(node1.isGetElem());
603:       assertFalse(node1.isThrow());
604:       assertFalse(node1.isBreak());
605:       assertFalse(node1.isOr());
606:       assertFalse(node1.isContinue());
607:       assertFalse(node1.isWhile());
608:       assertFalse(node1.isString());
609:       assertFalse(node1.isInc());
610:       assertTrue(node1.isNumber());
611:       assertFalse(node1.isReturn());
612:       assertFalse(node1.isTypeOf());
613:       assertFalse(node1.hasChildren());
614:       assertFalse(node1.isDec());
615:       assertFalse(node1.isFalse());
616:       assertFalse(node1.isCast());
617:       assertFalse(node1.isGetProp());
618:       assertFalse(node1.isDebugger());
619:       assertFalse(node1.isObjectLit());
620:       assertFalse(node1.isDefaultCase());
621:       assertFalse(node1.isCatch());
622:       assertFalse(node1.isVoid());
623:       assertFalse(node1.isTry());
624:       assertFalse(node1.isRegExp());
625:       assertFalse(node1.isFunction());
626:       assertEquals(0, node1.getChildCount());
627:       assertEquals(8, node1.getLineno());
628:       assertFalse(node1.isEmpty());
629:       assertFalse(node1.isName());
630:       assertFalse(node1.isIf());
631:       assertFalse(node1.isCall());
632:       assertFalse(node1.isSetterDef());
633:       assertFalse(node1.isDelProp());
634:       assertFalse(node1.isAdd());
635:       assertFalse(node1.isIn());
636:       assertFalse(node1.isNE());
637:       assertFalse(node1.isTrue());
638:       assertFalse(node1.isNull());
639:       assertEquals(39, node1.getType());
640:       assertFalse(node1.isDo());
641:       assertFalse(node1.isSwitch());
642:       assertFalse(node1.isNew());
643:       assertFalse(node1.isCase());
644:       assertFalse(node1.isLabel());
645:       assertFalse(node1.isAssignAdd());
646:       assertFalse(node1.isBlock());
647:       assertFalse(node1.isVar());
648:       assertFalse(node1.hasMoreThanOneChild());
649:       assertFalse(node1.isHook());
650:       assertFalse(node1.isFor());
651:       assertFalse(node1.isLabelName());
652:       assertEquals(20, node1.getCharno());
653:       assertFalse(node1.isStringKey());
654:       assertFalse(node1.isArrayLit());
655:       assertFalse(node1.hasOneChild());
656:       assertFalse(node1.isParamList());
657:       assertFalse(node1.isGetterDef());
658:       
659:       double double0 = node1.getDouble();
660:       assertEquals(4095.0, double0, 0.01);
661:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
662:       assertEquals(50, Node.FREE_CALL);
663:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
664:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
665:       assertEquals(8, Node.FLAG_NO_THROWS);
666:       assertEquals(57, Node.REFLECTED_OBJECT);
667:       assertEquals(54, Node.SLASH_V);
668:       assertEquals(4095, Node.COLUMN_MASK);
669:       assertEquals(40, Node.ORIGINALNAME_PROP);
670:       assertEquals(48, Node.DIRECTIVES);
671:       assertEquals(43, Node.IS_CONSTANT_NAME);
672:       assertEquals(12, Node.COLUMN_BITS);
673:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
674:       assertEquals(51, Node.STATIC_SOURCE_FILE);
675:       assertEquals(32, Node.INCRDECR_PROP);
676:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
677:       assertEquals(1, Node.DECR_FLAG);
678:       assertEquals(29, Node.JSDOC_INFO_PROP);
679:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
680:       assertEquals(56, Node.CHANGE_TIME);
681:       assertEquals(2, Node.POST_FLAG);
682:       assertEquals(47, Node.IS_DISPATCHER);
683:       assertEquals(46, Node.IS_NAMESPACE);
684:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
685:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
686:       assertEquals(37, Node.OPT_ARG_NAME);
687:       assertEquals(30, Node.VAR_ARGS_NAME);
688:       assertEquals(49, Node.DIRECT_EVAL);
689:       assertEquals(57, Node.LAST_PROP);
690:       assertEquals(36, Node.QUOTED_PROP);
691:       assertEquals(52, Node.LENGTH);
692:       assertEquals(53, Node.INPUT_ID);
693:       assertEquals(55, Node.INFERRED_FUNCTION);
694:       assertEquals(39, Node.EMPTY_BLOCK);
695:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
696:       assertEquals(15, Node.NO_SIDE_EFFECTS);
697:       assertFalse(node1.equals((Object)node0));
698:       assertFalse(node1.isNot());
699:       assertFalse(node1.isWith());
700:       assertFalse(node1.isAnd());
701:       assertFalse(node1.isScript());
702:       assertFalse(node1.isExprResult());
703:       assertFalse(node1.isInstanceOf());
704:       assertFalse(node1.isThis());
705:       assertFalse(node1.isComma());
706:       assertFalse(node1.isAssign());
707:       assertEquals(32788, node1.getSourcePosition());
708:       assertFalse(node1.isGetElem());
709:       assertFalse(node1.isThrow());
710:       assertFalse(node1.isBreak());
711:       assertFalse(node1.isOr());
712:       assertFalse(node1.isContinue());
713:       assertFalse(node1.isWhile());
714:       assertFalse(node1.isString());
715:       assertFalse(node1.isInc());
716:       assertTrue(node1.isNumber());
717:       assertFalse(node1.isReturn());
718:       assertFalse(node1.isTypeOf());
719:       assertFalse(node1.hasChildren());
720:       assertFalse(node1.isDec());
721:       assertFalse(node1.isFalse());
722:       assertFalse(node1.isCast());
723:       assertFalse(node1.isGetProp());
724:       assertFalse(node1.isDebugger());
725:       assertFalse(node1.isObjectLit());
726:       assertFalse(node1.isDefaultCase());
727:       assertFalse(node1.isCatch());
728:       assertFalse(node1.isVoid());
729:       assertFalse(node1.isTry());
730:       assertFalse(node1.isRegExp());
731:       assertFalse(node1.isFunction());
732:       assertEquals(0, node1.getChildCount());
733:       assertEquals(8, node1.getLineno());
734:       assertFalse(node1.isEmpty());
735:       assertFalse(node1.isName());
736:       assertFalse(node1.isIf());
737:       assertFalse(node1.isCall());
738:       assertFalse(node1.isSetterDef());
739:       assertFalse(node1.isDelProp());
740:       assertFalse(node1.isAdd());
741:       assertFalse(node1.isIn());
742:       assertFalse(node1.isNE());
743:       assertFalse(node1.isTrue());
744:       assertFalse(node1.isNull());
745:       assertEquals(39, node1.getType());
746:       assertFalse(node1.isDo());
747:       assertFalse(node1.isSwitch());
748:       assertFalse(node1.isNew());
749:       assertFalse(node1.isCase());
750:       assertFalse(node1.isLabel());
751:       assertFalse(node1.isAssignAdd());
752:       assertFalse(node1.isBlock());
753:       assertFalse(node1.isVar());
754:       assertFalse(node1.hasMoreThanOneChild());
755:       assertFalse(node1.isHook());
756:       assertFalse(node1.isFor());
757:       assertFalse(node1.isLabelName());
758:       assertEquals(20, node1.getCharno());
759:       assertFalse(node1.isStringKey());
760:       assertFalse(node1.isArrayLit());
761:       assertFalse(node1.hasOneChild());
762:       assertFalse(node1.isParamList());
763:       assertFalse(node1.isGetterDef());
764:       
765:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
766:       assertEquals(1, Node.DECR_FLAG);
767:       assertEquals(49, Node.DIRECT_EVAL);
768:       assertEquals(32, Node.INCRDECR_PROP);
769:       assertEquals(15, Node.NO_SIDE_EFFECTS);
770:       assertEquals(37, Node.OPT_ARG_NAME);
771:       assertEquals(54, Node.SLASH_V);
772:       assertEquals(52, Node.LENGTH);
773:       assertEquals(46, Node.IS_NAMESPACE);
774:       assertEquals(56, Node.CHANGE_TIME);
775:       assertEquals(51, Node.STATIC_SOURCE_FILE);
776:       assertEquals(57, Node.REFLECTED_OBJECT);
777:       assertEquals(40, Node.ORIGINALNAME_PROP);
778:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
779:       assertEquals(29, Node.JSDOC_INFO_PROP);
780:       assertEquals(39, Node.EMPTY_BLOCK);
781:       assertEquals(53, Node.INPUT_ID);
782:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
783:       assertEquals(2, Node.POST_FLAG);
784:       assertEquals(57, Node.LAST_PROP);
785:       assertEquals(30, Node.VAR_ARGS_NAME);
786:       assertEquals(47, Node.IS_DISPATCHER);
787:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
788:       assertEquals(55, Node.INFERRED_FUNCTION);
789:       assertEquals(4095, Node.COLUMN_MASK);
790:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
791:       assertEquals(48, Node.DIRECTIVES);
792:       assertEquals(8, Node.FLAG_NO_THROWS);
793:       assertEquals(43, Node.IS_CONSTANT_NAME);
794:       assertEquals(36, Node.QUOTED_PROP);
795:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
796:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
797:       assertEquals(50, Node.FREE_CALL);
798:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
799:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
800:       assertEquals(12, Node.COLUMN_BITS);
801:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
802:       assertFalse(node0.equals((Object)node1));
803:       assertNull(staticSourceFile0);
804:       assertFalse(node0.isThrow());
805:       assertFalse(node0.isFalse());
806:       assertFalse(node0.isThis());
807:       assertFalse(node0.isHook());
808:       assertFalse(node0.isComma());
809:       assertFalse(node0.isSwitch());
810:       assertFalse(node0.isInstanceOf());
811:       assertFalse(node0.isBreak());
812:       assertFalse(node0.isObjectLit());
813:       assertFalse(node0.isAnd());
814:       assertFalse(node0.isWith());
815:       assertFalse(node0.isNot());
816:       assertEquals((-1), node0.getCharno());
817:       assertFalse(node0.hasOneChild());
818:       assertFalse(node0.isCase());
819:       assertFalse(node0.isScript());
820:       assertFalse(node0.isGetProp());
821:       assertFalse(node0.isGetterDef());
822:       assertFalse(node0.isAssign());
823:       assertFalse(node0.isDec());
824:       assertFalse(node0.hasChildren());
825:       assertFalse(node0.isExprResult());
826:       assertFalse(node0.isTrue());
827:       assertFalse(node0.isVoid());
828:       assertFalse(node0.isTypeOf());
829:       assertFalse(node0.isDelProp());
830:       assertFalse(node0.isLabelName());
831:       assertFalse(node0.isGetElem());
832:       assertFalse(node0.isArrayLit());
833:       assertEquals(0, node0.getChildCount());
834:       assertFalse(node0.isOr());
835:       assertFalse(node0.isLabel());
836:       assertFalse(node0.isDefaultCase());
837:       assertFalse(node0.isAssignAdd());
838:       assertFalse(node0.isEmpty());
839:       assertFalse(node0.isDo());
840:       assertFalse(node0.isNew());
841:       assertFalse(node0.isAdd());
842:       assertFalse(node0.isCall());
843:       assertFalse(node0.isStringKey());
844:       assertFalse(node0.isVar());
845:       assertFalse(node0.isName());
846:       assertFalse(node0.isBlock());
847:       assertFalse(node0.isNull());
848:       assertFalse(node0.isParamList());
849:       assertFalse(node0.isCatch());
850:       assertFalse(node0.hasMoreThanOneChild());
851:       assertFalse(node0.isWhile());
852:       assertFalse(node0.isReturn());
853:       assertFalse(node0.isDebugger());
854:       assertTrue(node0.isString());
855:       assertFalse(node0.isNumber());
856:       assertFalse(node0.isTry());
857:       assertFalse(node0.isCast());
858:       assertFalse(node0.isFor());
859:       assertEquals((-1), node0.getSourcePosition());
860:       assertFalse(node0.isFunction());
861:       assertFalse(node0.isNE());
862:       assertFalse(node0.isRegExp());
863:       assertFalse(node0.isIf());
864:       assertEquals((-1), node0.getLineno());
865:       assertFalse(node0.isContinue());
866:       assertFalse(node0.isIn());
867:       assertEquals(40, node0.getType());
868:       assertFalse(node0.isInc());
869:       assertFalse(node0.isSetterDef());
870:       
871:       boolean boolean2 = node1.isUnscopedQualifiedName();
872:       assertFalse(boolean2);
873:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
874:       assertEquals(50, Node.FREE_CALL);
875:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
876:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
877:       assertEquals(8, Node.FLAG_NO_THROWS);
878:       assertEquals(57, Node.REFLECTED_OBJECT);
879:       assertEquals(54, Node.SLASH_V);
880:       assertEquals(4095, Node.COLUMN_MASK);
881:       assertEquals(40, Node.ORIGINALNAME_PROP);
882:       assertEquals(48, Node.DIRECTIVES);
883:       assertEquals(43, Node.IS_CONSTANT_NAME);
884:       assertEquals(12, Node.COLUMN_BITS);
885:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
886:       assertEquals(51, Node.STATIC_SOURCE_FILE);
887:       assertEquals(32, Node.INCRDECR_PROP);
888:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
889:       assertEquals(1, Node.DECR_FLAG);
890:       assertEquals(29, Node.JSDOC_INFO_PROP);
891:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
892:       assertEquals(56, Node.CHANGE_TIME);
893:       assertEquals(2, Node.POST_FLAG);
894:       assertEquals(47, Node.IS_DISPATCHER);
895:       assertEquals(46, Node.IS_NAMESPACE);
896:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
897:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
898:       assertEquals(37, Node.OPT_ARG_NAME);
899:       assertEquals(30, Node.VAR_ARGS_NAME);
900:       assertEquals(49, Node.DIRECT_EVAL);
901:       assertEquals(57, Node.LAST_PROP);
902:       assertEquals(36, Node.QUOTED_PROP);
903:       assertEquals(52, Node.LENGTH);
904:       assertEquals(53, Node.INPUT_ID);
905:       assertEquals(55, Node.INFERRED_FUNCTION);
906:       assertEquals(39, Node.EMPTY_BLOCK);
907:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
908:       assertEquals(15, Node.NO_SIDE_EFFECTS);
909:       assertFalse(node1.equals((Object)node0));
910:       assertTrue(boolean2 == boolean1);
911:       assertTrue(boolean2 == boolean0);
912:       assertFalse(node1.isNot());
913:       assertFalse(node1.isWith());
914:       assertFalse(node1.isAnd());
915:       assertFalse(node1.isScript());
916:       assertFalse(node1.isExprResult());
917:       assertFalse(node1.isInstanceOf());
918:       assertFalse(node1.isThis());
919:       assertFalse(node1.isComma());
920:       assertFalse(node1.isAssign());
921:       assertEquals(32788, node1.getSourcePosition());
922:       assertFalse(node1.isGetElem());
923:       assertFalse(node1.isThrow());
924:       assertFalse(node1.isBreak());
925:       assertFalse(node1.isOr());
926:       assertFalse(node1.isContinue());
927:       assertFalse(node1.isWhile());
928:       assertFalse(node1.isString());
929:       assertFalse(node1.isInc());
930:       assertTrue(node1.isNumber());
931:       assertFalse(node1.isReturn());
932:       assertFalse(node1.isTypeOf());
933:       assertFalse(node1.hasChildren());
934:       assertFalse(node1.isDec());
935:       assertFalse(node1.isFalse());
936:       assertFalse(node1.isCast());
937:       assertFalse(node1.isGetProp());
938:       assertFalse(node1.isDebugger());
939:       assertFalse(node1.isObjectLit());
940:       assertFalse(node1.isDefaultCase());
941:       assertFalse(node1.isCatch());
942:       assertFalse(node1.isVoid());
943:       assertFalse(node1.isTry());
944:       assertFalse(node1.isRegExp());
945:       assertFalse(node1.isFunction());
946:       assertEquals(0, node1.getChildCount());
947:       assertEquals(8, node1.getLineno());
948:       assertFalse(node1.isEmpty());
949:       assertFalse(node1.isName());
950:       assertFalse(node1.isIf());
951:       assertFalse(node1.isCall());
952:       assertFalse(node1.isSetterDef());
953:       assertFalse(node1.isDelProp());
954:       assertFalse(node1.isAdd());
955:       assertFalse(node1.isIn());
956:       assertFalse(node1.isNE());
957:       assertFalse(node1.isTrue());
958:       assertFalse(node1.isNull());
959:       assertEquals(39, node1.getType());
960:       assertFalse(node1.isDo());
961:       assertFalse(node1.isSwitch());
962:       assertFalse(node1.isNew());
963:       assertFalse(node1.isCase());
964:       assertFalse(node1.isLabel());
965:       assertFalse(node1.isAssignAdd());
966:       assertFalse(node1.isBlock());
967:       assertFalse(node1.isVar());
968:       assertFalse(node1.hasMoreThanOneChild());
969:       assertFalse(node1.isHook());
970:       assertFalse(node1.isFor());
971:       assertFalse(node1.isLabelName());
972:       assertEquals(20, node1.getCharno());
973:       assertFalse(node1.isStringKey());
974:       assertFalse(node1.isArrayLit());
975:       assertFalse(node1.hasOneChild());
976:       assertFalse(node1.isParamList());
977:       assertFalse(node1.isGetterDef());
978:       
979:       Iterable<Node> iterable0 = node1.siblings();
980:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
981:       assertEquals(50, Node.FREE_CALL);
982:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
983:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
984:       assertEquals(8, Node.FLAG_NO_THROWS);
985:       assertEquals(57, Node.REFLECTED_OBJECT);
986:       assertEquals(54, Node.SLASH_V);
987:       assertEquals(4095, Node.COLUMN_MASK);
988:       assertEquals(40, Node.ORIGINALNAME_PROP);
989:       assertEquals(48, Node.DIRECTIVES);
990:       assertEquals(43, Node.IS_CONSTANT_NAME);
991:       assertEquals(12, Node.COLUMN_BITS);
992:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
993:       assertEquals(51, Node.STATIC_SOURCE_FILE);
994:       assertEquals(32, Node.INCRDECR_PROP);
995:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
996:       assertEquals(1, Node.DECR_FLAG);
997:       assertEquals(29, Node.JSDOC_INFO_PROP);
998:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
999:       assertEquals(56, Node.CHANGE_TIME);
1000:       assertEquals(2, Node.POST_FLAG);
1001:       assertEquals(47, Node.IS_DISPATCHER);
1002:       assertEquals(46, Node.IS_NAMESPACE);
1003:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1004:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1005:       assertEquals(37, Node.OPT_ARG_NAME);
1006:       assertEquals(30, Node.VAR_ARGS_NAME);
1007:       assertEquals(49, Node.DIRECT_EVAL);
1008:       assertEquals(57, Node.LAST_PROP);
1009:       assertEquals(36, Node.QUOTED_PROP);
1010:       assertEquals(52, Node.LENGTH);
1011:       assertEquals(53, Node.INPUT_ID);
1012:       assertEquals(55, Node.INFERRED_FUNCTION);
1013:       assertEquals(39, Node.EMPTY_BLOCK);
1014:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1015:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1016:       assertFalse(node1.equals((Object)node0));
1017:       assertNotNull(iterable0);
1018:       assertFalse(node1.isNot());
1019:       assertFalse(node1.isWith());
1020:       assertFalse(node1.isAnd());
1021:       assertFalse(node1.isScript());
1022:       assertFalse(node1.isExprResult());
1023:       assertFalse(node1.isInstanceOf());
1024:       assertFalse(node1.isThis());
1025:       assertFalse(node1.isComma());
1026:       assertFalse(node1.isAssign());
1027:       assertEquals(32788, node1.getSourcePosition());
1028:       assertFalse(node1.isGetElem());
1029:       assertFalse(node1.isThrow());
1030:       assertFalse(node1.isBreak());
1031:       assertFalse(node1.isOr());
1032:       assertFalse(node1.isContinue());
1033:       assertFalse(node1.isWhile());
1034:       assertFalse(node1.isString());
1035:       assertFalse(node1.isInc());
1036:       assertTrue(node1.isNumber());
1037:       assertFalse(node1.isReturn());
1038:       assertFalse(node1.isTypeOf());
1039:       assertFalse(node1.hasChildren());
1040:       assertFalse(node1.isDec());
1041:       assertFalse(node1.isFalse());
1042:       assertFalse(node1.isCast());
1043:       assertFalse(node1.isGetProp());
1044:       assertFalse(node1.isDebugger());
1045:       assertFalse(node1.isObjectLit());
1046:       assertFalse(node1.isDefaultCase());
1047:       assertFalse(node1.isCatch());
1048:       assertFalse(node1.isVoid());
1049:       assertFalse(node1.isTry());
1050:       assertFalse(node1.isRegExp());
1051:       assertFalse(node1.isFunction());
1052:       assertEquals(0, node1.getChildCount());
1053:       assertEquals(8, node1.getLineno());
1054:       assertFalse(node1.isEmpty());
1055:       assertFalse(node1.isName());
1056:       assertFalse(node1.isIf());
1057:       assertFalse(node1.isCall());
1058:       assertFalse(node1.isSetterDef());
1059:       assertFalse(node1.isDelProp());
1060:       assertFalse(node1.isAdd());
1061:       assertFalse(node1.isIn());
1062:       assertFalse(node1.isNE());
1063:       assertFalse(node1.isTrue());
1064:       assertFalse(node1.isNull());
1065:       assertEquals(39, node1.getType());
1066:       assertFalse(node1.isDo());
1067:       assertFalse(node1.isSwitch());
1068:       assertFalse(node1.isNew());
1069:       assertFalse(node1.isCase());
1070:       assertFalse(node1.isLabel());
1071:       assertFalse(node1.isAssignAdd());
1072:       assertFalse(node1.isBlock());
1073:       assertFalse(node1.isVar());
1074:       assertFalse(node1.hasMoreThanOneChild());
1075:       assertFalse(node1.isHook());
1076:       assertFalse(node1.isFor());
1077:       assertFalse(node1.isLabelName());
1078:       assertEquals(20, node1.getCharno());
1079:       assertFalse(node1.isStringKey());
1080:       assertFalse(node1.isArrayLit());
1081:       assertFalse(node1.hasOneChild());
1082:       assertFalse(node1.isParamList());
1083:       assertFalse(node1.isGetterDef());
1084:       
1085:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
1086:       assertEquals(1, Node.DECR_FLAG);
1087:       assertEquals(49, Node.DIRECT_EVAL);
1088:       assertEquals(32, Node.INCRDECR_PROP);
1089:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1090:       assertEquals(37, Node.OPT_ARG_NAME);
1091:       assertEquals(54, Node.SLASH_V);
1092:       assertEquals(52, Node.LENGTH);
1093:       assertEquals(46, Node.IS_NAMESPACE);
1094:       assertEquals(56, Node.CHANGE_TIME);
1095:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1096:       assertEquals(57, Node.REFLECTED_OBJECT);
1097:       assertEquals(40, Node.ORIGINALNAME_PROP);
1098:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1099:       assertEquals(29, Node.JSDOC_INFO_PROP);
1100:       assertEquals(39, Node.EMPTY_BLOCK);
1101:       assertEquals(53, Node.INPUT_ID);
1102:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1103:       assertEquals(2, Node.POST_FLAG);
1104:       assertEquals(57, Node.LAST_PROP);
1105:       assertEquals(30, Node.VAR_ARGS_NAME);
1106:       assertEquals(47, Node.IS_DISPATCHER);
1107:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1108:       assertEquals(55, Node.INFERRED_FUNCTION);
1109:       assertEquals(4095, Node.COLUMN_MASK);
1110:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1111:       assertEquals(48, Node.DIRECTIVES);
1112:       assertEquals(8, Node.FLAG_NO_THROWS);
1113:       assertEquals(43, Node.IS_CONSTANT_NAME);
1114:       assertEquals(36, Node.QUOTED_PROP);
1115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1117:       assertEquals(50, Node.FREE_CALL);
1118:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1119:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1120:       assertEquals(12, Node.COLUMN_BITS);
1121:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1122:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1123:       assertEquals(50, Node.FREE_CALL);
1124:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1125:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1126:       assertEquals(8, Node.FLAG_NO_THROWS);
1127:       assertEquals(57, Node.REFLECTED_OBJECT);
1128:       assertEquals(54, Node.SLASH_V);
1129:       assertEquals(4095, Node.COLUMN_MASK);
1130:       assertEquals(40, Node.ORIGINALNAME_PROP);
1131:       assertEquals(48, Node.DIRECTIVES);
1132:       assertEquals(43, Node.IS_CONSTANT_NAME);
1133:       assertEquals(12, Node.COLUMN_BITS);
1134:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1135:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1136:       assertEquals(32, Node.INCRDECR_PROP);
1137:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1138:       assertEquals(1, Node.DECR_FLAG);
1139:       assertEquals(29, Node.JSDOC_INFO_PROP);
1140:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1141:       assertEquals(56, Node.CHANGE_TIME);
1142:       assertEquals(2, Node.POST_FLAG);
1143:       assertEquals(47, Node.IS_DISPATCHER);
1144:       assertEquals(46, Node.IS_NAMESPACE);
1145:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1147:       assertEquals(37, Node.OPT_ARG_NAME);
1148:       assertEquals(30, Node.VAR_ARGS_NAME);
1149:       assertEquals(49, Node.DIRECT_EVAL);
1150:       assertEquals(57, Node.LAST_PROP);
1151:       assertEquals(36, Node.QUOTED_PROP);
1152:       assertEquals(52, Node.LENGTH);
1153:       assertEquals(53, Node.INPUT_ID);
1154:       assertEquals(55, Node.INFERRED_FUNCTION);
1155:       assertEquals(39, Node.EMPTY_BLOCK);
1156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1158:       assertFalse(node0.equals((Object)node1));
1159:       assertFalse(node1.equals((Object)node0));
1160:       assertNotNull(node_NodeMismatch0);
1161:       assertFalse(node0.isThrow());
1162:       assertFalse(node0.isFalse());
1163:       assertFalse(node0.isThis());
1164:       assertFalse(node0.isHook());
1165:       assertFalse(node0.isComma());
1166:       assertFalse(node0.isSwitch());
1167:       assertFalse(node0.isInstanceOf());
1168:       assertFalse(node0.isBreak());
1169:       assertFalse(node0.isObjectLit());
1170:       assertFalse(node0.isAnd());
1171:       assertFalse(node0.isWith());
1172:       assertFalse(node0.isNot());
1173:       assertEquals((-1), node0.getCharno());
1174:       assertFalse(node0.hasOneChild());
1175:       assertFalse(node0.isCase());
1176:       assertFalse(node0.isScript());
1177:       assertFalse(node0.isGetProp());
1178:       assertFalse(node0.isGetterDef());
1179:       assertFalse(node0.isAssign());
1180:       assertFalse(node0.isDec());
1181:       assertFalse(node0.hasChildren());
1182:       assertFalse(node0.isExprResult());
1183:       assertFalse(node0.isTrue());
1184:       assertFalse(node0.isVoid());
1185:       assertFalse(node0.isTypeOf());
1186:       assertFalse(node0.isDelProp());
1187:       assertFalse(node0.isLabelName());
1188:       assertFalse(node0.isGetElem());
1189:       assertFalse(node0.isArrayLit());
1190:       assertEquals(0, node0.getChildCount());
1191:       assertFalse(node0.isOr());
1192:       assertFalse(node0.isLabel());
1193:       assertFalse(node0.isDefaultCase());
1194:       assertFalse(node0.isAssignAdd());
1195:       assertFalse(node0.isEmpty());
1196:       assertFalse(node0.isDo());
1197:       assertFalse(node0.isNew());
1198:       assertFalse(node0.isAdd());
1199:       assertFalse(node0.isCall());
1200:       assertFalse(node0.isStringKey());
1201:       assertFalse(node0.isVar());
1202:       assertFalse(node0.isName());
1203:       assertFalse(node0.isBlock());
1204:       assertFalse(node0.isNull());
1205:       assertFalse(node0.isParamList());
1206:       assertFalse(node0.isCatch());
1207:       assertFalse(node0.hasMoreThanOneChild());
1208:       assertFalse(node0.isWhile());
1209:       assertFalse(node0.isReturn());
1210:       assertFalse(node0.isDebugger());
1211:       assertTrue(node0.isString());
1212:       assertFalse(node0.isNumber());
1213:       assertFalse(node0.isTry());
1214:       assertFalse(node0.isCast());
1215:       assertFalse(node0.isFor());
1216:       assertEquals((-1), node0.getSourcePosition());
1217:       assertFalse(node0.isFunction());
1218:       assertFalse(node0.isNE());
1219:       assertFalse(node0.isRegExp());
1220:       assertFalse(node0.isIf());
1221:       assertEquals((-1), node0.getLineno());
1222:       assertFalse(node0.isContinue());
1223:       assertFalse(node0.isIn());
1224:       assertEquals(40, node0.getType());
1225:       assertFalse(node0.isInc());
1226:       assertFalse(node0.isSetterDef());
1227:       assertFalse(node1.isNot());
1228:       assertFalse(node1.isWith());
1229:       assertFalse(node1.isAnd());
1230:       assertFalse(node1.isScript());
1231:       assertFalse(node1.isExprResult());
1232:       assertFalse(node1.isInstanceOf());
1233:       assertFalse(node1.isThis());
1234:       assertFalse(node1.isComma());
1235:       assertFalse(node1.isAssign());
1236:       assertEquals(32788, node1.getSourcePosition());
1237:       assertFalse(node1.isGetElem());
1238:       assertFalse(node1.isThrow());
1239:       assertFalse(node1.isBreak());
1240:       assertFalse(node1.isOr());
1241:       assertFalse(node1.isContinue());
1242:       assertFalse(node1.isWhile());
1243:       assertFalse(node1.isString());
1244:       assertFalse(node1.isInc());
1245:       assertTrue(node1.isNumber());
1246:       assertFalse(node1.isReturn());
1247:       assertFalse(node1.isTypeOf());
1248:       assertFalse(node1.hasChildren());
1249:       assertFalse(node1.isDec());
1250:       assertFalse(node1.isFalse());
1251:       assertFalse(node1.isCast());
1252:       assertFalse(node1.isGetProp());
1253:       assertFalse(node1.isDebugger());
1254:       assertFalse(node1.isObjectLit());
1255:       assertFalse(node1.isDefaultCase());
1256:       assertFalse(node1.isCatch());
1257:       assertFalse(node1.isVoid());
1258:       assertFalse(node1.isTry());
1259:       assertFalse(node1.isRegExp());
1260:       assertFalse(node1.isFunction());
1261:       assertEquals(0, node1.getChildCount());
1262:       assertEquals(8, node1.getLineno());
1263:       assertFalse(node1.isEmpty());
1264:       assertFalse(node1.isName());
1265:       assertFalse(node1.isIf());
1266:       assertFalse(node1.isCall());
1267:       assertFalse(node1.isSetterDef());
1268:       assertFalse(node1.isDelProp());
1269:       assertFalse(node1.isAdd());
1270:       assertFalse(node1.isIn());
1271:       assertFalse(node1.isNE());
1272:       assertFalse(node1.isTrue());
1273:       assertFalse(node1.isNull());
1274:       assertEquals(39, node1.getType());
1275:       assertFalse(node1.isDo());
1276:       assertFalse(node1.isSwitch());
1277:       assertFalse(node1.isNew());
1278:       assertFalse(node1.isCase());
1279:       assertFalse(node1.isLabel());
1280:       assertFalse(node1.isAssignAdd());
1281:       assertFalse(node1.isBlock());
1282:       assertFalse(node1.isVar());
1283:       assertFalse(node1.hasMoreThanOneChild());
1284:       assertFalse(node1.isHook());
1285:       assertFalse(node1.isFor());
1286:       assertFalse(node1.isLabelName());
1287:       assertEquals(20, node1.getCharno());
1288:       assertFalse(node1.isStringKey());
1289:       assertFalse(node1.isArrayLit());
1290:       assertFalse(node1.hasOneChild());
1291:       assertFalse(node1.isParamList());
1292:       assertFalse(node1.isGetterDef());
1293:       
1294:       String string1 = node1.getSourceFileName();
1295:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1296:       assertEquals(50, Node.FREE_CALL);
1297:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1298:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1299:       assertEquals(8, Node.FLAG_NO_THROWS);
1300:       assertEquals(57, Node.REFLECTED_OBJECT);
1301:       assertEquals(54, Node.SLASH_V);
1302:       assertEquals(4095, Node.COLUMN_MASK);
1303:       assertEquals(40, Node.ORIGINALNAME_PROP);
1304:       assertEquals(48, Node.DIRECTIVES);
1305:       assertEquals(43, Node.IS_CONSTANT_NAME);
1306:       assertEquals(12, Node.COLUMN_BITS);
1307:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1309:       assertEquals(32, Node.INCRDECR_PROP);
1310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1311:       assertEquals(1, Node.DECR_FLAG);
1312:       assertEquals(29, Node.JSDOC_INFO_PROP);
1313:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1314:       assertEquals(56, Node.CHANGE_TIME);
1315:       assertEquals(2, Node.POST_FLAG);
1316:       assertEquals(47, Node.IS_DISPATCHER);
1317:       assertEquals(46, Node.IS_NAMESPACE);
1318:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1320:       assertEquals(37, Node.OPT_ARG_NAME);
1321:       assertEquals(30, Node.VAR_ARGS_NAME);
1322:       assertEquals(49, Node.DIRECT_EVAL);
1323:       assertEquals(57, Node.LAST_PROP);
1324:       assertEquals(36, Node.QUOTED_PROP);
1325:       assertEquals(52, Node.LENGTH);
1326:       assertEquals(53, Node.INPUT_ID);
1327:       assertEquals(55, Node.INFERRED_FUNCTION);
1328:       assertEquals(39, Node.EMPTY_BLOCK);
1329:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1330:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1331:       assertFalse(node1.equals((Object)node0));
1332:       assertNull(string1);
1333:       assertFalse(node1.isNot());
1334:       assertFalse(node1.isWith());
1335:       assertFalse(node1.isAnd());
1336:       assertFalse(node1.isScript());
1337:       assertFalse(node1.isExprResult());
1338:       assertFalse(node1.isInstanceOf());
1339:       assertFalse(node1.isThis());
1340:       assertFalse(node1.isComma());
1341:       assertFalse(node1.isAssign());
1342:       assertEquals(32788, node1.getSourcePosition());
1343:       assertFalse(node1.isGetElem());
1344:       assertFalse(node1.isThrow());
1345:       assertFalse(node1.isBreak());
1346:       assertFalse(node1.isOr());
1347:       assertFalse(node1.isContinue());
1348:       assertFalse(node1.isWhile());
1349:       assertFalse(node1.isString());
1350:       assertFalse(node1.isInc());
1351:       assertTrue(node1.isNumber());
1352:       assertFalse(node1.isReturn());
1353:       assertFalse(node1.isTypeOf());
1354:       assertFalse(node1.hasChildren());
1355:       assertFalse(node1.isDec());
1356:       assertFalse(node1.isFalse());
1357:       assertFalse(node1.isCast());
1358:       assertFalse(node1.isGetProp());
1359:       assertFalse(node1.isDebugger());
1360:       assertFalse(node1.isObjectLit());
1361:       assertFalse(node1.isDefaultCase());
1362:       assertFalse(node1.isCatch());
1363:       assertFalse(node1.isVoid());
1364:       assertFalse(node1.isTry());
1365:       assertFalse(node1.isRegExp());
1366:       assertFalse(node1.isFunction());
1367:       assertEquals(0, node1.getChildCount());
1368:       assertEquals(8, node1.getLineno());
1369:       assertFalse(node1.isEmpty());
1370:       assertFalse(node1.isName());
1371:       assertFalse(node1.isIf());
1372:       assertFalse(node1.isCall());
1373:       assertFalse(node1.isSetterDef());
1374:       assertFalse(node1.isDelProp());
1375:       assertFalse(node1.isAdd());
1376:       assertFalse(node1.isIn());
1377:       assertFalse(node1.isNE());
1378:       assertFalse(node1.isTrue());
1379:       assertFalse(node1.isNull());
1380:       assertEquals(39, node1.getType());
1381:       assertFalse(node1.isDo());
1382:       assertFalse(node1.isSwitch());
1383:       assertFalse(node1.isNew());
1384:       assertFalse(node1.isCase());
1385:       assertFalse(node1.isLabel());
1386:       assertFalse(node1.isAssignAdd());
1387:       assertFalse(node1.isBlock());
1388:       assertFalse(node1.isVar());
1389:       assertFalse(node1.hasMoreThanOneChild());
1390:       assertFalse(node1.isHook());
1391:       assertFalse(node1.isFor());
1392:       assertFalse(node1.isLabelName());
1393:       assertEquals(20, node1.getCharno());
1394:       assertFalse(node1.isStringKey());
1395:       assertFalse(node1.isArrayLit());
1396:       assertFalse(node1.hasOneChild());
1397:       assertFalse(node1.isParamList());
1398:       assertFalse(node1.isGetterDef());
1399:       
1400:       Node node2 = node1.srcrefTree(node0);
1401:       assertSame(node1, node2);
1402:       assertSame(node2, node1);
1403:       assertEquals(1, Node.DECR_FLAG);
1404:       assertEquals(49, Node.DIRECT_EVAL);
1405:       assertEquals(32, Node.INCRDECR_PROP);
1406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1407:       assertEquals(37, Node.OPT_ARG_NAME);
1408:       assertEquals(54, Node.SLASH_V);
1409:       assertEquals(52, Node.LENGTH);
1410:       assertEquals(46, Node.IS_NAMESPACE);
1411:       assertEquals(56, Node.CHANGE_TIME);
1412:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1413:       assertEquals(57, Node.REFLECTED_OBJECT);
1414:       assertEquals(40, Node.ORIGINALNAME_PROP);
1415:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1416:       assertEquals(29, Node.JSDOC_INFO_PROP);
1417:       assertEquals(39, Node.EMPTY_BLOCK);
1418:       assertEquals(53, Node.INPUT_ID);
1419:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1420:       assertEquals(2, Node.POST_FLAG);
1421:       assertEquals(57, Node.LAST_PROP);
1422:       assertEquals(30, Node.VAR_ARGS_NAME);
1423:       assertEquals(47, Node.IS_DISPATCHER);
1424:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1425:       assertEquals(55, Node.INFERRED_FUNCTION);
1426:       assertEquals(4095, Node.COLUMN_MASK);
1427:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1428:       assertEquals(48, Node.DIRECTIVES);
1429:       assertEquals(8, Node.FLAG_NO_THROWS);
1430:       assertEquals(43, Node.IS_CONSTANT_NAME);
1431:       assertEquals(36, Node.QUOTED_PROP);
1432:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1433:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1434:       assertEquals(50, Node.FREE_CALL);
1435:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1436:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1437:       assertEquals(12, Node.COLUMN_BITS);
1438:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1439:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1440:       assertEquals(50, Node.FREE_CALL);
1441:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1442:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1443:       assertEquals(8, Node.FLAG_NO_THROWS);
1444:       assertEquals(57, Node.REFLECTED_OBJECT);
1445:       assertEquals(54, Node.SLASH_V);
1446:       assertEquals(4095, Node.COLUMN_MASK);
1447:       assertEquals(40, Node.ORIGINALNAME_PROP);
1448:       assertEquals(48, Node.DIRECTIVES);
1449:       assertEquals(43, Node.IS_CONSTANT_NAME);
1450:       assertEquals(12, Node.COLUMN_BITS);
1451:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1452:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1453:       assertEquals(32, Node.INCRDECR_PROP);
1454:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1455:       assertEquals(1, Node.DECR_FLAG);
1456:       assertEquals(29, Node.JSDOC_INFO_PROP);
1457:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1458:       assertEquals(56, Node.CHANGE_TIME);
1459:       assertEquals(2, Node.POST_FLAG);
1460:       assertEquals(47, Node.IS_DISPATCHER);
1461:       assertEquals(46, Node.IS_NAMESPACE);
1462:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1463:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1464:       assertEquals(37, Node.OPT_ARG_NAME);
1465:       assertEquals(30, Node.VAR_ARGS_NAME);
1466:       assertEquals(49, Node.DIRECT_EVAL);
1467:       assertEquals(57, Node.LAST_PROP);
1468:       assertEquals(36, Node.QUOTED_PROP);
1469:       assertEquals(52, Node.LENGTH);
1470:       assertEquals(53, Node.INPUT_ID);
1471:       assertEquals(55, Node.INFERRED_FUNCTION);
1472:       assertEquals(39, Node.EMPTY_BLOCK);
1473:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1474:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1475:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1476:       assertEquals(4095, Node.COLUMN_MASK);
1477:       assertEquals(55, Node.INFERRED_FUNCTION);
1478:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1479:       assertEquals(40, Node.ORIGINALNAME_PROP);
1480:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1481:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1482:       assertEquals(54, Node.SLASH_V);
1483:       assertEquals(43, Node.IS_CONSTANT_NAME);
1484:       assertEquals(46, Node.IS_NAMESPACE);
1485:       assertEquals(50, Node.FREE_CALL);
1486:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1487:       assertEquals(12, Node.COLUMN_BITS);
1488:       assertEquals(57, Node.LAST_PROP);
1489:       assertEquals(32, Node.INCRDECR_PROP);
1490:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1491:       assertEquals(49, Node.DIRECT_EVAL);
1492:       assertEquals(1, Node.DECR_FLAG);
1493:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1494:       assertEquals(47, Node.IS_DISPATCHER);
1495:       assertEquals(2, Node.POST_FLAG);
1496:       assertEquals(30, Node.VAR_ARGS_NAME);
1497:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1498:       assertEquals(29, Node.JSDOC_INFO_PROP);
1499:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1500:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1501:       assertEquals(37, Node.OPT_ARG_NAME);
1502:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1503:       assertEquals(48, Node.DIRECTIVES);
1504:       assertEquals(8, Node.FLAG_NO_THROWS);
1505:       assertEquals(39, Node.EMPTY_BLOCK);
1506:       assertEquals(53, Node.INPUT_ID);
1507:       assertEquals(56, Node.CHANGE_TIME);
1508:       assertEquals(52, Node.LENGTH);
1509:       assertEquals(57, Node.REFLECTED_OBJECT);
1510:       assertEquals(36, Node.QUOTED_PROP);
1511:       assertFalse(node0.equals((Object)node1));
1512:       assertFalse(node1.equals((Object)node0));
1513:       assertFalse(node2.equals((Object)node0));
1514:       assertNotNull(node2);
1515:       assertFalse(node0.isThrow());
1516:       assertFalse(node0.isFalse());
1517:       assertFalse(node0.isThis());
1518:       assertFalse(node0.isHook());
1519:       assertFalse(node0.isComma());
1520:       assertFalse(node0.isSwitch());
1521:       assertFalse(node0.isInstanceOf());
1522:       assertFalse(node0.isBreak());
1523:       assertFalse(node0.isObjectLit());
1524:       assertFalse(node0.isAnd());
1525:       assertFalse(node0.isWith());
1526:       assertFalse(node0.isNot());
1527:       assertEquals((-1), node0.getCharno());
1528:       assertFalse(node0.hasOneChild());
1529:       assertFalse(node0.isCase());
1530:       assertFalse(node0.isScript());
1531:       assertFalse(node0.isGetProp());
1532:       assertFalse(node0.isGetterDef());
1533:       assertFalse(node0.isAssign());
1534:       assertFalse(node0.isDec());
1535:       assertFalse(node0.hasChildren());
1536:       assertFalse(node0.isExprResult());
1537:       assertFalse(node0.isTrue());
1538:       assertFalse(node0.isVoid());
1539:       assertFalse(node0.isTypeOf());
1540:       assertFalse(node0.isDelProp());
1541:       assertFalse(node0.isLabelName());
1542:       assertFalse(node0.isGetElem());
1543:       assertFalse(node0.isArrayLit());
1544:       assertEquals(0, node0.getChildCount());
1545:       assertFalse(node0.isOr());
1546:       assertFalse(node0.isLabel());
1547:       assertFalse(node0.isDefaultCase());
1548:       assertFalse(node0.isAssignAdd());
1549:       assertFalse(node0.isEmpty());
1550:       assertFalse(node0.isDo());
1551:       assertFalse(node0.isNew());
1552:       assertFalse(node0.isAdd());
1553:       assertFalse(node0.isCall());
1554:       assertFalse(node0.isStringKey());
1555:       assertFalse(node0.isVar());
1556:       assertFalse(node0.isName());
1557:       assertFalse(node0.isBlock());
1558:       assertFalse(node0.isNull());
1559:       assertFalse(node0.isParamList());
1560:       assertFalse(node0.isCatch());
1561:       assertFalse(node0.hasMoreThanOneChild());
1562:       assertFalse(node0.isWhile());
1563:       assertFalse(node0.isReturn());
1564:       assertFalse(node0.isDebugger());
1565:       assertTrue(node0.isString());
1566:       assertFalse(node0.isNumber());
1567:       assertFalse(node0.isTry());
1568:       assertFalse(node0.isCast());
1569:       assertFalse(node0.isFor());
1570:       assertEquals((-1), node0.getSourcePosition());
1571:       assertFalse(node0.isFunction());
1572:       assertFalse(node0.isNE());
1573:       assertFalse(node0.isRegExp());
1574:       assertFalse(node0.isIf());
1575:       assertEquals((-1), node0.getLineno());
1576:       assertFalse(node0.isContinue());
1577:       assertFalse(node0.isIn());
1578:       assertEquals(40, node0.getType());
1579:       assertFalse(node0.isInc());
1580:       assertFalse(node0.isSetterDef());
1581:       assertFalse(node1.isNot());
1582:       assertFalse(node1.isWith());
1583:       assertFalse(node1.isAnd());
1584:       assertFalse(node1.isScript());
1585:       assertFalse(node1.isExprResult());
1586:       assertFalse(node1.isInstanceOf());
1587:       assertFalse(node1.isThis());
1588:       assertFalse(node1.isComma());
1589:       assertFalse(node1.isAssign());
1590:       assertFalse(node1.isGetElem());
1591:       assertFalse(node1.isThrow());
1592:       assertFalse(node1.isBreak());
1593:       assertFalse(node1.isOr());
1594:       assertFalse(node1.isContinue());
1595:       assertFalse(node1.isWhile());
1596:       assertFalse(node1.isString());
1597:       assertFalse(node1.isInc());
1598:       assertTrue(node1.isNumber());
1599:       assertFalse(node1.isReturn());
1600:       assertFalse(node1.isTypeOf());
1601:       assertFalse(node1.hasChildren());
1602:       assertFalse(node1.isDec());
1603:       assertFalse(node1.isFalse());
1604:       assertFalse(node1.isCast());
1605:       assertFalse(node1.isGetProp());
1606:       assertFalse(node1.isDebugger());
1607:       assertFalse(node1.isObjectLit());
1608:       assertEquals((-1), node1.getSourcePosition());
1609:       assertFalse(node1.isDefaultCase());
1610:       assertFalse(node1.isCatch());
1611:       assertFalse(node1.isVoid());
1612:       assertFalse(node1.isTry());
1613:       assertFalse(node1.isRegExp());
1614:       assertFalse(node1.isFunction());
1615:       assertEquals(0, node1.getChildCount());
1616:       assertFalse(node1.isEmpty());
1617:       assertFalse(node1.isName());
1618:       assertFalse(node1.isIf());
1619:       assertFalse(node1.isCall());
1620:       assertFalse(node1.isSetterDef());
1621:       assertFalse(node1.isDelProp());
1622:       assertFalse(node1.isAdd());
1623:       assertFalse(node1.isIn());
1624:       assertFalse(node1.isNE());
1625:       assertFalse(node1.isTrue());
1626:       assertFalse(node1.isNull());
1627:       assertEquals(39, node1.getType());
1628:       assertFalse(node1.isDo());
1629:       assertFalse(node1.isSwitch());
1630:       assertFalse(node1.isNew());
1631:       assertFalse(node1.isCase());
1632:       assertEquals((-1), node1.getLineno());
1633:       assertFalse(node1.isLabel());
1634:       assertFalse(node1.isAssignAdd());
1635:       assertFalse(node1.isBlock());
1636:       assertFalse(node1.isVar());
1637:       assertFalse(node1.hasMoreThanOneChild());
1638:       assertFalse(node1.isHook());
1639:       assertFalse(node1.isFor());
1640:       assertFalse(node1.isLabelName());
1641:       assertFalse(node1.isStringKey());
1642:       assertFalse(node1.isArrayLit());
1643:       assertFalse(node1.hasOneChild());
1644:       assertFalse(node1.isParamList());
1645:       assertFalse(node1.isGetterDef());
1646:       assertEquals((-1), node1.getCharno());
1647:       assertFalse(node2.isGetElem());
1648:       assertFalse(node2.isCast());
1649:       assertFalse(node2.hasChildren());
1650:       assertEquals((-1), node2.getSourcePosition());
1651:       assertFalse(node2.isTypeOf());
1652:       assertFalse(node2.isAssign());
1653:       assertFalse(node2.isDec());
1654:       assertFalse(node2.isScript());
1655:       assertFalse(node2.isAssignAdd());
1656:       assertFalse(node2.hasOneChild());
1657:       assertFalse(node2.hasMoreThanOneChild());
1658:       assertFalse(node2.isInstanceOf());
1659:       assertEquals(39, node2.getType());
1660:       assertFalse(node2.isWith());
1661:       assertFalse(node2.isReturn());
1662:       assertFalse(node2.isOr());
1663:       assertFalse(node2.isExprResult());
1664:       assertEquals((-1), node2.getLineno());
1665:       assertFalse(node2.isBreak());
1666:       assertFalse(node2.isVar());
1667:       assertFalse(node2.isStringKey());
1668:       assertFalse(node2.isHook());
1669:       assertFalse(node2.isThis());
1670:       assertFalse(node2.isBlock());
1671:       assertFalse(node2.isAdd());
1672:       assertFalse(node2.isNew());
1673:       assertFalse(node2.isCase());
1674:       assertFalse(node2.isDo());
1675:       assertFalse(node2.isLabel());
1676:       assertEquals(0, node2.getChildCount());
1677:       assertFalse(node2.isParamList());
1678:       assertEquals((-1), node2.getCharno());
1679:       assertFalse(node2.isSwitch());
1680:       assertFalse(node2.isArrayLit());
1681:       assertFalse(node2.isLabelName());
1682:       assertFalse(node2.isFor());
1683:       assertFalse(node2.isEmpty());
1684:       assertFalse(node2.isGetterDef());
1685:       assertFalse(node2.isDefaultCase());
1686:       assertFalse(node2.isTry());
1687:       assertTrue(node2.isNumber());
1688:       assertFalse(node2.isCatch());
1689:       assertFalse(node2.isIn());
1690:       assertFalse(node2.isRegExp());
1691:       assertFalse(node2.isVoid());
1692:       assertFalse(node2.isTrue());
1693:       assertFalse(node2.isNull());
1694:       assertFalse(node2.isNE());
1695:       assertFalse(node2.isDelProp());
1696:       assertFalse(node2.isIf());
1697:       assertFalse(node2.isName());
1698:       assertFalse(node2.isCall());
1699:       assertFalse(node2.isFalse());
1700:       assertFalse(node2.isThrow());
1701:       assertFalse(node2.isComma());
1702:       assertFalse(node2.isInc());
1703:       assertFalse(node2.isSetterDef());
1704:       assertFalse(node2.isGetProp());
1705:       assertFalse(node2.isWhile());
1706:       assertFalse(node2.isContinue());
1707:       assertFalse(node2.isObjectLit());
1708:       assertFalse(node2.isAnd());
1709:       assertFalse(node2.isString());
1710:       assertFalse(node2.isNot());
1711:       assertFalse(node2.isFunction());
1712:       assertFalse(node2.isDebugger());
1713:       
1714:       boolean boolean3 = node0.isAnd();
1715:       assertFalse(boolean3);
1716:       assertEquals(1, Node.DECR_FLAG);
1717:       assertEquals(49, Node.DIRECT_EVAL);
1718:       assertEquals(32, Node.INCRDECR_PROP);
1719:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1720:       assertEquals(37, Node.OPT_ARG_NAME);
1721:       assertEquals(54, Node.SLASH_V);
1722:       assertEquals(52, Node.LENGTH);
1723:       assertEquals(46, Node.IS_NAMESPACE);
1724:       assertEquals(56, Node.CHANGE_TIME);
1725:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1726:       assertEquals(57, Node.REFLECTED_OBJECT);
1727:       assertEquals(40, Node.ORIGINALNAME_PROP);
1728:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1729:       assertEquals(29, Node.JSDOC_INFO_PROP);
1730:       assertEquals(39, Node.EMPTY_BLOCK);
1731:       assertEquals(53, Node.INPUT_ID);
1732:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1733:       assertEquals(2, Node.POST_FLAG);
1734:       assertEquals(57, Node.LAST_PROP);
1735:       assertEquals(30, Node.VAR_ARGS_NAME);
1736:       assertEquals(47, Node.IS_DISPATCHER);
1737:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1738:       assertEquals(55, Node.INFERRED_FUNCTION);
1739:       assertEquals(4095, Node.COLUMN_MASK);
1740:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1741:       assertEquals(48, Node.DIRECTIVES);
1742:       assertEquals(8, Node.FLAG_NO_THROWS);
1743:       assertEquals(43, Node.IS_CONSTANT_NAME);
1744:       assertEquals(36, Node.QUOTED_PROP);
1745:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1746:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1747:       assertEquals(50, Node.FREE_CALL);
1748:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1749:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1750:       assertEquals(12, Node.COLUMN_BITS);
1751:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1752:       assertFalse(node0.equals((Object)node2));
1753:       assertFalse(node0.equals((Object)node1));
1754:       assertTrue(boolean3 == boolean0);
1755:       assertTrue(boolean3 == boolean2);
1756:       assertTrue(boolean3 == boolean1);
1757:       assertFalse(node0.isThrow());
1758:       assertFalse(node0.isFalse());
1759:       assertFalse(node0.isThis());
1760:       assertFalse(node0.isHook());
1761:       assertFalse(node0.isComma());
1762:       assertFalse(node0.isSwitch());
1763:       assertFalse(node0.isInstanceOf());
1764:       assertFalse(node0.isBreak());
1765:       assertFalse(node0.isObjectLit());
1766:       assertFalse(node0.isAnd());
1767:       assertFalse(node0.isWith());
1768:       assertFalse(node0.isNot());
1769:       assertEquals((-1), node0.getCharno());
1770:       assertFalse(node0.hasOneChild());
1771:       assertFalse(node0.isCase());
1772:       assertFalse(node0.isScript());
1773:       assertFalse(node0.isGetProp());
1774:       assertFalse(node0.isGetterDef());
1775:       assertFalse(node0.isAssign());
1776:       assertFalse(node0.isDec());
1777:       assertFalse(node0.hasChildren());
1778:       assertFalse(node0.isExprResult());
1779:       assertFalse(node0.isTrue());
1780:       assertFalse(node0.isVoid());
1781:       assertFalse(node0.isTypeOf());
1782:       assertFalse(node0.isDelProp());
1783:       assertFalse(node0.isLabelName());
1784:       assertFalse(node0.isGetElem());
1785:       assertFalse(node0.isArrayLit());
1786:       assertEquals(0, node0.getChildCount());
1787:       assertFalse(node0.isOr());
1788:       assertFalse(node0.isLabel());
1789:       assertFalse(node0.isDefaultCase());
1790:       assertFalse(node0.isAssignAdd());
1791:       assertFalse(node0.isEmpty());
1792:       assertFalse(node0.isDo());
1793:       assertFalse(node0.isNew());
1794:       assertFalse(node0.isAdd());
1795:       assertFalse(node0.isCall());
1796:       assertFalse(node0.isStringKey());
1797:       assertFalse(node0.isVar());
1798:       assertFalse(node0.isName());
1799:       assertFalse(node0.isBlock());
1800:       assertFalse(node0.isNull());
1801:       assertFalse(node0.isParamList());
1802:       assertFalse(node0.isCatch());
1803:       assertFalse(node0.hasMoreThanOneChild());
1804:       assertFalse(node0.isWhile());
1805:       assertFalse(node0.isReturn());
1806:       assertFalse(node0.isDebugger());
1807:       assertTrue(node0.isString());
1808:       assertFalse(node0.isNumber());
1809:       assertFalse(node0.isTry());
1810:       assertFalse(node0.isCast());
1811:       assertFalse(node0.isFor());
1812:       assertEquals((-1), node0.getSourcePosition());
1813:       assertFalse(node0.isFunction());
1814:       assertFalse(node0.isNE());
1815:       assertFalse(node0.isRegExp());
1816:       assertFalse(node0.isIf());
1817:       assertEquals((-1), node0.getLineno());
1818:       assertFalse(node0.isContinue());
1819:       assertFalse(node0.isIn());
1820:       assertEquals(40, node0.getType());
1821:       assertFalse(node0.isInc());
1822:       assertFalse(node0.isSetterDef());
1823:       
1824:       node2.addSuppression((String) null);
1825:       assertSame(node1, node2);
1826:       assertSame(node2, node1);
1827:       assertEquals(1, Node.DECR_FLAG);
1828:       assertEquals(49, Node.DIRECT_EVAL);
1829:       assertEquals(32, Node.INCRDECR_PROP);
1830:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1831:       assertEquals(37, Node.OPT_ARG_NAME);
1832:       assertEquals(54, Node.SLASH_V);
1833:       assertEquals(52, Node.LENGTH);
1834:       assertEquals(46, Node.IS_NAMESPACE);
1835:       assertEquals(56, Node.CHANGE_TIME);
1836:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1837:       assertEquals(57, Node.REFLECTED_OBJECT);
1838:       assertEquals(40, Node.ORIGINALNAME_PROP);
1839:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1840:       assertEquals(29, Node.JSDOC_INFO_PROP);
1841:       assertEquals(39, Node.EMPTY_BLOCK);
1842:       assertEquals(53, Node.INPUT_ID);
1843:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1844:       assertEquals(2, Node.POST_FLAG);
1845:       assertEquals(57, Node.LAST_PROP);
1846:       assertEquals(30, Node.VAR_ARGS_NAME);
1847:       assertEquals(47, Node.IS_DISPATCHER);
1848:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1849:       assertEquals(55, Node.INFERRED_FUNCTION);
1850:       assertEquals(4095, Node.COLUMN_MASK);
1851:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1852:       assertEquals(48, Node.DIRECTIVES);
1853:       assertEquals(8, Node.FLAG_NO_THROWS);
1854:       assertEquals(43, Node.IS_CONSTANT_NAME);
1855:       assertEquals(36, Node.QUOTED_PROP);
1856:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1857:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1858:       assertEquals(50, Node.FREE_CALL);
1859:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1860:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1861:       assertEquals(12, Node.COLUMN_BITS);
1862:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1863:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1864:       assertEquals(50, Node.FREE_CALL);
1865:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1866:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1867:       assertEquals(8, Node.FLAG_NO_THROWS);
1868:       assertEquals(57, Node.REFLECTED_OBJECT);
1869:       assertEquals(54, Node.SLASH_V);
1870:       assertEquals(4095, Node.COLUMN_MASK);
1871:       assertEquals(40, Node.ORIGINALNAME_PROP);
1872:       assertEquals(48, Node.DIRECTIVES);
1873:       assertEquals(43, Node.IS_CONSTANT_NAME);
1874:       assertEquals(12, Node.COLUMN_BITS);
1875:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1876:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1877:       assertEquals(32, Node.INCRDECR_PROP);
1878:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1879:       assertEquals(1, Node.DECR_FLAG);
1880:       assertEquals(29, Node.JSDOC_INFO_PROP);
1881:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1882:       assertEquals(56, Node.CHANGE_TIME);
1883:       assertEquals(2, Node.POST_FLAG);
1884:       assertEquals(47, Node.IS_DISPATCHER);
1885:       assertEquals(46, Node.IS_NAMESPACE);
1886:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1887:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1888:       assertEquals(37, Node.OPT_ARG_NAME);
1889:       assertEquals(30, Node.VAR_ARGS_NAME);
1890:       assertEquals(49, Node.DIRECT_EVAL);
1891:       assertEquals(57, Node.LAST_PROP);
1892:       assertEquals(36, Node.QUOTED_PROP);
1893:       assertEquals(52, Node.LENGTH);
1894:       assertEquals(53, Node.INPUT_ID);
1895:       assertEquals(55, Node.INFERRED_FUNCTION);
1896:       assertEquals(39, Node.EMPTY_BLOCK);
1897:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1898:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1899:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1900:       assertEquals(4095, Node.COLUMN_MASK);
1901:       assertEquals(55, Node.INFERRED_FUNCTION);
1902:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1903:       assertEquals(40, Node.ORIGINALNAME_PROP);
1904:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1905:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1906:       assertEquals(54, Node.SLASH_V);
1907:       assertEquals(43, Node.IS_CONSTANT_NAME);
1908:       assertEquals(46, Node.IS_NAMESPACE);
1909:       assertEquals(50, Node.FREE_CALL);
1910:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1911:       assertEquals(12, Node.COLUMN_BITS);
1912:       assertEquals(57, Node.LAST_PROP);
1913:       assertEquals(32, Node.INCRDECR_PROP);
1914:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1915:       assertEquals(49, Node.DIRECT_EVAL);
1916:       assertEquals(1, Node.DECR_FLAG);
1917:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1918:       assertEquals(47, Node.IS_DISPATCHER);
1919:       assertEquals(2, Node.POST_FLAG);
1920:       assertEquals(30, Node.VAR_ARGS_NAME);
1921:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1922:       assertEquals(29, Node.JSDOC_INFO_PROP);
1923:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1924:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1925:       assertEquals(37, Node.OPT_ARG_NAME);
1926:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1927:       assertEquals(48, Node.DIRECTIVES);
1928:       assertEquals(8, Node.FLAG_NO_THROWS);
1929:       assertEquals(39, Node.EMPTY_BLOCK);
1930:       assertEquals(53, Node.INPUT_ID);
1931:       assertEquals(56, Node.CHANGE_TIME);
1932:       assertEquals(52, Node.LENGTH);
1933:       assertEquals(57, Node.REFLECTED_OBJECT);
1934:       assertEquals(36, Node.QUOTED_PROP);
1935:       assertFalse(node0.equals((Object)node2));
1936:       assertFalse(node0.equals((Object)node1));
1937:       assertFalse(node1.equals((Object)node0));
1938:       assertFalse(node2.equals((Object)node0));
1939:       assertFalse(node0.isThrow());
1940:       assertFalse(node0.isFalse());
1941:       assertFalse(node0.isThis());
1942:       assertFalse(node0.isHook());
1943:       assertFalse(node0.isComma());
1944:       assertFalse(node0.isSwitch());
1945:       assertFalse(node0.isInstanceOf());
1946:       assertFalse(node0.isBreak());
1947:       assertFalse(node0.isObjectLit());
1948:       assertFalse(node0.isAnd());
1949:       assertFalse(node0.isWith());
1950:       assertFalse(node0.isNot());
1951:       assertEquals((-1), node0.getCharno());
1952:       assertFalse(node0.hasOneChild());
1953:       assertFalse(node0.isCase());
1954:       assertFalse(node0.isScript());
1955:       assertFalse(node0.isGetProp());
1956:       assertFalse(node0.isGetterDef());
1957:       assertFalse(node0.isAssign());
1958:       assertFalse(node0.isDec());
1959:       assertFalse(node0.hasChildren());
1960:       assertFalse(node0.isExprResult());
1961:       assertFalse(node0.isTrue());
1962:       assertFalse(node0.isVoid());
1963:       assertFalse(node0.isTypeOf());
1964:       assertFalse(node0.isDelProp());
1965:       assertFalse(node0.isLabelName());
1966:       assertFalse(node0.isGetElem());
1967:       assertFalse(node0.isArrayLit());
1968:       assertEquals(0, node0.getChildCount());
1969:       assertFalse(node0.isOr());
1970:       assertFalse(node0.isLabel());
1971:       assertFalse(node0.isDefaultCase());
1972:       assertFalse(node0.isAssignAdd());
1973:       assertFalse(node0.isEmpty());
1974:       assertFalse(node0.isDo());
1975:       assertFalse(node0.isNew());
1976:       assertFalse(node0.isAdd());
1977:       assertFalse(node0.isCall());
1978:       assertFalse(node0.isStringKey());
1979:       assertFalse(node0.isVar());
1980:       assertFalse(node0.isName());
1981:       assertFalse(node0.isBlock());
1982:       assertFalse(node0.isNull());
1983:       assertFalse(node0.isParamList());
1984:       assertFalse(node0.isCatch());
1985:       assertFalse(node0.hasMoreThanOneChild());
1986:       assertFalse(node0.isWhile());
1987:       assertFalse(node0.isReturn());
1988:       assertFalse(node0.isDebugger());
1989:       assertTrue(node0.isString());
1990:       assertFalse(node0.isNumber());
1991:       assertFalse(node0.isTry());
1992:       assertFalse(node0.isCast());
1993:       assertFalse(node0.isFor());
1994:       assertEquals((-1), node0.getSourcePosition());
1995:       assertFalse(node0.isFunction());
1996:       assertFalse(node0.isNE());
1997:       assertFalse(node0.isRegExp());
1998:       assertFalse(node0.isIf());
1999:       assertEquals((-1), node0.getLineno());
2000:       assertFalse(node0.isContinue());
2001:       assertFalse(node0.isIn());
2002:       assertEquals(40, node0.getType());
2003:       assertFalse(node0.isInc());
2004:       assertFalse(node0.isSetterDef());
2005:       assertFalse(node1.isNot());
2006:       assertFalse(node1.isWith());
2007:       assertFalse(node1.isAnd());
2008:       assertFalse(node1.isScript());
2009:       assertFalse(node1.isExprResult());
2010:       assertFalse(node1.isInstanceOf());
2011:       assertFalse(node1.isThis());
2012:       assertFalse(node1.isComma());
2013:       assertFalse(node1.isAssign());
2014:       assertFalse(node1.isGetElem());
2015:       assertFalse(node1.isThrow());
2016:       assertFalse(node1.isBreak());
2017:       assertFalse(node1.isOr());
2018:       assertFalse(node1.isContinue());
2019:       assertFalse(node1.isWhile());
2020:       assertFalse(node1.isString());
2021:       assertFalse(node1.isInc());
2022:       assertTrue(node1.isNumber());
2023:       assertFalse(node1.isReturn());
2024:       assertFalse(node1.isTypeOf());
2025:       assertFalse(node1.hasChildren());
2026:       assertFalse(node1.isDec());
2027:       assertFalse(node1.isFalse());
2028:       assertFalse(node1.isCast());
2029:       assertFalse(node1.isGetProp());
2030:       assertFalse(node1.isDebugger());
2031:       assertFalse(node1.isObjectLit());
2032:       assertEquals((-1), node1.getSourcePosition());
2033:       assertFalse(node1.isDefaultCase());
2034:       assertFalse(node1.isCatch());
2035:       assertFalse(node1.isVoid());
2036:       assertFalse(node1.isTry());
2037:       assertFalse(node1.isRegExp());
2038:       assertFalse(node1.isFunction());
2039:       assertEquals(0, node1.getChildCount());
2040:       assertFalse(node1.isEmpty());
2041:       assertFalse(node1.isName());
2042:       assertFalse(node1.isIf());
2043:       assertFalse(node1.isCall());
2044:       assertFalse(node1.isSetterDef());
2045:       assertFalse(node1.isDelProp());
2046:       assertFalse(node1.isAdd());
2047:       assertFalse(node1.isIn());
2048:       assertFalse(node1.isNE());
2049:       assertFalse(node1.isTrue());
2050:       assertFalse(node1.isNull());
2051:       assertEquals(39, node1.getType());
2052:       assertFalse(node1.isDo());
2053:       assertFalse(node1.isSwitch());
2054:       assertFalse(node1.isNew());
2055:       assertFalse(node1.isCase());
2056:       assertEquals((-1), node1.getLineno());
2057:       assertFalse(node1.isLabel());
2058:       assertFalse(node1.isAssignAdd());
2059:       assertFalse(node1.isBlock());
2060:       assertFalse(node1.isVar());
2061:       assertFalse(node1.hasMoreThanOneChild());
2062:       assertFalse(node1.isHook());
2063:       assertFalse(node1.isFor());
2064:       assertFalse(node1.isLabelName());
2065:       assertFalse(node1.isStringKey());
2066:       assertFalse(node1.isArrayLit());
2067:       assertFalse(node1.hasOneChild());
2068:       assertFalse(node1.isParamList());
2069:       assertFalse(node1.isGetterDef());
2070:       assertEquals((-1), node1.getCharno());
2071:       assertFalse(node2.isGetElem());
2072:       assertFalse(node2.isCast());
2073:       assertFalse(node2.hasChildren());
2074:       assertEquals((-1), node2.getSourcePosition());
2075:       assertFalse(node2.isTypeOf());
2076:       assertFalse(node2.isAssign());
2077:       assertFalse(node2.isDec());
2078:       assertFalse(node2.isScript());
2079:       assertFalse(node2.isAssignAdd());
2080:       assertFalse(node2.hasOneChild());
2081:       assertFalse(node2.hasMoreThanOneChild());
2082:       assertFalse(node2.isInstanceOf());
2083:       assertEquals(39, node2.getType());
2084:       assertFalse(node2.isWith());
2085:       assertFalse(node2.isReturn());
2086:       assertFalse(node2.isOr());
2087:       assertFalse(node2.isExprResult());
2088:       assertEquals((-1), node2.getLineno());
2089:       assertFalse(node2.isBreak());
2090:       assertFalse(node2.isVar());
2091:       assertFalse(node2.isStringKey());
2092:       assertFalse(node2.isHook());
2093:       assertFalse(node2.isThis());
2094:       assertFalse(node2.isBlock());
2095:       assertFalse(node2.isAdd());
2096:       assertFalse(node2.isNew());
2097:       assertFalse(node2.isCase());
2098:       assertFalse(node2.isDo());
2099:       assertFalse(node2.isLabel());
2100:       assertEquals(0, node2.getChildCount());
2101:       assertFalse(node2.isParamList());
2102:       assertEquals((-1), node2.getCharno());
2103:       assertFalse(node2.isSwitch());
2104:       assertFalse(node2.isArrayLit());
2105:       assertFalse(node2.isLabelName());
2106:       assertFalse(node2.isFor());
2107:       assertFalse(node2.isEmpty());
2108:       assertFalse(node2.isGetterDef());
2109:       assertFalse(node2.isDefaultCase());
2110:       assertFalse(node2.isTry());
2111:       assertTrue(node2.isNumber());
2112:       assertFalse(node2.isCatch());
2113:       assertFalse(node2.isIn());
2114:       assertFalse(node2.isRegExp());
2115:       assertFalse(node2.isVoid());
2116:       assertFalse(node2.isTrue());
2117:       assertFalse(node2.isNull());
2118:       assertFalse(node2.isNE());
2119:       assertFalse(node2.isDelProp());
2120:       assertFalse(node2.isIf());
2121:       assertFalse(node2.isName());
2122:       assertFalse(node2.isCall());
2123:       assertFalse(node2.isFalse());
2124:       assertFalse(node2.isThrow());
2125:       assertFalse(node2.isComma());
2126:       assertFalse(node2.isInc());
2127:       assertFalse(node2.isSetterDef());
2128:       assertFalse(node2.isGetProp());
2129:       assertFalse(node2.isWhile());
2130:       assertFalse(node2.isContinue());
2131:       assertFalse(node2.isObjectLit());
2132:       assertFalse(node2.isAnd());
2133:       assertFalse(node2.isString());
2134:       assertFalse(node2.isNot());
2135:       assertFalse(node2.isFunction());
2136:       assertFalse(node2.isDebugger());
2137:       
2138:       node0.addSuppression("9Q k6.106");
2139:       assertEquals(1, Node.DECR_FLAG);
2140:       assertEquals(49, Node.DIRECT_EVAL);
2141:       assertEquals(32, Node.INCRDECR_PROP);
2142:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2143:       assertEquals(37, Node.OPT_ARG_NAME);
2144:       assertEquals(54, Node.SLASH_V);
2145:       assertEquals(52, Node.LENGTH);
2146:       assertEquals(46, Node.IS_NAMESPACE);
2147:       assertEquals(56, Node.CHANGE_TIME);
2148:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2149:       assertEquals(57, Node.REFLECTED_OBJECT);
2150:       assertEquals(40, Node.ORIGINALNAME_PROP);
2151:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2152:       assertEquals(29, Node.JSDOC_INFO_PROP);
2153:       assertEquals(39, Node.EMPTY_BLOCK);
2154:       assertEquals(53, Node.INPUT_ID);
2155:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2156:       assertEquals(2, Node.POST_FLAG);
2157:       assertEquals(57, Node.LAST_PROP);
2158:       assertEquals(30, Node.VAR_ARGS_NAME);
2159:       assertEquals(47, Node.IS_DISPATCHER);
2160:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2161:       assertEquals(55, Node.INFERRED_FUNCTION);
2162:       assertEquals(4095, Node.COLUMN_MASK);
2163:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2164:       assertEquals(48, Node.DIRECTIVES);
2165:       assertEquals(8, Node.FLAG_NO_THROWS);
2166:       assertEquals(43, Node.IS_CONSTANT_NAME);
2167:       assertEquals(36, Node.QUOTED_PROP);
2168:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2170:       assertEquals(50, Node.FREE_CALL);
2171:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2172:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2173:       assertEquals(12, Node.COLUMN_BITS);
2174:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2175:       assertFalse(node0.equals((Object)node2));
2176:       assertFalse(node0.equals((Object)node1));
2177:       assertFalse(node0.isThrow());
2178:       
2179:       Iterable<Node> iterable1 = node2.children();
2180:       assertSame(node1, node2);
2181:       assertSame(node2, node1);
2182:       assertEquals(1, Node.DECR_FLAG);
2183:       assertEquals(49, Node.DIRECT_EVAL);
2184:       assertEquals(32, Node.INCRDECR_PROP);
2185:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2186:       assertEquals(37, Node.OPT_ARG_NAME);
2187:       assertEquals(54, Node.SLASH_V);
2188:       assertEquals(52, Node.LENGTH);
2189:       assertEquals(46, Node.IS_NAMESPACE);
2190:       assertEquals(56, Node.CHANGE_TIME);
2191:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2192:       assertEquals(57, Node.REFLECTED_OBJECT);
2193:       assertEquals(40, Node.ORIGINALNAME_PROP);
2194:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2195:       assertEquals(29, Node.JSDOC_INFO_PROP);
2196:       assertEquals(39, Node.EMPTY_BLOCK);
2197:       assertEquals(53, Node.INPUT_ID);
2198:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2199:       assertEquals(2, Node.POST_FLAG);
2200:       assertEquals(57, Node.LAST_PROP);
2201:       assertEquals(30, Node.VAR_ARGS_NAME);
2202:       assertEquals(47, Node.IS_DISPATCHER);
2203:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2204:       assertEquals(55, Node.INFERRED_FUNCTION);
2205:       assertEquals(4095, Node.COLUMN_MASK);
2206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2207:       assertEquals(48, Node.DIRECTIVES);
2208:       assertEquals(8, Node.FLAG_NO_THROWS);
2209:       assertEquals(43, Node.IS_CONSTANT_NAME);
2210:       assertEquals(36, Node.QUOTED_PROP);
2211:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2212:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2213:       assertEquals(50, Node.FREE_CALL);
2214:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2215:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2216:       assertEquals(12, Node.COLUMN_BITS);
2217:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2218:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2219:       assertEquals(50, Node.FREE_CALL);
2220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2221:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2222:       assertEquals(8, Node.FLAG_NO_THROWS);
2223:       assertEquals(57, Node.REFLECTED_OBJECT);
2224:       assertEquals(54, Node.SLASH_V);
2225:       assertEquals(4095, Node.COLUMN_MASK);
2226:       assertEquals(40, Node.ORIGINALNAME_PROP);
2227:       assertEquals(48, Node.DIRECTIVES);
2228:       assertEquals(43, Node.IS_CONSTANT_NAME);
2229:       assertEquals(12, Node.COLUMN_BITS);
2230:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2231:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2232:       assertEquals(32, Node.INCRDECR_PROP);
2233:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2234:       assertEquals(1, Node.DECR_FLAG);
2235:       assertEquals(29, Node.JSDOC_INFO_PROP);
2236:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2237:       assertEquals(56, Node.CHANGE_TIME);
2238:       assertEquals(2, Node.POST_FLAG);
2239:       assertEquals(47, Node.IS_DISPATCHER);
2240:       assertEquals(46, Node.IS_NAMESPACE);
2241:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2242:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2243:       assertEquals(37, Node.OPT_ARG_NAME);
2244:       assertEquals(30, Node.VAR_ARGS_NAME);
2245:       assertEquals(49, Node.DIRECT_EVAL);
2246:       assertEquals(57, Node.LAST_PROP);
2247:       assertEquals(36, Node.QUOTED_PROP);
2248:       assertEquals(52, Node.LENGTH);
2249:       assertEquals(53, Node.INPUT_ID);
2250:       assertEquals(55, Node.INFERRED_FUNCTION);
2251:       assertEquals(39, Node.EMPTY_BLOCK);
2252:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2253:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2254:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2255:       assertEquals(4095, Node.COLUMN_MASK);
2256:       assertEquals(55, Node.INFERRED_FUNCTION);
2257:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2258:       assertEquals(40, Node.ORIGINALNAME_PROP);
2259:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2260:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2261:       assertEquals(54, Node.SLASH_V);
2262:       assertEquals(43, Node.IS_CONSTANT_NAME);
2263:       assertEquals(46, Node.IS_NAMESPACE);
2264:       assertEquals(50, Node.FREE_CALL);
2265:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2266:       assertEquals(12, Node.COLUMN_BITS);
2267:       assertEquals(57, Node.LAST_PROP);
2268:       assertEquals(32, Node.INCRDECR_PROP);
2269:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2270:       assertEquals(49, Node.DIRECT_EVAL);
2271:       assertEquals(1, Node.DECR_FLAG);
2272:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2273:       assertEquals(47, Node.IS_DISPATCHER);
2274:       assertEquals(2, Node.POST_FLAG);
2275:       assertEquals(30, Node.VAR_ARGS_NAME);
2276:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2277:       assertEquals(29, Node.JSDOC_INFO_PROP);
2278:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2279:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2280:       assertEquals(37, Node.OPT_ARG_NAME);
2281:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2282:       assertEquals(48, Node.DIRECTIVES);
2283:       assertEquals(8, Node.FLAG_NO_THROWS);
2284:       assertEquals(39, Node.EMPTY_BLOCK);
2285:       assertEquals(53, Node.INPUT_ID);
2286:       assertEquals(56, Node.CHANGE_TIME);
2287:       assertEquals(52, Node.LENGTH);
2288:       assertEquals(57, Node.REFLECTED_OBJECT);
2289:       assertEquals(36, Node.QUOTED_PROP);
2290:       assertFalse(iterable1.contains(node2));
2291:       assertFalse(node0.equals((Object)node2));
2292:       assertFalse(node0.equals((Object)node1));
2293:       assertFalse(iterable1.equals((Object)iterable0));
2294:       assertFalse(node1.equals((Object)node0));
2295:       assertFalse(node2.equals((Object)node0));
2296:       assertNotNull(iterable1);
2297:       
2298:       boolean boolean4 = node2.isEquivalentToShallow(node0);
2299:       assertSame(node1, node2);
2300:       assertSame(node2, node1);
2301:       assertFalse(boolean4);
2302:       assertEquals(1, Node.DECR_FLAG);
2303:       assertEquals(49, Node.DIRECT_EVAL);
2304:       assertEquals(32, Node.INCRDECR_PROP);
2305:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2306:       assertEquals(37, Node.OPT_ARG_NAME);
2307:       assertEquals(54, Node.SLASH_V);
2308:       assertEquals(52, Node.LENGTH);
2309:       assertEquals(46, Node.IS_NAMESPACE);
2310:       assertEquals(56, Node.CHANGE_TIME);
2311:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2312:       assertEquals(57, Node.REFLECTED_OBJECT);
2313:       assertEquals(40, Node.ORIGINALNAME_PROP);
2314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2315:       assertEquals(29, Node.JSDOC_INFO_PROP);
2316:       assertEquals(39, Node.EMPTY_BLOCK);
2317:       assertEquals(53, Node.INPUT_ID);
2318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2319:       assertEquals(2, Node.POST_FLAG);
2320:       assertEquals(57, Node.LAST_PROP);
2321:       assertEquals(30, Node.VAR_ARGS_NAME);
2322:       assertEquals(47, Node.IS_DISPATCHER);
2323:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2324:       assertEquals(55, Node.INFERRED_FUNCTION);
2325:       assertEquals(4095, Node.COLUMN_MASK);
2326:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2327:       assertEquals(48, Node.DIRECTIVES);
2328:       assertEquals(8, Node.FLAG_NO_THROWS);
2329:       assertEquals(43, Node.IS_CONSTANT_NAME);
2330:       assertEquals(36, Node.QUOTED_PROP);
2331:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2332:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2333:       assertEquals(50, Node.FREE_CALL);
2334:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2335:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2336:       assertEquals(12, Node.COLUMN_BITS);
2337:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2338:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2339:       assertEquals(50, Node.FREE_CALL);
2340:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2341:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2342:       assertEquals(8, Node.FLAG_NO_THROWS);
2343:       assertEquals(57, Node.REFLECTED_OBJECT);
2344:       assertEquals(54, Node.SLASH_V);
2345:       assertEquals(4095, Node.COLUMN_MASK);
2346:       assertEquals(40, Node.ORIGINALNAME_PROP);
2347:       assertEquals(48, Node.DIRECTIVES);
2348:       assertEquals(43, Node.IS_CONSTANT_NAME);
2349:       assertEquals(12, Node.COLUMN_BITS);
2350:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2351:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2352:       assertEquals(32, Node.INCRDECR_PROP);
2353:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2354:       assertEquals(1, Node.DECR_FLAG);
2355:       assertEquals(29, Node.JSDOC_INFO_PROP);
2356:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2357:       assertEquals(56, Node.CHANGE_TIME);
2358:       assertEquals(2, Node.POST_FLAG);
2359:       assertEquals(47, Node.IS_DISPATCHER);
2360:       assertEquals(46, Node.IS_NAMESPACE);
2361:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2362:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2363:       assertEquals(37, Node.OPT_ARG_NAME);
2364:       assertEquals(30, Node.VAR_ARGS_NAME);
2365:       assertEquals(49, Node.DIRECT_EVAL);
2366:       assertEquals(57, Node.LAST_PROP);
2367:       assertEquals(36, Node.QUOTED_PROP);
2368:       assertEquals(52, Node.LENGTH);
2369:       assertEquals(53, Node.INPUT_ID);
2370:       assertEquals(55, Node.INFERRED_FUNCTION);
2371:       assertEquals(39, Node.EMPTY_BLOCK);
2372:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2374:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2375:       assertEquals(4095, Node.COLUMN_MASK);
2376:       assertEquals(55, Node.INFERRED_FUNCTION);
2377:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2378:       assertEquals(40, Node.ORIGINALNAME_PROP);
2379:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2381:       assertEquals(54, Node.SLASH_V);
2382:       assertEquals(43, Node.IS_CONSTANT_NAME);
2383:       assertEquals(46, Node.IS_NAMESPACE);
2384:       assertEquals(50, Node.FREE_CALL);
2385:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2386:       assertEquals(12, Node.COLUMN_BITS);
2387:       assertEquals(57, Node.LAST_PROP);
2388:       assertEquals(32, Node.INCRDECR_PROP);
2389:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2390:       assertEquals(49, Node.DIRECT_EVAL);
2391:       assertEquals(1, Node.DECR_FLAG);
2392:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2393:       assertEquals(47, Node.IS_DISPATCHER);
2394:       assertEquals(2, Node.POST_FLAG);
2395:       assertEquals(30, Node.VAR_ARGS_NAME);
2396:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2397:       assertEquals(29, Node.JSDOC_INFO_PROP);
2398:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2399:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2400:       assertEquals(37, Node.OPT_ARG_NAME);
2401:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2402:       assertEquals(48, Node.DIRECTIVES);
2403:       assertEquals(8, Node.FLAG_NO_THROWS);
2404:       assertEquals(39, Node.EMPTY_BLOCK);
2405:       assertEquals(53, Node.INPUT_ID);
2406:       assertEquals(56, Node.CHANGE_TIME);
2407:       assertEquals(52, Node.LENGTH);
2408:       assertEquals(57, Node.REFLECTED_OBJECT);
2409:       assertEquals(36, Node.QUOTED_PROP);
2410:       assertFalse(node0.equals((Object)node2));
2411:       assertFalse(node0.equals((Object)node1));
2412:       assertTrue(boolean4 == boolean1);
2413:       assertTrue(boolean4 == boolean0);
2414:       assertTrue(boolean4 == boolean3);
2415:       assertTrue(boolean4 == boolean2);
2416:       assertFalse(node1.equals((Object)node0));
2417:       assertFalse(node2.equals((Object)node0));
2418:       
2419:       boolean boolean5 = node2.isCatch();
2420:       assertSame(node1, node2);
2421:       assertSame(node2, node1);
2422:       assertFalse(boolean5);
2423:       assertEquals(1, Node.DECR_FLAG);
2424:       assertEquals(49, Node.DIRECT_EVAL);
2425:       assertEquals(32, Node.INCRDECR_PROP);
2426:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2427:       assertEquals(37, Node.OPT_ARG_NAME);
2428:       assertEquals(54, Node.SLASH_V);
2429:       assertEquals(52, Node.LENGTH);
2430:       assertEquals(46, Node.IS_NAMESPACE);
2431:       assertEquals(56, Node.CHANGE_TIME);
2432:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2433:       assertEquals(57, Node.REFLECTED_OBJECT);
2434:       assertEquals(40, Node.ORIGINALNAME_PROP);
2435:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2436:       assertEquals(29, Node.JSDOC_INFO_PROP);
2437:       assertEquals(39, Node.EMPTY_BLOCK);
2438:       assertEquals(53, Node.INPUT_ID);
2439:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2440:       assertEquals(2, Node.POST_FLAG);
2441:       assertEquals(57, Node.LAST_PROP);
2442:       assertEquals(30, Node.VAR_ARGS_NAME);
2443:       assertEquals(47, Node.IS_DISPATCHER);
2444:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2445:       assertEquals(55, Node.INFERRED_FUNCTION);
2446:       assertEquals(4095, Node.COLUMN_MASK);
2447:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2448:       assertEquals(48, Node.DIRECTIVES);
2449:       assertEquals(8, Node.FLAG_NO_THROWS);
2450:       assertEquals(43, Node.IS_CONSTANT_NAME);
2451:       assertEquals(36, Node.QUOTED_PROP);
2452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2453:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2454:       assertEquals(50, Node.FREE_CALL);
2455:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2456:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2457:       assertEquals(12, Node.COLUMN_BITS);
2458:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2459:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2460:       assertEquals(50, Node.FREE_CALL);
2461:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2462:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2463:       assertEquals(8, Node.FLAG_NO_THROWS);
2464:       assertEquals(57, Node.REFLECTED_OBJECT);
2465:       assertEquals(54, Node.SLASH_V);
2466:       assertEquals(4095, Node.COLUMN_MASK);
2467:       assertEquals(40, Node.ORIGINALNAME_PROP);
2468:       assertEquals(48, Node.DIRECTIVES);
2469:       assertEquals(43, Node.IS_CONSTANT_NAME);
2470:       assertEquals(12, Node.COLUMN_BITS);
2471:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2472:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2473:       assertEquals(32, Node.INCRDECR_PROP);
2474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2475:       assertEquals(1, Node.DECR_FLAG);
2476:       assertEquals(29, Node.JSDOC_INFO_PROP);
2477:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2478:       assertEquals(56, Node.CHANGE_TIME);
2479:       assertEquals(2, Node.POST_FLAG);
2480:       assertEquals(47, Node.IS_DISPATCHER);
2481:       assertEquals(46, Node.IS_NAMESPACE);
2482:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2483:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2484:       assertEquals(37, Node.OPT_ARG_NAME);
2485:       assertEquals(30, Node.VAR_ARGS_NAME);
2486:       assertEquals(49, Node.DIRECT_EVAL);
2487:       assertEquals(57, Node.LAST_PROP);
2488:       assertEquals(36, Node.QUOTED_PROP);
2489:       assertEquals(52, Node.LENGTH);
2490:       assertEquals(53, Node.INPUT_ID);
2491:       assertEquals(55, Node.INFERRED_FUNCTION);
2492:       assertEquals(39, Node.EMPTY_BLOCK);
2493:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2494:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2495:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2496:       assertEquals(4095, Node.COLUMN_MASK);
2497:       assertEquals(55, Node.INFERRED_FUNCTION);
2498:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2499:       assertEquals(40, Node.ORIGINALNAME_PROP);
2500:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2501:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2502:       assertEquals(54, Node.SLASH_V);
2503:       assertEquals(43, Node.IS_CONSTANT_NAME);
2504:       assertEquals(46, Node.IS_NAMESPACE);
2505:       assertEquals(50, Node.FREE_CALL);
2506:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2507:       assertEquals(12, Node.COLUMN_BITS);
2508:       assertEquals(57, Node.LAST_PROP);
2509:       assertEquals(32, Node.INCRDECR_PROP);
2510:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2511:       assertEquals(49, Node.DIRECT_EVAL);
2512:       assertEquals(1, Node.DECR_FLAG);
2513:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2514:       assertEquals(47, Node.IS_DISPATCHER);
2515:       assertEquals(2, Node.POST_FLAG);
2516:       assertEquals(30, Node.VAR_ARGS_NAME);
2517:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2518:       assertEquals(29, Node.JSDOC_INFO_PROP);
2519:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2520:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2521:       assertEquals(37, Node.OPT_ARG_NAME);
2522:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2523:       assertEquals(48, Node.DIRECTIVES);
2524:       assertEquals(8, Node.FLAG_NO_THROWS);
2525:       assertEquals(39, Node.EMPTY_BLOCK);
2526:       assertEquals(53, Node.INPUT_ID);
2527:       assertEquals(56, Node.CHANGE_TIME);
2528:       assertEquals(52, Node.LENGTH);
2529:       assertEquals(57, Node.REFLECTED_OBJECT);
2530:       assertEquals(36, Node.QUOTED_PROP);
2531:       assertFalse(node0.equals((Object)node2));
2532:       assertFalse(node0.equals((Object)node1));
2533:       assertTrue(boolean5 == boolean0);
2534:       assertTrue(boolean5 == boolean4);
2535:       assertTrue(boolean5 == boolean3);
2536:       assertTrue(boolean5 == boolean2);
2537:       assertTrue(boolean5 == boolean1);
2538:       assertFalse(node1.equals((Object)node0));
2539:       assertFalse(node2.equals((Object)node0));
2540:   }
2541: }
RegularFileObject[/tmp/EvoSuite_136_1628159292906/com/google/javascript/rhino/Node_136_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_136_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_136_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_136_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.JSTypeNative",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
333:       "com.google.javascript.rhino.SimpleErrorReporter",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.Iterables",
343:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
344:       "com.google.javascript.rhino.JSDocInfo$Visibility",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.javascript.rhino.jstype.JSType$TypePair",
360:       "com.google.common.collect.Platform"
361:     );
362:   }
363: }

[MASTER] 10:28:13.733 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("J.g=");
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node0);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

boolean boolean0 = node0.isLabel();
assertFalse(boolean0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

String string0 = node0.toStringTree();
assertEquals("STRING J.g=\n", string0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(string0);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

int int0 = node0.getIntProp(375);
assertEquals(0, int0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

boolean boolean1 = node0.isAssign();
assertFalse(boolean1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node node1 = Node.newNumber((double) 4095, 8, 20);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(8, node1.getLineno());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(39, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertEquals(20, node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());

double double0 = node1.getDouble();
assertEquals(4095.0, double0, 0.01);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(8, node1.getLineno());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(39, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertEquals(20, node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertNull(staticSourceFile0);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

boolean boolean2 = node1.isUnscopedQualifiedName();
assertFalse(boolean2);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(8, node1.getLineno());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(39, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertEquals(20, node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());

Iterable<Node> iterable0 = node1.siblings();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(node1.equals((Object)node0));
assertNotNull(iterable0);
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(8, node1.getLineno());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(39, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertEquals(20, node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(8, node1.getLineno());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(39, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertEquals(20, node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());

String string1 = node1.getSourceFileName();
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertFalse(node1.equals((Object)node0));
assertNull(string1);
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertEquals(8, node1.getLineno());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(39, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertEquals(20, node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());

Node node2 = node1.srcrefTree(node0);
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(39, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isScript());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBreak());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertTrue(node2.isNumber());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());

boolean boolean3 = node0.isAnd();
assertFalse(boolean3);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());

node2.addSuppression((String) null);
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFunction());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertEquals(40, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isEmpty());
assertFalse(node1.isName());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isAdd());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertEquals(39, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isSwitch());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isScript());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isInstanceOf());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isBreak());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isCase());
assertFalse(node2.isDo());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTry());
assertTrue(node2.isNumber());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isComma());
assertFalse(node2.isInc());
assertFalse(node2.isSetterDef());
assertFalse(node2.isGetProp());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isString());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());

node0.addSuppression("9Q k6.106");
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isThrow());

Iterable<Node> iterable1 = node2.children();
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(iterable1.contains(node2));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(iterable1.equals((Object)iterable0));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotNull(iterable1);

boolean boolean4 = node2.isEquivalentToShallow(node0);
assertSame(node1, node2);
assertSame(node2, node1);
assertFalse(boolean4);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));

boolean boolean5 = node2.isCatch();
assertSame(node1, node2);
assertSame(node2, node1);
assertFalse(boolean5);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));


[MASTER] 10:28:16.369 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_146_1628159295774/com/google/javascript/rhino/Node_146_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_146_1628159295774/com/google/javascript/rhino/Node_146_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:16.369 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:16.369 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:16.372 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2290
[MASTER] 10:28:16.375 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_146_1628159295774/com/google/javascript/rhino/Node_146_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:15 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.StaticSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_146_tmp__ESTest extends Node_146_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("J.g=");
23:       assertEquals(53, Node.INPUT_ID);
24:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
25:       assertEquals(43, Node.IS_CONSTANT_NAME);
26:       assertEquals(56, Node.CHANGE_TIME);
27:       assertEquals(29, Node.JSDOC_INFO_PROP);
28:       assertEquals(36, Node.QUOTED_PROP);
29:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
30:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
31:       assertEquals(55, Node.INFERRED_FUNCTION);
32:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
33:       assertEquals(32, Node.INCRDECR_PROP);
34:       assertEquals(12, Node.COLUMN_BITS);
35:       assertEquals(37, Node.OPT_ARG_NAME);
36:       assertEquals(48, Node.DIRECTIVES);
37:       assertEquals(1, Node.DECR_FLAG);
38:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
39:       assertEquals(49, Node.DIRECT_EVAL);
40:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
41:       assertEquals(4095, Node.COLUMN_MASK);
42:       assertEquals(57, Node.REFLECTED_OBJECT);
43:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
44:       assertEquals(54, Node.SLASH_V);
45:       assertEquals(57, Node.LAST_PROP);
46:       assertEquals(15, Node.NO_SIDE_EFFECTS);
47:       assertEquals(39, Node.EMPTY_BLOCK);
48:       assertEquals(50, Node.FREE_CALL);
49:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
50:       assertEquals(52, Node.LENGTH);
51:       assertEquals(8, Node.FLAG_NO_THROWS);
52:       assertEquals(46, Node.IS_NAMESPACE);
53:       assertEquals(51, Node.STATIC_SOURCE_FILE);
54:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
55:       assertEquals(30, Node.VAR_ARGS_NAME);
56:       assertEquals(47, Node.IS_DISPATCHER);
57:       assertEquals(40, Node.ORIGINALNAME_PROP);
58:       assertEquals(2, Node.POST_FLAG);
59:       assertNotNull(node0);
60:       assertEquals((-1), node0.getLineno());
61:       assertFalse(node0.isReturn());
62:       assertFalse(node0.isOr());
63:       assertFalse(node0.isLabel());
64:       assertFalse(node0.hasMoreThanOneChild());
65:       assertFalse(node0.isNumber());
66:       assertFalse(node0.isTypeOf());
67:       assertFalse(node0.isContinue());
68:       assertFalse(node0.isLabelName());
69:       assertEquals((-1), node0.getSourcePosition());
70:       assertFalse(node0.isGetElem());
71:       assertFalse(node0.isAdd());
72:       assertFalse(node0.isNew());
73:       assertFalse(node0.isCast());
74:       assertFalse(node0.isDo());
75:       assertFalse(node0.isVar());
76:       assertFalse(node0.isAssignAdd());
77:       assertFalse(node0.isGetProp());
78:       assertFalse(node0.isComma());
79:       assertFalse(node0.isObjectLit());
80:       assertFalse(node0.isNot());
81:       assertFalse(node0.isNull());
82:       assertFalse(node0.isBreak());
83:       assertFalse(node0.isTrue());
84:       assertFalse(node0.isVoid());
85:       assertFalse(node0.isName());
86:       assertFalse(node0.isAnd());
87:       assertFalse(node0.isDebugger());
88:       assertFalse(node0.isCall());
89:       assertFalse(node0.isExprResult());
90:       assertFalse(node0.isWhile());
91:       assertFalse(node0.isAssign());
92:       assertFalse(node0.isDec());
93:       assertFalse(node0.hasChildren());
94:       assertFalse(node0.isIn());
95:       assertFalse(node0.isGetterDef());
96:       assertFalse(node0.isDelProp());
97:       assertFalse(node0.isNE());
98:       assertFalse(node0.isIf());
99:       assertFalse(node0.isSwitch());
100:       assertFalse(node0.isArrayLit());
101:       assertFalse(node0.isFunction());
102:       assertFalse(node0.isInc());
103:       assertFalse(node0.isFalse());
104:       assertFalse(node0.isEmpty());
105:       assertEquals(40, node0.getType());
106:       assertFalse(node0.isThrow());
107:       assertFalse(node0.isDefaultCase());
108:       assertEquals(0, node0.getChildCount());
109:       assertFalse(node0.isSetterDef());
110:       assertFalse(node0.isCatch());
111:       assertFalse(node0.isInstanceOf());
112:       assertFalse(node0.isParamList());
113:       assertFalse(node0.isStringKey());
114:       assertFalse(node0.isTry());
115:       assertFalse(node0.isBlock());
116:       assertFalse(node0.hasOneChild());
117:       assertFalse(node0.isHook());
118:       assertEquals((-1), node0.getCharno());
119:       assertFalse(node0.isRegExp());
120:       assertFalse(node0.isScript());
121:       assertFalse(node0.isWith());
122:       assertFalse(node0.isFor());
123:       assertFalse(node0.isCase());
124:       assertFalse(node0.isThis());
125:       assertTrue(node0.isString());
126:       
127:       boolean boolean0 = node0.isLabel();
128:       assertFalse(boolean0);
129:       assertEquals(53, Node.INPUT_ID);
130:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
131:       assertEquals(43, Node.IS_CONSTANT_NAME);
132:       assertEquals(56, Node.CHANGE_TIME);
133:       assertEquals(29, Node.JSDOC_INFO_PROP);
134:       assertEquals(36, Node.QUOTED_PROP);
135:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
137:       assertEquals(55, Node.INFERRED_FUNCTION);
138:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
139:       assertEquals(32, Node.INCRDECR_PROP);
140:       assertEquals(12, Node.COLUMN_BITS);
141:       assertEquals(37, Node.OPT_ARG_NAME);
142:       assertEquals(48, Node.DIRECTIVES);
143:       assertEquals(1, Node.DECR_FLAG);
144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
145:       assertEquals(49, Node.DIRECT_EVAL);
146:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
147:       assertEquals(4095, Node.COLUMN_MASK);
148:       assertEquals(57, Node.REFLECTED_OBJECT);
149:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
150:       assertEquals(54, Node.SLASH_V);
151:       assertEquals(57, Node.LAST_PROP);
152:       assertEquals(15, Node.NO_SIDE_EFFECTS);
153:       assertEquals(39, Node.EMPTY_BLOCK);
154:       assertEquals(50, Node.FREE_CALL);
155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
156:       assertEquals(52, Node.LENGTH);
157:       assertEquals(8, Node.FLAG_NO_THROWS);
158:       assertEquals(46, Node.IS_NAMESPACE);
159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
160:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
161:       assertEquals(30, Node.VAR_ARGS_NAME);
162:       assertEquals(47, Node.IS_DISPATCHER);
163:       assertEquals(40, Node.ORIGINALNAME_PROP);
164:       assertEquals(2, Node.POST_FLAG);
165:       assertEquals((-1), node0.getLineno());
166:       assertFalse(node0.isReturn());
167:       assertFalse(node0.isOr());
168:       assertFalse(node0.isLabel());
169:       assertFalse(node0.hasMoreThanOneChild());
170:       assertFalse(node0.isNumber());
171:       assertFalse(node0.isTypeOf());
172:       assertFalse(node0.isContinue());
173:       assertFalse(node0.isLabelName());
174:       assertEquals((-1), node0.getSourcePosition());
175:       assertFalse(node0.isGetElem());
176:       assertFalse(node0.isAdd());
177:       assertFalse(node0.isNew());
178:       assertFalse(node0.isCast());
179:       assertFalse(node0.isDo());
180:       assertFalse(node0.isVar());
181:       assertFalse(node0.isAssignAdd());
182:       assertFalse(node0.isGetProp());
183:       assertFalse(node0.isComma());
184:       assertFalse(node0.isObjectLit());
185:       assertFalse(node0.isNot());
186:       assertFalse(node0.isNull());
187:       assertFalse(node0.isBreak());
188:       assertFalse(node0.isTrue());
189:       assertFalse(node0.isVoid());
190:       assertFalse(node0.isName());
191:       assertFalse(node0.isAnd());
192:       assertFalse(node0.isDebugger());
193:       assertFalse(node0.isCall());
194:       assertFalse(node0.isExprResult());
195:       assertFalse(node0.isWhile());
196:       assertFalse(node0.isAssign());
197:       assertFalse(node0.isDec());
198:       assertFalse(node0.hasChildren());
199:       assertFalse(node0.isIn());
200:       assertFalse(node0.isGetterDef());
201:       assertFalse(node0.isDelProp());
202:       assertFalse(node0.isNE());
203:       assertFalse(node0.isIf());
204:       assertFalse(node0.isSwitch());
205:       assertFalse(node0.isArrayLit());
206:       assertFalse(node0.isFunction());
207:       assertFalse(node0.isInc());
208:       assertFalse(node0.isFalse());
209:       assertFalse(node0.isEmpty());
210:       assertEquals(40, node0.getType());
211:       assertFalse(node0.isThrow());
212:       assertFalse(node0.isDefaultCase());
213:       assertEquals(0, node0.getChildCount());
214:       assertFalse(node0.isSetterDef());
215:       assertFalse(node0.isCatch());
216:       assertFalse(node0.isInstanceOf());
217:       assertFalse(node0.isParamList());
218:       assertFalse(node0.isStringKey());
219:       assertFalse(node0.isTry());
220:       assertFalse(node0.isBlock());
221:       assertFalse(node0.hasOneChild());
222:       assertFalse(node0.isHook());
223:       assertEquals((-1), node0.getCharno());
224:       assertFalse(node0.isRegExp());
225:       assertFalse(node0.isScript());
226:       assertFalse(node0.isWith());
227:       assertFalse(node0.isFor());
228:       assertFalse(node0.isCase());
229:       assertFalse(node0.isThis());
230:       assertTrue(node0.isString());
231:       
232:       String string0 = node0.toStringTree();
233:       assertEquals("STRING J.g=\n", string0);
234:       assertEquals(53, Node.INPUT_ID);
235:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
236:       assertEquals(43, Node.IS_CONSTANT_NAME);
237:       assertEquals(56, Node.CHANGE_TIME);
238:       assertEquals(29, Node.JSDOC_INFO_PROP);
239:       assertEquals(36, Node.QUOTED_PROP);
240:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
241:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
242:       assertEquals(55, Node.INFERRED_FUNCTION);
243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
244:       assertEquals(32, Node.INCRDECR_PROP);
245:       assertEquals(12, Node.COLUMN_BITS);
246:       assertEquals(37, Node.OPT_ARG_NAME);
247:       assertEquals(48, Node.DIRECTIVES);
248:       assertEquals(1, Node.DECR_FLAG);
249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
250:       assertEquals(49, Node.DIRECT_EVAL);
251:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
252:       assertEquals(4095, Node.COLUMN_MASK);
253:       assertEquals(57, Node.REFLECTED_OBJECT);
254:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
255:       assertEquals(54, Node.SLASH_V);
256:       assertEquals(57, Node.LAST_PROP);
257:       assertEquals(15, Node.NO_SIDE_EFFECTS);
258:       assertEquals(39, Node.EMPTY_BLOCK);
259:       assertEquals(50, Node.FREE_CALL);
260:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
261:       assertEquals(52, Node.LENGTH);
262:       assertEquals(8, Node.FLAG_NO_THROWS);
263:       assertEquals(46, Node.IS_NAMESPACE);
264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
265:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
266:       assertEquals(30, Node.VAR_ARGS_NAME);
267:       assertEquals(47, Node.IS_DISPATCHER);
268:       assertEquals(40, Node.ORIGINALNAME_PROP);
269:       assertEquals(2, Node.POST_FLAG);
270:       assertNotNull(string0);
271:       assertEquals((-1), node0.getLineno());
272:       assertFalse(node0.isReturn());
273:       assertFalse(node0.isOr());
274:       assertFalse(node0.isLabel());
275:       assertFalse(node0.hasMoreThanOneChild());
276:       assertFalse(node0.isNumber());
277:       assertFalse(node0.isTypeOf());
278:       assertFalse(node0.isContinue());
279:       assertFalse(node0.isLabelName());
280:       assertEquals((-1), node0.getSourcePosition());
281:       assertFalse(node0.isGetElem());
282:       assertFalse(node0.isAdd());
283:       assertFalse(node0.isNew());
284:       assertFalse(node0.isCast());
285:       assertFalse(node0.isDo());
286:       assertFalse(node0.isVar());
287:       assertFalse(node0.isAssignAdd());
288:       assertFalse(node0.isGetProp());
289:       assertFalse(node0.isComma());
290:       assertFalse(node0.isObjectLit());
291:       assertFalse(node0.isNot());
292:       assertFalse(node0.isNull());
293:       assertFalse(node0.isBreak());
294:       assertFalse(node0.isTrue());
295:       assertFalse(node0.isVoid());
296:       assertFalse(node0.isName());
297:       assertFalse(node0.isAnd());
298:       assertFalse(node0.isDebugger());
299:       assertFalse(node0.isCall());
300:       assertFalse(node0.isExprResult());
301:       assertFalse(node0.isWhile());
302:       assertFalse(node0.isAssign());
303:       assertFalse(node0.isDec());
304:       assertFalse(node0.hasChildren());
305:       assertFalse(node0.isIn());
306:       assertFalse(node0.isGetterDef());
307:       assertFalse(node0.isDelProp());
308:       assertFalse(node0.isNE());
309:       assertFalse(node0.isIf());
310:       assertFalse(node0.isSwitch());
311:       assertFalse(node0.isArrayLit());
312:       assertFalse(node0.isFunction());
313:       assertFalse(node0.isInc());
314:       assertFalse(node0.isFalse());
315:       assertFalse(node0.isEmpty());
316:       assertEquals(40, node0.getType());
317:       assertFalse(node0.isThrow());
318:       assertFalse(node0.isDefaultCase());
319:       assertEquals(0, node0.getChildCount());
320:       assertFalse(node0.isSetterDef());
321:       assertFalse(node0.isCatch());
322:       assertFalse(node0.isInstanceOf());
323:       assertFalse(node0.isParamList());
324:       assertFalse(node0.isStringKey());
325:       assertFalse(node0.isTry());
326:       assertFalse(node0.isBlock());
327:       assertFalse(node0.hasOneChild());
328:       assertFalse(node0.isHook());
329:       assertEquals((-1), node0.getCharno());
330:       assertFalse(node0.isRegExp());
331:       assertFalse(node0.isScript());
332:       assertFalse(node0.isWith());
333:       assertFalse(node0.isFor());
334:       assertFalse(node0.isCase());
335:       assertFalse(node0.isThis());
336:       assertTrue(node0.isString());
337:       
338:       int int0 = node0.getIntProp(375);
339:       assertEquals(0, int0);
340:       assertEquals(53, Node.INPUT_ID);
341:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
342:       assertEquals(43, Node.IS_CONSTANT_NAME);
343:       assertEquals(56, Node.CHANGE_TIME);
344:       assertEquals(29, Node.JSDOC_INFO_PROP);
345:       assertEquals(36, Node.QUOTED_PROP);
346:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
347:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
348:       assertEquals(55, Node.INFERRED_FUNCTION);
349:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
350:       assertEquals(32, Node.INCRDECR_PROP);
351:       assertEquals(12, Node.COLUMN_BITS);
352:       assertEquals(37, Node.OPT_ARG_NAME);
353:       assertEquals(48, Node.DIRECTIVES);
354:       assertEquals(1, Node.DECR_FLAG);
355:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
356:       assertEquals(49, Node.DIRECT_EVAL);
357:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
358:       assertEquals(4095, Node.COLUMN_MASK);
359:       assertEquals(57, Node.REFLECTED_OBJECT);
360:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
361:       assertEquals(54, Node.SLASH_V);
362:       assertEquals(57, Node.LAST_PROP);
363:       assertEquals(15, Node.NO_SIDE_EFFECTS);
364:       assertEquals(39, Node.EMPTY_BLOCK);
365:       assertEquals(50, Node.FREE_CALL);
366:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
367:       assertEquals(52, Node.LENGTH);
368:       assertEquals(8, Node.FLAG_NO_THROWS);
369:       assertEquals(46, Node.IS_NAMESPACE);
370:       assertEquals(51, Node.STATIC_SOURCE_FILE);
371:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
372:       assertEquals(30, Node.VAR_ARGS_NAME);
373:       assertEquals(47, Node.IS_DISPATCHER);
374:       assertEquals(40, Node.ORIGINALNAME_PROP);
375:       assertEquals(2, Node.POST_FLAG);
376:       assertEquals((-1), node0.getLineno());
377:       assertFalse(node0.isReturn());
378:       assertFalse(node0.isOr());
379:       assertFalse(node0.isLabel());
380:       assertFalse(node0.hasMoreThanOneChild());
381:       assertFalse(node0.isNumber());
382:       assertFalse(node0.isTypeOf());
383:       assertFalse(node0.isContinue());
384:       assertFalse(node0.isLabelName());
385:       assertEquals((-1), node0.getSourcePosition());
386:       assertFalse(node0.isGetElem());
387:       assertFalse(node0.isAdd());
388:       assertFalse(node0.isNew());
389:       assertFalse(node0.isCast());
390:       assertFalse(node0.isDo());
391:       assertFalse(node0.isVar());
392:       assertFalse(node0.isAssignAdd());
393:       assertFalse(node0.isGetProp());
394:       assertFalse(node0.isComma());
395:       assertFalse(node0.isObjectLit());
396:       assertFalse(node0.isNot());
397:       assertFalse(node0.isNull());
398:       assertFalse(node0.isBreak());
399:       assertFalse(node0.isTrue());
400:       assertFalse(node0.isVoid());
401:       assertFalse(node0.isName());
402:       assertFalse(node0.isAnd());
403:       assertFalse(node0.isDebugger());
404:       assertFalse(node0.isCall());
405:       assertFalse(node0.isExprResult());
406:       assertFalse(node0.isWhile());
407:       assertFalse(node0.isAssign());
408:       assertFalse(node0.isDec());
409:       assertFalse(node0.hasChildren());
410:       assertFalse(node0.isIn());
411:       assertFalse(node0.isGetterDef());
412:       assertFalse(node0.isDelProp());
413:       assertFalse(node0.isNE());
414:       assertFalse(node0.isIf());
415:       assertFalse(node0.isSwitch());
416:       assertFalse(node0.isArrayLit());
417:       assertFalse(node0.isFunction());
418:       assertFalse(node0.isInc());
419:       assertFalse(node0.isFalse());
420:       assertFalse(node0.isEmpty());
421:       assertEquals(40, node0.getType());
422:       assertFalse(node0.isThrow());
423:       assertFalse(node0.isDefaultCase());
424:       assertEquals(0, node0.getChildCount());
425:       assertFalse(node0.isSetterDef());
426:       assertFalse(node0.isCatch());
427:       assertFalse(node0.isInstanceOf());
428:       assertFalse(node0.isParamList());
429:       assertFalse(node0.isStringKey());
430:       assertFalse(node0.isTry());
431:       assertFalse(node0.isBlock());
432:       assertFalse(node0.hasOneChild());
433:       assertFalse(node0.isHook());
434:       assertEquals((-1), node0.getCharno());
435:       assertFalse(node0.isRegExp());
436:       assertFalse(node0.isScript());
437:       assertFalse(node0.isWith());
438:       assertFalse(node0.isFor());
439:       assertFalse(node0.isCase());
440:       assertFalse(node0.isThis());
441:       assertTrue(node0.isString());
442:       
443:       boolean boolean1 = node0.isAssign();
444:       assertFalse(boolean1);
445:       assertEquals(53, Node.INPUT_ID);
446:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
447:       assertEquals(43, Node.IS_CONSTANT_NAME);
448:       assertEquals(56, Node.CHANGE_TIME);
449:       assertEquals(29, Node.JSDOC_INFO_PROP);
450:       assertEquals(36, Node.QUOTED_PROP);
451:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
452:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
453:       assertEquals(55, Node.INFERRED_FUNCTION);
454:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
455:       assertEquals(32, Node.INCRDECR_PROP);
456:       assertEquals(12, Node.COLUMN_BITS);
457:       assertEquals(37, Node.OPT_ARG_NAME);
458:       assertEquals(48, Node.DIRECTIVES);
459:       assertEquals(1, Node.DECR_FLAG);
460:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
461:       assertEquals(49, Node.DIRECT_EVAL);
462:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
463:       assertEquals(4095, Node.COLUMN_MASK);
464:       assertEquals(57, Node.REFLECTED_OBJECT);
465:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
466:       assertEquals(54, Node.SLASH_V);
467:       assertEquals(57, Node.LAST_PROP);
468:       assertEquals(15, Node.NO_SIDE_EFFECTS);
469:       assertEquals(39, Node.EMPTY_BLOCK);
470:       assertEquals(50, Node.FREE_CALL);
471:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
472:       assertEquals(52, Node.LENGTH);
473:       assertEquals(8, Node.FLAG_NO_THROWS);
474:       assertEquals(46, Node.IS_NAMESPACE);
475:       assertEquals(51, Node.STATIC_SOURCE_FILE);
476:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
477:       assertEquals(30, Node.VAR_ARGS_NAME);
478:       assertEquals(47, Node.IS_DISPATCHER);
479:       assertEquals(40, Node.ORIGINALNAME_PROP);
480:       assertEquals(2, Node.POST_FLAG);
481:       assertTrue(boolean1 == boolean0);
482:       assertEquals((-1), node0.getLineno());
483:       assertFalse(node0.isReturn());
484:       assertFalse(node0.isOr());
485:       assertFalse(node0.isLabel());
486:       assertFalse(node0.hasMoreThanOneChild());
487:       assertFalse(node0.isNumber());
488:       assertFalse(node0.isTypeOf());
489:       assertFalse(node0.isContinue());
490:       assertFalse(node0.isLabelName());
491:       assertEquals((-1), node0.getSourcePosition());
492:       assertFalse(node0.isGetElem());
493:       assertFalse(node0.isAdd());
494:       assertFalse(node0.isNew());
495:       assertFalse(node0.isCast());
496:       assertFalse(node0.isDo());
497:       assertFalse(node0.isVar());
498:       assertFalse(node0.isAssignAdd());
499:       assertFalse(node0.isGetProp());
500:       assertFalse(node0.isComma());
501:       assertFalse(node0.isObjectLit());
502:       assertFalse(node0.isNot());
503:       assertFalse(node0.isNull());
504:       assertFalse(node0.isBreak());
505:       assertFalse(node0.isTrue());
506:       assertFalse(node0.isVoid());
507:       assertFalse(node0.isName());
508:       assertFalse(node0.isAnd());
509:       assertFalse(node0.isDebugger());
510:       assertFalse(node0.isCall());
511:       assertFalse(node0.isExprResult());
512:       assertFalse(node0.isWhile());
513:       assertFalse(node0.isAssign());
514:       assertFalse(node0.isDec());
515:       assertFalse(node0.hasChildren());
516:       assertFalse(node0.isIn());
517:       assertFalse(node0.isGetterDef());
518:       assertFalse(node0.isDelProp());
519:       assertFalse(node0.isNE());
520:       assertFalse(node0.isIf());
521:       assertFalse(node0.isSwitch());
522:       assertFalse(node0.isArrayLit());
523:       assertFalse(node0.isFunction());
524:       assertFalse(node0.isInc());
525:       assertFalse(node0.isFalse());
526:       assertFalse(node0.isEmpty());
527:       assertEquals(40, node0.getType());
528:       assertFalse(node0.isThrow());
529:       assertFalse(node0.isDefaultCase());
530:       assertEquals(0, node0.getChildCount());
531:       assertFalse(node0.isSetterDef());
532:       assertFalse(node0.isCatch());
533:       assertFalse(node0.isInstanceOf());
534:       assertFalse(node0.isParamList());
535:       assertFalse(node0.isStringKey());
536:       assertFalse(node0.isTry());
537:       assertFalse(node0.isBlock());
538:       assertFalse(node0.hasOneChild());
539:       assertFalse(node0.isHook());
540:       assertEquals((-1), node0.getCharno());
541:       assertFalse(node0.isRegExp());
542:       assertFalse(node0.isScript());
543:       assertFalse(node0.isWith());
544:       assertFalse(node0.isFor());
545:       assertFalse(node0.isCase());
546:       assertFalse(node0.isThis());
547:       assertTrue(node0.isString());
548:       
549:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
550:       assertNotNull(node_SideEffectFlags0);
551:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
552:       assertEquals(0, node_SideEffectFlags0.valueOf());
553:       
554:       Node node1 = Node.newNumber((double) 4095, 8, 20);
555:       assertEquals(43, Node.IS_CONSTANT_NAME);
556:       assertEquals(36, Node.QUOTED_PROP);
557:       assertEquals(53, Node.INPUT_ID);
558:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
559:       assertEquals(55, Node.INFERRED_FUNCTION);
560:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
561:       assertEquals(4095, Node.COLUMN_MASK);
562:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
563:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
564:       assertEquals(47, Node.IS_DISPATCHER);
565:       assertEquals(2, Node.POST_FLAG);
566:       assertEquals(50, Node.FREE_CALL);
567:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
568:       assertEquals(40, Node.ORIGINALNAME_PROP);
569:       assertEquals(51, Node.STATIC_SOURCE_FILE);
570:       assertEquals(46, Node.IS_NAMESPACE);
571:       assertEquals(54, Node.SLASH_V);
572:       assertEquals(15, Node.NO_SIDE_EFFECTS);
573:       assertEquals(57, Node.LAST_PROP);
574:       assertEquals(30, Node.VAR_ARGS_NAME);
575:       assertEquals(49, Node.DIRECT_EVAL);
576:       assertEquals(52, Node.LENGTH);
577:       assertEquals(12, Node.COLUMN_BITS);
578:       assertEquals(32, Node.INCRDECR_PROP);
579:       assertEquals(1, Node.DECR_FLAG);
580:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
581:       assertEquals(56, Node.CHANGE_TIME);
582:       assertEquals(39, Node.EMPTY_BLOCK);
583:       assertEquals(37, Node.OPT_ARG_NAME);
584:       assertEquals(8, Node.FLAG_NO_THROWS);
585:       assertEquals(48, Node.DIRECTIVES);
586:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
587:       assertEquals(29, Node.JSDOC_INFO_PROP);
588:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
589:       assertEquals(57, Node.REFLECTED_OBJECT);
590:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
591:       assertFalse(node1.equals((Object)node0));
592:       assertNotNull(node1);
593:       assertFalse(node1.isDec());
594:       assertFalse(node1.hasChildren());
595:       assertFalse(node1.isAssign());
596:       assertFalse(node1.isLabelName());
597:       assertFalse(node1.isTypeOf());
598:       assertEquals(32788, node1.getSourcePosition());
599:       assertFalse(node1.isLabel());
600:       assertFalse(node1.isAssignAdd());
601:       assertFalse(node1.isReturn());
602:       assertFalse(node1.hasOneChild());
603:       assertFalse(node1.isOr());
604:       assertFalse(node1.isScript());
605:       assertFalse(node1.isWith());
606:       assertFalse(node1.isBlock());
607:       assertEquals(39, node1.getType());
608:       assertFalse(node1.isWhile());
609:       assertFalse(node1.isInstanceOf());
610:       assertFalse(node1.hasMoreThanOneChild());
611:       assertFalse(node1.isGetElem());
612:       assertFalse(node1.isCall());
613:       assertFalse(node1.isExprResult());
614:       assertFalse(node1.isComma());
615:       assertEquals(8, node1.getLineno());
616:       assertFalse(node1.isThrow());
617:       assertFalse(node1.isObjectLit());
618:       assertFalse(node1.isGetProp());
619:       assertFalse(node1.isSetterDef());
620:       assertFalse(node1.isInc());
621:       assertFalse(node1.isFunction());
622:       assertFalse(node1.isNot());
623:       assertFalse(node1.isDebugger());
624:       assertFalse(node1.isAnd());
625:       assertFalse(node1.isFalse());
626:       assertFalse(node1.isContinue());
627:       assertFalse(node1.isCast());
628:       assertFalse(node1.isIf());
629:       assertFalse(node1.isGetterDef());
630:       assertFalse(node1.isDelProp());
631:       assertFalse(node1.isFor());
632:       assertFalse(node1.isNE());
633:       assertFalse(node1.isIn());
634:       assertTrue(node1.isNumber());
635:       assertFalse(node1.isTry());
636:       assertFalse(node1.isCase());
637:       assertFalse(node1.isString());
638:       assertFalse(node1.isEmpty());
639:       assertFalse(node1.isRegExp());
640:       assertFalse(node1.isVoid());
641:       assertFalse(node1.isTrue());
642:       assertFalse(node1.isHook());
643:       assertFalse(node1.isCatch());
644:       assertFalse(node1.isBreak());
645:       assertEquals(20, node1.getCharno());
646:       assertFalse(node1.isName());
647:       assertFalse(node1.isStringKey());
648:       assertFalse(node1.isParamList());
649:       assertFalse(node1.isThis());
650:       assertFalse(node1.isVar());
651:       assertFalse(node1.isNull());
652:       assertFalse(node1.isNew());
653:       assertFalse(node1.isAdd());
654:       assertFalse(node1.isDefaultCase());
655:       assertFalse(node1.isSwitch());
656:       assertFalse(node1.isDo());
657:       assertFalse(node1.isArrayLit());
658:       assertEquals(0, node1.getChildCount());
659:       
660:       double double0 = node1.getDouble();
661:       assertEquals(4095.0, double0, 0.01);
662:       assertEquals(43, Node.IS_CONSTANT_NAME);
663:       assertEquals(36, Node.QUOTED_PROP);
664:       assertEquals(53, Node.INPUT_ID);
665:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
666:       assertEquals(55, Node.INFERRED_FUNCTION);
667:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
668:       assertEquals(4095, Node.COLUMN_MASK);
669:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
670:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
671:       assertEquals(47, Node.IS_DISPATCHER);
672:       assertEquals(2, Node.POST_FLAG);
673:       assertEquals(50, Node.FREE_CALL);
674:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
675:       assertEquals(40, Node.ORIGINALNAME_PROP);
676:       assertEquals(51, Node.STATIC_SOURCE_FILE);
677:       assertEquals(46, Node.IS_NAMESPACE);
678:       assertEquals(54, Node.SLASH_V);
679:       assertEquals(15, Node.NO_SIDE_EFFECTS);
680:       assertEquals(57, Node.LAST_PROP);
681:       assertEquals(30, Node.VAR_ARGS_NAME);
682:       assertEquals(49, Node.DIRECT_EVAL);
683:       assertEquals(52, Node.LENGTH);
684:       assertEquals(12, Node.COLUMN_BITS);
685:       assertEquals(32, Node.INCRDECR_PROP);
686:       assertEquals(1, Node.DECR_FLAG);
687:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
688:       assertEquals(56, Node.CHANGE_TIME);
689:       assertEquals(39, Node.EMPTY_BLOCK);
690:       assertEquals(37, Node.OPT_ARG_NAME);
691:       assertEquals(8, Node.FLAG_NO_THROWS);
692:       assertEquals(48, Node.DIRECTIVES);
693:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
694:       assertEquals(29, Node.JSDOC_INFO_PROP);
695:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
696:       assertEquals(57, Node.REFLECTED_OBJECT);
697:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
698:       assertFalse(node1.equals((Object)node0));
699:       assertFalse(node1.isDec());
700:       assertFalse(node1.hasChildren());
701:       assertFalse(node1.isAssign());
702:       assertFalse(node1.isLabelName());
703:       assertFalse(node1.isTypeOf());
704:       assertEquals(32788, node1.getSourcePosition());
705:       assertFalse(node1.isLabel());
706:       assertFalse(node1.isAssignAdd());
707:       assertFalse(node1.isReturn());
708:       assertFalse(node1.hasOneChild());
709:       assertFalse(node1.isOr());
710:       assertFalse(node1.isScript());
711:       assertFalse(node1.isWith());
712:       assertFalse(node1.isBlock());
713:       assertEquals(39, node1.getType());
714:       assertFalse(node1.isWhile());
715:       assertFalse(node1.isInstanceOf());
716:       assertFalse(node1.hasMoreThanOneChild());
717:       assertFalse(node1.isGetElem());
718:       assertFalse(node1.isCall());
719:       assertFalse(node1.isExprResult());
720:       assertFalse(node1.isComma());
721:       assertEquals(8, node1.getLineno());
722:       assertFalse(node1.isThrow());
723:       assertFalse(node1.isObjectLit());
724:       assertFalse(node1.isGetProp());
725:       assertFalse(node1.isSetterDef());
726:       assertFalse(node1.isInc());
727:       assertFalse(node1.isFunction());
728:       assertFalse(node1.isNot());
729:       assertFalse(node1.isDebugger());
730:       assertFalse(node1.isAnd());
731:       assertFalse(node1.isFalse());
732:       assertFalse(node1.isContinue());
733:       assertFalse(node1.isCast());
734:       assertFalse(node1.isIf());
735:       assertFalse(node1.isGetterDef());
736:       assertFalse(node1.isDelProp());
737:       assertFalse(node1.isFor());
738:       assertFalse(node1.isNE());
739:       assertFalse(node1.isIn());
740:       assertTrue(node1.isNumber());
741:       assertFalse(node1.isTry());
742:       assertFalse(node1.isCase());
743:       assertFalse(node1.isString());
744:       assertFalse(node1.isEmpty());
745:       assertFalse(node1.isRegExp());
746:       assertFalse(node1.isVoid());
747:       assertFalse(node1.isTrue());
748:       assertFalse(node1.isHook());
749:       assertFalse(node1.isCatch());
750:       assertFalse(node1.isBreak());
751:       assertEquals(20, node1.getCharno());
752:       assertFalse(node1.isName());
753:       assertFalse(node1.isStringKey());
754:       assertFalse(node1.isParamList());
755:       assertFalse(node1.isThis());
756:       assertFalse(node1.isVar());
757:       assertFalse(node1.isNull());
758:       assertFalse(node1.isNew());
759:       assertFalse(node1.isAdd());
760:       assertFalse(node1.isDefaultCase());
761:       assertFalse(node1.isSwitch());
762:       assertFalse(node1.isDo());
763:       assertFalse(node1.isArrayLit());
764:       assertEquals(0, node1.getChildCount());
765:       
766:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
767:       assertEquals(53, Node.INPUT_ID);
768:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
769:       assertEquals(43, Node.IS_CONSTANT_NAME);
770:       assertEquals(56, Node.CHANGE_TIME);
771:       assertEquals(29, Node.JSDOC_INFO_PROP);
772:       assertEquals(36, Node.QUOTED_PROP);
773:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
774:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
775:       assertEquals(55, Node.INFERRED_FUNCTION);
776:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
777:       assertEquals(32, Node.INCRDECR_PROP);
778:       assertEquals(12, Node.COLUMN_BITS);
779:       assertEquals(37, Node.OPT_ARG_NAME);
780:       assertEquals(48, Node.DIRECTIVES);
781:       assertEquals(1, Node.DECR_FLAG);
782:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
783:       assertEquals(49, Node.DIRECT_EVAL);
784:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
785:       assertEquals(4095, Node.COLUMN_MASK);
786:       assertEquals(57, Node.REFLECTED_OBJECT);
787:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
788:       assertEquals(54, Node.SLASH_V);
789:       assertEquals(57, Node.LAST_PROP);
790:       assertEquals(15, Node.NO_SIDE_EFFECTS);
791:       assertEquals(39, Node.EMPTY_BLOCK);
792:       assertEquals(50, Node.FREE_CALL);
793:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
794:       assertEquals(52, Node.LENGTH);
795:       assertEquals(8, Node.FLAG_NO_THROWS);
796:       assertEquals(46, Node.IS_NAMESPACE);
797:       assertEquals(51, Node.STATIC_SOURCE_FILE);
798:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
799:       assertEquals(30, Node.VAR_ARGS_NAME);
800:       assertEquals(47, Node.IS_DISPATCHER);
801:       assertEquals(40, Node.ORIGINALNAME_PROP);
802:       assertEquals(2, Node.POST_FLAG);
803:       assertFalse(node0.equals((Object)node1));
804:       assertNull(staticSourceFile0);
805:       assertEquals((-1), node0.getLineno());
806:       assertFalse(node0.isReturn());
807:       assertFalse(node0.isOr());
808:       assertFalse(node0.isLabel());
809:       assertFalse(node0.hasMoreThanOneChild());
810:       assertFalse(node0.isNumber());
811:       assertFalse(node0.isTypeOf());
812:       assertFalse(node0.isContinue());
813:       assertFalse(node0.isLabelName());
814:       assertEquals((-1), node0.getSourcePosition());
815:       assertFalse(node0.isGetElem());
816:       assertFalse(node0.isAdd());
817:       assertFalse(node0.isNew());
818:       assertFalse(node0.isCast());
819:       assertFalse(node0.isDo());
820:       assertFalse(node0.isVar());
821:       assertFalse(node0.isAssignAdd());
822:       assertFalse(node0.isGetProp());
823:       assertFalse(node0.isComma());
824:       assertFalse(node0.isObjectLit());
825:       assertFalse(node0.isNot());
826:       assertFalse(node0.isNull());
827:       assertFalse(node0.isBreak());
828:       assertFalse(node0.isTrue());
829:       assertFalse(node0.isVoid());
830:       assertFalse(node0.isName());
831:       assertFalse(node0.isAnd());
832:       assertFalse(node0.isDebugger());
833:       assertFalse(node0.isCall());
834:       assertFalse(node0.isExprResult());
835:       assertFalse(node0.isWhile());
836:       assertFalse(node0.isAssign());
837:       assertFalse(node0.isDec());
838:       assertFalse(node0.hasChildren());
839:       assertFalse(node0.isIn());
840:       assertFalse(node0.isGetterDef());
841:       assertFalse(node0.isDelProp());
842:       assertFalse(node0.isNE());
843:       assertFalse(node0.isIf());
844:       assertFalse(node0.isSwitch());
845:       assertFalse(node0.isArrayLit());
846:       assertFalse(node0.isFunction());
847:       assertFalse(node0.isInc());
848:       assertFalse(node0.isFalse());
849:       assertFalse(node0.isEmpty());
850:       assertEquals(40, node0.getType());
851:       assertFalse(node0.isThrow());
852:       assertFalse(node0.isDefaultCase());
853:       assertEquals(0, node0.getChildCount());
854:       assertFalse(node0.isSetterDef());
855:       assertFalse(node0.isCatch());
856:       assertFalse(node0.isInstanceOf());
857:       assertFalse(node0.isParamList());
858:       assertFalse(node0.isStringKey());
859:       assertFalse(node0.isTry());
860:       assertFalse(node0.isBlock());
861:       assertFalse(node0.hasOneChild());
862:       assertFalse(node0.isHook());
863:       assertEquals((-1), node0.getCharno());
864:       assertFalse(node0.isRegExp());
865:       assertFalse(node0.isScript());
866:       assertFalse(node0.isWith());
867:       assertFalse(node0.isFor());
868:       assertFalse(node0.isCase());
869:       assertFalse(node0.isThis());
870:       assertTrue(node0.isString());
871:       
872:       boolean boolean2 = node1.isUnscopedQualifiedName();
873:       assertFalse(boolean2);
874:       assertEquals(43, Node.IS_CONSTANT_NAME);
875:       assertEquals(36, Node.QUOTED_PROP);
876:       assertEquals(53, Node.INPUT_ID);
877:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
878:       assertEquals(55, Node.INFERRED_FUNCTION);
879:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
880:       assertEquals(4095, Node.COLUMN_MASK);
881:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
882:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
883:       assertEquals(47, Node.IS_DISPATCHER);
884:       assertEquals(2, Node.POST_FLAG);
885:       assertEquals(50, Node.FREE_CALL);
886:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
887:       assertEquals(40, Node.ORIGINALNAME_PROP);
888:       assertEquals(51, Node.STATIC_SOURCE_FILE);
889:       assertEquals(46, Node.IS_NAMESPACE);
890:       assertEquals(54, Node.SLASH_V);
891:       assertEquals(15, Node.NO_SIDE_EFFECTS);
892:       assertEquals(57, Node.LAST_PROP);
893:       assertEquals(30, Node.VAR_ARGS_NAME);
894:       assertEquals(49, Node.DIRECT_EVAL);
895:       assertEquals(52, Node.LENGTH);
896:       assertEquals(12, Node.COLUMN_BITS);
897:       assertEquals(32, Node.INCRDECR_PROP);
898:       assertEquals(1, Node.DECR_FLAG);
899:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
900:       assertEquals(56, Node.CHANGE_TIME);
901:       assertEquals(39, Node.EMPTY_BLOCK);
902:       assertEquals(37, Node.OPT_ARG_NAME);
903:       assertEquals(8, Node.FLAG_NO_THROWS);
904:       assertEquals(48, Node.DIRECTIVES);
905:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
906:       assertEquals(29, Node.JSDOC_INFO_PROP);
907:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
908:       assertEquals(57, Node.REFLECTED_OBJECT);
909:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
910:       assertFalse(node1.equals((Object)node0));
911:       assertTrue(boolean2 == boolean0);
912:       assertTrue(boolean2 == boolean1);
913:       assertFalse(node1.isDec());
914:       assertFalse(node1.hasChildren());
915:       assertFalse(node1.isAssign());
916:       assertFalse(node1.isLabelName());
917:       assertFalse(node1.isTypeOf());
918:       assertEquals(32788, node1.getSourcePosition());
919:       assertFalse(node1.isLabel());
920:       assertFalse(node1.isAssignAdd());
921:       assertFalse(node1.isReturn());
922:       assertFalse(node1.hasOneChild());
923:       assertFalse(node1.isOr());
924:       assertFalse(node1.isScript());
925:       assertFalse(node1.isWith());
926:       assertFalse(node1.isBlock());
927:       assertEquals(39, node1.getType());
928:       assertFalse(node1.isWhile());
929:       assertFalse(node1.isInstanceOf());
930:       assertFalse(node1.hasMoreThanOneChild());
931:       assertFalse(node1.isGetElem());
932:       assertFalse(node1.isCall());
933:       assertFalse(node1.isExprResult());
934:       assertFalse(node1.isComma());
935:       assertEquals(8, node1.getLineno());
936:       assertFalse(node1.isThrow());
937:       assertFalse(node1.isObjectLit());
938:       assertFalse(node1.isGetProp());
939:       assertFalse(node1.isSetterDef());
940:       assertFalse(node1.isInc());
941:       assertFalse(node1.isFunction());
942:       assertFalse(node1.isNot());
943:       assertFalse(node1.isDebugger());
944:       assertFalse(node1.isAnd());
945:       assertFalse(node1.isFalse());
946:       assertFalse(node1.isContinue());
947:       assertFalse(node1.isCast());
948:       assertFalse(node1.isIf());
949:       assertFalse(node1.isGetterDef());
950:       assertFalse(node1.isDelProp());
951:       assertFalse(node1.isFor());
952:       assertFalse(node1.isNE());
953:       assertFalse(node1.isIn());
954:       assertTrue(node1.isNumber());
955:       assertFalse(node1.isTry());
956:       assertFalse(node1.isCase());
957:       assertFalse(node1.isString());
958:       assertFalse(node1.isEmpty());
959:       assertFalse(node1.isRegExp());
960:       assertFalse(node1.isVoid());
961:       assertFalse(node1.isTrue());
962:       assertFalse(node1.isHook());
963:       assertFalse(node1.isCatch());
964:       assertFalse(node1.isBreak());
965:       assertEquals(20, node1.getCharno());
966:       assertFalse(node1.isName());
967:       assertFalse(node1.isStringKey());
968:       assertFalse(node1.isParamList());
969:       assertFalse(node1.isThis());
970:       assertFalse(node1.isVar());
971:       assertFalse(node1.isNull());
972:       assertFalse(node1.isNew());
973:       assertFalse(node1.isAdd());
974:       assertFalse(node1.isDefaultCase());
975:       assertFalse(node1.isSwitch());
976:       assertFalse(node1.isDo());
977:       assertFalse(node1.isArrayLit());
978:       assertEquals(0, node1.getChildCount());
979:       
980:       Iterable<Node> iterable0 = node1.siblings();
981:       assertEquals(43, Node.IS_CONSTANT_NAME);
982:       assertEquals(36, Node.QUOTED_PROP);
983:       assertEquals(53, Node.INPUT_ID);
984:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
985:       assertEquals(55, Node.INFERRED_FUNCTION);
986:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
987:       assertEquals(4095, Node.COLUMN_MASK);
988:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
989:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
990:       assertEquals(47, Node.IS_DISPATCHER);
991:       assertEquals(2, Node.POST_FLAG);
992:       assertEquals(50, Node.FREE_CALL);
993:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
994:       assertEquals(40, Node.ORIGINALNAME_PROP);
995:       assertEquals(51, Node.STATIC_SOURCE_FILE);
996:       assertEquals(46, Node.IS_NAMESPACE);
997:       assertEquals(54, Node.SLASH_V);
998:       assertEquals(15, Node.NO_SIDE_EFFECTS);
999:       assertEquals(57, Node.LAST_PROP);
1000:       assertEquals(30, Node.VAR_ARGS_NAME);
1001:       assertEquals(49, Node.DIRECT_EVAL);
1002:       assertEquals(52, Node.LENGTH);
1003:       assertEquals(12, Node.COLUMN_BITS);
1004:       assertEquals(32, Node.INCRDECR_PROP);
1005:       assertEquals(1, Node.DECR_FLAG);
1006:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1007:       assertEquals(56, Node.CHANGE_TIME);
1008:       assertEquals(39, Node.EMPTY_BLOCK);
1009:       assertEquals(37, Node.OPT_ARG_NAME);
1010:       assertEquals(8, Node.FLAG_NO_THROWS);
1011:       assertEquals(48, Node.DIRECTIVES);
1012:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1013:       assertEquals(29, Node.JSDOC_INFO_PROP);
1014:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1015:       assertEquals(57, Node.REFLECTED_OBJECT);
1016:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1017:       assertFalse(node1.equals((Object)node0));
1018:       assertNotNull(iterable0);
1019:       assertFalse(node1.isDec());
1020:       assertFalse(node1.hasChildren());
1021:       assertFalse(node1.isAssign());
1022:       assertFalse(node1.isLabelName());
1023:       assertFalse(node1.isTypeOf());
1024:       assertEquals(32788, node1.getSourcePosition());
1025:       assertFalse(node1.isLabel());
1026:       assertFalse(node1.isAssignAdd());
1027:       assertFalse(node1.isReturn());
1028:       assertFalse(node1.hasOneChild());
1029:       assertFalse(node1.isOr());
1030:       assertFalse(node1.isScript());
1031:       assertFalse(node1.isWith());
1032:       assertFalse(node1.isBlock());
1033:       assertEquals(39, node1.getType());
1034:       assertFalse(node1.isWhile());
1035:       assertFalse(node1.isInstanceOf());
1036:       assertFalse(node1.hasMoreThanOneChild());
1037:       assertFalse(node1.isGetElem());
1038:       assertFalse(node1.isCall());
1039:       assertFalse(node1.isExprResult());
1040:       assertFalse(node1.isComma());
1041:       assertEquals(8, node1.getLineno());
1042:       assertFalse(node1.isThrow());
1043:       assertFalse(node1.isObjectLit());
1044:       assertFalse(node1.isGetProp());
1045:       assertFalse(node1.isSetterDef());
1046:       assertFalse(node1.isInc());
1047:       assertFalse(node1.isFunction());
1048:       assertFalse(node1.isNot());
1049:       assertFalse(node1.isDebugger());
1050:       assertFalse(node1.isAnd());
1051:       assertFalse(node1.isFalse());
1052:       assertFalse(node1.isContinue());
1053:       assertFalse(node1.isCast());
1054:       assertFalse(node1.isIf());
1055:       assertFalse(node1.isGetterDef());
1056:       assertFalse(node1.isDelProp());
1057:       assertFalse(node1.isFor());
1058:       assertFalse(node1.isNE());
1059:       assertFalse(node1.isIn());
1060:       assertTrue(node1.isNumber());
1061:       assertFalse(node1.isTry());
1062:       assertFalse(node1.isCase());
1063:       assertFalse(node1.isString());
1064:       assertFalse(node1.isEmpty());
1065:       assertFalse(node1.isRegExp());
1066:       assertFalse(node1.isVoid());
1067:       assertFalse(node1.isTrue());
1068:       assertFalse(node1.isHook());
1069:       assertFalse(node1.isCatch());
1070:       assertFalse(node1.isBreak());
1071:       assertEquals(20, node1.getCharno());
1072:       assertFalse(node1.isName());
1073:       assertFalse(node1.isStringKey());
1074:       assertFalse(node1.isParamList());
1075:       assertFalse(node1.isThis());
1076:       assertFalse(node1.isVar());
1077:       assertFalse(node1.isNull());
1078:       assertFalse(node1.isNew());
1079:       assertFalse(node1.isAdd());
1080:       assertFalse(node1.isDefaultCase());
1081:       assertFalse(node1.isSwitch());
1082:       assertFalse(node1.isDo());
1083:       assertFalse(node1.isArrayLit());
1084:       assertEquals(0, node1.getChildCount());
1085:       
1086:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
1087:       assertEquals(53, Node.INPUT_ID);
1088:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1089:       assertEquals(43, Node.IS_CONSTANT_NAME);
1090:       assertEquals(56, Node.CHANGE_TIME);
1091:       assertEquals(29, Node.JSDOC_INFO_PROP);
1092:       assertEquals(36, Node.QUOTED_PROP);
1093:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1094:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1095:       assertEquals(55, Node.INFERRED_FUNCTION);
1096:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1097:       assertEquals(32, Node.INCRDECR_PROP);
1098:       assertEquals(12, Node.COLUMN_BITS);
1099:       assertEquals(37, Node.OPT_ARG_NAME);
1100:       assertEquals(48, Node.DIRECTIVES);
1101:       assertEquals(1, Node.DECR_FLAG);
1102:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1103:       assertEquals(49, Node.DIRECT_EVAL);
1104:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1105:       assertEquals(4095, Node.COLUMN_MASK);
1106:       assertEquals(57, Node.REFLECTED_OBJECT);
1107:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1108:       assertEquals(54, Node.SLASH_V);
1109:       assertEquals(57, Node.LAST_PROP);
1110:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1111:       assertEquals(39, Node.EMPTY_BLOCK);
1112:       assertEquals(50, Node.FREE_CALL);
1113:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1114:       assertEquals(52, Node.LENGTH);
1115:       assertEquals(8, Node.FLAG_NO_THROWS);
1116:       assertEquals(46, Node.IS_NAMESPACE);
1117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1118:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1119:       assertEquals(30, Node.VAR_ARGS_NAME);
1120:       assertEquals(47, Node.IS_DISPATCHER);
1121:       assertEquals(40, Node.ORIGINALNAME_PROP);
1122:       assertEquals(2, Node.POST_FLAG);
1123:       assertEquals(43, Node.IS_CONSTANT_NAME);
1124:       assertEquals(36, Node.QUOTED_PROP);
1125:       assertEquals(53, Node.INPUT_ID);
1126:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1127:       assertEquals(55, Node.INFERRED_FUNCTION);
1128:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1129:       assertEquals(4095, Node.COLUMN_MASK);
1130:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1131:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1132:       assertEquals(47, Node.IS_DISPATCHER);
1133:       assertEquals(2, Node.POST_FLAG);
1134:       assertEquals(50, Node.FREE_CALL);
1135:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1136:       assertEquals(40, Node.ORIGINALNAME_PROP);
1137:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1138:       assertEquals(46, Node.IS_NAMESPACE);
1139:       assertEquals(54, Node.SLASH_V);
1140:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1141:       assertEquals(57, Node.LAST_PROP);
1142:       assertEquals(30, Node.VAR_ARGS_NAME);
1143:       assertEquals(49, Node.DIRECT_EVAL);
1144:       assertEquals(52, Node.LENGTH);
1145:       assertEquals(12, Node.COLUMN_BITS);
1146:       assertEquals(32, Node.INCRDECR_PROP);
1147:       assertEquals(1, Node.DECR_FLAG);
1148:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1149:       assertEquals(56, Node.CHANGE_TIME);
1150:       assertEquals(39, Node.EMPTY_BLOCK);
1151:       assertEquals(37, Node.OPT_ARG_NAME);
1152:       assertEquals(8, Node.FLAG_NO_THROWS);
1153:       assertEquals(48, Node.DIRECTIVES);
1154:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1155:       assertEquals(29, Node.JSDOC_INFO_PROP);
1156:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1157:       assertEquals(57, Node.REFLECTED_OBJECT);
1158:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1159:       assertFalse(node0.equals((Object)node1));
1160:       assertFalse(node1.equals((Object)node0));
1161:       assertNotNull(node_NodeMismatch0);
1162:       assertEquals((-1), node0.getLineno());
1163:       assertFalse(node0.isReturn());
1164:       assertFalse(node0.isOr());
1165:       assertFalse(node0.isLabel());
1166:       assertFalse(node0.hasMoreThanOneChild());
1167:       assertFalse(node0.isNumber());
1168:       assertFalse(node0.isTypeOf());
1169:       assertFalse(node0.isContinue());
1170:       assertFalse(node0.isLabelName());
1171:       assertEquals((-1), node0.getSourcePosition());
1172:       assertFalse(node0.isGetElem());
1173:       assertFalse(node0.isAdd());
1174:       assertFalse(node0.isNew());
1175:       assertFalse(node0.isCast());
1176:       assertFalse(node0.isDo());
1177:       assertFalse(node0.isVar());
1178:       assertFalse(node0.isAssignAdd());
1179:       assertFalse(node0.isGetProp());
1180:       assertFalse(node0.isComma());
1181:       assertFalse(node0.isObjectLit());
1182:       assertFalse(node0.isNot());
1183:       assertFalse(node0.isNull());
1184:       assertFalse(node0.isBreak());
1185:       assertFalse(node0.isTrue());
1186:       assertFalse(node0.isVoid());
1187:       assertFalse(node0.isName());
1188:       assertFalse(node0.isAnd());
1189:       assertFalse(node0.isDebugger());
1190:       assertFalse(node0.isCall());
1191:       assertFalse(node0.isExprResult());
1192:       assertFalse(node0.isWhile());
1193:       assertFalse(node0.isAssign());
1194:       assertFalse(node0.isDec());
1195:       assertFalse(node0.hasChildren());
1196:       assertFalse(node0.isIn());
1197:       assertFalse(node0.isGetterDef());
1198:       assertFalse(node0.isDelProp());
1199:       assertFalse(node0.isNE());
1200:       assertFalse(node0.isIf());
1201:       assertFalse(node0.isSwitch());
1202:       assertFalse(node0.isArrayLit());
1203:       assertFalse(node0.isFunction());
1204:       assertFalse(node0.isInc());
1205:       assertFalse(node0.isFalse());
1206:       assertFalse(node0.isEmpty());
1207:       assertEquals(40, node0.getType());
1208:       assertFalse(node0.isThrow());
1209:       assertFalse(node0.isDefaultCase());
1210:       assertEquals(0, node0.getChildCount());
1211:       assertFalse(node0.isSetterDef());
1212:       assertFalse(node0.isCatch());
1213:       assertFalse(node0.isInstanceOf());
1214:       assertFalse(node0.isParamList());
1215:       assertFalse(node0.isStringKey());
1216:       assertFalse(node0.isTry());
1217:       assertFalse(node0.isBlock());
1218:       assertFalse(node0.hasOneChild());
1219:       assertFalse(node0.isHook());
1220:       assertEquals((-1), node0.getCharno());
1221:       assertFalse(node0.isRegExp());
1222:       assertFalse(node0.isScript());
1223:       assertFalse(node0.isWith());
1224:       assertFalse(node0.isFor());
1225:       assertFalse(node0.isCase());
1226:       assertFalse(node0.isThis());
1227:       assertTrue(node0.isString());
1228:       assertFalse(node1.isDec());
1229:       assertFalse(node1.hasChildren());
1230:       assertFalse(node1.isAssign());
1231:       assertFalse(node1.isLabelName());
1232:       assertFalse(node1.isTypeOf());
1233:       assertEquals(32788, node1.getSourcePosition());
1234:       assertFalse(node1.isLabel());
1235:       assertFalse(node1.isAssignAdd());
1236:       assertFalse(node1.isReturn());
1237:       assertFalse(node1.hasOneChild());
1238:       assertFalse(node1.isOr());
1239:       assertFalse(node1.isScript());
1240:       assertFalse(node1.isWith());
1241:       assertFalse(node1.isBlock());
1242:       assertEquals(39, node1.getType());
1243:       assertFalse(node1.isWhile());
1244:       assertFalse(node1.isInstanceOf());
1245:       assertFalse(node1.hasMoreThanOneChild());
1246:       assertFalse(node1.isGetElem());
1247:       assertFalse(node1.isCall());
1248:       assertFalse(node1.isExprResult());
1249:       assertFalse(node1.isComma());
1250:       assertEquals(8, node1.getLineno());
1251:       assertFalse(node1.isThrow());
1252:       assertFalse(node1.isObjectLit());
1253:       assertFalse(node1.isGetProp());
1254:       assertFalse(node1.isSetterDef());
1255:       assertFalse(node1.isInc());
1256:       assertFalse(node1.isFunction());
1257:       assertFalse(node1.isNot());
1258:       assertFalse(node1.isDebugger());
1259:       assertFalse(node1.isAnd());
1260:       assertFalse(node1.isFalse());
1261:       assertFalse(node1.isContinue());
1262:       assertFalse(node1.isCast());
1263:       assertFalse(node1.isIf());
1264:       assertFalse(node1.isGetterDef());
1265:       assertFalse(node1.isDelProp());
1266:       assertFalse(node1.isFor());
1267:       assertFalse(node1.isNE());
1268:       assertFalse(node1.isIn());
1269:       assertTrue(node1.isNumber());
1270:       assertFalse(node1.isTry());
1271:       assertFalse(node1.isCase());
1272:       assertFalse(node1.isString());
1273:       assertFalse(node1.isEmpty());
1274:       assertFalse(node1.isRegExp());
1275:       assertFalse(node1.isVoid());
1276:       assertFalse(node1.isTrue());
1277:       assertFalse(node1.isHook());
1278:       assertFalse(node1.isCatch());
1279:       assertFalse(node1.isBreak());
1280:       assertEquals(20, node1.getCharno());
1281:       assertFalse(node1.isName());
1282:       assertFalse(node1.isStringKey());
1283:       assertFalse(node1.isParamList());
1284:       assertFalse(node1.isThis());
1285:       assertFalse(node1.isVar());
1286:       assertFalse(node1.isNull());
1287:       assertFalse(node1.isNew());
1288:       assertFalse(node1.isAdd());
1289:       assertFalse(node1.isDefaultCase());
1290:       assertFalse(node1.isSwitch());
1291:       assertFalse(node1.isDo());
1292:       assertFalse(node1.isArrayLit());
1293:       assertEquals(0, node1.getChildCount());
1294:       
1295:       String string1 = node1.getSourceFileName();
1296:       assertEquals(43, Node.IS_CONSTANT_NAME);
1297:       assertEquals(36, Node.QUOTED_PROP);
1298:       assertEquals(53, Node.INPUT_ID);
1299:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1300:       assertEquals(55, Node.INFERRED_FUNCTION);
1301:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1302:       assertEquals(4095, Node.COLUMN_MASK);
1303:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1304:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1305:       assertEquals(47, Node.IS_DISPATCHER);
1306:       assertEquals(2, Node.POST_FLAG);
1307:       assertEquals(50, Node.FREE_CALL);
1308:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1309:       assertEquals(40, Node.ORIGINALNAME_PROP);
1310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1311:       assertEquals(46, Node.IS_NAMESPACE);
1312:       assertEquals(54, Node.SLASH_V);
1313:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1314:       assertEquals(57, Node.LAST_PROP);
1315:       assertEquals(30, Node.VAR_ARGS_NAME);
1316:       assertEquals(49, Node.DIRECT_EVAL);
1317:       assertEquals(52, Node.LENGTH);
1318:       assertEquals(12, Node.COLUMN_BITS);
1319:       assertEquals(32, Node.INCRDECR_PROP);
1320:       assertEquals(1, Node.DECR_FLAG);
1321:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1322:       assertEquals(56, Node.CHANGE_TIME);
1323:       assertEquals(39, Node.EMPTY_BLOCK);
1324:       assertEquals(37, Node.OPT_ARG_NAME);
1325:       assertEquals(8, Node.FLAG_NO_THROWS);
1326:       assertEquals(48, Node.DIRECTIVES);
1327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1328:       assertEquals(29, Node.JSDOC_INFO_PROP);
1329:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1330:       assertEquals(57, Node.REFLECTED_OBJECT);
1331:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1332:       assertFalse(node1.equals((Object)node0));
1333:       assertNull(string1);
1334:       assertFalse(node1.isDec());
1335:       assertFalse(node1.hasChildren());
1336:       assertFalse(node1.isAssign());
1337:       assertFalse(node1.isLabelName());
1338:       assertFalse(node1.isTypeOf());
1339:       assertEquals(32788, node1.getSourcePosition());
1340:       assertFalse(node1.isLabel());
1341:       assertFalse(node1.isAssignAdd());
1342:       assertFalse(node1.isReturn());
1343:       assertFalse(node1.hasOneChild());
1344:       assertFalse(node1.isOr());
1345:       assertFalse(node1.isScript());
1346:       assertFalse(node1.isWith());
1347:       assertFalse(node1.isBlock());
1348:       assertEquals(39, node1.getType());
1349:       assertFalse(node1.isWhile());
1350:       assertFalse(node1.isInstanceOf());
1351:       assertFalse(node1.hasMoreThanOneChild());
1352:       assertFalse(node1.isGetElem());
1353:       assertFalse(node1.isCall());
1354:       assertFalse(node1.isExprResult());
1355:       assertFalse(node1.isComma());
1356:       assertEquals(8, node1.getLineno());
1357:       assertFalse(node1.isThrow());
1358:       assertFalse(node1.isObjectLit());
1359:       assertFalse(node1.isGetProp());
1360:       assertFalse(node1.isSetterDef());
1361:       assertFalse(node1.isInc());
1362:       assertFalse(node1.isFunction());
1363:       assertFalse(node1.isNot());
1364:       assertFalse(node1.isDebugger());
1365:       assertFalse(node1.isAnd());
1366:       assertFalse(node1.isFalse());
1367:       assertFalse(node1.isContinue());
1368:       assertFalse(node1.isCast());
1369:       assertFalse(node1.isIf());
1370:       assertFalse(node1.isGetterDef());
1371:       assertFalse(node1.isDelProp());
1372:       assertFalse(node1.isFor());
1373:       assertFalse(node1.isNE());
1374:       assertFalse(node1.isIn());
1375:       assertTrue(node1.isNumber());
1376:       assertFalse(node1.isTry());
1377:       assertFalse(node1.isCase());
1378:       assertFalse(node1.isString());
1379:       assertFalse(node1.isEmpty());
1380:       assertFalse(node1.isRegExp());
1381:       assertFalse(node1.isVoid());
1382:       assertFalse(node1.isTrue());
1383:       assertFalse(node1.isHook());
1384:       assertFalse(node1.isCatch());
1385:       assertFalse(node1.isBreak());
1386:       assertEquals(20, node1.getCharno());
1387:       assertFalse(node1.isName());
1388:       assertFalse(node1.isStringKey());
1389:       assertFalse(node1.isParamList());
1390:       assertFalse(node1.isThis());
1391:       assertFalse(node1.isVar());
1392:       assertFalse(node1.isNull());
1393:       assertFalse(node1.isNew());
1394:       assertFalse(node1.isAdd());
1395:       assertFalse(node1.isDefaultCase());
1396:       assertFalse(node1.isSwitch());
1397:       assertFalse(node1.isDo());
1398:       assertFalse(node1.isArrayLit());
1399:       assertEquals(0, node1.getChildCount());
1400:       
1401:       Node node2 = node1.srcrefTree(node0);
1402:       assertSame(node1, node2);
1403:       assertSame(node2, node1);
1404:       assertEquals(53, Node.INPUT_ID);
1405:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1406:       assertEquals(43, Node.IS_CONSTANT_NAME);
1407:       assertEquals(56, Node.CHANGE_TIME);
1408:       assertEquals(29, Node.JSDOC_INFO_PROP);
1409:       assertEquals(36, Node.QUOTED_PROP);
1410:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1411:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1412:       assertEquals(55, Node.INFERRED_FUNCTION);
1413:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1414:       assertEquals(32, Node.INCRDECR_PROP);
1415:       assertEquals(12, Node.COLUMN_BITS);
1416:       assertEquals(37, Node.OPT_ARG_NAME);
1417:       assertEquals(48, Node.DIRECTIVES);
1418:       assertEquals(1, Node.DECR_FLAG);
1419:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1420:       assertEquals(49, Node.DIRECT_EVAL);
1421:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1422:       assertEquals(4095, Node.COLUMN_MASK);
1423:       assertEquals(57, Node.REFLECTED_OBJECT);
1424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1425:       assertEquals(54, Node.SLASH_V);
1426:       assertEquals(57, Node.LAST_PROP);
1427:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1428:       assertEquals(39, Node.EMPTY_BLOCK);
1429:       assertEquals(50, Node.FREE_CALL);
1430:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1431:       assertEquals(52, Node.LENGTH);
1432:       assertEquals(8, Node.FLAG_NO_THROWS);
1433:       assertEquals(46, Node.IS_NAMESPACE);
1434:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1435:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1436:       assertEquals(30, Node.VAR_ARGS_NAME);
1437:       assertEquals(47, Node.IS_DISPATCHER);
1438:       assertEquals(40, Node.ORIGINALNAME_PROP);
1439:       assertEquals(2, Node.POST_FLAG);
1440:       assertEquals(43, Node.IS_CONSTANT_NAME);
1441:       assertEquals(36, Node.QUOTED_PROP);
1442:       assertEquals(53, Node.INPUT_ID);
1443:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1444:       assertEquals(55, Node.INFERRED_FUNCTION);
1445:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1446:       assertEquals(4095, Node.COLUMN_MASK);
1447:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1448:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1449:       assertEquals(47, Node.IS_DISPATCHER);
1450:       assertEquals(2, Node.POST_FLAG);
1451:       assertEquals(50, Node.FREE_CALL);
1452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1453:       assertEquals(40, Node.ORIGINALNAME_PROP);
1454:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1455:       assertEquals(46, Node.IS_NAMESPACE);
1456:       assertEquals(54, Node.SLASH_V);
1457:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1458:       assertEquals(57, Node.LAST_PROP);
1459:       assertEquals(30, Node.VAR_ARGS_NAME);
1460:       assertEquals(49, Node.DIRECT_EVAL);
1461:       assertEquals(52, Node.LENGTH);
1462:       assertEquals(12, Node.COLUMN_BITS);
1463:       assertEquals(32, Node.INCRDECR_PROP);
1464:       assertEquals(1, Node.DECR_FLAG);
1465:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1466:       assertEquals(56, Node.CHANGE_TIME);
1467:       assertEquals(39, Node.EMPTY_BLOCK);
1468:       assertEquals(37, Node.OPT_ARG_NAME);
1469:       assertEquals(8, Node.FLAG_NO_THROWS);
1470:       assertEquals(48, Node.DIRECTIVES);
1471:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1472:       assertEquals(29, Node.JSDOC_INFO_PROP);
1473:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1474:       assertEquals(57, Node.REFLECTED_OBJECT);
1475:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1476:       assertEquals(36, Node.QUOTED_PROP);
1477:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1478:       assertEquals(43, Node.IS_CONSTANT_NAME);
1479:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1480:       assertEquals(4095, Node.COLUMN_MASK);
1481:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1482:       assertEquals(32, Node.INCRDECR_PROP);
1483:       assertEquals(46, Node.IS_NAMESPACE);
1484:       assertEquals(1, Node.DECR_FLAG);
1485:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1486:       assertEquals(50, Node.FREE_CALL);
1487:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1488:       assertEquals(54, Node.SLASH_V);
1489:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1490:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1491:       assertEquals(49, Node.DIRECT_EVAL);
1492:       assertEquals(57, Node.LAST_PROP);
1493:       assertEquals(40, Node.ORIGINALNAME_PROP);
1494:       assertEquals(12, Node.COLUMN_BITS);
1495:       assertEquals(30, Node.VAR_ARGS_NAME);
1496:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1497:       assertEquals(2, Node.POST_FLAG);
1498:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1499:       assertEquals(8, Node.FLAG_NO_THROWS);
1500:       assertEquals(39, Node.EMPTY_BLOCK);
1501:       assertEquals(48, Node.DIRECTIVES);
1502:       assertEquals(47, Node.IS_DISPATCHER);
1503:       assertEquals(37, Node.OPT_ARG_NAME);
1504:       assertEquals(56, Node.CHANGE_TIME);
1505:       assertEquals(55, Node.INFERRED_FUNCTION);
1506:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1507:       assertEquals(57, Node.REFLECTED_OBJECT);
1508:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1509:       assertEquals(52, Node.LENGTH);
1510:       assertEquals(29, Node.JSDOC_INFO_PROP);
1511:       assertEquals(53, Node.INPUT_ID);
1512:       assertFalse(node0.equals((Object)node1));
1513:       assertFalse(node1.equals((Object)node0));
1514:       assertFalse(node2.equals((Object)node0));
1515:       assertNotNull(node2);
1516:       assertEquals((-1), node0.getLineno());
1517:       assertFalse(node0.isReturn());
1518:       assertFalse(node0.isOr());
1519:       assertFalse(node0.isLabel());
1520:       assertFalse(node0.hasMoreThanOneChild());
1521:       assertFalse(node0.isNumber());
1522:       assertFalse(node0.isTypeOf());
1523:       assertFalse(node0.isContinue());
1524:       assertFalse(node0.isLabelName());
1525:       assertEquals((-1), node0.getSourcePosition());
1526:       assertFalse(node0.isGetElem());
1527:       assertFalse(node0.isAdd());
1528:       assertFalse(node0.isNew());
1529:       assertFalse(node0.isCast());
1530:       assertFalse(node0.isDo());
1531:       assertFalse(node0.isVar());
1532:       assertFalse(node0.isAssignAdd());
1533:       assertFalse(node0.isGetProp());
1534:       assertFalse(node0.isComma());
1535:       assertFalse(node0.isObjectLit());
1536:       assertFalse(node0.isNot());
1537:       assertFalse(node0.isNull());
1538:       assertFalse(node0.isBreak());
1539:       assertFalse(node0.isTrue());
1540:       assertFalse(node0.isVoid());
1541:       assertFalse(node0.isName());
1542:       assertFalse(node0.isAnd());
1543:       assertFalse(node0.isDebugger());
1544:       assertFalse(node0.isCall());
1545:       assertFalse(node0.isExprResult());
1546:       assertFalse(node0.isWhile());
1547:       assertFalse(node0.isAssign());
1548:       assertFalse(node0.isDec());
1549:       assertFalse(node0.hasChildren());
1550:       assertFalse(node0.isIn());
1551:       assertFalse(node0.isGetterDef());
1552:       assertFalse(node0.isDelProp());
1553:       assertFalse(node0.isNE());
1554:       assertFalse(node0.isIf());
1555:       assertFalse(node0.isSwitch());
1556:       assertFalse(node0.isArrayLit());
1557:       assertFalse(node0.isFunction());
1558:       assertFalse(node0.isInc());
1559:       assertFalse(node0.isFalse());
1560:       assertFalse(node0.isEmpty());
1561:       assertEquals(40, node0.getType());
1562:       assertFalse(node0.isThrow());
1563:       assertFalse(node0.isDefaultCase());
1564:       assertEquals(0, node0.getChildCount());
1565:       assertFalse(node0.isSetterDef());
1566:       assertFalse(node0.isCatch());
1567:       assertFalse(node0.isInstanceOf());
1568:       assertFalse(node0.isParamList());
1569:       assertFalse(node0.isStringKey());
1570:       assertFalse(node0.isTry());
1571:       assertFalse(node0.isBlock());
1572:       assertFalse(node0.hasOneChild());
1573:       assertFalse(node0.isHook());
1574:       assertEquals((-1), node0.getCharno());
1575:       assertFalse(node0.isRegExp());
1576:       assertFalse(node0.isScript());
1577:       assertFalse(node0.isWith());
1578:       assertFalse(node0.isFor());
1579:       assertFalse(node0.isCase());
1580:       assertFalse(node0.isThis());
1581:       assertTrue(node0.isString());
1582:       assertEquals((-1), node1.getSourcePosition());
1583:       assertFalse(node1.isDec());
1584:       assertFalse(node1.hasChildren());
1585:       assertFalse(node1.isAssign());
1586:       assertFalse(node1.isLabelName());
1587:       assertFalse(node1.isTypeOf());
1588:       assertFalse(node1.isLabel());
1589:       assertFalse(node1.isAssignAdd());
1590:       assertFalse(node1.isReturn());
1591:       assertFalse(node1.hasOneChild());
1592:       assertFalse(node1.isOr());
1593:       assertFalse(node1.isScript());
1594:       assertFalse(node1.isWith());
1595:       assertFalse(node1.isBlock());
1596:       assertEquals(39, node1.getType());
1597:       assertFalse(node1.isWhile());
1598:       assertFalse(node1.isInstanceOf());
1599:       assertFalse(node1.hasMoreThanOneChild());
1600:       assertEquals((-1), node1.getLineno());
1601:       assertFalse(node1.isGetElem());
1602:       assertFalse(node1.isCall());
1603:       assertFalse(node1.isExprResult());
1604:       assertFalse(node1.isComma());
1605:       assertFalse(node1.isThrow());
1606:       assertFalse(node1.isObjectLit());
1607:       assertFalse(node1.isGetProp());
1608:       assertFalse(node1.isSetterDef());
1609:       assertFalse(node1.isInc());
1610:       assertFalse(node1.isFunction());
1611:       assertFalse(node1.isNot());
1612:       assertFalse(node1.isDebugger());
1613:       assertFalse(node1.isAnd());
1614:       assertFalse(node1.isFalse());
1615:       assertFalse(node1.isContinue());
1616:       assertFalse(node1.isCast());
1617:       assertFalse(node1.isIf());
1618:       assertFalse(node1.isGetterDef());
1619:       assertFalse(node1.isDelProp());
1620:       assertFalse(node1.isFor());
1621:       assertFalse(node1.isNE());
1622:       assertFalse(node1.isIn());
1623:       assertTrue(node1.isNumber());
1624:       assertFalse(node1.isTry());
1625:       assertFalse(node1.isCase());
1626:       assertFalse(node1.isString());
1627:       assertFalse(node1.isEmpty());
1628:       assertFalse(node1.isRegExp());
1629:       assertFalse(node1.isVoid());
1630:       assertFalse(node1.isTrue());
1631:       assertFalse(node1.isHook());
1632:       assertFalse(node1.isCatch());
1633:       assertFalse(node1.isBreak());
1634:       assertFalse(node1.isName());
1635:       assertFalse(node1.isStringKey());
1636:       assertFalse(node1.isParamList());
1637:       assertFalse(node1.isThis());
1638:       assertFalse(node1.isVar());
1639:       assertFalse(node1.isNull());
1640:       assertFalse(node1.isNew());
1641:       assertFalse(node1.isAdd());
1642:       assertFalse(node1.isDefaultCase());
1643:       assertFalse(node1.isSwitch());
1644:       assertFalse(node1.isDo());
1645:       assertEquals((-1), node1.getCharno());
1646:       assertFalse(node1.isArrayLit());
1647:       assertEquals(0, node1.getChildCount());
1648:       assertFalse(node2.isTypeOf());
1649:       assertFalse(node2.hasChildren());
1650:       assertEquals((-1), node2.getSourcePosition());
1651:       assertFalse(node2.isDec());
1652:       assertFalse(node2.isAssign());
1653:       assertFalse(node2.isOr());
1654:       assertFalse(node2.isGetElem());
1655:       assertFalse(node2.hasMoreThanOneChild());
1656:       assertFalse(node2.hasOneChild());
1657:       assertEquals(39, node2.getType());
1658:       assertFalse(node2.isLabel());
1659:       assertFalse(node2.isAssignAdd());
1660:       assertFalse(node2.isDo());
1661:       assertFalse(node2.isReturn());
1662:       assertFalse(node2.isWhile());
1663:       assertFalse(node2.isExprResult());
1664:       assertFalse(node2.isNew());
1665:       assertFalse(node2.isAdd());
1666:       assertFalse(node2.isWith());
1667:       assertFalse(node2.isCall());
1668:       assertEquals((-1), node2.getLineno());
1669:       assertFalse(node2.isName());
1670:       assertFalse(node2.isThis());
1671:       assertFalse(node2.isNull());
1672:       assertFalse(node2.isInstanceOf());
1673:       assertFalse(node2.isVar());
1674:       assertFalse(node2.isHook());
1675:       assertEquals(0, node2.getChildCount());
1676:       assertFalse(node2.isBlock());
1677:       assertFalse(node2.isDefaultCase());
1678:       assertFalse(node2.isScript());
1679:       assertFalse(node2.isSwitch());
1680:       assertEquals((-1), node2.getCharno());
1681:       assertFalse(node2.isArrayLit());
1682:       assertFalse(node2.isLabelName());
1683:       assertFalse(node2.isStringKey());
1684:       assertFalse(node2.isParamList());
1685:       assertFalse(node2.isNE());
1686:       assertFalse(node2.isGetterDef());
1687:       assertFalse(node2.isDelProp());
1688:       assertFalse(node2.isEmpty());
1689:       assertFalse(node2.isIn());
1690:       assertTrue(node2.isNumber());
1691:       assertFalse(node2.isCase());
1692:       assertFalse(node2.isFor());
1693:       assertFalse(node2.isTry());
1694:       assertFalse(node2.isRegExp());
1695:       assertFalse(node2.isInc());
1696:       assertFalse(node2.isTrue());
1697:       assertFalse(node2.isVoid());
1698:       assertFalse(node2.isCatch());
1699:       assertFalse(node2.isIf());
1700:       assertFalse(node2.isSetterDef());
1701:       assertFalse(node2.isBreak());
1702:       assertFalse(node2.isGetProp());
1703:       assertFalse(node2.isComma());
1704:       assertFalse(node2.isFalse());
1705:       assertFalse(node2.isThrow());
1706:       assertFalse(node2.isFunction());
1707:       assertFalse(node2.isDebugger());
1708:       assertFalse(node2.isNot());
1709:       assertFalse(node2.isContinue());
1710:       assertFalse(node2.isString());
1711:       assertFalse(node2.isCast());
1712:       assertFalse(node2.isObjectLit());
1713:       assertFalse(node2.isAnd());
1714:       
1715:       boolean boolean3 = node0.isAnd();
1716:       assertFalse(boolean3);
1717:       assertEquals(53, Node.INPUT_ID);
1718:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1719:       assertEquals(43, Node.IS_CONSTANT_NAME);
1720:       assertEquals(56, Node.CHANGE_TIME);
1721:       assertEquals(29, Node.JSDOC_INFO_PROP);
1722:       assertEquals(36, Node.QUOTED_PROP);
1723:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1724:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1725:       assertEquals(55, Node.INFERRED_FUNCTION);
1726:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1727:       assertEquals(32, Node.INCRDECR_PROP);
1728:       assertEquals(12, Node.COLUMN_BITS);
1729:       assertEquals(37, Node.OPT_ARG_NAME);
1730:       assertEquals(48, Node.DIRECTIVES);
1731:       assertEquals(1, Node.DECR_FLAG);
1732:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1733:       assertEquals(49, Node.DIRECT_EVAL);
1734:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1735:       assertEquals(4095, Node.COLUMN_MASK);
1736:       assertEquals(57, Node.REFLECTED_OBJECT);
1737:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1738:       assertEquals(54, Node.SLASH_V);
1739:       assertEquals(57, Node.LAST_PROP);
1740:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1741:       assertEquals(39, Node.EMPTY_BLOCK);
1742:       assertEquals(50, Node.FREE_CALL);
1743:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1744:       assertEquals(52, Node.LENGTH);
1745:       assertEquals(8, Node.FLAG_NO_THROWS);
1746:       assertEquals(46, Node.IS_NAMESPACE);
1747:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1748:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1749:       assertEquals(30, Node.VAR_ARGS_NAME);
1750:       assertEquals(47, Node.IS_DISPATCHER);
1751:       assertEquals(40, Node.ORIGINALNAME_PROP);
1752:       assertEquals(2, Node.POST_FLAG);
1753:       assertFalse(node0.equals((Object)node1));
1754:       assertFalse(node0.equals((Object)node2));
1755:       assertTrue(boolean3 == boolean1);
1756:       assertTrue(boolean3 == boolean0);
1757:       assertTrue(boolean3 == boolean2);
1758:       assertEquals((-1), node0.getLineno());
1759:       assertFalse(node0.isReturn());
1760:       assertFalse(node0.isOr());
1761:       assertFalse(node0.isLabel());
1762:       assertFalse(node0.hasMoreThanOneChild());
1763:       assertFalse(node0.isNumber());
1764:       assertFalse(node0.isTypeOf());
1765:       assertFalse(node0.isContinue());
1766:       assertFalse(node0.isLabelName());
1767:       assertEquals((-1), node0.getSourcePosition());
1768:       assertFalse(node0.isGetElem());
1769:       assertFalse(node0.isAdd());
1770:       assertFalse(node0.isNew());
1771:       assertFalse(node0.isCast());
1772:       assertFalse(node0.isDo());
1773:       assertFalse(node0.isVar());
1774:       assertFalse(node0.isAssignAdd());
1775:       assertFalse(node0.isGetProp());
1776:       assertFalse(node0.isComma());
1777:       assertFalse(node0.isObjectLit());
1778:       assertFalse(node0.isNot());
1779:       assertFalse(node0.isNull());
1780:       assertFalse(node0.isBreak());
1781:       assertFalse(node0.isTrue());
1782:       assertFalse(node0.isVoid());
1783:       assertFalse(node0.isName());
1784:       assertFalse(node0.isAnd());
1785:       assertFalse(node0.isDebugger());
1786:       assertFalse(node0.isCall());
1787:       assertFalse(node0.isExprResult());
1788:       assertFalse(node0.isWhile());
1789:       assertFalse(node0.isAssign());
1790:       assertFalse(node0.isDec());
1791:       assertFalse(node0.hasChildren());
1792:       assertFalse(node0.isIn());
1793:       assertFalse(node0.isGetterDef());
1794:       assertFalse(node0.isDelProp());
1795:       assertFalse(node0.isNE());
1796:       assertFalse(node0.isIf());
1797:       assertFalse(node0.isSwitch());
1798:       assertFalse(node0.isArrayLit());
1799:       assertFalse(node0.isFunction());
1800:       assertFalse(node0.isInc());
1801:       assertFalse(node0.isFalse());
1802:       assertFalse(node0.isEmpty());
1803:       assertEquals(40, node0.getType());
1804:       assertFalse(node0.isThrow());
1805:       assertFalse(node0.isDefaultCase());
1806:       assertEquals(0, node0.getChildCount());
1807:       assertFalse(node0.isSetterDef());
1808:       assertFalse(node0.isCatch());
1809:       assertFalse(node0.isInstanceOf());
1810:       assertFalse(node0.isParamList());
1811:       assertFalse(node0.isStringKey());
1812:       assertFalse(node0.isTry());
1813:       assertFalse(node0.isBlock());
1814:       assertFalse(node0.hasOneChild());
1815:       assertFalse(node0.isHook());
1816:       assertEquals((-1), node0.getCharno());
1817:       assertFalse(node0.isRegExp());
1818:       assertFalse(node0.isScript());
1819:       assertFalse(node0.isWith());
1820:       assertFalse(node0.isFor());
1821:       assertFalse(node0.isCase());
1822:       assertFalse(node0.isThis());
1823:       assertTrue(node0.isString());
1824:       
1825:       node2.addSuppression((String) null);
1826:       assertSame(node1, node2);
1827:       assertSame(node2, node1);
1828:       assertEquals(53, Node.INPUT_ID);
1829:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1830:       assertEquals(43, Node.IS_CONSTANT_NAME);
1831:       assertEquals(56, Node.CHANGE_TIME);
1832:       assertEquals(29, Node.JSDOC_INFO_PROP);
1833:       assertEquals(36, Node.QUOTED_PROP);
1834:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1835:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1836:       assertEquals(55, Node.INFERRED_FUNCTION);
1837:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1838:       assertEquals(32, Node.INCRDECR_PROP);
1839:       assertEquals(12, Node.COLUMN_BITS);
1840:       assertEquals(37, Node.OPT_ARG_NAME);
1841:       assertEquals(48, Node.DIRECTIVES);
1842:       assertEquals(1, Node.DECR_FLAG);
1843:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1844:       assertEquals(49, Node.DIRECT_EVAL);
1845:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1846:       assertEquals(4095, Node.COLUMN_MASK);
1847:       assertEquals(57, Node.REFLECTED_OBJECT);
1848:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1849:       assertEquals(54, Node.SLASH_V);
1850:       assertEquals(57, Node.LAST_PROP);
1851:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1852:       assertEquals(39, Node.EMPTY_BLOCK);
1853:       assertEquals(50, Node.FREE_CALL);
1854:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1855:       assertEquals(52, Node.LENGTH);
1856:       assertEquals(8, Node.FLAG_NO_THROWS);
1857:       assertEquals(46, Node.IS_NAMESPACE);
1858:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1859:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1860:       assertEquals(30, Node.VAR_ARGS_NAME);
1861:       assertEquals(47, Node.IS_DISPATCHER);
1862:       assertEquals(40, Node.ORIGINALNAME_PROP);
1863:       assertEquals(2, Node.POST_FLAG);
1864:       assertEquals(43, Node.IS_CONSTANT_NAME);
1865:       assertEquals(36, Node.QUOTED_PROP);
1866:       assertEquals(53, Node.INPUT_ID);
1867:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1868:       assertEquals(55, Node.INFERRED_FUNCTION);
1869:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1870:       assertEquals(4095, Node.COLUMN_MASK);
1871:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1872:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1873:       assertEquals(47, Node.IS_DISPATCHER);
1874:       assertEquals(2, Node.POST_FLAG);
1875:       assertEquals(50, Node.FREE_CALL);
1876:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1877:       assertEquals(40, Node.ORIGINALNAME_PROP);
1878:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1879:       assertEquals(46, Node.IS_NAMESPACE);
1880:       assertEquals(54, Node.SLASH_V);
1881:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1882:       assertEquals(57, Node.LAST_PROP);
1883:       assertEquals(30, Node.VAR_ARGS_NAME);
1884:       assertEquals(49, Node.DIRECT_EVAL);
1885:       assertEquals(52, Node.LENGTH);
1886:       assertEquals(12, Node.COLUMN_BITS);
1887:       assertEquals(32, Node.INCRDECR_PROP);
1888:       assertEquals(1, Node.DECR_FLAG);
1889:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1890:       assertEquals(56, Node.CHANGE_TIME);
1891:       assertEquals(39, Node.EMPTY_BLOCK);
1892:       assertEquals(37, Node.OPT_ARG_NAME);
1893:       assertEquals(8, Node.FLAG_NO_THROWS);
1894:       assertEquals(48, Node.DIRECTIVES);
1895:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1896:       assertEquals(29, Node.JSDOC_INFO_PROP);
1897:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1898:       assertEquals(57, Node.REFLECTED_OBJECT);
1899:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1900:       assertEquals(36, Node.QUOTED_PROP);
1901:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1902:       assertEquals(43, Node.IS_CONSTANT_NAME);
1903:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1904:       assertEquals(4095, Node.COLUMN_MASK);
1905:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1906:       assertEquals(32, Node.INCRDECR_PROP);
1907:       assertEquals(46, Node.IS_NAMESPACE);
1908:       assertEquals(1, Node.DECR_FLAG);
1909:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1910:       assertEquals(50, Node.FREE_CALL);
1911:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1912:       assertEquals(54, Node.SLASH_V);
1913:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1914:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1915:       assertEquals(49, Node.DIRECT_EVAL);
1916:       assertEquals(57, Node.LAST_PROP);
1917:       assertEquals(40, Node.ORIGINALNAME_PROP);
1918:       assertEquals(12, Node.COLUMN_BITS);
1919:       assertEquals(30, Node.VAR_ARGS_NAME);
1920:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1921:       assertEquals(2, Node.POST_FLAG);
1922:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1923:       assertEquals(8, Node.FLAG_NO_THROWS);
1924:       assertEquals(39, Node.EMPTY_BLOCK);
1925:       assertEquals(48, Node.DIRECTIVES);
1926:       assertEquals(47, Node.IS_DISPATCHER);
1927:       assertEquals(37, Node.OPT_ARG_NAME);
1928:       assertEquals(56, Node.CHANGE_TIME);
1929:       assertEquals(55, Node.INFERRED_FUNCTION);
1930:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1931:       assertEquals(57, Node.REFLECTED_OBJECT);
1932:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1933:       assertEquals(52, Node.LENGTH);
1934:       assertEquals(29, Node.JSDOC_INFO_PROP);
1935:       assertEquals(53, Node.INPUT_ID);
1936:       assertFalse(node0.equals((Object)node1));
1937:       assertFalse(node0.equals((Object)node2));
1938:       assertFalse(node1.equals((Object)node0));
1939:       assertFalse(node2.equals((Object)node0));
1940:       assertEquals((-1), node0.getLineno());
1941:       assertFalse(node0.isReturn());
1942:       assertFalse(node0.isOr());
1943:       assertFalse(node0.isLabel());
1944:       assertFalse(node0.hasMoreThanOneChild());
1945:       assertFalse(node0.isNumber());
1946:       assertFalse(node0.isTypeOf());
1947:       assertFalse(node0.isContinue());
1948:       assertFalse(node0.isLabelName());
1949:       assertEquals((-1), node0.getSourcePosition());
1950:       assertFalse(node0.isGetElem());
1951:       assertFalse(node0.isAdd());
1952:       assertFalse(node0.isNew());
1953:       assertFalse(node0.isCast());
1954:       assertFalse(node0.isDo());
1955:       assertFalse(node0.isVar());
1956:       assertFalse(node0.isAssignAdd());
1957:       assertFalse(node0.isGetProp());
1958:       assertFalse(node0.isComma());
1959:       assertFalse(node0.isObjectLit());
1960:       assertFalse(node0.isNot());
1961:       assertFalse(node0.isNull());
1962:       assertFalse(node0.isBreak());
1963:       assertFalse(node0.isTrue());
1964:       assertFalse(node0.isVoid());
1965:       assertFalse(node0.isName());
1966:       assertFalse(node0.isAnd());
1967:       assertFalse(node0.isDebugger());
1968:       assertFalse(node0.isCall());
1969:       assertFalse(node0.isExprResult());
1970:       assertFalse(node0.isWhile());
1971:       assertFalse(node0.isAssign());
1972:       assertFalse(node0.isDec());
1973:       assertFalse(node0.hasChildren());
1974:       assertFalse(node0.isIn());
1975:       assertFalse(node0.isGetterDef());
1976:       assertFalse(node0.isDelProp());
1977:       assertFalse(node0.isNE());
1978:       assertFalse(node0.isIf());
1979:       assertFalse(node0.isSwitch());
1980:       assertFalse(node0.isArrayLit());
1981:       assertFalse(node0.isFunction());
1982:       assertFalse(node0.isInc());
1983:       assertFalse(node0.isFalse());
1984:       assertFalse(node0.isEmpty());
1985:       assertEquals(40, node0.getType());
1986:       assertFalse(node0.isThrow());
1987:       assertFalse(node0.isDefaultCase());
1988:       assertEquals(0, node0.getChildCount());
1989:       assertFalse(node0.isSetterDef());
1990:       assertFalse(node0.isCatch());
1991:       assertFalse(node0.isInstanceOf());
1992:       assertFalse(node0.isParamList());
1993:       assertFalse(node0.isStringKey());
1994:       assertFalse(node0.isTry());
1995:       assertFalse(node0.isBlock());
1996:       assertFalse(node0.hasOneChild());
1997:       assertFalse(node0.isHook());
1998:       assertEquals((-1), node0.getCharno());
1999:       assertFalse(node0.isRegExp());
2000:       assertFalse(node0.isScript());
2001:       assertFalse(node0.isWith());
2002:       assertFalse(node0.isFor());
2003:       assertFalse(node0.isCase());
2004:       assertFalse(node0.isThis());
2005:       assertTrue(node0.isString());
2006:       assertEquals((-1), node1.getSourcePosition());
2007:       assertFalse(node1.isDec());
2008:       assertFalse(node1.hasChildren());
2009:       assertFalse(node1.isAssign());
2010:       assertFalse(node1.isLabelName());
2011:       assertFalse(node1.isTypeOf());
2012:       assertFalse(node1.isLabel());
2013:       assertFalse(node1.isAssignAdd());
2014:       assertFalse(node1.isReturn());
2015:       assertFalse(node1.hasOneChild());
2016:       assertFalse(node1.isOr());
2017:       assertFalse(node1.isScript());
2018:       assertFalse(node1.isWith());
2019:       assertFalse(node1.isBlock());
2020:       assertEquals(39, node1.getType());
2021:       assertFalse(node1.isWhile());
2022:       assertFalse(node1.isInstanceOf());
2023:       assertFalse(node1.hasMoreThanOneChild());
2024:       assertEquals((-1), node1.getLineno());
2025:       assertFalse(node1.isGetElem());
2026:       assertFalse(node1.isCall());
2027:       assertFalse(node1.isExprResult());
2028:       assertFalse(node1.isComma());
2029:       assertFalse(node1.isThrow());
2030:       assertFalse(node1.isObjectLit());
2031:       assertFalse(node1.isGetProp());
2032:       assertFalse(node1.isSetterDef());
2033:       assertFalse(node1.isInc());
2034:       assertFalse(node1.isFunction());
2035:       assertFalse(node1.isNot());
2036:       assertFalse(node1.isDebugger());
2037:       assertFalse(node1.isAnd());
2038:       assertFalse(node1.isFalse());
2039:       assertFalse(node1.isContinue());
2040:       assertFalse(node1.isCast());
2041:       assertFalse(node1.isIf());
2042:       assertFalse(node1.isGetterDef());
2043:       assertFalse(node1.isDelProp());
2044:       assertFalse(node1.isFor());
2045:       assertFalse(node1.isNE());
2046:       assertFalse(node1.isIn());
2047:       assertTrue(node1.isNumber());
2048:       assertFalse(node1.isTry());
2049:       assertFalse(node1.isCase());
2050:       assertFalse(node1.isString());
2051:       assertFalse(node1.isEmpty());
2052:       assertFalse(node1.isRegExp());
2053:       assertFalse(node1.isVoid());
2054:       assertFalse(node1.isTrue());
2055:       assertFalse(node1.isHook());
2056:       assertFalse(node1.isCatch());
2057:       assertFalse(node1.isBreak());
2058:       assertFalse(node1.isName());
2059:       assertFalse(node1.isStringKey());
2060:       assertFalse(node1.isParamList());
2061:       assertFalse(node1.isThis());
2062:       assertFalse(node1.isVar());
2063:       assertFalse(node1.isNull());
2064:       assertFalse(node1.isNew());
2065:       assertFalse(node1.isAdd());
2066:       assertFalse(node1.isDefaultCase());
2067:       assertFalse(node1.isSwitch());
2068:       assertFalse(node1.isDo());
2069:       assertEquals((-1), node1.getCharno());
2070:       assertFalse(node1.isArrayLit());
2071:       assertEquals(0, node1.getChildCount());
2072:       assertFalse(node2.isTypeOf());
2073:       assertFalse(node2.hasChildren());
2074:       assertEquals((-1), node2.getSourcePosition());
2075:       assertFalse(node2.isDec());
2076:       assertFalse(node2.isAssign());
2077:       assertFalse(node2.isOr());
2078:       assertFalse(node2.isGetElem());
2079:       assertFalse(node2.hasMoreThanOneChild());
2080:       assertFalse(node2.hasOneChild());
2081:       assertEquals(39, node2.getType());
2082:       assertFalse(node2.isLabel());
2083:       assertFalse(node2.isAssignAdd());
2084:       assertFalse(node2.isDo());
2085:       assertFalse(node2.isReturn());
2086:       assertFalse(node2.isWhile());
2087:       assertFalse(node2.isExprResult());
2088:       assertFalse(node2.isNew());
2089:       assertFalse(node2.isAdd());
2090:       assertFalse(node2.isWith());
2091:       assertFalse(node2.isCall());
2092:       assertEquals((-1), node2.getLineno());
2093:       assertFalse(node2.isName());
2094:       assertFalse(node2.isThis());
2095:       assertFalse(node2.isNull());
2096:       assertFalse(node2.isInstanceOf());
2097:       assertFalse(node2.isVar());
2098:       assertFalse(node2.isHook());
2099:       assertEquals(0, node2.getChildCount());
2100:       assertFalse(node2.isBlock());
2101:       assertFalse(node2.isDefaultCase());
2102:       assertFalse(node2.isScript());
2103:       assertFalse(node2.isSwitch());
2104:       assertEquals((-1), node2.getCharno());
2105:       assertFalse(node2.isArrayLit());
2106:       assertFalse(node2.isLabelName());
2107:       assertFalse(node2.isStringKey());
2108:       assertFalse(node2.isParamList());
2109:       assertFalse(node2.isNE());
2110:       assertFalse(node2.isGetterDef());
2111:       assertFalse(node2.isDelProp());
2112:       assertFalse(node2.isEmpty());
2113:       assertFalse(node2.isIn());
2114:       assertTrue(node2.isNumber());
2115:       assertFalse(node2.isCase());
2116:       assertFalse(node2.isFor());
2117:       assertFalse(node2.isTry());
2118:       assertFalse(node2.isRegExp());
2119:       assertFalse(node2.isInc());
2120:       assertFalse(node2.isTrue());
2121:       assertFalse(node2.isVoid());
2122:       assertFalse(node2.isCatch());
2123:       assertFalse(node2.isIf());
2124:       assertFalse(node2.isSetterDef());
2125:       assertFalse(node2.isBreak());
2126:       assertFalse(node2.isGetProp());
2127:       assertFalse(node2.isComma());
2128:       assertFalse(node2.isFalse());
2129:       assertFalse(node2.isThrow());
2130:       assertFalse(node2.isFunction());
2131:       assertFalse(node2.isDebugger());
2132:       assertFalse(node2.isNot());
2133:       assertFalse(node2.isContinue());
2134:       assertFalse(node2.isString());
2135:       assertFalse(node2.isCast());
2136:       assertFalse(node2.isObjectLit());
2137:       assertFalse(node2.isAnd());
2138:       
2139:       node0.addSuppression("9Q k6.106");
2140:       assertEquals(53, Node.INPUT_ID);
2141:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2142:       assertEquals(43, Node.IS_CONSTANT_NAME);
2143:       assertEquals(56, Node.CHANGE_TIME);
2144:       assertEquals(29, Node.JSDOC_INFO_PROP);
2145:       assertEquals(36, Node.QUOTED_PROP);
2146:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2147:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2148:       assertEquals(55, Node.INFERRED_FUNCTION);
2149:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2150:       assertEquals(32, Node.INCRDECR_PROP);
2151:       assertEquals(12, Node.COLUMN_BITS);
2152:       assertEquals(37, Node.OPT_ARG_NAME);
2153:       assertEquals(48, Node.DIRECTIVES);
2154:       assertEquals(1, Node.DECR_FLAG);
2155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2156:       assertEquals(49, Node.DIRECT_EVAL);
2157:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2158:       assertEquals(4095, Node.COLUMN_MASK);
2159:       assertEquals(57, Node.REFLECTED_OBJECT);
2160:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2161:       assertEquals(54, Node.SLASH_V);
2162:       assertEquals(57, Node.LAST_PROP);
2163:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2164:       assertEquals(39, Node.EMPTY_BLOCK);
2165:       assertEquals(50, Node.FREE_CALL);
2166:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2167:       assertEquals(52, Node.LENGTH);
2168:       assertEquals(8, Node.FLAG_NO_THROWS);
2169:       assertEquals(46, Node.IS_NAMESPACE);
2170:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2171:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2172:       assertEquals(30, Node.VAR_ARGS_NAME);
2173:       assertEquals(47, Node.IS_DISPATCHER);
2174:       assertEquals(40, Node.ORIGINALNAME_PROP);
2175:       assertEquals(2, Node.POST_FLAG);
2176:       assertFalse(node0.equals((Object)node1));
2177:       assertFalse(node0.equals((Object)node2));
2178:       
2179:       Iterable<Node> iterable1 = node2.children();
2180:       assertSame(node1, node2);
2181:       assertSame(node2, node1);
2182:       assertEquals(53, Node.INPUT_ID);
2183:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2184:       assertEquals(43, Node.IS_CONSTANT_NAME);
2185:       assertEquals(56, Node.CHANGE_TIME);
2186:       assertEquals(29, Node.JSDOC_INFO_PROP);
2187:       assertEquals(36, Node.QUOTED_PROP);
2188:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2189:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2190:       assertEquals(55, Node.INFERRED_FUNCTION);
2191:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2192:       assertEquals(32, Node.INCRDECR_PROP);
2193:       assertEquals(12, Node.COLUMN_BITS);
2194:       assertEquals(37, Node.OPT_ARG_NAME);
2195:       assertEquals(48, Node.DIRECTIVES);
2196:       assertEquals(1, Node.DECR_FLAG);
2197:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2198:       assertEquals(49, Node.DIRECT_EVAL);
2199:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2200:       assertEquals(4095, Node.COLUMN_MASK);
2201:       assertEquals(57, Node.REFLECTED_OBJECT);
2202:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2203:       assertEquals(54, Node.SLASH_V);
2204:       assertEquals(57, Node.LAST_PROP);
2205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2206:       assertEquals(39, Node.EMPTY_BLOCK);
2207:       assertEquals(50, Node.FREE_CALL);
2208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2209:       assertEquals(52, Node.LENGTH);
2210:       assertEquals(8, Node.FLAG_NO_THROWS);
2211:       assertEquals(46, Node.IS_NAMESPACE);
2212:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2213:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2214:       assertEquals(30, Node.VAR_ARGS_NAME);
2215:       assertEquals(47, Node.IS_DISPATCHER);
2216:       assertEquals(40, Node.ORIGINALNAME_PROP);
2217:       assertEquals(2, Node.POST_FLAG);
2218:       assertEquals(43, Node.IS_CONSTANT_NAME);
2219:       assertEquals(36, Node.QUOTED_PROP);
2220:       assertEquals(53, Node.INPUT_ID);
2221:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2222:       assertEquals(55, Node.INFERRED_FUNCTION);
2223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2224:       assertEquals(4095, Node.COLUMN_MASK);
2225:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2226:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2227:       assertEquals(47, Node.IS_DISPATCHER);
2228:       assertEquals(2, Node.POST_FLAG);
2229:       assertEquals(50, Node.FREE_CALL);
2230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2231:       assertEquals(40, Node.ORIGINALNAME_PROP);
2232:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2233:       assertEquals(46, Node.IS_NAMESPACE);
2234:       assertEquals(54, Node.SLASH_V);
2235:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2236:       assertEquals(57, Node.LAST_PROP);
2237:       assertEquals(30, Node.VAR_ARGS_NAME);
2238:       assertEquals(49, Node.DIRECT_EVAL);
2239:       assertEquals(52, Node.LENGTH);
2240:       assertEquals(12, Node.COLUMN_BITS);
2241:       assertEquals(32, Node.INCRDECR_PROP);
2242:       assertEquals(1, Node.DECR_FLAG);
2243:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2244:       assertEquals(56, Node.CHANGE_TIME);
2245:       assertEquals(39, Node.EMPTY_BLOCK);
2246:       assertEquals(37, Node.OPT_ARG_NAME);
2247:       assertEquals(8, Node.FLAG_NO_THROWS);
2248:       assertEquals(48, Node.DIRECTIVES);
2249:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2250:       assertEquals(29, Node.JSDOC_INFO_PROP);
2251:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2252:       assertEquals(57, Node.REFLECTED_OBJECT);
2253:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2254:       assertEquals(36, Node.QUOTED_PROP);
2255:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2256:       assertEquals(43, Node.IS_CONSTANT_NAME);
2257:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2258:       assertEquals(4095, Node.COLUMN_MASK);
2259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2260:       assertEquals(32, Node.INCRDECR_PROP);
2261:       assertEquals(46, Node.IS_NAMESPACE);
2262:       assertEquals(1, Node.DECR_FLAG);
2263:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2264:       assertEquals(50, Node.FREE_CALL);
2265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2266:       assertEquals(54, Node.SLASH_V);
2267:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2268:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2269:       assertEquals(49, Node.DIRECT_EVAL);
2270:       assertEquals(57, Node.LAST_PROP);
2271:       assertEquals(40, Node.ORIGINALNAME_PROP);
2272:       assertEquals(12, Node.COLUMN_BITS);
2273:       assertEquals(30, Node.VAR_ARGS_NAME);
2274:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2275:       assertEquals(2, Node.POST_FLAG);
2276:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2277:       assertEquals(8, Node.FLAG_NO_THROWS);
2278:       assertEquals(39, Node.EMPTY_BLOCK);
2279:       assertEquals(48, Node.DIRECTIVES);
2280:       assertEquals(47, Node.IS_DISPATCHER);
2281:       assertEquals(37, Node.OPT_ARG_NAME);
2282:       assertEquals(56, Node.CHANGE_TIME);
2283:       assertEquals(55, Node.INFERRED_FUNCTION);
2284:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2285:       assertEquals(57, Node.REFLECTED_OBJECT);
2286:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2287:       assertEquals(52, Node.LENGTH);
2288:       assertEquals(29, Node.JSDOC_INFO_PROP);
2289:       assertEquals(53, Node.INPUT_ID);
2290:       assertFalse(iterable1.contains(node2));
2291:       assertFalse(node0.equals((Object)node1));
2292:       assertFalse(node0.equals((Object)node2));
2293:       assertFalse(iterable1.equals((Object)iterable0));
2294:       assertFalse(node1.equals((Object)node0));
2295:       assertFalse(node2.equals((Object)node0));
2296:       assertNotNull(iterable1);
2297:       
2298:       boolean boolean4 = node2.isEquivalentToShallow(node0);
2299:       assertSame(node1, node2);
2300:       assertSame(node2, node1);
2301:       assertFalse(boolean4);
2302:       assertEquals(53, Node.INPUT_ID);
2303:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2304:       assertEquals(43, Node.IS_CONSTANT_NAME);
2305:       assertEquals(56, Node.CHANGE_TIME);
2306:       assertEquals(29, Node.JSDOC_INFO_PROP);
2307:       assertEquals(36, Node.QUOTED_PROP);
2308:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2309:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2310:       assertEquals(55, Node.INFERRED_FUNCTION);
2311:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2312:       assertEquals(32, Node.INCRDECR_PROP);
2313:       assertEquals(12, Node.COLUMN_BITS);
2314:       assertEquals(37, Node.OPT_ARG_NAME);
2315:       assertEquals(48, Node.DIRECTIVES);
2316:       assertEquals(1, Node.DECR_FLAG);
2317:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2318:       assertEquals(49, Node.DIRECT_EVAL);
2319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2320:       assertEquals(4095, Node.COLUMN_MASK);
2321:       assertEquals(57, Node.REFLECTED_OBJECT);
2322:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2323:       assertEquals(54, Node.SLASH_V);
2324:       assertEquals(57, Node.LAST_PROP);
2325:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2326:       assertEquals(39, Node.EMPTY_BLOCK);
2327:       assertEquals(50, Node.FREE_CALL);
2328:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2329:       assertEquals(52, Node.LENGTH);
2330:       assertEquals(8, Node.FLAG_NO_THROWS);
2331:       assertEquals(46, Node.IS_NAMESPACE);
2332:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2333:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2334:       assertEquals(30, Node.VAR_ARGS_NAME);
2335:       assertEquals(47, Node.IS_DISPATCHER);
2336:       assertEquals(40, Node.ORIGINALNAME_PROP);
2337:       assertEquals(2, Node.POST_FLAG);
2338:       assertEquals(43, Node.IS_CONSTANT_NAME);
2339:       assertEquals(36, Node.QUOTED_PROP);
2340:       assertEquals(53, Node.INPUT_ID);
2341:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2342:       assertEquals(55, Node.INFERRED_FUNCTION);
2343:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2344:       assertEquals(4095, Node.COLUMN_MASK);
2345:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2346:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2347:       assertEquals(47, Node.IS_DISPATCHER);
2348:       assertEquals(2, Node.POST_FLAG);
2349:       assertEquals(50, Node.FREE_CALL);
2350:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2351:       assertEquals(40, Node.ORIGINALNAME_PROP);
2352:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2353:       assertEquals(46, Node.IS_NAMESPACE);
2354:       assertEquals(54, Node.SLASH_V);
2355:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2356:       assertEquals(57, Node.LAST_PROP);
2357:       assertEquals(30, Node.VAR_ARGS_NAME);
2358:       assertEquals(49, Node.DIRECT_EVAL);
2359:       assertEquals(52, Node.LENGTH);
2360:       assertEquals(12, Node.COLUMN_BITS);
2361:       assertEquals(32, Node.INCRDECR_PROP);
2362:       assertEquals(1, Node.DECR_FLAG);
2363:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2364:       assertEquals(56, Node.CHANGE_TIME);
2365:       assertEquals(39, Node.EMPTY_BLOCK);
2366:       assertEquals(37, Node.OPT_ARG_NAME);
2367:       assertEquals(8, Node.FLAG_NO_THROWS);
2368:       assertEquals(48, Node.DIRECTIVES);
2369:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2370:       assertEquals(29, Node.JSDOC_INFO_PROP);
2371:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2372:       assertEquals(57, Node.REFLECTED_OBJECT);
2373:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2374:       assertEquals(36, Node.QUOTED_PROP);
2375:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2376:       assertEquals(43, Node.IS_CONSTANT_NAME);
2377:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2378:       assertEquals(4095, Node.COLUMN_MASK);
2379:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2380:       assertEquals(32, Node.INCRDECR_PROP);
2381:       assertEquals(46, Node.IS_NAMESPACE);
2382:       assertEquals(1, Node.DECR_FLAG);
2383:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2384:       assertEquals(50, Node.FREE_CALL);
2385:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2386:       assertEquals(54, Node.SLASH_V);
2387:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2388:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2389:       assertEquals(49, Node.DIRECT_EVAL);
2390:       assertEquals(57, Node.LAST_PROP);
2391:       assertEquals(40, Node.ORIGINALNAME_PROP);
2392:       assertEquals(12, Node.COLUMN_BITS);
2393:       assertEquals(30, Node.VAR_ARGS_NAME);
2394:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2395:       assertEquals(2, Node.POST_FLAG);
2396:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2397:       assertEquals(8, Node.FLAG_NO_THROWS);
2398:       assertEquals(39, Node.EMPTY_BLOCK);
2399:       assertEquals(48, Node.DIRECTIVES);
2400:       assertEquals(47, Node.IS_DISPATCHER);
2401:       assertEquals(37, Node.OPT_ARG_NAME);
2402:       assertEquals(56, Node.CHANGE_TIME);
2403:       assertEquals(55, Node.INFERRED_FUNCTION);
2404:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2405:       assertEquals(57, Node.REFLECTED_OBJECT);
2406:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2407:       assertEquals(52, Node.LENGTH);
2408:       assertEquals(29, Node.JSDOC_INFO_PROP);
2409:       assertEquals(53, Node.INPUT_ID);
2410:       assertFalse(node0.equals((Object)node1));
2411:       assertFalse(node0.equals((Object)node2));
2412:       assertTrue(boolean4 == boolean2);
2413:       assertTrue(boolean4 == boolean3);
2414:       assertTrue(boolean4 == boolean1);
2415:       assertTrue(boolean4 == boolean0);
2416:       assertFalse(node1.equals((Object)node0));
2417:       assertFalse(node2.equals((Object)node0));
2418:       
2419:       boolean boolean5 = node2.isCatch();
2420:       assertSame(node1, node2);
2421:       assertSame(node2, node1);
2422:       assertFalse(boolean5);
2423:       assertEquals(53, Node.INPUT_ID);
2424:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2425:       assertEquals(43, Node.IS_CONSTANT_NAME);
2426:       assertEquals(56, Node.CHANGE_TIME);
2427:       assertEquals(29, Node.JSDOC_INFO_PROP);
2428:       assertEquals(36, Node.QUOTED_PROP);
2429:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2430:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2431:       assertEquals(55, Node.INFERRED_FUNCTION);
2432:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2433:       assertEquals(32, Node.INCRDECR_PROP);
2434:       assertEquals(12, Node.COLUMN_BITS);
2435:       assertEquals(37, Node.OPT_ARG_NAME);
2436:       assertEquals(48, Node.DIRECTIVES);
2437:       assertEquals(1, Node.DECR_FLAG);
2438:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2439:       assertEquals(49, Node.DIRECT_EVAL);
2440:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2441:       assertEquals(4095, Node.COLUMN_MASK);
2442:       assertEquals(57, Node.REFLECTED_OBJECT);
2443:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2444:       assertEquals(54, Node.SLASH_V);
2445:       assertEquals(57, Node.LAST_PROP);
2446:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2447:       assertEquals(39, Node.EMPTY_BLOCK);
2448:       assertEquals(50, Node.FREE_CALL);
2449:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2450:       assertEquals(52, Node.LENGTH);
2451:       assertEquals(8, Node.FLAG_NO_THROWS);
2452:       assertEquals(46, Node.IS_NAMESPACE);
2453:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2454:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2455:       assertEquals(30, Node.VAR_ARGS_NAME);
2456:       assertEquals(47, Node.IS_DISPATCHER);
2457:       assertEquals(40, Node.ORIGINALNAME_PROP);
2458:       assertEquals(2, Node.POST_FLAG);
2459:       assertEquals(43, Node.IS_CONSTANT_NAME);
2460:       assertEquals(36, Node.QUOTED_PROP);
2461:       assertEquals(53, Node.INPUT_ID);
2462:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2463:       assertEquals(55, Node.INFERRED_FUNCTION);
2464:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2465:       assertEquals(4095, Node.COLUMN_MASK);
2466:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2467:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2468:       assertEquals(47, Node.IS_DISPATCHER);
2469:       assertEquals(2, Node.POST_FLAG);
2470:       assertEquals(50, Node.FREE_CALL);
2471:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2472:       assertEquals(40, Node.ORIGINALNAME_PROP);
2473:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2474:       assertEquals(46, Node.IS_NAMESPACE);
2475:       assertEquals(54, Node.SLASH_V);
2476:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2477:       assertEquals(57, Node.LAST_PROP);
2478:       assertEquals(30, Node.VAR_ARGS_NAME);
2479:       assertEquals(49, Node.DIRECT_EVAL);
2480:       assertEquals(52, Node.LENGTH);
2481:       assertEquals(12, Node.COLUMN_BITS);
2482:       assertEquals(32, Node.INCRDECR_PROP);
2483:       assertEquals(1, Node.DECR_FLAG);
2484:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2485:       assertEquals(56, Node.CHANGE_TIME);
2486:       assertEquals(39, Node.EMPTY_BLOCK);
2487:       assertEquals(37, Node.OPT_ARG_NAME);
2488:       assertEquals(8, Node.FLAG_NO_THROWS);
2489:       assertEquals(48, Node.DIRECTIVES);
2490:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2491:       assertEquals(29, Node.JSDOC_INFO_PROP);
2492:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2493:       assertEquals(57, Node.REFLECTED_OBJECT);
2494:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2495:       assertEquals(36, Node.QUOTED_PROP);
2496:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2497:       assertEquals(43, Node.IS_CONSTANT_NAME);
2498:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2499:       assertEquals(4095, Node.COLUMN_MASK);
2500:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2501:       assertEquals(32, Node.INCRDECR_PROP);
2502:       assertEquals(46, Node.IS_NAMESPACE);
2503:       assertEquals(1, Node.DECR_FLAG);
2504:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2505:       assertEquals(50, Node.FREE_CALL);
2506:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2507:       assertEquals(54, Node.SLASH_V);
2508:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2509:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2510:       assertEquals(49, Node.DIRECT_EVAL);
2511:       assertEquals(57, Node.LAST_PROP);
2512:       assertEquals(40, Node.ORIGINALNAME_PROP);
2513:       assertEquals(12, Node.COLUMN_BITS);
2514:       assertEquals(30, Node.VAR_ARGS_NAME);
2515:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2516:       assertEquals(2, Node.POST_FLAG);
2517:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2518:       assertEquals(8, Node.FLAG_NO_THROWS);
2519:       assertEquals(39, Node.EMPTY_BLOCK);
2520:       assertEquals(48, Node.DIRECTIVES);
2521:       assertEquals(47, Node.IS_DISPATCHER);
2522:       assertEquals(37, Node.OPT_ARG_NAME);
2523:       assertEquals(56, Node.CHANGE_TIME);
2524:       assertEquals(55, Node.INFERRED_FUNCTION);
2525:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2526:       assertEquals(57, Node.REFLECTED_OBJECT);
2527:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2528:       assertEquals(52, Node.LENGTH);
2529:       assertEquals(29, Node.JSDOC_INFO_PROP);
2530:       assertEquals(53, Node.INPUT_ID);
2531:       assertFalse(node0.equals((Object)node1));
2532:       assertFalse(node0.equals((Object)node2));
2533:       assertTrue(boolean5 == boolean2);
2534:       assertTrue(boolean5 == boolean1);
2535:       assertTrue(boolean5 == boolean4);
2536:       assertTrue(boolean5 == boolean0);
2537:       assertTrue(boolean5 == boolean3);
2538:       assertFalse(node1.equals((Object)node0));
2539:       assertFalse(node2.equals((Object)node0));
2540:       
2541:       // Undeclared exception!
2542:       try { 
2543:         node2.setSideEffectFlags((-484));
2544:         fail("Expecting exception: IllegalArgumentException");
2545:       
2546:       } catch(IllegalArgumentException e) {
2547:          //
2548:          // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
2549:          //
2550:          verifyException("com.google.common.base.Preconditions", e);
2551:       }
2552:   }
2553: }
RegularFileObject[/tmp/EvoSuite_146_1628159295774/com/google/javascript/rhino/Node_146_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:16 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_146_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_146_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_146_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.JSTypeNative",
291:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
292:       "com.google.javascript.rhino.jstype.JSType$1",
293:       "com.google.javascript.rhino.jstype.JSType",
294:       "com.google.javascript.rhino.jstype.ObjectType",
295:       "com.google.javascript.rhino.jstype.ProxyObjectType",
296:       "com.google.javascript.rhino.jstype.TemplateType",
297:       "com.google.javascript.rhino.jstype.ValueType",
298:       "com.google.javascript.rhino.jstype.BooleanType",
299:       "com.google.javascript.rhino.jstype.NullType",
300:       "com.google.javascript.rhino.jstype.NumberType",
301:       "com.google.javascript.rhino.jstype.StringType",
302:       "com.google.javascript.rhino.jstype.UnknownType",
303:       "com.google.javascript.rhino.jstype.VoidType",
304:       "com.google.javascript.rhino.jstype.AllType",
305:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
306:       "com.google.common.collect.ImmutableMap",
307:       "com.google.common.collect.ImmutableBiMap",
308:       "com.google.common.collect.EmptyImmutableBiMap",
309:       "com.google.javascript.rhino.jstype.PropertyMap$1",
310:       "com.google.javascript.rhino.jstype.PropertyMap",
311:       "com.google.javascript.rhino.jstype.FunctionType",
312:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
313:       "com.google.javascript.rhino.Token",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
333:       "com.google.javascript.rhino.SimpleErrorReporter",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.common.base.Objects",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.javascript.rhino.jstype.TemplatizedType",
342:       "com.google.common.collect.Iterables",
343:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
344:       "com.google.javascript.rhino.JSDocInfo$Visibility",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.javascript.rhino.jstype.JSType$TypePair",
360:       "com.google.common.collect.Platform"
361:     );
362:   }
363: }

[MASTER] 10:28:16.589 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("J.g=");
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node0);
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());

boolean boolean0 = node0.isLabel();
assertFalse(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());

String string0 = node0.toStringTree();
assertEquals("STRING J.g=\n", string0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotNull(string0);
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());

int int0 = node0.getIntProp(375);
assertEquals(0, int0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());

boolean boolean1 = node0.isAssign();
assertFalse(boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertTrue(boolean1 == boolean0);
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node node1 = Node.newNumber((double) 4095, 8, 20);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(8, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isBreak());
assertEquals(20, node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());

double double0 = node1.getDouble();
assertEquals(4095.0, double0, 0.01);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(8, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isBreak());
assertEquals(20, node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.equals((Object)node1));
assertNull(staticSourceFile0);
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());

boolean boolean2 = node1.isUnscopedQualifiedName();
assertFalse(boolean2);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(8, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isBreak());
assertEquals(20, node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());

Iterable<Node> iterable0 = node1.siblings();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node1.equals((Object)node0));
assertNotNull(iterable0);
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(8, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isBreak());
assertEquals(20, node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(8, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isBreak());
assertEquals(20, node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());

String string1 = node1.getSourceFileName();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertFalse(node1.equals((Object)node0));
assertNull(string1);
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(8, node1.getLineno());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isBreak());
assertEquals(20, node1.getCharno());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());

Node node2 = node1.srcrefTree(node0);
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasOneChild());
assertEquals(39, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isWith());
assertFalse(node2.isCall());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isThis());
assertFalse(node2.isNull());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isBlock());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertTrue(node2.isNumber());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isCast());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());

boolean boolean3 = node0.isAnd();
assertFalse(boolean3);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());

node2.addSuppression((String) null);
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetElem());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCast());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isIn());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertTrue(node0.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertFalse(node2.isGetElem());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasOneChild());
assertEquals(39, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isWith());
assertFalse(node2.isCall());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isThis());
assertFalse(node2.isNull());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isBlock());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isIn());
assertTrue(node2.isNumber());
assertFalse(node2.isCase());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isCast());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());

node0.addSuppression("9Q k6.106");
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));

Iterable<Node> iterable1 = node2.children();
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertFalse(iterable1.contains(node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(iterable1.equals((Object)iterable0));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotNull(iterable1);

boolean boolean4 = node2.isEquivalentToShallow(node0);
assertSame(node1, node2);
assertSame(node2, node1);
assertFalse(boolean4);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));

boolean boolean5 = node2.isCatch();
assertSame(node1, node2);
assertSame(node2, node1);
assertFalse(boolean5);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));

node2.setSideEffectFlags((-484));

[MASTER] 10:28:45.741 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:46.038 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:46.325 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:46.564 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:46.780 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:46.981 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:47.940 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/12
* Done!

* Computation finished
