* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 19985
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3863607879
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:44:50.692 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:44:53.310 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:44:53.669 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 17:44:53.670 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 17:44:53.778 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 17:44:53.784 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch in context: com.google.javascript.rhino.Node:getJSType()Lcom/google/javascript/rhino/jstype/JSType;
[MASTER] 17:44:54.254 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 17:45:11.932 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.google.javascript.rhino.jstype.TemplateTypeMapReplacer due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 17:52:04.115 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
* Search finished after 605s and 466 generations, 228433 statements, best individual has fitness: 3082.0
* Minimizing test suite
[MASTER] 17:56:14.469 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 792
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 606
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 100
* Number of covered goals: 100
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 467
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 4536
* Number of covered goals: 2007
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 714
* Number of covered goals: 564
* Generated 729 tests with total length 10897
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:57:29.108 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6865% of time used, but only 45/729 tests minimized), falling back to using all assertions
[MASTER] 17:57:48.059 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 17:57:58.351 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 10 seconds more than allowed.
[MASTER] 17:58:22.389 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_125_1629223102290/com/google/javascript/rhino/Node_125_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_125_1629223102290/com/google/javascript/rhino/Node_125_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:22.389 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:22.389 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:22.394 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 670
[MASTER] 17:58:22.396 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_125_1629223102290/com/google/javascript/rhino/Node_125_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:22 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.SimpleErrorReporter;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import java.util.List;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_125_tmp__ESTest extends Node_125_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Node node0 = new Node(55, 55, 2);
27:       assertNotNull(node0);
28:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
29:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
30:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
31:       assertEquals(29, Node.JSDOC_INFO_PROP);
32:       assertEquals(53, Node.INPUT_ID);
33:       assertEquals(32, Node.INCRDECR_PROP);
34:       assertEquals(2, Node.POST_FLAG);
35:       assertEquals(12, Node.COLUMN_BITS);
36:       assertEquals(47, Node.IS_DISPATCHER);
37:       assertEquals(30, Node.VAR_ARGS_NAME);
38:       assertEquals(1, Node.DECR_FLAG);
39:       assertEquals(43, Node.IS_CONSTANT_NAME);
40:       assertEquals(51, Node.STATIC_SOURCE_FILE);
41:       assertEquals(46, Node.IS_NAMESPACE);
42:       assertEquals(54, Node.SLASH_V);
43:       assertEquals(50, Node.FREE_CALL);
44:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
45:       assertEquals(8, Node.FLAG_NO_THROWS);
46:       assertEquals(39, Node.EMPTY_BLOCK);
47:       assertEquals(40, Node.ORIGINALNAME_PROP);
48:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
49:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
50:       assertEquals(57, Node.LAST_PROP);
51:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
52:       assertEquals(49, Node.DIRECT_EVAL);
53:       assertEquals(4095, Node.COLUMN_MASK);
54:       assertEquals(15, Node.NO_SIDE_EFFECTS);
55:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
56:       assertEquals(55, Node.INFERRED_FUNCTION);
57:       assertEquals(52, Node.LENGTH);
58:       assertEquals(37, Node.OPT_ARG_NAME);
59:       assertEquals(48, Node.DIRECTIVES);
60:       assertEquals(36, Node.QUOTED_PROP);
61:       assertEquals(57, Node.REFLECTED_OBJECT);
62:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
63:       assertEquals(56, Node.CHANGE_TIME);
64:       assertFalse(node0.isCase());
65:       assertFalse(node0.isSwitch());
66:       assertFalse(node0.isHook());
67:       assertFalse(node0.isFalse());
68:       assertFalse(node0.isFor());
69:       assertFalse(node0.isArrayLit());
70:       assertFalse(node0.isTry());
71:       assertFalse(node0.isGetProp());
72:       assertFalse(node0.isDebugger());
73:       assertFalse(node0.isString());
74:       assertFalse(node0.isGetterDef());
75:       assertFalse(node0.isObjectLit());
76:       assertEquals(2, node0.getCharno());
77:       assertFalse(node0.isDefaultCase());
78:       assertFalse(node0.isVoid());
79:       assertFalse(node0.isExprResult());
80:       assertEquals(0, node0.getChildCount());
81:       assertFalse(node0.isComma());
82:       assertFalse(node0.isVar());
83:       assertFalse(node0.isCall());
84:       assertFalse(node0.isGetElem());
85:       assertFalse(node0.isEmpty());
86:       assertFalse(node0.isBreak());
87:       assertFalse(node0.isName());
88:       assertFalse(node0.isDelProp());
89:       assertFalse(node0.isNew());
90:       assertFalse(node0.isNull());
91:       assertFalse(node0.isAdd());
92:       assertFalse(node0.isTrue());
93:       assertEquals(55, node0.getLineno());
94:       assertFalse(node0.isOr());
95:       assertFalse(node0.isContinue());
96:       assertFalse(node0.isWhile());
97:       assertFalse(node0.isAssignAdd());
98:       assertFalse(node0.isDo());
99:       assertFalse(node0.isLabel());
100:       assertFalse(node0.isReturn());
101:       assertFalse(node0.isBlock());
102:       assertFalse(node0.isDec());
103:       assertFalse(node0.hasChildren());
104:       assertFalse(node0.hasMoreThanOneChild());
105:       assertFalse(node0.isAssign());
106:       assertFalse(node0.isTypeOf());
107:       assertFalse(node0.isStringKey());
108:       assertEquals(55, node0.getType());
109:       assertFalse(node0.isCast());
110:       assertFalse(node0.hasOneChild());
111:       assertFalse(node0.isLabelName());
112:       assertEquals(225282, node0.getSourcePosition());
113:       assertFalse(node0.isParamList());
114:       assertFalse(node0.isScript());
115:       assertFalse(node0.isNumber());
116:       assertFalse(node0.isNot());
117:       assertFalse(node0.isAnd());
118:       assertFalse(node0.isCatch());
119:       assertFalse(node0.isThis());
120:       assertFalse(node0.isInstanceOf());
121:       assertFalse(node0.isWith());
122:       assertFalse(node0.isRegExp());
123:       assertFalse(node0.isFunction());
124:       assertFalse(node0.isThrow());
125:       assertFalse(node0.isIf());
126:       assertFalse(node0.isNE());
127:       assertFalse(node0.isSetterDef());
128:       assertFalse(node0.isInc());
129:       assertFalse(node0.isIn());
130:       
131:       Node node1 = Node.newString(54, "fZ", 46, 47);
132:       assertFalse(node1.equals((Object)node0));
133:       assertNotNull(node1);
134:       assertEquals(52, Node.LENGTH);
135:       assertEquals(54, Node.SLASH_V);
136:       assertEquals(40, Node.ORIGINALNAME_PROP);
137:       assertEquals(15, Node.NO_SIDE_EFFECTS);
138:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
139:       assertEquals(49, Node.DIRECT_EVAL);
140:       assertEquals(50, Node.FREE_CALL);
141:       assertEquals(8, Node.FLAG_NO_THROWS);
142:       assertEquals(57, Node.REFLECTED_OBJECT);
143:       assertEquals(51, Node.STATIC_SOURCE_FILE);
144:       assertEquals(32, Node.INCRDECR_PROP);
145:       assertEquals(4095, Node.COLUMN_MASK);
146:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
147:       assertEquals(48, Node.DIRECTIVES);
148:       assertEquals(1, Node.DECR_FLAG);
149:       assertEquals(37, Node.OPT_ARG_NAME);
150:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
151:       assertEquals(12, Node.COLUMN_BITS);
152:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
153:       assertEquals(53, Node.INPUT_ID);
154:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
155:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
156:       assertEquals(29, Node.JSDOC_INFO_PROP);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(43, Node.IS_CONSTANT_NAME);
159:       assertEquals(56, Node.CHANGE_TIME);
160:       assertEquals(36, Node.QUOTED_PROP);
161:       assertEquals(46, Node.IS_NAMESPACE);
162:       assertEquals(55, Node.INFERRED_FUNCTION);
163:       assertEquals(39, Node.EMPTY_BLOCK);
164:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
165:       assertEquals(30, Node.VAR_ARGS_NAME);
166:       assertEquals(57, Node.LAST_PROP);
167:       assertEquals(2, Node.POST_FLAG);
168:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
169:       assertEquals(47, Node.IS_DISPATCHER);
170:       assertEquals(47, node1.getCharno());
171:       assertEquals(0, node1.getChildCount());
172:       assertFalse(node1.isNull());
173:       assertFalse(node1.isParamList());
174:       assertFalse(node1.isSetterDef());
175:       assertFalse(node1.isBlock());
176:       assertEquals(46, node1.getLineno());
177:       assertFalse(node1.isTry());
178:       assertFalse(node1.isVoid());
179:       assertFalse(node1.isTrue());
180:       assertFalse(node1.isWhile());
181:       assertFalse(node1.isFor());
182:       assertFalse(node1.isName());
183:       assertFalse(node1.isDelProp());
184:       assertFalse(node1.isRegExp());
185:       assertFalse(node1.hasMoreThanOneChild());
186:       assertFalse(node1.isCall());
187:       assertFalse(node1.isCatch());
188:       assertFalse(node1.isLabel());
189:       assertFalse(node1.isAssignAdd());
190:       assertFalse(node1.isOr());
191:       assertFalse(node1.isCase());
192:       assertFalse(node1.isGetterDef());
193:       assertFalse(node1.isDo());
194:       assertFalse(node1.isNumber());
195:       assertFalse(node1.isEmpty());
196:       assertFalse(node1.isAdd());
197:       assertFalse(node1.isNew());
198:       assertEquals(188463, node1.getSourcePosition());
199:       assertFalse(node1.isSwitch());
200:       assertFalse(node1.isDefaultCase());
201:       assertFalse(node1.isStringKey());
202:       assertFalse(node1.isVar());
203:       assertFalse(node1.isLabelName());
204:       assertFalse(node1.isArrayLit());
205:       assertFalse(node1.isGetProp());
206:       assertFalse(node1.isComma());
207:       assertFalse(node1.isThis());
208:       assertFalse(node1.isAnd());
209:       assertEquals(54, node1.getType());
210:       assertFalse(node1.isObjectLit());
211:       assertFalse(node1.isNot());
212:       assertFalse(node1.isScript());
213:       assertFalse(node1.hasOneChild());
214:       assertFalse(node1.isHook());
215:       assertFalse(node1.isGetElem());
216:       assertFalse(node1.isWith());
217:       assertFalse(node1.isDec());
218:       assertFalse(node1.isAssign());
219:       assertFalse(node1.isTypeOf());
220:       assertFalse(node1.isBreak());
221:       assertFalse(node1.isExprResult());
222:       assertFalse(node1.isInstanceOf());
223:       assertFalse(node1.isIf());
224:       assertFalse(node1.hasChildren());
225:       assertFalse(node1.isReturn());
226:       assertFalse(node1.isNE());
227:       assertFalse(node1.isIn());
228:       assertFalse(node1.isInc());
229:       assertFalse(node1.isString());
230:       assertFalse(node1.isFunction());
231:       assertFalse(node1.isDebugger());
232:       assertFalse(node1.isThrow());
233:       assertFalse(node1.isFalse());
234:       assertFalse(node1.isContinue());
235:       assertFalse(node1.isCast());
236:       
237:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
238:       assertFalse(node0.equals((Object)node1));
239:       assertNull(jSDocInfo0);
240:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
241:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
242:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
243:       assertEquals(29, Node.JSDOC_INFO_PROP);
244:       assertEquals(53, Node.INPUT_ID);
245:       assertEquals(32, Node.INCRDECR_PROP);
246:       assertEquals(2, Node.POST_FLAG);
247:       assertEquals(12, Node.COLUMN_BITS);
248:       assertEquals(47, Node.IS_DISPATCHER);
249:       assertEquals(30, Node.VAR_ARGS_NAME);
250:       assertEquals(1, Node.DECR_FLAG);
251:       assertEquals(43, Node.IS_CONSTANT_NAME);
252:       assertEquals(51, Node.STATIC_SOURCE_FILE);
253:       assertEquals(46, Node.IS_NAMESPACE);
254:       assertEquals(54, Node.SLASH_V);
255:       assertEquals(50, Node.FREE_CALL);
256:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
257:       assertEquals(8, Node.FLAG_NO_THROWS);
258:       assertEquals(39, Node.EMPTY_BLOCK);
259:       assertEquals(40, Node.ORIGINALNAME_PROP);
260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
261:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
262:       assertEquals(57, Node.LAST_PROP);
263:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
264:       assertEquals(49, Node.DIRECT_EVAL);
265:       assertEquals(4095, Node.COLUMN_MASK);
266:       assertEquals(15, Node.NO_SIDE_EFFECTS);
267:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
268:       assertEquals(55, Node.INFERRED_FUNCTION);
269:       assertEquals(52, Node.LENGTH);
270:       assertEquals(37, Node.OPT_ARG_NAME);
271:       assertEquals(48, Node.DIRECTIVES);
272:       assertEquals(36, Node.QUOTED_PROP);
273:       assertEquals(57, Node.REFLECTED_OBJECT);
274:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
275:       assertEquals(56, Node.CHANGE_TIME);
276:       assertFalse(node0.isCase());
277:       assertFalse(node0.isSwitch());
278:       assertFalse(node0.isHook());
279:       assertFalse(node0.isFalse());
280:       assertFalse(node0.isFor());
281:       assertFalse(node0.isArrayLit());
282:       assertFalse(node0.isTry());
283:       assertFalse(node0.isGetProp());
284:       assertFalse(node0.isDebugger());
285:       assertFalse(node0.isString());
286:       assertFalse(node0.isGetterDef());
287:       assertFalse(node0.isObjectLit());
288:       assertEquals(2, node0.getCharno());
289:       assertFalse(node0.isDefaultCase());
290:       assertFalse(node0.isVoid());
291:       assertFalse(node0.isExprResult());
292:       assertEquals(0, node0.getChildCount());
293:       assertFalse(node0.isComma());
294:       assertFalse(node0.isVar());
295:       assertFalse(node0.isCall());
296:       assertFalse(node0.isGetElem());
297:       assertFalse(node0.isEmpty());
298:       assertFalse(node0.isBreak());
299:       assertFalse(node0.isName());
300:       assertFalse(node0.isDelProp());
301:       assertFalse(node0.isNew());
302:       assertFalse(node0.isNull());
303:       assertFalse(node0.isAdd());
304:       assertFalse(node0.isTrue());
305:       assertEquals(55, node0.getLineno());
306:       assertFalse(node0.isOr());
307:       assertFalse(node0.isContinue());
308:       assertFalse(node0.isWhile());
309:       assertFalse(node0.isAssignAdd());
310:       assertFalse(node0.isDo());
311:       assertFalse(node0.isLabel());
312:       assertFalse(node0.isReturn());
313:       assertFalse(node0.isBlock());
314:       assertFalse(node0.isDec());
315:       assertFalse(node0.hasChildren());
316:       assertFalse(node0.hasMoreThanOneChild());
317:       assertFalse(node0.isAssign());
318:       assertFalse(node0.isTypeOf());
319:       assertFalse(node0.isStringKey());
320:       assertEquals(55, node0.getType());
321:       assertFalse(node0.isCast());
322:       assertFalse(node0.hasOneChild());
323:       assertFalse(node0.isLabelName());
324:       assertEquals(225282, node0.getSourcePosition());
325:       assertFalse(node0.isParamList());
326:       assertFalse(node0.isScript());
327:       assertFalse(node0.isNumber());
328:       assertFalse(node0.isNot());
329:       assertFalse(node0.isAnd());
330:       assertFalse(node0.isCatch());
331:       assertFalse(node0.isThis());
332:       assertFalse(node0.isInstanceOf());
333:       assertFalse(node0.isWith());
334:       assertFalse(node0.isRegExp());
335:       assertFalse(node0.isFunction());
336:       assertFalse(node0.isThrow());
337:       assertFalse(node0.isIf());
338:       assertFalse(node0.isNE());
339:       assertFalse(node0.isSetterDef());
340:       assertFalse(node0.isInc());
341:       assertFalse(node0.isIn());
342:       
343:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
344:       assertNotNull(node_SideEffectFlags0);
345:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
346:       assertEquals(32, node_SideEffectFlags0.valueOf());
347:       
348:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
349:       assertNotNull(node_SideEffectFlags1);
350:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
351:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
352:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
353:       assertEquals(31, node_SideEffectFlags0.valueOf());
354:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
355:       assertEquals(31, node_SideEffectFlags1.valueOf());
356:       
357:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
358:       assertNotNull(node_SideEffectFlags2);
359:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
360:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
361:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
362:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
363:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
364:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
365:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
366:       assertEquals(31, node_SideEffectFlags0.valueOf());
367:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
368:       assertEquals(31, node_SideEffectFlags1.valueOf());
369:       assertEquals(31, node_SideEffectFlags2.valueOf());
370:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
371:       
372:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
373:       assertNotNull(node_SideEffectFlags3);
374:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
375:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
376:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
377:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
378:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
379:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
380:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
381:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
382:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
383:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
384:       assertEquals(24, node_SideEffectFlags0.valueOf());
385:       assertEquals(24, node_SideEffectFlags1.valueOf());
386:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
387:       assertEquals(24, node_SideEffectFlags3.valueOf());
388:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
389:       
390:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
391:       assertNotNull(node_SideEffectFlags4);
392:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
393:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
394:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
395:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
396:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
397:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
398:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
399:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
400:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
401:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
402:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
403:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
404:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
405:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
406:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
407:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
408:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
409:       assertEquals(8, node_SideEffectFlags0.valueOf());
410:       assertEquals(8, node_SideEffectFlags1.valueOf());
411:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
412:       assertEquals(8, node_SideEffectFlags3.valueOf());
413:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
414:       assertEquals(8, node_SideEffectFlags4.valueOf());
415:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
416:       
417:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
418:       assertNotNull(node_SideEffectFlags5);
419:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
420:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
421:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
422:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
423:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
424:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
425:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
426:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
427:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
428:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
429:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
430:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
431:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
432:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
433:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
434:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
435:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
436:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
437:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
438:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
439:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
440:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
441:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
442:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
443:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
444:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
445:       assertEquals(8, node_SideEffectFlags0.valueOf());
446:       assertEquals(8, node_SideEffectFlags1.valueOf());
447:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
448:       assertEquals(8, node_SideEffectFlags3.valueOf());
449:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
450:       assertEquals(8, node_SideEffectFlags4.valueOf());
451:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
452:       assertEquals(8, node_SideEffectFlags5.valueOf());
453:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
454:       
455:       Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
456:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
457:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
458:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
459:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
460:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
461:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags5));
462:       assertNotNull(node_SideEffectFlags6);
463:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
464:       assertEquals(0, node_SideEffectFlags6.valueOf());
465:       
466:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.clearAllFlags();
467:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
468:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
469:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
470:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
471:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
472:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags5));
473:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags0));
474:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags5));
475:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags4));
476:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags3));
477:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags2));
478:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags1));
479:       assertNotNull(node_SideEffectFlags7);
480:       assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
481:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags4);
482:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags3);
483:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags0);
484:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags2);
485:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags1);
486:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags5);
487:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags0);
488:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags5);
489:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags4);
490:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags3);
491:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags2);
492:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags1);
493:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
494:       assertEquals(31, node_SideEffectFlags6.valueOf());
495:       assertFalse(node_SideEffectFlags6.areAllFlagsSet());
496:       assertEquals(31, node_SideEffectFlags7.valueOf());
497:       assertFalse(node_SideEffectFlags7.areAllFlagsSet());
498:       
499:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags0.setReturnsTainted();
500:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags6));
501:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags7));
502:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
503:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
504:       assertNotNull(node_SideEffectFlags8);
505:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
506:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
507:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
508:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
509:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags6);
510:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
511:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
512:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags7);
513:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
514:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags6);
515:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags7);
516:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
517:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
518:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
519:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
520:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
521:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
522:       assertEquals(8, node_SideEffectFlags0.valueOf());
523:       assertEquals(8, node_SideEffectFlags8.valueOf());
524:       assertFalse(node_SideEffectFlags8.areAllFlagsSet());
525:       
526:       node1.addSuppression("Zkg+&~");
527:       assertFalse(node1.equals((Object)node0));
528:       assertEquals(52, Node.LENGTH);
529:       assertEquals(54, Node.SLASH_V);
530:       assertEquals(40, Node.ORIGINALNAME_PROP);
531:       assertEquals(15, Node.NO_SIDE_EFFECTS);
532:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
533:       assertEquals(49, Node.DIRECT_EVAL);
534:       assertEquals(50, Node.FREE_CALL);
535:       assertEquals(8, Node.FLAG_NO_THROWS);
536:       assertEquals(57, Node.REFLECTED_OBJECT);
537:       assertEquals(51, Node.STATIC_SOURCE_FILE);
538:       assertEquals(32, Node.INCRDECR_PROP);
539:       assertEquals(4095, Node.COLUMN_MASK);
540:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
541:       assertEquals(48, Node.DIRECTIVES);
542:       assertEquals(1, Node.DECR_FLAG);
543:       assertEquals(37, Node.OPT_ARG_NAME);
544:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
545:       assertEquals(12, Node.COLUMN_BITS);
546:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
547:       assertEquals(53, Node.INPUT_ID);
548:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
549:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
550:       assertEquals(29, Node.JSDOC_INFO_PROP);
551:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
552:       assertEquals(43, Node.IS_CONSTANT_NAME);
553:       assertEquals(56, Node.CHANGE_TIME);
554:       assertEquals(36, Node.QUOTED_PROP);
555:       assertEquals(46, Node.IS_NAMESPACE);
556:       assertEquals(55, Node.INFERRED_FUNCTION);
557:       assertEquals(39, Node.EMPTY_BLOCK);
558:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
559:       assertEquals(30, Node.VAR_ARGS_NAME);
560:       assertEquals(57, Node.LAST_PROP);
561:       assertEquals(2, Node.POST_FLAG);
562:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
563:       assertEquals(47, Node.IS_DISPATCHER);
564:       assertEquals(47, node1.getCharno());
565:       assertEquals(0, node1.getChildCount());
566:       assertFalse(node1.isNull());
567:       assertFalse(node1.isParamList());
568:       assertFalse(node1.isSetterDef());
569:       assertFalse(node1.isBlock());
570:       assertEquals(46, node1.getLineno());
571:       assertFalse(node1.isTry());
572:       assertFalse(node1.isVoid());
573:       assertFalse(node1.isTrue());
574:       assertFalse(node1.isWhile());
575:       assertFalse(node1.isFor());
576:       assertFalse(node1.isName());
577:       assertFalse(node1.isDelProp());
578:       assertFalse(node1.isRegExp());
579:       assertFalse(node1.hasMoreThanOneChild());
580:       assertFalse(node1.isCall());
581:       assertFalse(node1.isCatch());
582:       assertFalse(node1.isLabel());
583:       assertFalse(node1.isAssignAdd());
584:       assertFalse(node1.isOr());
585:       assertFalse(node1.isCase());
586:       assertFalse(node1.isGetterDef());
587:       assertFalse(node1.isDo());
588:       assertFalse(node1.isNumber());
589:       assertFalse(node1.isEmpty());
590:       assertFalse(node1.isAdd());
591:       assertFalse(node1.isNew());
592:       assertEquals(188463, node1.getSourcePosition());
593:       assertFalse(node1.isSwitch());
594:       assertFalse(node1.isDefaultCase());
595:       assertFalse(node1.isStringKey());
596:       assertFalse(node1.isVar());
597:       assertFalse(node1.isLabelName());
598:       assertFalse(node1.isArrayLit());
599:       assertFalse(node1.isGetProp());
600:       assertFalse(node1.isComma());
601:       assertFalse(node1.isThis());
602:       assertFalse(node1.isAnd());
603:       assertEquals(54, node1.getType());
604:       assertFalse(node1.isObjectLit());
605:       assertFalse(node1.isNot());
606:       assertFalse(node1.isScript());
607:       assertFalse(node1.hasOneChild());
608:       assertFalse(node1.isHook());
609:       assertFalse(node1.isGetElem());
610:       assertFalse(node1.isWith());
611:       assertFalse(node1.isDec());
612:       assertFalse(node1.isAssign());
613:       assertFalse(node1.isTypeOf());
614:       assertFalse(node1.isBreak());
615:       assertFalse(node1.isExprResult());
616:       assertFalse(node1.isInstanceOf());
617:       assertFalse(node1.isIf());
618:       assertFalse(node1.hasChildren());
619:       assertFalse(node1.isReturn());
620:       assertFalse(node1.isNE());
621:       assertFalse(node1.isIn());
622:       assertFalse(node1.isInc());
623:       assertFalse(node1.isString());
624:       assertFalse(node1.isFunction());
625:       assertFalse(node1.isDebugger());
626:       assertFalse(node1.isThrow());
627:       assertFalse(node1.isFalse());
628:       assertFalse(node1.isContinue());
629:       assertFalse(node1.isCast());
630:       
631:       Iterable<Node> iterable0 = node0.children();
632:       assertFalse(node0.equals((Object)node1));
633:       assertNotNull(iterable0);
634:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
635:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
636:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
637:       assertEquals(29, Node.JSDOC_INFO_PROP);
638:       assertEquals(53, Node.INPUT_ID);
639:       assertEquals(32, Node.INCRDECR_PROP);
640:       assertEquals(2, Node.POST_FLAG);
641:       assertEquals(12, Node.COLUMN_BITS);
642:       assertEquals(47, Node.IS_DISPATCHER);
643:       assertEquals(30, Node.VAR_ARGS_NAME);
644:       assertEquals(1, Node.DECR_FLAG);
645:       assertEquals(43, Node.IS_CONSTANT_NAME);
646:       assertEquals(51, Node.STATIC_SOURCE_FILE);
647:       assertEquals(46, Node.IS_NAMESPACE);
648:       assertEquals(54, Node.SLASH_V);
649:       assertEquals(50, Node.FREE_CALL);
650:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
651:       assertEquals(8, Node.FLAG_NO_THROWS);
652:       assertEquals(39, Node.EMPTY_BLOCK);
653:       assertEquals(40, Node.ORIGINALNAME_PROP);
654:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
655:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
656:       assertEquals(57, Node.LAST_PROP);
657:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
658:       assertEquals(49, Node.DIRECT_EVAL);
659:       assertEquals(4095, Node.COLUMN_MASK);
660:       assertEquals(15, Node.NO_SIDE_EFFECTS);
661:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
662:       assertEquals(55, Node.INFERRED_FUNCTION);
663:       assertEquals(52, Node.LENGTH);
664:       assertEquals(37, Node.OPT_ARG_NAME);
665:       assertEquals(48, Node.DIRECTIVES);
666:       assertEquals(36, Node.QUOTED_PROP);
667:       assertEquals(57, Node.REFLECTED_OBJECT);
668:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
669:       assertEquals(56, Node.CHANGE_TIME);
670:       assertFalse(iterable0.contains(node1));
671:       assertFalse(node0.isCase());
672:       assertFalse(node0.isSwitch());
673:       assertFalse(node0.isHook());
674:       assertFalse(node0.isFalse());
675:       assertFalse(node0.isFor());
676:       assertFalse(node0.isArrayLit());
677:       assertFalse(node0.isTry());
678:       assertFalse(node0.isGetProp());
679:       assertFalse(node0.isDebugger());
680:       assertFalse(node0.isString());
681:       assertFalse(node0.isGetterDef());
682:       assertFalse(node0.isObjectLit());
683:       assertEquals(2, node0.getCharno());
684:       assertFalse(node0.isDefaultCase());
685:       assertFalse(node0.isVoid());
686:       assertFalse(node0.isExprResult());
687:       assertEquals(0, node0.getChildCount());
688:       assertFalse(node0.isComma());
689:       assertFalse(node0.isVar());
690:       assertFalse(node0.isCall());
691:       assertFalse(node0.isGetElem());
692:       assertFalse(node0.isEmpty());
693:       assertFalse(node0.isBreak());
694:       assertFalse(node0.isName());
695:       assertFalse(node0.isDelProp());
696:       assertFalse(node0.isNew());
697:       assertFalse(node0.isNull());
698:       assertFalse(node0.isAdd());
699:       assertFalse(node0.isTrue());
700:       assertEquals(55, node0.getLineno());
701:       assertFalse(node0.isOr());
702:       assertFalse(node0.isContinue());
703:       assertFalse(node0.isWhile());
704:       assertFalse(node0.isAssignAdd());
705:       assertFalse(node0.isDo());
706:       assertFalse(node0.isLabel());
707:       assertFalse(node0.isReturn());
708:       assertFalse(node0.isBlock());
709:       assertFalse(node0.isDec());
710:       assertFalse(node0.hasChildren());
711:       assertFalse(node0.hasMoreThanOneChild());
712:       assertFalse(node0.isAssign());
713:       assertFalse(node0.isTypeOf());
714:       assertFalse(node0.isStringKey());
715:       assertEquals(55, node0.getType());
716:       assertFalse(node0.isCast());
717:       assertFalse(node0.hasOneChild());
718:       assertFalse(node0.isLabelName());
719:       assertEquals(225282, node0.getSourcePosition());
720:       assertFalse(node0.isParamList());
721:       assertFalse(node0.isScript());
722:       assertFalse(node0.isNumber());
723:       assertFalse(node0.isNot());
724:       assertFalse(node0.isAnd());
725:       assertFalse(node0.isCatch());
726:       assertFalse(node0.isThis());
727:       assertFalse(node0.isInstanceOf());
728:       assertFalse(node0.isWith());
729:       assertFalse(node0.isRegExp());
730:       assertFalse(node0.isFunction());
731:       assertFalse(node0.isThrow());
732:       assertFalse(node0.isIf());
733:       assertFalse(node0.isNE());
734:       assertFalse(node0.isSetterDef());
735:       assertFalse(node0.isInc());
736:       assertFalse(node0.isIn());
737:       
738:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
739:       assertNotNull(simpleErrorReporter0);
740:       
741:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
742:       assertNotNull(jSTypeRegistry0);
743:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
744:       
745:       // Undeclared exception!
746:       try { 
747:         jSTypeRegistry0.createParameters((List<JSType>) null);
748:         fail("Expecting exception: NullPointerException");
749:       
750:       } catch(NullPointerException e) {
751:          //
752:          // no message in exception (getMessage() returned null)
753:          //
754:          verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
755:       }
756:   }
757: }
RegularFileObject[/tmp/EvoSuite_125_1629223102290/com/google/javascript/rhino/Node_125_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:22 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_125_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_125_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_125_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
266:       "com.google.common.base.Joiner",
267:       "com.google.common.base.Preconditions",
268:       "com.google.common.base.Joiner$1",
269:       "com.google.common.collect.Collections2",
270:       "com.google.common.base.Joiner$MapJoiner",
271:       "com.google.common.collect.Maps",
272:       "com.google.common.collect.AbstractMultimap",
273:       "com.google.common.collect.AbstractMapBasedMultimap",
274:       "com.google.common.collect.AbstractSetMultimap",
275:       "com.google.common.collect.LinkedHashMultimap",
276:       "com.google.common.collect.AbstractMapEntry",
277:       "com.google.common.collect.ImmutableEntry",
278:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
279:       "com.google.common.collect.AbstractListMultimap",
280:       "com.google.common.collect.ArrayListMultimap",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
282:       "com.google.common.collect.ImmutableCollection",
283:       "com.google.common.collect.RegularImmutableList",
284:       "com.google.common.collect.ObjectArrays",
285:       "com.google.common.collect.ImmutableList",
286:       "com.google.javascript.rhino.jstype.ModificationVisitor",
287:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
288:       "com.google.common.collect.ImmutableCollection$Builder",
289:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
290:       "com.google.common.collect.ImmutableList$Builder",
291:       "com.google.common.collect.UnmodifiableIterator",
292:       "com.google.common.collect.UnmodifiableListIterator",
293:       "com.google.common.collect.Iterators$1",
294:       "com.google.common.collect.Iterators$2",
295:       "com.google.common.collect.Iterators",
296:       "com.google.javascript.rhino.jstype.JSTypeNative",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.SimpleErrorReporter",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.common.base.Objects",
345:       "com.google.javascript.rhino.InputId",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.common.collect.Iterables",
348:       "com.google.javascript.rhino.JSDocInfo$Visibility",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.Node$AncestorIterable$1",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.JSType$TypePair",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 17:58:22.410 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(55, 55, 2);
assertNotNull(node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertEquals(2, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertEquals(55, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isStringKey());
assertEquals(55, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(225282, node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());

Node node1 = Node.newString(54, "fZ", 46, 47);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(47, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBlock());
assertEquals(46, node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals(188463, node1.getSourcePosition());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertEquals(54, node1.getType());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());

JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertFalse(node0.equals((Object)node1));
assertNull(jSDocInfo0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertEquals(2, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertEquals(55, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isStringKey());
assertEquals(55, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(225282, node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(32);
assertNotNull(node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags0.valueOf());
assertEquals(24, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
assertNotNull(node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags0.valueOf());
assertEquals(8, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesGlobalState();
assertNotNull(node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags0.valueOf());
assertEquals(8, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags5.valueOf());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags6 = new Node.SideEffectFlags();
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags5));
assertNotNull(node_SideEffectFlags6);
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags6.valueOf());

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.clearAllFlags();
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags1));
assertNotNull(node_SideEffectFlags7);
assertSame(node_SideEffectFlags6, node_SideEffectFlags7);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertEquals(31, node_SideEffectFlags6.valueOf());
assertFalse(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags7.valueOf());
assertFalse(node_SideEffectFlags7.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags0.setReturnsTainted();
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags7));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
assertNotNull(node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags0.valueOf());
assertEquals(8, node_SideEffectFlags8.valueOf());
assertFalse(node_SideEffectFlags8.areAllFlagsSet());

node1.addSuppression("Zkg+&~");
assertFalse(node1.equals((Object)node0));
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(47, node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isBlock());
assertEquals(46, node1.getLineno());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isCatch());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals(188463, node1.getSourcePosition());
assertFalse(node1.isSwitch());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isAnd());
assertEquals(54, node1.getType());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isGetElem());
assertFalse(node1.isWith());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.equals((Object)node1));
assertNotNull(iterable0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(iterable0.contains(node1));
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isObjectLit());
assertEquals(2, node0.getCharno());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isComma());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertEquals(55, node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isStringKey());
assertEquals(55, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertEquals(225282, node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isCatch());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isIn());

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertNotNull(jSTypeRegistry0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());

jSTypeRegistry0.createParameters((List<JSType>) null);

[MASTER] 17:58:26.315 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_136_1629223105868/com/google/javascript/rhino/Node_136_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_136_1629223105868/com/google/javascript/rhino/Node_136_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:26.315 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:26.315 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:26.318 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2296
[MASTER] 17:58:26.322 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_136_1629223105868/com/google/javascript/rhino/Node_136_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:25 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_136_tmp__ESTest extends Node_136_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("J.g=");
22:       assertNotNull(node0);
23:       assertEquals(52, Node.LENGTH);
24:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
25:       assertEquals(54, Node.SLASH_V);
26:       assertEquals(57, Node.REFLECTED_OBJECT);
27:       assertEquals(30, Node.VAR_ARGS_NAME);
28:       assertEquals(49, Node.DIRECT_EVAL);
29:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
30:       assertEquals(40, Node.ORIGINALNAME_PROP);
31:       assertEquals(32, Node.INCRDECR_PROP);
32:       assertEquals(51, Node.STATIC_SOURCE_FILE);
33:       assertEquals(46, Node.IS_NAMESPACE);
34:       assertEquals(12, Node.COLUMN_BITS);
35:       assertEquals(50, Node.FREE_CALL);
36:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
37:       assertEquals(1, Node.DECR_FLAG);
38:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
39:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
40:       assertEquals(43, Node.IS_CONSTANT_NAME);
41:       assertEquals(36, Node.QUOTED_PROP);
42:       assertEquals(4095, Node.COLUMN_MASK);
43:       assertEquals(37, Node.OPT_ARG_NAME);
44:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(2, Node.POST_FLAG);
48:       assertEquals(56, Node.CHANGE_TIME);
49:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
50:       assertEquals(47, Node.IS_DISPATCHER);
51:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
52:       assertEquals(29, Node.JSDOC_INFO_PROP);
53:       assertEquals(57, Node.LAST_PROP);
54:       assertEquals(55, Node.INFERRED_FUNCTION);
55:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
56:       assertEquals(15, Node.NO_SIDE_EFFECTS);
57:       assertEquals(39, Node.EMPTY_BLOCK);
58:       assertEquals(53, Node.INPUT_ID);
59:       assertFalse(node0.isComma());
60:       assertFalse(node0.isThis());
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.isInstanceOf());
63:       assertFalse(node0.isObjectLit());
64:       assertFalse(node0.isNot());
65:       assertFalse(node0.isBreak());
66:       assertFalse(node0.isAnd());
67:       assertFalse(node0.isExprResult());
68:       assertEquals((-1), node0.getCharno());
69:       assertFalse(node0.isScript());
70:       assertFalse(node0.isWith());
71:       assertFalse(node0.isCase());
72:       assertFalse(node0.isAssign());
73:       assertFalse(node0.hasChildren());
74:       assertFalse(node0.isHook());
75:       assertFalse(node0.hasOneChild());
76:       assertFalse(node0.isOr());
77:       assertFalse(node0.isReturn());
78:       assertFalse(node0.isLabel());
79:       assertFalse(node0.isNumber());
80:       assertFalse(node0.isTypeOf());
81:       assertFalse(node0.isGetterDef());
82:       assertFalse(node0.isDec());
83:       assertFalse(node0.isGetElem());
84:       assertFalse(node0.isLabelName());
85:       assertFalse(node0.isArrayLit());
86:       assertFalse(node0.isDelProp());
87:       assertFalse(node0.isSwitch());
88:       assertFalse(node0.isAdd());
89:       assertFalse(node0.isNew());
90:       assertFalse(node0.isTrue());
91:       assertFalse(node0.isDo());
92:       assertFalse(node0.isEmpty());
93:       assertFalse(node0.isVar());
94:       assertFalse(node0.isAssignAdd());
95:       assertFalse(node0.isDefaultCase());
96:       assertFalse(node0.isSetterDef());
97:       assertFalse(node0.isCatch());
98:       assertEquals(0, node0.getChildCount());
99:       assertFalse(node0.isStringKey());
100:       assertFalse(node0.isName());
101:       assertFalse(node0.isCall());
102:       assertFalse(node0.isNull());
103:       assertFalse(node0.isParamList());
104:       assertFalse(node0.isBlock());
105:       assertTrue(node0.isString());
106:       assertFalse(node0.isTry());
107:       assertFalse(node0.isVoid());
108:       assertFalse(node0.isDebugger());
109:       assertFalse(node0.isRegExp());
110:       assertFalse(node0.isFor());
111:       assertFalse(node0.isWhile());
112:       assertEquals((-1), node0.getLineno());
113:       assertEquals((-1), node0.getSourcePosition());
114:       assertFalse(node0.isIn());
115:       assertFalse(node0.hasMoreThanOneChild());
116:       assertFalse(node0.isContinue());
117:       assertFalse(node0.isNE());
118:       assertFalse(node0.isIf());
119:       assertFalse(node0.isInc());
120:       assertFalse(node0.isCast());
121:       assertFalse(node0.isFunction());
122:       assertFalse(node0.isFalse());
123:       assertEquals(40, node0.getType());
124:       assertFalse(node0.isThrow());
125:       
126:       boolean boolean0 = node0.isLabel();
127:       assertEquals(52, Node.LENGTH);
128:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
129:       assertEquals(54, Node.SLASH_V);
130:       assertEquals(57, Node.REFLECTED_OBJECT);
131:       assertEquals(30, Node.VAR_ARGS_NAME);
132:       assertEquals(49, Node.DIRECT_EVAL);
133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
134:       assertEquals(40, Node.ORIGINALNAME_PROP);
135:       assertEquals(32, Node.INCRDECR_PROP);
136:       assertEquals(51, Node.STATIC_SOURCE_FILE);
137:       assertEquals(46, Node.IS_NAMESPACE);
138:       assertEquals(12, Node.COLUMN_BITS);
139:       assertEquals(50, Node.FREE_CALL);
140:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
141:       assertEquals(1, Node.DECR_FLAG);
142:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
143:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
144:       assertEquals(43, Node.IS_CONSTANT_NAME);
145:       assertEquals(36, Node.QUOTED_PROP);
146:       assertEquals(4095, Node.COLUMN_MASK);
147:       assertEquals(37, Node.OPT_ARG_NAME);
148:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
149:       assertEquals(48, Node.DIRECTIVES);
150:       assertEquals(8, Node.FLAG_NO_THROWS);
151:       assertEquals(2, Node.POST_FLAG);
152:       assertEquals(56, Node.CHANGE_TIME);
153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
154:       assertEquals(47, Node.IS_DISPATCHER);
155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
156:       assertEquals(29, Node.JSDOC_INFO_PROP);
157:       assertEquals(57, Node.LAST_PROP);
158:       assertEquals(55, Node.INFERRED_FUNCTION);
159:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
160:       assertEquals(15, Node.NO_SIDE_EFFECTS);
161:       assertEquals(39, Node.EMPTY_BLOCK);
162:       assertEquals(53, Node.INPUT_ID);
163:       assertFalse(boolean0);
164:       assertFalse(node0.isComma());
165:       assertFalse(node0.isThis());
166:       assertFalse(node0.isGetProp());
167:       assertFalse(node0.isInstanceOf());
168:       assertFalse(node0.isObjectLit());
169:       assertFalse(node0.isNot());
170:       assertFalse(node0.isBreak());
171:       assertFalse(node0.isAnd());
172:       assertFalse(node0.isExprResult());
173:       assertEquals((-1), node0.getCharno());
174:       assertFalse(node0.isScript());
175:       assertFalse(node0.isWith());
176:       assertFalse(node0.isCase());
177:       assertFalse(node0.isAssign());
178:       assertFalse(node0.hasChildren());
179:       assertFalse(node0.isHook());
180:       assertFalse(node0.hasOneChild());
181:       assertFalse(node0.isOr());
182:       assertFalse(node0.isReturn());
183:       assertFalse(node0.isLabel());
184:       assertFalse(node0.isNumber());
185:       assertFalse(node0.isTypeOf());
186:       assertFalse(node0.isGetterDef());
187:       assertFalse(node0.isDec());
188:       assertFalse(node0.isGetElem());
189:       assertFalse(node0.isLabelName());
190:       assertFalse(node0.isArrayLit());
191:       assertFalse(node0.isDelProp());
192:       assertFalse(node0.isSwitch());
193:       assertFalse(node0.isAdd());
194:       assertFalse(node0.isNew());
195:       assertFalse(node0.isTrue());
196:       assertFalse(node0.isDo());
197:       assertFalse(node0.isEmpty());
198:       assertFalse(node0.isVar());
199:       assertFalse(node0.isAssignAdd());
200:       assertFalse(node0.isDefaultCase());
201:       assertFalse(node0.isSetterDef());
202:       assertFalse(node0.isCatch());
203:       assertEquals(0, node0.getChildCount());
204:       assertFalse(node0.isStringKey());
205:       assertFalse(node0.isName());
206:       assertFalse(node0.isCall());
207:       assertFalse(node0.isNull());
208:       assertFalse(node0.isParamList());
209:       assertFalse(node0.isBlock());
210:       assertTrue(node0.isString());
211:       assertFalse(node0.isTry());
212:       assertFalse(node0.isVoid());
213:       assertFalse(node0.isDebugger());
214:       assertFalse(node0.isRegExp());
215:       assertFalse(node0.isFor());
216:       assertFalse(node0.isWhile());
217:       assertEquals((-1), node0.getLineno());
218:       assertEquals((-1), node0.getSourcePosition());
219:       assertFalse(node0.isIn());
220:       assertFalse(node0.hasMoreThanOneChild());
221:       assertFalse(node0.isContinue());
222:       assertFalse(node0.isNE());
223:       assertFalse(node0.isIf());
224:       assertFalse(node0.isInc());
225:       assertFalse(node0.isCast());
226:       assertFalse(node0.isFunction());
227:       assertFalse(node0.isFalse());
228:       assertEquals(40, node0.getType());
229:       assertFalse(node0.isThrow());
230:       
231:       String string0 = node0.toStringTree();
232:       assertNotNull(string0);
233:       assertEquals(52, Node.LENGTH);
234:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
235:       assertEquals(54, Node.SLASH_V);
236:       assertEquals(57, Node.REFLECTED_OBJECT);
237:       assertEquals(30, Node.VAR_ARGS_NAME);
238:       assertEquals(49, Node.DIRECT_EVAL);
239:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
240:       assertEquals(40, Node.ORIGINALNAME_PROP);
241:       assertEquals(32, Node.INCRDECR_PROP);
242:       assertEquals(51, Node.STATIC_SOURCE_FILE);
243:       assertEquals(46, Node.IS_NAMESPACE);
244:       assertEquals(12, Node.COLUMN_BITS);
245:       assertEquals(50, Node.FREE_CALL);
246:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
247:       assertEquals(1, Node.DECR_FLAG);
248:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
249:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
250:       assertEquals(43, Node.IS_CONSTANT_NAME);
251:       assertEquals(36, Node.QUOTED_PROP);
252:       assertEquals(4095, Node.COLUMN_MASK);
253:       assertEquals(37, Node.OPT_ARG_NAME);
254:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
255:       assertEquals(48, Node.DIRECTIVES);
256:       assertEquals(8, Node.FLAG_NO_THROWS);
257:       assertEquals(2, Node.POST_FLAG);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
260:       assertEquals(47, Node.IS_DISPATCHER);
261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
262:       assertEquals(29, Node.JSDOC_INFO_PROP);
263:       assertEquals(57, Node.LAST_PROP);
264:       assertEquals(55, Node.INFERRED_FUNCTION);
265:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
266:       assertEquals(15, Node.NO_SIDE_EFFECTS);
267:       assertEquals(39, Node.EMPTY_BLOCK);
268:       assertEquals(53, Node.INPUT_ID);
269:       assertEquals("STRING J.g=\n", string0);
270:       assertFalse(node0.isComma());
271:       assertFalse(node0.isThis());
272:       assertFalse(node0.isGetProp());
273:       assertFalse(node0.isInstanceOf());
274:       assertFalse(node0.isObjectLit());
275:       assertFalse(node0.isNot());
276:       assertFalse(node0.isBreak());
277:       assertFalse(node0.isAnd());
278:       assertFalse(node0.isExprResult());
279:       assertEquals((-1), node0.getCharno());
280:       assertFalse(node0.isScript());
281:       assertFalse(node0.isWith());
282:       assertFalse(node0.isCase());
283:       assertFalse(node0.isAssign());
284:       assertFalse(node0.hasChildren());
285:       assertFalse(node0.isHook());
286:       assertFalse(node0.hasOneChild());
287:       assertFalse(node0.isOr());
288:       assertFalse(node0.isReturn());
289:       assertFalse(node0.isLabel());
290:       assertFalse(node0.isNumber());
291:       assertFalse(node0.isTypeOf());
292:       assertFalse(node0.isGetterDef());
293:       assertFalse(node0.isDec());
294:       assertFalse(node0.isGetElem());
295:       assertFalse(node0.isLabelName());
296:       assertFalse(node0.isArrayLit());
297:       assertFalse(node0.isDelProp());
298:       assertFalse(node0.isSwitch());
299:       assertFalse(node0.isAdd());
300:       assertFalse(node0.isNew());
301:       assertFalse(node0.isTrue());
302:       assertFalse(node0.isDo());
303:       assertFalse(node0.isEmpty());
304:       assertFalse(node0.isVar());
305:       assertFalse(node0.isAssignAdd());
306:       assertFalse(node0.isDefaultCase());
307:       assertFalse(node0.isSetterDef());
308:       assertFalse(node0.isCatch());
309:       assertEquals(0, node0.getChildCount());
310:       assertFalse(node0.isStringKey());
311:       assertFalse(node0.isName());
312:       assertFalse(node0.isCall());
313:       assertFalse(node0.isNull());
314:       assertFalse(node0.isParamList());
315:       assertFalse(node0.isBlock());
316:       assertTrue(node0.isString());
317:       assertFalse(node0.isTry());
318:       assertFalse(node0.isVoid());
319:       assertFalse(node0.isDebugger());
320:       assertFalse(node0.isRegExp());
321:       assertFalse(node0.isFor());
322:       assertFalse(node0.isWhile());
323:       assertEquals((-1), node0.getLineno());
324:       assertEquals((-1), node0.getSourcePosition());
325:       assertFalse(node0.isIn());
326:       assertFalse(node0.hasMoreThanOneChild());
327:       assertFalse(node0.isContinue());
328:       assertFalse(node0.isNE());
329:       assertFalse(node0.isIf());
330:       assertFalse(node0.isInc());
331:       assertFalse(node0.isCast());
332:       assertFalse(node0.isFunction());
333:       assertFalse(node0.isFalse());
334:       assertEquals(40, node0.getType());
335:       assertFalse(node0.isThrow());
336:       
337:       int int0 = node0.getIntProp(375);
338:       assertEquals(52, Node.LENGTH);
339:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
340:       assertEquals(54, Node.SLASH_V);
341:       assertEquals(57, Node.REFLECTED_OBJECT);
342:       assertEquals(30, Node.VAR_ARGS_NAME);
343:       assertEquals(49, Node.DIRECT_EVAL);
344:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
345:       assertEquals(40, Node.ORIGINALNAME_PROP);
346:       assertEquals(32, Node.INCRDECR_PROP);
347:       assertEquals(51, Node.STATIC_SOURCE_FILE);
348:       assertEquals(46, Node.IS_NAMESPACE);
349:       assertEquals(12, Node.COLUMN_BITS);
350:       assertEquals(50, Node.FREE_CALL);
351:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
352:       assertEquals(1, Node.DECR_FLAG);
353:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
354:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
355:       assertEquals(43, Node.IS_CONSTANT_NAME);
356:       assertEquals(36, Node.QUOTED_PROP);
357:       assertEquals(4095, Node.COLUMN_MASK);
358:       assertEquals(37, Node.OPT_ARG_NAME);
359:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
360:       assertEquals(48, Node.DIRECTIVES);
361:       assertEquals(8, Node.FLAG_NO_THROWS);
362:       assertEquals(2, Node.POST_FLAG);
363:       assertEquals(56, Node.CHANGE_TIME);
364:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
365:       assertEquals(47, Node.IS_DISPATCHER);
366:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
367:       assertEquals(29, Node.JSDOC_INFO_PROP);
368:       assertEquals(57, Node.LAST_PROP);
369:       assertEquals(55, Node.INFERRED_FUNCTION);
370:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
371:       assertEquals(15, Node.NO_SIDE_EFFECTS);
372:       assertEquals(39, Node.EMPTY_BLOCK);
373:       assertEquals(53, Node.INPUT_ID);
374:       assertEquals(0, int0);
375:       assertFalse(node0.isComma());
376:       assertFalse(node0.isThis());
377:       assertFalse(node0.isGetProp());
378:       assertFalse(node0.isInstanceOf());
379:       assertFalse(node0.isObjectLit());
380:       assertFalse(node0.isNot());
381:       assertFalse(node0.isBreak());
382:       assertFalse(node0.isAnd());
383:       assertFalse(node0.isExprResult());
384:       assertEquals((-1), node0.getCharno());
385:       assertFalse(node0.isScript());
386:       assertFalse(node0.isWith());
387:       assertFalse(node0.isCase());
388:       assertFalse(node0.isAssign());
389:       assertFalse(node0.hasChildren());
390:       assertFalse(node0.isHook());
391:       assertFalse(node0.hasOneChild());
392:       assertFalse(node0.isOr());
393:       assertFalse(node0.isReturn());
394:       assertFalse(node0.isLabel());
395:       assertFalse(node0.isNumber());
396:       assertFalse(node0.isTypeOf());
397:       assertFalse(node0.isGetterDef());
398:       assertFalse(node0.isDec());
399:       assertFalse(node0.isGetElem());
400:       assertFalse(node0.isLabelName());
401:       assertFalse(node0.isArrayLit());
402:       assertFalse(node0.isDelProp());
403:       assertFalse(node0.isSwitch());
404:       assertFalse(node0.isAdd());
405:       assertFalse(node0.isNew());
406:       assertFalse(node0.isTrue());
407:       assertFalse(node0.isDo());
408:       assertFalse(node0.isEmpty());
409:       assertFalse(node0.isVar());
410:       assertFalse(node0.isAssignAdd());
411:       assertFalse(node0.isDefaultCase());
412:       assertFalse(node0.isSetterDef());
413:       assertFalse(node0.isCatch());
414:       assertEquals(0, node0.getChildCount());
415:       assertFalse(node0.isStringKey());
416:       assertFalse(node0.isName());
417:       assertFalse(node0.isCall());
418:       assertFalse(node0.isNull());
419:       assertFalse(node0.isParamList());
420:       assertFalse(node0.isBlock());
421:       assertTrue(node0.isString());
422:       assertFalse(node0.isTry());
423:       assertFalse(node0.isVoid());
424:       assertFalse(node0.isDebugger());
425:       assertFalse(node0.isRegExp());
426:       assertFalse(node0.isFor());
427:       assertFalse(node0.isWhile());
428:       assertEquals((-1), node0.getLineno());
429:       assertEquals((-1), node0.getSourcePosition());
430:       assertFalse(node0.isIn());
431:       assertFalse(node0.hasMoreThanOneChild());
432:       assertFalse(node0.isContinue());
433:       assertFalse(node0.isNE());
434:       assertFalse(node0.isIf());
435:       assertFalse(node0.isInc());
436:       assertFalse(node0.isCast());
437:       assertFalse(node0.isFunction());
438:       assertFalse(node0.isFalse());
439:       assertEquals(40, node0.getType());
440:       assertFalse(node0.isThrow());
441:       
442:       boolean boolean1 = node0.isAssign();
443:       assertTrue(boolean1 == boolean0);
444:       assertEquals(52, Node.LENGTH);
445:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
446:       assertEquals(54, Node.SLASH_V);
447:       assertEquals(57, Node.REFLECTED_OBJECT);
448:       assertEquals(30, Node.VAR_ARGS_NAME);
449:       assertEquals(49, Node.DIRECT_EVAL);
450:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
451:       assertEquals(40, Node.ORIGINALNAME_PROP);
452:       assertEquals(32, Node.INCRDECR_PROP);
453:       assertEquals(51, Node.STATIC_SOURCE_FILE);
454:       assertEquals(46, Node.IS_NAMESPACE);
455:       assertEquals(12, Node.COLUMN_BITS);
456:       assertEquals(50, Node.FREE_CALL);
457:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
458:       assertEquals(1, Node.DECR_FLAG);
459:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
460:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
461:       assertEquals(43, Node.IS_CONSTANT_NAME);
462:       assertEquals(36, Node.QUOTED_PROP);
463:       assertEquals(4095, Node.COLUMN_MASK);
464:       assertEquals(37, Node.OPT_ARG_NAME);
465:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
466:       assertEquals(48, Node.DIRECTIVES);
467:       assertEquals(8, Node.FLAG_NO_THROWS);
468:       assertEquals(2, Node.POST_FLAG);
469:       assertEquals(56, Node.CHANGE_TIME);
470:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
471:       assertEquals(47, Node.IS_DISPATCHER);
472:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
473:       assertEquals(29, Node.JSDOC_INFO_PROP);
474:       assertEquals(57, Node.LAST_PROP);
475:       assertEquals(55, Node.INFERRED_FUNCTION);
476:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
477:       assertEquals(15, Node.NO_SIDE_EFFECTS);
478:       assertEquals(39, Node.EMPTY_BLOCK);
479:       assertEquals(53, Node.INPUT_ID);
480:       assertFalse(boolean1);
481:       assertFalse(node0.isComma());
482:       assertFalse(node0.isThis());
483:       assertFalse(node0.isGetProp());
484:       assertFalse(node0.isInstanceOf());
485:       assertFalse(node0.isObjectLit());
486:       assertFalse(node0.isNot());
487:       assertFalse(node0.isBreak());
488:       assertFalse(node0.isAnd());
489:       assertFalse(node0.isExprResult());
490:       assertEquals((-1), node0.getCharno());
491:       assertFalse(node0.isScript());
492:       assertFalse(node0.isWith());
493:       assertFalse(node0.isCase());
494:       assertFalse(node0.isAssign());
495:       assertFalse(node0.hasChildren());
496:       assertFalse(node0.isHook());
497:       assertFalse(node0.hasOneChild());
498:       assertFalse(node0.isOr());
499:       assertFalse(node0.isReturn());
500:       assertFalse(node0.isLabel());
501:       assertFalse(node0.isNumber());
502:       assertFalse(node0.isTypeOf());
503:       assertFalse(node0.isGetterDef());
504:       assertFalse(node0.isDec());
505:       assertFalse(node0.isGetElem());
506:       assertFalse(node0.isLabelName());
507:       assertFalse(node0.isArrayLit());
508:       assertFalse(node0.isDelProp());
509:       assertFalse(node0.isSwitch());
510:       assertFalse(node0.isAdd());
511:       assertFalse(node0.isNew());
512:       assertFalse(node0.isTrue());
513:       assertFalse(node0.isDo());
514:       assertFalse(node0.isEmpty());
515:       assertFalse(node0.isVar());
516:       assertFalse(node0.isAssignAdd());
517:       assertFalse(node0.isDefaultCase());
518:       assertFalse(node0.isSetterDef());
519:       assertFalse(node0.isCatch());
520:       assertEquals(0, node0.getChildCount());
521:       assertFalse(node0.isStringKey());
522:       assertFalse(node0.isName());
523:       assertFalse(node0.isCall());
524:       assertFalse(node0.isNull());
525:       assertFalse(node0.isParamList());
526:       assertFalse(node0.isBlock());
527:       assertTrue(node0.isString());
528:       assertFalse(node0.isTry());
529:       assertFalse(node0.isVoid());
530:       assertFalse(node0.isDebugger());
531:       assertFalse(node0.isRegExp());
532:       assertFalse(node0.isFor());
533:       assertFalse(node0.isWhile());
534:       assertEquals((-1), node0.getLineno());
535:       assertEquals((-1), node0.getSourcePosition());
536:       assertFalse(node0.isIn());
537:       assertFalse(node0.hasMoreThanOneChild());
538:       assertFalse(node0.isContinue());
539:       assertFalse(node0.isNE());
540:       assertFalse(node0.isIf());
541:       assertFalse(node0.isInc());
542:       assertFalse(node0.isCast());
543:       assertFalse(node0.isFunction());
544:       assertFalse(node0.isFalse());
545:       assertEquals(40, node0.getType());
546:       assertFalse(node0.isThrow());
547:       
548:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
549:       assertNotNull(node_SideEffectFlags0);
550:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
551:       assertEquals(0, node_SideEffectFlags0.valueOf());
552:       
553:       Node node1 = Node.newNumber((double) 4095, 8, 20);
554:       assertFalse(node1.equals((Object)node0));
555:       assertNotNull(node1);
556:       assertEquals(43, Node.IS_CONSTANT_NAME);
557:       assertEquals(36, Node.QUOTED_PROP);
558:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
559:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
560:       assertEquals(4095, Node.COLUMN_MASK);
561:       assertEquals(48, Node.DIRECTIVES);
562:       assertEquals(56, Node.CHANGE_TIME);
563:       assertEquals(2, Node.POST_FLAG);
564:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
565:       assertEquals(8, Node.FLAG_NO_THROWS);
566:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
567:       assertEquals(47, Node.IS_DISPATCHER);
568:       assertEquals(55, Node.INFERRED_FUNCTION);
569:       assertEquals(52, Node.LENGTH);
570:       assertEquals(53, Node.INPUT_ID);
571:       assertEquals(29, Node.JSDOC_INFO_PROP);
572:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
573:       assertEquals(39, Node.EMPTY_BLOCK);
574:       assertEquals(15, Node.NO_SIDE_EFFECTS);
575:       assertEquals(57, Node.LAST_PROP);
576:       assertEquals(30, Node.VAR_ARGS_NAME);
577:       assertEquals(54, Node.SLASH_V);
578:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
579:       assertEquals(57, Node.REFLECTED_OBJECT);
580:       assertEquals(46, Node.IS_NAMESPACE);
581:       assertEquals(49, Node.DIRECT_EVAL);
582:       assertEquals(40, Node.ORIGINALNAME_PROP);
583:       assertEquals(37, Node.OPT_ARG_NAME);
584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
585:       assertEquals(50, Node.FREE_CALL);
586:       assertEquals(51, Node.STATIC_SOURCE_FILE);
587:       assertEquals(12, Node.COLUMN_BITS);
588:       assertEquals(32, Node.INCRDECR_PROP);
589:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
590:       assertEquals(1, Node.DECR_FLAG);
591:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
592:       assertFalse(node1.isGetterDef());
593:       assertFalse(node1.isIf());
594:       assertFalse(node1.isDelProp());
595:       assertFalse(node1.isEmpty());
596:       assertFalse(node1.isIn());
597:       assertFalse(node1.isArrayLit());
598:       assertFalse(node1.isVoid());
599:       assertFalse(node1.isTrue());
600:       assertFalse(node1.isNE());
601:       assertFalse(node1.isDefaultCase());
602:       assertFalse(node1.isInc());
603:       assertFalse(node1.isFunction());
604:       assertEquals(0, node1.getChildCount());
605:       assertFalse(node1.isThrow());
606:       assertEquals(20, node1.getCharno());
607:       assertFalse(node1.isSetterDef());
608:       assertFalse(node1.isSwitch());
609:       assertFalse(node1.isStringKey());
610:       assertFalse(node1.isParamList());
611:       assertFalse(node1.isRegExp());
612:       assertEquals(39, node1.getType());
613:       assertFalse(node1.isCase());
614:       assertFalse(node1.hasMoreThanOneChild());
615:       assertFalse(node1.isCatch());
616:       assertFalse(node1.isWith());
617:       assertFalse(node1.isScript());
618:       assertFalse(node1.isInstanceOf());
619:       assertFalse(node1.isHook());
620:       assertFalse(node1.isTry());
621:       assertFalse(node1.hasOneChild());
622:       assertFalse(node1.isThis());
623:       assertFalse(node1.isBlock());
624:       assertFalse(node1.isFor());
625:       assertFalse(node1.hasChildren());
626:       assertFalse(node1.isTypeOf());
627:       assertFalse(node1.isLabelName());
628:       assertFalse(node1.isAssign());
629:       assertFalse(node1.isDec());
630:       assertFalse(node1.isGetElem());
631:       assertFalse(node1.isCast());
632:       assertFalse(node1.isOr());
633:       assertEquals(32788, node1.getSourcePosition());
634:       assertFalse(node1.isDo());
635:       assertFalse(node1.isContinue());
636:       assertFalse(node1.isAdd());
637:       assertFalse(node1.isLabel());
638:       assertFalse(node1.isNew());
639:       assertFalse(node1.isVar());
640:       assertFalse(node1.isAssignAdd());
641:       assertFalse(node1.isBreak());
642:       assertFalse(node1.isNull());
643:       assertEquals(8, node1.getLineno());
644:       assertFalse(node1.isComma());
645:       assertFalse(node1.isGetProp());
646:       assertFalse(node1.isFalse());
647:       assertFalse(node1.isCall());
648:       assertFalse(node1.isName());
649:       assertFalse(node1.isAnd());
650:       assertFalse(node1.isNot());
651:       assertFalse(node1.isDebugger());
652:       assertFalse(node1.isExprResult());
653:       assertFalse(node1.isObjectLit());
654:       assertFalse(node1.isString());
655:       assertFalse(node1.isReturn());
656:       assertTrue(node1.isNumber());
657:       assertFalse(node1.isWhile());
658:       
659:       double double0 = node1.getDouble();
660:       assertFalse(node1.equals((Object)node0));
661:       assertEquals(43, Node.IS_CONSTANT_NAME);
662:       assertEquals(36, Node.QUOTED_PROP);
663:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
664:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
665:       assertEquals(4095, Node.COLUMN_MASK);
666:       assertEquals(48, Node.DIRECTIVES);
667:       assertEquals(56, Node.CHANGE_TIME);
668:       assertEquals(2, Node.POST_FLAG);
669:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
670:       assertEquals(8, Node.FLAG_NO_THROWS);
671:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
672:       assertEquals(47, Node.IS_DISPATCHER);
673:       assertEquals(55, Node.INFERRED_FUNCTION);
674:       assertEquals(52, Node.LENGTH);
675:       assertEquals(53, Node.INPUT_ID);
676:       assertEquals(29, Node.JSDOC_INFO_PROP);
677:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
678:       assertEquals(39, Node.EMPTY_BLOCK);
679:       assertEquals(15, Node.NO_SIDE_EFFECTS);
680:       assertEquals(57, Node.LAST_PROP);
681:       assertEquals(30, Node.VAR_ARGS_NAME);
682:       assertEquals(54, Node.SLASH_V);
683:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
684:       assertEquals(57, Node.REFLECTED_OBJECT);
685:       assertEquals(46, Node.IS_NAMESPACE);
686:       assertEquals(49, Node.DIRECT_EVAL);
687:       assertEquals(40, Node.ORIGINALNAME_PROP);
688:       assertEquals(37, Node.OPT_ARG_NAME);
689:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
690:       assertEquals(50, Node.FREE_CALL);
691:       assertEquals(51, Node.STATIC_SOURCE_FILE);
692:       assertEquals(12, Node.COLUMN_BITS);
693:       assertEquals(32, Node.INCRDECR_PROP);
694:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
695:       assertEquals(1, Node.DECR_FLAG);
696:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
697:       assertEquals(4095.0, double0, 0.01);
698:       assertFalse(node1.isGetterDef());
699:       assertFalse(node1.isIf());
700:       assertFalse(node1.isDelProp());
701:       assertFalse(node1.isEmpty());
702:       assertFalse(node1.isIn());
703:       assertFalse(node1.isArrayLit());
704:       assertFalse(node1.isVoid());
705:       assertFalse(node1.isTrue());
706:       assertFalse(node1.isNE());
707:       assertFalse(node1.isDefaultCase());
708:       assertFalse(node1.isInc());
709:       assertFalse(node1.isFunction());
710:       assertEquals(0, node1.getChildCount());
711:       assertFalse(node1.isThrow());
712:       assertEquals(20, node1.getCharno());
713:       assertFalse(node1.isSetterDef());
714:       assertFalse(node1.isSwitch());
715:       assertFalse(node1.isStringKey());
716:       assertFalse(node1.isParamList());
717:       assertFalse(node1.isRegExp());
718:       assertEquals(39, node1.getType());
719:       assertFalse(node1.isCase());
720:       assertFalse(node1.hasMoreThanOneChild());
721:       assertFalse(node1.isCatch());
722:       assertFalse(node1.isWith());
723:       assertFalse(node1.isScript());
724:       assertFalse(node1.isInstanceOf());
725:       assertFalse(node1.isHook());
726:       assertFalse(node1.isTry());
727:       assertFalse(node1.hasOneChild());
728:       assertFalse(node1.isThis());
729:       assertFalse(node1.isBlock());
730:       assertFalse(node1.isFor());
731:       assertFalse(node1.hasChildren());
732:       assertFalse(node1.isTypeOf());
733:       assertFalse(node1.isLabelName());
734:       assertFalse(node1.isAssign());
735:       assertFalse(node1.isDec());
736:       assertFalse(node1.isGetElem());
737:       assertFalse(node1.isCast());
738:       assertFalse(node1.isOr());
739:       assertEquals(32788, node1.getSourcePosition());
740:       assertFalse(node1.isDo());
741:       assertFalse(node1.isContinue());
742:       assertFalse(node1.isAdd());
743:       assertFalse(node1.isLabel());
744:       assertFalse(node1.isNew());
745:       assertFalse(node1.isVar());
746:       assertFalse(node1.isAssignAdd());
747:       assertFalse(node1.isBreak());
748:       assertFalse(node1.isNull());
749:       assertEquals(8, node1.getLineno());
750:       assertFalse(node1.isComma());
751:       assertFalse(node1.isGetProp());
752:       assertFalse(node1.isFalse());
753:       assertFalse(node1.isCall());
754:       assertFalse(node1.isName());
755:       assertFalse(node1.isAnd());
756:       assertFalse(node1.isNot());
757:       assertFalse(node1.isDebugger());
758:       assertFalse(node1.isExprResult());
759:       assertFalse(node1.isObjectLit());
760:       assertFalse(node1.isString());
761:       assertFalse(node1.isReturn());
762:       assertTrue(node1.isNumber());
763:       assertFalse(node1.isWhile());
764:       
765:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
766:       assertFalse(node0.equals((Object)node1));
767:       assertNull(staticSourceFile0);
768:       assertEquals(52, Node.LENGTH);
769:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
770:       assertEquals(54, Node.SLASH_V);
771:       assertEquals(57, Node.REFLECTED_OBJECT);
772:       assertEquals(30, Node.VAR_ARGS_NAME);
773:       assertEquals(49, Node.DIRECT_EVAL);
774:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
775:       assertEquals(40, Node.ORIGINALNAME_PROP);
776:       assertEquals(32, Node.INCRDECR_PROP);
777:       assertEquals(51, Node.STATIC_SOURCE_FILE);
778:       assertEquals(46, Node.IS_NAMESPACE);
779:       assertEquals(12, Node.COLUMN_BITS);
780:       assertEquals(50, Node.FREE_CALL);
781:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
782:       assertEquals(1, Node.DECR_FLAG);
783:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
784:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
785:       assertEquals(43, Node.IS_CONSTANT_NAME);
786:       assertEquals(36, Node.QUOTED_PROP);
787:       assertEquals(4095, Node.COLUMN_MASK);
788:       assertEquals(37, Node.OPT_ARG_NAME);
789:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
790:       assertEquals(48, Node.DIRECTIVES);
791:       assertEquals(8, Node.FLAG_NO_THROWS);
792:       assertEquals(2, Node.POST_FLAG);
793:       assertEquals(56, Node.CHANGE_TIME);
794:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
795:       assertEquals(47, Node.IS_DISPATCHER);
796:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
797:       assertEquals(29, Node.JSDOC_INFO_PROP);
798:       assertEquals(57, Node.LAST_PROP);
799:       assertEquals(55, Node.INFERRED_FUNCTION);
800:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
801:       assertEquals(15, Node.NO_SIDE_EFFECTS);
802:       assertEquals(39, Node.EMPTY_BLOCK);
803:       assertEquals(53, Node.INPUT_ID);
804:       assertFalse(node0.isComma());
805:       assertFalse(node0.isThis());
806:       assertFalse(node0.isGetProp());
807:       assertFalse(node0.isInstanceOf());
808:       assertFalse(node0.isObjectLit());
809:       assertFalse(node0.isNot());
810:       assertFalse(node0.isBreak());
811:       assertFalse(node0.isAnd());
812:       assertFalse(node0.isExprResult());
813:       assertEquals((-1), node0.getCharno());
814:       assertFalse(node0.isScript());
815:       assertFalse(node0.isWith());
816:       assertFalse(node0.isCase());
817:       assertFalse(node0.isAssign());
818:       assertFalse(node0.hasChildren());
819:       assertFalse(node0.isHook());
820:       assertFalse(node0.hasOneChild());
821:       assertFalse(node0.isOr());
822:       assertFalse(node0.isReturn());
823:       assertFalse(node0.isLabel());
824:       assertFalse(node0.isNumber());
825:       assertFalse(node0.isTypeOf());
826:       assertFalse(node0.isGetterDef());
827:       assertFalse(node0.isDec());
828:       assertFalse(node0.isGetElem());
829:       assertFalse(node0.isLabelName());
830:       assertFalse(node0.isArrayLit());
831:       assertFalse(node0.isDelProp());
832:       assertFalse(node0.isSwitch());
833:       assertFalse(node0.isAdd());
834:       assertFalse(node0.isNew());
835:       assertFalse(node0.isTrue());
836:       assertFalse(node0.isDo());
837:       assertFalse(node0.isEmpty());
838:       assertFalse(node0.isVar());
839:       assertFalse(node0.isAssignAdd());
840:       assertFalse(node0.isDefaultCase());
841:       assertFalse(node0.isSetterDef());
842:       assertFalse(node0.isCatch());
843:       assertEquals(0, node0.getChildCount());
844:       assertFalse(node0.isStringKey());
845:       assertFalse(node0.isName());
846:       assertFalse(node0.isCall());
847:       assertFalse(node0.isNull());
848:       assertFalse(node0.isParamList());
849:       assertFalse(node0.isBlock());
850:       assertTrue(node0.isString());
851:       assertFalse(node0.isTry());
852:       assertFalse(node0.isVoid());
853:       assertFalse(node0.isDebugger());
854:       assertFalse(node0.isRegExp());
855:       assertFalse(node0.isFor());
856:       assertFalse(node0.isWhile());
857:       assertEquals((-1), node0.getLineno());
858:       assertEquals((-1), node0.getSourcePosition());
859:       assertFalse(node0.isIn());
860:       assertFalse(node0.hasMoreThanOneChild());
861:       assertFalse(node0.isContinue());
862:       assertFalse(node0.isNE());
863:       assertFalse(node0.isIf());
864:       assertFalse(node0.isInc());
865:       assertFalse(node0.isCast());
866:       assertFalse(node0.isFunction());
867:       assertFalse(node0.isFalse());
868:       assertEquals(40, node0.getType());
869:       assertFalse(node0.isThrow());
870:       
871:       boolean boolean2 = node1.isUnscopedQualifiedName();
872:       assertFalse(node1.equals((Object)node0));
873:       assertTrue(boolean2 == boolean1);
874:       assertTrue(boolean2 == boolean0);
875:       assertEquals(43, Node.IS_CONSTANT_NAME);
876:       assertEquals(36, Node.QUOTED_PROP);
877:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
878:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
879:       assertEquals(4095, Node.COLUMN_MASK);
880:       assertEquals(48, Node.DIRECTIVES);
881:       assertEquals(56, Node.CHANGE_TIME);
882:       assertEquals(2, Node.POST_FLAG);
883:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
884:       assertEquals(8, Node.FLAG_NO_THROWS);
885:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
886:       assertEquals(47, Node.IS_DISPATCHER);
887:       assertEquals(55, Node.INFERRED_FUNCTION);
888:       assertEquals(52, Node.LENGTH);
889:       assertEquals(53, Node.INPUT_ID);
890:       assertEquals(29, Node.JSDOC_INFO_PROP);
891:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
892:       assertEquals(39, Node.EMPTY_BLOCK);
893:       assertEquals(15, Node.NO_SIDE_EFFECTS);
894:       assertEquals(57, Node.LAST_PROP);
895:       assertEquals(30, Node.VAR_ARGS_NAME);
896:       assertEquals(54, Node.SLASH_V);
897:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
898:       assertEquals(57, Node.REFLECTED_OBJECT);
899:       assertEquals(46, Node.IS_NAMESPACE);
900:       assertEquals(49, Node.DIRECT_EVAL);
901:       assertEquals(40, Node.ORIGINALNAME_PROP);
902:       assertEquals(37, Node.OPT_ARG_NAME);
903:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
904:       assertEquals(50, Node.FREE_CALL);
905:       assertEquals(51, Node.STATIC_SOURCE_FILE);
906:       assertEquals(12, Node.COLUMN_BITS);
907:       assertEquals(32, Node.INCRDECR_PROP);
908:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
909:       assertEquals(1, Node.DECR_FLAG);
910:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
911:       assertFalse(boolean2);
912:       assertFalse(node1.isGetterDef());
913:       assertFalse(node1.isIf());
914:       assertFalse(node1.isDelProp());
915:       assertFalse(node1.isEmpty());
916:       assertFalse(node1.isIn());
917:       assertFalse(node1.isArrayLit());
918:       assertFalse(node1.isVoid());
919:       assertFalse(node1.isTrue());
920:       assertFalse(node1.isNE());
921:       assertFalse(node1.isDefaultCase());
922:       assertFalse(node1.isInc());
923:       assertFalse(node1.isFunction());
924:       assertEquals(0, node1.getChildCount());
925:       assertFalse(node1.isThrow());
926:       assertEquals(20, node1.getCharno());
927:       assertFalse(node1.isSetterDef());
928:       assertFalse(node1.isSwitch());
929:       assertFalse(node1.isStringKey());
930:       assertFalse(node1.isParamList());
931:       assertFalse(node1.isRegExp());
932:       assertEquals(39, node1.getType());
933:       assertFalse(node1.isCase());
934:       assertFalse(node1.hasMoreThanOneChild());
935:       assertFalse(node1.isCatch());
936:       assertFalse(node1.isWith());
937:       assertFalse(node1.isScript());
938:       assertFalse(node1.isInstanceOf());
939:       assertFalse(node1.isHook());
940:       assertFalse(node1.isTry());
941:       assertFalse(node1.hasOneChild());
942:       assertFalse(node1.isThis());
943:       assertFalse(node1.isBlock());
944:       assertFalse(node1.isFor());
945:       assertFalse(node1.hasChildren());
946:       assertFalse(node1.isTypeOf());
947:       assertFalse(node1.isLabelName());
948:       assertFalse(node1.isAssign());
949:       assertFalse(node1.isDec());
950:       assertFalse(node1.isGetElem());
951:       assertFalse(node1.isCast());
952:       assertFalse(node1.isOr());
953:       assertEquals(32788, node1.getSourcePosition());
954:       assertFalse(node1.isDo());
955:       assertFalse(node1.isContinue());
956:       assertFalse(node1.isAdd());
957:       assertFalse(node1.isLabel());
958:       assertFalse(node1.isNew());
959:       assertFalse(node1.isVar());
960:       assertFalse(node1.isAssignAdd());
961:       assertFalse(node1.isBreak());
962:       assertFalse(node1.isNull());
963:       assertEquals(8, node1.getLineno());
964:       assertFalse(node1.isComma());
965:       assertFalse(node1.isGetProp());
966:       assertFalse(node1.isFalse());
967:       assertFalse(node1.isCall());
968:       assertFalse(node1.isName());
969:       assertFalse(node1.isAnd());
970:       assertFalse(node1.isNot());
971:       assertFalse(node1.isDebugger());
972:       assertFalse(node1.isExprResult());
973:       assertFalse(node1.isObjectLit());
974:       assertFalse(node1.isString());
975:       assertFalse(node1.isReturn());
976:       assertTrue(node1.isNumber());
977:       assertFalse(node1.isWhile());
978:       
979:       Iterable<Node> iterable0 = node1.siblings();
980:       assertFalse(node1.equals((Object)node0));
981:       assertNotNull(iterable0);
982:       assertEquals(43, Node.IS_CONSTANT_NAME);
983:       assertEquals(36, Node.QUOTED_PROP);
984:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
985:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
986:       assertEquals(4095, Node.COLUMN_MASK);
987:       assertEquals(48, Node.DIRECTIVES);
988:       assertEquals(56, Node.CHANGE_TIME);
989:       assertEquals(2, Node.POST_FLAG);
990:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
991:       assertEquals(8, Node.FLAG_NO_THROWS);
992:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
993:       assertEquals(47, Node.IS_DISPATCHER);
994:       assertEquals(55, Node.INFERRED_FUNCTION);
995:       assertEquals(52, Node.LENGTH);
996:       assertEquals(53, Node.INPUT_ID);
997:       assertEquals(29, Node.JSDOC_INFO_PROP);
998:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
999:       assertEquals(39, Node.EMPTY_BLOCK);
1000:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1001:       assertEquals(57, Node.LAST_PROP);
1002:       assertEquals(30, Node.VAR_ARGS_NAME);
1003:       assertEquals(54, Node.SLASH_V);
1004:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1005:       assertEquals(57, Node.REFLECTED_OBJECT);
1006:       assertEquals(46, Node.IS_NAMESPACE);
1007:       assertEquals(49, Node.DIRECT_EVAL);
1008:       assertEquals(40, Node.ORIGINALNAME_PROP);
1009:       assertEquals(37, Node.OPT_ARG_NAME);
1010:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1011:       assertEquals(50, Node.FREE_CALL);
1012:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1013:       assertEquals(12, Node.COLUMN_BITS);
1014:       assertEquals(32, Node.INCRDECR_PROP);
1015:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1016:       assertEquals(1, Node.DECR_FLAG);
1017:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1018:       assertFalse(node1.isGetterDef());
1019:       assertFalse(node1.isIf());
1020:       assertFalse(node1.isDelProp());
1021:       assertFalse(node1.isEmpty());
1022:       assertFalse(node1.isIn());
1023:       assertFalse(node1.isArrayLit());
1024:       assertFalse(node1.isVoid());
1025:       assertFalse(node1.isTrue());
1026:       assertFalse(node1.isNE());
1027:       assertFalse(node1.isDefaultCase());
1028:       assertFalse(node1.isInc());
1029:       assertFalse(node1.isFunction());
1030:       assertEquals(0, node1.getChildCount());
1031:       assertFalse(node1.isThrow());
1032:       assertEquals(20, node1.getCharno());
1033:       assertFalse(node1.isSetterDef());
1034:       assertFalse(node1.isSwitch());
1035:       assertFalse(node1.isStringKey());
1036:       assertFalse(node1.isParamList());
1037:       assertFalse(node1.isRegExp());
1038:       assertEquals(39, node1.getType());
1039:       assertFalse(node1.isCase());
1040:       assertFalse(node1.hasMoreThanOneChild());
1041:       assertFalse(node1.isCatch());
1042:       assertFalse(node1.isWith());
1043:       assertFalse(node1.isScript());
1044:       assertFalse(node1.isInstanceOf());
1045:       assertFalse(node1.isHook());
1046:       assertFalse(node1.isTry());
1047:       assertFalse(node1.hasOneChild());
1048:       assertFalse(node1.isThis());
1049:       assertFalse(node1.isBlock());
1050:       assertFalse(node1.isFor());
1051:       assertFalse(node1.hasChildren());
1052:       assertFalse(node1.isTypeOf());
1053:       assertFalse(node1.isLabelName());
1054:       assertFalse(node1.isAssign());
1055:       assertFalse(node1.isDec());
1056:       assertFalse(node1.isGetElem());
1057:       assertFalse(node1.isCast());
1058:       assertFalse(node1.isOr());
1059:       assertEquals(32788, node1.getSourcePosition());
1060:       assertFalse(node1.isDo());
1061:       assertFalse(node1.isContinue());
1062:       assertFalse(node1.isAdd());
1063:       assertFalse(node1.isLabel());
1064:       assertFalse(node1.isNew());
1065:       assertFalse(node1.isVar());
1066:       assertFalse(node1.isAssignAdd());
1067:       assertFalse(node1.isBreak());
1068:       assertFalse(node1.isNull());
1069:       assertEquals(8, node1.getLineno());
1070:       assertFalse(node1.isComma());
1071:       assertFalse(node1.isGetProp());
1072:       assertFalse(node1.isFalse());
1073:       assertFalse(node1.isCall());
1074:       assertFalse(node1.isName());
1075:       assertFalse(node1.isAnd());
1076:       assertFalse(node1.isNot());
1077:       assertFalse(node1.isDebugger());
1078:       assertFalse(node1.isExprResult());
1079:       assertFalse(node1.isObjectLit());
1080:       assertFalse(node1.isString());
1081:       assertFalse(node1.isReturn());
1082:       assertTrue(node1.isNumber());
1083:       assertFalse(node1.isWhile());
1084:       
1085:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
1086:       assertFalse(node0.equals((Object)node1));
1087:       assertFalse(node1.equals((Object)node0));
1088:       assertNotNull(node_NodeMismatch0);
1089:       assertEquals(52, Node.LENGTH);
1090:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1091:       assertEquals(54, Node.SLASH_V);
1092:       assertEquals(57, Node.REFLECTED_OBJECT);
1093:       assertEquals(30, Node.VAR_ARGS_NAME);
1094:       assertEquals(49, Node.DIRECT_EVAL);
1095:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1096:       assertEquals(40, Node.ORIGINALNAME_PROP);
1097:       assertEquals(32, Node.INCRDECR_PROP);
1098:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1099:       assertEquals(46, Node.IS_NAMESPACE);
1100:       assertEquals(12, Node.COLUMN_BITS);
1101:       assertEquals(50, Node.FREE_CALL);
1102:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1103:       assertEquals(1, Node.DECR_FLAG);
1104:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1105:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1106:       assertEquals(43, Node.IS_CONSTANT_NAME);
1107:       assertEquals(36, Node.QUOTED_PROP);
1108:       assertEquals(4095, Node.COLUMN_MASK);
1109:       assertEquals(37, Node.OPT_ARG_NAME);
1110:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1111:       assertEquals(48, Node.DIRECTIVES);
1112:       assertEquals(8, Node.FLAG_NO_THROWS);
1113:       assertEquals(2, Node.POST_FLAG);
1114:       assertEquals(56, Node.CHANGE_TIME);
1115:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1116:       assertEquals(47, Node.IS_DISPATCHER);
1117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1118:       assertEquals(29, Node.JSDOC_INFO_PROP);
1119:       assertEquals(57, Node.LAST_PROP);
1120:       assertEquals(55, Node.INFERRED_FUNCTION);
1121:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1122:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1123:       assertEquals(39, Node.EMPTY_BLOCK);
1124:       assertEquals(53, Node.INPUT_ID);
1125:       assertEquals(43, Node.IS_CONSTANT_NAME);
1126:       assertEquals(36, Node.QUOTED_PROP);
1127:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1128:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1129:       assertEquals(4095, Node.COLUMN_MASK);
1130:       assertEquals(48, Node.DIRECTIVES);
1131:       assertEquals(56, Node.CHANGE_TIME);
1132:       assertEquals(2, Node.POST_FLAG);
1133:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1134:       assertEquals(8, Node.FLAG_NO_THROWS);
1135:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1136:       assertEquals(47, Node.IS_DISPATCHER);
1137:       assertEquals(55, Node.INFERRED_FUNCTION);
1138:       assertEquals(52, Node.LENGTH);
1139:       assertEquals(53, Node.INPUT_ID);
1140:       assertEquals(29, Node.JSDOC_INFO_PROP);
1141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1142:       assertEquals(39, Node.EMPTY_BLOCK);
1143:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1144:       assertEquals(57, Node.LAST_PROP);
1145:       assertEquals(30, Node.VAR_ARGS_NAME);
1146:       assertEquals(54, Node.SLASH_V);
1147:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1148:       assertEquals(57, Node.REFLECTED_OBJECT);
1149:       assertEquals(46, Node.IS_NAMESPACE);
1150:       assertEquals(49, Node.DIRECT_EVAL);
1151:       assertEquals(40, Node.ORIGINALNAME_PROP);
1152:       assertEquals(37, Node.OPT_ARG_NAME);
1153:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1154:       assertEquals(50, Node.FREE_CALL);
1155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1156:       assertEquals(12, Node.COLUMN_BITS);
1157:       assertEquals(32, Node.INCRDECR_PROP);
1158:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1159:       assertEquals(1, Node.DECR_FLAG);
1160:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1161:       assertFalse(node0.isComma());
1162:       assertFalse(node0.isThis());
1163:       assertFalse(node0.isGetProp());
1164:       assertFalse(node0.isInstanceOf());
1165:       assertFalse(node0.isObjectLit());
1166:       assertFalse(node0.isNot());
1167:       assertFalse(node0.isBreak());
1168:       assertFalse(node0.isAnd());
1169:       assertFalse(node0.isExprResult());
1170:       assertEquals((-1), node0.getCharno());
1171:       assertFalse(node0.isScript());
1172:       assertFalse(node0.isWith());
1173:       assertFalse(node0.isCase());
1174:       assertFalse(node0.isAssign());
1175:       assertFalse(node0.hasChildren());
1176:       assertFalse(node0.isHook());
1177:       assertFalse(node0.hasOneChild());
1178:       assertFalse(node0.isOr());
1179:       assertFalse(node0.isReturn());
1180:       assertFalse(node0.isLabel());
1181:       assertFalse(node0.isNumber());
1182:       assertFalse(node0.isTypeOf());
1183:       assertFalse(node0.isGetterDef());
1184:       assertFalse(node0.isDec());
1185:       assertFalse(node0.isGetElem());
1186:       assertFalse(node0.isLabelName());
1187:       assertFalse(node0.isArrayLit());
1188:       assertFalse(node0.isDelProp());
1189:       assertFalse(node0.isSwitch());
1190:       assertFalse(node0.isAdd());
1191:       assertFalse(node0.isNew());
1192:       assertFalse(node0.isTrue());
1193:       assertFalse(node0.isDo());
1194:       assertFalse(node0.isEmpty());
1195:       assertFalse(node0.isVar());
1196:       assertFalse(node0.isAssignAdd());
1197:       assertFalse(node0.isDefaultCase());
1198:       assertFalse(node0.isSetterDef());
1199:       assertFalse(node0.isCatch());
1200:       assertEquals(0, node0.getChildCount());
1201:       assertFalse(node0.isStringKey());
1202:       assertFalse(node0.isName());
1203:       assertFalse(node0.isCall());
1204:       assertFalse(node0.isNull());
1205:       assertFalse(node0.isParamList());
1206:       assertFalse(node0.isBlock());
1207:       assertTrue(node0.isString());
1208:       assertFalse(node0.isTry());
1209:       assertFalse(node0.isVoid());
1210:       assertFalse(node0.isDebugger());
1211:       assertFalse(node0.isRegExp());
1212:       assertFalse(node0.isFor());
1213:       assertFalse(node0.isWhile());
1214:       assertEquals((-1), node0.getLineno());
1215:       assertEquals((-1), node0.getSourcePosition());
1216:       assertFalse(node0.isIn());
1217:       assertFalse(node0.hasMoreThanOneChild());
1218:       assertFalse(node0.isContinue());
1219:       assertFalse(node0.isNE());
1220:       assertFalse(node0.isIf());
1221:       assertFalse(node0.isInc());
1222:       assertFalse(node0.isCast());
1223:       assertFalse(node0.isFunction());
1224:       assertFalse(node0.isFalse());
1225:       assertEquals(40, node0.getType());
1226:       assertFalse(node0.isThrow());
1227:       assertFalse(node1.isGetterDef());
1228:       assertFalse(node1.isIf());
1229:       assertFalse(node1.isDelProp());
1230:       assertFalse(node1.isEmpty());
1231:       assertFalse(node1.isIn());
1232:       assertFalse(node1.isArrayLit());
1233:       assertFalse(node1.isVoid());
1234:       assertFalse(node1.isTrue());
1235:       assertFalse(node1.isNE());
1236:       assertFalse(node1.isDefaultCase());
1237:       assertFalse(node1.isInc());
1238:       assertFalse(node1.isFunction());
1239:       assertEquals(0, node1.getChildCount());
1240:       assertFalse(node1.isThrow());
1241:       assertEquals(20, node1.getCharno());
1242:       assertFalse(node1.isSetterDef());
1243:       assertFalse(node1.isSwitch());
1244:       assertFalse(node1.isStringKey());
1245:       assertFalse(node1.isParamList());
1246:       assertFalse(node1.isRegExp());
1247:       assertEquals(39, node1.getType());
1248:       assertFalse(node1.isCase());
1249:       assertFalse(node1.hasMoreThanOneChild());
1250:       assertFalse(node1.isCatch());
1251:       assertFalse(node1.isWith());
1252:       assertFalse(node1.isScript());
1253:       assertFalse(node1.isInstanceOf());
1254:       assertFalse(node1.isHook());
1255:       assertFalse(node1.isTry());
1256:       assertFalse(node1.hasOneChild());
1257:       assertFalse(node1.isThis());
1258:       assertFalse(node1.isBlock());
1259:       assertFalse(node1.isFor());
1260:       assertFalse(node1.hasChildren());
1261:       assertFalse(node1.isTypeOf());
1262:       assertFalse(node1.isLabelName());
1263:       assertFalse(node1.isAssign());
1264:       assertFalse(node1.isDec());
1265:       assertFalse(node1.isGetElem());
1266:       assertFalse(node1.isCast());
1267:       assertFalse(node1.isOr());
1268:       assertEquals(32788, node1.getSourcePosition());
1269:       assertFalse(node1.isDo());
1270:       assertFalse(node1.isContinue());
1271:       assertFalse(node1.isAdd());
1272:       assertFalse(node1.isLabel());
1273:       assertFalse(node1.isNew());
1274:       assertFalse(node1.isVar());
1275:       assertFalse(node1.isAssignAdd());
1276:       assertFalse(node1.isBreak());
1277:       assertFalse(node1.isNull());
1278:       assertEquals(8, node1.getLineno());
1279:       assertFalse(node1.isComma());
1280:       assertFalse(node1.isGetProp());
1281:       assertFalse(node1.isFalse());
1282:       assertFalse(node1.isCall());
1283:       assertFalse(node1.isName());
1284:       assertFalse(node1.isAnd());
1285:       assertFalse(node1.isNot());
1286:       assertFalse(node1.isDebugger());
1287:       assertFalse(node1.isExprResult());
1288:       assertFalse(node1.isObjectLit());
1289:       assertFalse(node1.isString());
1290:       assertFalse(node1.isReturn());
1291:       assertTrue(node1.isNumber());
1292:       assertFalse(node1.isWhile());
1293:       
1294:       String string1 = node1.getSourceFileName();
1295:       assertFalse(node1.equals((Object)node0));
1296:       assertNull(string1);
1297:       assertEquals(43, Node.IS_CONSTANT_NAME);
1298:       assertEquals(36, Node.QUOTED_PROP);
1299:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1300:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1301:       assertEquals(4095, Node.COLUMN_MASK);
1302:       assertEquals(48, Node.DIRECTIVES);
1303:       assertEquals(56, Node.CHANGE_TIME);
1304:       assertEquals(2, Node.POST_FLAG);
1305:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1306:       assertEquals(8, Node.FLAG_NO_THROWS);
1307:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1308:       assertEquals(47, Node.IS_DISPATCHER);
1309:       assertEquals(55, Node.INFERRED_FUNCTION);
1310:       assertEquals(52, Node.LENGTH);
1311:       assertEquals(53, Node.INPUT_ID);
1312:       assertEquals(29, Node.JSDOC_INFO_PROP);
1313:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1314:       assertEquals(39, Node.EMPTY_BLOCK);
1315:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1316:       assertEquals(57, Node.LAST_PROP);
1317:       assertEquals(30, Node.VAR_ARGS_NAME);
1318:       assertEquals(54, Node.SLASH_V);
1319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1320:       assertEquals(57, Node.REFLECTED_OBJECT);
1321:       assertEquals(46, Node.IS_NAMESPACE);
1322:       assertEquals(49, Node.DIRECT_EVAL);
1323:       assertEquals(40, Node.ORIGINALNAME_PROP);
1324:       assertEquals(37, Node.OPT_ARG_NAME);
1325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1326:       assertEquals(50, Node.FREE_CALL);
1327:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1328:       assertEquals(12, Node.COLUMN_BITS);
1329:       assertEquals(32, Node.INCRDECR_PROP);
1330:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1331:       assertEquals(1, Node.DECR_FLAG);
1332:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1333:       assertFalse(node1.isGetterDef());
1334:       assertFalse(node1.isIf());
1335:       assertFalse(node1.isDelProp());
1336:       assertFalse(node1.isEmpty());
1337:       assertFalse(node1.isIn());
1338:       assertFalse(node1.isArrayLit());
1339:       assertFalse(node1.isVoid());
1340:       assertFalse(node1.isTrue());
1341:       assertFalse(node1.isNE());
1342:       assertFalse(node1.isDefaultCase());
1343:       assertFalse(node1.isInc());
1344:       assertFalse(node1.isFunction());
1345:       assertEquals(0, node1.getChildCount());
1346:       assertFalse(node1.isThrow());
1347:       assertEquals(20, node1.getCharno());
1348:       assertFalse(node1.isSetterDef());
1349:       assertFalse(node1.isSwitch());
1350:       assertFalse(node1.isStringKey());
1351:       assertFalse(node1.isParamList());
1352:       assertFalse(node1.isRegExp());
1353:       assertEquals(39, node1.getType());
1354:       assertFalse(node1.isCase());
1355:       assertFalse(node1.hasMoreThanOneChild());
1356:       assertFalse(node1.isCatch());
1357:       assertFalse(node1.isWith());
1358:       assertFalse(node1.isScript());
1359:       assertFalse(node1.isInstanceOf());
1360:       assertFalse(node1.isHook());
1361:       assertFalse(node1.isTry());
1362:       assertFalse(node1.hasOneChild());
1363:       assertFalse(node1.isThis());
1364:       assertFalse(node1.isBlock());
1365:       assertFalse(node1.isFor());
1366:       assertFalse(node1.hasChildren());
1367:       assertFalse(node1.isTypeOf());
1368:       assertFalse(node1.isLabelName());
1369:       assertFalse(node1.isAssign());
1370:       assertFalse(node1.isDec());
1371:       assertFalse(node1.isGetElem());
1372:       assertFalse(node1.isCast());
1373:       assertFalse(node1.isOr());
1374:       assertEquals(32788, node1.getSourcePosition());
1375:       assertFalse(node1.isDo());
1376:       assertFalse(node1.isContinue());
1377:       assertFalse(node1.isAdd());
1378:       assertFalse(node1.isLabel());
1379:       assertFalse(node1.isNew());
1380:       assertFalse(node1.isVar());
1381:       assertFalse(node1.isAssignAdd());
1382:       assertFalse(node1.isBreak());
1383:       assertFalse(node1.isNull());
1384:       assertEquals(8, node1.getLineno());
1385:       assertFalse(node1.isComma());
1386:       assertFalse(node1.isGetProp());
1387:       assertFalse(node1.isFalse());
1388:       assertFalse(node1.isCall());
1389:       assertFalse(node1.isName());
1390:       assertFalse(node1.isAnd());
1391:       assertFalse(node1.isNot());
1392:       assertFalse(node1.isDebugger());
1393:       assertFalse(node1.isExprResult());
1394:       assertFalse(node1.isObjectLit());
1395:       assertFalse(node1.isString());
1396:       assertFalse(node1.isReturn());
1397:       assertTrue(node1.isNumber());
1398:       assertFalse(node1.isWhile());
1399:       
1400:       Node node2 = node1.srcrefTree(node0);
1401:       assertFalse(node0.equals((Object)node1));
1402:       assertFalse(node1.equals((Object)node0));
1403:       assertFalse(node2.equals((Object)node0));
1404:       assertNotNull(node2);
1405:       assertSame(node1, node2);
1406:       assertSame(node2, node1);
1407:       assertEquals(52, Node.LENGTH);
1408:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1409:       assertEquals(54, Node.SLASH_V);
1410:       assertEquals(57, Node.REFLECTED_OBJECT);
1411:       assertEquals(30, Node.VAR_ARGS_NAME);
1412:       assertEquals(49, Node.DIRECT_EVAL);
1413:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1414:       assertEquals(40, Node.ORIGINALNAME_PROP);
1415:       assertEquals(32, Node.INCRDECR_PROP);
1416:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1417:       assertEquals(46, Node.IS_NAMESPACE);
1418:       assertEquals(12, Node.COLUMN_BITS);
1419:       assertEquals(50, Node.FREE_CALL);
1420:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1421:       assertEquals(1, Node.DECR_FLAG);
1422:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1423:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1424:       assertEquals(43, Node.IS_CONSTANT_NAME);
1425:       assertEquals(36, Node.QUOTED_PROP);
1426:       assertEquals(4095, Node.COLUMN_MASK);
1427:       assertEquals(37, Node.OPT_ARG_NAME);
1428:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1429:       assertEquals(48, Node.DIRECTIVES);
1430:       assertEquals(8, Node.FLAG_NO_THROWS);
1431:       assertEquals(2, Node.POST_FLAG);
1432:       assertEquals(56, Node.CHANGE_TIME);
1433:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1434:       assertEquals(47, Node.IS_DISPATCHER);
1435:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1436:       assertEquals(29, Node.JSDOC_INFO_PROP);
1437:       assertEquals(57, Node.LAST_PROP);
1438:       assertEquals(55, Node.INFERRED_FUNCTION);
1439:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1440:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1441:       assertEquals(39, Node.EMPTY_BLOCK);
1442:       assertEquals(53, Node.INPUT_ID);
1443:       assertEquals(43, Node.IS_CONSTANT_NAME);
1444:       assertEquals(36, Node.QUOTED_PROP);
1445:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1446:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1447:       assertEquals(4095, Node.COLUMN_MASK);
1448:       assertEquals(48, Node.DIRECTIVES);
1449:       assertEquals(56, Node.CHANGE_TIME);
1450:       assertEquals(2, Node.POST_FLAG);
1451:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1452:       assertEquals(8, Node.FLAG_NO_THROWS);
1453:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1454:       assertEquals(47, Node.IS_DISPATCHER);
1455:       assertEquals(55, Node.INFERRED_FUNCTION);
1456:       assertEquals(52, Node.LENGTH);
1457:       assertEquals(53, Node.INPUT_ID);
1458:       assertEquals(29, Node.JSDOC_INFO_PROP);
1459:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1460:       assertEquals(39, Node.EMPTY_BLOCK);
1461:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1462:       assertEquals(57, Node.LAST_PROP);
1463:       assertEquals(30, Node.VAR_ARGS_NAME);
1464:       assertEquals(54, Node.SLASH_V);
1465:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1466:       assertEquals(57, Node.REFLECTED_OBJECT);
1467:       assertEquals(46, Node.IS_NAMESPACE);
1468:       assertEquals(49, Node.DIRECT_EVAL);
1469:       assertEquals(40, Node.ORIGINALNAME_PROP);
1470:       assertEquals(37, Node.OPT_ARG_NAME);
1471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1472:       assertEquals(50, Node.FREE_CALL);
1473:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1474:       assertEquals(12, Node.COLUMN_BITS);
1475:       assertEquals(32, Node.INCRDECR_PROP);
1476:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1477:       assertEquals(1, Node.DECR_FLAG);
1478:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1479:       assertEquals(37, Node.OPT_ARG_NAME);
1480:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1481:       assertEquals(56, Node.CHANGE_TIME);
1482:       assertEquals(32, Node.INCRDECR_PROP);
1483:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1484:       assertEquals(29, Node.JSDOC_INFO_PROP);
1485:       assertEquals(46, Node.IS_NAMESPACE);
1486:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1487:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1488:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1489:       assertEquals(49, Node.DIRECT_EVAL);
1490:       assertEquals(1, Node.DECR_FLAG);
1491:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1492:       assertEquals(12, Node.COLUMN_BITS);
1493:       assertEquals(4095, Node.COLUMN_MASK);
1494:       assertEquals(8, Node.FLAG_NO_THROWS);
1495:       assertEquals(39, Node.EMPTY_BLOCK);
1496:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1497:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1498:       assertEquals(48, Node.DIRECTIVES);
1499:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1500:       assertEquals(57, Node.REFLECTED_OBJECT);
1501:       assertEquals(55, Node.INFERRED_FUNCTION);
1502:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1503:       assertEquals(52, Node.LENGTH);
1504:       assertEquals(36, Node.QUOTED_PROP);
1505:       assertEquals(50, Node.FREE_CALL);
1506:       assertEquals(43, Node.IS_CONSTANT_NAME);
1507:       assertEquals(53, Node.INPUT_ID);
1508:       assertEquals(54, Node.SLASH_V);
1509:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1510:       assertEquals(57, Node.LAST_PROP);
1511:       assertEquals(40, Node.ORIGINALNAME_PROP);
1512:       assertEquals(47, Node.IS_DISPATCHER);
1513:       assertEquals(2, Node.POST_FLAG);
1514:       assertEquals(30, Node.VAR_ARGS_NAME);
1515:       assertFalse(node0.isComma());
1516:       assertFalse(node0.isThis());
1517:       assertFalse(node0.isGetProp());
1518:       assertFalse(node0.isInstanceOf());
1519:       assertFalse(node0.isObjectLit());
1520:       assertFalse(node0.isNot());
1521:       assertFalse(node0.isBreak());
1522:       assertFalse(node0.isAnd());
1523:       assertFalse(node0.isExprResult());
1524:       assertEquals((-1), node0.getCharno());
1525:       assertFalse(node0.isScript());
1526:       assertFalse(node0.isWith());
1527:       assertFalse(node0.isCase());
1528:       assertFalse(node0.isAssign());
1529:       assertFalse(node0.hasChildren());
1530:       assertFalse(node0.isHook());
1531:       assertFalse(node0.hasOneChild());
1532:       assertFalse(node0.isOr());
1533:       assertFalse(node0.isReturn());
1534:       assertFalse(node0.isLabel());
1535:       assertFalse(node0.isNumber());
1536:       assertFalse(node0.isTypeOf());
1537:       assertFalse(node0.isGetterDef());
1538:       assertFalse(node0.isDec());
1539:       assertFalse(node0.isGetElem());
1540:       assertFalse(node0.isLabelName());
1541:       assertFalse(node0.isArrayLit());
1542:       assertFalse(node0.isDelProp());
1543:       assertFalse(node0.isSwitch());
1544:       assertFalse(node0.isAdd());
1545:       assertFalse(node0.isNew());
1546:       assertFalse(node0.isTrue());
1547:       assertFalse(node0.isDo());
1548:       assertFalse(node0.isEmpty());
1549:       assertFalse(node0.isVar());
1550:       assertFalse(node0.isAssignAdd());
1551:       assertFalse(node0.isDefaultCase());
1552:       assertFalse(node0.isSetterDef());
1553:       assertFalse(node0.isCatch());
1554:       assertEquals(0, node0.getChildCount());
1555:       assertFalse(node0.isStringKey());
1556:       assertFalse(node0.isName());
1557:       assertFalse(node0.isCall());
1558:       assertFalse(node0.isNull());
1559:       assertFalse(node0.isParamList());
1560:       assertFalse(node0.isBlock());
1561:       assertTrue(node0.isString());
1562:       assertFalse(node0.isTry());
1563:       assertFalse(node0.isVoid());
1564:       assertFalse(node0.isDebugger());
1565:       assertFalse(node0.isRegExp());
1566:       assertFalse(node0.isFor());
1567:       assertFalse(node0.isWhile());
1568:       assertEquals((-1), node0.getLineno());
1569:       assertEquals((-1), node0.getSourcePosition());
1570:       assertFalse(node0.isIn());
1571:       assertFalse(node0.hasMoreThanOneChild());
1572:       assertFalse(node0.isContinue());
1573:       assertFalse(node0.isNE());
1574:       assertFalse(node0.isIf());
1575:       assertFalse(node0.isInc());
1576:       assertFalse(node0.isCast());
1577:       assertFalse(node0.isFunction());
1578:       assertFalse(node0.isFalse());
1579:       assertEquals(40, node0.getType());
1580:       assertFalse(node0.isThrow());
1581:       assertFalse(node1.isGetterDef());
1582:       assertFalse(node1.isIf());
1583:       assertFalse(node1.isDelProp());
1584:       assertFalse(node1.isEmpty());
1585:       assertFalse(node1.isIn());
1586:       assertFalse(node1.isArrayLit());
1587:       assertFalse(node1.isVoid());
1588:       assertFalse(node1.isTrue());
1589:       assertFalse(node1.isNE());
1590:       assertFalse(node1.isDefaultCase());
1591:       assertFalse(node1.isInc());
1592:       assertFalse(node1.isFunction());
1593:       assertEquals(0, node1.getChildCount());
1594:       assertFalse(node1.isThrow());
1595:       assertFalse(node1.isSetterDef());
1596:       assertEquals((-1), node1.getCharno());
1597:       assertFalse(node1.isSwitch());
1598:       assertFalse(node1.isStringKey());
1599:       assertFalse(node1.isParamList());
1600:       assertFalse(node1.isRegExp());
1601:       assertEquals(39, node1.getType());
1602:       assertFalse(node1.isCase());
1603:       assertFalse(node1.hasMoreThanOneChild());
1604:       assertFalse(node1.isCatch());
1605:       assertFalse(node1.isWith());
1606:       assertFalse(node1.isScript());
1607:       assertFalse(node1.isInstanceOf());
1608:       assertFalse(node1.isHook());
1609:       assertFalse(node1.isTry());
1610:       assertFalse(node1.hasOneChild());
1611:       assertFalse(node1.isThis());
1612:       assertFalse(node1.isBlock());
1613:       assertFalse(node1.isFor());
1614:       assertFalse(node1.hasChildren());
1615:       assertFalse(node1.isTypeOf());
1616:       assertFalse(node1.isLabelName());
1617:       assertFalse(node1.isAssign());
1618:       assertEquals((-1), node1.getSourcePosition());
1619:       assertFalse(node1.isDec());
1620:       assertFalse(node1.isGetElem());
1621:       assertFalse(node1.isCast());
1622:       assertFalse(node1.isOr());
1623:       assertEquals((-1), node1.getLineno());
1624:       assertFalse(node1.isDo());
1625:       assertFalse(node1.isContinue());
1626:       assertFalse(node1.isAdd());
1627:       assertFalse(node1.isLabel());
1628:       assertFalse(node1.isNew());
1629:       assertFalse(node1.isVar());
1630:       assertFalse(node1.isAssignAdd());
1631:       assertFalse(node1.isBreak());
1632:       assertFalse(node1.isNull());
1633:       assertFalse(node1.isComma());
1634:       assertFalse(node1.isGetProp());
1635:       assertFalse(node1.isFalse());
1636:       assertFalse(node1.isCall());
1637:       assertFalse(node1.isName());
1638:       assertFalse(node1.isAnd());
1639:       assertFalse(node1.isNot());
1640:       assertFalse(node1.isDebugger());
1641:       assertFalse(node1.isExprResult());
1642:       assertFalse(node1.isObjectLit());
1643:       assertFalse(node1.isString());
1644:       assertFalse(node1.isReturn());
1645:       assertTrue(node1.isNumber());
1646:       assertFalse(node1.isWhile());
1647:       assertEquals(39, node2.getType());
1648:       assertFalse(node2.isWhile());
1649:       assertFalse(node2.isBlock());
1650:       assertFalse(node2.isVar());
1651:       assertFalse(node2.isDo());
1652:       assertFalse(node2.isNew());
1653:       assertFalse(node2.isAdd());
1654:       assertFalse(node2.isDec());
1655:       assertFalse(node2.isTypeOf());
1656:       assertFalse(node2.isOr());
1657:       assertFalse(node2.isAssign());
1658:       assertFalse(node2.hasChildren());
1659:       assertFalse(node2.isNull());
1660:       assertFalse(node2.isReturn());
1661:       assertFalse(node2.hasMoreThanOneChild());
1662:       assertFalse(node2.isCatch());
1663:       assertFalse(node2.isName());
1664:       assertEquals((-1), node2.getLineno());
1665:       assertFalse(node2.isCall());
1666:       assertFalse(node2.isGetElem());
1667:       assertFalse(node2.isExprResult());
1668:       assertFalse(node2.isDefaultCase());
1669:       assertFalse(node2.isVoid());
1670:       assertFalse(node2.isRegExp());
1671:       assertFalse(node2.isTrue());
1672:       assertFalse(node2.hasOneChild());
1673:       assertFalse(node2.isTry());
1674:       assertFalse(node2.isEmpty());
1675:       assertFalse(node2.isScript());
1676:       assertFalse(node2.isParamList());
1677:       assertFalse(node2.isGetterDef());
1678:       assertFalse(node2.isLabel());
1679:       assertFalse(node2.isAssignAdd());
1680:       assertFalse(node2.isStringKey());
1681:       assertFalse(node2.isArrayLit());
1682:       assertEquals(0, node2.getChildCount());
1683:       assertFalse(node2.isLabelName());
1684:       assertFalse(node2.isSwitch());
1685:       assertEquals((-1), node2.getCharno());
1686:       assertFalse(node2.isHook());
1687:       assertFalse(node2.isIn());
1688:       assertTrue(node2.isNumber());
1689:       assertFalse(node2.isCase());
1690:       assertFalse(node2.isString());
1691:       assertFalse(node2.isInc());
1692:       assertFalse(node2.isComma());
1693:       assertFalse(node2.isNE());
1694:       assertFalse(node2.isIf());
1695:       assertFalse(node2.isDelProp());
1696:       assertFalse(node2.isThis());
1697:       assertFalse(node2.isFor());
1698:       assertFalse(node2.isWith());
1699:       assertFalse(node2.isBreak());
1700:       assertFalse(node2.isInstanceOf());
1701:       assertFalse(node2.isDebugger());
1702:       assertFalse(node2.isFunction());
1703:       assertFalse(node2.isNot());
1704:       assertFalse(node2.isObjectLit());
1705:       assertFalse(node2.isGetProp());
1706:       assertFalse(node2.isSetterDef());
1707:       assertEquals((-1), node2.getSourcePosition());
1708:       assertFalse(node2.isThrow());
1709:       assertFalse(node2.isCast());
1710:       assertFalse(node2.isContinue());
1711:       assertFalse(node2.isAnd());
1712:       assertFalse(node2.isFalse());
1713:       
1714:       boolean boolean3 = node0.isAnd();
1715:       assertFalse(node0.equals((Object)node1));
1716:       assertFalse(node0.equals((Object)node2));
1717:       assertTrue(boolean3 == boolean1);
1718:       assertTrue(boolean3 == boolean0);
1719:       assertTrue(boolean3 == boolean2);
1720:       assertEquals(52, Node.LENGTH);
1721:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1722:       assertEquals(54, Node.SLASH_V);
1723:       assertEquals(57, Node.REFLECTED_OBJECT);
1724:       assertEquals(30, Node.VAR_ARGS_NAME);
1725:       assertEquals(49, Node.DIRECT_EVAL);
1726:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1727:       assertEquals(40, Node.ORIGINALNAME_PROP);
1728:       assertEquals(32, Node.INCRDECR_PROP);
1729:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1730:       assertEquals(46, Node.IS_NAMESPACE);
1731:       assertEquals(12, Node.COLUMN_BITS);
1732:       assertEquals(50, Node.FREE_CALL);
1733:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1734:       assertEquals(1, Node.DECR_FLAG);
1735:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1736:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1737:       assertEquals(43, Node.IS_CONSTANT_NAME);
1738:       assertEquals(36, Node.QUOTED_PROP);
1739:       assertEquals(4095, Node.COLUMN_MASK);
1740:       assertEquals(37, Node.OPT_ARG_NAME);
1741:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1742:       assertEquals(48, Node.DIRECTIVES);
1743:       assertEquals(8, Node.FLAG_NO_THROWS);
1744:       assertEquals(2, Node.POST_FLAG);
1745:       assertEquals(56, Node.CHANGE_TIME);
1746:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1747:       assertEquals(47, Node.IS_DISPATCHER);
1748:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1749:       assertEquals(29, Node.JSDOC_INFO_PROP);
1750:       assertEquals(57, Node.LAST_PROP);
1751:       assertEquals(55, Node.INFERRED_FUNCTION);
1752:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1753:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1754:       assertEquals(39, Node.EMPTY_BLOCK);
1755:       assertEquals(53, Node.INPUT_ID);
1756:       assertFalse(boolean3);
1757:       assertFalse(node0.isComma());
1758:       assertFalse(node0.isThis());
1759:       assertFalse(node0.isGetProp());
1760:       assertFalse(node0.isInstanceOf());
1761:       assertFalse(node0.isObjectLit());
1762:       assertFalse(node0.isNot());
1763:       assertFalse(node0.isBreak());
1764:       assertFalse(node0.isAnd());
1765:       assertFalse(node0.isExprResult());
1766:       assertEquals((-1), node0.getCharno());
1767:       assertFalse(node0.isScript());
1768:       assertFalse(node0.isWith());
1769:       assertFalse(node0.isCase());
1770:       assertFalse(node0.isAssign());
1771:       assertFalse(node0.hasChildren());
1772:       assertFalse(node0.isHook());
1773:       assertFalse(node0.hasOneChild());
1774:       assertFalse(node0.isOr());
1775:       assertFalse(node0.isReturn());
1776:       assertFalse(node0.isLabel());
1777:       assertFalse(node0.isNumber());
1778:       assertFalse(node0.isTypeOf());
1779:       assertFalse(node0.isGetterDef());
1780:       assertFalse(node0.isDec());
1781:       assertFalse(node0.isGetElem());
1782:       assertFalse(node0.isLabelName());
1783:       assertFalse(node0.isArrayLit());
1784:       assertFalse(node0.isDelProp());
1785:       assertFalse(node0.isSwitch());
1786:       assertFalse(node0.isAdd());
1787:       assertFalse(node0.isNew());
1788:       assertFalse(node0.isTrue());
1789:       assertFalse(node0.isDo());
1790:       assertFalse(node0.isEmpty());
1791:       assertFalse(node0.isVar());
1792:       assertFalse(node0.isAssignAdd());
1793:       assertFalse(node0.isDefaultCase());
1794:       assertFalse(node0.isSetterDef());
1795:       assertFalse(node0.isCatch());
1796:       assertEquals(0, node0.getChildCount());
1797:       assertFalse(node0.isStringKey());
1798:       assertFalse(node0.isName());
1799:       assertFalse(node0.isCall());
1800:       assertFalse(node0.isNull());
1801:       assertFalse(node0.isParamList());
1802:       assertFalse(node0.isBlock());
1803:       assertTrue(node0.isString());
1804:       assertFalse(node0.isTry());
1805:       assertFalse(node0.isVoid());
1806:       assertFalse(node0.isDebugger());
1807:       assertFalse(node0.isRegExp());
1808:       assertFalse(node0.isFor());
1809:       assertFalse(node0.isWhile());
1810:       assertEquals((-1), node0.getLineno());
1811:       assertEquals((-1), node0.getSourcePosition());
1812:       assertFalse(node0.isIn());
1813:       assertFalse(node0.hasMoreThanOneChild());
1814:       assertFalse(node0.isContinue());
1815:       assertFalse(node0.isNE());
1816:       assertFalse(node0.isIf());
1817:       assertFalse(node0.isInc());
1818:       assertFalse(node0.isCast());
1819:       assertFalse(node0.isFunction());
1820:       assertFalse(node0.isFalse());
1821:       assertEquals(40, node0.getType());
1822:       assertFalse(node0.isThrow());
1823:       
1824:       node2.addSuppression((String) null);
1825:       assertFalse(node0.equals((Object)node1));
1826:       assertFalse(node0.equals((Object)node2));
1827:       assertFalse(node1.equals((Object)node0));
1828:       assertFalse(node2.equals((Object)node0));
1829:       assertSame(node1, node2);
1830:       assertSame(node2, node1);
1831:       assertEquals(52, Node.LENGTH);
1832:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1833:       assertEquals(54, Node.SLASH_V);
1834:       assertEquals(57, Node.REFLECTED_OBJECT);
1835:       assertEquals(30, Node.VAR_ARGS_NAME);
1836:       assertEquals(49, Node.DIRECT_EVAL);
1837:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1838:       assertEquals(40, Node.ORIGINALNAME_PROP);
1839:       assertEquals(32, Node.INCRDECR_PROP);
1840:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1841:       assertEquals(46, Node.IS_NAMESPACE);
1842:       assertEquals(12, Node.COLUMN_BITS);
1843:       assertEquals(50, Node.FREE_CALL);
1844:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1845:       assertEquals(1, Node.DECR_FLAG);
1846:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1847:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1848:       assertEquals(43, Node.IS_CONSTANT_NAME);
1849:       assertEquals(36, Node.QUOTED_PROP);
1850:       assertEquals(4095, Node.COLUMN_MASK);
1851:       assertEquals(37, Node.OPT_ARG_NAME);
1852:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1853:       assertEquals(48, Node.DIRECTIVES);
1854:       assertEquals(8, Node.FLAG_NO_THROWS);
1855:       assertEquals(2, Node.POST_FLAG);
1856:       assertEquals(56, Node.CHANGE_TIME);
1857:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1858:       assertEquals(47, Node.IS_DISPATCHER);
1859:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1860:       assertEquals(29, Node.JSDOC_INFO_PROP);
1861:       assertEquals(57, Node.LAST_PROP);
1862:       assertEquals(55, Node.INFERRED_FUNCTION);
1863:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1864:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1865:       assertEquals(39, Node.EMPTY_BLOCK);
1866:       assertEquals(53, Node.INPUT_ID);
1867:       assertEquals(43, Node.IS_CONSTANT_NAME);
1868:       assertEquals(36, Node.QUOTED_PROP);
1869:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1870:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1871:       assertEquals(4095, Node.COLUMN_MASK);
1872:       assertEquals(48, Node.DIRECTIVES);
1873:       assertEquals(56, Node.CHANGE_TIME);
1874:       assertEquals(2, Node.POST_FLAG);
1875:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1876:       assertEquals(8, Node.FLAG_NO_THROWS);
1877:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1878:       assertEquals(47, Node.IS_DISPATCHER);
1879:       assertEquals(55, Node.INFERRED_FUNCTION);
1880:       assertEquals(52, Node.LENGTH);
1881:       assertEquals(53, Node.INPUT_ID);
1882:       assertEquals(29, Node.JSDOC_INFO_PROP);
1883:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1884:       assertEquals(39, Node.EMPTY_BLOCK);
1885:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1886:       assertEquals(57, Node.LAST_PROP);
1887:       assertEquals(30, Node.VAR_ARGS_NAME);
1888:       assertEquals(54, Node.SLASH_V);
1889:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1890:       assertEquals(57, Node.REFLECTED_OBJECT);
1891:       assertEquals(46, Node.IS_NAMESPACE);
1892:       assertEquals(49, Node.DIRECT_EVAL);
1893:       assertEquals(40, Node.ORIGINALNAME_PROP);
1894:       assertEquals(37, Node.OPT_ARG_NAME);
1895:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1896:       assertEquals(50, Node.FREE_CALL);
1897:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1898:       assertEquals(12, Node.COLUMN_BITS);
1899:       assertEquals(32, Node.INCRDECR_PROP);
1900:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1901:       assertEquals(1, Node.DECR_FLAG);
1902:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1903:       assertEquals(37, Node.OPT_ARG_NAME);
1904:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1905:       assertEquals(56, Node.CHANGE_TIME);
1906:       assertEquals(32, Node.INCRDECR_PROP);
1907:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1908:       assertEquals(29, Node.JSDOC_INFO_PROP);
1909:       assertEquals(46, Node.IS_NAMESPACE);
1910:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1911:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1912:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1913:       assertEquals(49, Node.DIRECT_EVAL);
1914:       assertEquals(1, Node.DECR_FLAG);
1915:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1916:       assertEquals(12, Node.COLUMN_BITS);
1917:       assertEquals(4095, Node.COLUMN_MASK);
1918:       assertEquals(8, Node.FLAG_NO_THROWS);
1919:       assertEquals(39, Node.EMPTY_BLOCK);
1920:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1921:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1922:       assertEquals(48, Node.DIRECTIVES);
1923:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1924:       assertEquals(57, Node.REFLECTED_OBJECT);
1925:       assertEquals(55, Node.INFERRED_FUNCTION);
1926:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1927:       assertEquals(52, Node.LENGTH);
1928:       assertEquals(36, Node.QUOTED_PROP);
1929:       assertEquals(50, Node.FREE_CALL);
1930:       assertEquals(43, Node.IS_CONSTANT_NAME);
1931:       assertEquals(53, Node.INPUT_ID);
1932:       assertEquals(54, Node.SLASH_V);
1933:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1934:       assertEquals(57, Node.LAST_PROP);
1935:       assertEquals(40, Node.ORIGINALNAME_PROP);
1936:       assertEquals(47, Node.IS_DISPATCHER);
1937:       assertEquals(2, Node.POST_FLAG);
1938:       assertEquals(30, Node.VAR_ARGS_NAME);
1939:       assertFalse(node0.isComma());
1940:       assertFalse(node0.isThis());
1941:       assertFalse(node0.isGetProp());
1942:       assertFalse(node0.isInstanceOf());
1943:       assertFalse(node0.isObjectLit());
1944:       assertFalse(node0.isNot());
1945:       assertFalse(node0.isBreak());
1946:       assertFalse(node0.isAnd());
1947:       assertFalse(node0.isExprResult());
1948:       assertEquals((-1), node0.getCharno());
1949:       assertFalse(node0.isScript());
1950:       assertFalse(node0.isWith());
1951:       assertFalse(node0.isCase());
1952:       assertFalse(node0.isAssign());
1953:       assertFalse(node0.hasChildren());
1954:       assertFalse(node0.isHook());
1955:       assertFalse(node0.hasOneChild());
1956:       assertFalse(node0.isOr());
1957:       assertFalse(node0.isReturn());
1958:       assertFalse(node0.isLabel());
1959:       assertFalse(node0.isNumber());
1960:       assertFalse(node0.isTypeOf());
1961:       assertFalse(node0.isGetterDef());
1962:       assertFalse(node0.isDec());
1963:       assertFalse(node0.isGetElem());
1964:       assertFalse(node0.isLabelName());
1965:       assertFalse(node0.isArrayLit());
1966:       assertFalse(node0.isDelProp());
1967:       assertFalse(node0.isSwitch());
1968:       assertFalse(node0.isAdd());
1969:       assertFalse(node0.isNew());
1970:       assertFalse(node0.isTrue());
1971:       assertFalse(node0.isDo());
1972:       assertFalse(node0.isEmpty());
1973:       assertFalse(node0.isVar());
1974:       assertFalse(node0.isAssignAdd());
1975:       assertFalse(node0.isDefaultCase());
1976:       assertFalse(node0.isSetterDef());
1977:       assertFalse(node0.isCatch());
1978:       assertEquals(0, node0.getChildCount());
1979:       assertFalse(node0.isStringKey());
1980:       assertFalse(node0.isName());
1981:       assertFalse(node0.isCall());
1982:       assertFalse(node0.isNull());
1983:       assertFalse(node0.isParamList());
1984:       assertFalse(node0.isBlock());
1985:       assertTrue(node0.isString());
1986:       assertFalse(node0.isTry());
1987:       assertFalse(node0.isVoid());
1988:       assertFalse(node0.isDebugger());
1989:       assertFalse(node0.isRegExp());
1990:       assertFalse(node0.isFor());
1991:       assertFalse(node0.isWhile());
1992:       assertEquals((-1), node0.getLineno());
1993:       assertEquals((-1), node0.getSourcePosition());
1994:       assertFalse(node0.isIn());
1995:       assertFalse(node0.hasMoreThanOneChild());
1996:       assertFalse(node0.isContinue());
1997:       assertFalse(node0.isNE());
1998:       assertFalse(node0.isIf());
1999:       assertFalse(node0.isInc());
2000:       assertFalse(node0.isCast());
2001:       assertFalse(node0.isFunction());
2002:       assertFalse(node0.isFalse());
2003:       assertEquals(40, node0.getType());
2004:       assertFalse(node0.isThrow());
2005:       assertFalse(node1.isGetterDef());
2006:       assertFalse(node1.isIf());
2007:       assertFalse(node1.isDelProp());
2008:       assertFalse(node1.isEmpty());
2009:       assertFalse(node1.isIn());
2010:       assertFalse(node1.isArrayLit());
2011:       assertFalse(node1.isVoid());
2012:       assertFalse(node1.isTrue());
2013:       assertFalse(node1.isNE());
2014:       assertFalse(node1.isDefaultCase());
2015:       assertFalse(node1.isInc());
2016:       assertFalse(node1.isFunction());
2017:       assertEquals(0, node1.getChildCount());
2018:       assertFalse(node1.isThrow());
2019:       assertFalse(node1.isSetterDef());
2020:       assertEquals((-1), node1.getCharno());
2021:       assertFalse(node1.isSwitch());
2022:       assertFalse(node1.isStringKey());
2023:       assertFalse(node1.isParamList());
2024:       assertFalse(node1.isRegExp());
2025:       assertEquals(39, node1.getType());
2026:       assertFalse(node1.isCase());
2027:       assertFalse(node1.hasMoreThanOneChild());
2028:       assertFalse(node1.isCatch());
2029:       assertFalse(node1.isWith());
2030:       assertFalse(node1.isScript());
2031:       assertFalse(node1.isInstanceOf());
2032:       assertFalse(node1.isHook());
2033:       assertFalse(node1.isTry());
2034:       assertFalse(node1.hasOneChild());
2035:       assertFalse(node1.isThis());
2036:       assertFalse(node1.isBlock());
2037:       assertFalse(node1.isFor());
2038:       assertFalse(node1.hasChildren());
2039:       assertFalse(node1.isTypeOf());
2040:       assertFalse(node1.isLabelName());
2041:       assertFalse(node1.isAssign());
2042:       assertEquals((-1), node1.getSourcePosition());
2043:       assertFalse(node1.isDec());
2044:       assertFalse(node1.isGetElem());
2045:       assertFalse(node1.isCast());
2046:       assertFalse(node1.isOr());
2047:       assertEquals((-1), node1.getLineno());
2048:       assertFalse(node1.isDo());
2049:       assertFalse(node1.isContinue());
2050:       assertFalse(node1.isAdd());
2051:       assertFalse(node1.isLabel());
2052:       assertFalse(node1.isNew());
2053:       assertFalse(node1.isVar());
2054:       assertFalse(node1.isAssignAdd());
2055:       assertFalse(node1.isBreak());
2056:       assertFalse(node1.isNull());
2057:       assertFalse(node1.isComma());
2058:       assertFalse(node1.isGetProp());
2059:       assertFalse(node1.isFalse());
2060:       assertFalse(node1.isCall());
2061:       assertFalse(node1.isName());
2062:       assertFalse(node1.isAnd());
2063:       assertFalse(node1.isNot());
2064:       assertFalse(node1.isDebugger());
2065:       assertFalse(node1.isExprResult());
2066:       assertFalse(node1.isObjectLit());
2067:       assertFalse(node1.isString());
2068:       assertFalse(node1.isReturn());
2069:       assertTrue(node1.isNumber());
2070:       assertFalse(node1.isWhile());
2071:       assertEquals(39, node2.getType());
2072:       assertFalse(node2.isWhile());
2073:       assertFalse(node2.isBlock());
2074:       assertFalse(node2.isVar());
2075:       assertFalse(node2.isDo());
2076:       assertFalse(node2.isNew());
2077:       assertFalse(node2.isAdd());
2078:       assertFalse(node2.isDec());
2079:       assertFalse(node2.isTypeOf());
2080:       assertFalse(node2.isOr());
2081:       assertFalse(node2.isAssign());
2082:       assertFalse(node2.hasChildren());
2083:       assertFalse(node2.isNull());
2084:       assertFalse(node2.isReturn());
2085:       assertFalse(node2.hasMoreThanOneChild());
2086:       assertFalse(node2.isCatch());
2087:       assertFalse(node2.isName());
2088:       assertEquals((-1), node2.getLineno());
2089:       assertFalse(node2.isCall());
2090:       assertFalse(node2.isGetElem());
2091:       assertFalse(node2.isExprResult());
2092:       assertFalse(node2.isDefaultCase());
2093:       assertFalse(node2.isVoid());
2094:       assertFalse(node2.isRegExp());
2095:       assertFalse(node2.isTrue());
2096:       assertFalse(node2.hasOneChild());
2097:       assertFalse(node2.isTry());
2098:       assertFalse(node2.isEmpty());
2099:       assertFalse(node2.isScript());
2100:       assertFalse(node2.isParamList());
2101:       assertFalse(node2.isGetterDef());
2102:       assertFalse(node2.isLabel());
2103:       assertFalse(node2.isAssignAdd());
2104:       assertFalse(node2.isStringKey());
2105:       assertFalse(node2.isArrayLit());
2106:       assertEquals(0, node2.getChildCount());
2107:       assertFalse(node2.isLabelName());
2108:       assertFalse(node2.isSwitch());
2109:       assertEquals((-1), node2.getCharno());
2110:       assertFalse(node2.isHook());
2111:       assertFalse(node2.isIn());
2112:       assertTrue(node2.isNumber());
2113:       assertFalse(node2.isCase());
2114:       assertFalse(node2.isString());
2115:       assertFalse(node2.isInc());
2116:       assertFalse(node2.isComma());
2117:       assertFalse(node2.isNE());
2118:       assertFalse(node2.isIf());
2119:       assertFalse(node2.isDelProp());
2120:       assertFalse(node2.isThis());
2121:       assertFalse(node2.isFor());
2122:       assertFalse(node2.isWith());
2123:       assertFalse(node2.isBreak());
2124:       assertFalse(node2.isInstanceOf());
2125:       assertFalse(node2.isDebugger());
2126:       assertFalse(node2.isFunction());
2127:       assertFalse(node2.isNot());
2128:       assertFalse(node2.isObjectLit());
2129:       assertFalse(node2.isGetProp());
2130:       assertFalse(node2.isSetterDef());
2131:       assertEquals((-1), node2.getSourcePosition());
2132:       assertFalse(node2.isThrow());
2133:       assertFalse(node2.isCast());
2134:       assertFalse(node2.isContinue());
2135:       assertFalse(node2.isAnd());
2136:       assertFalse(node2.isFalse());
2137:       
2138:       node0.addSuppression("9Q k6.106");
2139:       assertFalse(node0.equals((Object)node1));
2140:       assertFalse(node0.equals((Object)node2));
2141:       assertEquals(52, Node.LENGTH);
2142:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2143:       assertEquals(54, Node.SLASH_V);
2144:       assertEquals(57, Node.REFLECTED_OBJECT);
2145:       assertEquals(30, Node.VAR_ARGS_NAME);
2146:       assertEquals(49, Node.DIRECT_EVAL);
2147:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2148:       assertEquals(40, Node.ORIGINALNAME_PROP);
2149:       assertEquals(32, Node.INCRDECR_PROP);
2150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2151:       assertEquals(46, Node.IS_NAMESPACE);
2152:       assertEquals(12, Node.COLUMN_BITS);
2153:       assertEquals(50, Node.FREE_CALL);
2154:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2155:       assertEquals(1, Node.DECR_FLAG);
2156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2157:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2158:       assertEquals(43, Node.IS_CONSTANT_NAME);
2159:       assertEquals(36, Node.QUOTED_PROP);
2160:       assertEquals(4095, Node.COLUMN_MASK);
2161:       assertEquals(37, Node.OPT_ARG_NAME);
2162:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2163:       assertEquals(48, Node.DIRECTIVES);
2164:       assertEquals(8, Node.FLAG_NO_THROWS);
2165:       assertEquals(2, Node.POST_FLAG);
2166:       assertEquals(56, Node.CHANGE_TIME);
2167:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2168:       assertEquals(47, Node.IS_DISPATCHER);
2169:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2170:       assertEquals(29, Node.JSDOC_INFO_PROP);
2171:       assertEquals(57, Node.LAST_PROP);
2172:       assertEquals(55, Node.INFERRED_FUNCTION);
2173:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2174:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2175:       assertEquals(39, Node.EMPTY_BLOCK);
2176:       assertEquals(53, Node.INPUT_ID);
2177:       assertFalse(node0.isComma());
2178:       
2179:       Iterable<Node> iterable1 = node2.children();
2180:       assertFalse(node0.equals((Object)node1));
2181:       assertFalse(node0.equals((Object)node2));
2182:       assertFalse(iterable1.equals((Object)iterable0));
2183:       assertFalse(node1.equals((Object)node0));
2184:       assertFalse(node2.equals((Object)node0));
2185:       assertNotNull(iterable1);
2186:       assertSame(node1, node2);
2187:       assertSame(node2, node1);
2188:       assertEquals(52, Node.LENGTH);
2189:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2190:       assertEquals(54, Node.SLASH_V);
2191:       assertEquals(57, Node.REFLECTED_OBJECT);
2192:       assertEquals(30, Node.VAR_ARGS_NAME);
2193:       assertEquals(49, Node.DIRECT_EVAL);
2194:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2195:       assertEquals(40, Node.ORIGINALNAME_PROP);
2196:       assertEquals(32, Node.INCRDECR_PROP);
2197:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2198:       assertEquals(46, Node.IS_NAMESPACE);
2199:       assertEquals(12, Node.COLUMN_BITS);
2200:       assertEquals(50, Node.FREE_CALL);
2201:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2202:       assertEquals(1, Node.DECR_FLAG);
2203:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2204:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2205:       assertEquals(43, Node.IS_CONSTANT_NAME);
2206:       assertEquals(36, Node.QUOTED_PROP);
2207:       assertEquals(4095, Node.COLUMN_MASK);
2208:       assertEquals(37, Node.OPT_ARG_NAME);
2209:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2210:       assertEquals(48, Node.DIRECTIVES);
2211:       assertEquals(8, Node.FLAG_NO_THROWS);
2212:       assertEquals(2, Node.POST_FLAG);
2213:       assertEquals(56, Node.CHANGE_TIME);
2214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2215:       assertEquals(47, Node.IS_DISPATCHER);
2216:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2217:       assertEquals(29, Node.JSDOC_INFO_PROP);
2218:       assertEquals(57, Node.LAST_PROP);
2219:       assertEquals(55, Node.INFERRED_FUNCTION);
2220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2221:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2222:       assertEquals(39, Node.EMPTY_BLOCK);
2223:       assertEquals(53, Node.INPUT_ID);
2224:       assertEquals(43, Node.IS_CONSTANT_NAME);
2225:       assertEquals(36, Node.QUOTED_PROP);
2226:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2227:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2228:       assertEquals(4095, Node.COLUMN_MASK);
2229:       assertEquals(48, Node.DIRECTIVES);
2230:       assertEquals(56, Node.CHANGE_TIME);
2231:       assertEquals(2, Node.POST_FLAG);
2232:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2233:       assertEquals(8, Node.FLAG_NO_THROWS);
2234:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2235:       assertEquals(47, Node.IS_DISPATCHER);
2236:       assertEquals(55, Node.INFERRED_FUNCTION);
2237:       assertEquals(52, Node.LENGTH);
2238:       assertEquals(53, Node.INPUT_ID);
2239:       assertEquals(29, Node.JSDOC_INFO_PROP);
2240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2241:       assertEquals(39, Node.EMPTY_BLOCK);
2242:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2243:       assertEquals(57, Node.LAST_PROP);
2244:       assertEquals(30, Node.VAR_ARGS_NAME);
2245:       assertEquals(54, Node.SLASH_V);
2246:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2247:       assertEquals(57, Node.REFLECTED_OBJECT);
2248:       assertEquals(46, Node.IS_NAMESPACE);
2249:       assertEquals(49, Node.DIRECT_EVAL);
2250:       assertEquals(40, Node.ORIGINALNAME_PROP);
2251:       assertEquals(37, Node.OPT_ARG_NAME);
2252:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2253:       assertEquals(50, Node.FREE_CALL);
2254:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2255:       assertEquals(12, Node.COLUMN_BITS);
2256:       assertEquals(32, Node.INCRDECR_PROP);
2257:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2258:       assertEquals(1, Node.DECR_FLAG);
2259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2260:       assertEquals(37, Node.OPT_ARG_NAME);
2261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2262:       assertEquals(56, Node.CHANGE_TIME);
2263:       assertEquals(32, Node.INCRDECR_PROP);
2264:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2265:       assertEquals(29, Node.JSDOC_INFO_PROP);
2266:       assertEquals(46, Node.IS_NAMESPACE);
2267:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2268:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2269:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2270:       assertEquals(49, Node.DIRECT_EVAL);
2271:       assertEquals(1, Node.DECR_FLAG);
2272:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2273:       assertEquals(12, Node.COLUMN_BITS);
2274:       assertEquals(4095, Node.COLUMN_MASK);
2275:       assertEquals(8, Node.FLAG_NO_THROWS);
2276:       assertEquals(39, Node.EMPTY_BLOCK);
2277:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2278:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2279:       assertEquals(48, Node.DIRECTIVES);
2280:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2281:       assertEquals(57, Node.REFLECTED_OBJECT);
2282:       assertEquals(55, Node.INFERRED_FUNCTION);
2283:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2284:       assertEquals(52, Node.LENGTH);
2285:       assertEquals(36, Node.QUOTED_PROP);
2286:       assertEquals(50, Node.FREE_CALL);
2287:       assertEquals(43, Node.IS_CONSTANT_NAME);
2288:       assertEquals(53, Node.INPUT_ID);
2289:       assertEquals(54, Node.SLASH_V);
2290:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2291:       assertEquals(57, Node.LAST_PROP);
2292:       assertEquals(40, Node.ORIGINALNAME_PROP);
2293:       assertEquals(47, Node.IS_DISPATCHER);
2294:       assertEquals(2, Node.POST_FLAG);
2295:       assertEquals(30, Node.VAR_ARGS_NAME);
2296:       assertFalse(iterable1.contains(node1));
2297:       
2298:       boolean boolean4 = node2.isEquivalentToShallow(node0);
2299:       assertFalse(node0.equals((Object)node1));
2300:       assertFalse(node0.equals((Object)node2));
2301:       assertTrue(boolean4 == boolean3);
2302:       assertTrue(boolean4 == boolean0);
2303:       assertTrue(boolean4 == boolean1);
2304:       assertTrue(boolean4 == boolean2);
2305:       assertFalse(node1.equals((Object)node0));
2306:       assertFalse(node2.equals((Object)node0));
2307:       assertSame(node1, node2);
2308:       assertSame(node2, node1);
2309:       assertEquals(52, Node.LENGTH);
2310:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2311:       assertEquals(54, Node.SLASH_V);
2312:       assertEquals(57, Node.REFLECTED_OBJECT);
2313:       assertEquals(30, Node.VAR_ARGS_NAME);
2314:       assertEquals(49, Node.DIRECT_EVAL);
2315:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2316:       assertEquals(40, Node.ORIGINALNAME_PROP);
2317:       assertEquals(32, Node.INCRDECR_PROP);
2318:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2319:       assertEquals(46, Node.IS_NAMESPACE);
2320:       assertEquals(12, Node.COLUMN_BITS);
2321:       assertEquals(50, Node.FREE_CALL);
2322:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2323:       assertEquals(1, Node.DECR_FLAG);
2324:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2325:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2326:       assertEquals(43, Node.IS_CONSTANT_NAME);
2327:       assertEquals(36, Node.QUOTED_PROP);
2328:       assertEquals(4095, Node.COLUMN_MASK);
2329:       assertEquals(37, Node.OPT_ARG_NAME);
2330:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2331:       assertEquals(48, Node.DIRECTIVES);
2332:       assertEquals(8, Node.FLAG_NO_THROWS);
2333:       assertEquals(2, Node.POST_FLAG);
2334:       assertEquals(56, Node.CHANGE_TIME);
2335:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2336:       assertEquals(47, Node.IS_DISPATCHER);
2337:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2338:       assertEquals(29, Node.JSDOC_INFO_PROP);
2339:       assertEquals(57, Node.LAST_PROP);
2340:       assertEquals(55, Node.INFERRED_FUNCTION);
2341:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2342:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2343:       assertEquals(39, Node.EMPTY_BLOCK);
2344:       assertEquals(53, Node.INPUT_ID);
2345:       assertEquals(43, Node.IS_CONSTANT_NAME);
2346:       assertEquals(36, Node.QUOTED_PROP);
2347:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2348:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2349:       assertEquals(4095, Node.COLUMN_MASK);
2350:       assertEquals(48, Node.DIRECTIVES);
2351:       assertEquals(56, Node.CHANGE_TIME);
2352:       assertEquals(2, Node.POST_FLAG);
2353:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2354:       assertEquals(8, Node.FLAG_NO_THROWS);
2355:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2356:       assertEquals(47, Node.IS_DISPATCHER);
2357:       assertEquals(55, Node.INFERRED_FUNCTION);
2358:       assertEquals(52, Node.LENGTH);
2359:       assertEquals(53, Node.INPUT_ID);
2360:       assertEquals(29, Node.JSDOC_INFO_PROP);
2361:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2362:       assertEquals(39, Node.EMPTY_BLOCK);
2363:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2364:       assertEquals(57, Node.LAST_PROP);
2365:       assertEquals(30, Node.VAR_ARGS_NAME);
2366:       assertEquals(54, Node.SLASH_V);
2367:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2368:       assertEquals(57, Node.REFLECTED_OBJECT);
2369:       assertEquals(46, Node.IS_NAMESPACE);
2370:       assertEquals(49, Node.DIRECT_EVAL);
2371:       assertEquals(40, Node.ORIGINALNAME_PROP);
2372:       assertEquals(37, Node.OPT_ARG_NAME);
2373:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2374:       assertEquals(50, Node.FREE_CALL);
2375:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2376:       assertEquals(12, Node.COLUMN_BITS);
2377:       assertEquals(32, Node.INCRDECR_PROP);
2378:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2379:       assertEquals(1, Node.DECR_FLAG);
2380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2381:       assertEquals(37, Node.OPT_ARG_NAME);
2382:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2383:       assertEquals(56, Node.CHANGE_TIME);
2384:       assertEquals(32, Node.INCRDECR_PROP);
2385:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2386:       assertEquals(29, Node.JSDOC_INFO_PROP);
2387:       assertEquals(46, Node.IS_NAMESPACE);
2388:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2389:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2390:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2391:       assertEquals(49, Node.DIRECT_EVAL);
2392:       assertEquals(1, Node.DECR_FLAG);
2393:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2394:       assertEquals(12, Node.COLUMN_BITS);
2395:       assertEquals(4095, Node.COLUMN_MASK);
2396:       assertEquals(8, Node.FLAG_NO_THROWS);
2397:       assertEquals(39, Node.EMPTY_BLOCK);
2398:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2399:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2400:       assertEquals(48, Node.DIRECTIVES);
2401:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2402:       assertEquals(57, Node.REFLECTED_OBJECT);
2403:       assertEquals(55, Node.INFERRED_FUNCTION);
2404:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2405:       assertEquals(52, Node.LENGTH);
2406:       assertEquals(36, Node.QUOTED_PROP);
2407:       assertEquals(50, Node.FREE_CALL);
2408:       assertEquals(43, Node.IS_CONSTANT_NAME);
2409:       assertEquals(53, Node.INPUT_ID);
2410:       assertEquals(54, Node.SLASH_V);
2411:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2412:       assertEquals(57, Node.LAST_PROP);
2413:       assertEquals(40, Node.ORIGINALNAME_PROP);
2414:       assertEquals(47, Node.IS_DISPATCHER);
2415:       assertEquals(2, Node.POST_FLAG);
2416:       assertEquals(30, Node.VAR_ARGS_NAME);
2417:       assertFalse(boolean4);
2418:       
2419:       boolean boolean5 = node2.isCatch();
2420:       assertFalse(node0.equals((Object)node1));
2421:       assertFalse(node0.equals((Object)node2));
2422:       assertTrue(boolean5 == boolean1);
2423:       assertTrue(boolean5 == boolean2);
2424:       assertTrue(boolean5 == boolean4);
2425:       assertTrue(boolean5 == boolean3);
2426:       assertTrue(boolean5 == boolean0);
2427:       assertFalse(node1.equals((Object)node0));
2428:       assertFalse(node2.equals((Object)node0));
2429:       assertSame(node1, node2);
2430:       assertSame(node2, node1);
2431:       assertEquals(52, Node.LENGTH);
2432:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2433:       assertEquals(54, Node.SLASH_V);
2434:       assertEquals(57, Node.REFLECTED_OBJECT);
2435:       assertEquals(30, Node.VAR_ARGS_NAME);
2436:       assertEquals(49, Node.DIRECT_EVAL);
2437:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2438:       assertEquals(40, Node.ORIGINALNAME_PROP);
2439:       assertEquals(32, Node.INCRDECR_PROP);
2440:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2441:       assertEquals(46, Node.IS_NAMESPACE);
2442:       assertEquals(12, Node.COLUMN_BITS);
2443:       assertEquals(50, Node.FREE_CALL);
2444:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2445:       assertEquals(1, Node.DECR_FLAG);
2446:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2447:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2448:       assertEquals(43, Node.IS_CONSTANT_NAME);
2449:       assertEquals(36, Node.QUOTED_PROP);
2450:       assertEquals(4095, Node.COLUMN_MASK);
2451:       assertEquals(37, Node.OPT_ARG_NAME);
2452:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2453:       assertEquals(48, Node.DIRECTIVES);
2454:       assertEquals(8, Node.FLAG_NO_THROWS);
2455:       assertEquals(2, Node.POST_FLAG);
2456:       assertEquals(56, Node.CHANGE_TIME);
2457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2458:       assertEquals(47, Node.IS_DISPATCHER);
2459:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2460:       assertEquals(29, Node.JSDOC_INFO_PROP);
2461:       assertEquals(57, Node.LAST_PROP);
2462:       assertEquals(55, Node.INFERRED_FUNCTION);
2463:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2464:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2465:       assertEquals(39, Node.EMPTY_BLOCK);
2466:       assertEquals(53, Node.INPUT_ID);
2467:       assertEquals(43, Node.IS_CONSTANT_NAME);
2468:       assertEquals(36, Node.QUOTED_PROP);
2469:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2470:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2471:       assertEquals(4095, Node.COLUMN_MASK);
2472:       assertEquals(48, Node.DIRECTIVES);
2473:       assertEquals(56, Node.CHANGE_TIME);
2474:       assertEquals(2, Node.POST_FLAG);
2475:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2476:       assertEquals(8, Node.FLAG_NO_THROWS);
2477:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2478:       assertEquals(47, Node.IS_DISPATCHER);
2479:       assertEquals(55, Node.INFERRED_FUNCTION);
2480:       assertEquals(52, Node.LENGTH);
2481:       assertEquals(53, Node.INPUT_ID);
2482:       assertEquals(29, Node.JSDOC_INFO_PROP);
2483:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2484:       assertEquals(39, Node.EMPTY_BLOCK);
2485:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2486:       assertEquals(57, Node.LAST_PROP);
2487:       assertEquals(30, Node.VAR_ARGS_NAME);
2488:       assertEquals(54, Node.SLASH_V);
2489:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2490:       assertEquals(57, Node.REFLECTED_OBJECT);
2491:       assertEquals(46, Node.IS_NAMESPACE);
2492:       assertEquals(49, Node.DIRECT_EVAL);
2493:       assertEquals(40, Node.ORIGINALNAME_PROP);
2494:       assertEquals(37, Node.OPT_ARG_NAME);
2495:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2496:       assertEquals(50, Node.FREE_CALL);
2497:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2498:       assertEquals(12, Node.COLUMN_BITS);
2499:       assertEquals(32, Node.INCRDECR_PROP);
2500:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2501:       assertEquals(1, Node.DECR_FLAG);
2502:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2503:       assertEquals(37, Node.OPT_ARG_NAME);
2504:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2505:       assertEquals(56, Node.CHANGE_TIME);
2506:       assertEquals(32, Node.INCRDECR_PROP);
2507:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2508:       assertEquals(29, Node.JSDOC_INFO_PROP);
2509:       assertEquals(46, Node.IS_NAMESPACE);
2510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2511:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2512:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2513:       assertEquals(49, Node.DIRECT_EVAL);
2514:       assertEquals(1, Node.DECR_FLAG);
2515:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2516:       assertEquals(12, Node.COLUMN_BITS);
2517:       assertEquals(4095, Node.COLUMN_MASK);
2518:       assertEquals(8, Node.FLAG_NO_THROWS);
2519:       assertEquals(39, Node.EMPTY_BLOCK);
2520:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2521:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2522:       assertEquals(48, Node.DIRECTIVES);
2523:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2524:       assertEquals(57, Node.REFLECTED_OBJECT);
2525:       assertEquals(55, Node.INFERRED_FUNCTION);
2526:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2527:       assertEquals(52, Node.LENGTH);
2528:       assertEquals(36, Node.QUOTED_PROP);
2529:       assertEquals(50, Node.FREE_CALL);
2530:       assertEquals(43, Node.IS_CONSTANT_NAME);
2531:       assertEquals(53, Node.INPUT_ID);
2532:       assertEquals(54, Node.SLASH_V);
2533:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2534:       assertEquals(57, Node.LAST_PROP);
2535:       assertEquals(40, Node.ORIGINALNAME_PROP);
2536:       assertEquals(47, Node.IS_DISPATCHER);
2537:       assertEquals(2, Node.POST_FLAG);
2538:       assertEquals(30, Node.VAR_ARGS_NAME);
2539:       assertFalse(boolean5);
2540:   }
2541: }
RegularFileObject[/tmp/EvoSuite_136_1629223105868/com/google/javascript/rhino/Node_136_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:26 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_136_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_136_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_136_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
266:       "com.google.common.base.Joiner",
267:       "com.google.common.base.Preconditions",
268:       "com.google.common.base.Joiner$1",
269:       "com.google.common.collect.Collections2",
270:       "com.google.common.base.Joiner$MapJoiner",
271:       "com.google.common.collect.Maps",
272:       "com.google.common.collect.AbstractMultimap",
273:       "com.google.common.collect.AbstractMapBasedMultimap",
274:       "com.google.common.collect.AbstractSetMultimap",
275:       "com.google.common.collect.LinkedHashMultimap",
276:       "com.google.common.collect.AbstractMapEntry",
277:       "com.google.common.collect.ImmutableEntry",
278:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
279:       "com.google.common.collect.AbstractListMultimap",
280:       "com.google.common.collect.ArrayListMultimap",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
282:       "com.google.common.collect.ImmutableCollection",
283:       "com.google.common.collect.RegularImmutableList",
284:       "com.google.common.collect.ObjectArrays",
285:       "com.google.common.collect.ImmutableList",
286:       "com.google.javascript.rhino.jstype.ModificationVisitor",
287:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
288:       "com.google.common.collect.ImmutableCollection$Builder",
289:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
290:       "com.google.common.collect.ImmutableList$Builder",
291:       "com.google.common.collect.UnmodifiableIterator",
292:       "com.google.common.collect.UnmodifiableListIterator",
293:       "com.google.common.collect.Iterators$1",
294:       "com.google.common.collect.Iterators$2",
295:       "com.google.common.collect.Iterators",
296:       "com.google.javascript.rhino.jstype.JSTypeNative",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.SimpleErrorReporter",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.common.base.Objects",
345:       "com.google.javascript.rhino.InputId",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.common.collect.Iterables",
348:       "com.google.javascript.rhino.JSDocInfo$Visibility",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.Node$AncestorIterable$1",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.JSType$TypePair",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 17:58:26.521 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("J.g=");
assertNotNull(node0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());

boolean boolean0 = node0.isLabel();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertFalse(boolean0);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());

String string0 = node0.toStringTree();
assertNotNull(string0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals("STRING J.g=\n", string0);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());

int int0 = node0.getIntProp(375);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, int0);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());

boolean boolean1 = node0.isAssign();
assertTrue(boolean1 == boolean0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertFalse(boolean1);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());

Node node1 = Node.newNumber((double) 4095, 8, 20);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThrow());
assertEquals(20, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertEquals(8, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isWhile());

double double0 = node1.getDouble();
assertFalse(node1.equals((Object)node0));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095.0, double0, 0.01);
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThrow());
assertEquals(20, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertEquals(8, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isWhile());

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertFalse(node0.equals((Object)node1));
assertNull(staticSourceFile0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());

boolean boolean2 = node1.isUnscopedQualifiedName();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(boolean2);
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThrow());
assertEquals(20, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertEquals(8, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isWhile());

Iterable<Node> iterable0 = node1.siblings();
assertFalse(node1.equals((Object)node0));
assertNotNull(iterable0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThrow());
assertEquals(20, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertEquals(8, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isWhile());

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThrow());
assertEquals(20, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertEquals(8, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isWhile());

String string1 = node1.getSourceFileName();
assertFalse(node1.equals((Object)node0));
assertNull(string1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThrow());
assertEquals(20, node1.getCharno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertEquals(8, node1.getLineno());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isWhile());

Node node2 = node1.srcrefTree(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isWhile());
assertEquals(39, node2.getType());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isScript());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isIn());
assertTrue(node2.isNumber());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isComma());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());

boolean boolean3 = node0.isAnd();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertFalse(boolean3);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());

node2.addSuppression((String) null);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertEquals(40, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isFor());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isReturn());
assertTrue(node1.isNumber());
assertFalse(node1.isWhile());
assertEquals(39, node2.getType());
assertFalse(node2.isWhile());
assertFalse(node2.isBlock());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isTrue());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isEmpty());
assertFalse(node2.isScript());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabelName());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isIn());
assertTrue(node2.isNumber());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isComma());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());

node0.addSuppression("9Q k6.106");
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertFalse(node0.isComma());

Iterable<Node> iterable1 = node2.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(iterable1.equals((Object)iterable0));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotNull(iterable1);
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(iterable1.contains(node1));

boolean boolean4 = node2.isEquivalentToShallow(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(boolean4);

boolean boolean5 = node2.isCatch();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean0);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(boolean5);


[MASTER] 17:58:30.000 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_146_1629223109165/com/google/javascript/rhino/Node_146_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_146_1629223109165/com/google/javascript/rhino/Node_146_tmp__ESTest_scaffolding.java]]
[MASTER] 17:58:30.000 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:30.000 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:58:30.059 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 2296
[MASTER] 17:58:30.060 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_146_1629223109165/com/google/javascript/rhino/Node_146_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:58:29 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.StaticSourceFile;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_146_tmp__ESTest extends Node_146_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("J.g=");
23:       assertNotNull(node0);
24:       assertEquals(4095, Node.COLUMN_MASK);
25:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
26:       assertEquals(55, Node.INFERRED_FUNCTION);
27:       assertEquals(53, Node.INPUT_ID);
28:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
29:       assertEquals(29, Node.JSDOC_INFO_PROP);
30:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
31:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
32:       assertEquals(8, Node.FLAG_NO_THROWS);
33:       assertEquals(39, Node.EMPTY_BLOCK);
34:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
35:       assertEquals(52, Node.LENGTH);
36:       assertEquals(37, Node.OPT_ARG_NAME);
37:       assertEquals(48, Node.DIRECTIVES);
38:       assertEquals(36, Node.QUOTED_PROP);
39:       assertEquals(57, Node.REFLECTED_OBJECT);
40:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
41:       assertEquals(56, Node.CHANGE_TIME);
42:       assertEquals(30, Node.VAR_ARGS_NAME);
43:       assertEquals(49, Node.DIRECT_EVAL);
44:       assertEquals(1, Node.DECR_FLAG);
45:       assertEquals(15, Node.NO_SIDE_EFFECTS);
46:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
47:       assertEquals(32, Node.INCRDECR_PROP);
48:       assertEquals(2, Node.POST_FLAG);
49:       assertEquals(12, Node.COLUMN_BITS);
50:       assertEquals(57, Node.LAST_PROP);
51:       assertEquals(47, Node.IS_DISPATCHER);
52:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
53:       assertEquals(50, Node.FREE_CALL);
54:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
55:       assertEquals(40, Node.ORIGINALNAME_PROP);
56:       assertEquals(43, Node.IS_CONSTANT_NAME);
57:       assertEquals(51, Node.STATIC_SOURCE_FILE);
58:       assertEquals(46, Node.IS_NAMESPACE);
59:       assertEquals(54, Node.SLASH_V);
60:       assertFalse(node0.isFor());
61:       assertFalse(node0.isEmpty());
62:       assertFalse(node0.isIf());
63:       assertFalse(node0.isArrayLit());
64:       assertFalse(node0.isTry());
65:       assertFalse(node0.isDelProp());
66:       assertFalse(node0.isRegExp());
67:       assertFalse(node0.isFunction());
68:       assertFalse(node0.isCatch());
69:       assertEquals(40, node0.getType());
70:       assertFalse(node0.isDefaultCase());
71:       assertFalse(node0.isVoid());
72:       assertFalse(node0.isNE());
73:       assertFalse(node0.isSetterDef());
74:       assertFalse(node0.isInc());
75:       assertFalse(node0.isNull());
76:       assertFalse(node0.isTrue());
77:       assertFalse(node0.isIn());
78:       assertFalse(node0.isThrow());
79:       assertFalse(node0.isFalse());
80:       assertFalse(node0.isCall());
81:       assertFalse(node0.isBreak());
82:       assertFalse(node0.isName());
83:       assertFalse(node0.isComma());
84:       assertFalse(node0.isContinue());
85:       assertFalse(node0.isAnd());
86:       assertFalse(node0.isWhile());
87:       assertFalse(node0.isGetProp());
88:       assertFalse(node0.isDebugger());
89:       assertEquals((-1), node0.getSourcePosition());
90:       assertFalse(node0.isNot());
91:       assertFalse(node0.isObjectLit());
92:       assertFalse(node0.isGetElem());
93:       assertFalse(node0.isCast());
94:       assertFalse(node0.hasOneChild());
95:       assertFalse(node0.isLabelName());
96:       assertFalse(node0.isLabel());
97:       assertFalse(node0.isReturn());
98:       assertFalse(node0.isExprResult());
99:       assertFalse(node0.isDec());
100:       assertFalse(node0.hasChildren());
101:       assertFalse(node0.hasMoreThanOneChild());
102:       assertFalse(node0.isWith());
103:       assertFalse(node0.isAssign());
104:       assertFalse(node0.isTypeOf());
105:       assertEquals((-1), node0.getLineno());
106:       assertFalse(node0.isAssignAdd());
107:       assertFalse(node0.isDo());
108:       assertFalse(node0.isNew());
109:       assertFalse(node0.isAdd());
110:       assertFalse(node0.isOr());
111:       assertFalse(node0.isStringKey());
112:       assertFalse(node0.isVar());
113:       assertTrue(node0.isString());
114:       assertFalse(node0.isThis());
115:       assertFalse(node0.isBlock());
116:       assertFalse(node0.isHook());
117:       assertFalse(node0.isInstanceOf());
118:       assertEquals(0, node0.getChildCount());
119:       assertFalse(node0.isCase());
120:       assertFalse(node0.isSwitch());
121:       assertEquals((-1), node0.getCharno());
122:       assertFalse(node0.isParamList());
123:       assertFalse(node0.isScript());
124:       assertFalse(node0.isNumber());
125:       assertFalse(node0.isGetterDef());
126:       
127:       boolean boolean0 = node0.isLabel();
128:       assertEquals(4095, Node.COLUMN_MASK);
129:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
130:       assertEquals(55, Node.INFERRED_FUNCTION);
131:       assertEquals(53, Node.INPUT_ID);
132:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
133:       assertEquals(29, Node.JSDOC_INFO_PROP);
134:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
135:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
136:       assertEquals(8, Node.FLAG_NO_THROWS);
137:       assertEquals(39, Node.EMPTY_BLOCK);
138:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
139:       assertEquals(52, Node.LENGTH);
140:       assertEquals(37, Node.OPT_ARG_NAME);
141:       assertEquals(48, Node.DIRECTIVES);
142:       assertEquals(36, Node.QUOTED_PROP);
143:       assertEquals(57, Node.REFLECTED_OBJECT);
144:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
145:       assertEquals(56, Node.CHANGE_TIME);
146:       assertEquals(30, Node.VAR_ARGS_NAME);
147:       assertEquals(49, Node.DIRECT_EVAL);
148:       assertEquals(1, Node.DECR_FLAG);
149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
150:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
151:       assertEquals(32, Node.INCRDECR_PROP);
152:       assertEquals(2, Node.POST_FLAG);
153:       assertEquals(12, Node.COLUMN_BITS);
154:       assertEquals(57, Node.LAST_PROP);
155:       assertEquals(47, Node.IS_DISPATCHER);
156:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
157:       assertEquals(50, Node.FREE_CALL);
158:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
159:       assertEquals(40, Node.ORIGINALNAME_PROP);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(51, Node.STATIC_SOURCE_FILE);
162:       assertEquals(46, Node.IS_NAMESPACE);
163:       assertEquals(54, Node.SLASH_V);
164:       assertFalse(boolean0);
165:       assertFalse(node0.isFor());
166:       assertFalse(node0.isEmpty());
167:       assertFalse(node0.isIf());
168:       assertFalse(node0.isArrayLit());
169:       assertFalse(node0.isTry());
170:       assertFalse(node0.isDelProp());
171:       assertFalse(node0.isRegExp());
172:       assertFalse(node0.isFunction());
173:       assertFalse(node0.isCatch());
174:       assertEquals(40, node0.getType());
175:       assertFalse(node0.isDefaultCase());
176:       assertFalse(node0.isVoid());
177:       assertFalse(node0.isNE());
178:       assertFalse(node0.isSetterDef());
179:       assertFalse(node0.isInc());
180:       assertFalse(node0.isNull());
181:       assertFalse(node0.isTrue());
182:       assertFalse(node0.isIn());
183:       assertFalse(node0.isThrow());
184:       assertFalse(node0.isFalse());
185:       assertFalse(node0.isCall());
186:       assertFalse(node0.isBreak());
187:       assertFalse(node0.isName());
188:       assertFalse(node0.isComma());
189:       assertFalse(node0.isContinue());
190:       assertFalse(node0.isAnd());
191:       assertFalse(node0.isWhile());
192:       assertFalse(node0.isGetProp());
193:       assertFalse(node0.isDebugger());
194:       assertEquals((-1), node0.getSourcePosition());
195:       assertFalse(node0.isNot());
196:       assertFalse(node0.isObjectLit());
197:       assertFalse(node0.isGetElem());
198:       assertFalse(node0.isCast());
199:       assertFalse(node0.hasOneChild());
200:       assertFalse(node0.isLabelName());
201:       assertFalse(node0.isLabel());
202:       assertFalse(node0.isReturn());
203:       assertFalse(node0.isExprResult());
204:       assertFalse(node0.isDec());
205:       assertFalse(node0.hasChildren());
206:       assertFalse(node0.hasMoreThanOneChild());
207:       assertFalse(node0.isWith());
208:       assertFalse(node0.isAssign());
209:       assertFalse(node0.isTypeOf());
210:       assertEquals((-1), node0.getLineno());
211:       assertFalse(node0.isAssignAdd());
212:       assertFalse(node0.isDo());
213:       assertFalse(node0.isNew());
214:       assertFalse(node0.isAdd());
215:       assertFalse(node0.isOr());
216:       assertFalse(node0.isStringKey());
217:       assertFalse(node0.isVar());
218:       assertTrue(node0.isString());
219:       assertFalse(node0.isThis());
220:       assertFalse(node0.isBlock());
221:       assertFalse(node0.isHook());
222:       assertFalse(node0.isInstanceOf());
223:       assertEquals(0, node0.getChildCount());
224:       assertFalse(node0.isCase());
225:       assertFalse(node0.isSwitch());
226:       assertEquals((-1), node0.getCharno());
227:       assertFalse(node0.isParamList());
228:       assertFalse(node0.isScript());
229:       assertFalse(node0.isNumber());
230:       assertFalse(node0.isGetterDef());
231:       
232:       String string0 = node0.toStringTree();
233:       assertNotNull(string0);
234:       assertEquals(4095, Node.COLUMN_MASK);
235:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
236:       assertEquals(55, Node.INFERRED_FUNCTION);
237:       assertEquals(53, Node.INPUT_ID);
238:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
239:       assertEquals(29, Node.JSDOC_INFO_PROP);
240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
241:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
242:       assertEquals(8, Node.FLAG_NO_THROWS);
243:       assertEquals(39, Node.EMPTY_BLOCK);
244:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
245:       assertEquals(52, Node.LENGTH);
246:       assertEquals(37, Node.OPT_ARG_NAME);
247:       assertEquals(48, Node.DIRECTIVES);
248:       assertEquals(36, Node.QUOTED_PROP);
249:       assertEquals(57, Node.REFLECTED_OBJECT);
250:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
251:       assertEquals(56, Node.CHANGE_TIME);
252:       assertEquals(30, Node.VAR_ARGS_NAME);
253:       assertEquals(49, Node.DIRECT_EVAL);
254:       assertEquals(1, Node.DECR_FLAG);
255:       assertEquals(15, Node.NO_SIDE_EFFECTS);
256:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
257:       assertEquals(32, Node.INCRDECR_PROP);
258:       assertEquals(2, Node.POST_FLAG);
259:       assertEquals(12, Node.COLUMN_BITS);
260:       assertEquals(57, Node.LAST_PROP);
261:       assertEquals(47, Node.IS_DISPATCHER);
262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
263:       assertEquals(50, Node.FREE_CALL);
264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
265:       assertEquals(40, Node.ORIGINALNAME_PROP);
266:       assertEquals(43, Node.IS_CONSTANT_NAME);
267:       assertEquals(51, Node.STATIC_SOURCE_FILE);
268:       assertEquals(46, Node.IS_NAMESPACE);
269:       assertEquals(54, Node.SLASH_V);
270:       assertEquals("STRING J.g=\n", string0);
271:       assertFalse(node0.isFor());
272:       assertFalse(node0.isEmpty());
273:       assertFalse(node0.isIf());
274:       assertFalse(node0.isArrayLit());
275:       assertFalse(node0.isTry());
276:       assertFalse(node0.isDelProp());
277:       assertFalse(node0.isRegExp());
278:       assertFalse(node0.isFunction());
279:       assertFalse(node0.isCatch());
280:       assertEquals(40, node0.getType());
281:       assertFalse(node0.isDefaultCase());
282:       assertFalse(node0.isVoid());
283:       assertFalse(node0.isNE());
284:       assertFalse(node0.isSetterDef());
285:       assertFalse(node0.isInc());
286:       assertFalse(node0.isNull());
287:       assertFalse(node0.isTrue());
288:       assertFalse(node0.isIn());
289:       assertFalse(node0.isThrow());
290:       assertFalse(node0.isFalse());
291:       assertFalse(node0.isCall());
292:       assertFalse(node0.isBreak());
293:       assertFalse(node0.isName());
294:       assertFalse(node0.isComma());
295:       assertFalse(node0.isContinue());
296:       assertFalse(node0.isAnd());
297:       assertFalse(node0.isWhile());
298:       assertFalse(node0.isGetProp());
299:       assertFalse(node0.isDebugger());
300:       assertEquals((-1), node0.getSourcePosition());
301:       assertFalse(node0.isNot());
302:       assertFalse(node0.isObjectLit());
303:       assertFalse(node0.isGetElem());
304:       assertFalse(node0.isCast());
305:       assertFalse(node0.hasOneChild());
306:       assertFalse(node0.isLabelName());
307:       assertFalse(node0.isLabel());
308:       assertFalse(node0.isReturn());
309:       assertFalse(node0.isExprResult());
310:       assertFalse(node0.isDec());
311:       assertFalse(node0.hasChildren());
312:       assertFalse(node0.hasMoreThanOneChild());
313:       assertFalse(node0.isWith());
314:       assertFalse(node0.isAssign());
315:       assertFalse(node0.isTypeOf());
316:       assertEquals((-1), node0.getLineno());
317:       assertFalse(node0.isAssignAdd());
318:       assertFalse(node0.isDo());
319:       assertFalse(node0.isNew());
320:       assertFalse(node0.isAdd());
321:       assertFalse(node0.isOr());
322:       assertFalse(node0.isStringKey());
323:       assertFalse(node0.isVar());
324:       assertTrue(node0.isString());
325:       assertFalse(node0.isThis());
326:       assertFalse(node0.isBlock());
327:       assertFalse(node0.isHook());
328:       assertFalse(node0.isInstanceOf());
329:       assertEquals(0, node0.getChildCount());
330:       assertFalse(node0.isCase());
331:       assertFalse(node0.isSwitch());
332:       assertEquals((-1), node0.getCharno());
333:       assertFalse(node0.isParamList());
334:       assertFalse(node0.isScript());
335:       assertFalse(node0.isNumber());
336:       assertFalse(node0.isGetterDef());
337:       
338:       int int0 = node0.getIntProp(375);
339:       assertEquals(4095, Node.COLUMN_MASK);
340:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
341:       assertEquals(55, Node.INFERRED_FUNCTION);
342:       assertEquals(53, Node.INPUT_ID);
343:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
344:       assertEquals(29, Node.JSDOC_INFO_PROP);
345:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
346:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
347:       assertEquals(8, Node.FLAG_NO_THROWS);
348:       assertEquals(39, Node.EMPTY_BLOCK);
349:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
350:       assertEquals(52, Node.LENGTH);
351:       assertEquals(37, Node.OPT_ARG_NAME);
352:       assertEquals(48, Node.DIRECTIVES);
353:       assertEquals(36, Node.QUOTED_PROP);
354:       assertEquals(57, Node.REFLECTED_OBJECT);
355:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
356:       assertEquals(56, Node.CHANGE_TIME);
357:       assertEquals(30, Node.VAR_ARGS_NAME);
358:       assertEquals(49, Node.DIRECT_EVAL);
359:       assertEquals(1, Node.DECR_FLAG);
360:       assertEquals(15, Node.NO_SIDE_EFFECTS);
361:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
362:       assertEquals(32, Node.INCRDECR_PROP);
363:       assertEquals(2, Node.POST_FLAG);
364:       assertEquals(12, Node.COLUMN_BITS);
365:       assertEquals(57, Node.LAST_PROP);
366:       assertEquals(47, Node.IS_DISPATCHER);
367:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
368:       assertEquals(50, Node.FREE_CALL);
369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
370:       assertEquals(40, Node.ORIGINALNAME_PROP);
371:       assertEquals(43, Node.IS_CONSTANT_NAME);
372:       assertEquals(51, Node.STATIC_SOURCE_FILE);
373:       assertEquals(46, Node.IS_NAMESPACE);
374:       assertEquals(54, Node.SLASH_V);
375:       assertEquals(0, int0);
376:       assertFalse(node0.isFor());
377:       assertFalse(node0.isEmpty());
378:       assertFalse(node0.isIf());
379:       assertFalse(node0.isArrayLit());
380:       assertFalse(node0.isTry());
381:       assertFalse(node0.isDelProp());
382:       assertFalse(node0.isRegExp());
383:       assertFalse(node0.isFunction());
384:       assertFalse(node0.isCatch());
385:       assertEquals(40, node0.getType());
386:       assertFalse(node0.isDefaultCase());
387:       assertFalse(node0.isVoid());
388:       assertFalse(node0.isNE());
389:       assertFalse(node0.isSetterDef());
390:       assertFalse(node0.isInc());
391:       assertFalse(node0.isNull());
392:       assertFalse(node0.isTrue());
393:       assertFalse(node0.isIn());
394:       assertFalse(node0.isThrow());
395:       assertFalse(node0.isFalse());
396:       assertFalse(node0.isCall());
397:       assertFalse(node0.isBreak());
398:       assertFalse(node0.isName());
399:       assertFalse(node0.isComma());
400:       assertFalse(node0.isContinue());
401:       assertFalse(node0.isAnd());
402:       assertFalse(node0.isWhile());
403:       assertFalse(node0.isGetProp());
404:       assertFalse(node0.isDebugger());
405:       assertEquals((-1), node0.getSourcePosition());
406:       assertFalse(node0.isNot());
407:       assertFalse(node0.isObjectLit());
408:       assertFalse(node0.isGetElem());
409:       assertFalse(node0.isCast());
410:       assertFalse(node0.hasOneChild());
411:       assertFalse(node0.isLabelName());
412:       assertFalse(node0.isLabel());
413:       assertFalse(node0.isReturn());
414:       assertFalse(node0.isExprResult());
415:       assertFalse(node0.isDec());
416:       assertFalse(node0.hasChildren());
417:       assertFalse(node0.hasMoreThanOneChild());
418:       assertFalse(node0.isWith());
419:       assertFalse(node0.isAssign());
420:       assertFalse(node0.isTypeOf());
421:       assertEquals((-1), node0.getLineno());
422:       assertFalse(node0.isAssignAdd());
423:       assertFalse(node0.isDo());
424:       assertFalse(node0.isNew());
425:       assertFalse(node0.isAdd());
426:       assertFalse(node0.isOr());
427:       assertFalse(node0.isStringKey());
428:       assertFalse(node0.isVar());
429:       assertTrue(node0.isString());
430:       assertFalse(node0.isThis());
431:       assertFalse(node0.isBlock());
432:       assertFalse(node0.isHook());
433:       assertFalse(node0.isInstanceOf());
434:       assertEquals(0, node0.getChildCount());
435:       assertFalse(node0.isCase());
436:       assertFalse(node0.isSwitch());
437:       assertEquals((-1), node0.getCharno());
438:       assertFalse(node0.isParamList());
439:       assertFalse(node0.isScript());
440:       assertFalse(node0.isNumber());
441:       assertFalse(node0.isGetterDef());
442:       
443:       boolean boolean1 = node0.isAssign();
444:       assertTrue(boolean1 == boolean0);
445:       assertEquals(4095, Node.COLUMN_MASK);
446:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
447:       assertEquals(55, Node.INFERRED_FUNCTION);
448:       assertEquals(53, Node.INPUT_ID);
449:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
450:       assertEquals(29, Node.JSDOC_INFO_PROP);
451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
452:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
453:       assertEquals(8, Node.FLAG_NO_THROWS);
454:       assertEquals(39, Node.EMPTY_BLOCK);
455:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
456:       assertEquals(52, Node.LENGTH);
457:       assertEquals(37, Node.OPT_ARG_NAME);
458:       assertEquals(48, Node.DIRECTIVES);
459:       assertEquals(36, Node.QUOTED_PROP);
460:       assertEquals(57, Node.REFLECTED_OBJECT);
461:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
462:       assertEquals(56, Node.CHANGE_TIME);
463:       assertEquals(30, Node.VAR_ARGS_NAME);
464:       assertEquals(49, Node.DIRECT_EVAL);
465:       assertEquals(1, Node.DECR_FLAG);
466:       assertEquals(15, Node.NO_SIDE_EFFECTS);
467:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
468:       assertEquals(32, Node.INCRDECR_PROP);
469:       assertEquals(2, Node.POST_FLAG);
470:       assertEquals(12, Node.COLUMN_BITS);
471:       assertEquals(57, Node.LAST_PROP);
472:       assertEquals(47, Node.IS_DISPATCHER);
473:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
474:       assertEquals(50, Node.FREE_CALL);
475:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
476:       assertEquals(40, Node.ORIGINALNAME_PROP);
477:       assertEquals(43, Node.IS_CONSTANT_NAME);
478:       assertEquals(51, Node.STATIC_SOURCE_FILE);
479:       assertEquals(46, Node.IS_NAMESPACE);
480:       assertEquals(54, Node.SLASH_V);
481:       assertFalse(boolean1);
482:       assertFalse(node0.isFor());
483:       assertFalse(node0.isEmpty());
484:       assertFalse(node0.isIf());
485:       assertFalse(node0.isArrayLit());
486:       assertFalse(node0.isTry());
487:       assertFalse(node0.isDelProp());
488:       assertFalse(node0.isRegExp());
489:       assertFalse(node0.isFunction());
490:       assertFalse(node0.isCatch());
491:       assertEquals(40, node0.getType());
492:       assertFalse(node0.isDefaultCase());
493:       assertFalse(node0.isVoid());
494:       assertFalse(node0.isNE());
495:       assertFalse(node0.isSetterDef());
496:       assertFalse(node0.isInc());
497:       assertFalse(node0.isNull());
498:       assertFalse(node0.isTrue());
499:       assertFalse(node0.isIn());
500:       assertFalse(node0.isThrow());
501:       assertFalse(node0.isFalse());
502:       assertFalse(node0.isCall());
503:       assertFalse(node0.isBreak());
504:       assertFalse(node0.isName());
505:       assertFalse(node0.isComma());
506:       assertFalse(node0.isContinue());
507:       assertFalse(node0.isAnd());
508:       assertFalse(node0.isWhile());
509:       assertFalse(node0.isGetProp());
510:       assertFalse(node0.isDebugger());
511:       assertEquals((-1), node0.getSourcePosition());
512:       assertFalse(node0.isNot());
513:       assertFalse(node0.isObjectLit());
514:       assertFalse(node0.isGetElem());
515:       assertFalse(node0.isCast());
516:       assertFalse(node0.hasOneChild());
517:       assertFalse(node0.isLabelName());
518:       assertFalse(node0.isLabel());
519:       assertFalse(node0.isReturn());
520:       assertFalse(node0.isExprResult());
521:       assertFalse(node0.isDec());
522:       assertFalse(node0.hasChildren());
523:       assertFalse(node0.hasMoreThanOneChild());
524:       assertFalse(node0.isWith());
525:       assertFalse(node0.isAssign());
526:       assertFalse(node0.isTypeOf());
527:       assertEquals((-1), node0.getLineno());
528:       assertFalse(node0.isAssignAdd());
529:       assertFalse(node0.isDo());
530:       assertFalse(node0.isNew());
531:       assertFalse(node0.isAdd());
532:       assertFalse(node0.isOr());
533:       assertFalse(node0.isStringKey());
534:       assertFalse(node0.isVar());
535:       assertTrue(node0.isString());
536:       assertFalse(node0.isThis());
537:       assertFalse(node0.isBlock());
538:       assertFalse(node0.isHook());
539:       assertFalse(node0.isInstanceOf());
540:       assertEquals(0, node0.getChildCount());
541:       assertFalse(node0.isCase());
542:       assertFalse(node0.isSwitch());
543:       assertEquals((-1), node0.getCharno());
544:       assertFalse(node0.isParamList());
545:       assertFalse(node0.isScript());
546:       assertFalse(node0.isNumber());
547:       assertFalse(node0.isGetterDef());
548:       
549:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
550:       assertNotNull(node_SideEffectFlags0);
551:       assertEquals(0, node_SideEffectFlags0.valueOf());
552:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
553:       
554:       Node node1 = Node.newNumber((double) 4095, 8, 20);
555:       assertFalse(node1.equals((Object)node0));
556:       assertNotNull(node1);
557:       assertEquals(32, Node.INCRDECR_PROP);
558:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
559:       assertEquals(37, Node.OPT_ARG_NAME);
560:       assertEquals(30, Node.VAR_ARGS_NAME);
561:       assertEquals(57, Node.LAST_PROP);
562:       assertEquals(1, Node.DECR_FLAG);
563:       assertEquals(2, Node.POST_FLAG);
564:       assertEquals(47, Node.IS_DISPATCHER);
565:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
566:       assertEquals(12, Node.COLUMN_BITS);
567:       assertEquals(52, Node.LENGTH);
568:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
569:       assertEquals(15, Node.NO_SIDE_EFFECTS);
570:       assertEquals(29, Node.JSDOC_INFO_PROP);
571:       assertEquals(53, Node.INPUT_ID);
572:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
573:       assertEquals(49, Node.DIRECT_EVAL);
574:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
575:       assertEquals(36, Node.QUOTED_PROP);
576:       assertEquals(56, Node.CHANGE_TIME);
577:       assertEquals(57, Node.REFLECTED_OBJECT);
578:       assertEquals(48, Node.DIRECTIVES);
579:       assertEquals(55, Node.INFERRED_FUNCTION);
580:       assertEquals(8, Node.FLAG_NO_THROWS);
581:       assertEquals(39, Node.EMPTY_BLOCK);
582:       assertEquals(4095, Node.COLUMN_MASK);
583:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
585:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
586:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
587:       assertEquals(40, Node.ORIGINALNAME_PROP);
588:       assertEquals(50, Node.FREE_CALL);
589:       assertEquals(43, Node.IS_CONSTANT_NAME);
590:       assertEquals(51, Node.STATIC_SOURCE_FILE);
591:       assertEquals(46, Node.IS_NAMESPACE);
592:       assertEquals(54, Node.SLASH_V);
593:       assertFalse(node1.isHook());
594:       assertFalse(node1.isInc());
595:       assertFalse(node1.isSwitch());
596:       assertFalse(node1.isThrow());
597:       assertFalse(node1.isBreak());
598:       assertFalse(node1.isComma());
599:       assertFalse(node1.isFalse());
600:       assertFalse(node1.isNE());
601:       assertFalse(node1.isDelProp());
602:       assertFalse(node1.isIf());
603:       assertFalse(node1.isEmpty());
604:       assertFalse(node1.isIn());
605:       assertFalse(node1.isExprResult());
606:       assertFalse(node1.isTrue());
607:       assertFalse(node1.isDebugger());
608:       assertFalse(node1.isVoid());
609:       assertEquals(32788, node1.getSourcePosition());
610:       assertFalse(node1.isAssign());
611:       assertFalse(node1.hasChildren());
612:       assertFalse(node1.isGetElem());
613:       assertFalse(node1.isTypeOf());
614:       assertFalse(node1.isCast());
615:       assertFalse(node1.isDec());
616:       assertFalse(node1.isFunction());
617:       assertTrue(node1.isNumber());
618:       assertFalse(node1.isReturn());
619:       assertFalse(node1.isGetProp());
620:       assertFalse(node1.isAnd());
621:       assertFalse(node1.isNot());
622:       assertFalse(node1.isObjectLit());
623:       assertFalse(node1.isString());
624:       assertFalse(node1.isBlock());
625:       assertFalse(node1.isAdd());
626:       assertFalse(node1.isNew());
627:       assertFalse(node1.isVar());
628:       assertFalse(node1.isWhile());
629:       assertEquals(8, node1.getLineno());
630:       assertFalse(node1.isName());
631:       assertFalse(node1.isCall());
632:       assertEquals(39, node1.getType());
633:       assertFalse(node1.isContinue());
634:       assertFalse(node1.hasMoreThanOneChild());
635:       assertFalse(node1.isLabel());
636:       assertFalse(node1.isAssignAdd());
637:       assertFalse(node1.isOr());
638:       assertFalse(node1.isSetterDef());
639:       assertFalse(node1.isNull());
640:       assertFalse(node1.isDo());
641:       assertFalse(node1.isTry());
642:       assertFalse(node1.isArrayLit());
643:       assertFalse(node1.hasOneChild());
644:       assertFalse(node1.isDefaultCase());
645:       assertFalse(node1.isFor());
646:       assertFalse(node1.isLabelName());
647:       assertFalse(node1.isRegExp());
648:       assertFalse(node1.isInstanceOf());
649:       assertFalse(node1.isCatch());
650:       assertEquals(0, node1.getChildCount());
651:       assertFalse(node1.isWith());
652:       assertFalse(node1.isThis());
653:       assertFalse(node1.isParamList());
654:       assertEquals(20, node1.getCharno());
655:       assertFalse(node1.isCase());
656:       assertFalse(node1.isStringKey());
657:       assertFalse(node1.isScript());
658:       assertFalse(node1.isGetterDef());
659:       
660:       double double0 = node1.getDouble();
661:       assertFalse(node1.equals((Object)node0));
662:       assertEquals(32, Node.INCRDECR_PROP);
663:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
664:       assertEquals(37, Node.OPT_ARG_NAME);
665:       assertEquals(30, Node.VAR_ARGS_NAME);
666:       assertEquals(57, Node.LAST_PROP);
667:       assertEquals(1, Node.DECR_FLAG);
668:       assertEquals(2, Node.POST_FLAG);
669:       assertEquals(47, Node.IS_DISPATCHER);
670:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
671:       assertEquals(12, Node.COLUMN_BITS);
672:       assertEquals(52, Node.LENGTH);
673:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
674:       assertEquals(15, Node.NO_SIDE_EFFECTS);
675:       assertEquals(29, Node.JSDOC_INFO_PROP);
676:       assertEquals(53, Node.INPUT_ID);
677:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
678:       assertEquals(49, Node.DIRECT_EVAL);
679:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
680:       assertEquals(36, Node.QUOTED_PROP);
681:       assertEquals(56, Node.CHANGE_TIME);
682:       assertEquals(57, Node.REFLECTED_OBJECT);
683:       assertEquals(48, Node.DIRECTIVES);
684:       assertEquals(55, Node.INFERRED_FUNCTION);
685:       assertEquals(8, Node.FLAG_NO_THROWS);
686:       assertEquals(39, Node.EMPTY_BLOCK);
687:       assertEquals(4095, Node.COLUMN_MASK);
688:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
689:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
690:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
691:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
692:       assertEquals(40, Node.ORIGINALNAME_PROP);
693:       assertEquals(50, Node.FREE_CALL);
694:       assertEquals(43, Node.IS_CONSTANT_NAME);
695:       assertEquals(51, Node.STATIC_SOURCE_FILE);
696:       assertEquals(46, Node.IS_NAMESPACE);
697:       assertEquals(54, Node.SLASH_V);
698:       assertEquals(4095.0, double0, 0.01);
699:       assertFalse(node1.isHook());
700:       assertFalse(node1.isInc());
701:       assertFalse(node1.isSwitch());
702:       assertFalse(node1.isThrow());
703:       assertFalse(node1.isBreak());
704:       assertFalse(node1.isComma());
705:       assertFalse(node1.isFalse());
706:       assertFalse(node1.isNE());
707:       assertFalse(node1.isDelProp());
708:       assertFalse(node1.isIf());
709:       assertFalse(node1.isEmpty());
710:       assertFalse(node1.isIn());
711:       assertFalse(node1.isExprResult());
712:       assertFalse(node1.isTrue());
713:       assertFalse(node1.isDebugger());
714:       assertFalse(node1.isVoid());
715:       assertEquals(32788, node1.getSourcePosition());
716:       assertFalse(node1.isAssign());
717:       assertFalse(node1.hasChildren());
718:       assertFalse(node1.isGetElem());
719:       assertFalse(node1.isTypeOf());
720:       assertFalse(node1.isCast());
721:       assertFalse(node1.isDec());
722:       assertFalse(node1.isFunction());
723:       assertTrue(node1.isNumber());
724:       assertFalse(node1.isReturn());
725:       assertFalse(node1.isGetProp());
726:       assertFalse(node1.isAnd());
727:       assertFalse(node1.isNot());
728:       assertFalse(node1.isObjectLit());
729:       assertFalse(node1.isString());
730:       assertFalse(node1.isBlock());
731:       assertFalse(node1.isAdd());
732:       assertFalse(node1.isNew());
733:       assertFalse(node1.isVar());
734:       assertFalse(node1.isWhile());
735:       assertEquals(8, node1.getLineno());
736:       assertFalse(node1.isName());
737:       assertFalse(node1.isCall());
738:       assertEquals(39, node1.getType());
739:       assertFalse(node1.isContinue());
740:       assertFalse(node1.hasMoreThanOneChild());
741:       assertFalse(node1.isLabel());
742:       assertFalse(node1.isAssignAdd());
743:       assertFalse(node1.isOr());
744:       assertFalse(node1.isSetterDef());
745:       assertFalse(node1.isNull());
746:       assertFalse(node1.isDo());
747:       assertFalse(node1.isTry());
748:       assertFalse(node1.isArrayLit());
749:       assertFalse(node1.hasOneChild());
750:       assertFalse(node1.isDefaultCase());
751:       assertFalse(node1.isFor());
752:       assertFalse(node1.isLabelName());
753:       assertFalse(node1.isRegExp());
754:       assertFalse(node1.isInstanceOf());
755:       assertFalse(node1.isCatch());
756:       assertEquals(0, node1.getChildCount());
757:       assertFalse(node1.isWith());
758:       assertFalse(node1.isThis());
759:       assertFalse(node1.isParamList());
760:       assertEquals(20, node1.getCharno());
761:       assertFalse(node1.isCase());
762:       assertFalse(node1.isStringKey());
763:       assertFalse(node1.isScript());
764:       assertFalse(node1.isGetterDef());
765:       
766:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
767:       assertFalse(node0.equals((Object)node1));
768:       assertNull(staticSourceFile0);
769:       assertEquals(4095, Node.COLUMN_MASK);
770:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
771:       assertEquals(55, Node.INFERRED_FUNCTION);
772:       assertEquals(53, Node.INPUT_ID);
773:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
774:       assertEquals(29, Node.JSDOC_INFO_PROP);
775:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
776:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
777:       assertEquals(8, Node.FLAG_NO_THROWS);
778:       assertEquals(39, Node.EMPTY_BLOCK);
779:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
780:       assertEquals(52, Node.LENGTH);
781:       assertEquals(37, Node.OPT_ARG_NAME);
782:       assertEquals(48, Node.DIRECTIVES);
783:       assertEquals(36, Node.QUOTED_PROP);
784:       assertEquals(57, Node.REFLECTED_OBJECT);
785:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
786:       assertEquals(56, Node.CHANGE_TIME);
787:       assertEquals(30, Node.VAR_ARGS_NAME);
788:       assertEquals(49, Node.DIRECT_EVAL);
789:       assertEquals(1, Node.DECR_FLAG);
790:       assertEquals(15, Node.NO_SIDE_EFFECTS);
791:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
792:       assertEquals(32, Node.INCRDECR_PROP);
793:       assertEquals(2, Node.POST_FLAG);
794:       assertEquals(12, Node.COLUMN_BITS);
795:       assertEquals(57, Node.LAST_PROP);
796:       assertEquals(47, Node.IS_DISPATCHER);
797:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
798:       assertEquals(50, Node.FREE_CALL);
799:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
800:       assertEquals(40, Node.ORIGINALNAME_PROP);
801:       assertEquals(43, Node.IS_CONSTANT_NAME);
802:       assertEquals(51, Node.STATIC_SOURCE_FILE);
803:       assertEquals(46, Node.IS_NAMESPACE);
804:       assertEquals(54, Node.SLASH_V);
805:       assertFalse(node0.isFor());
806:       assertFalse(node0.isEmpty());
807:       assertFalse(node0.isIf());
808:       assertFalse(node0.isArrayLit());
809:       assertFalse(node0.isTry());
810:       assertFalse(node0.isDelProp());
811:       assertFalse(node0.isRegExp());
812:       assertFalse(node0.isFunction());
813:       assertFalse(node0.isCatch());
814:       assertEquals(40, node0.getType());
815:       assertFalse(node0.isDefaultCase());
816:       assertFalse(node0.isVoid());
817:       assertFalse(node0.isNE());
818:       assertFalse(node0.isSetterDef());
819:       assertFalse(node0.isInc());
820:       assertFalse(node0.isNull());
821:       assertFalse(node0.isTrue());
822:       assertFalse(node0.isIn());
823:       assertFalse(node0.isThrow());
824:       assertFalse(node0.isFalse());
825:       assertFalse(node0.isCall());
826:       assertFalse(node0.isBreak());
827:       assertFalse(node0.isName());
828:       assertFalse(node0.isComma());
829:       assertFalse(node0.isContinue());
830:       assertFalse(node0.isAnd());
831:       assertFalse(node0.isWhile());
832:       assertFalse(node0.isGetProp());
833:       assertFalse(node0.isDebugger());
834:       assertEquals((-1), node0.getSourcePosition());
835:       assertFalse(node0.isNot());
836:       assertFalse(node0.isObjectLit());
837:       assertFalse(node0.isGetElem());
838:       assertFalse(node0.isCast());
839:       assertFalse(node0.hasOneChild());
840:       assertFalse(node0.isLabelName());
841:       assertFalse(node0.isLabel());
842:       assertFalse(node0.isReturn());
843:       assertFalse(node0.isExprResult());
844:       assertFalse(node0.isDec());
845:       assertFalse(node0.hasChildren());
846:       assertFalse(node0.hasMoreThanOneChild());
847:       assertFalse(node0.isWith());
848:       assertFalse(node0.isAssign());
849:       assertFalse(node0.isTypeOf());
850:       assertEquals((-1), node0.getLineno());
851:       assertFalse(node0.isAssignAdd());
852:       assertFalse(node0.isDo());
853:       assertFalse(node0.isNew());
854:       assertFalse(node0.isAdd());
855:       assertFalse(node0.isOr());
856:       assertFalse(node0.isStringKey());
857:       assertFalse(node0.isVar());
858:       assertTrue(node0.isString());
859:       assertFalse(node0.isThis());
860:       assertFalse(node0.isBlock());
861:       assertFalse(node0.isHook());
862:       assertFalse(node0.isInstanceOf());
863:       assertEquals(0, node0.getChildCount());
864:       assertFalse(node0.isCase());
865:       assertFalse(node0.isSwitch());
866:       assertEquals((-1), node0.getCharno());
867:       assertFalse(node0.isParamList());
868:       assertFalse(node0.isScript());
869:       assertFalse(node0.isNumber());
870:       assertFalse(node0.isGetterDef());
871:       
872:       boolean boolean2 = node1.isUnscopedQualifiedName();
873:       assertFalse(node1.equals((Object)node0));
874:       assertTrue(boolean2 == boolean1);
875:       assertTrue(boolean2 == boolean0);
876:       assertEquals(32, Node.INCRDECR_PROP);
877:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
878:       assertEquals(37, Node.OPT_ARG_NAME);
879:       assertEquals(30, Node.VAR_ARGS_NAME);
880:       assertEquals(57, Node.LAST_PROP);
881:       assertEquals(1, Node.DECR_FLAG);
882:       assertEquals(2, Node.POST_FLAG);
883:       assertEquals(47, Node.IS_DISPATCHER);
884:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
885:       assertEquals(12, Node.COLUMN_BITS);
886:       assertEquals(52, Node.LENGTH);
887:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
888:       assertEquals(15, Node.NO_SIDE_EFFECTS);
889:       assertEquals(29, Node.JSDOC_INFO_PROP);
890:       assertEquals(53, Node.INPUT_ID);
891:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
892:       assertEquals(49, Node.DIRECT_EVAL);
893:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
894:       assertEquals(36, Node.QUOTED_PROP);
895:       assertEquals(56, Node.CHANGE_TIME);
896:       assertEquals(57, Node.REFLECTED_OBJECT);
897:       assertEquals(48, Node.DIRECTIVES);
898:       assertEquals(55, Node.INFERRED_FUNCTION);
899:       assertEquals(8, Node.FLAG_NO_THROWS);
900:       assertEquals(39, Node.EMPTY_BLOCK);
901:       assertEquals(4095, Node.COLUMN_MASK);
902:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
903:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
904:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
905:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
906:       assertEquals(40, Node.ORIGINALNAME_PROP);
907:       assertEquals(50, Node.FREE_CALL);
908:       assertEquals(43, Node.IS_CONSTANT_NAME);
909:       assertEquals(51, Node.STATIC_SOURCE_FILE);
910:       assertEquals(46, Node.IS_NAMESPACE);
911:       assertEquals(54, Node.SLASH_V);
912:       assertFalse(boolean2);
913:       assertFalse(node1.isHook());
914:       assertFalse(node1.isInc());
915:       assertFalse(node1.isSwitch());
916:       assertFalse(node1.isThrow());
917:       assertFalse(node1.isBreak());
918:       assertFalse(node1.isComma());
919:       assertFalse(node1.isFalse());
920:       assertFalse(node1.isNE());
921:       assertFalse(node1.isDelProp());
922:       assertFalse(node1.isIf());
923:       assertFalse(node1.isEmpty());
924:       assertFalse(node1.isIn());
925:       assertFalse(node1.isExprResult());
926:       assertFalse(node1.isTrue());
927:       assertFalse(node1.isDebugger());
928:       assertFalse(node1.isVoid());
929:       assertEquals(32788, node1.getSourcePosition());
930:       assertFalse(node1.isAssign());
931:       assertFalse(node1.hasChildren());
932:       assertFalse(node1.isGetElem());
933:       assertFalse(node1.isTypeOf());
934:       assertFalse(node1.isCast());
935:       assertFalse(node1.isDec());
936:       assertFalse(node1.isFunction());
937:       assertTrue(node1.isNumber());
938:       assertFalse(node1.isReturn());
939:       assertFalse(node1.isGetProp());
940:       assertFalse(node1.isAnd());
941:       assertFalse(node1.isNot());
942:       assertFalse(node1.isObjectLit());
943:       assertFalse(node1.isString());
944:       assertFalse(node1.isBlock());
945:       assertFalse(node1.isAdd());
946:       assertFalse(node1.isNew());
947:       assertFalse(node1.isVar());
948:       assertFalse(node1.isWhile());
949:       assertEquals(8, node1.getLineno());
950:       assertFalse(node1.isName());
951:       assertFalse(node1.isCall());
952:       assertEquals(39, node1.getType());
953:       assertFalse(node1.isContinue());
954:       assertFalse(node1.hasMoreThanOneChild());
955:       assertFalse(node1.isLabel());
956:       assertFalse(node1.isAssignAdd());
957:       assertFalse(node1.isOr());
958:       assertFalse(node1.isSetterDef());
959:       assertFalse(node1.isNull());
960:       assertFalse(node1.isDo());
961:       assertFalse(node1.isTry());
962:       assertFalse(node1.isArrayLit());
963:       assertFalse(node1.hasOneChild());
964:       assertFalse(node1.isDefaultCase());
965:       assertFalse(node1.isFor());
966:       assertFalse(node1.isLabelName());
967:       assertFalse(node1.isRegExp());
968:       assertFalse(node1.isInstanceOf());
969:       assertFalse(node1.isCatch());
970:       assertEquals(0, node1.getChildCount());
971:       assertFalse(node1.isWith());
972:       assertFalse(node1.isThis());
973:       assertFalse(node1.isParamList());
974:       assertEquals(20, node1.getCharno());
975:       assertFalse(node1.isCase());
976:       assertFalse(node1.isStringKey());
977:       assertFalse(node1.isScript());
978:       assertFalse(node1.isGetterDef());
979:       
980:       Iterable<Node> iterable0 = node1.siblings();
981:       assertFalse(node1.equals((Object)node0));
982:       assertNotNull(iterable0);
983:       assertEquals(32, Node.INCRDECR_PROP);
984:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
985:       assertEquals(37, Node.OPT_ARG_NAME);
986:       assertEquals(30, Node.VAR_ARGS_NAME);
987:       assertEquals(57, Node.LAST_PROP);
988:       assertEquals(1, Node.DECR_FLAG);
989:       assertEquals(2, Node.POST_FLAG);
990:       assertEquals(47, Node.IS_DISPATCHER);
991:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
992:       assertEquals(12, Node.COLUMN_BITS);
993:       assertEquals(52, Node.LENGTH);
994:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
995:       assertEquals(15, Node.NO_SIDE_EFFECTS);
996:       assertEquals(29, Node.JSDOC_INFO_PROP);
997:       assertEquals(53, Node.INPUT_ID);
998:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
999:       assertEquals(49, Node.DIRECT_EVAL);
1000:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1001:       assertEquals(36, Node.QUOTED_PROP);
1002:       assertEquals(56, Node.CHANGE_TIME);
1003:       assertEquals(57, Node.REFLECTED_OBJECT);
1004:       assertEquals(48, Node.DIRECTIVES);
1005:       assertEquals(55, Node.INFERRED_FUNCTION);
1006:       assertEquals(8, Node.FLAG_NO_THROWS);
1007:       assertEquals(39, Node.EMPTY_BLOCK);
1008:       assertEquals(4095, Node.COLUMN_MASK);
1009:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1010:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1011:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1012:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1013:       assertEquals(40, Node.ORIGINALNAME_PROP);
1014:       assertEquals(50, Node.FREE_CALL);
1015:       assertEquals(43, Node.IS_CONSTANT_NAME);
1016:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1017:       assertEquals(46, Node.IS_NAMESPACE);
1018:       assertEquals(54, Node.SLASH_V);
1019:       assertFalse(node1.isHook());
1020:       assertFalse(node1.isInc());
1021:       assertFalse(node1.isSwitch());
1022:       assertFalse(node1.isThrow());
1023:       assertFalse(node1.isBreak());
1024:       assertFalse(node1.isComma());
1025:       assertFalse(node1.isFalse());
1026:       assertFalse(node1.isNE());
1027:       assertFalse(node1.isDelProp());
1028:       assertFalse(node1.isIf());
1029:       assertFalse(node1.isEmpty());
1030:       assertFalse(node1.isIn());
1031:       assertFalse(node1.isExprResult());
1032:       assertFalse(node1.isTrue());
1033:       assertFalse(node1.isDebugger());
1034:       assertFalse(node1.isVoid());
1035:       assertEquals(32788, node1.getSourcePosition());
1036:       assertFalse(node1.isAssign());
1037:       assertFalse(node1.hasChildren());
1038:       assertFalse(node1.isGetElem());
1039:       assertFalse(node1.isTypeOf());
1040:       assertFalse(node1.isCast());
1041:       assertFalse(node1.isDec());
1042:       assertFalse(node1.isFunction());
1043:       assertTrue(node1.isNumber());
1044:       assertFalse(node1.isReturn());
1045:       assertFalse(node1.isGetProp());
1046:       assertFalse(node1.isAnd());
1047:       assertFalse(node1.isNot());
1048:       assertFalse(node1.isObjectLit());
1049:       assertFalse(node1.isString());
1050:       assertFalse(node1.isBlock());
1051:       assertFalse(node1.isAdd());
1052:       assertFalse(node1.isNew());
1053:       assertFalse(node1.isVar());
1054:       assertFalse(node1.isWhile());
1055:       assertEquals(8, node1.getLineno());
1056:       assertFalse(node1.isName());
1057:       assertFalse(node1.isCall());
1058:       assertEquals(39, node1.getType());
1059:       assertFalse(node1.isContinue());
1060:       assertFalse(node1.hasMoreThanOneChild());
1061:       assertFalse(node1.isLabel());
1062:       assertFalse(node1.isAssignAdd());
1063:       assertFalse(node1.isOr());
1064:       assertFalse(node1.isSetterDef());
1065:       assertFalse(node1.isNull());
1066:       assertFalse(node1.isDo());
1067:       assertFalse(node1.isTry());
1068:       assertFalse(node1.isArrayLit());
1069:       assertFalse(node1.hasOneChild());
1070:       assertFalse(node1.isDefaultCase());
1071:       assertFalse(node1.isFor());
1072:       assertFalse(node1.isLabelName());
1073:       assertFalse(node1.isRegExp());
1074:       assertFalse(node1.isInstanceOf());
1075:       assertFalse(node1.isCatch());
1076:       assertEquals(0, node1.getChildCount());
1077:       assertFalse(node1.isWith());
1078:       assertFalse(node1.isThis());
1079:       assertFalse(node1.isParamList());
1080:       assertEquals(20, node1.getCharno());
1081:       assertFalse(node1.isCase());
1082:       assertFalse(node1.isStringKey());
1083:       assertFalse(node1.isScript());
1084:       assertFalse(node1.isGetterDef());
1085:       
1086:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
1087:       assertFalse(node0.equals((Object)node1));
1088:       assertFalse(node1.equals((Object)node0));
1089:       assertNotNull(node_NodeMismatch0);
1090:       assertEquals(4095, Node.COLUMN_MASK);
1091:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1092:       assertEquals(55, Node.INFERRED_FUNCTION);
1093:       assertEquals(53, Node.INPUT_ID);
1094:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1095:       assertEquals(29, Node.JSDOC_INFO_PROP);
1096:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1097:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1098:       assertEquals(8, Node.FLAG_NO_THROWS);
1099:       assertEquals(39, Node.EMPTY_BLOCK);
1100:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1101:       assertEquals(52, Node.LENGTH);
1102:       assertEquals(37, Node.OPT_ARG_NAME);
1103:       assertEquals(48, Node.DIRECTIVES);
1104:       assertEquals(36, Node.QUOTED_PROP);
1105:       assertEquals(57, Node.REFLECTED_OBJECT);
1106:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1107:       assertEquals(56, Node.CHANGE_TIME);
1108:       assertEquals(30, Node.VAR_ARGS_NAME);
1109:       assertEquals(49, Node.DIRECT_EVAL);
1110:       assertEquals(1, Node.DECR_FLAG);
1111:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1113:       assertEquals(32, Node.INCRDECR_PROP);
1114:       assertEquals(2, Node.POST_FLAG);
1115:       assertEquals(12, Node.COLUMN_BITS);
1116:       assertEquals(57, Node.LAST_PROP);
1117:       assertEquals(47, Node.IS_DISPATCHER);
1118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1119:       assertEquals(50, Node.FREE_CALL);
1120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1121:       assertEquals(40, Node.ORIGINALNAME_PROP);
1122:       assertEquals(43, Node.IS_CONSTANT_NAME);
1123:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1124:       assertEquals(46, Node.IS_NAMESPACE);
1125:       assertEquals(54, Node.SLASH_V);
1126:       assertEquals(32, Node.INCRDECR_PROP);
1127:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1128:       assertEquals(37, Node.OPT_ARG_NAME);
1129:       assertEquals(30, Node.VAR_ARGS_NAME);
1130:       assertEquals(57, Node.LAST_PROP);
1131:       assertEquals(1, Node.DECR_FLAG);
1132:       assertEquals(2, Node.POST_FLAG);
1133:       assertEquals(47, Node.IS_DISPATCHER);
1134:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1135:       assertEquals(12, Node.COLUMN_BITS);
1136:       assertEquals(52, Node.LENGTH);
1137:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1139:       assertEquals(29, Node.JSDOC_INFO_PROP);
1140:       assertEquals(53, Node.INPUT_ID);
1141:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1142:       assertEquals(49, Node.DIRECT_EVAL);
1143:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1144:       assertEquals(36, Node.QUOTED_PROP);
1145:       assertEquals(56, Node.CHANGE_TIME);
1146:       assertEquals(57, Node.REFLECTED_OBJECT);
1147:       assertEquals(48, Node.DIRECTIVES);
1148:       assertEquals(55, Node.INFERRED_FUNCTION);
1149:       assertEquals(8, Node.FLAG_NO_THROWS);
1150:       assertEquals(39, Node.EMPTY_BLOCK);
1151:       assertEquals(4095, Node.COLUMN_MASK);
1152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1153:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1154:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1155:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1156:       assertEquals(40, Node.ORIGINALNAME_PROP);
1157:       assertEquals(50, Node.FREE_CALL);
1158:       assertEquals(43, Node.IS_CONSTANT_NAME);
1159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1160:       assertEquals(46, Node.IS_NAMESPACE);
1161:       assertEquals(54, Node.SLASH_V);
1162:       assertFalse(node0.isFor());
1163:       assertFalse(node0.isEmpty());
1164:       assertFalse(node0.isIf());
1165:       assertFalse(node0.isArrayLit());
1166:       assertFalse(node0.isTry());
1167:       assertFalse(node0.isDelProp());
1168:       assertFalse(node0.isRegExp());
1169:       assertFalse(node0.isFunction());
1170:       assertFalse(node0.isCatch());
1171:       assertEquals(40, node0.getType());
1172:       assertFalse(node0.isDefaultCase());
1173:       assertFalse(node0.isVoid());
1174:       assertFalse(node0.isNE());
1175:       assertFalse(node0.isSetterDef());
1176:       assertFalse(node0.isInc());
1177:       assertFalse(node0.isNull());
1178:       assertFalse(node0.isTrue());
1179:       assertFalse(node0.isIn());
1180:       assertFalse(node0.isThrow());
1181:       assertFalse(node0.isFalse());
1182:       assertFalse(node0.isCall());
1183:       assertFalse(node0.isBreak());
1184:       assertFalse(node0.isName());
1185:       assertFalse(node0.isComma());
1186:       assertFalse(node0.isContinue());
1187:       assertFalse(node0.isAnd());
1188:       assertFalse(node0.isWhile());
1189:       assertFalse(node0.isGetProp());
1190:       assertFalse(node0.isDebugger());
1191:       assertEquals((-1), node0.getSourcePosition());
1192:       assertFalse(node0.isNot());
1193:       assertFalse(node0.isObjectLit());
1194:       assertFalse(node0.isGetElem());
1195:       assertFalse(node0.isCast());
1196:       assertFalse(node0.hasOneChild());
1197:       assertFalse(node0.isLabelName());
1198:       assertFalse(node0.isLabel());
1199:       assertFalse(node0.isReturn());
1200:       assertFalse(node0.isExprResult());
1201:       assertFalse(node0.isDec());
1202:       assertFalse(node0.hasChildren());
1203:       assertFalse(node0.hasMoreThanOneChild());
1204:       assertFalse(node0.isWith());
1205:       assertFalse(node0.isAssign());
1206:       assertFalse(node0.isTypeOf());
1207:       assertEquals((-1), node0.getLineno());
1208:       assertFalse(node0.isAssignAdd());
1209:       assertFalse(node0.isDo());
1210:       assertFalse(node0.isNew());
1211:       assertFalse(node0.isAdd());
1212:       assertFalse(node0.isOr());
1213:       assertFalse(node0.isStringKey());
1214:       assertFalse(node0.isVar());
1215:       assertTrue(node0.isString());
1216:       assertFalse(node0.isThis());
1217:       assertFalse(node0.isBlock());
1218:       assertFalse(node0.isHook());
1219:       assertFalse(node0.isInstanceOf());
1220:       assertEquals(0, node0.getChildCount());
1221:       assertFalse(node0.isCase());
1222:       assertFalse(node0.isSwitch());
1223:       assertEquals((-1), node0.getCharno());
1224:       assertFalse(node0.isParamList());
1225:       assertFalse(node0.isScript());
1226:       assertFalse(node0.isNumber());
1227:       assertFalse(node0.isGetterDef());
1228:       assertFalse(node1.isHook());
1229:       assertFalse(node1.isInc());
1230:       assertFalse(node1.isSwitch());
1231:       assertFalse(node1.isThrow());
1232:       assertFalse(node1.isBreak());
1233:       assertFalse(node1.isComma());
1234:       assertFalse(node1.isFalse());
1235:       assertFalse(node1.isNE());
1236:       assertFalse(node1.isDelProp());
1237:       assertFalse(node1.isIf());
1238:       assertFalse(node1.isEmpty());
1239:       assertFalse(node1.isIn());
1240:       assertFalse(node1.isExprResult());
1241:       assertFalse(node1.isTrue());
1242:       assertFalse(node1.isDebugger());
1243:       assertFalse(node1.isVoid());
1244:       assertEquals(32788, node1.getSourcePosition());
1245:       assertFalse(node1.isAssign());
1246:       assertFalse(node1.hasChildren());
1247:       assertFalse(node1.isGetElem());
1248:       assertFalse(node1.isTypeOf());
1249:       assertFalse(node1.isCast());
1250:       assertFalse(node1.isDec());
1251:       assertFalse(node1.isFunction());
1252:       assertTrue(node1.isNumber());
1253:       assertFalse(node1.isReturn());
1254:       assertFalse(node1.isGetProp());
1255:       assertFalse(node1.isAnd());
1256:       assertFalse(node1.isNot());
1257:       assertFalse(node1.isObjectLit());
1258:       assertFalse(node1.isString());
1259:       assertFalse(node1.isBlock());
1260:       assertFalse(node1.isAdd());
1261:       assertFalse(node1.isNew());
1262:       assertFalse(node1.isVar());
1263:       assertFalse(node1.isWhile());
1264:       assertEquals(8, node1.getLineno());
1265:       assertFalse(node1.isName());
1266:       assertFalse(node1.isCall());
1267:       assertEquals(39, node1.getType());
1268:       assertFalse(node1.isContinue());
1269:       assertFalse(node1.hasMoreThanOneChild());
1270:       assertFalse(node1.isLabel());
1271:       assertFalse(node1.isAssignAdd());
1272:       assertFalse(node1.isOr());
1273:       assertFalse(node1.isSetterDef());
1274:       assertFalse(node1.isNull());
1275:       assertFalse(node1.isDo());
1276:       assertFalse(node1.isTry());
1277:       assertFalse(node1.isArrayLit());
1278:       assertFalse(node1.hasOneChild());
1279:       assertFalse(node1.isDefaultCase());
1280:       assertFalse(node1.isFor());
1281:       assertFalse(node1.isLabelName());
1282:       assertFalse(node1.isRegExp());
1283:       assertFalse(node1.isInstanceOf());
1284:       assertFalse(node1.isCatch());
1285:       assertEquals(0, node1.getChildCount());
1286:       assertFalse(node1.isWith());
1287:       assertFalse(node1.isThis());
1288:       assertFalse(node1.isParamList());
1289:       assertEquals(20, node1.getCharno());
1290:       assertFalse(node1.isCase());
1291:       assertFalse(node1.isStringKey());
1292:       assertFalse(node1.isScript());
1293:       assertFalse(node1.isGetterDef());
1294:       
1295:       String string1 = node1.getSourceFileName();
1296:       assertFalse(node1.equals((Object)node0));
1297:       assertNull(string1);
1298:       assertEquals(32, Node.INCRDECR_PROP);
1299:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1300:       assertEquals(37, Node.OPT_ARG_NAME);
1301:       assertEquals(30, Node.VAR_ARGS_NAME);
1302:       assertEquals(57, Node.LAST_PROP);
1303:       assertEquals(1, Node.DECR_FLAG);
1304:       assertEquals(2, Node.POST_FLAG);
1305:       assertEquals(47, Node.IS_DISPATCHER);
1306:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1307:       assertEquals(12, Node.COLUMN_BITS);
1308:       assertEquals(52, Node.LENGTH);
1309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1310:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1311:       assertEquals(29, Node.JSDOC_INFO_PROP);
1312:       assertEquals(53, Node.INPUT_ID);
1313:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1314:       assertEquals(49, Node.DIRECT_EVAL);
1315:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1316:       assertEquals(36, Node.QUOTED_PROP);
1317:       assertEquals(56, Node.CHANGE_TIME);
1318:       assertEquals(57, Node.REFLECTED_OBJECT);
1319:       assertEquals(48, Node.DIRECTIVES);
1320:       assertEquals(55, Node.INFERRED_FUNCTION);
1321:       assertEquals(8, Node.FLAG_NO_THROWS);
1322:       assertEquals(39, Node.EMPTY_BLOCK);
1323:       assertEquals(4095, Node.COLUMN_MASK);
1324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1327:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1328:       assertEquals(40, Node.ORIGINALNAME_PROP);
1329:       assertEquals(50, Node.FREE_CALL);
1330:       assertEquals(43, Node.IS_CONSTANT_NAME);
1331:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1332:       assertEquals(46, Node.IS_NAMESPACE);
1333:       assertEquals(54, Node.SLASH_V);
1334:       assertFalse(node1.isHook());
1335:       assertFalse(node1.isInc());
1336:       assertFalse(node1.isSwitch());
1337:       assertFalse(node1.isThrow());
1338:       assertFalse(node1.isBreak());
1339:       assertFalse(node1.isComma());
1340:       assertFalse(node1.isFalse());
1341:       assertFalse(node1.isNE());
1342:       assertFalse(node1.isDelProp());
1343:       assertFalse(node1.isIf());
1344:       assertFalse(node1.isEmpty());
1345:       assertFalse(node1.isIn());
1346:       assertFalse(node1.isExprResult());
1347:       assertFalse(node1.isTrue());
1348:       assertFalse(node1.isDebugger());
1349:       assertFalse(node1.isVoid());
1350:       assertEquals(32788, node1.getSourcePosition());
1351:       assertFalse(node1.isAssign());
1352:       assertFalse(node1.hasChildren());
1353:       assertFalse(node1.isGetElem());
1354:       assertFalse(node1.isTypeOf());
1355:       assertFalse(node1.isCast());
1356:       assertFalse(node1.isDec());
1357:       assertFalse(node1.isFunction());
1358:       assertTrue(node1.isNumber());
1359:       assertFalse(node1.isReturn());
1360:       assertFalse(node1.isGetProp());
1361:       assertFalse(node1.isAnd());
1362:       assertFalse(node1.isNot());
1363:       assertFalse(node1.isObjectLit());
1364:       assertFalse(node1.isString());
1365:       assertFalse(node1.isBlock());
1366:       assertFalse(node1.isAdd());
1367:       assertFalse(node1.isNew());
1368:       assertFalse(node1.isVar());
1369:       assertFalse(node1.isWhile());
1370:       assertEquals(8, node1.getLineno());
1371:       assertFalse(node1.isName());
1372:       assertFalse(node1.isCall());
1373:       assertEquals(39, node1.getType());
1374:       assertFalse(node1.isContinue());
1375:       assertFalse(node1.hasMoreThanOneChild());
1376:       assertFalse(node1.isLabel());
1377:       assertFalse(node1.isAssignAdd());
1378:       assertFalse(node1.isOr());
1379:       assertFalse(node1.isSetterDef());
1380:       assertFalse(node1.isNull());
1381:       assertFalse(node1.isDo());
1382:       assertFalse(node1.isTry());
1383:       assertFalse(node1.isArrayLit());
1384:       assertFalse(node1.hasOneChild());
1385:       assertFalse(node1.isDefaultCase());
1386:       assertFalse(node1.isFor());
1387:       assertFalse(node1.isLabelName());
1388:       assertFalse(node1.isRegExp());
1389:       assertFalse(node1.isInstanceOf());
1390:       assertFalse(node1.isCatch());
1391:       assertEquals(0, node1.getChildCount());
1392:       assertFalse(node1.isWith());
1393:       assertFalse(node1.isThis());
1394:       assertFalse(node1.isParamList());
1395:       assertEquals(20, node1.getCharno());
1396:       assertFalse(node1.isCase());
1397:       assertFalse(node1.isStringKey());
1398:       assertFalse(node1.isScript());
1399:       assertFalse(node1.isGetterDef());
1400:       
1401:       Node node2 = node1.srcrefTree(node0);
1402:       assertFalse(node0.equals((Object)node1));
1403:       assertFalse(node1.equals((Object)node0));
1404:       assertFalse(node2.equals((Object)node0));
1405:       assertNotNull(node2);
1406:       assertSame(node1, node2);
1407:       assertSame(node2, node1);
1408:       assertEquals(4095, Node.COLUMN_MASK);
1409:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1410:       assertEquals(55, Node.INFERRED_FUNCTION);
1411:       assertEquals(53, Node.INPUT_ID);
1412:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1413:       assertEquals(29, Node.JSDOC_INFO_PROP);
1414:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1415:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1416:       assertEquals(8, Node.FLAG_NO_THROWS);
1417:       assertEquals(39, Node.EMPTY_BLOCK);
1418:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1419:       assertEquals(52, Node.LENGTH);
1420:       assertEquals(37, Node.OPT_ARG_NAME);
1421:       assertEquals(48, Node.DIRECTIVES);
1422:       assertEquals(36, Node.QUOTED_PROP);
1423:       assertEquals(57, Node.REFLECTED_OBJECT);
1424:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1425:       assertEquals(56, Node.CHANGE_TIME);
1426:       assertEquals(30, Node.VAR_ARGS_NAME);
1427:       assertEquals(49, Node.DIRECT_EVAL);
1428:       assertEquals(1, Node.DECR_FLAG);
1429:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1430:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1431:       assertEquals(32, Node.INCRDECR_PROP);
1432:       assertEquals(2, Node.POST_FLAG);
1433:       assertEquals(12, Node.COLUMN_BITS);
1434:       assertEquals(57, Node.LAST_PROP);
1435:       assertEquals(47, Node.IS_DISPATCHER);
1436:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1437:       assertEquals(50, Node.FREE_CALL);
1438:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1439:       assertEquals(40, Node.ORIGINALNAME_PROP);
1440:       assertEquals(43, Node.IS_CONSTANT_NAME);
1441:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1442:       assertEquals(46, Node.IS_NAMESPACE);
1443:       assertEquals(54, Node.SLASH_V);
1444:       assertEquals(32, Node.INCRDECR_PROP);
1445:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1446:       assertEquals(37, Node.OPT_ARG_NAME);
1447:       assertEquals(30, Node.VAR_ARGS_NAME);
1448:       assertEquals(57, Node.LAST_PROP);
1449:       assertEquals(1, Node.DECR_FLAG);
1450:       assertEquals(2, Node.POST_FLAG);
1451:       assertEquals(47, Node.IS_DISPATCHER);
1452:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1453:       assertEquals(12, Node.COLUMN_BITS);
1454:       assertEquals(52, Node.LENGTH);
1455:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1456:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1457:       assertEquals(29, Node.JSDOC_INFO_PROP);
1458:       assertEquals(53, Node.INPUT_ID);
1459:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1460:       assertEquals(49, Node.DIRECT_EVAL);
1461:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1462:       assertEquals(36, Node.QUOTED_PROP);
1463:       assertEquals(56, Node.CHANGE_TIME);
1464:       assertEquals(57, Node.REFLECTED_OBJECT);
1465:       assertEquals(48, Node.DIRECTIVES);
1466:       assertEquals(55, Node.INFERRED_FUNCTION);
1467:       assertEquals(8, Node.FLAG_NO_THROWS);
1468:       assertEquals(39, Node.EMPTY_BLOCK);
1469:       assertEquals(4095, Node.COLUMN_MASK);
1470:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1472:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1473:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1474:       assertEquals(40, Node.ORIGINALNAME_PROP);
1475:       assertEquals(50, Node.FREE_CALL);
1476:       assertEquals(43, Node.IS_CONSTANT_NAME);
1477:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1478:       assertEquals(46, Node.IS_NAMESPACE);
1479:       assertEquals(54, Node.SLASH_V);
1480:       assertEquals(56, Node.CHANGE_TIME);
1481:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1482:       assertEquals(29, Node.JSDOC_INFO_PROP);
1483:       assertEquals(47, Node.IS_DISPATCHER);
1484:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1485:       assertEquals(2, Node.POST_FLAG);
1486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1487:       assertEquals(46, Node.IS_NAMESPACE);
1488:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1489:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1490:       assertEquals(37, Node.OPT_ARG_NAME);
1491:       assertEquals(49, Node.DIRECT_EVAL);
1492:       assertEquals(43, Node.IS_CONSTANT_NAME);
1493:       assertEquals(4095, Node.COLUMN_MASK);
1494:       assertEquals(32, Node.INCRDECR_PROP);
1495:       assertEquals(12, Node.COLUMN_BITS);
1496:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1497:       assertEquals(1, Node.DECR_FLAG);
1498:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1499:       assertEquals(39, Node.EMPTY_BLOCK);
1500:       assertEquals(40, Node.ORIGINALNAME_PROP);
1501:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1502:       assertEquals(50, Node.FREE_CALL);
1503:       assertEquals(8, Node.FLAG_NO_THROWS);
1504:       assertEquals(57, Node.REFLECTED_OBJECT);
1505:       assertEquals(54, Node.SLASH_V);
1506:       assertEquals(48, Node.DIRECTIVES);
1507:       assertEquals(30, Node.VAR_ARGS_NAME);
1508:       assertEquals(36, Node.QUOTED_PROP);
1509:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1510:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1511:       assertEquals(55, Node.INFERRED_FUNCTION);
1512:       assertEquals(52, Node.LENGTH);
1513:       assertEquals(53, Node.INPUT_ID);
1514:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1515:       assertEquals(57, Node.LAST_PROP);
1516:       assertFalse(node0.isFor());
1517:       assertFalse(node0.isEmpty());
1518:       assertFalse(node0.isIf());
1519:       assertFalse(node0.isArrayLit());
1520:       assertFalse(node0.isTry());
1521:       assertFalse(node0.isDelProp());
1522:       assertFalse(node0.isRegExp());
1523:       assertFalse(node0.isFunction());
1524:       assertFalse(node0.isCatch());
1525:       assertEquals(40, node0.getType());
1526:       assertFalse(node0.isDefaultCase());
1527:       assertFalse(node0.isVoid());
1528:       assertFalse(node0.isNE());
1529:       assertFalse(node0.isSetterDef());
1530:       assertFalse(node0.isInc());
1531:       assertFalse(node0.isNull());
1532:       assertFalse(node0.isTrue());
1533:       assertFalse(node0.isIn());
1534:       assertFalse(node0.isThrow());
1535:       assertFalse(node0.isFalse());
1536:       assertFalse(node0.isCall());
1537:       assertFalse(node0.isBreak());
1538:       assertFalse(node0.isName());
1539:       assertFalse(node0.isComma());
1540:       assertFalse(node0.isContinue());
1541:       assertFalse(node0.isAnd());
1542:       assertFalse(node0.isWhile());
1543:       assertFalse(node0.isGetProp());
1544:       assertFalse(node0.isDebugger());
1545:       assertEquals((-1), node0.getSourcePosition());
1546:       assertFalse(node0.isNot());
1547:       assertFalse(node0.isObjectLit());
1548:       assertFalse(node0.isGetElem());
1549:       assertFalse(node0.isCast());
1550:       assertFalse(node0.hasOneChild());
1551:       assertFalse(node0.isLabelName());
1552:       assertFalse(node0.isLabel());
1553:       assertFalse(node0.isReturn());
1554:       assertFalse(node0.isExprResult());
1555:       assertFalse(node0.isDec());
1556:       assertFalse(node0.hasChildren());
1557:       assertFalse(node0.hasMoreThanOneChild());
1558:       assertFalse(node0.isWith());
1559:       assertFalse(node0.isAssign());
1560:       assertFalse(node0.isTypeOf());
1561:       assertEquals((-1), node0.getLineno());
1562:       assertFalse(node0.isAssignAdd());
1563:       assertFalse(node0.isDo());
1564:       assertFalse(node0.isNew());
1565:       assertFalse(node0.isAdd());
1566:       assertFalse(node0.isOr());
1567:       assertFalse(node0.isStringKey());
1568:       assertFalse(node0.isVar());
1569:       assertTrue(node0.isString());
1570:       assertFalse(node0.isThis());
1571:       assertFalse(node0.isBlock());
1572:       assertFalse(node0.isHook());
1573:       assertFalse(node0.isInstanceOf());
1574:       assertEquals(0, node0.getChildCount());
1575:       assertFalse(node0.isCase());
1576:       assertFalse(node0.isSwitch());
1577:       assertEquals((-1), node0.getCharno());
1578:       assertFalse(node0.isParamList());
1579:       assertFalse(node0.isScript());
1580:       assertFalse(node0.isNumber());
1581:       assertFalse(node0.isGetterDef());
1582:       assertEquals((-1), node1.getCharno());
1583:       assertFalse(node1.isHook());
1584:       assertFalse(node1.isInc());
1585:       assertFalse(node1.isSwitch());
1586:       assertFalse(node1.isThrow());
1587:       assertFalse(node1.isBreak());
1588:       assertFalse(node1.isComma());
1589:       assertFalse(node1.isFalse());
1590:       assertFalse(node1.isNE());
1591:       assertFalse(node1.isDelProp());
1592:       assertFalse(node1.isIf());
1593:       assertFalse(node1.isEmpty());
1594:       assertFalse(node1.isIn());
1595:       assertFalse(node1.isExprResult());
1596:       assertFalse(node1.isTrue());
1597:       assertFalse(node1.isDebugger());
1598:       assertFalse(node1.isVoid());
1599:       assertFalse(node1.isAssign());
1600:       assertFalse(node1.hasChildren());
1601:       assertFalse(node1.isGetElem());
1602:       assertFalse(node1.isTypeOf());
1603:       assertFalse(node1.isCast());
1604:       assertFalse(node1.isDec());
1605:       assertFalse(node1.isFunction());
1606:       assertTrue(node1.isNumber());
1607:       assertFalse(node1.isReturn());
1608:       assertFalse(node1.isGetProp());
1609:       assertFalse(node1.isAnd());
1610:       assertFalse(node1.isNot());
1611:       assertEquals((-1), node1.getSourcePosition());
1612:       assertFalse(node1.isObjectLit());
1613:       assertFalse(node1.isString());
1614:       assertFalse(node1.isBlock());
1615:       assertFalse(node1.isAdd());
1616:       assertFalse(node1.isNew());
1617:       assertFalse(node1.isVar());
1618:       assertFalse(node1.isWhile());
1619:       assertFalse(node1.isName());
1620:       assertFalse(node1.isCall());
1621:       assertEquals(39, node1.getType());
1622:       assertFalse(node1.isContinue());
1623:       assertFalse(node1.hasMoreThanOneChild());
1624:       assertFalse(node1.isLabel());
1625:       assertFalse(node1.isAssignAdd());
1626:       assertEquals((-1), node1.getLineno());
1627:       assertFalse(node1.isOr());
1628:       assertFalse(node1.isSetterDef());
1629:       assertFalse(node1.isNull());
1630:       assertFalse(node1.isDo());
1631:       assertFalse(node1.isTry());
1632:       assertFalse(node1.isArrayLit());
1633:       assertFalse(node1.hasOneChild());
1634:       assertFalse(node1.isDefaultCase());
1635:       assertFalse(node1.isFor());
1636:       assertFalse(node1.isLabelName());
1637:       assertFalse(node1.isRegExp());
1638:       assertFalse(node1.isInstanceOf());
1639:       assertFalse(node1.isCatch());
1640:       assertEquals(0, node1.getChildCount());
1641:       assertFalse(node1.isWith());
1642:       assertFalse(node1.isThis());
1643:       assertFalse(node1.isParamList());
1644:       assertFalse(node1.isCase());
1645:       assertFalse(node1.isStringKey());
1646:       assertFalse(node1.isScript());
1647:       assertFalse(node1.isGetterDef());
1648:       assertFalse(node2.isWhile());
1649:       assertFalse(node2.isDo());
1650:       assertFalse(node2.isContinue());
1651:       assertFalse(node2.isNew());
1652:       assertEquals((-1), node2.getLineno());
1653:       assertFalse(node2.isOr());
1654:       assertFalse(node2.isAdd());
1655:       assertEquals((-1), node2.getSourcePosition());
1656:       assertFalse(node2.isName());
1657:       assertFalse(node2.isAssign());
1658:       assertFalse(node2.isCall());
1659:       assertFalse(node2.hasOneChild());
1660:       assertFalse(node2.isGetElem());
1661:       assertFalse(node2.isReturn());
1662:       assertFalse(node2.hasMoreThanOneChild());
1663:       assertFalse(node2.isTypeOf());
1664:       assertFalse(node2.isBlock());
1665:       assertFalse(node2.isDec());
1666:       assertEquals(39, node2.getType());
1667:       assertFalse(node2.hasChildren());
1668:       assertFalse(node2.isWith());
1669:       assertFalse(node2.isNot());
1670:       assertFalse(node2.isAnd());
1671:       assertFalse(node2.isCatch());
1672:       assertFalse(node2.isObjectLit());
1673:       assertFalse(node2.isDebugger());
1674:       assertFalse(node2.isFalse());
1675:       assertFalse(node2.isSetterDef());
1676:       assertFalse(node2.isCast());
1677:       assertFalse(node2.isFunction());
1678:       assertFalse(node2.isThrow());
1679:       assertFalse(node2.isString());
1680:       assertFalse(node2.isSwitch());
1681:       assertFalse(node2.isInc());
1682:       assertFalse(node2.isCase());
1683:       assertFalse(node2.isIn());
1684:       assertFalse(node2.isNE());
1685:       assertEquals((-1), node2.getCharno());
1686:       assertFalse(node2.isFor());
1687:       assertFalse(node2.isGetterDef());
1688:       assertFalse(node2.isDelProp());
1689:       assertFalse(node2.isIf());
1690:       assertFalse(node2.isBreak());
1691:       assertFalse(node2.isGetProp());
1692:       assertTrue(node2.isNumber());
1693:       assertFalse(node2.isTry());
1694:       assertFalse(node2.isInstanceOf());
1695:       assertFalse(node2.isComma());
1696:       assertFalse(node2.isThis());
1697:       assertFalse(node2.isRegExp());
1698:       assertFalse(node2.isHook());
1699:       assertFalse(node2.isDefaultCase());
1700:       assertFalse(node2.isScript());
1701:       assertFalse(node2.isExprResult());
1702:       assertFalse(node2.isVoid());
1703:       assertFalse(node2.isParamList());
1704:       assertFalse(node2.isNull());
1705:       assertFalse(node2.isTrue());
1706:       assertFalse(node2.isLabelName());
1707:       assertFalse(node2.isEmpty());
1708:       assertFalse(node2.isStringKey());
1709:       assertFalse(node2.isArrayLit());
1710:       assertEquals(0, node2.getChildCount());
1711:       assertFalse(node2.isAssignAdd());
1712:       assertFalse(node2.isVar());
1713:       assertFalse(node2.isLabel());
1714:       
1715:       boolean boolean3 = node0.isAnd();
1716:       assertFalse(node0.equals((Object)node1));
1717:       assertFalse(node0.equals((Object)node2));
1718:       assertTrue(boolean3 == boolean1);
1719:       assertTrue(boolean3 == boolean2);
1720:       assertTrue(boolean3 == boolean0);
1721:       assertEquals(4095, Node.COLUMN_MASK);
1722:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1723:       assertEquals(55, Node.INFERRED_FUNCTION);
1724:       assertEquals(53, Node.INPUT_ID);
1725:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1726:       assertEquals(29, Node.JSDOC_INFO_PROP);
1727:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1728:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1729:       assertEquals(8, Node.FLAG_NO_THROWS);
1730:       assertEquals(39, Node.EMPTY_BLOCK);
1731:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1732:       assertEquals(52, Node.LENGTH);
1733:       assertEquals(37, Node.OPT_ARG_NAME);
1734:       assertEquals(48, Node.DIRECTIVES);
1735:       assertEquals(36, Node.QUOTED_PROP);
1736:       assertEquals(57, Node.REFLECTED_OBJECT);
1737:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1738:       assertEquals(56, Node.CHANGE_TIME);
1739:       assertEquals(30, Node.VAR_ARGS_NAME);
1740:       assertEquals(49, Node.DIRECT_EVAL);
1741:       assertEquals(1, Node.DECR_FLAG);
1742:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1743:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1744:       assertEquals(32, Node.INCRDECR_PROP);
1745:       assertEquals(2, Node.POST_FLAG);
1746:       assertEquals(12, Node.COLUMN_BITS);
1747:       assertEquals(57, Node.LAST_PROP);
1748:       assertEquals(47, Node.IS_DISPATCHER);
1749:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1750:       assertEquals(50, Node.FREE_CALL);
1751:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1752:       assertEquals(40, Node.ORIGINALNAME_PROP);
1753:       assertEquals(43, Node.IS_CONSTANT_NAME);
1754:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1755:       assertEquals(46, Node.IS_NAMESPACE);
1756:       assertEquals(54, Node.SLASH_V);
1757:       assertFalse(boolean3);
1758:       assertFalse(node0.isFor());
1759:       assertFalse(node0.isEmpty());
1760:       assertFalse(node0.isIf());
1761:       assertFalse(node0.isArrayLit());
1762:       assertFalse(node0.isTry());
1763:       assertFalse(node0.isDelProp());
1764:       assertFalse(node0.isRegExp());
1765:       assertFalse(node0.isFunction());
1766:       assertFalse(node0.isCatch());
1767:       assertEquals(40, node0.getType());
1768:       assertFalse(node0.isDefaultCase());
1769:       assertFalse(node0.isVoid());
1770:       assertFalse(node0.isNE());
1771:       assertFalse(node0.isSetterDef());
1772:       assertFalse(node0.isInc());
1773:       assertFalse(node0.isNull());
1774:       assertFalse(node0.isTrue());
1775:       assertFalse(node0.isIn());
1776:       assertFalse(node0.isThrow());
1777:       assertFalse(node0.isFalse());
1778:       assertFalse(node0.isCall());
1779:       assertFalse(node0.isBreak());
1780:       assertFalse(node0.isName());
1781:       assertFalse(node0.isComma());
1782:       assertFalse(node0.isContinue());
1783:       assertFalse(node0.isAnd());
1784:       assertFalse(node0.isWhile());
1785:       assertFalse(node0.isGetProp());
1786:       assertFalse(node0.isDebugger());
1787:       assertEquals((-1), node0.getSourcePosition());
1788:       assertFalse(node0.isNot());
1789:       assertFalse(node0.isObjectLit());
1790:       assertFalse(node0.isGetElem());
1791:       assertFalse(node0.isCast());
1792:       assertFalse(node0.hasOneChild());
1793:       assertFalse(node0.isLabelName());
1794:       assertFalse(node0.isLabel());
1795:       assertFalse(node0.isReturn());
1796:       assertFalse(node0.isExprResult());
1797:       assertFalse(node0.isDec());
1798:       assertFalse(node0.hasChildren());
1799:       assertFalse(node0.hasMoreThanOneChild());
1800:       assertFalse(node0.isWith());
1801:       assertFalse(node0.isAssign());
1802:       assertFalse(node0.isTypeOf());
1803:       assertEquals((-1), node0.getLineno());
1804:       assertFalse(node0.isAssignAdd());
1805:       assertFalse(node0.isDo());
1806:       assertFalse(node0.isNew());
1807:       assertFalse(node0.isAdd());
1808:       assertFalse(node0.isOr());
1809:       assertFalse(node0.isStringKey());
1810:       assertFalse(node0.isVar());
1811:       assertTrue(node0.isString());
1812:       assertFalse(node0.isThis());
1813:       assertFalse(node0.isBlock());
1814:       assertFalse(node0.isHook());
1815:       assertFalse(node0.isInstanceOf());
1816:       assertEquals(0, node0.getChildCount());
1817:       assertFalse(node0.isCase());
1818:       assertFalse(node0.isSwitch());
1819:       assertEquals((-1), node0.getCharno());
1820:       assertFalse(node0.isParamList());
1821:       assertFalse(node0.isScript());
1822:       assertFalse(node0.isNumber());
1823:       assertFalse(node0.isGetterDef());
1824:       
1825:       node2.addSuppression((String) null);
1826:       assertFalse(node0.equals((Object)node1));
1827:       assertFalse(node0.equals((Object)node2));
1828:       assertFalse(node1.equals((Object)node0));
1829:       assertFalse(node2.equals((Object)node0));
1830:       assertSame(node1, node2);
1831:       assertSame(node2, node1);
1832:       assertEquals(4095, Node.COLUMN_MASK);
1833:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1834:       assertEquals(55, Node.INFERRED_FUNCTION);
1835:       assertEquals(53, Node.INPUT_ID);
1836:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1837:       assertEquals(29, Node.JSDOC_INFO_PROP);
1838:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1839:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1840:       assertEquals(8, Node.FLAG_NO_THROWS);
1841:       assertEquals(39, Node.EMPTY_BLOCK);
1842:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1843:       assertEquals(52, Node.LENGTH);
1844:       assertEquals(37, Node.OPT_ARG_NAME);
1845:       assertEquals(48, Node.DIRECTIVES);
1846:       assertEquals(36, Node.QUOTED_PROP);
1847:       assertEquals(57, Node.REFLECTED_OBJECT);
1848:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1849:       assertEquals(56, Node.CHANGE_TIME);
1850:       assertEquals(30, Node.VAR_ARGS_NAME);
1851:       assertEquals(49, Node.DIRECT_EVAL);
1852:       assertEquals(1, Node.DECR_FLAG);
1853:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1854:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1855:       assertEquals(32, Node.INCRDECR_PROP);
1856:       assertEquals(2, Node.POST_FLAG);
1857:       assertEquals(12, Node.COLUMN_BITS);
1858:       assertEquals(57, Node.LAST_PROP);
1859:       assertEquals(47, Node.IS_DISPATCHER);
1860:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1861:       assertEquals(50, Node.FREE_CALL);
1862:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1863:       assertEquals(40, Node.ORIGINALNAME_PROP);
1864:       assertEquals(43, Node.IS_CONSTANT_NAME);
1865:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1866:       assertEquals(46, Node.IS_NAMESPACE);
1867:       assertEquals(54, Node.SLASH_V);
1868:       assertEquals(32, Node.INCRDECR_PROP);
1869:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1870:       assertEquals(37, Node.OPT_ARG_NAME);
1871:       assertEquals(30, Node.VAR_ARGS_NAME);
1872:       assertEquals(57, Node.LAST_PROP);
1873:       assertEquals(1, Node.DECR_FLAG);
1874:       assertEquals(2, Node.POST_FLAG);
1875:       assertEquals(47, Node.IS_DISPATCHER);
1876:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1877:       assertEquals(12, Node.COLUMN_BITS);
1878:       assertEquals(52, Node.LENGTH);
1879:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1880:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1881:       assertEquals(29, Node.JSDOC_INFO_PROP);
1882:       assertEquals(53, Node.INPUT_ID);
1883:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1884:       assertEquals(49, Node.DIRECT_EVAL);
1885:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1886:       assertEquals(36, Node.QUOTED_PROP);
1887:       assertEquals(56, Node.CHANGE_TIME);
1888:       assertEquals(57, Node.REFLECTED_OBJECT);
1889:       assertEquals(48, Node.DIRECTIVES);
1890:       assertEquals(55, Node.INFERRED_FUNCTION);
1891:       assertEquals(8, Node.FLAG_NO_THROWS);
1892:       assertEquals(39, Node.EMPTY_BLOCK);
1893:       assertEquals(4095, Node.COLUMN_MASK);
1894:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1895:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1896:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1897:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1898:       assertEquals(40, Node.ORIGINALNAME_PROP);
1899:       assertEquals(50, Node.FREE_CALL);
1900:       assertEquals(43, Node.IS_CONSTANT_NAME);
1901:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1902:       assertEquals(46, Node.IS_NAMESPACE);
1903:       assertEquals(54, Node.SLASH_V);
1904:       assertEquals(56, Node.CHANGE_TIME);
1905:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1906:       assertEquals(29, Node.JSDOC_INFO_PROP);
1907:       assertEquals(47, Node.IS_DISPATCHER);
1908:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1909:       assertEquals(2, Node.POST_FLAG);
1910:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1911:       assertEquals(46, Node.IS_NAMESPACE);
1912:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1913:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1914:       assertEquals(37, Node.OPT_ARG_NAME);
1915:       assertEquals(49, Node.DIRECT_EVAL);
1916:       assertEquals(43, Node.IS_CONSTANT_NAME);
1917:       assertEquals(4095, Node.COLUMN_MASK);
1918:       assertEquals(32, Node.INCRDECR_PROP);
1919:       assertEquals(12, Node.COLUMN_BITS);
1920:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1921:       assertEquals(1, Node.DECR_FLAG);
1922:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1923:       assertEquals(39, Node.EMPTY_BLOCK);
1924:       assertEquals(40, Node.ORIGINALNAME_PROP);
1925:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1926:       assertEquals(50, Node.FREE_CALL);
1927:       assertEquals(8, Node.FLAG_NO_THROWS);
1928:       assertEquals(57, Node.REFLECTED_OBJECT);
1929:       assertEquals(54, Node.SLASH_V);
1930:       assertEquals(48, Node.DIRECTIVES);
1931:       assertEquals(30, Node.VAR_ARGS_NAME);
1932:       assertEquals(36, Node.QUOTED_PROP);
1933:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1934:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1935:       assertEquals(55, Node.INFERRED_FUNCTION);
1936:       assertEquals(52, Node.LENGTH);
1937:       assertEquals(53, Node.INPUT_ID);
1938:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1939:       assertEquals(57, Node.LAST_PROP);
1940:       assertFalse(node0.isFor());
1941:       assertFalse(node0.isEmpty());
1942:       assertFalse(node0.isIf());
1943:       assertFalse(node0.isArrayLit());
1944:       assertFalse(node0.isTry());
1945:       assertFalse(node0.isDelProp());
1946:       assertFalse(node0.isRegExp());
1947:       assertFalse(node0.isFunction());
1948:       assertFalse(node0.isCatch());
1949:       assertEquals(40, node0.getType());
1950:       assertFalse(node0.isDefaultCase());
1951:       assertFalse(node0.isVoid());
1952:       assertFalse(node0.isNE());
1953:       assertFalse(node0.isSetterDef());
1954:       assertFalse(node0.isInc());
1955:       assertFalse(node0.isNull());
1956:       assertFalse(node0.isTrue());
1957:       assertFalse(node0.isIn());
1958:       assertFalse(node0.isThrow());
1959:       assertFalse(node0.isFalse());
1960:       assertFalse(node0.isCall());
1961:       assertFalse(node0.isBreak());
1962:       assertFalse(node0.isName());
1963:       assertFalse(node0.isComma());
1964:       assertFalse(node0.isContinue());
1965:       assertFalse(node0.isAnd());
1966:       assertFalse(node0.isWhile());
1967:       assertFalse(node0.isGetProp());
1968:       assertFalse(node0.isDebugger());
1969:       assertEquals((-1), node0.getSourcePosition());
1970:       assertFalse(node0.isNot());
1971:       assertFalse(node0.isObjectLit());
1972:       assertFalse(node0.isGetElem());
1973:       assertFalse(node0.isCast());
1974:       assertFalse(node0.hasOneChild());
1975:       assertFalse(node0.isLabelName());
1976:       assertFalse(node0.isLabel());
1977:       assertFalse(node0.isReturn());
1978:       assertFalse(node0.isExprResult());
1979:       assertFalse(node0.isDec());
1980:       assertFalse(node0.hasChildren());
1981:       assertFalse(node0.hasMoreThanOneChild());
1982:       assertFalse(node0.isWith());
1983:       assertFalse(node0.isAssign());
1984:       assertFalse(node0.isTypeOf());
1985:       assertEquals((-1), node0.getLineno());
1986:       assertFalse(node0.isAssignAdd());
1987:       assertFalse(node0.isDo());
1988:       assertFalse(node0.isNew());
1989:       assertFalse(node0.isAdd());
1990:       assertFalse(node0.isOr());
1991:       assertFalse(node0.isStringKey());
1992:       assertFalse(node0.isVar());
1993:       assertTrue(node0.isString());
1994:       assertFalse(node0.isThis());
1995:       assertFalse(node0.isBlock());
1996:       assertFalse(node0.isHook());
1997:       assertFalse(node0.isInstanceOf());
1998:       assertEquals(0, node0.getChildCount());
1999:       assertFalse(node0.isCase());
2000:       assertFalse(node0.isSwitch());
2001:       assertEquals((-1), node0.getCharno());
2002:       assertFalse(node0.isParamList());
2003:       assertFalse(node0.isScript());
2004:       assertFalse(node0.isNumber());
2005:       assertFalse(node0.isGetterDef());
2006:       assertEquals((-1), node1.getCharno());
2007:       assertFalse(node1.isHook());
2008:       assertFalse(node1.isInc());
2009:       assertFalse(node1.isSwitch());
2010:       assertFalse(node1.isThrow());
2011:       assertFalse(node1.isBreak());
2012:       assertFalse(node1.isComma());
2013:       assertFalse(node1.isFalse());
2014:       assertFalse(node1.isNE());
2015:       assertFalse(node1.isDelProp());
2016:       assertFalse(node1.isIf());
2017:       assertFalse(node1.isEmpty());
2018:       assertFalse(node1.isIn());
2019:       assertFalse(node1.isExprResult());
2020:       assertFalse(node1.isTrue());
2021:       assertFalse(node1.isDebugger());
2022:       assertFalse(node1.isVoid());
2023:       assertFalse(node1.isAssign());
2024:       assertFalse(node1.hasChildren());
2025:       assertFalse(node1.isGetElem());
2026:       assertFalse(node1.isTypeOf());
2027:       assertFalse(node1.isCast());
2028:       assertFalse(node1.isDec());
2029:       assertFalse(node1.isFunction());
2030:       assertTrue(node1.isNumber());
2031:       assertFalse(node1.isReturn());
2032:       assertFalse(node1.isGetProp());
2033:       assertFalse(node1.isAnd());
2034:       assertFalse(node1.isNot());
2035:       assertEquals((-1), node1.getSourcePosition());
2036:       assertFalse(node1.isObjectLit());
2037:       assertFalse(node1.isString());
2038:       assertFalse(node1.isBlock());
2039:       assertFalse(node1.isAdd());
2040:       assertFalse(node1.isNew());
2041:       assertFalse(node1.isVar());
2042:       assertFalse(node1.isWhile());
2043:       assertFalse(node1.isName());
2044:       assertFalse(node1.isCall());
2045:       assertEquals(39, node1.getType());
2046:       assertFalse(node1.isContinue());
2047:       assertFalse(node1.hasMoreThanOneChild());
2048:       assertFalse(node1.isLabel());
2049:       assertFalse(node1.isAssignAdd());
2050:       assertEquals((-1), node1.getLineno());
2051:       assertFalse(node1.isOr());
2052:       assertFalse(node1.isSetterDef());
2053:       assertFalse(node1.isNull());
2054:       assertFalse(node1.isDo());
2055:       assertFalse(node1.isTry());
2056:       assertFalse(node1.isArrayLit());
2057:       assertFalse(node1.hasOneChild());
2058:       assertFalse(node1.isDefaultCase());
2059:       assertFalse(node1.isFor());
2060:       assertFalse(node1.isLabelName());
2061:       assertFalse(node1.isRegExp());
2062:       assertFalse(node1.isInstanceOf());
2063:       assertFalse(node1.isCatch());
2064:       assertEquals(0, node1.getChildCount());
2065:       assertFalse(node1.isWith());
2066:       assertFalse(node1.isThis());
2067:       assertFalse(node1.isParamList());
2068:       assertFalse(node1.isCase());
2069:       assertFalse(node1.isStringKey());
2070:       assertFalse(node1.isScript());
2071:       assertFalse(node1.isGetterDef());
2072:       assertFalse(node2.isWhile());
2073:       assertFalse(node2.isDo());
2074:       assertFalse(node2.isContinue());
2075:       assertFalse(node2.isNew());
2076:       assertEquals((-1), node2.getLineno());
2077:       assertFalse(node2.isOr());
2078:       assertFalse(node2.isAdd());
2079:       assertEquals((-1), node2.getSourcePosition());
2080:       assertFalse(node2.isName());
2081:       assertFalse(node2.isAssign());
2082:       assertFalse(node2.isCall());
2083:       assertFalse(node2.hasOneChild());
2084:       assertFalse(node2.isGetElem());
2085:       assertFalse(node2.isReturn());
2086:       assertFalse(node2.hasMoreThanOneChild());
2087:       assertFalse(node2.isTypeOf());
2088:       assertFalse(node2.isBlock());
2089:       assertFalse(node2.isDec());
2090:       assertEquals(39, node2.getType());
2091:       assertFalse(node2.hasChildren());
2092:       assertFalse(node2.isWith());
2093:       assertFalse(node2.isNot());
2094:       assertFalse(node2.isAnd());
2095:       assertFalse(node2.isCatch());
2096:       assertFalse(node2.isObjectLit());
2097:       assertFalse(node2.isDebugger());
2098:       assertFalse(node2.isFalse());
2099:       assertFalse(node2.isSetterDef());
2100:       assertFalse(node2.isCast());
2101:       assertFalse(node2.isFunction());
2102:       assertFalse(node2.isThrow());
2103:       assertFalse(node2.isString());
2104:       assertFalse(node2.isSwitch());
2105:       assertFalse(node2.isInc());
2106:       assertFalse(node2.isCase());
2107:       assertFalse(node2.isIn());
2108:       assertFalse(node2.isNE());
2109:       assertEquals((-1), node2.getCharno());
2110:       assertFalse(node2.isFor());
2111:       assertFalse(node2.isGetterDef());
2112:       assertFalse(node2.isDelProp());
2113:       assertFalse(node2.isIf());
2114:       assertFalse(node2.isBreak());
2115:       assertFalse(node2.isGetProp());
2116:       assertTrue(node2.isNumber());
2117:       assertFalse(node2.isTry());
2118:       assertFalse(node2.isInstanceOf());
2119:       assertFalse(node2.isComma());
2120:       assertFalse(node2.isThis());
2121:       assertFalse(node2.isRegExp());
2122:       assertFalse(node2.isHook());
2123:       assertFalse(node2.isDefaultCase());
2124:       assertFalse(node2.isScript());
2125:       assertFalse(node2.isExprResult());
2126:       assertFalse(node2.isVoid());
2127:       assertFalse(node2.isParamList());
2128:       assertFalse(node2.isNull());
2129:       assertFalse(node2.isTrue());
2130:       assertFalse(node2.isLabelName());
2131:       assertFalse(node2.isEmpty());
2132:       assertFalse(node2.isStringKey());
2133:       assertFalse(node2.isArrayLit());
2134:       assertEquals(0, node2.getChildCount());
2135:       assertFalse(node2.isAssignAdd());
2136:       assertFalse(node2.isVar());
2137:       assertFalse(node2.isLabel());
2138:       
2139:       node0.addSuppression("9Q k6.106");
2140:       assertFalse(node0.equals((Object)node1));
2141:       assertFalse(node0.equals((Object)node2));
2142:       assertEquals(4095, Node.COLUMN_MASK);
2143:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2144:       assertEquals(55, Node.INFERRED_FUNCTION);
2145:       assertEquals(53, Node.INPUT_ID);
2146:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2147:       assertEquals(29, Node.JSDOC_INFO_PROP);
2148:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2149:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2150:       assertEquals(8, Node.FLAG_NO_THROWS);
2151:       assertEquals(39, Node.EMPTY_BLOCK);
2152:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2153:       assertEquals(52, Node.LENGTH);
2154:       assertEquals(37, Node.OPT_ARG_NAME);
2155:       assertEquals(48, Node.DIRECTIVES);
2156:       assertEquals(36, Node.QUOTED_PROP);
2157:       assertEquals(57, Node.REFLECTED_OBJECT);
2158:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2159:       assertEquals(56, Node.CHANGE_TIME);
2160:       assertEquals(30, Node.VAR_ARGS_NAME);
2161:       assertEquals(49, Node.DIRECT_EVAL);
2162:       assertEquals(1, Node.DECR_FLAG);
2163:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2164:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2165:       assertEquals(32, Node.INCRDECR_PROP);
2166:       assertEquals(2, Node.POST_FLAG);
2167:       assertEquals(12, Node.COLUMN_BITS);
2168:       assertEquals(57, Node.LAST_PROP);
2169:       assertEquals(47, Node.IS_DISPATCHER);
2170:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2171:       assertEquals(50, Node.FREE_CALL);
2172:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2173:       assertEquals(40, Node.ORIGINALNAME_PROP);
2174:       assertEquals(43, Node.IS_CONSTANT_NAME);
2175:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2176:       assertEquals(46, Node.IS_NAMESPACE);
2177:       assertEquals(54, Node.SLASH_V);
2178:       
2179:       Iterable<Node> iterable1 = node2.children();
2180:       assertFalse(node0.equals((Object)node1));
2181:       assertFalse(node0.equals((Object)node2));
2182:       assertFalse(iterable1.equals((Object)iterable0));
2183:       assertFalse(node1.equals((Object)node0));
2184:       assertFalse(node2.equals((Object)node0));
2185:       assertNotNull(iterable1);
2186:       assertSame(node1, node2);
2187:       assertSame(node2, node1);
2188:       assertEquals(4095, Node.COLUMN_MASK);
2189:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2190:       assertEquals(55, Node.INFERRED_FUNCTION);
2191:       assertEquals(53, Node.INPUT_ID);
2192:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2193:       assertEquals(29, Node.JSDOC_INFO_PROP);
2194:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2195:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2196:       assertEquals(8, Node.FLAG_NO_THROWS);
2197:       assertEquals(39, Node.EMPTY_BLOCK);
2198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2199:       assertEquals(52, Node.LENGTH);
2200:       assertEquals(37, Node.OPT_ARG_NAME);
2201:       assertEquals(48, Node.DIRECTIVES);
2202:       assertEquals(36, Node.QUOTED_PROP);
2203:       assertEquals(57, Node.REFLECTED_OBJECT);
2204:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2205:       assertEquals(56, Node.CHANGE_TIME);
2206:       assertEquals(30, Node.VAR_ARGS_NAME);
2207:       assertEquals(49, Node.DIRECT_EVAL);
2208:       assertEquals(1, Node.DECR_FLAG);
2209:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2210:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2211:       assertEquals(32, Node.INCRDECR_PROP);
2212:       assertEquals(2, Node.POST_FLAG);
2213:       assertEquals(12, Node.COLUMN_BITS);
2214:       assertEquals(57, Node.LAST_PROP);
2215:       assertEquals(47, Node.IS_DISPATCHER);
2216:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2217:       assertEquals(50, Node.FREE_CALL);
2218:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2219:       assertEquals(40, Node.ORIGINALNAME_PROP);
2220:       assertEquals(43, Node.IS_CONSTANT_NAME);
2221:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2222:       assertEquals(46, Node.IS_NAMESPACE);
2223:       assertEquals(54, Node.SLASH_V);
2224:       assertEquals(32, Node.INCRDECR_PROP);
2225:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2226:       assertEquals(37, Node.OPT_ARG_NAME);
2227:       assertEquals(30, Node.VAR_ARGS_NAME);
2228:       assertEquals(57, Node.LAST_PROP);
2229:       assertEquals(1, Node.DECR_FLAG);
2230:       assertEquals(2, Node.POST_FLAG);
2231:       assertEquals(47, Node.IS_DISPATCHER);
2232:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2233:       assertEquals(12, Node.COLUMN_BITS);
2234:       assertEquals(52, Node.LENGTH);
2235:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2237:       assertEquals(29, Node.JSDOC_INFO_PROP);
2238:       assertEquals(53, Node.INPUT_ID);
2239:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2240:       assertEquals(49, Node.DIRECT_EVAL);
2241:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2242:       assertEquals(36, Node.QUOTED_PROP);
2243:       assertEquals(56, Node.CHANGE_TIME);
2244:       assertEquals(57, Node.REFLECTED_OBJECT);
2245:       assertEquals(48, Node.DIRECTIVES);
2246:       assertEquals(55, Node.INFERRED_FUNCTION);
2247:       assertEquals(8, Node.FLAG_NO_THROWS);
2248:       assertEquals(39, Node.EMPTY_BLOCK);
2249:       assertEquals(4095, Node.COLUMN_MASK);
2250:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2251:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2253:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2254:       assertEquals(40, Node.ORIGINALNAME_PROP);
2255:       assertEquals(50, Node.FREE_CALL);
2256:       assertEquals(43, Node.IS_CONSTANT_NAME);
2257:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2258:       assertEquals(46, Node.IS_NAMESPACE);
2259:       assertEquals(54, Node.SLASH_V);
2260:       assertEquals(56, Node.CHANGE_TIME);
2261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2262:       assertEquals(29, Node.JSDOC_INFO_PROP);
2263:       assertEquals(47, Node.IS_DISPATCHER);
2264:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2265:       assertEquals(2, Node.POST_FLAG);
2266:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2267:       assertEquals(46, Node.IS_NAMESPACE);
2268:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2269:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2270:       assertEquals(37, Node.OPT_ARG_NAME);
2271:       assertEquals(49, Node.DIRECT_EVAL);
2272:       assertEquals(43, Node.IS_CONSTANT_NAME);
2273:       assertEquals(4095, Node.COLUMN_MASK);
2274:       assertEquals(32, Node.INCRDECR_PROP);
2275:       assertEquals(12, Node.COLUMN_BITS);
2276:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2277:       assertEquals(1, Node.DECR_FLAG);
2278:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2279:       assertEquals(39, Node.EMPTY_BLOCK);
2280:       assertEquals(40, Node.ORIGINALNAME_PROP);
2281:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2282:       assertEquals(50, Node.FREE_CALL);
2283:       assertEquals(8, Node.FLAG_NO_THROWS);
2284:       assertEquals(57, Node.REFLECTED_OBJECT);
2285:       assertEquals(54, Node.SLASH_V);
2286:       assertEquals(48, Node.DIRECTIVES);
2287:       assertEquals(30, Node.VAR_ARGS_NAME);
2288:       assertEquals(36, Node.QUOTED_PROP);
2289:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2290:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2291:       assertEquals(55, Node.INFERRED_FUNCTION);
2292:       assertEquals(52, Node.LENGTH);
2293:       assertEquals(53, Node.INPUT_ID);
2294:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2295:       assertEquals(57, Node.LAST_PROP);
2296:       assertFalse(iterable1.contains(node2));
2297:       
2298:       boolean boolean4 = node2.isEquivalentToShallow(node0);
2299:       assertFalse(node0.equals((Object)node1));
2300:       assertFalse(node0.equals((Object)node2));
2301:       assertTrue(boolean4 == boolean0);
2302:       assertTrue(boolean4 == boolean3);
2303:       assertTrue(boolean4 == boolean1);
2304:       assertTrue(boolean4 == boolean2);
2305:       assertFalse(node1.equals((Object)node0));
2306:       assertFalse(node2.equals((Object)node0));
2307:       assertSame(node1, node2);
2308:       assertSame(node2, node1);
2309:       assertEquals(4095, Node.COLUMN_MASK);
2310:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2311:       assertEquals(55, Node.INFERRED_FUNCTION);
2312:       assertEquals(53, Node.INPUT_ID);
2313:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2314:       assertEquals(29, Node.JSDOC_INFO_PROP);
2315:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2316:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2317:       assertEquals(8, Node.FLAG_NO_THROWS);
2318:       assertEquals(39, Node.EMPTY_BLOCK);
2319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2320:       assertEquals(52, Node.LENGTH);
2321:       assertEquals(37, Node.OPT_ARG_NAME);
2322:       assertEquals(48, Node.DIRECTIVES);
2323:       assertEquals(36, Node.QUOTED_PROP);
2324:       assertEquals(57, Node.REFLECTED_OBJECT);
2325:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2326:       assertEquals(56, Node.CHANGE_TIME);
2327:       assertEquals(30, Node.VAR_ARGS_NAME);
2328:       assertEquals(49, Node.DIRECT_EVAL);
2329:       assertEquals(1, Node.DECR_FLAG);
2330:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2331:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2332:       assertEquals(32, Node.INCRDECR_PROP);
2333:       assertEquals(2, Node.POST_FLAG);
2334:       assertEquals(12, Node.COLUMN_BITS);
2335:       assertEquals(57, Node.LAST_PROP);
2336:       assertEquals(47, Node.IS_DISPATCHER);
2337:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2338:       assertEquals(50, Node.FREE_CALL);
2339:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2340:       assertEquals(40, Node.ORIGINALNAME_PROP);
2341:       assertEquals(43, Node.IS_CONSTANT_NAME);
2342:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2343:       assertEquals(46, Node.IS_NAMESPACE);
2344:       assertEquals(54, Node.SLASH_V);
2345:       assertEquals(32, Node.INCRDECR_PROP);
2346:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2347:       assertEquals(37, Node.OPT_ARG_NAME);
2348:       assertEquals(30, Node.VAR_ARGS_NAME);
2349:       assertEquals(57, Node.LAST_PROP);
2350:       assertEquals(1, Node.DECR_FLAG);
2351:       assertEquals(2, Node.POST_FLAG);
2352:       assertEquals(47, Node.IS_DISPATCHER);
2353:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2354:       assertEquals(12, Node.COLUMN_BITS);
2355:       assertEquals(52, Node.LENGTH);
2356:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2357:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2358:       assertEquals(29, Node.JSDOC_INFO_PROP);
2359:       assertEquals(53, Node.INPUT_ID);
2360:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2361:       assertEquals(49, Node.DIRECT_EVAL);
2362:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2363:       assertEquals(36, Node.QUOTED_PROP);
2364:       assertEquals(56, Node.CHANGE_TIME);
2365:       assertEquals(57, Node.REFLECTED_OBJECT);
2366:       assertEquals(48, Node.DIRECTIVES);
2367:       assertEquals(55, Node.INFERRED_FUNCTION);
2368:       assertEquals(8, Node.FLAG_NO_THROWS);
2369:       assertEquals(39, Node.EMPTY_BLOCK);
2370:       assertEquals(4095, Node.COLUMN_MASK);
2371:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2372:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2373:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2374:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2375:       assertEquals(40, Node.ORIGINALNAME_PROP);
2376:       assertEquals(50, Node.FREE_CALL);
2377:       assertEquals(43, Node.IS_CONSTANT_NAME);
2378:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2379:       assertEquals(46, Node.IS_NAMESPACE);
2380:       assertEquals(54, Node.SLASH_V);
2381:       assertEquals(56, Node.CHANGE_TIME);
2382:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2383:       assertEquals(29, Node.JSDOC_INFO_PROP);
2384:       assertEquals(47, Node.IS_DISPATCHER);
2385:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2386:       assertEquals(2, Node.POST_FLAG);
2387:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2388:       assertEquals(46, Node.IS_NAMESPACE);
2389:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2390:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2391:       assertEquals(37, Node.OPT_ARG_NAME);
2392:       assertEquals(49, Node.DIRECT_EVAL);
2393:       assertEquals(43, Node.IS_CONSTANT_NAME);
2394:       assertEquals(4095, Node.COLUMN_MASK);
2395:       assertEquals(32, Node.INCRDECR_PROP);
2396:       assertEquals(12, Node.COLUMN_BITS);
2397:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2398:       assertEquals(1, Node.DECR_FLAG);
2399:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2400:       assertEquals(39, Node.EMPTY_BLOCK);
2401:       assertEquals(40, Node.ORIGINALNAME_PROP);
2402:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2403:       assertEquals(50, Node.FREE_CALL);
2404:       assertEquals(8, Node.FLAG_NO_THROWS);
2405:       assertEquals(57, Node.REFLECTED_OBJECT);
2406:       assertEquals(54, Node.SLASH_V);
2407:       assertEquals(48, Node.DIRECTIVES);
2408:       assertEquals(30, Node.VAR_ARGS_NAME);
2409:       assertEquals(36, Node.QUOTED_PROP);
2410:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2411:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2412:       assertEquals(55, Node.INFERRED_FUNCTION);
2413:       assertEquals(52, Node.LENGTH);
2414:       assertEquals(53, Node.INPUT_ID);
2415:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2416:       assertEquals(57, Node.LAST_PROP);
2417:       assertFalse(boolean4);
2418:       
2419:       boolean boolean5 = node2.isCatch();
2420:       assertFalse(node0.equals((Object)node1));
2421:       assertFalse(node0.equals((Object)node2));
2422:       assertTrue(boolean5 == boolean0);
2423:       assertTrue(boolean5 == boolean1);
2424:       assertTrue(boolean5 == boolean3);
2425:       assertTrue(boolean5 == boolean4);
2426:       assertTrue(boolean5 == boolean2);
2427:       assertFalse(node1.equals((Object)node0));
2428:       assertFalse(node2.equals((Object)node0));
2429:       assertSame(node1, node2);
2430:       assertSame(node2, node1);
2431:       assertEquals(4095, Node.COLUMN_MASK);
2432:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2433:       assertEquals(55, Node.INFERRED_FUNCTION);
2434:       assertEquals(53, Node.INPUT_ID);
2435:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2436:       assertEquals(29, Node.JSDOC_INFO_PROP);
2437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2438:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2439:       assertEquals(8, Node.FLAG_NO_THROWS);
2440:       assertEquals(39, Node.EMPTY_BLOCK);
2441:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2442:       assertEquals(52, Node.LENGTH);
2443:       assertEquals(37, Node.OPT_ARG_NAME);
2444:       assertEquals(48, Node.DIRECTIVES);
2445:       assertEquals(36, Node.QUOTED_PROP);
2446:       assertEquals(57, Node.REFLECTED_OBJECT);
2447:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2448:       assertEquals(56, Node.CHANGE_TIME);
2449:       assertEquals(30, Node.VAR_ARGS_NAME);
2450:       assertEquals(49, Node.DIRECT_EVAL);
2451:       assertEquals(1, Node.DECR_FLAG);
2452:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2453:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2454:       assertEquals(32, Node.INCRDECR_PROP);
2455:       assertEquals(2, Node.POST_FLAG);
2456:       assertEquals(12, Node.COLUMN_BITS);
2457:       assertEquals(57, Node.LAST_PROP);
2458:       assertEquals(47, Node.IS_DISPATCHER);
2459:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2460:       assertEquals(50, Node.FREE_CALL);
2461:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2462:       assertEquals(40, Node.ORIGINALNAME_PROP);
2463:       assertEquals(43, Node.IS_CONSTANT_NAME);
2464:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2465:       assertEquals(46, Node.IS_NAMESPACE);
2466:       assertEquals(54, Node.SLASH_V);
2467:       assertEquals(32, Node.INCRDECR_PROP);
2468:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2469:       assertEquals(37, Node.OPT_ARG_NAME);
2470:       assertEquals(30, Node.VAR_ARGS_NAME);
2471:       assertEquals(57, Node.LAST_PROP);
2472:       assertEquals(1, Node.DECR_FLAG);
2473:       assertEquals(2, Node.POST_FLAG);
2474:       assertEquals(47, Node.IS_DISPATCHER);
2475:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2476:       assertEquals(12, Node.COLUMN_BITS);
2477:       assertEquals(52, Node.LENGTH);
2478:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2479:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2480:       assertEquals(29, Node.JSDOC_INFO_PROP);
2481:       assertEquals(53, Node.INPUT_ID);
2482:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2483:       assertEquals(49, Node.DIRECT_EVAL);
2484:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2485:       assertEquals(36, Node.QUOTED_PROP);
2486:       assertEquals(56, Node.CHANGE_TIME);
2487:       assertEquals(57, Node.REFLECTED_OBJECT);
2488:       assertEquals(48, Node.DIRECTIVES);
2489:       assertEquals(55, Node.INFERRED_FUNCTION);
2490:       assertEquals(8, Node.FLAG_NO_THROWS);
2491:       assertEquals(39, Node.EMPTY_BLOCK);
2492:       assertEquals(4095, Node.COLUMN_MASK);
2493:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2494:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2495:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2496:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2497:       assertEquals(40, Node.ORIGINALNAME_PROP);
2498:       assertEquals(50, Node.FREE_CALL);
2499:       assertEquals(43, Node.IS_CONSTANT_NAME);
2500:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2501:       assertEquals(46, Node.IS_NAMESPACE);
2502:       assertEquals(54, Node.SLASH_V);
2503:       assertEquals(56, Node.CHANGE_TIME);
2504:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2505:       assertEquals(29, Node.JSDOC_INFO_PROP);
2506:       assertEquals(47, Node.IS_DISPATCHER);
2507:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2508:       assertEquals(2, Node.POST_FLAG);
2509:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2510:       assertEquals(46, Node.IS_NAMESPACE);
2511:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2512:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2513:       assertEquals(37, Node.OPT_ARG_NAME);
2514:       assertEquals(49, Node.DIRECT_EVAL);
2515:       assertEquals(43, Node.IS_CONSTANT_NAME);
2516:       assertEquals(4095, Node.COLUMN_MASK);
2517:       assertEquals(32, Node.INCRDECR_PROP);
2518:       assertEquals(12, Node.COLUMN_BITS);
2519:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2520:       assertEquals(1, Node.DECR_FLAG);
2521:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2522:       assertEquals(39, Node.EMPTY_BLOCK);
2523:       assertEquals(40, Node.ORIGINALNAME_PROP);
2524:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2525:       assertEquals(50, Node.FREE_CALL);
2526:       assertEquals(8, Node.FLAG_NO_THROWS);
2527:       assertEquals(57, Node.REFLECTED_OBJECT);
2528:       assertEquals(54, Node.SLASH_V);
2529:       assertEquals(48, Node.DIRECTIVES);
2530:       assertEquals(30, Node.VAR_ARGS_NAME);
2531:       assertEquals(36, Node.QUOTED_PROP);
2532:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2533:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2534:       assertEquals(55, Node.INFERRED_FUNCTION);
2535:       assertEquals(52, Node.LENGTH);
2536:       assertEquals(53, Node.INPUT_ID);
2537:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2538:       assertEquals(57, Node.LAST_PROP);
2539:       assertFalse(boolean5);
2540:       
2541:       // Undeclared exception!
2542:       try { 
2543:         node2.setSideEffectFlags((-484));
2544:         fail("Expecting exception: IllegalArgumentException");
2545:       
2546:       } catch(IllegalArgumentException e) {
2547:          //
2548:          // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
2549:          //
2550:          verifyException("com.google.common.base.Preconditions", e);
2551:       }
2552:   }
2553: }
RegularFileObject[/tmp/EvoSuite_146_1629223109165/com/google/javascript/rhino/Node_146_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:58:29 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_146_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_146_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.javascript.rhino.jstype.JSType$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_146_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
266:       "com.google.common.base.Joiner",
267:       "com.google.common.base.Preconditions",
268:       "com.google.common.base.Joiner$1",
269:       "com.google.common.collect.Collections2",
270:       "com.google.common.base.Joiner$MapJoiner",
271:       "com.google.common.collect.Maps",
272:       "com.google.common.collect.AbstractMultimap",
273:       "com.google.common.collect.AbstractMapBasedMultimap",
274:       "com.google.common.collect.AbstractSetMultimap",
275:       "com.google.common.collect.LinkedHashMultimap",
276:       "com.google.common.collect.AbstractMapEntry",
277:       "com.google.common.collect.ImmutableEntry",
278:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
279:       "com.google.common.collect.AbstractListMultimap",
280:       "com.google.common.collect.ArrayListMultimap",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
282:       "com.google.common.collect.ImmutableCollection",
283:       "com.google.common.collect.RegularImmutableList",
284:       "com.google.common.collect.ObjectArrays",
285:       "com.google.common.collect.ImmutableList",
286:       "com.google.javascript.rhino.jstype.ModificationVisitor",
287:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
288:       "com.google.common.collect.ImmutableCollection$Builder",
289:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
290:       "com.google.common.collect.ImmutableList$Builder",
291:       "com.google.common.collect.UnmodifiableIterator",
292:       "com.google.common.collect.UnmodifiableListIterator",
293:       "com.google.common.collect.Iterators$1",
294:       "com.google.common.collect.Iterators$2",
295:       "com.google.common.collect.Iterators",
296:       "com.google.javascript.rhino.jstype.JSTypeNative",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.JSDocInfo",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.SimpleErrorReporter",
340:       "com.google.javascript.rhino.jstype.EnumType",
341:       "com.google.javascript.rhino.jstype.EnumElementType",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.common.collect.Sets",
344:       "com.google.common.base.Objects",
345:       "com.google.javascript.rhino.InputId",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.common.collect.Iterables",
348:       "com.google.javascript.rhino.JSDocInfo$Visibility",
349:       "com.google.common.collect.AbstractIndexedListIterator",
350:       "com.google.common.collect.Iterators$11",
351:       "com.google.javascript.rhino.jstype.NamedType",
352:       "com.google.javascript.rhino.Node$AncestorIterable$1",
353:       "com.google.common.collect.ImmutableSet",
354:       "com.google.common.collect.EmptyImmutableSet",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
357:       "com.google.common.collect.AbstractMultimap$Values",
358:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
359:       "com.google.common.collect.AbstractMapBasedMultimap$1",
360:       "com.google.common.collect.Multimaps$Entries",
361:       "com.google.common.collect.AbstractMultimap$Entries",
362:       "com.google.common.collect.AbstractMapBasedMultimap$2",
363:       "com.google.javascript.rhino.jstype.JSType$TypePair",
364:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
365:     );
366:   }
367: }

[MASTER] 17:58:30.309 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("J.g=");
assertNotNull(node0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());

boolean boolean0 = node0.isLabel();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean0);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());

String string0 = node0.toStringTree();
assertNotNull(string0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals("STRING J.g=\n", string0);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());

int int0 = node0.getIntProp(375);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, int0);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());

boolean boolean1 = node0.isAssign();
assertTrue(boolean1 == boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean1);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());

Node node1 = Node.newNumber((double) 4095, 8, 20);
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertEquals(8, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertEquals(20, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());

double double0 = node1.getDouble();
assertFalse(node1.equals((Object)node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095.0, double0, 0.01);
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertEquals(8, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertEquals(20, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertFalse(node0.equals((Object)node1));
assertNull(staticSourceFile0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());

boolean boolean2 = node1.isUnscopedQualifiedName();
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean2);
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertEquals(8, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertEquals(20, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());

Iterable<Node> iterable0 = node1.siblings();
assertFalse(node1.equals((Object)node0));
assertNotNull(iterable0);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertEquals(8, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertEquals(20, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertNotNull(node_NodeMismatch0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertEquals(8, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertEquals(20, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());

String string1 = node1.getSourceFileName();
assertFalse(node1.equals((Object)node0));
assertNull(string1);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertEquals(32788, node1.getSourcePosition());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertEquals(8, node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertEquals(20, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());

Node node2 = node1.srcrefTree(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isName());
assertFalse(node2.isAssign());
assertFalse(node2.isCall());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBlock());
assertFalse(node2.isDec());
assertEquals(39, node2.getType());
assertFalse(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isFalse());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isTry());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());

boolean boolean3 = node0.isAnd();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean3);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());

node2.addSuppression((String) null);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDelProp());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isComma());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertTrue(node1.isNumber());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertEquals(39, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isName());
assertFalse(node2.isAssign());
assertFalse(node2.isCall());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isReturn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.isBlock());
assertFalse(node2.isDec());
assertEquals(39, node2.getType());
assertFalse(node2.hasChildren());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isFalse());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isThrow());
assertFalse(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isTry());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isParamList());
assertFalse(node2.isNull());
assertFalse(node2.isTrue());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());

node0.addSuppression("9Q k6.106");
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Iterable<Node> iterable1 = node2.children();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(iterable1.equals((Object)iterable0));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertNotNull(iterable1);
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(iterable1.contains(node2));

boolean boolean4 = node2.isEquivalentToShallow(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(boolean4);

boolean boolean5 = node2.isCatch();
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertSame(node1, node2);
assertSame(node2, node1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(boolean5);

node2.setSideEffectFlags((-484));

[MASTER] 17:58:53.799 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:54.363 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:54.685 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:55.052 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:55.340 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:58:55.358 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/12
* Done!

* Computation finished
