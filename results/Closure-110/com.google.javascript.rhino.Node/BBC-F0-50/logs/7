* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 16802
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1788076308
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:41:10.554 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:41:12.213 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:41:12.987 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I12 Branch 98 IF_ICMPEQ L764 - false
[MASTER] 17:41:12.994 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;
[MASTER] 17:41:12.994 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;
[MASTER] 17:41:13.039 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;: I9 Branch 104 IFNONNULL L814 - false in context: com.google.javascript.rhino.Node:getProp(I)Ljava/lang/Object;
[MASTER] 17:41:13.062 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch in context: com.google.javascript.rhino.Node$FileLevelJsDocBuilder:<init>(Lcom/google/javascript/rhino/Node;)V
[MASTER] 17:41:19.192 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 2525: com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;:800 - ReplaceComparisonOperator != -> <
[MASTER] 17:41:19.299 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - true
[MASTER] 17:42:51.083 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 605s and 464 generations, 197756 statements, best individual has fitness: 2840.0
* Minimizing test suite
[MASTER] 17:52:45.011 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 795
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 610
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 107
* Number of covered goals: 107
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 465
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 4536
* Number of covered goals: 2246
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 714
* Number of covered goals: 566
* Generated 846 tests with total length 9873
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:54:06.577 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6875666666666667% of time used, but only 42/846 tests minimized), falling back to using all assertions
[MASTER] 17:54:25.610 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 17:54:40.152 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 14 seconds more than allowed.
[MASTER] 17:54:54.799 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_122_1629222894749/com/google/javascript/rhino/Node_122_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_122_1629222894749/com/google/javascript/rhino/Node_122_tmp__ESTest_scaffolding.java]]
[MASTER] 17:54:54.799 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:54.799 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:54:54.819 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 325
[MASTER] 17:54:54.821 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_122_1629222894749/com/google/javascript/rhino/Node_122_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:54:54 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.EvoSuiteFile;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_122_tmp__ESTest extends Node_122_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
23:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
24:       assertEquals(0, node_SideEffectFlags0.valueOf());
25:       assertNotNull(node_SideEffectFlags0);
26:       
27:       boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
28:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
29:       assertEquals(0, node_SideEffectFlags0.valueOf());
30:       assertTrue(boolean0);
31:       
32:       Node node0 = Node.newNumber(770.6);
33:       assertFalse(node0.isInstanceOf());
34:       assertFalse(node0.isAnd());
35:       assertFalse(node0.isGetProp());
36:       assertFalse(node0.isWith());
37:       assertFalse(node0.isFalse());
38:       assertFalse(node0.isThrow());
39:       assertFalse(node0.isThis());
40:       assertFalse(node0.isComma());
41:       assertFalse(node0.hasOneChild());
42:       assertFalse(node0.isHook());
43:       assertFalse(node0.isCast());
44:       assertFalse(node0.isLabelName());
45:       assertFalse(node0.isScript());
46:       assertFalse(node0.isSwitch());
47:       assertFalse(node0.isString());
48:       assertFalse(node0.isObjectLit());
49:       assertFalse(node0.isNot());
50:       assertEquals((-1), node0.getCharno());
51:       assertEquals((-1), node0.getSourcePosition());
52:       assertFalse(node0.isIn());
53:       assertFalse(node0.hasMoreThanOneChild());
54:       assertFalse(node0.isContinue());
55:       assertEquals((-1), node0.getLineno());
56:       assertFalse(node0.isCase());
57:       assertFalse(node0.isBlock());
58:       assertFalse(node0.isFor());
59:       assertEquals(39, node0.getType());
60:       assertFalse(node0.isInc());
61:       assertFalse(node0.isIf());
62:       assertFalse(node0.isNE());
63:       assertEquals(0, node0.getChildCount());
64:       assertFalse(node0.isCatch());
65:       assertFalse(node0.isSetterDef());
66:       assertFalse(node0.isDefaultCase());
67:       assertFalse(node0.isRegExp());
68:       assertFalse(node0.isFunction());
69:       assertFalse(node0.isTry());
70:       assertFalse(node0.isArrayLit());
71:       assertFalse(node0.isGetterDef());
72:       assertFalse(node0.isParamList());
73:       assertFalse(node0.isStringKey());
74:       assertFalse(node0.isDebugger());
75:       assertFalse(node0.isAssignAdd());
76:       assertFalse(node0.isDo());
77:       assertTrue(node0.isNumber());
78:       assertFalse(node0.isDec());
79:       assertFalse(node0.isTypeOf());
80:       assertFalse(node0.isWhile());
81:       assertFalse(node0.isAssign());
82:       assertFalse(node0.isReturn());
83:       assertFalse(node0.isLabel());
84:       assertFalse(node0.hasChildren());
85:       assertFalse(node0.isVar());
86:       assertFalse(node0.isGetElem());
87:       assertFalse(node0.isEmpty());
88:       assertFalse(node0.isAdd());
89:       assertFalse(node0.isName());
90:       assertFalse(node0.isVoid());
91:       assertFalse(node0.isCall());
92:       assertFalse(node0.isExprResult());
93:       assertFalse(node0.isNew());
94:       assertFalse(node0.isBreak());
95:       assertFalse(node0.isDelProp());
96:       assertFalse(node0.isNull());
97:       assertFalse(node0.isTrue());
98:       assertFalse(node0.isOr());
99:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
100:       assertEquals(43, Node.IS_CONSTANT_NAME);
101:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
102:       assertEquals(53, Node.INPUT_ID);
103:       assertEquals(39, Node.EMPTY_BLOCK);
104:       assertEquals(36, Node.QUOTED_PROP);
105:       assertEquals(55, Node.INFERRED_FUNCTION);
106:       assertEquals(8, Node.FLAG_NO_THROWS);
107:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
108:       assertEquals(29, Node.JSDOC_INFO_PROP);
109:       assertEquals(50, Node.FREE_CALL);
110:       assertEquals(40, Node.ORIGINALNAME_PROP);
111:       assertEquals(47, Node.IS_DISPATCHER);
112:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
113:       assertEquals(2, Node.POST_FLAG);
114:       assertEquals(1, Node.DECR_FLAG);
115:       assertEquals(30, Node.VAR_ARGS_NAME);
116:       assertEquals(49, Node.DIRECT_EVAL);
117:       assertEquals(12, Node.COLUMN_BITS);
118:       assertEquals(32, Node.INCRDECR_PROP);
119:       assertEquals(46, Node.IS_NAMESPACE);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
123:       assertEquals(51, Node.STATIC_SOURCE_FILE);
124:       assertEquals(15, Node.NO_SIDE_EFFECTS);
125:       assertEquals(52, Node.LENGTH);
126:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
127:       assertEquals(56, Node.CHANGE_TIME);
128:       assertEquals(57, Node.REFLECTED_OBJECT);
129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
130:       assertEquals(48, Node.DIRECTIVES);
131:       assertEquals(37, Node.OPT_ARG_NAME);
132:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
133:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
134:       assertEquals(4095, Node.COLUMN_MASK);
135:       assertNotNull(node0);
136:       
137:       Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(8);
138:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
139:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
140:       assertEquals(8, node_SideEffectFlags1.valueOf());
141:       assertNotNull(node_SideEffectFlags1);
142:       
143:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
144:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
145:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
146:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
147:       assertEquals(8, node_SideEffectFlags1.valueOf());
148:       assertEquals(8, node_SideEffectFlags2.valueOf());
149:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
150:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
151:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
152:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
153:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
154:       assertNotNull(node_SideEffectFlags2);
155:       
156:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
157:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
158:       assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags0));
159:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
160:       assertEquals(0, node_SideEffectFlags1.valueOf());
161:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
162:       assertEquals(0, node_SideEffectFlags3.valueOf());
163:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
164:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
165:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
166:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
167:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
168:       assertNotSame(node_SideEffectFlags3, node_SideEffectFlags0);
169:       assertNotNull(node_SideEffectFlags3);
170:       
171:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setAllFlags();
172:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
173:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
174:       assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags0));
175:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
176:       assertEquals(0, node_SideEffectFlags1.valueOf());
177:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
178:       assertEquals(0, node_SideEffectFlags2.valueOf());
179:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
180:       assertEquals(0, node_SideEffectFlags4.valueOf());
181:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
182:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
183:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
184:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
185:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
186:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
187:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
188:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
189:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
190:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
191:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
192:       assertNotSame(node_SideEffectFlags4, node_SideEffectFlags0);
193:       assertNotNull(node_SideEffectFlags4);
194:       
195:       node_SideEffectFlags4.clearSideEffectFlags();
196:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
197:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
198:       assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags0));
199:       assertEquals(15, node_SideEffectFlags1.valueOf());
200:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
201:       assertEquals(15, node_SideEffectFlags2.valueOf());
202:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
203:       assertEquals(15, node_SideEffectFlags4.valueOf());
204:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
205:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
206:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
207:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
208:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
209:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
210:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
211:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
212:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
213:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
214:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
215:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
216:       assertNotSame(node_SideEffectFlags4, node_SideEffectFlags0);
217:       
218:       boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
219:       assertFalse(boolean1 == boolean0);
220:       assertFalse(boolean1);
221:       
222:       Iterable<Node> iterable0 = node0.children();
223:       assertFalse(node0.isInstanceOf());
224:       assertFalse(node0.isAnd());
225:       assertFalse(node0.isGetProp());
226:       assertFalse(node0.isWith());
227:       assertFalse(node0.isFalse());
228:       assertFalse(node0.isThrow());
229:       assertFalse(node0.isThis());
230:       assertFalse(node0.isComma());
231:       assertFalse(node0.hasOneChild());
232:       assertFalse(node0.isHook());
233:       assertFalse(node0.isCast());
234:       assertFalse(node0.isLabelName());
235:       assertFalse(node0.isScript());
236:       assertFalse(node0.isSwitch());
237:       assertFalse(node0.isString());
238:       assertFalse(node0.isObjectLit());
239:       assertFalse(node0.isNot());
240:       assertEquals((-1), node0.getCharno());
241:       assertEquals((-1), node0.getSourcePosition());
242:       assertFalse(node0.isIn());
243:       assertFalse(node0.hasMoreThanOneChild());
244:       assertFalse(node0.isContinue());
245:       assertEquals((-1), node0.getLineno());
246:       assertFalse(node0.isCase());
247:       assertFalse(node0.isBlock());
248:       assertFalse(node0.isFor());
249:       assertEquals(39, node0.getType());
250:       assertFalse(node0.isInc());
251:       assertFalse(node0.isIf());
252:       assertFalse(node0.isNE());
253:       assertEquals(0, node0.getChildCount());
254:       assertFalse(node0.isCatch());
255:       assertFalse(node0.isSetterDef());
256:       assertFalse(node0.isDefaultCase());
257:       assertFalse(node0.isRegExp());
258:       assertFalse(node0.isFunction());
259:       assertFalse(node0.isTry());
260:       assertFalse(node0.isArrayLit());
261:       assertFalse(node0.isGetterDef());
262:       assertFalse(node0.isParamList());
263:       assertFalse(node0.isStringKey());
264:       assertFalse(node0.isDebugger());
265:       assertFalse(node0.isAssignAdd());
266:       assertFalse(node0.isDo());
267:       assertTrue(node0.isNumber());
268:       assertFalse(node0.isDec());
269:       assertFalse(node0.isTypeOf());
270:       assertFalse(node0.isWhile());
271:       assertFalse(node0.isAssign());
272:       assertFalse(node0.isReturn());
273:       assertFalse(node0.isLabel());
274:       assertFalse(node0.hasChildren());
275:       assertFalse(node0.isVar());
276:       assertFalse(node0.isGetElem());
277:       assertFalse(node0.isEmpty());
278:       assertFalse(node0.isAdd());
279:       assertFalse(node0.isName());
280:       assertFalse(node0.isVoid());
281:       assertFalse(node0.isCall());
282:       assertFalse(node0.isExprResult());
283:       assertFalse(node0.isNew());
284:       assertFalse(node0.isBreak());
285:       assertFalse(node0.isDelProp());
286:       assertFalse(node0.isNull());
287:       assertFalse(node0.isTrue());
288:       assertFalse(node0.isOr());
289:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
290:       assertEquals(43, Node.IS_CONSTANT_NAME);
291:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
292:       assertEquals(53, Node.INPUT_ID);
293:       assertEquals(39, Node.EMPTY_BLOCK);
294:       assertEquals(36, Node.QUOTED_PROP);
295:       assertEquals(55, Node.INFERRED_FUNCTION);
296:       assertEquals(8, Node.FLAG_NO_THROWS);
297:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
298:       assertEquals(29, Node.JSDOC_INFO_PROP);
299:       assertEquals(50, Node.FREE_CALL);
300:       assertEquals(40, Node.ORIGINALNAME_PROP);
301:       assertEquals(47, Node.IS_DISPATCHER);
302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
303:       assertEquals(2, Node.POST_FLAG);
304:       assertEquals(1, Node.DECR_FLAG);
305:       assertEquals(30, Node.VAR_ARGS_NAME);
306:       assertEquals(49, Node.DIRECT_EVAL);
307:       assertEquals(12, Node.COLUMN_BITS);
308:       assertEquals(32, Node.INCRDECR_PROP);
309:       assertEquals(46, Node.IS_NAMESPACE);
310:       assertEquals(57, Node.LAST_PROP);
311:       assertEquals(54, Node.SLASH_V);
312:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
313:       assertEquals(51, Node.STATIC_SOURCE_FILE);
314:       assertEquals(15, Node.NO_SIDE_EFFECTS);
315:       assertEquals(52, Node.LENGTH);
316:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
317:       assertEquals(56, Node.CHANGE_TIME);
318:       assertEquals(57, Node.REFLECTED_OBJECT);
319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
320:       assertEquals(48, Node.DIRECTIVES);
321:       assertEquals(37, Node.OPT_ARG_NAME);
322:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
323:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
324:       assertEquals(4095, Node.COLUMN_MASK);
325:       assertFalse(iterable0.contains(node0));
326:       assertNotNull(iterable0);
327:       
328:       Node node1 = Node.newNumber((double) 1, 37, 40);
329:       assertFalse(node1.equals((Object)node0));
330:       assertFalse(node1.isNew());
331:       assertFalse(node1.isWhile());
332:       assertEquals(39, node1.getType());
333:       assertFalse(node1.isBlock());
334:       assertFalse(node1.isVar());
335:       assertFalse(node1.isCall());
336:       assertFalse(node1.hasMoreThanOneChild());
337:       assertFalse(node1.isContinue());
338:       assertFalse(node1.isName());
339:       assertFalse(node1.isSetterDef());
340:       assertEquals(37, node1.getLineno());
341:       assertFalse(node1.isOr());
342:       assertFalse(node1.isAssignAdd());
343:       assertFalse(node1.isLabel());
344:       assertFalse(node1.isNull());
345:       assertFalse(node1.isDo());
346:       assertFalse(node1.isAdd());
347:       assertFalse(node1.isFunction());
348:       assertFalse(node1.isDebugger());
349:       assertFalse(node1.isTrue());
350:       assertFalse(node1.isExprResult());
351:       assertFalse(node1.isVoid());
352:       assertFalse(node1.isAnd());
353:       assertFalse(node1.isAssign());
354:       assertFalse(node1.isGetElem());
355:       assertFalse(node1.isCast());
356:       assertFalse(node1.isComma());
357:       assertFalse(node1.isGetProp());
358:       assertFalse(node1.isDec());
359:       assertFalse(node1.isTypeOf());
360:       assertFalse(node1.isReturn());
361:       assertFalse(node1.hasChildren());
362:       assertFalse(node1.isObjectLit());
363:       assertFalse(node1.isNot());
364:       assertFalse(node1.isString());
365:       assertTrue(node1.isNumber());
366:       assertFalse(node1.isInc());
367:       assertFalse(node1.isSwitch());
368:       assertFalse(node1.isHook());
369:       assertEquals(40, node1.getCharno());
370:       assertFalse(node1.isFalse());
371:       assertFalse(node1.isBreak());
372:       assertFalse(node1.isDelProp());
373:       assertFalse(node1.isIf());
374:       assertFalse(node1.isNE());
375:       assertFalse(node1.isThrow());
376:       assertFalse(node1.isIn());
377:       assertFalse(node1.isEmpty());
378:       assertFalse(node1.isRegExp());
379:       assertFalse(node1.isTry());
380:       assertFalse(node1.isDefaultCase());
381:       assertEquals(151592, node1.getSourcePosition());
382:       assertFalse(node1.isArrayLit());
383:       assertFalse(node1.isLabelName());
384:       assertEquals(0, node1.getChildCount());
385:       assertFalse(node1.isWith());
386:       assertFalse(node1.isInstanceOf());
387:       assertFalse(node1.isCatch());
388:       assertFalse(node1.isParamList());
389:       assertFalse(node1.isThis());
390:       assertFalse(node1.isGetterDef());
391:       assertFalse(node1.isStringKey());
392:       assertFalse(node1.isFor());
393:       assertFalse(node1.isCase());
394:       assertFalse(node1.hasOneChild());
395:       assertFalse(node1.isScript());
396:       assertEquals(52, Node.LENGTH);
397:       assertEquals(57, Node.REFLECTED_OBJECT);
398:       assertEquals(54, Node.SLASH_V);
399:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
400:       assertEquals(50, Node.FREE_CALL);
401:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
402:       assertEquals(15, Node.NO_SIDE_EFFECTS);
403:       assertEquals(57, Node.LAST_PROP);
404:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
405:       assertEquals(39, Node.EMPTY_BLOCK);
406:       assertEquals(1, Node.DECR_FLAG);
407:       assertEquals(32, Node.INCRDECR_PROP);
408:       assertEquals(12, Node.COLUMN_BITS);
409:       assertEquals(4095, Node.COLUMN_MASK);
410:       assertEquals(55, Node.INFERRED_FUNCTION);
411:       assertEquals(8, Node.FLAG_NO_THROWS);
412:       assertEquals(56, Node.CHANGE_TIME);
413:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
414:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
415:       assertEquals(37, Node.OPT_ARG_NAME);
416:       assertEquals(48, Node.DIRECTIVES);
417:       assertEquals(49, Node.DIRECT_EVAL);
418:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
419:       assertEquals(53, Node.INPUT_ID);
420:       assertEquals(36, Node.QUOTED_PROP);
421:       assertEquals(47, Node.IS_DISPATCHER);
422:       assertEquals(29, Node.JSDOC_INFO_PROP);
423:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
424:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
425:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
426:       assertEquals(46, Node.IS_NAMESPACE);
427:       assertEquals(51, Node.STATIC_SOURCE_FILE);
428:       assertEquals(2, Node.POST_FLAG);
429:       assertEquals(30, Node.VAR_ARGS_NAME);
430:       assertEquals(43, Node.IS_CONSTANT_NAME);
431:       assertEquals(40, Node.ORIGINALNAME_PROP);
432:       assertNotSame(node1, node0);
433:       assertNotNull(node1);
434:   }
435: }
RegularFileObject[/tmp/EvoSuite_122_1629222894749/com/google/javascript/rhino/Node_122_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:54:54 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_122_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_122_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.common.collect.Iterables",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_122_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.Token",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.jstype.ArrowType",
322:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
323:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
324:       "com.google.javascript.rhino.jstype.InstanceObjectType",
325:       "com.google.javascript.rhino.jstype.Property",
326:       "com.google.common.collect.Lists",
327:       "com.google.javascript.rhino.jstype.NoObjectType",
328:       "com.google.javascript.rhino.jstype.NoType",
329:       "com.google.javascript.rhino.jstype.NoResolvedType",
330:       "com.google.common.collect.SingletonImmutableList",
331:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
332:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
333:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
334:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
335:       "com.google.javascript.rhino.jstype.UnionType",
336:       "com.google.javascript.rhino.jstype.FunctionBuilder",
337:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.base.Objects",
344:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.Sets",
351:       "com.google.common.collect.AbstractIndexedListIterator",
352:       "com.google.common.collect.Iterators$11",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets$ImprovedAbstractSet",
355:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
356:       "com.google.common.collect.Hashing",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.javascript.rhino.JSTypeExpression",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair"
373:     );
374:   }
375: }

[MASTER] 17:54:54.828 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

boolean boolean0 = node_SideEffectFlags0.areAllFlagsSet();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(boolean0);

Node node0 = Node.newNumber(770.6);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertNotNull(node0);

Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(8);
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(8, node_SideEffectFlags1.valueOf());
assertEquals(8, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags0));
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setAllFlags();
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags0));
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags4);

node_SideEffectFlags4.clearSideEffectFlags();
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags0));
assertEquals(15, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(15, node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags4, node_SideEffectFlags0);

boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertEquals(39, node0.getType());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isDelProp());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

Node node1 = Node.newNumber((double) 1, 37, 40);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertEquals(37, node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertTrue(node1.isNumber());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertEquals(40, node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isEmpty());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isDefaultCase());
assertEquals(151592, node1.getSourcePosition());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotSame(node1, node0);
assertNotNull(node1);


[MASTER] 17:55:01.523 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_154_1629222900923/com/google/javascript/rhino/Node_154_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_154_1629222900923/com/google/javascript/rhino/Node_154_tmp__ESTest_scaffolding.java]]
[MASTER] 17:55:01.523 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:01.523 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 17:55:01.524 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   variable int1
  location: class com.google.javascript.rhino.Node_154_tmp__ESTest: 226
[MASTER] 17:55:01.529 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_154_1629222900923/com/google/javascript/rhino/Node_154_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 17:55:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_154_tmp__ESTest extends Node_154_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber((double) (-3223), 1403, (-3223));
22:       assertFalse(node0.isHook());
23:       assertEquals((-1), node0.getCharno());
24:       assertFalse(node0.isFalse());
25:       assertFalse(node0.isString());
26:       assertFalse(node0.isThrow());
27:       assertFalse(node0.isInc());
28:       assertFalse(node0.isGetProp());
29:       assertFalse(node0.isCase());
30:       assertFalse(node0.isIn());
31:       assertFalse(node0.isInstanceOf());
32:       assertFalse(node0.isThis());
33:       assertFalse(node0.isComma());
34:       assertFalse(node0.isWith());
35:       assertFalse(node0.isIf());
36:       assertFalse(node0.isBreak());
37:       assertFalse(node0.isNE());
38:       assertFalse(node0.isExprResult());
39:       assertFalse(node0.isDelProp());
40:       assertFalse(node0.isCast());
41:       assertFalse(node0.isFunction());
42:       assertFalse(node0.isDebugger());
43:       assertFalse(node0.isAssign());
44:       assertFalse(node0.hasChildren());
45:       assertTrue(node0.isNumber());
46:       assertFalse(node0.isContinue());
47:       assertEquals((-1), node0.getSourcePosition());
48:       assertFalse(node0.isObjectLit());
49:       assertFalse(node0.isNot());
50:       assertFalse(node0.isAnd());
51:       assertFalse(node0.isBlock());
52:       assertFalse(node0.isVar());
53:       assertFalse(node0.isAdd());
54:       assertFalse(node0.isWhile());
55:       assertEquals(39, node0.getType());
56:       assertFalse(node0.isSetterDef());
57:       assertFalse(node0.isNew());
58:       assertFalse(node0.isDo());
59:       assertEquals((-1), node0.getLineno());
60:       assertFalse(node0.isReturn());
61:       assertFalse(node0.isCatch());
62:       assertFalse(node0.hasMoreThanOneChild());
63:       assertFalse(node0.isDec());
64:       assertFalse(node0.isTypeOf());
65:       assertFalse(node0.isOr());
66:       assertFalse(node0.isNull());
67:       assertFalse(node0.isGetElem());
68:       assertFalse(node0.isCall());
69:       assertFalse(node0.isName());
70:       assertFalse(node0.isVoid());
71:       assertFalse(node0.isTrue());
72:       assertFalse(node0.isRegExp());
73:       assertFalse(node0.isDefaultCase());
74:       assertFalse(node0.isEmpty());
75:       assertFalse(node0.isScript());
76:       assertFalse(node0.isFor());
77:       assertFalse(node0.hasOneChild());
78:       assertFalse(node0.isTry());
79:       assertFalse(node0.isAssignAdd());
80:       assertFalse(node0.isLabel());
81:       assertFalse(node0.isGetterDef());
82:       assertEquals(0, node0.getChildCount());
83:       assertFalse(node0.isStringKey());
84:       assertFalse(node0.isParamList());
85:       assertFalse(node0.isSwitch());
86:       assertFalse(node0.isArrayLit());
87:       assertFalse(node0.isLabelName());
88:       
89:       boolean boolean0 = node0.isNumber();
90:       assertFalse(node0.isHook());
91:       assertEquals((-1), node0.getCharno());
92:       assertFalse(node0.isFalse());
93:       assertFalse(node0.isString());
94:       assertFalse(node0.isThrow());
95:       assertFalse(node0.isInc());
96:       assertFalse(node0.isGetProp());
97:       assertFalse(node0.isCase());
98:       assertFalse(node0.isIn());
99:       assertFalse(node0.isInstanceOf());
100:       assertFalse(node0.isThis());
101:       assertFalse(node0.isComma());
102:       assertFalse(node0.isWith());
103:       assertFalse(node0.isIf());
104:       assertFalse(node0.isBreak());
105:       assertFalse(node0.isNE());
106:       assertFalse(node0.isExprResult());
107:       assertFalse(node0.isDelProp());
108:       assertFalse(node0.isCast());
109:       assertFalse(node0.isFunction());
110:       assertFalse(node0.isDebugger());
111:       assertFalse(node0.isAssign());
112:       assertFalse(node0.hasChildren());
113:       assertTrue(node0.isNumber());
114:       assertFalse(node0.isContinue());
115:       assertEquals((-1), node0.getSourcePosition());
116:       assertFalse(node0.isObjectLit());
117:       assertFalse(node0.isNot());
118:       assertFalse(node0.isAnd());
119:       assertFalse(node0.isBlock());
120:       assertFalse(node0.isVar());
121:       assertFalse(node0.isAdd());
122:       assertFalse(node0.isWhile());
123:       assertEquals(39, node0.getType());
124:       assertFalse(node0.isSetterDef());
125:       assertFalse(node0.isNew());
126:       assertFalse(node0.isDo());
127:       assertEquals((-1), node0.getLineno());
128:       assertFalse(node0.isReturn());
129:       assertFalse(node0.isCatch());
130:       assertFalse(node0.hasMoreThanOneChild());
131:       assertFalse(node0.isDec());
132:       assertFalse(node0.isTypeOf());
133:       assertFalse(node0.isOr());
134:       assertFalse(node0.isNull());
135:       assertFalse(node0.isGetElem());
136:       assertFalse(node0.isCall());
137:       assertFalse(node0.isName());
138:       assertFalse(node0.isVoid());
139:       assertFalse(node0.isTrue());
140:       assertFalse(node0.isRegExp());
141:       assertFalse(node0.isDefaultCase());
142:       assertFalse(node0.isEmpty());
143:       assertFalse(node0.isScript());
144:       assertFalse(node0.isFor());
145:       assertFalse(node0.hasOneChild());
146:       assertFalse(node0.isTry());
147:       assertFalse(node0.isAssignAdd());
148:       assertFalse(node0.isLabel());
149:       assertFalse(node0.isGetterDef());
150:       assertEquals(0, node0.getChildCount());
151:       assertFalse(node0.isStringKey());
152:       assertFalse(node0.isParamList());
153:       assertFalse(node0.isSwitch());
154:       assertFalse(node0.isArrayLit());
155:       assertFalse(node0.isLabelName());
156:       
157:       node0.getChangeTime();
158:       assertFalse(node0.isHook());
159:       assertEquals((-1), node0.getCharno());
160:       assertFalse(node0.isFalse());
161:       assertFalse(node0.isString());
162:       assertFalse(node0.isThrow());
163:       assertFalse(node0.isInc());
164:       assertFalse(node0.isGetProp());
165:       assertFalse(node0.isCase());
166:       assertFalse(node0.isIn());
167:       assertFalse(node0.isInstanceOf());
168:       assertFalse(node0.isThis());
169:       assertFalse(node0.isComma());
170:       assertFalse(node0.isWith());
171:       assertFalse(node0.isIf());
172:       assertFalse(node0.isBreak());
173:       assertFalse(node0.isNE());
174:       assertFalse(node0.isExprResult());
175:       assertFalse(node0.isDelProp());
176:       assertFalse(node0.isCast());
177:       assertFalse(node0.isFunction());
178:       assertFalse(node0.isDebugger());
179:       assertFalse(node0.isAssign());
180:       assertFalse(node0.hasChildren());
181:       assertTrue(node0.isNumber());
182:       assertFalse(node0.isContinue());
183:       assertEquals((-1), node0.getSourcePosition());
184:       assertFalse(node0.isObjectLit());
185:       assertFalse(node0.isNot());
186:       assertFalse(node0.isAnd());
187:       assertFalse(node0.isBlock());
188:       assertFalse(node0.isVar());
189:       assertFalse(node0.isAdd());
190:       assertFalse(node0.isWhile());
191:       assertEquals(39, node0.getType());
192:       assertFalse(node0.isSetterDef());
193:       assertFalse(node0.isNew());
194:       assertFalse(node0.isDo());
195:       assertEquals((-1), node0.getLineno());
196:       assertFalse(node0.isReturn());
197:       assertFalse(node0.isCatch());
198:       assertFalse(node0.hasMoreThanOneChild());
199:       assertFalse(node0.isDec());
200:       assertFalse(node0.isTypeOf());
201:       assertFalse(node0.isOr());
202:       assertFalse(node0.isNull());
203:       assertFalse(node0.isGetElem());
204:       assertFalse(node0.isCall());
205:       assertFalse(node0.isName());
206:       assertFalse(node0.isVoid());
207:       assertFalse(node0.isTrue());
208:       assertFalse(node0.isRegExp());
209:       assertFalse(node0.isDefaultCase());
210:       assertFalse(node0.isEmpty());
211:       assertFalse(node0.isScript());
212:       assertFalse(node0.isFor());
213:       assertFalse(node0.hasOneChild());
214:       assertFalse(node0.isTry());
215:       assertFalse(node0.isAssignAdd());
216:       assertFalse(node0.isLabel());
217:       assertFalse(node0.isGetterDef());
218:       assertEquals(0, node0.getChildCount());
219:       assertFalse(node0.isStringKey());
220:       assertFalse(node0.isParamList());
221:       assertFalse(node0.isSwitch());
222:       assertFalse(node0.isArrayLit());
223:       assertFalse(node0.isLabelName());
224:       
225:       int int0 = Node.EMPTY_BLOCK;
226:       assertFalse(int0 == int1);
227:       
228:       boolean boolean1 = node0.hasMoreThanOneChild();
229:       assertFalse(boolean1 == boolean0);
230:       assertFalse(node0.isHook());
231:       assertEquals((-1), node0.getCharno());
232:       assertFalse(node0.isFalse());
233:       assertFalse(node0.isString());
234:       assertFalse(node0.isThrow());
235:       assertFalse(node0.isInc());
236:       assertFalse(node0.isGetProp());
237:       assertFalse(node0.isCase());
238:       assertFalse(node0.isIn());
239:       assertFalse(node0.isInstanceOf());
240:       assertFalse(node0.isThis());
241:       assertFalse(node0.isComma());
242:       assertFalse(node0.isWith());
243:       assertFalse(node0.isIf());
244:       assertFalse(node0.isBreak());
245:       assertFalse(node0.isNE());
246:       assertFalse(node0.isExprResult());
247:       assertFalse(node0.isDelProp());
248:       assertFalse(node0.isCast());
249:       assertFalse(node0.isFunction());
250:       assertFalse(node0.isDebugger());
251:       assertFalse(node0.isAssign());
252:       assertFalse(node0.hasChildren());
253:       assertTrue(node0.isNumber());
254:       assertFalse(node0.isContinue());
255:       assertEquals((-1), node0.getSourcePosition());
256:       assertFalse(node0.isObjectLit());
257:       assertFalse(node0.isNot());
258:       assertFalse(node0.isAnd());
259:       assertFalse(node0.isBlock());
260:       assertFalse(node0.isVar());
261:       assertFalse(node0.isAdd());
262:       assertFalse(node0.isWhile());
263:       assertEquals(39, node0.getType());
264:       assertFalse(node0.isSetterDef());
265:       assertFalse(node0.isNew());
266:       assertFalse(node0.isDo());
267:       assertEquals((-1), node0.getLineno());
268:       assertFalse(node0.isReturn());
269:       assertFalse(node0.isCatch());
270:       assertFalse(node0.hasMoreThanOneChild());
271:       assertFalse(node0.isDec());
272:       assertFalse(node0.isTypeOf());
273:       assertFalse(node0.isOr());
274:       assertFalse(node0.isNull());
275:       assertFalse(node0.isGetElem());
276:       assertFalse(node0.isCall());
277:       assertFalse(node0.isName());
278:       assertFalse(node0.isVoid());
279:       assertFalse(node0.isTrue());
280:       assertFalse(node0.isRegExp());
281:       assertFalse(node0.isDefaultCase());
282:       assertFalse(node0.isEmpty());
283:       assertFalse(node0.isScript());
284:       assertFalse(node0.isFor());
285:       assertFalse(node0.hasOneChild());
286:       assertFalse(node0.isTry());
287:       assertFalse(node0.isAssignAdd());
288:       assertFalse(node0.isLabel());
289:       assertFalse(node0.isGetterDef());
290:       assertEquals(0, node0.getChildCount());
291:       assertFalse(node0.isStringKey());
292:       assertFalse(node0.isParamList());
293:       assertFalse(node0.isSwitch());
294:       assertFalse(node0.isArrayLit());
295:       assertFalse(node0.isLabelName());
296:       
297:       Node node1 = new Node(41, node0);
298:       assertFalse(node1.equals((Object)node0));
299:       assertFalse(node0.isHook());
300:       assertEquals((-1), node0.getCharno());
301:       assertFalse(node0.isFalse());
302:       assertFalse(node0.isString());
303:       assertFalse(node0.isThrow());
304:       assertFalse(node0.isInc());
305:       assertFalse(node0.isGetProp());
306:       assertFalse(node0.isCase());
307:       assertFalse(node0.isIn());
308:       assertFalse(node0.isInstanceOf());
309:       assertFalse(node0.isThis());
310:       assertFalse(node0.isComma());
311:       assertFalse(node0.isWith());
312:       assertFalse(node0.isIf());
313:       assertFalse(node0.isBreak());
314:       assertFalse(node0.isNE());
315:       assertFalse(node0.isExprResult());
316:       assertFalse(node0.isDelProp());
317:       assertFalse(node0.isCast());
318:       assertFalse(node0.isFunction());
319:       assertFalse(node0.isDebugger());
320:       assertFalse(node0.isAssign());
321:       assertFalse(node0.hasChildren());
322:       assertTrue(node0.isNumber());
323:       assertFalse(node0.isContinue());
324:       assertEquals((-1), node0.getSourcePosition());
325:       assertFalse(node0.isObjectLit());
326:       assertFalse(node0.isNot());
327:       assertFalse(node0.isAnd());
328:       assertFalse(node0.isBlock());
329:       assertFalse(node0.isVar());
330:       assertFalse(node0.isAdd());
331:       assertFalse(node0.isWhile());
332:       assertEquals(39, node0.getType());
333:       assertFalse(node0.isSetterDef());
334:       assertFalse(node0.isNew());
335:       assertFalse(node0.isDo());
336:       assertEquals((-1), node0.getLineno());
337:       assertFalse(node0.isReturn());
338:       assertFalse(node0.isCatch());
339:       assertFalse(node0.hasMoreThanOneChild());
340:       assertFalse(node0.isDec());
341:       assertFalse(node0.isTypeOf());
342:       assertFalse(node0.isOr());
343:       assertFalse(node0.isNull());
344:       assertFalse(node0.isGetElem());
345:       assertFalse(node0.isCall());
346:       assertFalse(node0.isName());
347:       assertFalse(node0.isVoid());
348:       assertFalse(node0.isTrue());
349:       assertFalse(node0.isRegExp());
350:       assertFalse(node0.isDefaultCase());
351:       assertFalse(node0.isEmpty());
352:       assertFalse(node0.isScript());
353:       assertFalse(node0.isFor());
354:       assertFalse(node0.hasOneChild());
355:       assertFalse(node0.isTry());
356:       assertFalse(node0.isAssignAdd());
357:       assertFalse(node0.isLabel());
358:       assertFalse(node0.isGetterDef());
359:       assertEquals(0, node0.getChildCount());
360:       assertFalse(node0.isStringKey());
361:       assertFalse(node0.isParamList());
362:       assertFalse(node0.isSwitch());
363:       assertFalse(node0.isArrayLit());
364:       assertFalse(node0.isLabelName());
365:       assertEquals(1, node1.getChildCount());
366:       assertFalse(node1.isIn());
367:       assertTrue(node1.hasChildren());
368:       assertFalse(node1.isCase());
369:       assertTrue(node1.hasOneChild());
370:       assertFalse(node1.isFor());
371:       assertEquals(41, node1.getType());
372:       assertFalse(node1.isInc());
373:       assertFalse(node1.isVoid());
374:       assertFalse(node1.isDelProp());
375:       assertFalse(node1.isIf());
376:       assertFalse(node1.isNE());
377:       assertFalse(node1.isEmpty());
378:       assertFalse(node1.isTrue());
379:       assertFalse(node1.isInstanceOf());
380:       assertFalse(node1.isCatch());
381:       assertFalse(node1.isParamList());
382:       assertFalse(node1.isDefaultCase());
383:       assertFalse(node1.isWith());
384:       assertFalse(node1.isThis());
385:       assertFalse(node1.isRegExp());
386:       assertFalse(node1.isHook());
387:       assertFalse(node1.isBlock());
388:       assertFalse(node1.isSwitch());
389:       assertFalse(node1.isArrayLit());
390:       assertFalse(node1.isTry());
391:       assertFalse(node1.isLabelName());
392:       assertFalse(node1.isGetterDef());
393:       assertFalse(node1.isNumber());
394:       assertFalse(node1.isScript());
395:       assertFalse(node1.isStringKey());
396:       assertEquals((-1), node1.getCharno());
397:       assertEquals((-1), node1.getLineno());
398:       assertFalse(node1.isReturn());
399:       assertFalse(node1.isAssignAdd());
400:       assertFalse(node1.isDo());
401:       assertFalse(node1.isWhile());
402:       assertFalse(node1.isGetElem());
403:       assertFalse(node1.isContinue());
404:       assertFalse(node1.hasMoreThanOneChild());
405:       assertFalse(node1.isLabel());
406:       assertFalse(node1.isTypeOf());
407:       assertFalse(node1.isDec());
408:       assertFalse(node1.isAssign());
409:       assertFalse(node1.isAdd());
410:       assertFalse(node1.isVar());
411:       assertFalse(node1.isCall());
412:       assertFalse(node1.isExprResult());
413:       assertFalse(node1.isNew());
414:       assertFalse(node1.isName());
415:       assertFalse(node1.isOr());
416:       assertTrue(node1.isNull());
417:       assertFalse(node1.isAnd());
418:       assertFalse(node1.isSetterDef());
419:       assertFalse(node1.isGetProp());
420:       assertFalse(node1.isBreak());
421:       assertFalse(node1.isThrow());
422:       assertFalse(node1.isFunction());
423:       assertFalse(node1.isFalse());
424:       assertFalse(node1.isComma());
425:       assertFalse(node1.isCast());
426:       assertFalse(node1.isString());
427:       assertFalse(node1.isObjectLit());
428:       assertFalse(node1.isDebugger());
429:       assertEquals((-1), node1.getSourcePosition());
430:       assertFalse(node1.isNot());
431:       
432:       boolean boolean2 = node0.isEquivalentTo(node1);
433:       assertFalse(node0.equals((Object)node1));
434:       assertFalse(node1.equals((Object)node0));
435:       assertTrue(boolean2 == boolean1);
436:       assertFalse(boolean2 == boolean0);
437:       assertFalse(node0.isHook());
438:       assertEquals((-1), node0.getCharno());
439:       assertFalse(node0.isFalse());
440:       assertFalse(node0.isString());
441:       assertFalse(node0.isThrow());
442:       assertFalse(node0.isInc());
443:       assertFalse(node0.isGetProp());
444:       assertFalse(node0.isCase());
445:       assertFalse(node0.isIn());
446:       assertFalse(node0.isInstanceOf());
447:       assertFalse(node0.isThis());
448:       assertFalse(node0.isComma());
449:       assertFalse(node0.isWith());
450:       assertFalse(node0.isIf());
451:       assertFalse(node0.isBreak());
452:       assertFalse(node0.isNE());
453:       assertFalse(node0.isExprResult());
454:       assertFalse(node0.isDelProp());
455:       assertFalse(node0.isCast());
456:       assertFalse(node0.isFunction());
457:       assertFalse(node0.isDebugger());
458:       assertFalse(node0.isAssign());
459:       assertFalse(node0.hasChildren());
460:       assertTrue(node0.isNumber());
461:       assertFalse(node0.isContinue());
462:       assertEquals((-1), node0.getSourcePosition());
463:       assertFalse(node0.isObjectLit());
464:       assertFalse(node0.isNot());
465:       assertFalse(node0.isAnd());
466:       assertFalse(node0.isBlock());
467:       assertFalse(node0.isVar());
468:       assertFalse(node0.isAdd());
469:       assertFalse(node0.isWhile());
470:       assertEquals(39, node0.getType());
471:       assertFalse(node0.isSetterDef());
472:       assertFalse(node0.isNew());
473:       assertFalse(node0.isDo());
474:       assertEquals((-1), node0.getLineno());
475:       assertFalse(node0.isReturn());
476:       assertFalse(node0.isCatch());
477:       assertFalse(node0.hasMoreThanOneChild());
478:       assertFalse(node0.isDec());
479:       assertFalse(node0.isTypeOf());
480:       assertFalse(node0.isOr());
481:       assertFalse(node0.isNull());
482:       assertFalse(node0.isGetElem());
483:       assertFalse(node0.isCall());
484:       assertFalse(node0.isName());
485:       assertFalse(node0.isVoid());
486:       assertFalse(node0.isTrue());
487:       assertFalse(node0.isRegExp());
488:       assertFalse(node0.isDefaultCase());
489:       assertFalse(node0.isEmpty());
490:       assertFalse(node0.isScript());
491:       assertFalse(node0.isFor());
492:       assertFalse(node0.hasOneChild());
493:       assertFalse(node0.isTry());
494:       assertFalse(node0.isAssignAdd());
495:       assertFalse(node0.isLabel());
496:       assertFalse(node0.isGetterDef());
497:       assertEquals(0, node0.getChildCount());
498:       assertFalse(node0.isStringKey());
499:       assertFalse(node0.isParamList());
500:       assertFalse(node0.isSwitch());
501:       assertFalse(node0.isArrayLit());
502:       assertFalse(node0.isLabelName());
503:       assertEquals(1, node1.getChildCount());
504:       assertFalse(node1.isIn());
505:       assertTrue(node1.hasChildren());
506:       assertFalse(node1.isCase());
507:       assertTrue(node1.hasOneChild());
508:       assertFalse(node1.isFor());
509:       assertEquals(41, node1.getType());
510:       assertFalse(node1.isInc());
511:       assertFalse(node1.isVoid());
512:       assertFalse(node1.isDelProp());
513:       assertFalse(node1.isIf());
514:       assertFalse(node1.isNE());
515:       assertFalse(node1.isEmpty());
516:       assertFalse(node1.isTrue());
517:       assertFalse(node1.isInstanceOf());
518:       assertFalse(node1.isCatch());
519:       assertFalse(node1.isParamList());
520:       assertFalse(node1.isDefaultCase());
521:       assertFalse(node1.isWith());
522:       assertFalse(node1.isThis());
523:       assertFalse(node1.isRegExp());
524:       assertFalse(node1.isHook());
525:       assertFalse(node1.isBlock());
526:       assertFalse(node1.isSwitch());
527:       assertFalse(node1.isArrayLit());
528:       assertFalse(node1.isTry());
529:       assertFalse(node1.isLabelName());
530:       assertFalse(node1.isGetterDef());
531:       assertFalse(node1.isNumber());
532:       assertFalse(node1.isScript());
533:       assertFalse(node1.isStringKey());
534:       assertEquals((-1), node1.getCharno());
535:       assertEquals((-1), node1.getLineno());
536:       assertFalse(node1.isReturn());
537:       assertFalse(node1.isAssignAdd());
538:       assertFalse(node1.isDo());
539:       assertFalse(node1.isWhile());
540:       assertFalse(node1.isGetElem());
541:       assertFalse(node1.isContinue());
542:       assertFalse(node1.hasMoreThanOneChild());
543:       assertFalse(node1.isLabel());
544:       assertFalse(node1.isTypeOf());
545:       assertFalse(node1.isDec());
546:       assertFalse(node1.isAssign());
547:       assertFalse(node1.isAdd());
548:       assertFalse(node1.isVar());
549:       assertFalse(node1.isCall());
550:       assertFalse(node1.isExprResult());
551:       assertFalse(node1.isNew());
552:       assertFalse(node1.isName());
553:       assertFalse(node1.isOr());
554:       assertTrue(node1.isNull());
555:       assertFalse(node1.isAnd());
556:       assertFalse(node1.isSetterDef());
557:       assertFalse(node1.isGetProp());
558:       assertFalse(node1.isBreak());
559:       assertFalse(node1.isThrow());
560:       assertFalse(node1.isFunction());
561:       assertFalse(node1.isFalse());
562:       assertFalse(node1.isComma());
563:       assertFalse(node1.isCast());
564:       assertFalse(node1.isString());
565:       assertFalse(node1.isObjectLit());
566:       assertFalse(node1.isDebugger());
567:       assertEquals((-1), node1.getSourcePosition());
568:       assertFalse(node1.isNot());
569:       
570:       boolean boolean3 = node1.mayMutateGlobalStateOrThrow();
571:       assertFalse(node0.equals((Object)node1));
572:       assertFalse(node1.equals((Object)node0));
573:       assertFalse(boolean3 == boolean1);
574:       assertFalse(boolean3 == boolean2);
575:       assertTrue(boolean3 == boolean0);
576:       assertFalse(node0.isHook());
577:       assertEquals((-1), node0.getCharno());
578:       assertFalse(node0.isFalse());
579:       assertFalse(node0.isString());
580:       assertFalse(node0.isThrow());
581:       assertFalse(node0.isInc());
582:       assertFalse(node0.isGetProp());
583:       assertFalse(node0.isCase());
584:       assertFalse(node0.isIn());
585:       assertFalse(node0.isInstanceOf());
586:       assertFalse(node0.isThis());
587:       assertFalse(node0.isComma());
588:       assertFalse(node0.isWith());
589:       assertFalse(node0.isIf());
590:       assertFalse(node0.isBreak());
591:       assertFalse(node0.isNE());
592:       assertFalse(node0.isExprResult());
593:       assertFalse(node0.isDelProp());
594:       assertFalse(node0.isCast());
595:       assertFalse(node0.isFunction());
596:       assertFalse(node0.isDebugger());
597:       assertFalse(node0.isAssign());
598:       assertFalse(node0.hasChildren());
599:       assertTrue(node0.isNumber());
600:       assertFalse(node0.isContinue());
601:       assertEquals((-1), node0.getSourcePosition());
602:       assertFalse(node0.isObjectLit());
603:       assertFalse(node0.isNot());
604:       assertFalse(node0.isAnd());
605:       assertFalse(node0.isBlock());
606:       assertFalse(node0.isVar());
607:       assertFalse(node0.isAdd());
608:       assertFalse(node0.isWhile());
609:       assertEquals(39, node0.getType());
610:       assertFalse(node0.isSetterDef());
611:       assertFalse(node0.isNew());
612:       assertFalse(node0.isDo());
613:       assertEquals((-1), node0.getLineno());
614:       assertFalse(node0.isReturn());
615:       assertFalse(node0.isCatch());
616:       assertFalse(node0.hasMoreThanOneChild());
617:       assertFalse(node0.isDec());
618:       assertFalse(node0.isTypeOf());
619:       assertFalse(node0.isOr());
620:       assertFalse(node0.isNull());
621:       assertFalse(node0.isGetElem());
622:       assertFalse(node0.isCall());
623:       assertFalse(node0.isName());
624:       assertFalse(node0.isVoid());
625:       assertFalse(node0.isTrue());
626:       assertFalse(node0.isRegExp());
627:       assertFalse(node0.isDefaultCase());
628:       assertFalse(node0.isEmpty());
629:       assertFalse(node0.isScript());
630:       assertFalse(node0.isFor());
631:       assertFalse(node0.hasOneChild());
632:       assertFalse(node0.isTry());
633:       assertFalse(node0.isAssignAdd());
634:       assertFalse(node0.isLabel());
635:       assertFalse(node0.isGetterDef());
636:       assertEquals(0, node0.getChildCount());
637:       assertFalse(node0.isStringKey());
638:       assertFalse(node0.isParamList());
639:       assertFalse(node0.isSwitch());
640:       assertFalse(node0.isArrayLit());
641:       assertFalse(node0.isLabelName());
642:       assertEquals(1, node1.getChildCount());
643:       assertFalse(node1.isIn());
644:       assertTrue(node1.hasChildren());
645:       assertFalse(node1.isCase());
646:       assertTrue(node1.hasOneChild());
647:       assertFalse(node1.isFor());
648:       assertEquals(41, node1.getType());
649:       assertFalse(node1.isInc());
650:       assertFalse(node1.isVoid());
651:       assertFalse(node1.isDelProp());
652:       assertFalse(node1.isIf());
653:       assertFalse(node1.isNE());
654:       assertFalse(node1.isEmpty());
655:       assertFalse(node1.isTrue());
656:       assertFalse(node1.isInstanceOf());
657:       assertFalse(node1.isCatch());
658:       assertFalse(node1.isParamList());
659:       assertFalse(node1.isDefaultCase());
660:       assertFalse(node1.isWith());
661:       assertFalse(node1.isThis());
662:       assertFalse(node1.isRegExp());
663:       assertFalse(node1.isHook());
664:       assertFalse(node1.isBlock());
665:       assertFalse(node1.isSwitch());
666:       assertFalse(node1.isArrayLit());
667:       assertFalse(node1.isTry());
668:       assertFalse(node1.isLabelName());
669:       assertFalse(node1.isGetterDef());
670:       assertFalse(node1.isNumber());
671:       assertFalse(node1.isScript());
672:       assertFalse(node1.isStringKey());
673:       assertEquals((-1), node1.getCharno());
674:       assertEquals((-1), node1.getLineno());
675:       assertFalse(node1.isReturn());
676:       assertFalse(node1.isAssignAdd());
677:       assertFalse(node1.isDo());
678:       assertFalse(node1.isWhile());
679:       assertFalse(node1.isGetElem());
680:       assertFalse(node1.isContinue());
681:       assertFalse(node1.hasMoreThanOneChild());
682:       assertFalse(node1.isLabel());
683:       assertFalse(node1.isTypeOf());
684:       assertFalse(node1.isDec());
685:       assertFalse(node1.isAssign());
686:       assertFalse(node1.isAdd());
687:       assertFalse(node1.isVar());
688:       assertFalse(node1.isCall());
689:       assertFalse(node1.isExprResult());
690:       assertFalse(node1.isNew());
691:       assertFalse(node1.isName());
692:       assertFalse(node1.isOr());
693:       assertTrue(node1.isNull());
694:       assertFalse(node1.isAnd());
695:       assertFalse(node1.isSetterDef());
696:       assertFalse(node1.isGetProp());
697:       assertFalse(node1.isBreak());
698:       assertFalse(node1.isThrow());
699:       assertFalse(node1.isFunction());
700:       assertFalse(node1.isFalse());
701:       assertFalse(node1.isComma());
702:       assertFalse(node1.isCast());
703:       assertFalse(node1.isString());
704:       assertFalse(node1.isObjectLit());
705:       assertFalse(node1.isDebugger());
706:       assertEquals((-1), node1.getSourcePosition());
707:       assertFalse(node1.isNot());
708:       
709:       boolean boolean4 = node0.wasEmptyNode();
710:       assertFalse(node0.equals((Object)node1));
711:       assertTrue(boolean4 == boolean1);
712:       assertFalse(boolean4 == boolean3);
713:       assertTrue(boolean4 == boolean2);
714:       assertFalse(boolean4 == boolean0);
715:       assertFalse(node0.isHook());
716:       assertEquals((-1), node0.getCharno());
717:       assertFalse(node0.isFalse());
718:       assertFalse(node0.isString());
719:       assertFalse(node0.isThrow());
720:       assertFalse(node0.isInc());
721:       assertFalse(node0.isGetProp());
722:       assertFalse(node0.isCase());
723:       assertFalse(node0.isIn());
724:       assertFalse(node0.isInstanceOf());
725:       assertFalse(node0.isThis());
726:       assertFalse(node0.isComma());
727:       assertFalse(node0.isWith());
728:       assertFalse(node0.isIf());
729:       assertFalse(node0.isBreak());
730:       assertFalse(node0.isNE());
731:       assertFalse(node0.isExprResult());
732:       assertFalse(node0.isDelProp());
733:       assertFalse(node0.isCast());
734:       assertFalse(node0.isFunction());
735:       assertFalse(node0.isDebugger());
736:       assertFalse(node0.isAssign());
737:       assertFalse(node0.hasChildren());
738:       assertTrue(node0.isNumber());
739:       assertFalse(node0.isContinue());
740:       assertEquals((-1), node0.getSourcePosition());
741:       assertFalse(node0.isObjectLit());
742:       assertFalse(node0.isNot());
743:       assertFalse(node0.isAnd());
744:       assertFalse(node0.isBlock());
745:       assertFalse(node0.isVar());
746:       assertFalse(node0.isAdd());
747:       assertFalse(node0.isWhile());
748:       assertEquals(39, node0.getType());
749:       assertFalse(node0.isSetterDef());
750:       assertFalse(node0.isNew());
751:       assertFalse(node0.isDo());
752:       assertEquals((-1), node0.getLineno());
753:       assertFalse(node0.isReturn());
754:       assertFalse(node0.isCatch());
755:       assertFalse(node0.hasMoreThanOneChild());
756:       assertFalse(node0.isDec());
757:       assertFalse(node0.isTypeOf());
758:       assertFalse(node0.isOr());
759:       assertFalse(node0.isNull());
760:       assertFalse(node0.isGetElem());
761:       assertFalse(node0.isCall());
762:       assertFalse(node0.isName());
763:       assertFalse(node0.isVoid());
764:       assertFalse(node0.isTrue());
765:       assertFalse(node0.isRegExp());
766:       assertFalse(node0.isDefaultCase());
767:       assertFalse(node0.isEmpty());
768:       assertFalse(node0.isScript());
769:       assertFalse(node0.isFor());
770:       assertFalse(node0.hasOneChild());
771:       assertFalse(node0.isTry());
772:       assertFalse(node0.isAssignAdd());
773:       assertFalse(node0.isLabel());
774:       assertFalse(node0.isGetterDef());
775:       assertEquals(0, node0.getChildCount());
776:       assertFalse(node0.isStringKey());
777:       assertFalse(node0.isParamList());
778:       assertFalse(node0.isSwitch());
779:       assertFalse(node0.isArrayLit());
780:       assertFalse(node0.isLabelName());
781:       
782:       boolean boolean5 = node0.isOptionalArg();
783:       assertFalse(node0.equals((Object)node1));
784:       assertTrue(boolean5 == boolean2);
785:       assertTrue(boolean5 == boolean4);
786:       assertFalse(boolean5 == boolean0);
787:       assertFalse(boolean5 == boolean3);
788:       assertTrue(boolean5 == boolean1);
789:       assertFalse(node0.isHook());
790:       assertEquals((-1), node0.getCharno());
791:       assertFalse(node0.isFalse());
792:       assertFalse(node0.isString());
793:       assertFalse(node0.isThrow());
794:       assertFalse(node0.isInc());
795:       assertFalse(node0.isGetProp());
796:       assertFalse(node0.isCase());
797:       assertFalse(node0.isIn());
798:       assertFalse(node0.isInstanceOf());
799:       assertFalse(node0.isThis());
800:       assertFalse(node0.isComma());
801:       assertFalse(node0.isWith());
802:       assertFalse(node0.isIf());
803:       assertFalse(node0.isBreak());
804:       assertFalse(node0.isNE());
805:       assertFalse(node0.isExprResult());
806:       assertFalse(node0.isDelProp());
807:       assertFalse(node0.isCast());
808:       assertFalse(node0.isFunction());
809:       assertFalse(node0.isDebugger());
810:       assertFalse(node0.isAssign());
811:       assertFalse(node0.hasChildren());
812:       assertTrue(node0.isNumber());
813:       assertFalse(node0.isContinue());
814:       assertEquals((-1), node0.getSourcePosition());
815:       assertFalse(node0.isObjectLit());
816:       assertFalse(node0.isNot());
817:       assertFalse(node0.isAnd());
818:       assertFalse(node0.isBlock());
819:       assertFalse(node0.isVar());
820:       assertFalse(node0.isAdd());
821:       assertFalse(node0.isWhile());
822:       assertEquals(39, node0.getType());
823:       assertFalse(node0.isSetterDef());
824:       assertFalse(node0.isNew());
825:       assertFalse(node0.isDo());
826:       assertEquals((-1), node0.getLineno());
827:       assertFalse(node0.isReturn());
828:       assertFalse(node0.isCatch());
829:       assertFalse(node0.hasMoreThanOneChild());
830:       assertFalse(node0.isDec());
831:       assertFalse(node0.isTypeOf());
832:       assertFalse(node0.isOr());
833:       assertFalse(node0.isNull());
834:       assertFalse(node0.isGetElem());
835:       assertFalse(node0.isCall());
836:       assertFalse(node0.isName());
837:       assertFalse(node0.isVoid());
838:       assertFalse(node0.isTrue());
839:       assertFalse(node0.isRegExp());
840:       assertFalse(node0.isDefaultCase());
841:       assertFalse(node0.isEmpty());
842:       assertFalse(node0.isScript());
843:       assertFalse(node0.isFor());
844:       assertFalse(node0.hasOneChild());
845:       assertFalse(node0.isTry());
846:       assertFalse(node0.isAssignAdd());
847:       assertFalse(node0.isLabel());
848:       assertFalse(node0.isGetterDef());
849:       assertEquals(0, node0.getChildCount());
850:       assertFalse(node0.isStringKey());
851:       assertFalse(node0.isParamList());
852:       assertFalse(node0.isSwitch());
853:       assertFalse(node0.isArrayLit());
854:       assertFalse(node0.isLabelName());
855:       
856:       boolean boolean6 = node0.isAdd();
857:       assertFalse(node0.equals((Object)node1));
858:       assertTrue(boolean6 == boolean2);
859:       assertTrue(boolean6 == boolean4);
860:       assertTrue(boolean6 == boolean1);
861:       assertTrue(boolean6 == boolean5);
862:       assertFalse(boolean6 == boolean0);
863:       assertFalse(boolean6 == boolean3);
864:       assertFalse(node0.isHook());
865:       assertEquals((-1), node0.getCharno());
866:       assertFalse(node0.isFalse());
867:       assertFalse(node0.isString());
868:       assertFalse(node0.isThrow());
869:       assertFalse(node0.isInc());
870:       assertFalse(node0.isGetProp());
871:       assertFalse(node0.isCase());
872:       assertFalse(node0.isIn());
873:       assertFalse(node0.isInstanceOf());
874:       assertFalse(node0.isThis());
875:       assertFalse(node0.isComma());
876:       assertFalse(node0.isWith());
877:       assertFalse(node0.isIf());
878:       assertFalse(node0.isBreak());
879:       assertFalse(node0.isNE());
880:       assertFalse(node0.isExprResult());
881:       assertFalse(node0.isDelProp());
882:       assertFalse(node0.isCast());
883:       assertFalse(node0.isFunction());
884:       assertFalse(node0.isDebugger());
885:       assertFalse(node0.isAssign());
886:       assertFalse(node0.hasChildren());
887:       assertTrue(node0.isNumber());
888:       assertFalse(node0.isContinue());
889:       assertEquals((-1), node0.getSourcePosition());
890:       assertFalse(node0.isObjectLit());
891:       assertFalse(node0.isNot());
892:       assertFalse(node0.isAnd());
893:       assertFalse(node0.isBlock());
894:       assertFalse(node0.isVar());
895:       assertFalse(node0.isAdd());
896:       assertFalse(node0.isWhile());
897:       assertEquals(39, node0.getType());
898:       assertFalse(node0.isSetterDef());
899:       assertFalse(node0.isNew());
900:       assertFalse(node0.isDo());
901:       assertEquals((-1), node0.getLineno());
902:       assertFalse(node0.isReturn());
903:       assertFalse(node0.isCatch());
904:       assertFalse(node0.hasMoreThanOneChild());
905:       assertFalse(node0.isDec());
906:       assertFalse(node0.isTypeOf());
907:       assertFalse(node0.isOr());
908:       assertFalse(node0.isNull());
909:       assertFalse(node0.isGetElem());
910:       assertFalse(node0.isCall());
911:       assertFalse(node0.isName());
912:       assertFalse(node0.isVoid());
913:       assertFalse(node0.isTrue());
914:       assertFalse(node0.isRegExp());
915:       assertFalse(node0.isDefaultCase());
916:       assertFalse(node0.isEmpty());
917:       assertFalse(node0.isScript());
918:       assertFalse(node0.isFor());
919:       assertFalse(node0.hasOneChild());
920:       assertFalse(node0.isTry());
921:       assertFalse(node0.isAssignAdd());
922:       assertFalse(node0.isLabel());
923:       assertFalse(node0.isGetterDef());
924:       assertEquals(0, node0.getChildCount());
925:       assertFalse(node0.isStringKey());
926:       assertFalse(node0.isParamList());
927:       assertFalse(node0.isSwitch());
928:       assertFalse(node0.isArrayLit());
929:       assertFalse(node0.isLabelName());
930:       
931:       boolean boolean7 = node1.isName();
932:       assertFalse(node0.equals((Object)node1));
933:       assertFalse(node1.equals((Object)node0));
934:       assertTrue(boolean7 == boolean6);
935:       assertTrue(boolean7 == boolean1);
936:       assertFalse(boolean7 == boolean3);
937:       assertTrue(boolean7 == boolean2);
938:       assertTrue(boolean7 == boolean5);
939:       assertFalse(boolean7 == boolean0);
940:       assertTrue(boolean7 == boolean4);
941:       assertFalse(node0.isHook());
942:       assertEquals((-1), node0.getCharno());
943:       assertFalse(node0.isFalse());
944:       assertFalse(node0.isString());
945:       assertFalse(node0.isThrow());
946:       assertFalse(node0.isInc());
947:       assertFalse(node0.isGetProp());
948:       assertFalse(node0.isCase());
949:       assertFalse(node0.isIn());
950:       assertFalse(node0.isInstanceOf());
951:       assertFalse(node0.isThis());
952:       assertFalse(node0.isComma());
953:       assertFalse(node0.isWith());
954:       assertFalse(node0.isIf());
955:       assertFalse(node0.isBreak());
956:       assertFalse(node0.isNE());
957:       assertFalse(node0.isExprResult());
958:       assertFalse(node0.isDelProp());
959:       assertFalse(node0.isCast());
960:       assertFalse(node0.isFunction());
961:       assertFalse(node0.isDebugger());
962:       assertFalse(node0.isAssign());
963:       assertFalse(node0.hasChildren());
964:       assertTrue(node0.isNumber());
965:       assertFalse(node0.isContinue());
966:       assertEquals((-1), node0.getSourcePosition());
967:       assertFalse(node0.isObjectLit());
968:       assertFalse(node0.isNot());
969:       assertFalse(node0.isAnd());
970:       assertFalse(node0.isBlock());
971:       assertFalse(node0.isVar());
972:       assertFalse(node0.isAdd());
973:       assertFalse(node0.isWhile());
974:       assertEquals(39, node0.getType());
975:       assertFalse(node0.isSetterDef());
976:       assertFalse(node0.isNew());
977:       assertFalse(node0.isDo());
978:       assertEquals((-1), node0.getLineno());
979:       assertFalse(node0.isReturn());
980:       assertFalse(node0.isCatch());
981:       assertFalse(node0.hasMoreThanOneChild());
982:       assertFalse(node0.isDec());
983:       assertFalse(node0.isTypeOf());
984:       assertFalse(node0.isOr());
985:       assertFalse(node0.isNull());
986:       assertFalse(node0.isGetElem());
987:       assertFalse(node0.isCall());
988:       assertFalse(node0.isName());
989:       assertFalse(node0.isVoid());
990:       assertFalse(node0.isTrue());
991:       assertFalse(node0.isRegExp());
992:       assertFalse(node0.isDefaultCase());
993:       assertFalse(node0.isEmpty());
994:       assertFalse(node0.isScript());
995:       assertFalse(node0.isFor());
996:       assertFalse(node0.hasOneChild());
997:       assertFalse(node0.isTry());
998:       assertFalse(node0.isAssignAdd());
999:       assertFalse(node0.isLabel());
1000:       assertFalse(node0.isGetterDef());
1001:       assertEquals(0, node0.getChildCount());
1002:       assertFalse(node0.isStringKey());
1003:       assertFalse(node0.isParamList());
1004:       assertFalse(node0.isSwitch());
1005:       assertFalse(node0.isArrayLit());
1006:       assertFalse(node0.isLabelName());
1007:       assertEquals(1, node1.getChildCount());
1008:       assertFalse(node1.isIn());
1009:       assertTrue(node1.hasChildren());
1010:       assertFalse(node1.isCase());
1011:       assertTrue(node1.hasOneChild());
1012:       assertFalse(node1.isFor());
1013:       assertEquals(41, node1.getType());
1014:       assertFalse(node1.isInc());
1015:       assertFalse(node1.isVoid());
1016:       assertFalse(node1.isDelProp());
1017:       assertFalse(node1.isIf());
1018:       assertFalse(node1.isNE());
1019:       assertFalse(node1.isEmpty());
1020:       assertFalse(node1.isTrue());
1021:       assertFalse(node1.isInstanceOf());
1022:       assertFalse(node1.isCatch());
1023:       assertFalse(node1.isParamList());
1024:       assertFalse(node1.isDefaultCase());
1025:       assertFalse(node1.isWith());
1026:       assertFalse(node1.isThis());
1027:       assertFalse(node1.isRegExp());
1028:       assertFalse(node1.isHook());
1029:       assertFalse(node1.isBlock());
1030:       assertFalse(node1.isSwitch());
1031:       assertFalse(node1.isArrayLit());
1032:       assertFalse(node1.isTry());
1033:       assertFalse(node1.isLabelName());
1034:       assertFalse(node1.isGetterDef());
1035:       assertFalse(node1.isNumber());
1036:       assertFalse(node1.isScript());
1037:       assertFalse(node1.isStringKey());
1038:       assertEquals((-1), node1.getCharno());
1039:       assertEquals((-1), node1.getLineno());
1040:       assertFalse(node1.isReturn());
1041:       assertFalse(node1.isAssignAdd());
1042:       assertFalse(node1.isDo());
1043:       assertFalse(node1.isWhile());
1044:       assertFalse(node1.isGetElem());
1045:       assertFalse(node1.isContinue());
1046:       assertFalse(node1.hasMoreThanOneChild());
1047:       assertFalse(node1.isLabel());
1048:       assertFalse(node1.isTypeOf());
1049:       assertFalse(node1.isDec());
1050:       assertFalse(node1.isAssign());
1051:       assertFalse(node1.isAdd());
1052:       assertFalse(node1.isVar());
1053:       assertFalse(node1.isCall());
1054:       assertFalse(node1.isExprResult());
1055:       assertFalse(node1.isNew());
1056:       assertFalse(node1.isName());
1057:       assertFalse(node1.isOr());
1058:       assertTrue(node1.isNull());
1059:       assertFalse(node1.isAnd());
1060:       assertFalse(node1.isSetterDef());
1061:       assertFalse(node1.isGetProp());
1062:       assertFalse(node1.isBreak());
1063:       assertFalse(node1.isThrow());
1064:       assertFalse(node1.isFunction());
1065:       assertFalse(node1.isFalse());
1066:       assertFalse(node1.isComma());
1067:       assertFalse(node1.isCast());
1068:       assertFalse(node1.isString());
1069:       assertFalse(node1.isObjectLit());
1070:       assertFalse(node1.isDebugger());
1071:       assertEquals((-1), node1.getSourcePosition());
1072:       assertFalse(node1.isNot());
1073:       
1074:       node1.checkTreeEquals(node0);
1075:       assertFalse(node0.equals((Object)node1));
1076:       assertFalse(node1.equals((Object)node0));
1077:       assertFalse(node0.isHook());
1078:       assertEquals((-1), node0.getCharno());
1079:       assertFalse(node0.isFalse());
1080:       assertFalse(node0.isString());
1081:       assertFalse(node0.isThrow());
1082:       assertFalse(node0.isInc());
1083:       assertFalse(node0.isGetProp());
1084:       assertFalse(node0.isCase());
1085:       assertFalse(node0.isIn());
1086:       assertFalse(node0.isInstanceOf());
1087:       assertFalse(node0.isThis());
1088:       assertFalse(node0.isComma());
1089:       assertFalse(node0.isWith());
1090:       assertFalse(node0.isIf());
1091:       assertFalse(node0.isBreak());
1092:       assertFalse(node0.isNE());
1093:       assertFalse(node0.isExprResult());
1094:       assertFalse(node0.isDelProp());
1095:       assertFalse(node0.isCast());
1096:       assertFalse(node0.isFunction());
1097:       assertFalse(node0.isDebugger());
1098:       assertFalse(node0.isAssign());
1099:       assertFalse(node0.hasChildren());
1100:       assertTrue(node0.isNumber());
1101:       assertFalse(node0.isContinue());
1102:       assertEquals((-1), node0.getSourcePosition());
1103:       assertFalse(node0.isObjectLit());
1104:       assertFalse(node0.isNot());
1105:       assertFalse(node0.isAnd());
1106:       assertFalse(node0.isBlock());
1107:       assertFalse(node0.isVar());
1108:       assertFalse(node0.isAdd());
1109:       assertFalse(node0.isWhile());
1110:       assertEquals(39, node0.getType());
1111:       assertFalse(node0.isSetterDef());
1112:       assertFalse(node0.isNew());
1113:       assertFalse(node0.isDo());
1114:       assertEquals((-1), node0.getLineno());
1115:       assertFalse(node0.isReturn());
1116:       assertFalse(node0.isCatch());
1117:       assertFalse(node0.hasMoreThanOneChild());
1118:       assertFalse(node0.isDec());
1119:       assertFalse(node0.isTypeOf());
1120:       assertFalse(node0.isOr());
1121:       assertFalse(node0.isNull());
1122:       assertFalse(node0.isGetElem());
1123:       assertFalse(node0.isCall());
1124:       assertFalse(node0.isName());
1125:       assertFalse(node0.isVoid());
1126:       assertFalse(node0.isTrue());
1127:       assertFalse(node0.isRegExp());
1128:       assertFalse(node0.isDefaultCase());
1129:       assertFalse(node0.isEmpty());
1130:       assertFalse(node0.isScript());
1131:       assertFalse(node0.isFor());
1132:       assertFalse(node0.hasOneChild());
1133:       assertFalse(node0.isTry());
1134:       assertFalse(node0.isAssignAdd());
1135:       assertFalse(node0.isLabel());
1136:       assertFalse(node0.isGetterDef());
1137:       assertEquals(0, node0.getChildCount());
1138:       assertFalse(node0.isStringKey());
1139:       assertFalse(node0.isParamList());
1140:       assertFalse(node0.isSwitch());
1141:       assertFalse(node0.isArrayLit());
1142:       assertFalse(node0.isLabelName());
1143:       assertEquals(1, node1.getChildCount());
1144:       assertFalse(node1.isIn());
1145:       assertTrue(node1.hasChildren());
1146:       assertFalse(node1.isCase());
1147:       assertTrue(node1.hasOneChild());
1148:       assertFalse(node1.isFor());
1149:       assertEquals(41, node1.getType());
1150:       assertFalse(node1.isInc());
1151:       assertFalse(node1.isVoid());
1152:       assertFalse(node1.isDelProp());
1153:       assertFalse(node1.isIf());
1154:       assertFalse(node1.isNE());
1155:       assertFalse(node1.isEmpty());
1156:       assertFalse(node1.isTrue());
1157:       assertFalse(node1.isInstanceOf());
1158:       assertFalse(node1.isCatch());
1159:       assertFalse(node1.isParamList());
1160:       assertFalse(node1.isDefaultCase());
1161:       assertFalse(node1.isWith());
1162:       assertFalse(node1.isThis());
1163:       assertFalse(node1.isRegExp());
1164:       assertFalse(node1.isHook());
1165:       assertFalse(node1.isBlock());
1166:       assertFalse(node1.isSwitch());
1167:       assertFalse(node1.isArrayLit());
1168:       assertFalse(node1.isTry());
1169:       assertFalse(node1.isLabelName());
1170:       assertFalse(node1.isGetterDef());
1171:       assertFalse(node1.isNumber());
1172:       assertFalse(node1.isScript());
1173:       assertFalse(node1.isStringKey());
1174:       assertEquals((-1), node1.getCharno());
1175:       assertEquals((-1), node1.getLineno());
1176:       assertFalse(node1.isReturn());
1177:       assertFalse(node1.isAssignAdd());
1178:       assertFalse(node1.isDo());
1179:       assertFalse(node1.isWhile());
1180:       assertFalse(node1.isGetElem());
1181:       assertFalse(node1.isContinue());
1182:       assertFalse(node1.hasMoreThanOneChild());
1183:       assertFalse(node1.isLabel());
1184:       assertFalse(node1.isTypeOf());
1185:       assertFalse(node1.isDec());
1186:       assertFalse(node1.isAssign());
1187:       assertFalse(node1.isAdd());
1188:       assertFalse(node1.isVar());
1189:       assertFalse(node1.isCall());
1190:       assertFalse(node1.isExprResult());
1191:       assertFalse(node1.isNew());
1192:       assertFalse(node1.isName());
1193:       assertFalse(node1.isOr());
1194:       assertTrue(node1.isNull());
1195:       assertFalse(node1.isAnd());
1196:       assertFalse(node1.isSetterDef());
1197:       assertFalse(node1.isGetProp());
1198:       assertFalse(node1.isBreak());
1199:       assertFalse(node1.isThrow());
1200:       assertFalse(node1.isFunction());
1201:       assertFalse(node1.isFalse());
1202:       assertFalse(node1.isComma());
1203:       assertFalse(node1.isCast());
1204:       assertFalse(node1.isString());
1205:       assertFalse(node1.isObjectLit());
1206:       assertFalse(node1.isDebugger());
1207:       assertEquals((-1), node1.getSourcePosition());
1208:       assertFalse(node1.isNot());
1209:       
1210:       Node node2 = new Node(0, node1, node1, node1, 30, (-401));
1211:       assertFalse(node0.equals((Object)node1));
1212:       assertFalse(node1.equals((Object)node0));
1213:       assertFalse(node2.equals((Object)node1));
1214:       assertFalse(node2.equals((Object)node0));
1215:       assertFalse(node0.isHook());
1216:       assertEquals((-1), node0.getCharno());
1217:       assertFalse(node0.isFalse());
1218:       assertFalse(node0.isString());
1219:       assertFalse(node0.isThrow());
1220:       assertFalse(node0.isInc());
1221:       assertFalse(node0.isGetProp());
1222:       assertFalse(node0.isCase());
1223:       assertFalse(node0.isIn());
1224:       assertFalse(node0.isInstanceOf());
1225:       assertFalse(node0.isThis());
1226:       assertFalse(node0.isComma());
1227:       assertFalse(node0.isWith());
1228:       assertFalse(node0.isIf());
1229:       assertFalse(node0.isBreak());
1230:       assertFalse(node0.isNE());
1231:       assertFalse(node0.isExprResult());
1232:       assertFalse(node0.isDelProp());
1233:       assertFalse(node0.isCast());
1234:       assertFalse(node0.isFunction());
1235:       assertFalse(node0.isDebugger());
1236:       assertFalse(node0.isAssign());
1237:       assertFalse(node0.hasChildren());
1238:       assertTrue(node0.isNumber());
1239:       assertFalse(node0.isContinue());
1240:       assertEquals((-1), node0.getSourcePosition());
1241:       assertFalse(node0.isObjectLit());
1242:       assertFalse(node0.isNot());
1243:       assertFalse(node0.isAnd());
1244:       assertFalse(node0.isBlock());
1245:       assertFalse(node0.isVar());
1246:       assertFalse(node0.isAdd());
1247:       assertFalse(node0.isWhile());
1248:       assertEquals(39, node0.getType());
1249:       assertFalse(node0.isSetterDef());
1250:       assertFalse(node0.isNew());
1251:       assertFalse(node0.isDo());
1252:       assertEquals((-1), node0.getLineno());
1253:       assertFalse(node0.isReturn());
1254:       assertFalse(node0.isCatch());
1255:       assertFalse(node0.hasMoreThanOneChild());
1256:       assertFalse(node0.isDec());
1257:       assertFalse(node0.isTypeOf());
1258:       assertFalse(node0.isOr());
1259:       assertFalse(node0.isNull());
1260:       assertFalse(node0.isGetElem());
1261:       assertFalse(node0.isCall());
1262:       assertFalse(node0.isName());
1263:       assertFalse(node0.isVoid());
1264:       assertFalse(node0.isTrue());
1265:       assertFalse(node0.isRegExp());
1266:       assertFalse(node0.isDefaultCase());
1267:       assertFalse(node0.isEmpty());
1268:       assertFalse(node0.isScript());
1269:       assertFalse(node0.isFor());
1270:       assertFalse(node0.hasOneChild());
1271:       assertFalse(node0.isTry());
1272:       assertFalse(node0.isAssignAdd());
1273:       assertFalse(node0.isLabel());
1274:       assertFalse(node0.isGetterDef());
1275:       assertEquals(0, node0.getChildCount());
1276:       assertFalse(node0.isStringKey());
1277:       assertFalse(node0.isParamList());
1278:       assertFalse(node0.isSwitch());
1279:       assertFalse(node0.isArrayLit());
1280:       assertFalse(node0.isLabelName());
1281:       assertEquals(1, node1.getChildCount());
1282:       assertFalse(node1.isIn());
1283:       assertTrue(node1.hasChildren());
1284:       assertFalse(node1.isCase());
1285:       assertTrue(node1.hasOneChild());
1286:       assertFalse(node1.isFor());
1287:       assertEquals(41, node1.getType());
1288:       assertFalse(node1.isInc());
1289:       assertFalse(node1.isVoid());
1290:       assertFalse(node1.isDelProp());
1291:       assertFalse(node1.isIf());
1292:       assertFalse(node1.isNE());
1293:       assertFalse(node1.isEmpty());
1294:       assertFalse(node1.isTrue());
1295:       assertFalse(node1.isInstanceOf());
1296:       assertFalse(node1.isCatch());
1297:       assertFalse(node1.isParamList());
1298:       assertFalse(node1.isDefaultCase());
1299:       assertFalse(node1.isWith());
1300:       assertFalse(node1.isThis());
1301:       assertFalse(node1.isRegExp());
1302:       assertFalse(node1.isHook());
1303:       assertFalse(node1.isBlock());
1304:       assertFalse(node1.isSwitch());
1305:       assertFalse(node1.isArrayLit());
1306:       assertFalse(node1.isTry());
1307:       assertFalse(node1.isLabelName());
1308:       assertFalse(node1.isGetterDef());
1309:       assertFalse(node1.isNumber());
1310:       assertFalse(node1.isScript());
1311:       assertFalse(node1.isStringKey());
1312:       assertEquals((-1), node1.getCharno());
1313:       assertEquals((-1), node1.getLineno());
1314:       assertFalse(node1.isReturn());
1315:       assertFalse(node1.isAssignAdd());
1316:       assertFalse(node1.isDo());
1317:       assertFalse(node1.isWhile());
1318:       assertFalse(node1.isGetElem());
1319:       assertFalse(node1.isContinue());
1320:       assertFalse(node1.hasMoreThanOneChild());
1321:       assertFalse(node1.isLabel());
1322:       assertFalse(node1.isTypeOf());
1323:       assertFalse(node1.isDec());
1324:       assertFalse(node1.isAssign());
1325:       assertFalse(node1.isAdd());
1326:       assertFalse(node1.isVar());
1327:       assertFalse(node1.isCall());
1328:       assertFalse(node1.isExprResult());
1329:       assertFalse(node1.isNew());
1330:       assertFalse(node1.isName());
1331:       assertFalse(node1.isOr());
1332:       assertTrue(node1.isNull());
1333:       assertFalse(node1.isAnd());
1334:       assertFalse(node1.isSetterDef());
1335:       assertFalse(node1.isGetProp());
1336:       assertFalse(node1.isBreak());
1337:       assertFalse(node1.isThrow());
1338:       assertFalse(node1.isFunction());
1339:       assertFalse(node1.isFalse());
1340:       assertFalse(node1.isComma());
1341:       assertFalse(node1.isCast());
1342:       assertFalse(node1.isString());
1343:       assertFalse(node1.isObjectLit());
1344:       assertFalse(node1.isDebugger());
1345:       assertEquals((-1), node1.getSourcePosition());
1346:       assertFalse(node1.isNot());
1347:       assertFalse(node2.isNot());
1348:       assertFalse(node2.isAnd());
1349:       assertFalse(node2.isExprResult());
1350:       assertFalse(node2.isComma());
1351:       assertFalse(node2.isCast());
1352:       assertFalse(node2.isInstanceOf());
1353:       assertFalse(node2.isWith());
1354:       assertFalse(node2.isGetElem());
1355:       assertFalse(node2.isBreak());
1356:       assertFalse(node2.isThrow());
1357:       assertFalse(node2.isAssignAdd());
1358:       assertFalse(node2.isOr());
1359:       assertFalse(node2.isInc());
1360:       assertFalse(node2.isDo());
1361:       assertFalse(node2.isCase());
1362:       assertFalse(node2.isSwitch());
1363:       assertEquals((-1), node2.getLineno());
1364:       assertEquals(1, node2.getChildCount());
1365:       assertTrue(node2.hasChildren());
1366:       assertFalse(node2.isHook());
1367:       assertFalse(node2.isBlock());
1368:       assertFalse(node2.isLabel());
1369:       assertFalse(node2.hasMoreThanOneChild());
1370:       assertFalse(node2.isGetterDef());
1371:       assertFalse(node2.isFor());
1372:       assertFalse(node2.isLabelName());
1373:       assertFalse(node2.isParamList());
1374:       assertFalse(node2.isThis());
1375:       assertFalse(node2.isStringKey());
1376:       assertFalse(node2.isTry());
1377:       assertEquals((-1), node2.getCharno());
1378:       assertFalse(node2.isScript());
1379:       assertFalse(node2.isNumber());
1380:       assertFalse(node2.isTrue());
1381:       assertFalse(node2.isVoid());
1382:       assertFalse(node2.isDefaultCase());
1383:       assertFalse(node2.isArrayLit());
1384:       assertFalse(node2.isFunction());
1385:       assertFalse(node2.isCatch());
1386:       assertFalse(node2.isRegExp());
1387:       assertFalse(node2.isDelProp());
1388:       assertFalse(node2.isEmpty());
1389:       assertFalse(node2.isNull());
1390:       assertFalse(node2.isNE());
1391:       assertFalse(node2.isVar());
1392:       assertFalse(node2.isName());
1393:       assertFalse(node2.isIf());
1394:       assertFalse(node2.isNew());
1395:       assertFalse(node2.isAdd());
1396:       assertFalse(node2.isSetterDef());
1397:       assertFalse(node2.isIn());
1398:       assertFalse(node2.isString());
1399:       assertFalse(node2.isWhile());
1400:       assertFalse(node2.isReturn());
1401:       assertEquals(0, node2.getType());
1402:       assertFalse(node2.isCall());
1403:       assertFalse(node2.isFalse());
1404:       assertFalse(node2.isTypeOf());
1405:       assertFalse(node2.isContinue());
1406:       assertTrue(node2.hasOneChild());
1407:       assertFalse(node2.isAssign());
1408:       assertEquals((-1), node2.getSourcePosition());
1409:       assertFalse(node2.isDec());
1410:       assertFalse(node2.isGetProp());
1411:       assertFalse(node2.isObjectLit());
1412:       assertFalse(node2.isDebugger());
1413:       
1414:       Node node3 = node0.copyInformationFrom(node2);
1415:       assertFalse(node0.equals((Object)node2));
1416:       assertFalse(node0.equals((Object)node1));
1417:       assertFalse(node1.equals((Object)node0));
1418:       assertFalse(node1.equals((Object)node2));
1419:       assertFalse(node2.equals((Object)node1));
1420:       assertFalse(node2.equals((Object)node0));
1421:       assertFalse(node3.equals((Object)node1));
1422:       assertFalse(node3.equals((Object)node2));
1423:       assertFalse(node0.isHook());
1424:       assertEquals((-1), node0.getCharno());
1425:       assertFalse(node0.isFalse());
1426:       assertFalse(node0.isString());
1427:       assertFalse(node0.isThrow());
1428:       assertFalse(node0.isInc());
1429:       assertFalse(node0.isGetProp());
1430:       assertFalse(node0.isCase());
1431:       assertFalse(node0.isIn());
1432:       assertFalse(node0.isInstanceOf());
1433:       assertFalse(node0.isThis());
1434:       assertFalse(node0.isComma());
1435:       assertFalse(node0.isWith());
1436:       assertFalse(node0.isIf());
1437:       assertFalse(node0.isBreak());
1438:       assertFalse(node0.isNE());
1439:       assertFalse(node0.isExprResult());
1440:       assertFalse(node0.isDelProp());
1441:       assertFalse(node0.isCast());
1442:       assertFalse(node0.isFunction());
1443:       assertFalse(node0.isDebugger());
1444:       assertFalse(node0.isAssign());
1445:       assertFalse(node0.hasChildren());
1446:       assertTrue(node0.isNumber());
1447:       assertFalse(node0.isContinue());
1448:       assertEquals((-1), node0.getSourcePosition());
1449:       assertFalse(node0.isObjectLit());
1450:       assertFalse(node0.isNot());
1451:       assertFalse(node0.isAnd());
1452:       assertFalse(node0.isBlock());
1453:       assertFalse(node0.isVar());
1454:       assertFalse(node0.isAdd());
1455:       assertFalse(node0.isWhile());
1456:       assertEquals(39, node0.getType());
1457:       assertFalse(node0.isSetterDef());
1458:       assertFalse(node0.isNew());
1459:       assertFalse(node0.isDo());
1460:       assertEquals((-1), node0.getLineno());
1461:       assertFalse(node0.isReturn());
1462:       assertFalse(node0.isCatch());
1463:       assertFalse(node0.hasMoreThanOneChild());
1464:       assertFalse(node0.isDec());
1465:       assertFalse(node0.isTypeOf());
1466:       assertFalse(node0.isOr());
1467:       assertFalse(node0.isNull());
1468:       assertFalse(node0.isGetElem());
1469:       assertFalse(node0.isCall());
1470:       assertFalse(node0.isName());
1471:       assertFalse(node0.isVoid());
1472:       assertFalse(node0.isTrue());
1473:       assertFalse(node0.isRegExp());
1474:       assertFalse(node0.isDefaultCase());
1475:       assertFalse(node0.isEmpty());
1476:       assertFalse(node0.isScript());
1477:       assertFalse(node0.isFor());
1478:       assertFalse(node0.hasOneChild());
1479:       assertFalse(node0.isTry());
1480:       assertFalse(node0.isAssignAdd());
1481:       assertFalse(node0.isLabel());
1482:       assertFalse(node0.isGetterDef());
1483:       assertEquals(0, node0.getChildCount());
1484:       assertFalse(node0.isStringKey());
1485:       assertFalse(node0.isParamList());
1486:       assertFalse(node0.isSwitch());
1487:       assertFalse(node0.isArrayLit());
1488:       assertFalse(node0.isLabelName());
1489:       assertEquals(1, node1.getChildCount());
1490:       assertFalse(node1.isIn());
1491:       assertTrue(node1.hasChildren());
1492:       assertFalse(node1.isCase());
1493:       assertTrue(node1.hasOneChild());
1494:       assertFalse(node1.isFor());
1495:       assertEquals(41, node1.getType());
1496:       assertFalse(node1.isInc());
1497:       assertFalse(node1.isVoid());
1498:       assertFalse(node1.isDelProp());
1499:       assertFalse(node1.isIf());
1500:       assertFalse(node1.isNE());
1501:       assertFalse(node1.isEmpty());
1502:       assertFalse(node1.isTrue());
1503:       assertFalse(node1.isInstanceOf());
1504:       assertFalse(node1.isCatch());
1505:       assertFalse(node1.isParamList());
1506:       assertFalse(node1.isDefaultCase());
1507:       assertFalse(node1.isWith());
1508:       assertFalse(node1.isThis());
1509:       assertFalse(node1.isRegExp());
1510:       assertFalse(node1.isHook());
1511:       assertFalse(node1.isBlock());
1512:       assertFalse(node1.isSwitch());
1513:       assertFalse(node1.isArrayLit());
1514:       assertFalse(node1.isTry());
1515:       assertFalse(node1.isLabelName());
1516:       assertFalse(node1.isGetterDef());
1517:       assertFalse(node1.isNumber());
1518:       assertFalse(node1.isScript());
1519:       assertFalse(node1.isStringKey());
1520:       assertEquals((-1), node1.getCharno());
1521:       assertEquals((-1), node1.getLineno());
1522:       assertFalse(node1.isReturn());
1523:       assertFalse(node1.isAssignAdd());
1524:       assertFalse(node1.isDo());
1525:       assertFalse(node1.isWhile());
1526:       assertFalse(node1.isGetElem());
1527:       assertFalse(node1.isContinue());
1528:       assertFalse(node1.hasMoreThanOneChild());
1529:       assertFalse(node1.isLabel());
1530:       assertFalse(node1.isTypeOf());
1531:       assertFalse(node1.isDec());
1532:       assertFalse(node1.isAssign());
1533:       assertFalse(node1.isAdd());
1534:       assertFalse(node1.isVar());
1535:       assertFalse(node1.isCall());
1536:       assertFalse(node1.isExprResult());
1537:       assertFalse(node1.isNew());
1538:       assertFalse(node1.isName());
1539:       assertFalse(node1.isOr());
1540:       assertTrue(node1.isNull());
1541:       assertFalse(node1.isAnd());
1542:       assertFalse(node1.isSetterDef());
1543:       assertFalse(node1.isGetProp());
1544:       assertFalse(node1.isBreak());
1545:       assertFalse(node1.isThrow());
1546:       assertFalse(node1.isFunction());
1547:       assertFalse(node1.isFalse());
1548:       assertFalse(node1.isComma());
1549:       assertFalse(node1.isCast());
1550:       assertFalse(node1.isString());
1551:       assertFalse(node1.isObjectLit());
1552:       assertFalse(node1.isDebugger());
1553:       assertEquals((-1), node1.getSourcePosition());
1554:       assertFalse(node1.isNot());
1555:       assertFalse(node2.isNot());
1556:       assertFalse(node2.isAnd());
1557:       assertFalse(node2.isExprResult());
1558:       assertFalse(node2.isComma());
1559:       assertFalse(node2.isCast());
1560:       assertFalse(node2.isInstanceOf());
1561:       assertFalse(node2.isWith());
1562:       assertFalse(node2.isGetElem());
1563:       assertFalse(node2.isBreak());
1564:       assertFalse(node2.isThrow());
1565:       assertFalse(node2.isAssignAdd());
1566:       assertFalse(node2.isOr());
1567:       assertFalse(node2.isInc());
1568:       assertFalse(node2.isDo());
1569:       assertFalse(node2.isCase());
1570:       assertFalse(node2.isSwitch());
1571:       assertEquals((-1), node2.getLineno());
1572:       assertEquals(1, node2.getChildCount());
1573:       assertTrue(node2.hasChildren());
1574:       assertFalse(node2.isHook());
1575:       assertFalse(node2.isBlock());
1576:       assertFalse(node2.isLabel());
1577:       assertFalse(node2.hasMoreThanOneChild());
1578:       assertFalse(node2.isGetterDef());
1579:       assertFalse(node2.isFor());
1580:       assertFalse(node2.isLabelName());
1581:       assertFalse(node2.isParamList());
1582:       assertFalse(node2.isThis());
1583:       assertFalse(node2.isStringKey());
1584:       assertFalse(node2.isTry());
1585:       assertEquals((-1), node2.getCharno());
1586:       assertFalse(node2.isScript());
1587:       assertFalse(node2.isNumber());
1588:       assertFalse(node2.isTrue());
1589:       assertFalse(node2.isVoid());
1590:       assertFalse(node2.isDefaultCase());
1591:       assertFalse(node2.isArrayLit());
1592:       assertFalse(node2.isFunction());
1593:       assertFalse(node2.isCatch());
1594:       assertFalse(node2.isRegExp());
1595:       assertFalse(node2.isDelProp());
1596:       assertFalse(node2.isEmpty());
1597:       assertFalse(node2.isNull());
1598:       assertFalse(node2.isNE());
1599:       assertFalse(node2.isVar());
1600:       assertFalse(node2.isName());
1601:       assertFalse(node2.isIf());
1602:       assertFalse(node2.isNew());
1603:       assertFalse(node2.isAdd());
1604:       assertFalse(node2.isSetterDef());
1605:       assertFalse(node2.isIn());
1606:       assertFalse(node2.isString());
1607:       assertFalse(node2.isWhile());
1608:       assertFalse(node2.isReturn());
1609:       assertEquals(0, node2.getType());
1610:       assertFalse(node2.isCall());
1611:       assertFalse(node2.isFalse());
1612:       assertFalse(node2.isTypeOf());
1613:       assertFalse(node2.isContinue());
1614:       assertTrue(node2.hasOneChild());
1615:       assertFalse(node2.isAssign());
1616:       assertEquals((-1), node2.getSourcePosition());
1617:       assertFalse(node2.isDec());
1618:       assertFalse(node2.isGetProp());
1619:       assertFalse(node2.isObjectLit());
1620:       assertFalse(node2.isDebugger());
1621:       assertEquals(39, node3.getType());
1622:       assertFalse(node3.isDo());
1623:       assertFalse(node3.isAssignAdd());
1624:       assertFalse(node3.isWhile());
1625:       assertFalse(node3.isBlock());
1626:       assertFalse(node3.isReturn());
1627:       assertEquals((-1), node3.getLineno());
1628:       assertFalse(node3.isLabel());
1629:       assertFalse(node3.isDec());
1630:       assertFalse(node3.isTypeOf());
1631:       assertFalse(node3.hasMoreThanOneChild());
1632:       assertFalse(node3.isContinue());
1633:       assertFalse(node3.isStringKey());
1634:       assertFalse(node3.isLabelName());
1635:       assertFalse(node3.isAssign());
1636:       assertFalse(node3.hasOneChild());
1637:       assertFalse(node3.hasChildren());
1638:       assertFalse(node3.isParamList());
1639:       assertEquals((-1), node3.getSourcePosition());
1640:       assertFalse(node3.isScript());
1641:       assertFalse(node3.isObjectLit());
1642:       assertFalse(node3.isNot());
1643:       assertFalse(node3.isAnd());
1644:       assertFalse(node3.isFunction());
1645:       assertFalse(node3.isThis());
1646:       assertFalse(node3.isInstanceOf());
1647:       assertFalse(node3.isRegExp());
1648:       assertFalse(node3.isCatch());
1649:       assertFalse(node3.isWith());
1650:       assertFalse(node3.isCast());
1651:       assertFalse(node3.isFalse());
1652:       assertFalse(node3.isThrow());
1653:       assertFalse(node3.isIf());
1654:       assertFalse(node3.isNE());
1655:       assertFalse(node3.isInc());
1656:       assertFalse(node3.isSetterDef());
1657:       assertFalse(node3.isIn());
1658:       assertFalse(node3.isCase());
1659:       assertFalse(node3.isSwitch());
1660:       assertFalse(node3.isFor());
1661:       assertFalse(node3.isArrayLit());
1662:       assertFalse(node3.isHook());
1663:       assertFalse(node3.isGetProp());
1664:       assertFalse(node3.isTry());
1665:       assertTrue(node3.isNumber());
1666:       assertEquals((-1), node3.getCharno());
1667:       assertFalse(node3.isDebugger());
1668:       assertFalse(node3.isGetterDef());
1669:       assertFalse(node3.isString());
1670:       assertFalse(node3.isDefaultCase());
1671:       assertFalse(node3.isVoid());
1672:       assertFalse(node3.isExprResult());
1673:       assertFalse(node3.isComma());
1674:       assertEquals(0, node3.getChildCount());
1675:       assertFalse(node3.isBreak());
1676:       assertFalse(node3.isGetElem());
1677:       assertFalse(node3.isName());
1678:       assertFalse(node3.isCall());
1679:       assertFalse(node3.isDelProp());
1680:       assertFalse(node3.isNull());
1681:       assertFalse(node3.isVar());
1682:       assertFalse(node3.isAdd());
1683:       assertFalse(node3.isTrue());
1684:       assertFalse(node3.isOr());
1685:       assertFalse(node3.isNew());
1686:       assertFalse(node3.isEmpty());
1687:       
1688:       boolean boolean8 = node0.mayMutateGlobalStateOrThrow();
1689:       assertFalse(node0.equals((Object)node2));
1690:       assertFalse(node0.equals((Object)node1));
1691:       assertTrue(boolean8 == boolean0);
1692:       assertFalse(boolean8 == boolean5);
1693:       assertFalse(boolean8 == boolean6);
1694:       assertFalse(boolean8 == boolean4);
1695:       assertFalse(boolean8 == boolean2);
1696:       assertTrue(boolean8 == boolean3);
1697:       assertFalse(boolean8 == boolean1);
1698:       assertFalse(boolean8 == boolean7);
1699:       assertFalse(node0.isHook());
1700:       assertEquals((-1), node0.getCharno());
1701:       assertFalse(node0.isFalse());
1702:       assertFalse(node0.isString());
1703:       assertFalse(node0.isThrow());
1704:       assertFalse(node0.isInc());
1705:       assertFalse(node0.isGetProp());
1706:       assertFalse(node0.isCase());
1707:       assertFalse(node0.isIn());
1708:       assertFalse(node0.isInstanceOf());
1709:       assertFalse(node0.isThis());
1710:       assertFalse(node0.isComma());
1711:       assertFalse(node0.isWith());
1712:       assertFalse(node0.isIf());
1713:       assertFalse(node0.isBreak());
1714:       assertFalse(node0.isNE());
1715:       assertFalse(node0.isExprResult());
1716:       assertFalse(node0.isDelProp());
1717:       assertFalse(node0.isCast());
1718:       assertFalse(node0.isFunction());
1719:       assertFalse(node0.isDebugger());
1720:       assertFalse(node0.isAssign());
1721:       assertFalse(node0.hasChildren());
1722:       assertTrue(node0.isNumber());
1723:       assertFalse(node0.isContinue());
1724:       assertEquals((-1), node0.getSourcePosition());
1725:       assertFalse(node0.isObjectLit());
1726:       assertFalse(node0.isNot());
1727:       assertFalse(node0.isAnd());
1728:       assertFalse(node0.isBlock());
1729:       assertFalse(node0.isVar());
1730:       assertFalse(node0.isAdd());
1731:       assertFalse(node0.isWhile());
1732:       assertEquals(39, node0.getType());
1733:       assertFalse(node0.isSetterDef());
1734:       assertFalse(node0.isNew());
1735:       assertFalse(node0.isDo());
1736:       assertEquals((-1), node0.getLineno());
1737:       assertFalse(node0.isReturn());
1738:       assertFalse(node0.isCatch());
1739:       assertFalse(node0.hasMoreThanOneChild());
1740:       assertFalse(node0.isDec());
1741:       assertFalse(node0.isTypeOf());
1742:       assertFalse(node0.isOr());
1743:       assertFalse(node0.isNull());
1744:       assertFalse(node0.isGetElem());
1745:       assertFalse(node0.isCall());
1746:       assertFalse(node0.isName());
1747:       assertFalse(node0.isVoid());
1748:       assertFalse(node0.isTrue());
1749:       assertFalse(node0.isRegExp());
1750:       assertFalse(node0.isDefaultCase());
1751:       assertFalse(node0.isEmpty());
1752:       assertFalse(node0.isScript());
1753:       assertFalse(node0.isFor());
1754:       assertFalse(node0.hasOneChild());
1755:       assertFalse(node0.isTry());
1756:       assertFalse(node0.isAssignAdd());
1757:       assertFalse(node0.isLabel());
1758:       assertFalse(node0.isGetterDef());
1759:       assertEquals(0, node0.getChildCount());
1760:       assertFalse(node0.isStringKey());
1761:       assertFalse(node0.isParamList());
1762:       assertFalse(node0.isSwitch());
1763:       assertFalse(node0.isArrayLit());
1764:       assertFalse(node0.isLabelName());
1765:       
1766:       Node node4 = node3.useSourceInfoIfMissingFrom(node2);
1767:       assertFalse(node4.equals((Object)node2));
1768:       assertFalse(node4.equals((Object)node1));
1769:       assertFalse(node0.equals((Object)node2));
1770:       assertFalse(node0.equals((Object)node1));
1771:       assertFalse(node1.equals((Object)node0));
1772:       assertFalse(node1.equals((Object)node2));
1773:       assertFalse(node1.equals((Object)node3));
1774:       assertFalse(node2.equals((Object)node1));
1775:       assertFalse(node2.equals((Object)node0));
1776:       assertFalse(node2.equals((Object)node3));
1777:       assertFalse(node3.equals((Object)node1));
1778:       assertFalse(node3.equals((Object)node2));
1779:       assertFalse(node4.isBlock());
1780:       assertFalse(node4.isAdd());
1781:       assertFalse(node4.isVar());
1782:       assertFalse(node4.isName());
1783:       assertFalse(node4.isStringKey());
1784:       assertFalse(node4.isContinue());
1785:       assertFalse(node4.isCall());
1786:       assertEquals((-1), node4.getLineno());
1787:       assertFalse(node4.isAssignAdd());
1788:       assertFalse(node4.isOr());
1789:       assertFalse(node4.isLabel());
1790:       assertFalse(node4.isNull());
1791:       assertEquals(0, node4.getChildCount());
1792:       assertFalse(node4.isDo());
1793:       assertFalse(node4.isDefaultCase());
1794:       assertFalse(node4.isSetterDef());
1795:       assertFalse(node4.isNew());
1796:       assertFalse(node4.isFunction());
1797:       assertFalse(node4.isTrue());
1798:       assertFalse(node4.isDebugger());
1799:       assertFalse(node4.isAssign());
1800:       assertFalse(node4.isDelProp());
1801:       assertFalse(node4.isGetElem());
1802:       assertFalse(node4.isAnd());
1803:       assertFalse(node4.isCast());
1804:       assertFalse(node4.isExprResult());
1805:       assertFalse(node4.isVoid());
1806:       assertTrue(node4.isNumber());
1807:       assertFalse(node4.isReturn());
1808:       assertFalse(node4.isObjectLit());
1809:       assertFalse(node4.isTypeOf());
1810:       assertFalse(node4.isDec());
1811:       assertFalse(node4.hasChildren());
1812:       assertEquals((-1), node4.getSourcePosition());
1813:       assertFalse(node4.isComma());
1814:       assertFalse(node4.isNot());
1815:       assertFalse(node4.isString());
1816:       assertFalse(node4.isWhile());
1817:       assertFalse(node4.isGetProp());
1818:       assertEquals((-1), node4.getCharno());
1819:       assertFalse(node4.isHook());
1820:       assertFalse(node4.isFalse());
1821:       assertFalse(node4.isSwitch());
1822:       assertFalse(node4.isBreak());
1823:       assertFalse(node4.isIn());
1824:       assertFalse(node4.isNE());
1825:       assertFalse(node4.isEmpty());
1826:       assertFalse(node4.isThrow());
1827:       assertFalse(node4.isInc());
1828:       assertFalse(node4.isTry());
1829:       assertFalse(node4.isRegExp());
1830:       assertFalse(node4.isWith());
1831:       assertFalse(node4.isLabelName());
1832:       assertFalse(node4.isIf());
1833:       assertFalse(node4.isCatch());
1834:       assertFalse(node4.isArrayLit());
1835:       assertFalse(node4.isInstanceOf());
1836:       assertFalse(node4.isParamList());
1837:       assertFalse(node4.hasMoreThanOneChild());
1838:       assertFalse(node4.isThis());
1839:       assertEquals(39, node4.getType());
1840:       assertFalse(node4.isGetterDef());
1841:       assertFalse(node4.isFor());
1842:       assertFalse(node4.isScript());
1843:       assertFalse(node4.isCase());
1844:       assertFalse(node4.hasOneChild());
1845:       assertFalse(node0.isHook());
1846:       assertEquals((-1), node0.getCharno());
1847:       assertFalse(node0.isFalse());
1848:       assertFalse(node0.isString());
1849:       assertFalse(node0.isThrow());
1850:       assertFalse(node0.isInc());
1851:       assertFalse(node0.isGetProp());
1852:       assertFalse(node0.isCase());
1853:       assertFalse(node0.isIn());
1854:       assertFalse(node0.isInstanceOf());
1855:       assertFalse(node0.isThis());
1856:       assertFalse(node0.isComma());
1857:       assertFalse(node0.isWith());
1858:       assertFalse(node0.isIf());
1859:       assertFalse(node0.isBreak());
1860:       assertFalse(node0.isNE());
1861:       assertFalse(node0.isExprResult());
1862:       assertFalse(node0.isDelProp());
1863:       assertFalse(node0.isCast());
1864:       assertFalse(node0.isFunction());
1865:       assertFalse(node0.isDebugger());
1866:       assertFalse(node0.isAssign());
1867:       assertFalse(node0.hasChildren());
1868:       assertTrue(node0.isNumber());
1869:       assertFalse(node0.isContinue());
1870:       assertEquals((-1), node0.getSourcePosition());
1871:       assertFalse(node0.isObjectLit());
1872:       assertFalse(node0.isNot());
1873:       assertFalse(node0.isAnd());
1874:       assertFalse(node0.isBlock());
1875:       assertFalse(node0.isVar());
1876:       assertFalse(node0.isAdd());
1877:       assertFalse(node0.isWhile());
1878:       assertEquals(39, node0.getType());
1879:       assertFalse(node0.isSetterDef());
1880:       assertFalse(node0.isNew());
1881:       assertFalse(node0.isDo());
1882:       assertEquals((-1), node0.getLineno());
1883:       assertFalse(node0.isReturn());
1884:       assertFalse(node0.isCatch());
1885:       assertFalse(node0.hasMoreThanOneChild());
1886:       assertFalse(node0.isDec());
1887:       assertFalse(node0.isTypeOf());
1888:       assertFalse(node0.isOr());
1889:       assertFalse(node0.isNull());
1890:       assertFalse(node0.isGetElem());
1891:       assertFalse(node0.isCall());
1892:       assertFalse(node0.isName());
1893:       assertFalse(node0.isVoid());
1894:       assertFalse(node0.isTrue());
1895:       assertFalse(node0.isRegExp());
1896:       assertFalse(node0.isDefaultCase());
1897:       assertFalse(node0.isEmpty());
1898:       assertFalse(node0.isScript());
1899:       assertFalse(node0.isFor());
1900:       assertFalse(node0.hasOneChild());
1901:       assertFalse(node0.isTry());
1902:       assertFalse(node0.isAssignAdd());
1903:       assertFalse(node0.isLabel());
1904:       assertFalse(node0.isGetterDef());
1905:       assertEquals(0, node0.getChildCount());
1906:       assertFalse(node0.isStringKey());
1907:       assertFalse(node0.isParamList());
1908:       assertFalse(node0.isSwitch());
1909:       assertFalse(node0.isArrayLit());
1910:       assertFalse(node0.isLabelName());
1911:       assertEquals(1, node1.getChildCount());
1912:       assertFalse(node1.isIn());
1913:       assertTrue(node1.hasChildren());
1914:       assertFalse(node1.isCase());
1915:       assertTrue(node1.hasOneChild());
1916:       assertFalse(node1.isFor());
1917:       assertEquals(41, node1.getType());
1918:       assertFalse(node1.isInc());
1919:       assertFalse(node1.isVoid());
1920:       assertFalse(node1.isDelProp());
1921:       assertFalse(node1.isIf());
1922:       assertFalse(node1.isNE());
1923:       assertFalse(node1.isEmpty());
1924:       assertFalse(node1.isTrue());
1925:       assertFalse(node1.isInstanceOf());
1926:       assertFalse(node1.isCatch());
1927:       assertFalse(node1.isParamList());
1928:       assertFalse(node1.isDefaultCase());
1929:       assertFalse(node1.isWith());
1930:       assertFalse(node1.isThis());
1931:       assertFalse(node1.isRegExp());
1932:       assertFalse(node1.isHook());
1933:       assertFalse(node1.isBlock());
1934:       assertFalse(node1.isSwitch());
1935:       assertFalse(node1.isArrayLit());
1936:       assertFalse(node1.isTry());
1937:       assertFalse(node1.isLabelName());
1938:       assertFalse(node1.isGetterDef());
1939:       assertFalse(node1.isNumber());
1940:       assertFalse(node1.isScript());
1941:       assertFalse(node1.isStringKey());
1942:       assertEquals((-1), node1.getCharno());
1943:       assertEquals((-1), node1.getLineno());
1944:       assertFalse(node1.isReturn());
1945:       assertFalse(node1.isAssignAdd());
1946:       assertFalse(node1.isDo());
1947:       assertFalse(node1.isWhile());
1948:       assertFalse(node1.isGetElem());
1949:       assertFalse(node1.isContinue());
1950:       assertFalse(node1.hasMoreThanOneChild());
1951:       assertFalse(node1.isLabel());
1952:       assertFalse(node1.isTypeOf());
1953:       assertFalse(node1.isDec());
1954:       assertFalse(node1.isAssign());
1955:       assertFalse(node1.isAdd());
1956:       assertFalse(node1.isVar());
1957:       assertFalse(node1.isCall());
1958:       assertFalse(node1.isExprResult());
1959:       assertFalse(node1.isNew());
1960:       assertFalse(node1.isName());
1961:       assertFalse(node1.isOr());
1962:       assertTrue(node1.isNull());
1963:       assertFalse(node1.isAnd());
1964:       assertFalse(node1.isSetterDef());
1965:       assertFalse(node1.isGetProp());
1966:       assertFalse(node1.isBreak());
1967:       assertFalse(node1.isThrow());
1968:       assertFalse(node1.isFunction());
1969:       assertFalse(node1.isFalse());
1970:       assertFalse(node1.isComma());
1971:       assertFalse(node1.isCast());
1972:       assertFalse(node1.isString());
1973:       assertFalse(node1.isObjectLit());
1974:       assertFalse(node1.isDebugger());
1975:       assertEquals((-1), node1.getSourcePosition());
1976:       assertFalse(node1.isNot());
1977:       assertFalse(node2.isNot());
1978:       assertFalse(node2.isAnd());
1979:       assertFalse(node2.isExprResult());
1980:       assertFalse(node2.isComma());
1981:       assertFalse(node2.isCast());
1982:       assertFalse(node2.isInstanceOf());
1983:       assertFalse(node2.isWith());
1984:       assertFalse(node2.isGetElem());
1985:       assertFalse(node2.isBreak());
1986:       assertFalse(node2.isThrow());
1987:       assertFalse(node2.isAssignAdd());
1988:       assertFalse(node2.isOr());
1989:       assertFalse(node2.isInc());
1990:       assertFalse(node2.isDo());
1991:       assertFalse(node2.isCase());
1992:       assertFalse(node2.isSwitch());
1993:       assertEquals((-1), node2.getLineno());
1994:       assertEquals(1, node2.getChildCount());
1995:       assertTrue(node2.hasChildren());
1996:       assertFalse(node2.isHook());
1997:       assertFalse(node2.isBlock());
1998:       assertFalse(node2.isLabel());
1999:       assertFalse(node2.hasMoreThanOneChild());
2000:       assertFalse(node2.isGetterDef());
2001:       assertFalse(node2.isFor());
2002:       assertFalse(node2.isLabelName());
2003:       assertFalse(node2.isParamList());
2004:       assertFalse(node2.isThis());
2005:       assertFalse(node2.isStringKey());
2006:       assertFalse(node2.isTry());
2007:       assertEquals((-1), node2.getCharno());
2008:       assertFalse(node2.isScript());
2009:       assertFalse(node2.isNumber());
2010:       assertFalse(node2.isTrue());
2011:       assertFalse(node2.isVoid());
2012:       assertFalse(node2.isDefaultCase());
2013:       assertFalse(node2.isArrayLit());
2014:       assertFalse(node2.isFunction());
2015:       assertFalse(node2.isCatch());
2016:       assertFalse(node2.isRegExp());
2017:       assertFalse(node2.isDelProp());
2018:       assertFalse(node2.isEmpty());
2019:       assertFalse(node2.isNull());
2020:       assertFalse(node2.isNE());
2021:       assertFalse(node2.isVar());
2022:       assertFalse(node2.isName());
2023:       assertFalse(node2.isIf());
2024:       assertFalse(node2.isNew());
2025:       assertFalse(node2.isAdd());
2026:       assertFalse(node2.isSetterDef());
2027:       assertFalse(node2.isIn());
2028:       assertFalse(node2.isString());
2029:       assertFalse(node2.isWhile());
2030:       assertFalse(node2.isReturn());
2031:       assertEquals(0, node2.getType());
2032:       assertFalse(node2.isCall());
2033:       assertFalse(node2.isFalse());
2034:       assertFalse(node2.isTypeOf());
2035:       assertFalse(node2.isContinue());
2036:       assertTrue(node2.hasOneChild());
2037:       assertFalse(node2.isAssign());
2038:       assertEquals((-1), node2.getSourcePosition());
2039:       assertFalse(node2.isDec());
2040:       assertFalse(node2.isGetProp());
2041:       assertFalse(node2.isObjectLit());
2042:       assertFalse(node2.isDebugger());
2043:       assertEquals(39, node3.getType());
2044:       assertFalse(node3.isDo());
2045:       assertFalse(node3.isAssignAdd());
2046:       assertFalse(node3.isWhile());
2047:       assertFalse(node3.isBlock());
2048:       assertFalse(node3.isReturn());
2049:       assertEquals((-1), node3.getLineno());
2050:       assertFalse(node3.isLabel());
2051:       assertFalse(node3.isDec());
2052:       assertFalse(node3.isTypeOf());
2053:       assertFalse(node3.hasMoreThanOneChild());
2054:       assertFalse(node3.isContinue());
2055:       assertFalse(node3.isStringKey());
2056:       assertFalse(node3.isLabelName());
2057:       assertFalse(node3.isAssign());
2058:       assertFalse(node3.hasOneChild());
2059:       assertFalse(node3.hasChildren());
2060:       assertFalse(node3.isParamList());
2061:       assertEquals((-1), node3.getSourcePosition());
2062:       assertFalse(node3.isScript());
2063:       assertFalse(node3.isObjectLit());
2064:       assertFalse(node3.isNot());
2065:       assertFalse(node3.isAnd());
2066:       assertFalse(node3.isFunction());
2067:       assertFalse(node3.isThis());
2068:       assertFalse(node3.isInstanceOf());
2069:       assertFalse(node3.isRegExp());
2070:       assertFalse(node3.isCatch());
2071:       assertFalse(node3.isWith());
2072:       assertFalse(node3.isCast());
2073:       assertFalse(node3.isFalse());
2074:       assertFalse(node3.isThrow());
2075:       assertFalse(node3.isIf());
2076:       assertFalse(node3.isNE());
2077:       assertFalse(node3.isInc());
2078:       assertFalse(node3.isSetterDef());
2079:       assertFalse(node3.isIn());
2080:       assertFalse(node3.isCase());
2081:       assertFalse(node3.isSwitch());
2082:       assertFalse(node3.isFor());
2083:       assertFalse(node3.isArrayLit());
2084:       assertFalse(node3.isHook());
2085:       assertFalse(node3.isGetProp());
2086:       assertFalse(node3.isTry());
2087:       assertTrue(node3.isNumber());
2088:       assertEquals((-1), node3.getCharno());
2089:       assertFalse(node3.isDebugger());
2090:       assertFalse(node3.isGetterDef());
2091:       assertFalse(node3.isString());
2092:       assertFalse(node3.isDefaultCase());
2093:       assertFalse(node3.isVoid());
2094:       assertFalse(node3.isExprResult());
2095:       assertFalse(node3.isComma());
2096:       assertEquals(0, node3.getChildCount());
2097:       assertFalse(node3.isBreak());
2098:       assertFalse(node3.isGetElem());
2099:       assertFalse(node3.isName());
2100:       assertFalse(node3.isCall());
2101:       assertFalse(node3.isDelProp());
2102:       assertFalse(node3.isNull());
2103:       assertFalse(node3.isVar());
2104:       assertFalse(node3.isAdd());
2105:       assertFalse(node3.isTrue());
2106:       assertFalse(node3.isOr());
2107:       assertFalse(node3.isNew());
2108:       assertFalse(node3.isEmpty());
2109:       
2110:       Node node5 = Node.newString(15, "Node tree inequality:\nTree1:\nNULL\n    NUMBER -3223.0\n\n\nTree2:\nNUMBER -3223.0\n\n\nSubtree1: NULL\n    NUMBER -3223.0\n\n\nSubtree2: NUMBER -3223.0\n");
2111:       assertFalse(node5.equals((Object)node2));
2112:       assertFalse(node5.equals((Object)node0));
2113:       assertFalse(node5.equals((Object)node4));
2114:       assertFalse(node5.equals((Object)node3));
2115:       assertFalse(node5.equals((Object)node1));
2116:       assertFalse(node5.isLabelName());
2117:       assertFalse(node5.isAssign());
2118:       assertFalse(node5.isNumber());
2119:       assertFalse(node5.isDec());
2120:       assertFalse(node5.isTypeOf());
2121:       assertEquals((-1), node5.getSourcePosition());
2122:       assertFalse(node5.hasChildren());
2123:       assertFalse(node5.isReturn());
2124:       assertEquals((-1), node5.getLineno());
2125:       assertFalse(node5.isLabel());
2126:       assertFalse(node5.hasMoreThanOneChild());
2127:       assertFalse(node5.isCast());
2128:       assertFalse(node5.isContinue());
2129:       assertFalse(node5.isGetElem());
2130:       assertFalse(node5.isExprResult());
2131:       assertFalse(node5.isWith());
2132:       assertFalse(node5.isNot());
2133:       assertFalse(node5.isWhile());
2134:       assertFalse(node5.isObjectLit());
2135:       assertFalse(node5.isAnd());
2136:       assertFalse(node5.isBlock());
2137:       assertFalse(node5.hasOneChild());
2138:       assertFalse(node5.isGetProp());
2139:       assertFalse(node5.isScript());
2140:       assertFalse(node5.isFalse());
2141:       assertFalse(node5.isThis());
2142:       assertFalse(node5.isThrow());
2143:       assertFalse(node5.isHook());
2144:       assertFalse(node5.isCatch());
2145:       assertFalse(node5.isInstanceOf());
2146:       assertEquals(15, node5.getType());
2147:       assertFalse(node5.isIn());
2148:       assertFalse(node5.isSetterDef());
2149:       assertFalse(node5.isInc());
2150:       assertFalse(node5.isIf());
2151:       assertFalse(node5.isDelProp());
2152:       assertFalse(node5.isGetterDef());
2153:       assertFalse(node5.isNE());
2154:       assertFalse(node5.isFor());
2155:       assertFalse(node5.isFunction());
2156:       assertFalse(node5.isVoid());
2157:       assertFalse(node5.isArrayLit());
2158:       assertFalse(node5.isCase());
2159:       assertFalse(node5.isString());
2160:       assertFalse(node5.isRegExp());
2161:       assertFalse(node5.isSwitch());
2162:       assertEquals((-1), node5.getCharno());
2163:       assertFalse(node5.isDebugger());
2164:       assertFalse(node5.isTry());
2165:       assertFalse(node5.isName());
2166:       assertFalse(node5.isComma());
2167:       assertFalse(node5.isParamList());
2168:       assertFalse(node5.isStringKey());
2169:       assertFalse(node5.isVar());
2170:       assertFalse(node5.isNull());
2171:       assertEquals(0, node5.getChildCount());
2172:       assertFalse(node5.isBreak());
2173:       assertFalse(node5.isCall());
2174:       assertFalse(node5.isDo());
2175:       assertFalse(node5.isDefaultCase());
2176:       assertFalse(node5.isTrue());
2177:       assertFalse(node5.isAssignAdd());
2178:       assertFalse(node5.isOr());
2179:       assertFalse(node5.isNew());
2180:       assertFalse(node5.isEmpty());
2181:       assertFalse(node5.isAdd());
2182:       
2183:       boolean boolean9 = node5.isFor();
2184:       assertFalse(node5.equals((Object)node2));
2185:       assertFalse(node5.equals((Object)node0));
2186:       assertFalse(node5.equals((Object)node4));
2187:       assertFalse(node5.equals((Object)node3));
2188:       assertFalse(node5.equals((Object)node1));
2189:       assertTrue(boolean9 == boolean2);
2190:       assertFalse(boolean9 == boolean8);
2191:       assertTrue(boolean9 == boolean1);
2192:       assertTrue(boolean9 == boolean4);
2193:       assertTrue(boolean9 == boolean7);
2194:       assertFalse(boolean9 == boolean3);
2195:       assertFalse(boolean9 == boolean0);
2196:       assertTrue(boolean9 == boolean5);
2197:       assertTrue(boolean9 == boolean6);
2198:       assertFalse(node5.isLabelName());
2199:       assertFalse(node5.isAssign());
2200:       assertFalse(node5.isNumber());
2201:       assertFalse(node5.isDec());
2202:       assertFalse(node5.isTypeOf());
2203:       assertEquals((-1), node5.getSourcePosition());
2204:       assertFalse(node5.hasChildren());
2205:       assertFalse(node5.isReturn());
2206:       assertEquals((-1), node5.getLineno());
2207:       assertFalse(node5.isLabel());
2208:       assertFalse(node5.hasMoreThanOneChild());
2209:       assertFalse(node5.isCast());
2210:       assertFalse(node5.isContinue());
2211:       assertFalse(node5.isGetElem());
2212:       assertFalse(node5.isExprResult());
2213:       assertFalse(node5.isWith());
2214:       assertFalse(node5.isNot());
2215:       assertFalse(node5.isWhile());
2216:       assertFalse(node5.isObjectLit());
2217:       assertFalse(node5.isAnd());
2218:       assertFalse(node5.isBlock());
2219:       assertFalse(node5.hasOneChild());
2220:       assertFalse(node5.isGetProp());
2221:       assertFalse(node5.isScript());
2222:       assertFalse(node5.isFalse());
2223:       assertFalse(node5.isThis());
2224:       assertFalse(node5.isThrow());
2225:       assertFalse(node5.isHook());
2226:       assertFalse(node5.isCatch());
2227:       assertFalse(node5.isInstanceOf());
2228:       assertEquals(15, node5.getType());
2229:       assertFalse(node5.isIn());
2230:       assertFalse(node5.isSetterDef());
2231:       assertFalse(node5.isInc());
2232:       assertFalse(node5.isIf());
2233:       assertFalse(node5.isDelProp());
2234:       assertFalse(node5.isGetterDef());
2235:       assertFalse(node5.isNE());
2236:       assertFalse(node5.isFor());
2237:       assertFalse(node5.isFunction());
2238:       assertFalse(node5.isVoid());
2239:       assertFalse(node5.isArrayLit());
2240:       assertFalse(node5.isCase());
2241:       assertFalse(node5.isString());
2242:       assertFalse(node5.isRegExp());
2243:       assertFalse(node5.isSwitch());
2244:       assertEquals((-1), node5.getCharno());
2245:       assertFalse(node5.isDebugger());
2246:       assertFalse(node5.isTry());
2247:       assertFalse(node5.isName());
2248:       assertFalse(node5.isComma());
2249:       assertFalse(node5.isParamList());
2250:       assertFalse(node5.isStringKey());
2251:       assertFalse(node5.isVar());
2252:       assertFalse(node5.isNull());
2253:       assertEquals(0, node5.getChildCount());
2254:       assertFalse(node5.isBreak());
2255:       assertFalse(node5.isCall());
2256:       assertFalse(node5.isDo());
2257:       assertFalse(node5.isDefaultCase());
2258:       assertFalse(node5.isTrue());
2259:       assertFalse(node5.isAssignAdd());
2260:       assertFalse(node5.isOr());
2261:       assertFalse(node5.isNew());
2262:       assertFalse(node5.isEmpty());
2263:       assertFalse(node5.isAdd());
2264:       
2265:       boolean boolean10 = node1.isVar();
2266:       assertFalse(node0.equals((Object)node2));
2267:       assertFalse(node0.equals((Object)node1));
2268:       assertFalse(node0.equals((Object)node5));
2269:       assertTrue(boolean10 == boolean1);
2270:       assertTrue(boolean10 == boolean4);
2271:       assertFalse(boolean10 == boolean8);
2272:       assertTrue(boolean10 == boolean7);
2273:       assertFalse(boolean10 == boolean3);
2274:       assertFalse(boolean10 == boolean0);
2275:       assertTrue(boolean10 == boolean6);
2276:       assertTrue(boolean10 == boolean5);
2277:       assertTrue(boolean10 == boolean2);
2278:       assertTrue(boolean10 == boolean9);
2279:       assertFalse(node1.equals((Object)node0));
2280:       assertFalse(node1.equals((Object)node4));
2281:       assertFalse(node1.equals((Object)node2));
2282:       assertFalse(node1.equals((Object)node5));
2283:       assertFalse(node1.equals((Object)node3));
2284:       assertFalse(node0.isHook());
2285:       assertEquals((-1), node0.getCharno());
2286:       assertFalse(node0.isFalse());
2287:       assertFalse(node0.isString());
2288:       assertFalse(node0.isThrow());
2289:       assertFalse(node0.isInc());
2290:       assertFalse(node0.isGetProp());
2291:       assertFalse(node0.isCase());
2292:       assertFalse(node0.isIn());
2293:       assertFalse(node0.isInstanceOf());
2294:       assertFalse(node0.isThis());
2295:       assertFalse(node0.isComma());
2296:       assertFalse(node0.isWith());
2297:       assertFalse(node0.isIf());
2298:       assertFalse(node0.isBreak());
2299:       assertFalse(node0.isNE());
2300:       assertFalse(node0.isExprResult());
2301:       assertFalse(node0.isDelProp());
2302:       assertFalse(node0.isCast());
2303:       assertFalse(node0.isFunction());
2304:       assertFalse(node0.isDebugger());
2305:       assertFalse(node0.isAssign());
2306:       assertFalse(node0.hasChildren());
2307:       assertTrue(node0.isNumber());
2308:       assertFalse(node0.isContinue());
2309:       assertEquals((-1), node0.getSourcePosition());
2310:       assertFalse(node0.isObjectLit());
2311:       assertFalse(node0.isNot());
2312:       assertFalse(node0.isAnd());
2313:       assertFalse(node0.isBlock());
2314:       assertFalse(node0.isVar());
2315:       assertFalse(node0.isAdd());
2316:       assertFalse(node0.isWhile());
2317:       assertEquals(39, node0.getType());
2318:       assertFalse(node0.isSetterDef());
2319:       assertFalse(node0.isNew());
2320:       assertFalse(node0.isDo());
2321:       assertEquals((-1), node0.getLineno());
2322:       assertFalse(node0.isReturn());
2323:       assertFalse(node0.isCatch());
2324:       assertFalse(node0.hasMoreThanOneChild());
2325:       assertFalse(node0.isDec());
2326:       assertFalse(node0.isTypeOf());
2327:       assertFalse(node0.isOr());
2328:       assertFalse(node0.isNull());
2329:       assertFalse(node0.isGetElem());
2330:       assertFalse(node0.isCall());
2331:       assertFalse(node0.isName());
2332:       assertFalse(node0.isVoid());
2333:       assertFalse(node0.isTrue());
2334:       assertFalse(node0.isRegExp());
2335:       assertFalse(node0.isDefaultCase());
2336:       assertFalse(node0.isEmpty());
2337:       assertFalse(node0.isScript());
2338:       assertFalse(node0.isFor());
2339:       assertFalse(node0.hasOneChild());
2340:       assertFalse(node0.isTry());
2341:       assertFalse(node0.isAssignAdd());
2342:       assertFalse(node0.isLabel());
2343:       assertFalse(node0.isGetterDef());
2344:       assertEquals(0, node0.getChildCount());
2345:       assertFalse(node0.isStringKey());
2346:       assertFalse(node0.isParamList());
2347:       assertFalse(node0.isSwitch());
2348:       assertFalse(node0.isArrayLit());
2349:       assertFalse(node0.isLabelName());
2350:       assertEquals(1, node1.getChildCount());
2351:       assertFalse(node1.isIn());
2352:       assertTrue(node1.hasChildren());
2353:       assertFalse(node1.isCase());
2354:       assertTrue(node1.hasOneChild());
2355:       assertFalse(node1.isFor());
2356:       assertEquals(41, node1.getType());
2357:       assertFalse(node1.isInc());
2358:       assertFalse(node1.isVoid());
2359:       assertFalse(node1.isDelProp());
2360:       assertFalse(node1.isIf());
2361:       assertFalse(node1.isNE());
2362:       assertFalse(node1.isEmpty());
2363:       assertFalse(node1.isTrue());
2364:       assertFalse(node1.isInstanceOf());
2365:       assertFalse(node1.isCatch());
2366:       assertFalse(node1.isParamList());
2367:       assertFalse(node1.isDefaultCase());
2368:       assertFalse(node1.isWith());
2369:       assertFalse(node1.isThis());
2370:       assertFalse(node1.isRegExp());
2371:       assertFalse(node1.isHook());
2372:       assertFalse(node1.isBlock());
2373:       assertFalse(node1.isSwitch());
2374:       assertFalse(node1.isArrayLit());
2375:       assertFalse(node1.isTry());
2376:       assertFalse(node1.isLabelName());
2377:       assertFalse(node1.isGetterDef());
2378:       assertFalse(node1.isNumber());
2379:       assertFalse(node1.isScript());
2380:       assertFalse(node1.isStringKey());
2381:       assertEquals((-1), node1.getCharno());
2382:       assertEquals((-1), node1.getLineno());
2383:       assertFalse(node1.isReturn());
2384:       assertFalse(node1.isAssignAdd());
2385:       assertFalse(node1.isDo());
2386:       assertFalse(node1.isWhile());
2387:       assertFalse(node1.isGetElem());
2388:       assertFalse(node1.isContinue());
2389:       assertFalse(node1.hasMoreThanOneChild());
2390:       assertFalse(node1.isLabel());
2391:       assertFalse(node1.isTypeOf());
2392:       assertFalse(node1.isDec());
2393:       assertFalse(node1.isAssign());
2394:       assertFalse(node1.isAdd());
2395:       assertFalse(node1.isVar());
2396:       assertFalse(node1.isCall());
2397:       assertFalse(node1.isExprResult());
2398:       assertFalse(node1.isNew());
2399:       assertFalse(node1.isName());
2400:       assertFalse(node1.isOr());
2401:       assertTrue(node1.isNull());
2402:       assertFalse(node1.isAnd());
2403:       assertFalse(node1.isSetterDef());
2404:       assertFalse(node1.isGetProp());
2405:       assertFalse(node1.isBreak());
2406:       assertFalse(node1.isThrow());
2407:       assertFalse(node1.isFunction());
2408:       assertFalse(node1.isFalse());
2409:       assertFalse(node1.isComma());
2410:       assertFalse(node1.isCast());
2411:       assertFalse(node1.isString());
2412:       assertFalse(node1.isObjectLit());
2413:       assertFalse(node1.isDebugger());
2414:       assertEquals((-1), node1.getSourcePosition());
2415:       assertFalse(node1.isNot());
2416:       
2417:       Node[] nodeArray0 = new Node[7];
2418:       nodeArray0[0] = node3;
2419:       nodeArray0[1] = node5;
2420:       nodeArray0[2] = node4;
2421:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node5.getJsDocBuilderForNode();
2422:       assertFalse(node5.equals((Object)node2));
2423:       assertFalse(node5.equals((Object)node0));
2424:       assertFalse(node5.equals((Object)node4));
2425:       assertFalse(node5.equals((Object)node3));
2426:       assertFalse(node5.equals((Object)node1));
2427:       assertFalse(node5.isLabelName());
2428:       assertFalse(node5.isAssign());
2429:       assertFalse(node5.isNumber());
2430:       assertFalse(node5.isDec());
2431:       assertFalse(node5.isTypeOf());
2432:       assertEquals((-1), node5.getSourcePosition());
2433:       assertFalse(node5.hasChildren());
2434:       assertFalse(node5.isReturn());
2435:       assertEquals((-1), node5.getLineno());
2436:       assertFalse(node5.isLabel());
2437:       assertFalse(node5.hasMoreThanOneChild());
2438:       assertFalse(node5.isCast());
2439:       assertFalse(node5.isContinue());
2440:       assertFalse(node5.isGetElem());
2441:       assertFalse(node5.isExprResult());
2442:       assertFalse(node5.isWith());
2443:       assertFalse(node5.isNot());
2444:       assertFalse(node5.isWhile());
2445:       assertFalse(node5.isObjectLit());
2446:       assertFalse(node5.isAnd());
2447:       assertFalse(node5.isBlock());
2448:       assertFalse(node5.hasOneChild());
2449:       assertFalse(node5.isGetProp());
2450:       assertFalse(node5.isScript());
2451:       assertFalse(node5.isFalse());
2452:       assertFalse(node5.isThis());
2453:       assertFalse(node5.isThrow());
2454:       assertFalse(node5.isHook());
2455:       assertFalse(node5.isCatch());
2456:       assertFalse(node5.isInstanceOf());
2457:       assertEquals(15, node5.getType());
2458:       assertFalse(node5.isIn());
2459:       assertFalse(node5.isSetterDef());
2460:       assertFalse(node5.isInc());
2461:       assertFalse(node5.isIf());
2462:       assertFalse(node5.isDelProp());
2463:       assertFalse(node5.isGetterDef());
2464:       assertFalse(node5.isNE());
2465:       assertFalse(node5.isFor());
2466:       assertFalse(node5.isFunction());
2467:       assertFalse(node5.isVoid());
2468:       assertFalse(node5.isArrayLit());
2469:       assertFalse(node5.isCase());
2470:       assertFalse(node5.isString());
2471:       assertFalse(node5.isRegExp());
2472:       assertFalse(node5.isSwitch());
2473:       assertEquals((-1), node5.getCharno());
2474:       assertFalse(node5.isDebugger());
2475:       assertFalse(node5.isTry());
2476:       assertFalse(node5.isName());
2477:       assertFalse(node5.isComma());
2478:       assertFalse(node5.isParamList());
2479:       assertFalse(node5.isStringKey());
2480:       assertFalse(node5.isVar());
2481:       assertFalse(node5.isNull());
2482:       assertEquals(0, node5.getChildCount());
2483:       assertFalse(node5.isBreak());
2484:       assertFalse(node5.isCall());
2485:       assertFalse(node5.isDo());
2486:       assertFalse(node5.isDefaultCase());
2487:       assertFalse(node5.isTrue());
2488:       assertFalse(node5.isAssignAdd());
2489:       assertFalse(node5.isOr());
2490:       assertFalse(node5.isNew());
2491:       assertFalse(node5.isEmpty());
2492:       assertFalse(node5.isAdd());
2493:       
2494:       node_FileLevelJsDocBuilder0.append("YLdP2|");
2495:       assertFalse(node5.equals((Object)node2));
2496:       assertFalse(node5.equals((Object)node0));
2497:       assertFalse(node5.equals((Object)node4));
2498:       assertFalse(node5.equals((Object)node3));
2499:       assertFalse(node5.equals((Object)node1));
2500:       assertFalse(node5.isLabelName());
2501:       assertFalse(node5.isAssign());
2502:       assertFalse(node5.isNumber());
2503:       assertFalse(node5.isDec());
2504:       assertFalse(node5.isTypeOf());
2505:       assertEquals((-1), node5.getSourcePosition());
2506:       assertFalse(node5.hasChildren());
2507:       assertFalse(node5.isReturn());
2508:       assertEquals((-1), node5.getLineno());
2509:       assertFalse(node5.isLabel());
2510:       assertFalse(node5.hasMoreThanOneChild());
2511:       assertFalse(node5.isCast());
2512:       assertFalse(node5.isContinue());
2513:       assertFalse(node5.isGetElem());
2514:       assertFalse(node5.isExprResult());
2515:       assertFalse(node5.isWith());
2516:       assertFalse(node5.isNot());
2517:       assertFalse(node5.isWhile());
2518:       assertFalse(node5.isObjectLit());
2519:       assertFalse(node5.isAnd());
2520:       assertFalse(node5.isBlock());
2521:       assertFalse(node5.hasOneChild());
2522:       assertFalse(node5.isGetProp());
2523:       assertFalse(node5.isScript());
2524:       assertFalse(node5.isFalse());
2525:       assertFalse(node5.isThis());
2526:       assertFalse(node5.isThrow());
2527:       assertFalse(node5.isHook());
2528:       assertFalse(node5.isCatch());
2529:       assertFalse(node5.isInstanceOf());
2530:       assertEquals(15, node5.getType());
2531:       assertFalse(node5.isIn());
2532:       
2533:       node_FileLevelJsDocBuilder0.append("Node tree inequality:\nTree1:\nNULL\n    NUMBER -3223.0\n\n\nTree2:\nNUMBER -3223.0\n\n\nSubtree1: NULL\n    NUMBER -3223.0\n\n\nSubtree2: NUMBER -3223.0\n");
2534:       assertFalse(node5.equals((Object)node2));
2535:       assertFalse(node5.equals((Object)node0));
2536:       assertFalse(node5.equals((Object)node4));
2537:       assertFalse(node5.equals((Object)node3));
2538:       assertFalse(node5.equals((Object)node1));
2539:       
2540:       Node node6 = null;
2541:       try {
2542:         node6 = new Node(12, node0, node2);
2543:         fail("Expecting exception: IllegalArgumentException");
2544:       
2545:       } catch(IllegalArgumentException e) {
2546:          //
2547:          // first new child has existing parent
2548:          //
2549:          verifyException("com.google.common.base.Preconditions", e);
2550:       }
2551:   }
2552: }
RegularFileObject[/tmp/EvoSuite_154_1629222900923/com/google/javascript/rhino/Node_154_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 17:55:01 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_154_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_154_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.common.collect.Iterables",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_154_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.Token",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.jstype.ArrowType",
322:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
323:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
324:       "com.google.javascript.rhino.jstype.InstanceObjectType",
325:       "com.google.javascript.rhino.jstype.Property",
326:       "com.google.common.collect.Lists",
327:       "com.google.javascript.rhino.jstype.NoObjectType",
328:       "com.google.javascript.rhino.jstype.NoType",
329:       "com.google.javascript.rhino.jstype.NoResolvedType",
330:       "com.google.common.collect.SingletonImmutableList",
331:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
332:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
333:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
334:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
335:       "com.google.javascript.rhino.jstype.UnionType",
336:       "com.google.javascript.rhino.jstype.FunctionBuilder",
337:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.javascript.rhino.JSDocInfo",
341:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
342:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
343:       "com.google.common.base.Objects",
344:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.Sets",
351:       "com.google.common.collect.AbstractIndexedListIterator",
352:       "com.google.common.collect.Iterators$11",
353:       "com.google.javascript.rhino.JSDocInfo$Visibility",
354:       "com.google.common.collect.Sets$ImprovedAbstractSet",
355:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
356:       "com.google.common.collect.Hashing",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
359:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.javascript.rhino.JSTypeExpression",
363:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
364:       "com.google.common.collect.AbstractMultimap$Values",
365:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
366:       "com.google.common.collect.AbstractMapBasedMultimap$1",
367:       "com.google.common.collect.Multimaps$Entries",
368:       "com.google.common.collect.AbstractMultimap$Entries",
369:       "com.google.common.collect.AbstractMapBasedMultimap$2",
370:       "com.google.javascript.rhino.jstype.TernaryValue",
371:       "com.google.javascript.rhino.jstype.JSType$2",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair"
373:     );
374:   }
375: }

[MASTER] 17:55:01.769 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) (-3223), 1403, (-3223));
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

boolean boolean0 = node0.isNumber();
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

node0.getChangeTime();
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

int int0 = Node.EMPTY_BLOCK;
assertFalse(int0 == int1);

boolean boolean1 = node0.hasMoreThanOneChild();
assertFalse(boolean1 == boolean0);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

Node node1 = new Node(41, node0);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(41, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertTrue(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());

boolean boolean2 = node0.isEquivalentTo(node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(41, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertTrue(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());

boolean boolean3 = node1.mayMutateGlobalStateOrThrow();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean3 == boolean1);
assertFalse(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(41, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertTrue(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());

boolean boolean4 = node0.wasEmptyNode();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertFalse(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4 == boolean0);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

boolean boolean5 = node0.isOptionalArg();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean4);
assertFalse(boolean5 == boolean0);
assertFalse(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

boolean boolean6 = node0.isAdd();
assertFalse(node0.equals((Object)node1));
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean5);
assertFalse(boolean6 == boolean0);
assertFalse(boolean6 == boolean3);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

boolean boolean7 = node1.isName();
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean1);
assertFalse(boolean7 == boolean3);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean5);
assertFalse(boolean7 == boolean0);
assertTrue(boolean7 == boolean4);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(41, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertTrue(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());

node1.checkTreeEquals(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(41, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertTrue(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());

Node node2 = new Node(0, node1, node1, node1, 30, (-401));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(41, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertTrue(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isCast());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isInc());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getLineno());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isTry());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isIf());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertEquals(0, node2.getType());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isTypeOf());
assertFalse(node2.isContinue());
assertTrue(node2.hasOneChild());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());

Node node3 = node0.copyInformationFrom(node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(41, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertTrue(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isCast());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isInc());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getLineno());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isTry());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isIf());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertEquals(0, node2.getType());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isTypeOf());
assertFalse(node2.isContinue());
assertTrue(node2.hasOneChild());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertEquals(39, node3.getType());
assertFalse(node3.isDo());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isBlock());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabel());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.hasOneChild());
assertFalse(node3.hasChildren());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isFunction());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isFor());
assertFalse(node3.isArrayLit());
assertFalse(node3.isHook());
assertFalse(node3.isGetProp());
assertFalse(node3.isTry());
assertTrue(node3.isNumber());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetterDef());
assertFalse(node3.isString());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isComma());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isDelProp());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isEmpty());

boolean boolean8 = node0.mayMutateGlobalStateOrThrow();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean8 == boolean0);
assertFalse(boolean8 == boolean5);
assertFalse(boolean8 == boolean6);
assertFalse(boolean8 == boolean4);
assertFalse(boolean8 == boolean2);
assertTrue(boolean8 == boolean3);
assertFalse(boolean8 == boolean1);
assertFalse(boolean8 == boolean7);
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());

Node node4 = node3.useSourceInfoIfMissingFrom(node2);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node4.isBlock());
assertFalse(node4.isAdd());
assertFalse(node4.isVar());
assertFalse(node4.isName());
assertFalse(node4.isStringKey());
assertFalse(node4.isContinue());
assertFalse(node4.isCall());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isLabel());
assertFalse(node4.isNull());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDo());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNew());
assertFalse(node4.isFunction());
assertFalse(node4.isTrue());
assertFalse(node4.isDebugger());
assertFalse(node4.isAssign());
assertFalse(node4.isDelProp());
assertFalse(node4.isGetElem());
assertFalse(node4.isAnd());
assertFalse(node4.isCast());
assertFalse(node4.isExprResult());
assertFalse(node4.isVoid());
assertTrue(node4.isNumber());
assertFalse(node4.isReturn());
assertFalse(node4.isObjectLit());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isComma());
assertFalse(node4.isNot());
assertFalse(node4.isString());
assertFalse(node4.isWhile());
assertFalse(node4.isGetProp());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isHook());
assertFalse(node4.isFalse());
assertFalse(node4.isSwitch());
assertFalse(node4.isBreak());
assertFalse(node4.isIn());
assertFalse(node4.isNE());
assertFalse(node4.isEmpty());
assertFalse(node4.isThrow());
assertFalse(node4.isInc());
assertFalse(node4.isTry());
assertFalse(node4.isRegExp());
assertFalse(node4.isWith());
assertFalse(node4.isLabelName());
assertFalse(node4.isIf());
assertFalse(node4.isCatch());
assertFalse(node4.isArrayLit());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isParamList());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isThis());
assertEquals(39, node4.getType());
assertFalse(node4.isGetterDef());
assertFalse(node4.isFor());
assertFalse(node4.isScript());
assertFalse(node4.isCase());
assertFalse(node4.hasOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(41, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertTrue(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isCast());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.isThrow());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isInc());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getLineno());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isTry());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isRegExp());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isIf());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertEquals(0, node2.getType());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertFalse(node2.isTypeOf());
assertFalse(node2.isContinue());
assertTrue(node2.hasOneChild());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertEquals(39, node3.getType());
assertFalse(node3.isDo());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isBlock());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabel());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isContinue());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.hasOneChild());
assertFalse(node3.hasChildren());
assertFalse(node3.isParamList());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isScript());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isFunction());
assertFalse(node3.isThis());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isRegExp());
assertFalse(node3.isCatch());
assertFalse(node3.isWith());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isFor());
assertFalse(node3.isArrayLit());
assertFalse(node3.isHook());
assertFalse(node3.isGetProp());
assertFalse(node3.isTry());
assertTrue(node3.isNumber());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetterDef());
assertFalse(node3.isString());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isComma());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isBreak());
assertFalse(node3.isGetElem());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isDelProp());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isEmpty());

Node node5 = Node.newString(15, "Node tree inequality:\nTree1:\nNULL\n    NUMBER -3223.0\n\n\nTree2:\nNUMBER -3223.0\n\n\nSubtree1: NULL\n    NUMBER -3223.0\n\n\nSubtree2: NUMBER -3223.0\n");
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.isLabelName());
assertFalse(node5.isAssign());
assertFalse(node5.isNumber());
assertFalse(node5.isDec());
assertFalse(node5.isTypeOf());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.hasChildren());
assertFalse(node5.isReturn());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isLabel());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCast());
assertFalse(node5.isContinue());
assertFalse(node5.isGetElem());
assertFalse(node5.isExprResult());
assertFalse(node5.isWith());
assertFalse(node5.isNot());
assertFalse(node5.isWhile());
assertFalse(node5.isObjectLit());
assertFalse(node5.isAnd());
assertFalse(node5.isBlock());
assertFalse(node5.hasOneChild());
assertFalse(node5.isGetProp());
assertFalse(node5.isScript());
assertFalse(node5.isFalse());
assertFalse(node5.isThis());
assertFalse(node5.isThrow());
assertFalse(node5.isHook());
assertFalse(node5.isCatch());
assertFalse(node5.isInstanceOf());
assertEquals(15, node5.getType());
assertFalse(node5.isIn());
assertFalse(node5.isSetterDef());
assertFalse(node5.isInc());
assertFalse(node5.isIf());
assertFalse(node5.isDelProp());
assertFalse(node5.isGetterDef());
assertFalse(node5.isNE());
assertFalse(node5.isFor());
assertFalse(node5.isFunction());
assertFalse(node5.isVoid());
assertFalse(node5.isArrayLit());
assertFalse(node5.isCase());
assertFalse(node5.isString());
assertFalse(node5.isRegExp());
assertFalse(node5.isSwitch());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isDebugger());
assertFalse(node5.isTry());
assertFalse(node5.isName());
assertFalse(node5.isComma());
assertFalse(node5.isParamList());
assertFalse(node5.isStringKey());
assertFalse(node5.isVar());
assertFalse(node5.isNull());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isBreak());
assertFalse(node5.isCall());
assertFalse(node5.isDo());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isTrue());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isOr());
assertFalse(node5.isNew());
assertFalse(node5.isEmpty());
assertFalse(node5.isAdd());

boolean boolean9 = node5.isFor();
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertTrue(boolean9 == boolean2);
assertFalse(boolean9 == boolean8);
assertTrue(boolean9 == boolean1);
assertTrue(boolean9 == boolean4);
assertTrue(boolean9 == boolean7);
assertFalse(boolean9 == boolean3);
assertFalse(boolean9 == boolean0);
assertTrue(boolean9 == boolean5);
assertTrue(boolean9 == boolean6);
assertFalse(node5.isLabelName());
assertFalse(node5.isAssign());
assertFalse(node5.isNumber());
assertFalse(node5.isDec());
assertFalse(node5.isTypeOf());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.hasChildren());
assertFalse(node5.isReturn());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isLabel());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCast());
assertFalse(node5.isContinue());
assertFalse(node5.isGetElem());
assertFalse(node5.isExprResult());
assertFalse(node5.isWith());
assertFalse(node5.isNot());
assertFalse(node5.isWhile());
assertFalse(node5.isObjectLit());
assertFalse(node5.isAnd());
assertFalse(node5.isBlock());
assertFalse(node5.hasOneChild());
assertFalse(node5.isGetProp());
assertFalse(node5.isScript());
assertFalse(node5.isFalse());
assertFalse(node5.isThis());
assertFalse(node5.isThrow());
assertFalse(node5.isHook());
assertFalse(node5.isCatch());
assertFalse(node5.isInstanceOf());
assertEquals(15, node5.getType());
assertFalse(node5.isIn());
assertFalse(node5.isSetterDef());
assertFalse(node5.isInc());
assertFalse(node5.isIf());
assertFalse(node5.isDelProp());
assertFalse(node5.isGetterDef());
assertFalse(node5.isNE());
assertFalse(node5.isFor());
assertFalse(node5.isFunction());
assertFalse(node5.isVoid());
assertFalse(node5.isArrayLit());
assertFalse(node5.isCase());
assertFalse(node5.isString());
assertFalse(node5.isRegExp());
assertFalse(node5.isSwitch());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isDebugger());
assertFalse(node5.isTry());
assertFalse(node5.isName());
assertFalse(node5.isComma());
assertFalse(node5.isParamList());
assertFalse(node5.isStringKey());
assertFalse(node5.isVar());
assertFalse(node5.isNull());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isBreak());
assertFalse(node5.isCall());
assertFalse(node5.isDo());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isTrue());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isOr());
assertFalse(node5.isNew());
assertFalse(node5.isEmpty());
assertFalse(node5.isAdd());

boolean boolean10 = node1.isVar();
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node5));
assertTrue(boolean10 == boolean1);
assertTrue(boolean10 == boolean4);
assertFalse(boolean10 == boolean8);
assertTrue(boolean10 == boolean7);
assertFalse(boolean10 == boolean3);
assertFalse(boolean10 == boolean0);
assertTrue(boolean10 == boolean6);
assertTrue(boolean10 == boolean5);
assertTrue(boolean10 == boolean2);
assertTrue(boolean10 == boolean9);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node5));
assertFalse(node1.equals((Object)node3));
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isFalse());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertTrue(node0.isNumber());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isIn());
assertTrue(node1.hasChildren());
assertFalse(node1.isCase());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(41, node1.getType());
assertFalse(node1.isInc());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isParamList());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertTrue(node1.isNull());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());

Node[] nodeArray0 = new Node[7];
nodeArray0[0] = node3;
nodeArray0[1] = node5;
nodeArray0[2] = node4;
Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node5.getJsDocBuilderForNode();
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.isLabelName());
assertFalse(node5.isAssign());
assertFalse(node5.isNumber());
assertFalse(node5.isDec());
assertFalse(node5.isTypeOf());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.hasChildren());
assertFalse(node5.isReturn());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isLabel());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCast());
assertFalse(node5.isContinue());
assertFalse(node5.isGetElem());
assertFalse(node5.isExprResult());
assertFalse(node5.isWith());
assertFalse(node5.isNot());
assertFalse(node5.isWhile());
assertFalse(node5.isObjectLit());
assertFalse(node5.isAnd());
assertFalse(node5.isBlock());
assertFalse(node5.hasOneChild());
assertFalse(node5.isGetProp());
assertFalse(node5.isScript());
assertFalse(node5.isFalse());
assertFalse(node5.isThis());
assertFalse(node5.isThrow());
assertFalse(node5.isHook());
assertFalse(node5.isCatch());
assertFalse(node5.isInstanceOf());
assertEquals(15, node5.getType());
assertFalse(node5.isIn());
assertFalse(node5.isSetterDef());
assertFalse(node5.isInc());
assertFalse(node5.isIf());
assertFalse(node5.isDelProp());
assertFalse(node5.isGetterDef());
assertFalse(node5.isNE());
assertFalse(node5.isFor());
assertFalse(node5.isFunction());
assertFalse(node5.isVoid());
assertFalse(node5.isArrayLit());
assertFalse(node5.isCase());
assertFalse(node5.isString());
assertFalse(node5.isRegExp());
assertFalse(node5.isSwitch());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isDebugger());
assertFalse(node5.isTry());
assertFalse(node5.isName());
assertFalse(node5.isComma());
assertFalse(node5.isParamList());
assertFalse(node5.isStringKey());
assertFalse(node5.isVar());
assertFalse(node5.isNull());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isBreak());
assertFalse(node5.isCall());
assertFalse(node5.isDo());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isTrue());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isOr());
assertFalse(node5.isNew());
assertFalse(node5.isEmpty());
assertFalse(node5.isAdd());

node_FileLevelJsDocBuilder0.append("YLdP2|");
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));
assertFalse(node5.isLabelName());
assertFalse(node5.isAssign());
assertFalse(node5.isNumber());
assertFalse(node5.isDec());
assertFalse(node5.isTypeOf());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.hasChildren());
assertFalse(node5.isReturn());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isLabel());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isCast());
assertFalse(node5.isContinue());
assertFalse(node5.isGetElem());
assertFalse(node5.isExprResult());
assertFalse(node5.isWith());
assertFalse(node5.isNot());
assertFalse(node5.isWhile());
assertFalse(node5.isObjectLit());
assertFalse(node5.isAnd());
assertFalse(node5.isBlock());
assertFalse(node5.hasOneChild());
assertFalse(node5.isGetProp());
assertFalse(node5.isScript());
assertFalse(node5.isFalse());
assertFalse(node5.isThis());
assertFalse(node5.isThrow());
assertFalse(node5.isHook());
assertFalse(node5.isCatch());
assertFalse(node5.isInstanceOf());
assertEquals(15, node5.getType());
assertFalse(node5.isIn());

node_FileLevelJsDocBuilder0.append("Node tree inequality:\nTree1:\nNULL\n    NUMBER -3223.0\n\n\nTree2:\nNUMBER -3223.0\n\n\nSubtree1: NULL\n    NUMBER -3223.0\n\n\nSubtree2: NUMBER -3223.0\n");
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node1));

Node node6 = new Node(12, node0, node2);

* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/7
* Done!

* Computation finished
