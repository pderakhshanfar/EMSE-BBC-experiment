* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 18602
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1198145477
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:14:54.000 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:15:37.521 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 4057
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 1316
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 33396
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 2196
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 5051
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 295
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 59
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 12
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 1185
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 5161
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 75
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 1738
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 6305
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 131
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 2241
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 131
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 2404
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 826
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 8846
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 26575
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 131
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 131
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 19
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 1740
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 14048
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 1740
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 9386
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 5516
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 7892
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 1585
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 485
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 2828
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 154
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 1187
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 58
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 13352
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I3 Branch 101 IFNONNULL L798 - true: 56
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 4655
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 678
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 25581
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 3246
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 779
Number of times BBC is called for com.google.javascript.rhino.Node.mergeLineCharNo(II)I: I15 Branch 141 IFEQ L1197 - false: 209
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 355
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 10940
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 342
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 8494
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 22340
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 6020
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 2035
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 735
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 70
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 4356
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 4368
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 1063
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 5516
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 1887
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 42075
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 4422
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 1447
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 1
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 6060
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 600
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 485
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 6060
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 4430
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 485
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 568
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 1968
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 45
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 826
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 11640
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 23250
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 8390
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 826
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 2528
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 30902
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 295
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 1538
Number of times BBC is called for com.google.javascript.rhino.Node$AbstractPropListItem.getType()I: Line 281: 45
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 17717
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 485
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 11997
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 6402
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 1538
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 45
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 6964
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 26391
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 1063
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 176
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 3350
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 600
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 8406
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 108622
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 131
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 90
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 4440
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 213
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 4314
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 133
Number of times BBC is called for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch: 131
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 452
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 4611
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 452
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node$AbstractPropListItem.getNext()Lcom/google/javascript/rhino/Node$PropListItem;: Line 286: 45
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 892
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 10811
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 4966
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 1316
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 101
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 345
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 23098
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 894
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 2196
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 26785
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 2196
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 232: 380
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true: 4
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 3533
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 352
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 131
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 4314
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 600
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 4479
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 1063
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 236
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 75
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 8529
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 37181
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 3384
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 2828
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 35242
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 600
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: root-Branch: 131
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 14621
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 36
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 380
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 143
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 485
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 131
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 131
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 45
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 648
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 45
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 45
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 45
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 60835
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 3533
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 4472
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 45
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 11997
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 13684
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 45
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 5477
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 18674
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 1185
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 485
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 1531
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 3105
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 18349
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 8102
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 1538
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 1538
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 11939
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 37181
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 3533
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 943
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 108622
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 234
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 27701
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 70
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 8325
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 5178
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 295
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 3533
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 234
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 75
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 94
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 4540
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 5880
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 213
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 4358
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 1740
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 12
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 711
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 2333
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 382
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 13285
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 13319
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 14021
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 2003
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 5516
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 14133
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 5516
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - true: 56
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 73
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 108622
Number of times BBC is called for com.google.javascript.rhino.Node$AbstractPropListItem.getNext()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 4
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 4419
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 131
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 4
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 4
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 4461
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 63
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 45
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 89
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 2984
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 600
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 53194
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 60
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 2679
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 4356
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 24
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 2035
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 460: 125
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 461: 125
Number of times BBC is called for com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I8 Branch 97 IFNULL L764 - false: 12
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 462: 125
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 1427
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 5957
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 589
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 43142
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 7
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 485
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 7424
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 485
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 45
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 7603
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 485
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 474
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 7947
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 12464
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: root-Branch: 295
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 37
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 3384
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 2015
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 1364
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 77602
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 9950
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 2196
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 622
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: root-Branch: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 1185
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 295
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 6241
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 7184
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 5880
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 122
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 3533
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 18793
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 122
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 13659
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 4579
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 2196
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 4356
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 1185
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 4718
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 8628
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 1185
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 20522
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 327
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 19657
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 2712
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 485
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - true: 67
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 121
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 485
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 45
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: Line 312: 485
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 45
Number of times BBC is called for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: Line 546: 131
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 1019
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 3973
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 4148
Number of times BBC is called for com.google.javascript.rhino.Node.putBooleanProp(IZ)V: I5 Branch 109 IFEQ L852 - true: 41
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 711
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 9059
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 1063
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 45
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 133
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 15410
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 1063
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 674
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 32497
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 1063
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 79
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 774
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 1
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 1038
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 13285
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 600
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 4419
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 29157
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 5226
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 485
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 22202
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 17541
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 22392
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 6351
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 2236
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 36
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 4966
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 85
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 18213
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 11184
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 19
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 326
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 5516
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 13497
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 7850
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 11007
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 7850
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 464
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 1804
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 17541
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 5477
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 5477
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 108
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 5477
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 600
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 588
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 5477
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 5273
Number of times BBC is called for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 600
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 5477
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 5477
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 79
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 513
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 162
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 3533
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 10194
Number of times BBC is called for com.google.javascript.rhino.Node$AbstractPropListItem.getType()I: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 10194
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 42
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1015: 295
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 943
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 416
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 22092
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1016: 295
Number of times BBC is called for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 4
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 600
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 485
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 326
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 5224
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 3533
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 600
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 485
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 197
Number of times BBC is called for com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I12 Branch 98 IF_ICMPEQ L764 - false: 12
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 1094
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 131
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 943
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 1063
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 1409
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: Line 1010: 295
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 1633
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 6981
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 5677
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 2196
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 131
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 2196
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 2035
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 131
Number of times BBC is called for com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I12 Branch 98 IF_ICMPEQ L764 - true: 97
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 96
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 4237
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 131
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 485
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 4057
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 7047
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 1316
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 380
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 3142
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 453
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 176
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 20740
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 2822
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 121
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 8808
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 121
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 1585
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 45
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 325
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 1329
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 45
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 1019
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 232
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 13398
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 19
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 701
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 19670
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 3215
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 8325
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 4237
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 19
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 389
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 18140
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 600
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 26898
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 479
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 959
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 600
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 600
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 48252
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 485
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 48252
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 4881
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 7850
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 37494
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 485
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 22244
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 600
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 600
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 600
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: root-Branch: 2196
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 295
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 600
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 1094
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 531: 711
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: Line 530: 711
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 711
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 23791
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 28039
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 1447
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 10608
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 12559
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 113
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 131
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 131
Number of times BBC is called for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 137
Number of times BBC is called for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 131
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 2949
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 1063
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 1063
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 4
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 17
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 1241
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 131
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1233
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 23201
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 8073
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 131
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 45
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 131
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 131
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 7947
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 236
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 131
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 12
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 35
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 48252
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 485
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 4440
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 48252
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 1185
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 48252
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 48252
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 3650
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 154
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 8474
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 48252
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 133
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 48252
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 2360
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 8474
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 8474
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 39418
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 380
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 485
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 6060
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 263
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 6060
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 13371
Number of times BBC is called for com.google.javascript.rhino.Node.getLength()I: Line 1132: 2196
Number of times BBC is called for com.google.javascript.rhino.Node.putIntProp(II)V: I8 Branch 110 IFEQ L857 - true: 37
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 13371
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 14069
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 1883
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 18465
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 131
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 24
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 701
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 1951
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 5549
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 48018
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: Line 2060: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 295
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 1185
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 3195
Number of times BBC is called for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 600
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 5548
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 75
Number of times BBC is called for com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;: I9 Branch 104 IFNONNULL L814 - true: 171
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 32208
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 3877
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 213
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 2731
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 18713
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 1447
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 122
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 371
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 9438
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 1316
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 3533
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 943
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 502
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 943
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 3195
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 8361
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 411
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 7542
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 213
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 229
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 132
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 600
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 131
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 18651
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 295
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 9936
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 380
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 5822
Number of times BBC is called for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 711
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 28039
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 320
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 711
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 36302
Number of times BBC is called for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 45
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 28236
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 131
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 40102
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 2528
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 4419
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 175
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 75
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 10183
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 2667
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 295
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 623
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 295
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 10608
Number of times BBC is called for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 45
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 5277
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 77602
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 10608
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 826
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 826
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 104
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 826
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 826
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 1063
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 1063
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 826
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 16616
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 485
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 1925
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 3247
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 485
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 2035
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 5539
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 82
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 122
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 108622
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 12661
Number of times BBC is called for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - true: 302
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 39
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 380
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 826
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 485
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 45
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 1313
Number of times BBC is called for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 204
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 1689
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 1185
Number of times BBC is called in total: 5846742
* Search finished after 605s and 683 generations, 278641 statements, best individual has fitness: 2786.0
* Minimizing test suite
[MASTER] 10:26:15.987 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 795
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 623
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 100
* Number of covered goals: 100
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 472
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 4536
* Number of covered goals: 2257
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 714
* Number of covered goals: 586
* Generated 784 tests with total length 10367
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:27:22.312 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6998833333333333% of time used, but only 52/784 tests minimized), falling back to using all assertions
[MASTER] 10:27:40.371 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 10:27:48.402 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 8 seconds more than allowed.
[MASTER] 10:27:53.860 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_73_1628159273754/com/google/javascript/rhino/Node_73_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_73_1628159273754/com/google/javascript/rhino/Node_73_tmp__ESTest_scaffolding.java]]
[MASTER] 10:27:53.861 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:27:53.861 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:27:53.864 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 879
[MASTER] 10:27:53.866 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_73_1628159273754/com/google/javascript/rhino/Node_73_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:27:53 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.io.CharArrayWriter;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_73_tmp__ESTest extends Node_73_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString((-1464), "Should not happen\n", (-1464), (-1464));
22:       assertNotNull(node0);
23:       assertFalse(node0.isNull());
24:       assertFalse(node0.isSetterDef());
25:       assertFalse(node0.isCall());
26:       assertFalse(node0.isName());
27:       assertFalse(node0.isParamList());
28:       assertFalse(node0.isStringKey());
29:       assertFalse(node0.isRegExp());
30:       assertFalse(node0.isDebugger());
31:       assertFalse(node0.isVoid());
32:       assertFalse(node0.isCatch());
33:       assertFalse(node0.hasMoreThanOneChild());
34:       assertEquals((-1464), node0.getType());
35:       assertFalse(node0.isFor());
36:       assertFalse(node0.isTry());
37:       assertFalse(node0.isBlock());
38:       assertFalse(node0.isReturn());
39:       assertFalse(node0.isWhile());
40:       assertFalse(node0.isTypeOf());
41:       assertFalse(node0.isNumber());
42:       assertFalse(node0.isDelProp());
43:       assertFalse(node0.hasChildren());
44:       assertFalse(node0.isGetterDef());
45:       assertFalse(node0.isDec());
46:       assertFalse(node0.isAssign());
47:       assertFalse(node0.isEmpty());
48:       assertFalse(node0.isOr());
49:       assertFalse(node0.isGetElem());
50:       assertFalse(node0.isArrayLit());
51:       assertFalse(node0.isLabelName());
52:       assertFalse(node0.isTrue());
53:       assertFalse(node0.isSwitch());
54:       assertFalse(node0.isNew());
55:       assertFalse(node0.isAdd());
56:       assertFalse(node0.isVar());
57:       assertEquals(0, node0.getChildCount());
58:       assertFalse(node0.isLabel());
59:       assertFalse(node0.isAssignAdd());
60:       assertFalse(node0.isDo());
61:       assertFalse(node0.isDefaultCase());
62:       assertFalse(node0.isThis());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isGetProp());
65:       assertFalse(node0.isComma());
66:       assertFalse(node0.isFalse());
67:       assertFalse(node0.isInstanceOf());
68:       assertFalse(node0.isObjectLit());
69:       assertFalse(node0.isAnd());
70:       assertFalse(node0.isScript());
71:       assertFalse(node0.isExprResult());
72:       assertEquals((-1), node0.getCharno());
73:       assertFalse(node0.isNot());
74:       assertFalse(node0.isWith());
75:       assertFalse(node0.isString());
76:       assertFalse(node0.isHook());
77:       assertFalse(node0.isCase());
78:       assertFalse(node0.hasOneChild());
79:       assertFalse(node0.isNE());
80:       assertEquals((-1), node0.getSourcePosition());
81:       assertFalse(node0.isIn());
82:       assertFalse(node0.isCast());
83:       assertEquals((-1), node0.getLineno());
84:       assertFalse(node0.isIf());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isInc());
87:       assertFalse(node0.isContinue());
88:       assertFalse(node0.isThrow());
89:       assertEquals(54, Node.SLASH_V);
90:       assertEquals(15, Node.NO_SIDE_EFFECTS);
91:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
92:       assertEquals(49, Node.DIRECT_EVAL);
93:       assertEquals(1, Node.DECR_FLAG);
94:       assertEquals(57, Node.LAST_PROP);
95:       assertEquals(51, Node.STATIC_SOURCE_FILE);
96:       assertEquals(46, Node.IS_NAMESPACE);
97:       assertEquals(57, Node.REFLECTED_OBJECT);
98:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
99:       assertEquals(50, Node.FREE_CALL);
100:       assertEquals(52, Node.LENGTH);
101:       assertEquals(2, Node.POST_FLAG);
102:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
103:       assertEquals(39, Node.EMPTY_BLOCK);
104:       assertEquals(47, Node.IS_DISPATCHER);
105:       assertEquals(40, Node.ORIGINALNAME_PROP);
106:       assertEquals(30, Node.VAR_ARGS_NAME);
107:       assertEquals(43, Node.IS_CONSTANT_NAME);
108:       assertEquals(36, Node.QUOTED_PROP);
109:       assertEquals(53, Node.INPUT_ID);
110:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
113:       assertEquals(29, Node.JSDOC_INFO_PROP);
114:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
115:       assertEquals(8, Node.FLAG_NO_THROWS);
116:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
117:       assertEquals(56, Node.CHANGE_TIME);
118:       assertEquals(37, Node.OPT_ARG_NAME);
119:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
120:       assertEquals(48, Node.DIRECTIVES);
121:       assertEquals(32, Node.INCRDECR_PROP);
122:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
123:       assertEquals(12, Node.COLUMN_BITS);
124:       assertEquals(4095, Node.COLUMN_MASK);
125:       
126:       node0.setLength((-1279));
127:       assertFalse(node0.isNull());
128:       assertFalse(node0.isSetterDef());
129:       assertFalse(node0.isCall());
130:       assertFalse(node0.isName());
131:       assertFalse(node0.isParamList());
132:       assertFalse(node0.isStringKey());
133:       assertFalse(node0.isRegExp());
134:       assertFalse(node0.isDebugger());
135:       assertFalse(node0.isVoid());
136:       assertFalse(node0.isCatch());
137:       assertFalse(node0.hasMoreThanOneChild());
138:       assertEquals((-1464), node0.getType());
139:       assertFalse(node0.isFor());
140:       assertFalse(node0.isTry());
141:       assertFalse(node0.isBlock());
142:       assertFalse(node0.isReturn());
143:       assertFalse(node0.isWhile());
144:       assertFalse(node0.isTypeOf());
145:       assertFalse(node0.isNumber());
146:       assertFalse(node0.isDelProp());
147:       assertFalse(node0.hasChildren());
148:       assertFalse(node0.isGetterDef());
149:       assertFalse(node0.isDec());
150:       assertFalse(node0.isAssign());
151:       assertFalse(node0.isEmpty());
152:       assertFalse(node0.isOr());
153:       assertFalse(node0.isGetElem());
154:       assertFalse(node0.isArrayLit());
155:       assertFalse(node0.isLabelName());
156:       assertFalse(node0.isTrue());
157:       assertFalse(node0.isSwitch());
158:       assertFalse(node0.isNew());
159:       assertFalse(node0.isAdd());
160:       assertFalse(node0.isVar());
161:       assertEquals(0, node0.getChildCount());
162:       assertFalse(node0.isLabel());
163:       assertFalse(node0.isAssignAdd());
164:       assertFalse(node0.isDo());
165:       assertFalse(node0.isDefaultCase());
166:       assertFalse(node0.isThis());
167:       assertFalse(node0.isBreak());
168:       assertFalse(node0.isGetProp());
169:       assertFalse(node0.isComma());
170:       assertFalse(node0.isFalse());
171:       assertFalse(node0.isInstanceOf());
172:       assertFalse(node0.isObjectLit());
173:       assertFalse(node0.isAnd());
174:       assertFalse(node0.isScript());
175:       assertFalse(node0.isExprResult());
176:       assertEquals((-1), node0.getCharno());
177:       assertFalse(node0.isNot());
178:       assertFalse(node0.isWith());
179:       assertFalse(node0.isString());
180:       assertFalse(node0.isHook());
181:       assertFalse(node0.isCase());
182:       assertFalse(node0.hasOneChild());
183:       assertFalse(node0.isNE());
184:       assertEquals((-1), node0.getSourcePosition());
185:       assertFalse(node0.isIn());
186:       assertFalse(node0.isCast());
187:       assertEquals((-1), node0.getLineno());
188:       assertFalse(node0.isIf());
189:       assertFalse(node0.isFunction());
190:       assertFalse(node0.isInc());
191:       assertFalse(node0.isContinue());
192:       assertFalse(node0.isThrow());
193:       assertEquals(54, Node.SLASH_V);
194:       assertEquals(15, Node.NO_SIDE_EFFECTS);
195:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
196:       assertEquals(49, Node.DIRECT_EVAL);
197:       assertEquals(1, Node.DECR_FLAG);
198:       assertEquals(57, Node.LAST_PROP);
199:       assertEquals(51, Node.STATIC_SOURCE_FILE);
200:       assertEquals(46, Node.IS_NAMESPACE);
201:       assertEquals(57, Node.REFLECTED_OBJECT);
202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
203:       assertEquals(50, Node.FREE_CALL);
204:       assertEquals(52, Node.LENGTH);
205:       assertEquals(2, Node.POST_FLAG);
206:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
207:       assertEquals(39, Node.EMPTY_BLOCK);
208:       assertEquals(47, Node.IS_DISPATCHER);
209:       assertEquals(40, Node.ORIGINALNAME_PROP);
210:       assertEquals(30, Node.VAR_ARGS_NAME);
211:       assertEquals(43, Node.IS_CONSTANT_NAME);
212:       assertEquals(36, Node.QUOTED_PROP);
213:       assertEquals(53, Node.INPUT_ID);
214:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
215:       assertEquals(55, Node.INFERRED_FUNCTION);
216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
217:       assertEquals(29, Node.JSDOC_INFO_PROP);
218:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
219:       assertEquals(8, Node.FLAG_NO_THROWS);
220:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
221:       assertEquals(56, Node.CHANGE_TIME);
222:       assertEquals(37, Node.OPT_ARG_NAME);
223:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
224:       assertEquals(48, Node.DIRECTIVES);
225:       assertEquals(32, Node.INCRDECR_PROP);
226:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
227:       assertEquals(12, Node.COLUMN_BITS);
228:       assertEquals(4095, Node.COLUMN_MASK);
229:       
230:       Node node1 = new Node(29, 46, 57);
231:       assertNotNull(node1);
232:       assertFalse(node1.isLabel());
233:       assertFalse(node1.isReturn());
234:       assertFalse(node1.isContinue());
235:       assertFalse(node1.isOr());
236:       assertFalse(node1.hasMoreThanOneChild());
237:       assertFalse(node1.isTypeOf());
238:       assertFalse(node1.isDec());
239:       assertFalse(node1.hasChildren());
240:       assertFalse(node1.isNumber());
241:       assertFalse(node1.isWhile());
242:       assertFalse(node1.isNew());
243:       assertFalse(node1.isAssignAdd());
244:       assertFalse(node1.isDo());
245:       assertFalse(node1.isCall());
246:       assertFalse(node1.isAdd());
247:       assertFalse(node1.isBlock());
248:       assertFalse(node1.isAssign());
249:       assertFalse(node1.isGetElem());
250:       assertFalse(node1.isExprResult());
251:       assertFalse(node1.isNull());
252:       assertFalse(node1.isName());
253:       assertEquals(0, node1.getChildCount());
254:       assertFalse(node1.isInstanceOf());
255:       assertFalse(node1.isCatch());
256:       assertFalse(node1.isWith());
257:       assertFalse(node1.isDefaultCase());
258:       assertFalse(node1.isThis());
259:       assertFalse(node1.isScript());
260:       assertFalse(node1.isTry());
261:       assertFalse(node1.isArrayLit());
262:       assertFalse(node1.hasOneChild());
263:       assertFalse(node1.isVar());
264:       assertEquals(57, node1.getCharno());
265:       assertFalse(node1.isGetterDef());
266:       assertFalse(node1.isStringKey());
267:       assertFalse(node1.isParamList());
268:       assertFalse(node1.isLabelName());
269:       assertFalse(node1.isSwitch());
270:       assertFalse(node1.isIn());
271:       assertFalse(node1.isString());
272:       assertFalse(node1.isEmpty());
273:       assertFalse(node1.isFor());
274:       assertFalse(node1.isInc());
275:       assertFalse(node1.isCase());
276:       assertEquals(29, node1.getType());
277:       assertFalse(node1.isHook());
278:       assertFalse(node1.isRegExp());
279:       assertFalse(node1.isBreak());
280:       assertFalse(node1.isIf());
281:       assertEquals(188473, node1.getSourcePosition());
282:       assertFalse(node1.isNE());
283:       assertFalse(node1.isTrue());
284:       assertFalse(node1.isVoid());
285:       assertFalse(node1.isDelProp());
286:       assertFalse(node1.isComma());
287:       assertFalse(node1.isNot());
288:       assertFalse(node1.isObjectLit());
289:       assertFalse(node1.isSetterDef());
290:       assertFalse(node1.isGetProp());
291:       assertFalse(node1.isThrow());
292:       assertEquals(46, node1.getLineno());
293:       assertFalse(node1.isCast());
294:       assertFalse(node1.isFalse());
295:       assertFalse(node1.isDebugger());
296:       assertFalse(node1.isFunction());
297:       assertFalse(node1.isAnd());
298:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
299:       assertEquals(53, Node.INPUT_ID);
300:       assertEquals(47, Node.IS_DISPATCHER);
301:       assertEquals(2, Node.POST_FLAG);
302:       assertEquals(12, Node.COLUMN_BITS);
303:       assertEquals(32, Node.INCRDECR_PROP);
304:       assertEquals(46, Node.IS_NAMESPACE);
305:       assertEquals(1, Node.DECR_FLAG);
306:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
307:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
308:       assertEquals(43, Node.IS_CONSTANT_NAME);
309:       assertEquals(54, Node.SLASH_V);
310:       assertEquals(50, Node.FREE_CALL);
311:       assertEquals(51, Node.STATIC_SOURCE_FILE);
312:       assertEquals(57, Node.REFLECTED_OBJECT);
313:       assertEquals(52, Node.LENGTH);
314:       assertEquals(40, Node.ORIGINALNAME_PROP);
315:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
316:       assertEquals(57, Node.LAST_PROP);
317:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
318:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
319:       assertEquals(30, Node.VAR_ARGS_NAME);
320:       assertEquals(55, Node.INFERRED_FUNCTION);
321:       assertEquals(4095, Node.COLUMN_MASK);
322:       assertEquals(48, Node.DIRECTIVES);
323:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
324:       assertEquals(39, Node.EMPTY_BLOCK);
325:       assertEquals(49, Node.DIRECT_EVAL);
326:       assertEquals(37, Node.OPT_ARG_NAME);
327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
328:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
329:       assertEquals(29, Node.JSDOC_INFO_PROP);
330:       assertEquals(8, Node.FLAG_NO_THROWS);
331:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
332:       assertEquals(56, Node.CHANGE_TIME);
333:       assertEquals(36, Node.QUOTED_PROP);
334:       assertFalse(node1.equals((Object)node0));
335:       
336:       boolean boolean0 = node1.mayMutateGlobalStateOrThrow();
337:       assertTrue(boolean0);
338:       assertFalse(node1.isLabel());
339:       assertFalse(node1.isReturn());
340:       assertFalse(node1.isContinue());
341:       assertFalse(node1.isOr());
342:       assertFalse(node1.hasMoreThanOneChild());
343:       assertFalse(node1.isTypeOf());
344:       assertFalse(node1.isDec());
345:       assertFalse(node1.hasChildren());
346:       assertFalse(node1.isNumber());
347:       assertFalse(node1.isWhile());
348:       assertFalse(node1.isNew());
349:       assertFalse(node1.isAssignAdd());
350:       assertFalse(node1.isDo());
351:       assertFalse(node1.isCall());
352:       assertFalse(node1.isAdd());
353:       assertFalse(node1.isBlock());
354:       assertFalse(node1.isAssign());
355:       assertFalse(node1.isGetElem());
356:       assertFalse(node1.isExprResult());
357:       assertFalse(node1.isNull());
358:       assertFalse(node1.isName());
359:       assertEquals(0, node1.getChildCount());
360:       assertFalse(node1.isInstanceOf());
361:       assertFalse(node1.isCatch());
362:       assertFalse(node1.isWith());
363:       assertFalse(node1.isDefaultCase());
364:       assertFalse(node1.isThis());
365:       assertFalse(node1.isScript());
366:       assertFalse(node1.isTry());
367:       assertFalse(node1.isArrayLit());
368:       assertFalse(node1.hasOneChild());
369:       assertFalse(node1.isVar());
370:       assertEquals(57, node1.getCharno());
371:       assertFalse(node1.isGetterDef());
372:       assertFalse(node1.isStringKey());
373:       assertFalse(node1.isParamList());
374:       assertFalse(node1.isLabelName());
375:       assertFalse(node1.isSwitch());
376:       assertFalse(node1.isIn());
377:       assertFalse(node1.isString());
378:       assertFalse(node1.isEmpty());
379:       assertFalse(node1.isFor());
380:       assertFalse(node1.isInc());
381:       assertFalse(node1.isCase());
382:       assertEquals(29, node1.getType());
383:       assertFalse(node1.isHook());
384:       assertFalse(node1.isRegExp());
385:       assertFalse(node1.isBreak());
386:       assertFalse(node1.isIf());
387:       assertEquals(188473, node1.getSourcePosition());
388:       assertFalse(node1.isNE());
389:       assertFalse(node1.isTrue());
390:       assertFalse(node1.isVoid());
391:       assertFalse(node1.isDelProp());
392:       assertFalse(node1.isComma());
393:       assertFalse(node1.isNot());
394:       assertFalse(node1.isObjectLit());
395:       assertFalse(node1.isSetterDef());
396:       assertFalse(node1.isGetProp());
397:       assertFalse(node1.isThrow());
398:       assertEquals(46, node1.getLineno());
399:       assertFalse(node1.isCast());
400:       assertFalse(node1.isFalse());
401:       assertFalse(node1.isDebugger());
402:       assertFalse(node1.isFunction());
403:       assertFalse(node1.isAnd());
404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
405:       assertEquals(53, Node.INPUT_ID);
406:       assertEquals(47, Node.IS_DISPATCHER);
407:       assertEquals(2, Node.POST_FLAG);
408:       assertEquals(12, Node.COLUMN_BITS);
409:       assertEquals(32, Node.INCRDECR_PROP);
410:       assertEquals(46, Node.IS_NAMESPACE);
411:       assertEquals(1, Node.DECR_FLAG);
412:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
413:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
414:       assertEquals(43, Node.IS_CONSTANT_NAME);
415:       assertEquals(54, Node.SLASH_V);
416:       assertEquals(50, Node.FREE_CALL);
417:       assertEquals(51, Node.STATIC_SOURCE_FILE);
418:       assertEquals(57, Node.REFLECTED_OBJECT);
419:       assertEquals(52, Node.LENGTH);
420:       assertEquals(40, Node.ORIGINALNAME_PROP);
421:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
422:       assertEquals(57, Node.LAST_PROP);
423:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
425:       assertEquals(30, Node.VAR_ARGS_NAME);
426:       assertEquals(55, Node.INFERRED_FUNCTION);
427:       assertEquals(4095, Node.COLUMN_MASK);
428:       assertEquals(48, Node.DIRECTIVES);
429:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
430:       assertEquals(39, Node.EMPTY_BLOCK);
431:       assertEquals(49, Node.DIRECT_EVAL);
432:       assertEquals(37, Node.OPT_ARG_NAME);
433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
434:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
435:       assertEquals(29, Node.JSDOC_INFO_PROP);
436:       assertEquals(8, Node.FLAG_NO_THROWS);
437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
438:       assertEquals(56, Node.CHANGE_TIME);
439:       assertEquals(36, Node.QUOTED_PROP);
440:       assertFalse(node1.equals((Object)node0));
441:       
442:       Node node2 = node1.srcref(node0);
443:       assertSame(node1, node2);
444:       assertSame(node2, node1);
445:       assertNotNull(node2);
446:       assertFalse(node0.isNull());
447:       assertFalse(node0.isSetterDef());
448:       assertFalse(node0.isCall());
449:       assertFalse(node0.isName());
450:       assertFalse(node0.isParamList());
451:       assertFalse(node0.isStringKey());
452:       assertFalse(node0.isRegExp());
453:       assertFalse(node0.isDebugger());
454:       assertFalse(node0.isVoid());
455:       assertFalse(node0.isCatch());
456:       assertFalse(node0.hasMoreThanOneChild());
457:       assertEquals((-1464), node0.getType());
458:       assertFalse(node0.isFor());
459:       assertFalse(node0.isTry());
460:       assertFalse(node0.isBlock());
461:       assertFalse(node0.isReturn());
462:       assertFalse(node0.isWhile());
463:       assertFalse(node0.isTypeOf());
464:       assertFalse(node0.isNumber());
465:       assertFalse(node0.isDelProp());
466:       assertFalse(node0.hasChildren());
467:       assertFalse(node0.isGetterDef());
468:       assertFalse(node0.isDec());
469:       assertFalse(node0.isAssign());
470:       assertFalse(node0.isEmpty());
471:       assertFalse(node0.isOr());
472:       assertFalse(node0.isGetElem());
473:       assertFalse(node0.isArrayLit());
474:       assertFalse(node0.isLabelName());
475:       assertFalse(node0.isTrue());
476:       assertFalse(node0.isSwitch());
477:       assertFalse(node0.isNew());
478:       assertFalse(node0.isAdd());
479:       assertFalse(node0.isVar());
480:       assertEquals(0, node0.getChildCount());
481:       assertFalse(node0.isLabel());
482:       assertFalse(node0.isAssignAdd());
483:       assertFalse(node0.isDo());
484:       assertFalse(node0.isDefaultCase());
485:       assertFalse(node0.isThis());
486:       assertFalse(node0.isBreak());
487:       assertFalse(node0.isGetProp());
488:       assertFalse(node0.isComma());
489:       assertFalse(node0.isFalse());
490:       assertFalse(node0.isInstanceOf());
491:       assertFalse(node0.isObjectLit());
492:       assertFalse(node0.isAnd());
493:       assertFalse(node0.isScript());
494:       assertFalse(node0.isExprResult());
495:       assertEquals((-1), node0.getCharno());
496:       assertFalse(node0.isNot());
497:       assertFalse(node0.isWith());
498:       assertFalse(node0.isString());
499:       assertFalse(node0.isHook());
500:       assertFalse(node0.isCase());
501:       assertFalse(node0.hasOneChild());
502:       assertFalse(node0.isNE());
503:       assertEquals((-1), node0.getSourcePosition());
504:       assertFalse(node0.isIn());
505:       assertFalse(node0.isCast());
506:       assertEquals((-1), node0.getLineno());
507:       assertFalse(node0.isIf());
508:       assertFalse(node0.isFunction());
509:       assertFalse(node0.isInc());
510:       assertFalse(node0.isContinue());
511:       assertFalse(node0.isThrow());
512:       assertEquals((-1), node1.getLineno());
513:       assertFalse(node1.isLabel());
514:       assertFalse(node1.isReturn());
515:       assertFalse(node1.isContinue());
516:       assertFalse(node1.isOr());
517:       assertFalse(node1.hasMoreThanOneChild());
518:       assertFalse(node1.isTypeOf());
519:       assertFalse(node1.isDec());
520:       assertFalse(node1.hasChildren());
521:       assertFalse(node1.isNumber());
522:       assertFalse(node1.isWhile());
523:       assertFalse(node1.isNew());
524:       assertFalse(node1.isAssignAdd());
525:       assertFalse(node1.isDo());
526:       assertFalse(node1.isCall());
527:       assertFalse(node1.isAdd());
528:       assertFalse(node1.isBlock());
529:       assertFalse(node1.isAssign());
530:       assertFalse(node1.isGetElem());
531:       assertFalse(node1.isExprResult());
532:       assertFalse(node1.isNull());
533:       assertFalse(node1.isName());
534:       assertEquals(0, node1.getChildCount());
535:       assertFalse(node1.isInstanceOf());
536:       assertFalse(node1.isCatch());
537:       assertFalse(node1.isWith());
538:       assertFalse(node1.isDefaultCase());
539:       assertFalse(node1.isThis());
540:       assertFalse(node1.isScript());
541:       assertFalse(node1.isTry());
542:       assertFalse(node1.isArrayLit());
543:       assertFalse(node1.hasOneChild());
544:       assertFalse(node1.isVar());
545:       assertEquals((-1), node1.getCharno());
546:       assertFalse(node1.isGetterDef());
547:       assertFalse(node1.isStringKey());
548:       assertFalse(node1.isParamList());
549:       assertFalse(node1.isLabelName());
550:       assertFalse(node1.isSwitch());
551:       assertFalse(node1.isIn());
552:       assertFalse(node1.isString());
553:       assertFalse(node1.isEmpty());
554:       assertFalse(node1.isFor());
555:       assertFalse(node1.isInc());
556:       assertFalse(node1.isCase());
557:       assertEquals(29, node1.getType());
558:       assertFalse(node1.isHook());
559:       assertFalse(node1.isRegExp());
560:       assertFalse(node1.isBreak());
561:       assertFalse(node1.isIf());
562:       assertFalse(node1.isNE());
563:       assertFalse(node1.isTrue());
564:       assertFalse(node1.isVoid());
565:       assertFalse(node1.isDelProp());
566:       assertFalse(node1.isComma());
567:       assertFalse(node1.isNot());
568:       assertFalse(node1.isObjectLit());
569:       assertFalse(node1.isSetterDef());
570:       assertFalse(node1.isGetProp());
571:       assertFalse(node1.isThrow());
572:       assertFalse(node1.isCast());
573:       assertFalse(node1.isFalse());
574:       assertFalse(node1.isDebugger());
575:       assertFalse(node1.isFunction());
576:       assertEquals((-1), node1.getSourcePosition());
577:       assertFalse(node1.isAnd());
578:       assertFalse(node2.isInc());
579:       assertEquals((-1), node2.getCharno());
580:       assertFalse(node2.isSwitch());
581:       assertFalse(node2.isString());
582:       assertEquals(29, node2.getType());
583:       assertFalse(node2.isComma());
584:       assertFalse(node2.isThis());
585:       assertFalse(node2.isGetProp());
586:       assertFalse(node2.isDelProp());
587:       assertFalse(node2.isGetterDef());
588:       assertFalse(node2.isBreak());
589:       assertFalse(node2.isInstanceOf());
590:       assertFalse(node2.isCase());
591:       assertFalse(node2.isHook());
592:       assertFalse(node2.isFor());
593:       assertFalse(node2.isDebugger());
594:       assertFalse(node2.isFunction());
595:       assertFalse(node2.isRegExp());
596:       assertFalse(node2.isWith());
597:       assertFalse(node2.isCast());
598:       assertFalse(node2.isObjectLit());
599:       assertFalse(node2.isAnd());
600:       assertFalse(node2.isNot());
601:       assertFalse(node2.isIf());
602:       assertFalse(node2.isNE());
603:       assertFalse(node2.isSetterDef());
604:       assertFalse(node2.isIn());
605:       assertFalse(node2.isContinue());
606:       assertFalse(node2.isFalse());
607:       assertFalse(node2.isThrow());
608:       assertFalse(node2.isNew());
609:       assertFalse(node2.isAdd());
610:       assertFalse(node2.isCall());
611:       assertFalse(node2.isName());
612:       assertFalse(node2.isStringKey());
613:       assertFalse(node2.isNull());
614:       assertFalse(node2.isDec());
615:       assertFalse(node2.isTypeOf());
616:       assertEquals((-1), node2.getSourcePosition());
617:       assertFalse(node2.isNumber());
618:       assertEquals((-1), node2.getLineno());
619:       assertFalse(node2.isGetElem());
620:       assertFalse(node2.isCatch());
621:       assertFalse(node2.hasMoreThanOneChild());
622:       assertFalse(node2.hasOneChild());
623:       assertFalse(node2.isAssign());
624:       assertFalse(node2.isWhile());
625:       assertFalse(node2.isReturn());
626:       assertFalse(node2.hasChildren());
627:       assertFalse(node2.isBlock());
628:       assertFalse(node2.isExprResult());
629:       assertFalse(node2.isTrue());
630:       assertFalse(node2.isVoid());
631:       assertFalse(node2.isTry());
632:       assertFalse(node2.isScript());
633:       assertFalse(node2.isArrayLit());
634:       assertFalse(node2.isLabelName());
635:       assertFalse(node2.isParamList());
636:       assertFalse(node2.isOr());
637:       assertFalse(node2.isEmpty());
638:       assertFalse(node2.isDo());
639:       assertEquals(0, node2.getChildCount());
640:       assertFalse(node2.isLabel());
641:       assertFalse(node2.isAssignAdd());
642:       assertFalse(node2.isDefaultCase());
643:       assertFalse(node2.isVar());
644:       assertEquals(54, Node.SLASH_V);
645:       assertEquals(15, Node.NO_SIDE_EFFECTS);
646:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
647:       assertEquals(49, Node.DIRECT_EVAL);
648:       assertEquals(1, Node.DECR_FLAG);
649:       assertEquals(57, Node.LAST_PROP);
650:       assertEquals(51, Node.STATIC_SOURCE_FILE);
651:       assertEquals(46, Node.IS_NAMESPACE);
652:       assertEquals(57, Node.REFLECTED_OBJECT);
653:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
654:       assertEquals(50, Node.FREE_CALL);
655:       assertEquals(52, Node.LENGTH);
656:       assertEquals(2, Node.POST_FLAG);
657:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
658:       assertEquals(39, Node.EMPTY_BLOCK);
659:       assertEquals(47, Node.IS_DISPATCHER);
660:       assertEquals(40, Node.ORIGINALNAME_PROP);
661:       assertEquals(30, Node.VAR_ARGS_NAME);
662:       assertEquals(43, Node.IS_CONSTANT_NAME);
663:       assertEquals(36, Node.QUOTED_PROP);
664:       assertEquals(53, Node.INPUT_ID);
665:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
666:       assertEquals(55, Node.INFERRED_FUNCTION);
667:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
668:       assertEquals(29, Node.JSDOC_INFO_PROP);
669:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
670:       assertEquals(8, Node.FLAG_NO_THROWS);
671:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
672:       assertEquals(56, Node.CHANGE_TIME);
673:       assertEquals(37, Node.OPT_ARG_NAME);
674:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
675:       assertEquals(48, Node.DIRECTIVES);
676:       assertEquals(32, Node.INCRDECR_PROP);
677:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
678:       assertEquals(12, Node.COLUMN_BITS);
679:       assertEquals(4095, Node.COLUMN_MASK);
680:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
681:       assertEquals(53, Node.INPUT_ID);
682:       assertEquals(47, Node.IS_DISPATCHER);
683:       assertEquals(2, Node.POST_FLAG);
684:       assertEquals(12, Node.COLUMN_BITS);
685:       assertEquals(32, Node.INCRDECR_PROP);
686:       assertEquals(46, Node.IS_NAMESPACE);
687:       assertEquals(1, Node.DECR_FLAG);
688:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
689:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
690:       assertEquals(43, Node.IS_CONSTANT_NAME);
691:       assertEquals(54, Node.SLASH_V);
692:       assertEquals(50, Node.FREE_CALL);
693:       assertEquals(51, Node.STATIC_SOURCE_FILE);
694:       assertEquals(57, Node.REFLECTED_OBJECT);
695:       assertEquals(52, Node.LENGTH);
696:       assertEquals(40, Node.ORIGINALNAME_PROP);
697:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
698:       assertEquals(57, Node.LAST_PROP);
699:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
700:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
701:       assertEquals(30, Node.VAR_ARGS_NAME);
702:       assertEquals(55, Node.INFERRED_FUNCTION);
703:       assertEquals(4095, Node.COLUMN_MASK);
704:       assertEquals(48, Node.DIRECTIVES);
705:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
706:       assertEquals(39, Node.EMPTY_BLOCK);
707:       assertEquals(49, Node.DIRECT_EVAL);
708:       assertEquals(37, Node.OPT_ARG_NAME);
709:       assertEquals(15, Node.NO_SIDE_EFFECTS);
710:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
711:       assertEquals(29, Node.JSDOC_INFO_PROP);
712:       assertEquals(8, Node.FLAG_NO_THROWS);
713:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
714:       assertEquals(56, Node.CHANGE_TIME);
715:       assertEquals(36, Node.QUOTED_PROP);
716:       assertEquals(37, Node.OPT_ARG_NAME);
717:       assertEquals(2, Node.POST_FLAG);
718:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
719:       assertEquals(47, Node.IS_DISPATCHER);
720:       assertEquals(32, Node.INCRDECR_PROP);
721:       assertEquals(46, Node.IS_NAMESPACE);
722:       assertEquals(56, Node.CHANGE_TIME);
723:       assertEquals(1, Node.DECR_FLAG);
724:       assertEquals(51, Node.STATIC_SOURCE_FILE);
725:       assertEquals(29, Node.JSDOC_INFO_PROP);
726:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
727:       assertEquals(54, Node.SLASH_V);
728:       assertEquals(53, Node.INPUT_ID);
729:       assertEquals(15, Node.NO_SIDE_EFFECTS);
730:       assertEquals(43, Node.IS_CONSTANT_NAME);
731:       assertEquals(57, Node.LAST_PROP);
732:       assertEquals(40, Node.ORIGINALNAME_PROP);
733:       assertEquals(30, Node.VAR_ARGS_NAME);
734:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
735:       assertEquals(8, Node.FLAG_NO_THROWS);
736:       assertEquals(39, Node.EMPTY_BLOCK);
737:       assertEquals(48, Node.DIRECTIVES);
738:       assertEquals(55, Node.INFERRED_FUNCTION);
739:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
740:       assertEquals(57, Node.REFLECTED_OBJECT);
741:       assertEquals(50, Node.FREE_CALL);
742:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
743:       assertEquals(52, Node.LENGTH);
744:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
745:       assertEquals(36, Node.QUOTED_PROP);
746:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
747:       assertEquals(49, Node.DIRECT_EVAL);
748:       assertEquals(12, Node.COLUMN_BITS);
749:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
750:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
751:       assertEquals(4095, Node.COLUMN_MASK);
752:       assertFalse(node0.equals((Object)node1));
753:       assertFalse(node1.equals((Object)node0));
754:       assertFalse(node2.equals((Object)node0));
755:       
756:       CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
757:       assertNotNull(charArrayWriter0);
758:       assertEquals("", charArrayWriter0.toString());
759:       assertEquals(0, charArrayWriter0.size());
760:       
761:       CharArrayWriter charArrayWriter1 = new CharArrayWriter(53);
762:       assertNotNull(charArrayWriter1);
763:       assertEquals(0, charArrayWriter1.size());
764:       assertEquals("", charArrayWriter1.toString());
765:       assertFalse(charArrayWriter1.equals((Object)charArrayWriter0));
766:       
767:       node1.appendStringTree(charArrayWriter1);
768:       assertSame(node1, node2);
769:       assertNotSame(charArrayWriter1, charArrayWriter0);
770:       assertEquals((-1), node1.getLineno());
771:       assertFalse(node1.isLabel());
772:       assertFalse(node1.isReturn());
773:       assertFalse(node1.isContinue());
774:       assertFalse(node1.isOr());
775:       assertFalse(node1.hasMoreThanOneChild());
776:       assertFalse(node1.isTypeOf());
777:       assertFalse(node1.isDec());
778:       assertFalse(node1.hasChildren());
779:       assertFalse(node1.isNumber());
780:       assertFalse(node1.isWhile());
781:       assertFalse(node1.isNew());
782:       assertFalse(node1.isAssignAdd());
783:       assertFalse(node1.isDo());
784:       assertFalse(node1.isCall());
785:       assertFalse(node1.isAdd());
786:       assertFalse(node1.isBlock());
787:       assertFalse(node1.isAssign());
788:       assertFalse(node1.isGetElem());
789:       assertFalse(node1.isExprResult());
790:       assertFalse(node1.isNull());
791:       assertFalse(node1.isName());
792:       assertEquals(0, node1.getChildCount());
793:       assertFalse(node1.isInstanceOf());
794:       assertFalse(node1.isCatch());
795:       assertFalse(node1.isWith());
796:       assertFalse(node1.isDefaultCase());
797:       assertFalse(node1.isThis());
798:       assertFalse(node1.isScript());
799:       assertFalse(node1.isTry());
800:       assertFalse(node1.isArrayLit());
801:       assertFalse(node1.hasOneChild());
802:       assertFalse(node1.isVar());
803:       assertEquals((-1), node1.getCharno());
804:       assertFalse(node1.isGetterDef());
805:       assertFalse(node1.isStringKey());
806:       assertFalse(node1.isParamList());
807:       assertFalse(node1.isLabelName());
808:       assertFalse(node1.isSwitch());
809:       assertFalse(node1.isIn());
810:       assertFalse(node1.isString());
811:       assertFalse(node1.isEmpty());
812:       assertFalse(node1.isFor());
813:       assertFalse(node1.isInc());
814:       assertFalse(node1.isCase());
815:       assertEquals(29, node1.getType());
816:       assertFalse(node1.isHook());
817:       assertFalse(node1.isRegExp());
818:       assertFalse(node1.isBreak());
819:       assertFalse(node1.isIf());
820:       assertFalse(node1.isNE());
821:       assertFalse(node1.isTrue());
822:       assertFalse(node1.isVoid());
823:       assertFalse(node1.isDelProp());
824:       assertFalse(node1.isComma());
825:       assertFalse(node1.isNot());
826:       assertFalse(node1.isObjectLit());
827:       assertFalse(node1.isSetterDef());
828:       assertFalse(node1.isGetProp());
829:       assertFalse(node1.isThrow());
830:       assertFalse(node1.isCast());
831:       assertFalse(node1.isFalse());
832:       assertFalse(node1.isDebugger());
833:       assertFalse(node1.isFunction());
834:       assertEquals((-1), node1.getSourcePosition());
835:       assertFalse(node1.isAnd());
836:       assertEquals("NEG\n", charArrayWriter1.toString());
837:       assertEquals(4, charArrayWriter1.size());
838:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
839:       assertEquals(53, Node.INPUT_ID);
840:       assertEquals(47, Node.IS_DISPATCHER);
841:       assertEquals(2, Node.POST_FLAG);
842:       assertEquals(12, Node.COLUMN_BITS);
843:       assertEquals(32, Node.INCRDECR_PROP);
844:       assertEquals(46, Node.IS_NAMESPACE);
845:       assertEquals(1, Node.DECR_FLAG);
846:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
847:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
848:       assertEquals(43, Node.IS_CONSTANT_NAME);
849:       assertEquals(54, Node.SLASH_V);
850:       assertEquals(50, Node.FREE_CALL);
851:       assertEquals(51, Node.STATIC_SOURCE_FILE);
852:       assertEquals(57, Node.REFLECTED_OBJECT);
853:       assertEquals(52, Node.LENGTH);
854:       assertEquals(40, Node.ORIGINALNAME_PROP);
855:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
856:       assertEquals(57, Node.LAST_PROP);
857:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
858:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
859:       assertEquals(30, Node.VAR_ARGS_NAME);
860:       assertEquals(55, Node.INFERRED_FUNCTION);
861:       assertEquals(4095, Node.COLUMN_MASK);
862:       assertEquals(48, Node.DIRECTIVES);
863:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
864:       assertEquals(39, Node.EMPTY_BLOCK);
865:       assertEquals(49, Node.DIRECT_EVAL);
866:       assertEquals(37, Node.OPT_ARG_NAME);
867:       assertEquals(15, Node.NO_SIDE_EFFECTS);
868:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
869:       assertEquals(29, Node.JSDOC_INFO_PROP);
870:       assertEquals(8, Node.FLAG_NO_THROWS);
871:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
872:       assertEquals(56, Node.CHANGE_TIME);
873:       assertEquals(36, Node.QUOTED_PROP);
874:       assertFalse(node1.equals((Object)node0));
875:       assertFalse(charArrayWriter1.equals((Object)charArrayWriter0));
876:       
877:       Iterable<Node> iterable0 = node1.children();
878:       assertSame(node1, node2);
879:       assertFalse(iterable0.contains(node1));
880:       assertNotNull(iterable0);
881:       assertEquals((-1), node1.getLineno());
882:       assertFalse(node1.isLabel());
883:       assertFalse(node1.isReturn());
884:       assertFalse(node1.isContinue());
885:       assertFalse(node1.isOr());
886:       assertFalse(node1.hasMoreThanOneChild());
887:       assertFalse(node1.isTypeOf());
888:       assertFalse(node1.isDec());
889:       assertFalse(node1.hasChildren());
890:       assertFalse(node1.isNumber());
891:       assertFalse(node1.isWhile());
892:       assertFalse(node1.isNew());
893:       assertFalse(node1.isAssignAdd());
894:       assertFalse(node1.isDo());
895:       assertFalse(node1.isCall());
896:       assertFalse(node1.isAdd());
897:       assertFalse(node1.isBlock());
898:       assertFalse(node1.isAssign());
899:       assertFalse(node1.isGetElem());
900:       assertFalse(node1.isExprResult());
901:       assertFalse(node1.isNull());
902:       assertFalse(node1.isName());
903:       assertEquals(0, node1.getChildCount());
904:       assertFalse(node1.isInstanceOf());
905:       assertFalse(node1.isCatch());
906:       assertFalse(node1.isWith());
907:       assertFalse(node1.isDefaultCase());
908:       assertFalse(node1.isThis());
909:       assertFalse(node1.isScript());
910:       assertFalse(node1.isTry());
911:       assertFalse(node1.isArrayLit());
912:       assertFalse(node1.hasOneChild());
913:       assertFalse(node1.isVar());
914:       assertEquals((-1), node1.getCharno());
915:       assertFalse(node1.isGetterDef());
916:       assertFalse(node1.isStringKey());
917:       assertFalse(node1.isParamList());
918:       assertFalse(node1.isLabelName());
919:       assertFalse(node1.isSwitch());
920:       assertFalse(node1.isIn());
921:       assertFalse(node1.isString());
922:       assertFalse(node1.isEmpty());
923:       assertFalse(node1.isFor());
924:       assertFalse(node1.isInc());
925:       assertFalse(node1.isCase());
926:       assertEquals(29, node1.getType());
927:       assertFalse(node1.isHook());
928:       assertFalse(node1.isRegExp());
929:       assertFalse(node1.isBreak());
930:       assertFalse(node1.isIf());
931:       assertFalse(node1.isNE());
932:       assertFalse(node1.isTrue());
933:       assertFalse(node1.isVoid());
934:       assertFalse(node1.isDelProp());
935:       assertFalse(node1.isComma());
936:       assertFalse(node1.isNot());
937:       assertFalse(node1.isObjectLit());
938:       assertFalse(node1.isSetterDef());
939:       assertFalse(node1.isGetProp());
940:       assertFalse(node1.isThrow());
941:       assertFalse(node1.isCast());
942:       assertFalse(node1.isFalse());
943:       assertFalse(node1.isDebugger());
944:       assertFalse(node1.isFunction());
945:       assertEquals((-1), node1.getSourcePosition());
946:       assertFalse(node1.isAnd());
947:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
948:       assertEquals(53, Node.INPUT_ID);
949:       assertEquals(47, Node.IS_DISPATCHER);
950:       assertEquals(2, Node.POST_FLAG);
951:       assertEquals(12, Node.COLUMN_BITS);
952:       assertEquals(32, Node.INCRDECR_PROP);
953:       assertEquals(46, Node.IS_NAMESPACE);
954:       assertEquals(1, Node.DECR_FLAG);
955:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
956:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
957:       assertEquals(43, Node.IS_CONSTANT_NAME);
958:       assertEquals(54, Node.SLASH_V);
959:       assertEquals(50, Node.FREE_CALL);
960:       assertEquals(51, Node.STATIC_SOURCE_FILE);
961:       assertEquals(57, Node.REFLECTED_OBJECT);
962:       assertEquals(52, Node.LENGTH);
963:       assertEquals(40, Node.ORIGINALNAME_PROP);
964:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
965:       assertEquals(57, Node.LAST_PROP);
966:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
967:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
968:       assertEquals(30, Node.VAR_ARGS_NAME);
969:       assertEquals(55, Node.INFERRED_FUNCTION);
970:       assertEquals(4095, Node.COLUMN_MASK);
971:       assertEquals(48, Node.DIRECTIVES);
972:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
973:       assertEquals(39, Node.EMPTY_BLOCK);
974:       assertEquals(49, Node.DIRECT_EVAL);
975:       assertEquals(37, Node.OPT_ARG_NAME);
976:       assertEquals(15, Node.NO_SIDE_EFFECTS);
977:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
978:       assertEquals(29, Node.JSDOC_INFO_PROP);
979:       assertEquals(8, Node.FLAG_NO_THROWS);
980:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
981:       assertEquals(56, Node.CHANGE_TIME);
982:       assertEquals(36, Node.QUOTED_PROP);
983:       assertFalse(node1.equals((Object)node0));
984:       
985:       Object object0 = node0.getProp(0);
986:       assertNull(object0);
987:       assertFalse(node0.isNull());
988:       assertFalse(node0.isSetterDef());
989:       assertFalse(node0.isCall());
990:       assertFalse(node0.isName());
991:       assertFalse(node0.isParamList());
992:       assertFalse(node0.isStringKey());
993:       assertFalse(node0.isRegExp());
994:       assertFalse(node0.isDebugger());
995:       assertFalse(node0.isVoid());
996:       assertFalse(node0.isCatch());
997:       assertFalse(node0.hasMoreThanOneChild());
998:       assertEquals((-1464), node0.getType());
999:       assertFalse(node0.isFor());
1000:       assertFalse(node0.isTry());
1001:       assertFalse(node0.isBlock());
1002:       assertFalse(node0.isReturn());
1003:       assertFalse(node0.isWhile());
1004:       assertFalse(node0.isTypeOf());
1005:       assertFalse(node0.isNumber());
1006:       assertFalse(node0.isDelProp());
1007:       assertFalse(node0.hasChildren());
1008:       assertFalse(node0.isGetterDef());
1009:       assertFalse(node0.isDec());
1010:       assertFalse(node0.isAssign());
1011:       assertFalse(node0.isEmpty());
1012:       assertFalse(node0.isOr());
1013:       assertFalse(node0.isGetElem());
1014:       assertFalse(node0.isArrayLit());
1015:       assertFalse(node0.isLabelName());
1016:       assertFalse(node0.isTrue());
1017:       assertFalse(node0.isSwitch());
1018:       assertFalse(node0.isNew());
1019:       assertFalse(node0.isAdd());
1020:       assertFalse(node0.isVar());
1021:       assertEquals(0, node0.getChildCount());
1022:       assertFalse(node0.isLabel());
1023:       assertFalse(node0.isAssignAdd());
1024:       assertFalse(node0.isDo());
1025:       assertFalse(node0.isDefaultCase());
1026:       assertFalse(node0.isThis());
1027:       assertFalse(node0.isBreak());
1028:       assertFalse(node0.isGetProp());
1029:       assertFalse(node0.isComma());
1030:       assertFalse(node0.isFalse());
1031:       assertFalse(node0.isInstanceOf());
1032:       assertFalse(node0.isObjectLit());
1033:       assertFalse(node0.isAnd());
1034:       assertFalse(node0.isScript());
1035:       assertFalse(node0.isExprResult());
1036:       assertEquals((-1), node0.getCharno());
1037:       assertFalse(node0.isNot());
1038:       assertFalse(node0.isWith());
1039:       assertFalse(node0.isString());
1040:       assertFalse(node0.isHook());
1041:       assertFalse(node0.isCase());
1042:       assertFalse(node0.hasOneChild());
1043:       assertFalse(node0.isNE());
1044:       assertEquals((-1), node0.getSourcePosition());
1045:       assertFalse(node0.isIn());
1046:       assertFalse(node0.isCast());
1047:       assertEquals((-1), node0.getLineno());
1048:       assertFalse(node0.isIf());
1049:       assertFalse(node0.isFunction());
1050:       assertFalse(node0.isInc());
1051:       assertFalse(node0.isContinue());
1052:       assertFalse(node0.isThrow());
1053:       assertEquals(54, Node.SLASH_V);
1054:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1055:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1056:       assertEquals(49, Node.DIRECT_EVAL);
1057:       assertEquals(1, Node.DECR_FLAG);
1058:       assertEquals(57, Node.LAST_PROP);
1059:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1060:       assertEquals(46, Node.IS_NAMESPACE);
1061:       assertEquals(57, Node.REFLECTED_OBJECT);
1062:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1063:       assertEquals(50, Node.FREE_CALL);
1064:       assertEquals(52, Node.LENGTH);
1065:       assertEquals(2, Node.POST_FLAG);
1066:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1067:       assertEquals(39, Node.EMPTY_BLOCK);
1068:       assertEquals(47, Node.IS_DISPATCHER);
1069:       assertEquals(40, Node.ORIGINALNAME_PROP);
1070:       assertEquals(30, Node.VAR_ARGS_NAME);
1071:       assertEquals(43, Node.IS_CONSTANT_NAME);
1072:       assertEquals(36, Node.QUOTED_PROP);
1073:       assertEquals(53, Node.INPUT_ID);
1074:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1075:       assertEquals(55, Node.INFERRED_FUNCTION);
1076:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1077:       assertEquals(29, Node.JSDOC_INFO_PROP);
1078:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1079:       assertEquals(8, Node.FLAG_NO_THROWS);
1080:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1081:       assertEquals(56, Node.CHANGE_TIME);
1082:       assertEquals(37, Node.OPT_ARG_NAME);
1083:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1084:       assertEquals(48, Node.DIRECTIVES);
1085:       assertEquals(32, Node.INCRDECR_PROP);
1086:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1087:       assertEquals(12, Node.COLUMN_BITS);
1088:       assertEquals(4095, Node.COLUMN_MASK);
1089:       assertFalse(node0.equals((Object)node2));
1090:       assertFalse(node0.equals((Object)node1));
1091:       
1092:       boolean boolean1 = node1.isOr();
1093:       assertFalse(boolean1);
1094:       assertSame(node1, node2);
1095:       assertEquals((-1), node1.getLineno());
1096:       assertFalse(node1.isLabel());
1097:       assertFalse(node1.isReturn());
1098:       assertFalse(node1.isContinue());
1099:       assertFalse(node1.isOr());
1100:       assertFalse(node1.hasMoreThanOneChild());
1101:       assertFalse(node1.isTypeOf());
1102:       assertFalse(node1.isDec());
1103:       assertFalse(node1.hasChildren());
1104:       assertFalse(node1.isNumber());
1105:       assertFalse(node1.isWhile());
1106:       assertFalse(node1.isNew());
1107:       assertFalse(node1.isAssignAdd());
1108:       assertFalse(node1.isDo());
1109:       assertFalse(node1.isCall());
1110:       assertFalse(node1.isAdd());
1111:       assertFalse(node1.isBlock());
1112:       assertFalse(node1.isAssign());
1113:       assertFalse(node1.isGetElem());
1114:       assertFalse(node1.isExprResult());
1115:       assertFalse(node1.isNull());
1116:       assertFalse(node1.isName());
1117:       assertEquals(0, node1.getChildCount());
1118:       assertFalse(node1.isInstanceOf());
1119:       assertFalse(node1.isCatch());
1120:       assertFalse(node1.isWith());
1121:       assertFalse(node1.isDefaultCase());
1122:       assertFalse(node1.isThis());
1123:       assertFalse(node1.isScript());
1124:       assertFalse(node1.isTry());
1125:       assertFalse(node1.isArrayLit());
1126:       assertFalse(node1.hasOneChild());
1127:       assertFalse(node1.isVar());
1128:       assertEquals((-1), node1.getCharno());
1129:       assertFalse(node1.isGetterDef());
1130:       assertFalse(node1.isStringKey());
1131:       assertFalse(node1.isParamList());
1132:       assertFalse(node1.isLabelName());
1133:       assertFalse(node1.isSwitch());
1134:       assertFalse(node1.isIn());
1135:       assertFalse(node1.isString());
1136:       assertFalse(node1.isEmpty());
1137:       assertFalse(node1.isFor());
1138:       assertFalse(node1.isInc());
1139:       assertFalse(node1.isCase());
1140:       assertEquals(29, node1.getType());
1141:       assertFalse(node1.isHook());
1142:       assertFalse(node1.isRegExp());
1143:       assertFalse(node1.isBreak());
1144:       assertFalse(node1.isIf());
1145:       assertFalse(node1.isNE());
1146:       assertFalse(node1.isTrue());
1147:       assertFalse(node1.isVoid());
1148:       assertFalse(node1.isDelProp());
1149:       assertFalse(node1.isComma());
1150:       assertFalse(node1.isNot());
1151:       assertFalse(node1.isObjectLit());
1152:       assertFalse(node1.isSetterDef());
1153:       assertFalse(node1.isGetProp());
1154:       assertFalse(node1.isThrow());
1155:       assertFalse(node1.isCast());
1156:       assertFalse(node1.isFalse());
1157:       assertFalse(node1.isDebugger());
1158:       assertFalse(node1.isFunction());
1159:       assertEquals((-1), node1.getSourcePosition());
1160:       assertFalse(node1.isAnd());
1161:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1162:       assertEquals(53, Node.INPUT_ID);
1163:       assertEquals(47, Node.IS_DISPATCHER);
1164:       assertEquals(2, Node.POST_FLAG);
1165:       assertEquals(12, Node.COLUMN_BITS);
1166:       assertEquals(32, Node.INCRDECR_PROP);
1167:       assertEquals(46, Node.IS_NAMESPACE);
1168:       assertEquals(1, Node.DECR_FLAG);
1169:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1170:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1171:       assertEquals(43, Node.IS_CONSTANT_NAME);
1172:       assertEquals(54, Node.SLASH_V);
1173:       assertEquals(50, Node.FREE_CALL);
1174:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1175:       assertEquals(57, Node.REFLECTED_OBJECT);
1176:       assertEquals(52, Node.LENGTH);
1177:       assertEquals(40, Node.ORIGINALNAME_PROP);
1178:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1179:       assertEquals(57, Node.LAST_PROP);
1180:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1181:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1182:       assertEquals(30, Node.VAR_ARGS_NAME);
1183:       assertEquals(55, Node.INFERRED_FUNCTION);
1184:       assertEquals(4095, Node.COLUMN_MASK);
1185:       assertEquals(48, Node.DIRECTIVES);
1186:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1187:       assertEquals(39, Node.EMPTY_BLOCK);
1188:       assertEquals(49, Node.DIRECT_EVAL);
1189:       assertEquals(37, Node.OPT_ARG_NAME);
1190:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1191:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1192:       assertEquals(29, Node.JSDOC_INFO_PROP);
1193:       assertEquals(8, Node.FLAG_NO_THROWS);
1194:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1195:       assertEquals(56, Node.CHANGE_TIME);
1196:       assertEquals(36, Node.QUOTED_PROP);
1197:       assertFalse(node1.equals((Object)node0));
1198:       assertFalse(boolean1 == boolean0);
1199:       
1200:       boolean boolean2 = node0.isIn();
1201:       assertFalse(boolean2);
1202:       assertFalse(node0.isNull());
1203:       assertFalse(node0.isSetterDef());
1204:       assertFalse(node0.isCall());
1205:       assertFalse(node0.isName());
1206:       assertFalse(node0.isParamList());
1207:       assertFalse(node0.isStringKey());
1208:       assertFalse(node0.isRegExp());
1209:       assertFalse(node0.isDebugger());
1210:       assertFalse(node0.isVoid());
1211:       assertFalse(node0.isCatch());
1212:       assertFalse(node0.hasMoreThanOneChild());
1213:       assertEquals((-1464), node0.getType());
1214:       assertFalse(node0.isFor());
1215:       assertFalse(node0.isTry());
1216:       assertFalse(node0.isBlock());
1217:       assertFalse(node0.isReturn());
1218:       assertFalse(node0.isWhile());
1219:       assertFalse(node0.isTypeOf());
1220:       assertFalse(node0.isNumber());
1221:       assertFalse(node0.isDelProp());
1222:       assertFalse(node0.hasChildren());
1223:       assertFalse(node0.isGetterDef());
1224:       assertFalse(node0.isDec());
1225:       assertFalse(node0.isAssign());
1226:       assertFalse(node0.isEmpty());
1227:       assertFalse(node0.isOr());
1228:       assertFalse(node0.isGetElem());
1229:       assertFalse(node0.isArrayLit());
1230:       assertFalse(node0.isLabelName());
1231:       assertFalse(node0.isTrue());
1232:       assertFalse(node0.isSwitch());
1233:       assertFalse(node0.isNew());
1234:       assertFalse(node0.isAdd());
1235:       assertFalse(node0.isVar());
1236:       assertEquals(0, node0.getChildCount());
1237:       assertFalse(node0.isLabel());
1238:       assertFalse(node0.isAssignAdd());
1239:       assertFalse(node0.isDo());
1240:       assertFalse(node0.isDefaultCase());
1241:       assertFalse(node0.isThis());
1242:       assertFalse(node0.isBreak());
1243:       assertFalse(node0.isGetProp());
1244:       assertFalse(node0.isComma());
1245:       assertFalse(node0.isFalse());
1246:       assertFalse(node0.isInstanceOf());
1247:       assertFalse(node0.isObjectLit());
1248:       assertFalse(node0.isAnd());
1249:       assertFalse(node0.isScript());
1250:       assertFalse(node0.isExprResult());
1251:       assertEquals((-1), node0.getCharno());
1252:       assertFalse(node0.isNot());
1253:       assertFalse(node0.isWith());
1254:       assertFalse(node0.isString());
1255:       assertFalse(node0.isHook());
1256:       assertFalse(node0.isCase());
1257:       assertFalse(node0.hasOneChild());
1258:       assertFalse(node0.isNE());
1259:       assertEquals((-1), node0.getSourcePosition());
1260:       assertFalse(node0.isIn());
1261:       assertFalse(node0.isCast());
1262:       assertEquals((-1), node0.getLineno());
1263:       assertFalse(node0.isIf());
1264:       assertFalse(node0.isFunction());
1265:       assertFalse(node0.isInc());
1266:       assertFalse(node0.isContinue());
1267:       assertFalse(node0.isThrow());
1268:       assertEquals(54, Node.SLASH_V);
1269:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1271:       assertEquals(49, Node.DIRECT_EVAL);
1272:       assertEquals(1, Node.DECR_FLAG);
1273:       assertEquals(57, Node.LAST_PROP);
1274:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1275:       assertEquals(46, Node.IS_NAMESPACE);
1276:       assertEquals(57, Node.REFLECTED_OBJECT);
1277:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1278:       assertEquals(50, Node.FREE_CALL);
1279:       assertEquals(52, Node.LENGTH);
1280:       assertEquals(2, Node.POST_FLAG);
1281:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1282:       assertEquals(39, Node.EMPTY_BLOCK);
1283:       assertEquals(47, Node.IS_DISPATCHER);
1284:       assertEquals(40, Node.ORIGINALNAME_PROP);
1285:       assertEquals(30, Node.VAR_ARGS_NAME);
1286:       assertEquals(43, Node.IS_CONSTANT_NAME);
1287:       assertEquals(36, Node.QUOTED_PROP);
1288:       assertEquals(53, Node.INPUT_ID);
1289:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1290:       assertEquals(55, Node.INFERRED_FUNCTION);
1291:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1292:       assertEquals(29, Node.JSDOC_INFO_PROP);
1293:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1294:       assertEquals(8, Node.FLAG_NO_THROWS);
1295:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1296:       assertEquals(56, Node.CHANGE_TIME);
1297:       assertEquals(37, Node.OPT_ARG_NAME);
1298:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1299:       assertEquals(48, Node.DIRECTIVES);
1300:       assertEquals(32, Node.INCRDECR_PROP);
1301:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1302:       assertEquals(12, Node.COLUMN_BITS);
1303:       assertEquals(4095, Node.COLUMN_MASK);
1304:       assertFalse(node0.equals((Object)node2));
1305:       assertFalse(node0.equals((Object)node1));
1306:       assertFalse(boolean2 == boolean0);
1307:       assertTrue(boolean2 == boolean1);
1308:   }
1309: }
RegularFileObject[/tmp/EvoSuite_73_1628159273754/com/google/javascript/rhino/Node_73_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:27:53 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_73_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_73_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.common.collect.Iterables",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_73_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.jstype.ArrowType",
322:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
323:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
324:       "com.google.javascript.rhino.jstype.InstanceObjectType",
325:       "com.google.javascript.rhino.jstype.Property",
326:       "com.google.common.collect.Lists",
327:       "com.google.javascript.rhino.jstype.NoObjectType",
328:       "com.google.javascript.rhino.jstype.NoType",
329:       "com.google.javascript.rhino.jstype.NoResolvedType",
330:       "com.google.common.collect.SingletonImmutableList",
331:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
332:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
333:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
334:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
335:       "com.google.javascript.rhino.jstype.UnionType",
336:       "com.google.javascript.rhino.jstype.FunctionBuilder",
337:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.common.base.Objects",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.javascript.rhino.jstype.EnumType",
347:       "com.google.javascript.rhino.jstype.EnumElementType",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.NamedType",
350:       "com.google.common.collect.Sets",
351:       "com.google.javascript.rhino.InputId",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.javascript.rhino.jstype.TernaryValue",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.javascript.rhino.jstype.JSType$2",
363:       "com.google.javascript.rhino.jstype.JSType$TypePair",
364:       "com.google.common.collect.ImmutableList$1",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
367:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
369:       "com.google.common.collect.Platform",
370:       "com.google.javascript.rhino.JSTypeExpression",
371:       "com.google.common.collect.FluentIterable",
372:       "com.google.common.collect.Iterables$2",
373:       "com.google.common.collect.TransformedIterator",
374:       "com.google.common.collect.Iterables$3",
375:       "com.google.common.collect.Iterators$5",
376:       "com.google.common.collect.Iterators$12",
377:       "com.google.javascript.rhino.JSDocInfo$Visibility",
378:       "com.google.javascript.rhino.jstype.NamespaceType",
379:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
380:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
381:     );
382:   }
383: }

[MASTER] 10:27:53.932 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-1464), "Should not happen\n", (-1464), (-1464));
assertNotNull(node0);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1464), node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

node0.setLength((-1279));
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1464), node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

Node node1 = new Node(29, 46, 57);
assertNotNull(node1);
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVar());
assertEquals(57, node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(29, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertEquals(188473, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertEquals(46, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node1.equals((Object)node0));

boolean boolean0 = node1.mayMutateGlobalStateOrThrow();
assertTrue(boolean0);
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVar());
assertEquals(57, node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(29, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertEquals(188473, node1.getSourcePosition());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertEquals(46, node1.getLineno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node1.equals((Object)node0));

Node node2 = node1.srcref(node0);
assertSame(node1, node2);
assertSame(node2, node1);
assertNotNull(node2);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1464), node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(29, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertEquals(29, node2.getType());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isCast());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isBlock());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isParamList());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertFalse(node2.isDo());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));

CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
assertNotNull(charArrayWriter0);
assertEquals("", charArrayWriter0.toString());
assertEquals(0, charArrayWriter0.size());

CharArrayWriter charArrayWriter1 = new CharArrayWriter(53);
assertNotNull(charArrayWriter1);
assertEquals(0, charArrayWriter1.size());
assertEquals("", charArrayWriter1.toString());
assertFalse(charArrayWriter1.equals((Object)charArrayWriter0));

node1.appendStringTree(charArrayWriter1);
assertSame(node1, node2);
assertNotSame(charArrayWriter1, charArrayWriter0);
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(29, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals("NEG\n", charArrayWriter1.toString());
assertEquals(4, charArrayWriter1.size());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(charArrayWriter1.equals((Object)charArrayWriter0));

Iterable<Node> iterable0 = node1.children();
assertSame(node1, node2);
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(29, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node1.equals((Object)node0));

Object object0 = node0.getProp(0);
assertNull(object0);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1464), node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));

boolean boolean1 = node1.isOr();
assertFalse(boolean1);
assertSame(node1, node2);
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isWhile());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isCall());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertEquals(29, node1.getType());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isBreak());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isComma());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);

boolean boolean2 = node0.isIn();
assertFalse(boolean2);
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1464), node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isSwitch());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);


[MASTER] 10:28:02.332 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_121_1628159281917/com/google/javascript/rhino/Node_121_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_121_1628159281917/com/google/javascript/rhino/Node_121_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:02.332 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:02.332 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:02.334 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1065
[MASTER] 10:28:02.337 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_121_1628159281917/com/google/javascript/rhino/Node_121_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:01 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.JSType;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_121_tmp__ESTest extends Node_121_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newNumber((double) (-2107), (-740), 1200);
24:       assertNotNull(node0);
25:       assertFalse(node0.isCatch());
26:       assertFalse(node0.isNull());
27:       assertFalse(node0.isSetterDef());
28:       assertFalse(node0.isTrue());
29:       assertFalse(node0.isParamList());
30:       assertFalse(node0.isDebugger());
31:       assertFalse(node0.isVar());
32:       assertFalse(node0.isArrayLit());
33:       assertFalse(node0.isStringKey());
34:       assertFalse(node0.isAdd());
35:       assertFalse(node0.isEmpty());
36:       assertFalse(node0.isNew());
37:       assertFalse(node0.isDefaultCase());
38:       assertFalse(node0.isFunction());
39:       assertEquals(0, node0.getChildCount());
40:       assertFalse(node0.isContinue());
41:       assertFalse(node0.isAssignAdd());
42:       assertFalse(node0.isDo());
43:       assertTrue(node0.isNumber());
44:       assertFalse(node0.isString());
45:       assertFalse(node0.isOr());
46:       assertEquals((-1), node0.getSourcePosition());
47:       assertFalse(node0.isCall());
48:       assertFalse(node0.isName());
49:       assertFalse(node0.isGetElem());
50:       assertFalse(node0.isDelProp());
51:       assertFalse(node0.isVoid());
52:       assertFalse(node0.isBreak());
53:       assertFalse(node0.isTypeOf());
54:       assertFalse(node0.isExprResult());
55:       assertFalse(node0.isWhile());
56:       assertFalse(node0.isAssign());
57:       assertFalse(node0.isReturn());
58:       assertFalse(node0.hasChildren());
59:       assertFalse(node0.isDec());
60:       assertFalse(node0.isComma());
61:       assertFalse(node0.isAnd());
62:       assertFalse(node0.isInstanceOf());
63:       assertFalse(node0.isGetProp());
64:       assertFalse(node0.isScript());
65:       assertFalse(node0.isNot());
66:       assertFalse(node0.isObjectLit());
67:       assertFalse(node0.isThrow());
68:       assertFalse(node0.isCast());
69:       assertFalse(node0.isLabelName());
70:       assertFalse(node0.isLabel());
71:       assertFalse(node0.isFalse());
72:       assertFalse(node0.hasMoreThanOneChild());
73:       assertFalse(node0.isIn());
74:       assertFalse(node0.isCase());
75:       assertEquals((-1), node0.getLineno());
76:       assertFalse(node0.isNE());
77:       assertFalse(node0.isSwitch());
78:       assertFalse(node0.isInc());
79:       assertFalse(node0.isIf());
80:       assertEquals((-1), node0.getCharno());
81:       assertFalse(node0.isGetterDef());
82:       assertFalse(node0.isHook());
83:       assertFalse(node0.isTry());
84:       assertFalse(node0.hasOneChild());
85:       assertFalse(node0.isRegExp());
86:       assertFalse(node0.isThis());
87:       assertEquals(39, node0.getType());
88:       assertFalse(node0.isFor());
89:       assertFalse(node0.isBlock());
90:       assertFalse(node0.isWith());
91:       assertEquals(52, Node.LENGTH);
92:       assertEquals(50, Node.FREE_CALL);
93:       assertEquals(54, Node.SLASH_V);
94:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
95:       assertEquals(57, Node.REFLECTED_OBJECT);
96:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
97:       assertEquals(57, Node.LAST_PROP);
98:       assertEquals(8, Node.FLAG_NO_THROWS);
99:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
100:       assertEquals(1, Node.DECR_FLAG);
101:       assertEquals(15, Node.NO_SIDE_EFFECTS);
102:       assertEquals(39, Node.EMPTY_BLOCK);
103:       assertEquals(12, Node.COLUMN_BITS);
104:       assertEquals(4095, Node.COLUMN_MASK);
105:       assertEquals(55, Node.INFERRED_FUNCTION);
106:       assertEquals(32, Node.INCRDECR_PROP);
107:       assertEquals(56, Node.CHANGE_TIME);
108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
109:       assertEquals(48, Node.DIRECTIVES);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(37, Node.OPT_ARG_NAME);
112:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
113:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
114:       assertEquals(47, Node.IS_DISPATCHER);
115:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
116:       assertEquals(36, Node.QUOTED_PROP);
117:       assertEquals(29, Node.JSDOC_INFO_PROP);
118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
119:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
120:       assertEquals(53, Node.INPUT_ID);
121:       assertEquals(51, Node.STATIC_SOURCE_FILE);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertEquals(46, Node.IS_NAMESPACE);
124:       assertEquals(2, Node.POST_FLAG);
125:       assertEquals(43, Node.IS_CONSTANT_NAME);
126:       assertEquals(40, Node.ORIGINALNAME_PROP);
127:       
128:       int int0 = (-1014);
129:       Node node1 = new Node(1200, node0, (-1014), 0);
130:       assertNotNull(node1);
131:       assertFalse(node0.isCatch());
132:       assertFalse(node0.isNull());
133:       assertFalse(node0.isSetterDef());
134:       assertFalse(node0.isTrue());
135:       assertFalse(node0.isParamList());
136:       assertFalse(node0.isDebugger());
137:       assertFalse(node0.isVar());
138:       assertFalse(node0.isArrayLit());
139:       assertFalse(node0.isStringKey());
140:       assertFalse(node0.isAdd());
141:       assertFalse(node0.isEmpty());
142:       assertFalse(node0.isNew());
143:       assertFalse(node0.isDefaultCase());
144:       assertFalse(node0.isFunction());
145:       assertEquals(0, node0.getChildCount());
146:       assertFalse(node0.isContinue());
147:       assertFalse(node0.isAssignAdd());
148:       assertFalse(node0.isDo());
149:       assertTrue(node0.isNumber());
150:       assertFalse(node0.isString());
151:       assertFalse(node0.isOr());
152:       assertEquals((-1), node0.getSourcePosition());
153:       assertFalse(node0.isCall());
154:       assertFalse(node0.isName());
155:       assertFalse(node0.isGetElem());
156:       assertFalse(node0.isDelProp());
157:       assertFalse(node0.isVoid());
158:       assertFalse(node0.isBreak());
159:       assertFalse(node0.isTypeOf());
160:       assertFalse(node0.isExprResult());
161:       assertFalse(node0.isWhile());
162:       assertFalse(node0.isAssign());
163:       assertFalse(node0.isReturn());
164:       assertFalse(node0.hasChildren());
165:       assertFalse(node0.isDec());
166:       assertFalse(node0.isComma());
167:       assertFalse(node0.isAnd());
168:       assertFalse(node0.isInstanceOf());
169:       assertFalse(node0.isGetProp());
170:       assertFalse(node0.isScript());
171:       assertFalse(node0.isNot());
172:       assertFalse(node0.isObjectLit());
173:       assertFalse(node0.isThrow());
174:       assertFalse(node0.isCast());
175:       assertFalse(node0.isLabelName());
176:       assertFalse(node0.isLabel());
177:       assertFalse(node0.isFalse());
178:       assertFalse(node0.hasMoreThanOneChild());
179:       assertFalse(node0.isIn());
180:       assertFalse(node0.isCase());
181:       assertEquals((-1), node0.getLineno());
182:       assertFalse(node0.isNE());
183:       assertFalse(node0.isSwitch());
184:       assertFalse(node0.isInc());
185:       assertFalse(node0.isIf());
186:       assertEquals((-1), node0.getCharno());
187:       assertFalse(node0.isGetterDef());
188:       assertFalse(node0.isHook());
189:       assertFalse(node0.isTry());
190:       assertFalse(node0.hasOneChild());
191:       assertFalse(node0.isRegExp());
192:       assertFalse(node0.isThis());
193:       assertEquals(39, node0.getType());
194:       assertFalse(node0.isFor());
195:       assertFalse(node0.isBlock());
196:       assertFalse(node0.isWith());
197:       assertFalse(node1.isHook());
198:       assertFalse(node1.isSwitch());
199:       assertFalse(node1.isInc());
200:       assertFalse(node1.isBreak());
201:       assertFalse(node1.isThrow());
202:       assertFalse(node1.isComma());
203:       assertFalse(node1.isThis());
204:       assertFalse(node1.isFalse());
205:       assertFalse(node1.isIn());
206:       assertFalse(node1.isInstanceOf());
207:       assertTrue(node1.hasChildren());
208:       assertFalse(node1.isDelProp());
209:       assertFalse(node1.isIf());
210:       assertFalse(node1.isEmpty());
211:       assertFalse(node1.isNE());
212:       assertFalse(node1.isArrayLit());
213:       assertFalse(node1.isDefaultCase());
214:       assertFalse(node1.isLabelName());
215:       assertFalse(node1.isTry());
216:       assertFalse(node1.isWith());
217:       assertFalse(node1.isFor());
218:       assertFalse(node1.isCatch());
219:       assertFalse(node1.isRegExp());
220:       assertEquals(1, node1.getChildCount());
221:       assertFalse(node1.isParamList());
222:       assertFalse(node1.isCase());
223:       assertFalse(node1.isStringKey());
224:       assertFalse(node1.isScript());
225:       assertEquals((-1), node1.getCharno());
226:       assertFalse(node1.isNumber());
227:       assertFalse(node1.isGetterDef());
228:       assertFalse(node1.isBlock());
229:       assertFalse(node1.isAdd());
230:       assertFalse(node1.isVar());
231:       assertFalse(node1.isNew());
232:       assertFalse(node1.isName());
233:       assertFalse(node1.isWhile());
234:       assertFalse(node1.isCall());
235:       assertFalse(node1.hasMoreThanOneChild());
236:       assertFalse(node1.isContinue());
237:       assertEquals((-1), node1.getLineno());
238:       assertFalse(node1.isLabel());
239:       assertFalse(node1.isAssignAdd());
240:       assertEquals(1200, node1.getType());
241:       assertFalse(node1.isSetterDef());
242:       assertFalse(node1.isDo());
243:       assertFalse(node1.isNull());
244:       assertFalse(node1.isOr());
245:       assertFalse(node1.isExprResult());
246:       assertFalse(node1.isTrue());
247:       assertFalse(node1.isVoid());
248:       assertTrue(node1.hasOneChild());
249:       assertFalse(node1.isGetElem());
250:       assertFalse(node1.isCast());
251:       assertFalse(node1.isFunction());
252:       assertFalse(node1.isDec());
253:       assertFalse(node1.isAssign());
254:       assertFalse(node1.isTypeOf());
255:       assertFalse(node1.isReturn());
256:       assertFalse(node1.isGetProp());
257:       assertFalse(node1.isAnd());
258:       assertFalse(node1.isString());
259:       assertFalse(node1.isDebugger());
260:       assertEquals((-1), node1.getSourcePosition());
261:       assertFalse(node1.isObjectLit());
262:       assertFalse(node1.isNot());
263:       assertEquals(52, Node.LENGTH);
264:       assertEquals(50, Node.FREE_CALL);
265:       assertEquals(54, Node.SLASH_V);
266:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
267:       assertEquals(57, Node.REFLECTED_OBJECT);
268:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
269:       assertEquals(57, Node.LAST_PROP);
270:       assertEquals(8, Node.FLAG_NO_THROWS);
271:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
272:       assertEquals(1, Node.DECR_FLAG);
273:       assertEquals(15, Node.NO_SIDE_EFFECTS);
274:       assertEquals(39, Node.EMPTY_BLOCK);
275:       assertEquals(12, Node.COLUMN_BITS);
276:       assertEquals(4095, Node.COLUMN_MASK);
277:       assertEquals(55, Node.INFERRED_FUNCTION);
278:       assertEquals(32, Node.INCRDECR_PROP);
279:       assertEquals(56, Node.CHANGE_TIME);
280:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
281:       assertEquals(48, Node.DIRECTIVES);
282:       assertEquals(49, Node.DIRECT_EVAL);
283:       assertEquals(37, Node.OPT_ARG_NAME);
284:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
286:       assertEquals(47, Node.IS_DISPATCHER);
287:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
288:       assertEquals(36, Node.QUOTED_PROP);
289:       assertEquals(29, Node.JSDOC_INFO_PROP);
290:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
291:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
292:       assertEquals(53, Node.INPUT_ID);
293:       assertEquals(51, Node.STATIC_SOURCE_FILE);
294:       assertEquals(30, Node.VAR_ARGS_NAME);
295:       assertEquals(46, Node.IS_NAMESPACE);
296:       assertEquals(2, Node.POST_FLAG);
297:       assertEquals(43, Node.IS_CONSTANT_NAME);
298:       assertEquals(40, Node.ORIGINALNAME_PROP);
299:       assertEquals(32, Node.INCRDECR_PROP);
300:       assertEquals(46, Node.IS_NAMESPACE);
301:       assertEquals(2, Node.POST_FLAG);
302:       assertEquals(12, Node.COLUMN_BITS);
303:       assertEquals(51, Node.STATIC_SOURCE_FILE);
304:       assertEquals(47, Node.IS_DISPATCHER);
305:       assertEquals(30, Node.VAR_ARGS_NAME);
306:       assertEquals(49, Node.DIRECT_EVAL);
307:       assertEquals(56, Node.CHANGE_TIME);
308:       assertEquals(37, Node.OPT_ARG_NAME);
309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
310:       assertEquals(54, Node.SLASH_V);
311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
312:       assertEquals(50, Node.FREE_CALL);
313:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
314:       assertEquals(1, Node.DECR_FLAG);
315:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
316:       assertEquals(4095, Node.COLUMN_MASK);
317:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
318:       assertEquals(8, Node.FLAG_NO_THROWS);
319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
320:       assertEquals(43, Node.IS_CONSTANT_NAME);
321:       assertEquals(40, Node.ORIGINALNAME_PROP);
322:       assertEquals(48, Node.DIRECTIVES);
323:       assertEquals(52, Node.LENGTH);
324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
325:       assertEquals(36, Node.QUOTED_PROP);
326:       assertEquals(57, Node.REFLECTED_OBJECT);
327:       assertEquals(29, Node.JSDOC_INFO_PROP);
328:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
329:       assertEquals(57, Node.LAST_PROP);
330:       assertEquals(55, Node.INFERRED_FUNCTION);
331:       assertEquals(39, Node.EMPTY_BLOCK);
332:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
333:       assertEquals(15, Node.NO_SIDE_EFFECTS);
334:       assertEquals(53, Node.INPUT_ID);
335:       
336:       Node node2 = new Node((-2107), node1, node1, 42, 46);
337:       assertNotNull(node2);
338:       assertFalse(node0.isCatch());
339:       assertFalse(node0.isNull());
340:       assertFalse(node0.isSetterDef());
341:       assertFalse(node0.isTrue());
342:       assertFalse(node0.isParamList());
343:       assertFalse(node0.isDebugger());
344:       assertFalse(node0.isVar());
345:       assertFalse(node0.isArrayLit());
346:       assertFalse(node0.isStringKey());
347:       assertFalse(node0.isAdd());
348:       assertFalse(node0.isEmpty());
349:       assertFalse(node0.isNew());
350:       assertFalse(node0.isDefaultCase());
351:       assertFalse(node0.isFunction());
352:       assertEquals(0, node0.getChildCount());
353:       assertFalse(node0.isContinue());
354:       assertFalse(node0.isAssignAdd());
355:       assertFalse(node0.isDo());
356:       assertTrue(node0.isNumber());
357:       assertFalse(node0.isString());
358:       assertFalse(node0.isOr());
359:       assertEquals((-1), node0.getSourcePosition());
360:       assertFalse(node0.isCall());
361:       assertFalse(node0.isName());
362:       assertFalse(node0.isGetElem());
363:       assertFalse(node0.isDelProp());
364:       assertFalse(node0.isVoid());
365:       assertFalse(node0.isBreak());
366:       assertFalse(node0.isTypeOf());
367:       assertFalse(node0.isExprResult());
368:       assertFalse(node0.isWhile());
369:       assertFalse(node0.isAssign());
370:       assertFalse(node0.isReturn());
371:       assertFalse(node0.hasChildren());
372:       assertFalse(node0.isDec());
373:       assertFalse(node0.isComma());
374:       assertFalse(node0.isAnd());
375:       assertFalse(node0.isInstanceOf());
376:       assertFalse(node0.isGetProp());
377:       assertFalse(node0.isScript());
378:       assertFalse(node0.isNot());
379:       assertFalse(node0.isObjectLit());
380:       assertFalse(node0.isThrow());
381:       assertFalse(node0.isCast());
382:       assertFalse(node0.isLabelName());
383:       assertFalse(node0.isLabel());
384:       assertFalse(node0.isFalse());
385:       assertFalse(node0.hasMoreThanOneChild());
386:       assertFalse(node0.isIn());
387:       assertFalse(node0.isCase());
388:       assertEquals((-1), node0.getLineno());
389:       assertFalse(node0.isNE());
390:       assertFalse(node0.isSwitch());
391:       assertFalse(node0.isInc());
392:       assertFalse(node0.isIf());
393:       assertEquals((-1), node0.getCharno());
394:       assertFalse(node0.isGetterDef());
395:       assertFalse(node0.isHook());
396:       assertFalse(node0.isTry());
397:       assertFalse(node0.hasOneChild());
398:       assertFalse(node0.isRegExp());
399:       assertFalse(node0.isThis());
400:       assertEquals(39, node0.getType());
401:       assertFalse(node0.isFor());
402:       assertFalse(node0.isBlock());
403:       assertFalse(node0.isWith());
404:       assertFalse(node1.isHook());
405:       assertFalse(node1.isSwitch());
406:       assertFalse(node1.isInc());
407:       assertFalse(node1.isBreak());
408:       assertFalse(node1.isThrow());
409:       assertFalse(node1.isComma());
410:       assertFalse(node1.isThis());
411:       assertFalse(node1.isFalse());
412:       assertFalse(node1.isIn());
413:       assertFalse(node1.isInstanceOf());
414:       assertTrue(node1.hasChildren());
415:       assertFalse(node1.isDelProp());
416:       assertFalse(node1.isIf());
417:       assertFalse(node1.isEmpty());
418:       assertFalse(node1.isNE());
419:       assertFalse(node1.isArrayLit());
420:       assertFalse(node1.isDefaultCase());
421:       assertFalse(node1.isLabelName());
422:       assertFalse(node1.isTry());
423:       assertFalse(node1.isWith());
424:       assertFalse(node1.isFor());
425:       assertFalse(node1.isCatch());
426:       assertFalse(node1.isRegExp());
427:       assertEquals(1, node1.getChildCount());
428:       assertFalse(node1.isParamList());
429:       assertFalse(node1.isCase());
430:       assertFalse(node1.isStringKey());
431:       assertFalse(node1.isScript());
432:       assertEquals((-1), node1.getCharno());
433:       assertFalse(node1.isNumber());
434:       assertFalse(node1.isGetterDef());
435:       assertFalse(node1.isBlock());
436:       assertFalse(node1.isAdd());
437:       assertFalse(node1.isVar());
438:       assertFalse(node1.isNew());
439:       assertFalse(node1.isName());
440:       assertFalse(node1.isWhile());
441:       assertFalse(node1.isCall());
442:       assertFalse(node1.hasMoreThanOneChild());
443:       assertFalse(node1.isContinue());
444:       assertEquals((-1), node1.getLineno());
445:       assertFalse(node1.isLabel());
446:       assertFalse(node1.isAssignAdd());
447:       assertEquals(1200, node1.getType());
448:       assertFalse(node1.isSetterDef());
449:       assertFalse(node1.isDo());
450:       assertFalse(node1.isNull());
451:       assertFalse(node1.isOr());
452:       assertFalse(node1.isExprResult());
453:       assertFalse(node1.isTrue());
454:       assertFalse(node1.isVoid());
455:       assertTrue(node1.hasOneChild());
456:       assertFalse(node1.isGetElem());
457:       assertFalse(node1.isCast());
458:       assertFalse(node1.isFunction());
459:       assertFalse(node1.isDec());
460:       assertFalse(node1.isAssign());
461:       assertFalse(node1.isTypeOf());
462:       assertFalse(node1.isReturn());
463:       assertFalse(node1.isGetProp());
464:       assertFalse(node1.isAnd());
465:       assertFalse(node1.isString());
466:       assertFalse(node1.isDebugger());
467:       assertEquals((-1), node1.getSourcePosition());
468:       assertFalse(node1.isObjectLit());
469:       assertFalse(node1.isNot());
470:       assertFalse(node2.isDo());
471:       assertFalse(node2.isNew());
472:       assertFalse(node2.isContinue());
473:       assertFalse(node2.isAdd());
474:       assertFalse(node2.hasMoreThanOneChild());
475:       assertFalse(node2.isBlock());
476:       assertEquals(46, node2.getCharno());
477:       assertFalse(node2.isLabel());
478:       assertFalse(node2.isAssignAdd());
479:       assertFalse(node2.isWhile());
480:       assertFalse(node2.isReturn());
481:       assertFalse(node2.isVar());
482:       assertFalse(node2.isNumber());
483:       assertFalse(node2.isLabelName());
484:       assertFalse(node2.isCast());
485:       assertFalse(node2.isStringKey());
486:       assertFalse(node2.isParamList());
487:       assertEquals((-2107), node2.getType());
488:       assertFalse(node2.isFunction());
489:       assertFalse(node2.isWith());
490:       assertFalse(node2.isRegExp());
491:       assertFalse(node2.isCatch());
492:       assertFalse(node2.isScript());
493:       assertFalse(node2.isInstanceOf());
494:       assertFalse(node2.isTry());
495:       assertFalse(node2.isThis());
496:       assertFalse(node2.isFor());
497:       assertFalse(node2.isIf());
498:       assertFalse(node2.isSetterDef());
499:       assertTrue(node2.hasChildren());
500:       assertFalse(node2.isIn());
501:       assertFalse(node2.isNE());
502:       assertFalse(node2.isSwitch());
503:       assertFalse(node2.isCase());
504:       assertFalse(node2.isString());
505:       assertFalse(node2.isInc());
506:       assertFalse(node2.isHook());
507:       assertEquals(1, node2.getChildCount());
508:       assertFalse(node2.isThrow());
509:       assertEquals(172078, node2.getSourcePosition());
510:       assertFalse(node2.isGetterDef());
511:       assertFalse(node2.isFalse());
512:       assertFalse(node2.isGetProp());
513:       assertFalse(node2.isArrayLit());
514:       assertFalse(node2.isObjectLit());
515:       assertFalse(node2.isDebugger());
516:       assertFalse(node2.isAnd());
517:       assertFalse(node2.isDefaultCase());
518:       assertFalse(node2.isVoid());
519:       assertFalse(node2.isNot());
520:       assertFalse(node2.isExprResult());
521:       assertTrue(node2.hasOneChild());
522:       assertEquals(42, node2.getLineno());
523:       assertFalse(node2.isDec());
524:       assertFalse(node2.isTypeOf());
525:       assertFalse(node2.isNull());
526:       assertFalse(node2.isBreak());
527:       assertFalse(node2.isComma());
528:       assertFalse(node2.isDelProp());
529:       assertFalse(node2.isAssign());
530:       assertFalse(node2.isGetElem());
531:       assertFalse(node2.isCall());
532:       assertFalse(node2.isEmpty());
533:       assertFalse(node2.isOr());
534:       assertFalse(node2.isName());
535:       assertFalse(node2.isTrue());
536:       assertEquals(52, Node.LENGTH);
537:       assertEquals(50, Node.FREE_CALL);
538:       assertEquals(54, Node.SLASH_V);
539:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
540:       assertEquals(57, Node.REFLECTED_OBJECT);
541:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
542:       assertEquals(57, Node.LAST_PROP);
543:       assertEquals(8, Node.FLAG_NO_THROWS);
544:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
545:       assertEquals(1, Node.DECR_FLAG);
546:       assertEquals(15, Node.NO_SIDE_EFFECTS);
547:       assertEquals(39, Node.EMPTY_BLOCK);
548:       assertEquals(12, Node.COLUMN_BITS);
549:       assertEquals(4095, Node.COLUMN_MASK);
550:       assertEquals(55, Node.INFERRED_FUNCTION);
551:       assertEquals(32, Node.INCRDECR_PROP);
552:       assertEquals(56, Node.CHANGE_TIME);
553:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
554:       assertEquals(48, Node.DIRECTIVES);
555:       assertEquals(49, Node.DIRECT_EVAL);
556:       assertEquals(37, Node.OPT_ARG_NAME);
557:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
558:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
559:       assertEquals(47, Node.IS_DISPATCHER);
560:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
561:       assertEquals(36, Node.QUOTED_PROP);
562:       assertEquals(29, Node.JSDOC_INFO_PROP);
563:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
564:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
565:       assertEquals(53, Node.INPUT_ID);
566:       assertEquals(51, Node.STATIC_SOURCE_FILE);
567:       assertEquals(30, Node.VAR_ARGS_NAME);
568:       assertEquals(46, Node.IS_NAMESPACE);
569:       assertEquals(2, Node.POST_FLAG);
570:       assertEquals(43, Node.IS_CONSTANT_NAME);
571:       assertEquals(40, Node.ORIGINALNAME_PROP);
572:       assertEquals(32, Node.INCRDECR_PROP);
573:       assertEquals(46, Node.IS_NAMESPACE);
574:       assertEquals(2, Node.POST_FLAG);
575:       assertEquals(12, Node.COLUMN_BITS);
576:       assertEquals(51, Node.STATIC_SOURCE_FILE);
577:       assertEquals(47, Node.IS_DISPATCHER);
578:       assertEquals(30, Node.VAR_ARGS_NAME);
579:       assertEquals(49, Node.DIRECT_EVAL);
580:       assertEquals(56, Node.CHANGE_TIME);
581:       assertEquals(37, Node.OPT_ARG_NAME);
582:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
583:       assertEquals(54, Node.SLASH_V);
584:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
585:       assertEquals(50, Node.FREE_CALL);
586:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
587:       assertEquals(1, Node.DECR_FLAG);
588:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
589:       assertEquals(4095, Node.COLUMN_MASK);
590:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
591:       assertEquals(8, Node.FLAG_NO_THROWS);
592:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
593:       assertEquals(43, Node.IS_CONSTANT_NAME);
594:       assertEquals(40, Node.ORIGINALNAME_PROP);
595:       assertEquals(48, Node.DIRECTIVES);
596:       assertEquals(52, Node.LENGTH);
597:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
598:       assertEquals(36, Node.QUOTED_PROP);
599:       assertEquals(57, Node.REFLECTED_OBJECT);
600:       assertEquals(29, Node.JSDOC_INFO_PROP);
601:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
602:       assertEquals(57, Node.LAST_PROP);
603:       assertEquals(55, Node.INFERRED_FUNCTION);
604:       assertEquals(39, Node.EMPTY_BLOCK);
605:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
606:       assertEquals(15, Node.NO_SIDE_EFFECTS);
607:       assertEquals(53, Node.INPUT_ID);
608:       assertEquals(56, Node.CHANGE_TIME);
609:       assertEquals(2, Node.POST_FLAG);
610:       assertEquals(37, Node.OPT_ARG_NAME);
611:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
612:       assertEquals(47, Node.IS_DISPATCHER);
613:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
614:       assertEquals(12, Node.COLUMN_BITS);
615:       assertEquals(30, Node.VAR_ARGS_NAME);
616:       assertEquals(15, Node.NO_SIDE_EFFECTS);
617:       assertEquals(36, Node.QUOTED_PROP);
618:       assertEquals(49, Node.DIRECT_EVAL);
619:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
620:       assertEquals(57, Node.LAST_PROP);
621:       assertEquals(57, Node.REFLECTED_OBJECT);
622:       assertEquals(55, Node.INFERRED_FUNCTION);
623:       assertEquals(53, Node.INPUT_ID);
624:       assertEquals(29, Node.JSDOC_INFO_PROP);
625:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
626:       assertEquals(8, Node.FLAG_NO_THROWS);
627:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
628:       assertEquals(52, Node.LENGTH);
629:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
630:       assertEquals(39, Node.EMPTY_BLOCK);
631:       assertEquals(48, Node.DIRECTIVES);
632:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
633:       assertEquals(40, Node.ORIGINALNAME_PROP);
634:       assertEquals(4095, Node.COLUMN_MASK);
635:       assertEquals(43, Node.IS_CONSTANT_NAME);
636:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
637:       assertEquals(1, Node.DECR_FLAG);
638:       assertEquals(54, Node.SLASH_V);
639:       assertEquals(51, Node.STATIC_SOURCE_FILE);
640:       assertEquals(32, Node.INCRDECR_PROP);
641:       assertEquals(46, Node.IS_NAMESPACE);
642:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
643:       assertEquals(50, Node.FREE_CALL);
644:       
645:       Node node3 = node0.copyInformationFromForTree(node2);
646:       assertSame(node0, node3);
647:       assertNotSame(node1, node2);
648:       assertNotSame(node2, node1);
649:       assertSame(node3, node0);
650:       assertNotNull(node3);
651:       assertFalse(node0.isCatch());
652:       assertFalse(node0.isNull());
653:       assertFalse(node0.isSetterDef());
654:       assertFalse(node0.isTrue());
655:       assertFalse(node0.isParamList());
656:       assertFalse(node0.isDebugger());
657:       assertFalse(node0.isVar());
658:       assertFalse(node0.isArrayLit());
659:       assertFalse(node0.isStringKey());
660:       assertFalse(node0.isAdd());
661:       assertFalse(node0.isEmpty());
662:       assertFalse(node0.isNew());
663:       assertFalse(node0.isDefaultCase());
664:       assertFalse(node0.isFunction());
665:       assertEquals(0, node0.getChildCount());
666:       assertFalse(node0.isContinue());
667:       assertFalse(node0.isAssignAdd());
668:       assertFalse(node0.isDo());
669:       assertTrue(node0.isNumber());
670:       assertFalse(node0.isString());
671:       assertFalse(node0.isOr());
672:       assertFalse(node0.isCall());
673:       assertEquals(42, node0.getLineno());
674:       assertFalse(node0.isName());
675:       assertFalse(node0.isGetElem());
676:       assertFalse(node0.isDelProp());
677:       assertFalse(node0.isVoid());
678:       assertFalse(node0.isBreak());
679:       assertFalse(node0.isTypeOf());
680:       assertFalse(node0.isExprResult());
681:       assertFalse(node0.isWhile());
682:       assertFalse(node0.isAssign());
683:       assertFalse(node0.isReturn());
684:       assertFalse(node0.hasChildren());
685:       assertFalse(node0.isDec());
686:       assertFalse(node0.isComma());
687:       assertFalse(node0.isAnd());
688:       assertFalse(node0.isInstanceOf());
689:       assertFalse(node0.isGetProp());
690:       assertFalse(node0.isScript());
691:       assertEquals(172078, node0.getSourcePosition());
692:       assertFalse(node0.isNot());
693:       assertFalse(node0.isObjectLit());
694:       assertFalse(node0.isThrow());
695:       assertFalse(node0.isCast());
696:       assertFalse(node0.isLabelName());
697:       assertFalse(node0.isLabel());
698:       assertFalse(node0.isFalse());
699:       assertEquals(46, node0.getCharno());
700:       assertFalse(node0.hasMoreThanOneChild());
701:       assertFalse(node0.isIn());
702:       assertFalse(node0.isCase());
703:       assertFalse(node0.isNE());
704:       assertFalse(node0.isSwitch());
705:       assertFalse(node0.isInc());
706:       assertFalse(node0.isIf());
707:       assertFalse(node0.isGetterDef());
708:       assertFalse(node0.isHook());
709:       assertFalse(node0.isTry());
710:       assertFalse(node0.hasOneChild());
711:       assertFalse(node0.isRegExp());
712:       assertFalse(node0.isThis());
713:       assertEquals(39, node0.getType());
714:       assertFalse(node0.isFor());
715:       assertFalse(node0.isBlock());
716:       assertFalse(node0.isWith());
717:       assertFalse(node1.isHook());
718:       assertFalse(node1.isSwitch());
719:       assertFalse(node1.isInc());
720:       assertFalse(node1.isBreak());
721:       assertFalse(node1.isThrow());
722:       assertFalse(node1.isComma());
723:       assertFalse(node1.isThis());
724:       assertFalse(node1.isFalse());
725:       assertFalse(node1.isIn());
726:       assertFalse(node1.isInstanceOf());
727:       assertTrue(node1.hasChildren());
728:       assertFalse(node1.isDelProp());
729:       assertFalse(node1.isIf());
730:       assertFalse(node1.isEmpty());
731:       assertFalse(node1.isNE());
732:       assertFalse(node1.isArrayLit());
733:       assertFalse(node1.isDefaultCase());
734:       assertFalse(node1.isLabelName());
735:       assertFalse(node1.isTry());
736:       assertFalse(node1.isWith());
737:       assertFalse(node1.isFor());
738:       assertFalse(node1.isCatch());
739:       assertFalse(node1.isRegExp());
740:       assertEquals(1, node1.getChildCount());
741:       assertFalse(node1.isParamList());
742:       assertFalse(node1.isCase());
743:       assertFalse(node1.isStringKey());
744:       assertFalse(node1.isScript());
745:       assertEquals((-1), node1.getCharno());
746:       assertFalse(node1.isNumber());
747:       assertFalse(node1.isGetterDef());
748:       assertFalse(node1.isBlock());
749:       assertFalse(node1.isAdd());
750:       assertFalse(node1.isVar());
751:       assertFalse(node1.isNew());
752:       assertFalse(node1.isName());
753:       assertFalse(node1.isWhile());
754:       assertFalse(node1.isCall());
755:       assertFalse(node1.hasMoreThanOneChild());
756:       assertFalse(node1.isContinue());
757:       assertEquals((-1), node1.getLineno());
758:       assertFalse(node1.isLabel());
759:       assertFalse(node1.isAssignAdd());
760:       assertEquals(1200, node1.getType());
761:       assertFalse(node1.isSetterDef());
762:       assertFalse(node1.isDo());
763:       assertFalse(node1.isNull());
764:       assertFalse(node1.isOr());
765:       assertFalse(node1.isExprResult());
766:       assertFalse(node1.isTrue());
767:       assertFalse(node1.isVoid());
768:       assertTrue(node1.hasOneChild());
769:       assertFalse(node1.isGetElem());
770:       assertFalse(node1.isCast());
771:       assertFalse(node1.isFunction());
772:       assertFalse(node1.isDec());
773:       assertFalse(node1.isAssign());
774:       assertFalse(node1.isTypeOf());
775:       assertFalse(node1.isReturn());
776:       assertFalse(node1.isGetProp());
777:       assertFalse(node1.isAnd());
778:       assertFalse(node1.isString());
779:       assertFalse(node1.isDebugger());
780:       assertEquals((-1), node1.getSourcePosition());
781:       assertFalse(node1.isObjectLit());
782:       assertFalse(node1.isNot());
783:       assertFalse(node2.isDo());
784:       assertFalse(node2.isNew());
785:       assertFalse(node2.isContinue());
786:       assertFalse(node2.isAdd());
787:       assertFalse(node2.hasMoreThanOneChild());
788:       assertFalse(node2.isBlock());
789:       assertEquals(46, node2.getCharno());
790:       assertFalse(node2.isLabel());
791:       assertFalse(node2.isAssignAdd());
792:       assertFalse(node2.isWhile());
793:       assertFalse(node2.isReturn());
794:       assertFalse(node2.isVar());
795:       assertFalse(node2.isNumber());
796:       assertFalse(node2.isLabelName());
797:       assertFalse(node2.isCast());
798:       assertFalse(node2.isStringKey());
799:       assertFalse(node2.isParamList());
800:       assertEquals((-2107), node2.getType());
801:       assertFalse(node2.isFunction());
802:       assertFalse(node2.isWith());
803:       assertFalse(node2.isRegExp());
804:       assertFalse(node2.isCatch());
805:       assertFalse(node2.isScript());
806:       assertFalse(node2.isInstanceOf());
807:       assertFalse(node2.isTry());
808:       assertFalse(node2.isThis());
809:       assertFalse(node2.isFor());
810:       assertFalse(node2.isIf());
811:       assertFalse(node2.isSetterDef());
812:       assertTrue(node2.hasChildren());
813:       assertFalse(node2.isIn());
814:       assertFalse(node2.isNE());
815:       assertFalse(node2.isSwitch());
816:       assertFalse(node2.isCase());
817:       assertFalse(node2.isString());
818:       assertFalse(node2.isInc());
819:       assertFalse(node2.isHook());
820:       assertEquals(1, node2.getChildCount());
821:       assertFalse(node2.isThrow());
822:       assertEquals(172078, node2.getSourcePosition());
823:       assertFalse(node2.isGetterDef());
824:       assertFalse(node2.isFalse());
825:       assertFalse(node2.isGetProp());
826:       assertFalse(node2.isArrayLit());
827:       assertFalse(node2.isObjectLit());
828:       assertFalse(node2.isDebugger());
829:       assertFalse(node2.isAnd());
830:       assertFalse(node2.isDefaultCase());
831:       assertFalse(node2.isVoid());
832:       assertFalse(node2.isNot());
833:       assertFalse(node2.isExprResult());
834:       assertTrue(node2.hasOneChild());
835:       assertEquals(42, node2.getLineno());
836:       assertFalse(node2.isDec());
837:       assertFalse(node2.isTypeOf());
838:       assertFalse(node2.isNull());
839:       assertFalse(node2.isBreak());
840:       assertFalse(node2.isComma());
841:       assertFalse(node2.isDelProp());
842:       assertFalse(node2.isAssign());
843:       assertFalse(node2.isGetElem());
844:       assertFalse(node2.isCall());
845:       assertFalse(node2.isEmpty());
846:       assertFalse(node2.isOr());
847:       assertFalse(node2.isName());
848:       assertFalse(node2.isTrue());
849:       assertFalse(node3.hasOneChild());
850:       assertFalse(node3.isCast());
851:       assertFalse(node3.isGetElem());
852:       assertFalse(node3.isLabelName());
853:       assertFalse(node3.isTypeOf());
854:       assertFalse(node3.hasChildren());
855:       assertFalse(node3.isExprResult());
856:       assertEquals(46, node3.getCharno());
857:       assertFalse(node3.isLabel());
858:       assertFalse(node3.isWith());
859:       assertFalse(node3.isAssign());
860:       assertFalse(node3.isDec());
861:       assertFalse(node3.isInstanceOf());
862:       assertFalse(node3.hasMoreThanOneChild());
863:       assertFalse(node3.isAssignAdd());
864:       assertFalse(node3.isDo());
865:       assertFalse(node3.isOr());
866:       assertFalse(node3.isCall());
867:       assertFalse(node3.isThrow());
868:       assertFalse(node3.isName());
869:       assertFalse(node3.isBreak());
870:       assertFalse(node3.isWhile());
871:       assertFalse(node3.isContinue());
872:       assertFalse(node3.isFalse());
873:       assertFalse(node3.isComma());
874:       assertFalse(node3.isReturn());
875:       assertFalse(node3.isAnd());
876:       assertFalse(node3.isGetProp());
877:       assertTrue(node3.isNumber());
878:       assertEquals(172078, node3.getSourcePosition());
879:       assertFalse(node3.isString());
880:       assertFalse(node3.isDebugger());
881:       assertFalse(node3.isObjectLit());
882:       assertFalse(node3.isNot());
883:       assertFalse(node3.isArrayLit());
884:       assertEquals(42, node3.getLineno());
885:       assertFalse(node3.isDelProp());
886:       assertFalse(node3.isVoid());
887:       assertFalse(node3.isTry());
888:       assertFalse(node3.isRegExp());
889:       assertFalse(node3.isDefaultCase());
890:       assertFalse(node3.isFor());
891:       assertFalse(node3.isFunction());
892:       assertFalse(node3.isIn());
893:       assertFalse(node3.isCatch());
894:       assertFalse(node3.isNull());
895:       assertFalse(node3.isSetterDef());
896:       assertFalse(node3.isIf());
897:       assertFalse(node3.isTrue());
898:       assertFalse(node3.isInc());
899:       assertFalse(node3.isEmpty());
900:       assertFalse(node3.isNE());
901:       assertFalse(node3.isHook());
902:       assertFalse(node3.isVar());
903:       assertFalse(node3.isStringKey());
904:       assertFalse(node3.isAdd());
905:       assertFalse(node3.isNew());
906:       assertFalse(node3.isThis());
907:       assertFalse(node3.isBlock());
908:       assertEquals(39, node3.getType());
909:       assertEquals(0, node3.getChildCount());
910:       assertFalse(node3.isCase());
911:       assertFalse(node3.isScript());
912:       assertFalse(node3.isSwitch());
913:       assertFalse(node3.isParamList());
914:       assertFalse(node3.isGetterDef());
915:       assertEquals(52, Node.LENGTH);
916:       assertEquals(50, Node.FREE_CALL);
917:       assertEquals(54, Node.SLASH_V);
918:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
919:       assertEquals(57, Node.REFLECTED_OBJECT);
920:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
921:       assertEquals(57, Node.LAST_PROP);
922:       assertEquals(8, Node.FLAG_NO_THROWS);
923:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
924:       assertEquals(1, Node.DECR_FLAG);
925:       assertEquals(15, Node.NO_SIDE_EFFECTS);
926:       assertEquals(39, Node.EMPTY_BLOCK);
927:       assertEquals(12, Node.COLUMN_BITS);
928:       assertEquals(4095, Node.COLUMN_MASK);
929:       assertEquals(55, Node.INFERRED_FUNCTION);
930:       assertEquals(32, Node.INCRDECR_PROP);
931:       assertEquals(56, Node.CHANGE_TIME);
932:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
933:       assertEquals(48, Node.DIRECTIVES);
934:       assertEquals(49, Node.DIRECT_EVAL);
935:       assertEquals(37, Node.OPT_ARG_NAME);
936:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
937:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
938:       assertEquals(47, Node.IS_DISPATCHER);
939:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
940:       assertEquals(36, Node.QUOTED_PROP);
941:       assertEquals(29, Node.JSDOC_INFO_PROP);
942:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
943:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
944:       assertEquals(53, Node.INPUT_ID);
945:       assertEquals(51, Node.STATIC_SOURCE_FILE);
946:       assertEquals(30, Node.VAR_ARGS_NAME);
947:       assertEquals(46, Node.IS_NAMESPACE);
948:       assertEquals(2, Node.POST_FLAG);
949:       assertEquals(43, Node.IS_CONSTANT_NAME);
950:       assertEquals(40, Node.ORIGINALNAME_PROP);
951:       assertEquals(32, Node.INCRDECR_PROP);
952:       assertEquals(46, Node.IS_NAMESPACE);
953:       assertEquals(2, Node.POST_FLAG);
954:       assertEquals(12, Node.COLUMN_BITS);
955:       assertEquals(51, Node.STATIC_SOURCE_FILE);
956:       assertEquals(47, Node.IS_DISPATCHER);
957:       assertEquals(30, Node.VAR_ARGS_NAME);
958:       assertEquals(49, Node.DIRECT_EVAL);
959:       assertEquals(56, Node.CHANGE_TIME);
960:       assertEquals(37, Node.OPT_ARG_NAME);
961:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
962:       assertEquals(54, Node.SLASH_V);
963:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
964:       assertEquals(50, Node.FREE_CALL);
965:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
966:       assertEquals(1, Node.DECR_FLAG);
967:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
968:       assertEquals(4095, Node.COLUMN_MASK);
969:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
970:       assertEquals(8, Node.FLAG_NO_THROWS);
971:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
972:       assertEquals(43, Node.IS_CONSTANT_NAME);
973:       assertEquals(40, Node.ORIGINALNAME_PROP);
974:       assertEquals(48, Node.DIRECTIVES);
975:       assertEquals(52, Node.LENGTH);
976:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
977:       assertEquals(36, Node.QUOTED_PROP);
978:       assertEquals(57, Node.REFLECTED_OBJECT);
979:       assertEquals(29, Node.JSDOC_INFO_PROP);
980:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
981:       assertEquals(57, Node.LAST_PROP);
982:       assertEquals(55, Node.INFERRED_FUNCTION);
983:       assertEquals(39, Node.EMPTY_BLOCK);
984:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
985:       assertEquals(15, Node.NO_SIDE_EFFECTS);
986:       assertEquals(53, Node.INPUT_ID);
987:       assertEquals(56, Node.CHANGE_TIME);
988:       assertEquals(2, Node.POST_FLAG);
989:       assertEquals(37, Node.OPT_ARG_NAME);
990:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
991:       assertEquals(47, Node.IS_DISPATCHER);
992:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
993:       assertEquals(12, Node.COLUMN_BITS);
994:       assertEquals(30, Node.VAR_ARGS_NAME);
995:       assertEquals(15, Node.NO_SIDE_EFFECTS);
996:       assertEquals(36, Node.QUOTED_PROP);
997:       assertEquals(49, Node.DIRECT_EVAL);
998:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
999:       assertEquals(57, Node.LAST_PROP);
1000:       assertEquals(57, Node.REFLECTED_OBJECT);
1001:       assertEquals(55, Node.INFERRED_FUNCTION);
1002:       assertEquals(53, Node.INPUT_ID);
1003:       assertEquals(29, Node.JSDOC_INFO_PROP);
1004:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1005:       assertEquals(8, Node.FLAG_NO_THROWS);
1006:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1007:       assertEquals(52, Node.LENGTH);
1008:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1009:       assertEquals(39, Node.EMPTY_BLOCK);
1010:       assertEquals(48, Node.DIRECTIVES);
1011:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1012:       assertEquals(40, Node.ORIGINALNAME_PROP);
1013:       assertEquals(4095, Node.COLUMN_MASK);
1014:       assertEquals(43, Node.IS_CONSTANT_NAME);
1015:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1016:       assertEquals(1, Node.DECR_FLAG);
1017:       assertEquals(54, Node.SLASH_V);
1018:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1019:       assertEquals(32, Node.INCRDECR_PROP);
1020:       assertEquals(46, Node.IS_NAMESPACE);
1021:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1022:       assertEquals(50, Node.FREE_CALL);
1023:       assertEquals(4095, Node.COLUMN_MASK);
1024:       assertEquals(55, Node.INFERRED_FUNCTION);
1025:       assertEquals(43, Node.IS_CONSTANT_NAME);
1026:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1027:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1028:       assertEquals(48, Node.DIRECTIVES);
1029:       assertEquals(40, Node.ORIGINALNAME_PROP);
1030:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1031:       assertEquals(50, Node.FREE_CALL);
1032:       assertEquals(54, Node.SLASH_V);
1033:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1034:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1035:       assertEquals(1, Node.DECR_FLAG);
1036:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1037:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1038:       assertEquals(12, Node.COLUMN_BITS);
1039:       assertEquals(46, Node.IS_NAMESPACE);
1040:       assertEquals(32, Node.INCRDECR_PROP);
1041:       assertEquals(30, Node.VAR_ARGS_NAME);
1042:       assertEquals(56, Node.CHANGE_TIME);
1043:       assertEquals(2, Node.POST_FLAG);
1044:       assertEquals(49, Node.DIRECT_EVAL);
1045:       assertEquals(37, Node.OPT_ARG_NAME);
1046:       assertEquals(57, Node.REFLECTED_OBJECT);
1047:       assertEquals(52, Node.LENGTH);
1048:       assertEquals(47, Node.IS_DISPATCHER);
1049:       assertEquals(36, Node.QUOTED_PROP);
1050:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1051:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1052:       assertEquals(8, Node.FLAG_NO_THROWS);
1053:       assertEquals(57, Node.LAST_PROP);
1054:       assertEquals(53, Node.INPUT_ID);
1055:       assertEquals(29, Node.JSDOC_INFO_PROP);
1056:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1057:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1058:       assertEquals(39, Node.EMPTY_BLOCK);
1059:       
1060:       Iterable<Node> iterable0 = node3.children();
1061:       assertSame(node0, node3);
1062:       assertNotSame(node1, node2);
1063:       assertNotSame(node2, node1);
1064:       assertSame(node3, node0);
1065:       assertFalse(iterable0.contains(node1));
1066:       assertNotNull(iterable0);
1067:       assertFalse(node0.isCatch());
1068:       assertFalse(node0.isNull());
1069:       assertFalse(node0.isSetterDef());
1070:       assertFalse(node0.isTrue());
1071:       assertFalse(node0.isParamList());
1072:       assertFalse(node0.isDebugger());
1073:       assertFalse(node0.isVar());
1074:       assertFalse(node0.isArrayLit());
1075:       assertFalse(node0.isStringKey());
1076:       assertFalse(node0.isAdd());
1077:       assertFalse(node0.isEmpty());
1078:       assertFalse(node0.isNew());
1079:       assertFalse(node0.isDefaultCase());
1080:       assertFalse(node0.isFunction());
1081:       assertEquals(0, node0.getChildCount());
1082:       assertFalse(node0.isContinue());
1083:       assertFalse(node0.isAssignAdd());
1084:       assertFalse(node0.isDo());
1085:       assertTrue(node0.isNumber());
1086:       assertFalse(node0.isString());
1087:       assertFalse(node0.isOr());
1088:       assertFalse(node0.isCall());
1089:       assertEquals(42, node0.getLineno());
1090:       assertFalse(node0.isName());
1091:       assertFalse(node0.isGetElem());
1092:       assertFalse(node0.isDelProp());
1093:       assertFalse(node0.isVoid());
1094:       assertFalse(node0.isBreak());
1095:       assertFalse(node0.isTypeOf());
1096:       assertFalse(node0.isExprResult());
1097:       assertFalse(node0.isWhile());
1098:       assertFalse(node0.isAssign());
1099:       assertFalse(node0.isReturn());
1100:       assertFalse(node0.hasChildren());
1101:       assertFalse(node0.isDec());
1102:       assertFalse(node0.isComma());
1103:       assertFalse(node0.isAnd());
1104:       assertFalse(node0.isInstanceOf());
1105:       assertFalse(node0.isGetProp());
1106:       assertFalse(node0.isScript());
1107:       assertEquals(172078, node0.getSourcePosition());
1108:       assertFalse(node0.isNot());
1109:       assertFalse(node0.isObjectLit());
1110:       assertFalse(node0.isThrow());
1111:       assertFalse(node0.isCast());
1112:       assertFalse(node0.isLabelName());
1113:       assertFalse(node0.isLabel());
1114:       assertFalse(node0.isFalse());
1115:       assertEquals(46, node0.getCharno());
1116:       assertFalse(node0.hasMoreThanOneChild());
1117:       assertFalse(node0.isIn());
1118:       assertFalse(node0.isCase());
1119:       assertFalse(node0.isNE());
1120:       assertFalse(node0.isSwitch());
1121:       assertFalse(node0.isInc());
1122:       assertFalse(node0.isIf());
1123:       assertFalse(node0.isGetterDef());
1124:       assertFalse(node0.isHook());
1125:       assertFalse(node0.isTry());
1126:       assertFalse(node0.hasOneChild());
1127:       assertFalse(node0.isRegExp());
1128:       assertFalse(node0.isThis());
1129:       assertEquals(39, node0.getType());
1130:       assertFalse(node0.isFor());
1131:       assertFalse(node0.isBlock());
1132:       assertFalse(node0.isWith());
1133:       assertFalse(node1.isHook());
1134:       assertFalse(node1.isSwitch());
1135:       assertFalse(node1.isInc());
1136:       assertFalse(node1.isBreak());
1137:       assertFalse(node1.isThrow());
1138:       assertFalse(node1.isComma());
1139:       assertFalse(node1.isThis());
1140:       assertFalse(node1.isFalse());
1141:       assertFalse(node1.isIn());
1142:       assertFalse(node1.isInstanceOf());
1143:       assertTrue(node1.hasChildren());
1144:       assertFalse(node1.isDelProp());
1145:       assertFalse(node1.isIf());
1146:       assertFalse(node1.isEmpty());
1147:       assertFalse(node1.isNE());
1148:       assertFalse(node1.isArrayLit());
1149:       assertFalse(node1.isDefaultCase());
1150:       assertFalse(node1.isLabelName());
1151:       assertFalse(node1.isTry());
1152:       assertFalse(node1.isWith());
1153:       assertFalse(node1.isFor());
1154:       assertFalse(node1.isCatch());
1155:       assertFalse(node1.isRegExp());
1156:       assertEquals(1, node1.getChildCount());
1157:       assertFalse(node1.isParamList());
1158:       assertFalse(node1.isCase());
1159:       assertFalse(node1.isStringKey());
1160:       assertFalse(node1.isScript());
1161:       assertEquals((-1), node1.getCharno());
1162:       assertFalse(node1.isNumber());
1163:       assertFalse(node1.isGetterDef());
1164:       assertFalse(node1.isBlock());
1165:       assertFalse(node1.isAdd());
1166:       assertFalse(node1.isVar());
1167:       assertFalse(node1.isNew());
1168:       assertFalse(node1.isName());
1169:       assertFalse(node1.isWhile());
1170:       assertFalse(node1.isCall());
1171:       assertFalse(node1.hasMoreThanOneChild());
1172:       assertFalse(node1.isContinue());
1173:       assertEquals((-1), node1.getLineno());
1174:       assertFalse(node1.isLabel());
1175:       assertFalse(node1.isAssignAdd());
1176:       assertEquals(1200, node1.getType());
1177:       assertFalse(node1.isSetterDef());
1178:       assertFalse(node1.isDo());
1179:       assertFalse(node1.isNull());
1180:       assertFalse(node1.isOr());
1181:       assertFalse(node1.isExprResult());
1182:       assertFalse(node1.isTrue());
1183:       assertFalse(node1.isVoid());
1184:       assertTrue(node1.hasOneChild());
1185:       assertFalse(node1.isGetElem());
1186:       assertFalse(node1.isCast());
1187:       assertFalse(node1.isFunction());
1188:       assertFalse(node1.isDec());
1189:       assertFalse(node1.isAssign());
1190:       assertFalse(node1.isTypeOf());
1191:       assertFalse(node1.isReturn());
1192:       assertFalse(node1.isGetProp());
1193:       assertFalse(node1.isAnd());
1194:       assertFalse(node1.isString());
1195:       assertFalse(node1.isDebugger());
1196:       assertEquals((-1), node1.getSourcePosition());
1197:       assertFalse(node1.isObjectLit());
1198:       assertFalse(node1.isNot());
1199:       assertFalse(node2.isDo());
1200:       assertFalse(node2.isNew());
1201:       assertFalse(node2.isContinue());
1202:       assertFalse(node2.isAdd());
1203:       assertFalse(node2.hasMoreThanOneChild());
1204:       assertFalse(node2.isBlock());
1205:       assertEquals(46, node2.getCharno());
1206:       assertFalse(node2.isLabel());
1207:       assertFalse(node2.isAssignAdd());
1208:       assertFalse(node2.isWhile());
1209:       assertFalse(node2.isReturn());
1210:       assertFalse(node2.isVar());
1211:       assertFalse(node2.isNumber());
1212:       assertFalse(node2.isLabelName());
1213:       assertFalse(node2.isCast());
1214:       assertFalse(node2.isStringKey());
1215:       assertFalse(node2.isParamList());
1216:       assertEquals((-2107), node2.getType());
1217:       assertFalse(node2.isFunction());
1218:       assertFalse(node2.isWith());
1219:       assertFalse(node2.isRegExp());
1220:       assertFalse(node2.isCatch());
1221:       assertFalse(node2.isScript());
1222:       assertFalse(node2.isInstanceOf());
1223:       assertFalse(node2.isTry());
1224:       assertFalse(node2.isThis());
1225:       assertFalse(node2.isFor());
1226:       assertFalse(node2.isIf());
1227:       assertFalse(node2.isSetterDef());
1228:       assertTrue(node2.hasChildren());
1229:       assertFalse(node2.isIn());
1230:       assertFalse(node2.isNE());
1231:       assertFalse(node2.isSwitch());
1232:       assertFalse(node2.isCase());
1233:       assertFalse(node2.isString());
1234:       assertFalse(node2.isInc());
1235:       assertFalse(node2.isHook());
1236:       assertEquals(1, node2.getChildCount());
1237:       assertFalse(node2.isThrow());
1238:       assertEquals(172078, node2.getSourcePosition());
1239:       assertFalse(node2.isGetterDef());
1240:       assertFalse(node2.isFalse());
1241:       assertFalse(node2.isGetProp());
1242:       assertFalse(node2.isArrayLit());
1243:       assertFalse(node2.isObjectLit());
1244:       assertFalse(node2.isDebugger());
1245:       assertFalse(node2.isAnd());
1246:       assertFalse(node2.isDefaultCase());
1247:       assertFalse(node2.isVoid());
1248:       assertFalse(node2.isNot());
1249:       assertFalse(node2.isExprResult());
1250:       assertTrue(node2.hasOneChild());
1251:       assertEquals(42, node2.getLineno());
1252:       assertFalse(node2.isDec());
1253:       assertFalse(node2.isTypeOf());
1254:       assertFalse(node2.isNull());
1255:       assertFalse(node2.isBreak());
1256:       assertFalse(node2.isComma());
1257:       assertFalse(node2.isDelProp());
1258:       assertFalse(node2.isAssign());
1259:       assertFalse(node2.isGetElem());
1260:       assertFalse(node2.isCall());
1261:       assertFalse(node2.isEmpty());
1262:       assertFalse(node2.isOr());
1263:       assertFalse(node2.isName());
1264:       assertFalse(node2.isTrue());
1265:       assertFalse(node3.hasOneChild());
1266:       assertFalse(node3.isCast());
1267:       assertFalse(node3.isGetElem());
1268:       assertFalse(node3.isLabelName());
1269:       assertFalse(node3.isTypeOf());
1270:       assertFalse(node3.hasChildren());
1271:       assertFalse(node3.isExprResult());
1272:       assertEquals(46, node3.getCharno());
1273:       assertFalse(node3.isLabel());
1274:       assertFalse(node3.isWith());
1275:       assertFalse(node3.isAssign());
1276:       assertFalse(node3.isDec());
1277:       assertFalse(node3.isInstanceOf());
1278:       assertFalse(node3.hasMoreThanOneChild());
1279:       assertFalse(node3.isAssignAdd());
1280:       assertFalse(node3.isDo());
1281:       assertFalse(node3.isOr());
1282:       assertFalse(node3.isCall());
1283:       assertFalse(node3.isThrow());
1284:       assertFalse(node3.isName());
1285:       assertFalse(node3.isBreak());
1286:       assertFalse(node3.isWhile());
1287:       assertFalse(node3.isContinue());
1288:       assertFalse(node3.isFalse());
1289:       assertFalse(node3.isComma());
1290:       assertFalse(node3.isReturn());
1291:       assertFalse(node3.isAnd());
1292:       assertFalse(node3.isGetProp());
1293:       assertTrue(node3.isNumber());
1294:       assertEquals(172078, node3.getSourcePosition());
1295:       assertFalse(node3.isString());
1296:       assertFalse(node3.isDebugger());
1297:       assertFalse(node3.isObjectLit());
1298:       assertFalse(node3.isNot());
1299:       assertFalse(node3.isArrayLit());
1300:       assertEquals(42, node3.getLineno());
1301:       assertFalse(node3.isDelProp());
1302:       assertFalse(node3.isVoid());
1303:       assertFalse(node3.isTry());
1304:       assertFalse(node3.isRegExp());
1305:       assertFalse(node3.isDefaultCase());
1306:       assertFalse(node3.isFor());
1307:       assertFalse(node3.isFunction());
1308:       assertFalse(node3.isIn());
1309:       assertFalse(node3.isCatch());
1310:       assertFalse(node3.isNull());
1311:       assertFalse(node3.isSetterDef());
1312:       assertFalse(node3.isIf());
1313:       assertFalse(node3.isTrue());
1314:       assertFalse(node3.isInc());
1315:       assertFalse(node3.isEmpty());
1316:       assertFalse(node3.isNE());
1317:       assertFalse(node3.isHook());
1318:       assertFalse(node3.isVar());
1319:       assertFalse(node3.isStringKey());
1320:       assertFalse(node3.isAdd());
1321:       assertFalse(node3.isNew());
1322:       assertFalse(node3.isThis());
1323:       assertFalse(node3.isBlock());
1324:       assertEquals(39, node3.getType());
1325:       assertEquals(0, node3.getChildCount());
1326:       assertFalse(node3.isCase());
1327:       assertFalse(node3.isScript());
1328:       assertFalse(node3.isSwitch());
1329:       assertFalse(node3.isParamList());
1330:       assertFalse(node3.isGetterDef());
1331:       assertEquals(52, Node.LENGTH);
1332:       assertEquals(50, Node.FREE_CALL);
1333:       assertEquals(54, Node.SLASH_V);
1334:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1335:       assertEquals(57, Node.REFLECTED_OBJECT);
1336:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1337:       assertEquals(57, Node.LAST_PROP);
1338:       assertEquals(8, Node.FLAG_NO_THROWS);
1339:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1340:       assertEquals(1, Node.DECR_FLAG);
1341:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1342:       assertEquals(39, Node.EMPTY_BLOCK);
1343:       assertEquals(12, Node.COLUMN_BITS);
1344:       assertEquals(4095, Node.COLUMN_MASK);
1345:       assertEquals(55, Node.INFERRED_FUNCTION);
1346:       assertEquals(32, Node.INCRDECR_PROP);
1347:       assertEquals(56, Node.CHANGE_TIME);
1348:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1349:       assertEquals(48, Node.DIRECTIVES);
1350:       assertEquals(49, Node.DIRECT_EVAL);
1351:       assertEquals(37, Node.OPT_ARG_NAME);
1352:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1353:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1354:       assertEquals(47, Node.IS_DISPATCHER);
1355:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1356:       assertEquals(36, Node.QUOTED_PROP);
1357:       assertEquals(29, Node.JSDOC_INFO_PROP);
1358:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1359:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1360:       assertEquals(53, Node.INPUT_ID);
1361:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1362:       assertEquals(30, Node.VAR_ARGS_NAME);
1363:       assertEquals(46, Node.IS_NAMESPACE);
1364:       assertEquals(2, Node.POST_FLAG);
1365:       assertEquals(43, Node.IS_CONSTANT_NAME);
1366:       assertEquals(40, Node.ORIGINALNAME_PROP);
1367:       assertEquals(32, Node.INCRDECR_PROP);
1368:       assertEquals(46, Node.IS_NAMESPACE);
1369:       assertEquals(2, Node.POST_FLAG);
1370:       assertEquals(12, Node.COLUMN_BITS);
1371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1372:       assertEquals(47, Node.IS_DISPATCHER);
1373:       assertEquals(30, Node.VAR_ARGS_NAME);
1374:       assertEquals(49, Node.DIRECT_EVAL);
1375:       assertEquals(56, Node.CHANGE_TIME);
1376:       assertEquals(37, Node.OPT_ARG_NAME);
1377:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1378:       assertEquals(54, Node.SLASH_V);
1379:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1380:       assertEquals(50, Node.FREE_CALL);
1381:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1382:       assertEquals(1, Node.DECR_FLAG);
1383:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1384:       assertEquals(4095, Node.COLUMN_MASK);
1385:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1386:       assertEquals(8, Node.FLAG_NO_THROWS);
1387:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1388:       assertEquals(43, Node.IS_CONSTANT_NAME);
1389:       assertEquals(40, Node.ORIGINALNAME_PROP);
1390:       assertEquals(48, Node.DIRECTIVES);
1391:       assertEquals(52, Node.LENGTH);
1392:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1393:       assertEquals(36, Node.QUOTED_PROP);
1394:       assertEquals(57, Node.REFLECTED_OBJECT);
1395:       assertEquals(29, Node.JSDOC_INFO_PROP);
1396:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1397:       assertEquals(57, Node.LAST_PROP);
1398:       assertEquals(55, Node.INFERRED_FUNCTION);
1399:       assertEquals(39, Node.EMPTY_BLOCK);
1400:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1401:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1402:       assertEquals(53, Node.INPUT_ID);
1403:       assertEquals(56, Node.CHANGE_TIME);
1404:       assertEquals(2, Node.POST_FLAG);
1405:       assertEquals(37, Node.OPT_ARG_NAME);
1406:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1407:       assertEquals(47, Node.IS_DISPATCHER);
1408:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1409:       assertEquals(12, Node.COLUMN_BITS);
1410:       assertEquals(30, Node.VAR_ARGS_NAME);
1411:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1412:       assertEquals(36, Node.QUOTED_PROP);
1413:       assertEquals(49, Node.DIRECT_EVAL);
1414:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1415:       assertEquals(57, Node.LAST_PROP);
1416:       assertEquals(57, Node.REFLECTED_OBJECT);
1417:       assertEquals(55, Node.INFERRED_FUNCTION);
1418:       assertEquals(53, Node.INPUT_ID);
1419:       assertEquals(29, Node.JSDOC_INFO_PROP);
1420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1421:       assertEquals(8, Node.FLAG_NO_THROWS);
1422:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1423:       assertEquals(52, Node.LENGTH);
1424:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1425:       assertEquals(39, Node.EMPTY_BLOCK);
1426:       assertEquals(48, Node.DIRECTIVES);
1427:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1428:       assertEquals(40, Node.ORIGINALNAME_PROP);
1429:       assertEquals(4095, Node.COLUMN_MASK);
1430:       assertEquals(43, Node.IS_CONSTANT_NAME);
1431:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1432:       assertEquals(1, Node.DECR_FLAG);
1433:       assertEquals(54, Node.SLASH_V);
1434:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1435:       assertEquals(32, Node.INCRDECR_PROP);
1436:       assertEquals(46, Node.IS_NAMESPACE);
1437:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1438:       assertEquals(50, Node.FREE_CALL);
1439:       assertEquals(4095, Node.COLUMN_MASK);
1440:       assertEquals(55, Node.INFERRED_FUNCTION);
1441:       assertEquals(43, Node.IS_CONSTANT_NAME);
1442:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1443:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1444:       assertEquals(48, Node.DIRECTIVES);
1445:       assertEquals(40, Node.ORIGINALNAME_PROP);
1446:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1447:       assertEquals(50, Node.FREE_CALL);
1448:       assertEquals(54, Node.SLASH_V);
1449:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1450:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1451:       assertEquals(1, Node.DECR_FLAG);
1452:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1453:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1454:       assertEquals(12, Node.COLUMN_BITS);
1455:       assertEquals(46, Node.IS_NAMESPACE);
1456:       assertEquals(32, Node.INCRDECR_PROP);
1457:       assertEquals(30, Node.VAR_ARGS_NAME);
1458:       assertEquals(56, Node.CHANGE_TIME);
1459:       assertEquals(2, Node.POST_FLAG);
1460:       assertEquals(49, Node.DIRECT_EVAL);
1461:       assertEquals(37, Node.OPT_ARG_NAME);
1462:       assertEquals(57, Node.REFLECTED_OBJECT);
1463:       assertEquals(52, Node.LENGTH);
1464:       assertEquals(47, Node.IS_DISPATCHER);
1465:       assertEquals(36, Node.QUOTED_PROP);
1466:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1467:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1468:       assertEquals(8, Node.FLAG_NO_THROWS);
1469:       assertEquals(57, Node.LAST_PROP);
1470:       assertEquals(53, Node.INPUT_ID);
1471:       assertEquals(29, Node.JSDOC_INFO_PROP);
1472:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1474:       assertEquals(39, Node.EMPTY_BLOCK);
1475:       
1476:       Node node4 = node0.srcrefTree(node3);
1477:       assertSame(node0, node4);
1478:       assertSame(node0, node3);
1479:       assertNotSame(node1, node2);
1480:       assertNotSame(node2, node1);
1481:       assertSame(node3, node4);
1482:       assertSame(node3, node0);
1483:       assertSame(node4, node0);
1484:       assertSame(node4, node3);
1485:       assertNotNull(node4);
1486:       assertFalse(node0.isCatch());
1487:       assertFalse(node0.isNull());
1488:       assertFalse(node0.isSetterDef());
1489:       assertFalse(node0.isTrue());
1490:       assertFalse(node0.isParamList());
1491:       assertFalse(node0.isDebugger());
1492:       assertFalse(node0.isVar());
1493:       assertFalse(node0.isArrayLit());
1494:       assertFalse(node0.isStringKey());
1495:       assertFalse(node0.isAdd());
1496:       assertFalse(node0.isEmpty());
1497:       assertFalse(node0.isNew());
1498:       assertFalse(node0.isDefaultCase());
1499:       assertFalse(node0.isFunction());
1500:       assertEquals(0, node0.getChildCount());
1501:       assertFalse(node0.isContinue());
1502:       assertFalse(node0.isAssignAdd());
1503:       assertFalse(node0.isDo());
1504:       assertTrue(node0.isNumber());
1505:       assertFalse(node0.isString());
1506:       assertFalse(node0.isOr());
1507:       assertFalse(node0.isCall());
1508:       assertEquals(42, node0.getLineno());
1509:       assertFalse(node0.isName());
1510:       assertFalse(node0.isGetElem());
1511:       assertFalse(node0.isDelProp());
1512:       assertFalse(node0.isVoid());
1513:       assertFalse(node0.isBreak());
1514:       assertFalse(node0.isTypeOf());
1515:       assertFalse(node0.isExprResult());
1516:       assertFalse(node0.isWhile());
1517:       assertFalse(node0.isAssign());
1518:       assertFalse(node0.isReturn());
1519:       assertFalse(node0.hasChildren());
1520:       assertFalse(node0.isDec());
1521:       assertFalse(node0.isComma());
1522:       assertFalse(node0.isAnd());
1523:       assertFalse(node0.isInstanceOf());
1524:       assertFalse(node0.isGetProp());
1525:       assertFalse(node0.isScript());
1526:       assertEquals(172078, node0.getSourcePosition());
1527:       assertFalse(node0.isNot());
1528:       assertFalse(node0.isObjectLit());
1529:       assertFalse(node0.isThrow());
1530:       assertFalse(node0.isCast());
1531:       assertFalse(node0.isLabelName());
1532:       assertFalse(node0.isLabel());
1533:       assertFalse(node0.isFalse());
1534:       assertEquals(46, node0.getCharno());
1535:       assertFalse(node0.hasMoreThanOneChild());
1536:       assertFalse(node0.isIn());
1537:       assertFalse(node0.isCase());
1538:       assertFalse(node0.isNE());
1539:       assertFalse(node0.isSwitch());
1540:       assertFalse(node0.isInc());
1541:       assertFalse(node0.isIf());
1542:       assertFalse(node0.isGetterDef());
1543:       assertFalse(node0.isHook());
1544:       assertFalse(node0.isTry());
1545:       assertFalse(node0.hasOneChild());
1546:       assertFalse(node0.isRegExp());
1547:       assertFalse(node0.isThis());
1548:       assertEquals(39, node0.getType());
1549:       assertFalse(node0.isFor());
1550:       assertFalse(node0.isBlock());
1551:       assertFalse(node0.isWith());
1552:       assertFalse(node1.isHook());
1553:       assertFalse(node1.isSwitch());
1554:       assertFalse(node1.isInc());
1555:       assertFalse(node1.isBreak());
1556:       assertFalse(node1.isThrow());
1557:       assertFalse(node1.isComma());
1558:       assertFalse(node1.isThis());
1559:       assertFalse(node1.isFalse());
1560:       assertFalse(node1.isIn());
1561:       assertFalse(node1.isInstanceOf());
1562:       assertTrue(node1.hasChildren());
1563:       assertFalse(node1.isDelProp());
1564:       assertFalse(node1.isIf());
1565:       assertFalse(node1.isEmpty());
1566:       assertFalse(node1.isNE());
1567:       assertFalse(node1.isArrayLit());
1568:       assertFalse(node1.isDefaultCase());
1569:       assertFalse(node1.isLabelName());
1570:       assertFalse(node1.isTry());
1571:       assertFalse(node1.isWith());
1572:       assertFalse(node1.isFor());
1573:       assertFalse(node1.isCatch());
1574:       assertFalse(node1.isRegExp());
1575:       assertEquals(1, node1.getChildCount());
1576:       assertFalse(node1.isParamList());
1577:       assertFalse(node1.isCase());
1578:       assertFalse(node1.isStringKey());
1579:       assertFalse(node1.isScript());
1580:       assertEquals((-1), node1.getCharno());
1581:       assertFalse(node1.isNumber());
1582:       assertFalse(node1.isGetterDef());
1583:       assertFalse(node1.isBlock());
1584:       assertFalse(node1.isAdd());
1585:       assertFalse(node1.isVar());
1586:       assertFalse(node1.isNew());
1587:       assertFalse(node1.isName());
1588:       assertFalse(node1.isWhile());
1589:       assertFalse(node1.isCall());
1590:       assertFalse(node1.hasMoreThanOneChild());
1591:       assertFalse(node1.isContinue());
1592:       assertEquals((-1), node1.getLineno());
1593:       assertFalse(node1.isLabel());
1594:       assertFalse(node1.isAssignAdd());
1595:       assertEquals(1200, node1.getType());
1596:       assertFalse(node1.isSetterDef());
1597:       assertFalse(node1.isDo());
1598:       assertFalse(node1.isNull());
1599:       assertFalse(node1.isOr());
1600:       assertFalse(node1.isExprResult());
1601:       assertFalse(node1.isTrue());
1602:       assertFalse(node1.isVoid());
1603:       assertTrue(node1.hasOneChild());
1604:       assertFalse(node1.isGetElem());
1605:       assertFalse(node1.isCast());
1606:       assertFalse(node1.isFunction());
1607:       assertFalse(node1.isDec());
1608:       assertFalse(node1.isAssign());
1609:       assertFalse(node1.isTypeOf());
1610:       assertFalse(node1.isReturn());
1611:       assertFalse(node1.isGetProp());
1612:       assertFalse(node1.isAnd());
1613:       assertFalse(node1.isString());
1614:       assertFalse(node1.isDebugger());
1615:       assertEquals((-1), node1.getSourcePosition());
1616:       assertFalse(node1.isObjectLit());
1617:       assertFalse(node1.isNot());
1618:       assertFalse(node2.isDo());
1619:       assertFalse(node2.isNew());
1620:       assertFalse(node2.isContinue());
1621:       assertFalse(node2.isAdd());
1622:       assertFalse(node2.hasMoreThanOneChild());
1623:       assertFalse(node2.isBlock());
1624:       assertEquals(46, node2.getCharno());
1625:       assertFalse(node2.isLabel());
1626:       assertFalse(node2.isAssignAdd());
1627:       assertFalse(node2.isWhile());
1628:       assertFalse(node2.isReturn());
1629:       assertFalse(node2.isVar());
1630:       assertFalse(node2.isNumber());
1631:       assertFalse(node2.isLabelName());
1632:       assertFalse(node2.isCast());
1633:       assertFalse(node2.isStringKey());
1634:       assertFalse(node2.isParamList());
1635:       assertEquals((-2107), node2.getType());
1636:       assertFalse(node2.isFunction());
1637:       assertFalse(node2.isWith());
1638:       assertFalse(node2.isRegExp());
1639:       assertFalse(node2.isCatch());
1640:       assertFalse(node2.isScript());
1641:       assertFalse(node2.isInstanceOf());
1642:       assertFalse(node2.isTry());
1643:       assertFalse(node2.isThis());
1644:       assertFalse(node2.isFor());
1645:       assertFalse(node2.isIf());
1646:       assertFalse(node2.isSetterDef());
1647:       assertTrue(node2.hasChildren());
1648:       assertFalse(node2.isIn());
1649:       assertFalse(node2.isNE());
1650:       assertFalse(node2.isSwitch());
1651:       assertFalse(node2.isCase());
1652:       assertFalse(node2.isString());
1653:       assertFalse(node2.isInc());
1654:       assertFalse(node2.isHook());
1655:       assertEquals(1, node2.getChildCount());
1656:       assertFalse(node2.isThrow());
1657:       assertEquals(172078, node2.getSourcePosition());
1658:       assertFalse(node2.isGetterDef());
1659:       assertFalse(node2.isFalse());
1660:       assertFalse(node2.isGetProp());
1661:       assertFalse(node2.isArrayLit());
1662:       assertFalse(node2.isObjectLit());
1663:       assertFalse(node2.isDebugger());
1664:       assertFalse(node2.isAnd());
1665:       assertFalse(node2.isDefaultCase());
1666:       assertFalse(node2.isVoid());
1667:       assertFalse(node2.isNot());
1668:       assertFalse(node2.isExprResult());
1669:       assertTrue(node2.hasOneChild());
1670:       assertEquals(42, node2.getLineno());
1671:       assertFalse(node2.isDec());
1672:       assertFalse(node2.isTypeOf());
1673:       assertFalse(node2.isNull());
1674:       assertFalse(node2.isBreak());
1675:       assertFalse(node2.isComma());
1676:       assertFalse(node2.isDelProp());
1677:       assertFalse(node2.isAssign());
1678:       assertFalse(node2.isGetElem());
1679:       assertFalse(node2.isCall());
1680:       assertFalse(node2.isEmpty());
1681:       assertFalse(node2.isOr());
1682:       assertFalse(node2.isName());
1683:       assertFalse(node2.isTrue());
1684:       assertFalse(node3.hasOneChild());
1685:       assertFalse(node3.isCast());
1686:       assertFalse(node3.isGetElem());
1687:       assertFalse(node3.isLabelName());
1688:       assertFalse(node3.isTypeOf());
1689:       assertFalse(node3.hasChildren());
1690:       assertFalse(node3.isExprResult());
1691:       assertEquals(46, node3.getCharno());
1692:       assertFalse(node3.isLabel());
1693:       assertFalse(node3.isWith());
1694:       assertFalse(node3.isAssign());
1695:       assertFalse(node3.isDec());
1696:       assertFalse(node3.isInstanceOf());
1697:       assertFalse(node3.hasMoreThanOneChild());
1698:       assertFalse(node3.isAssignAdd());
1699:       assertFalse(node3.isDo());
1700:       assertFalse(node3.isOr());
1701:       assertFalse(node3.isCall());
1702:       assertFalse(node3.isThrow());
1703:       assertFalse(node3.isName());
1704:       assertFalse(node3.isBreak());
1705:       assertFalse(node3.isWhile());
1706:       assertFalse(node3.isContinue());
1707:       assertFalse(node3.isFalse());
1708:       assertFalse(node3.isComma());
1709:       assertFalse(node3.isReturn());
1710:       assertFalse(node3.isAnd());
1711:       assertFalse(node3.isGetProp());
1712:       assertTrue(node3.isNumber());
1713:       assertEquals(172078, node3.getSourcePosition());
1714:       assertFalse(node3.isString());
1715:       assertFalse(node3.isDebugger());
1716:       assertFalse(node3.isObjectLit());
1717:       assertFalse(node3.isNot());
1718:       assertFalse(node3.isArrayLit());
1719:       assertEquals(42, node3.getLineno());
1720:       assertFalse(node3.isDelProp());
1721:       assertFalse(node3.isVoid());
1722:       assertFalse(node3.isTry());
1723:       assertFalse(node3.isRegExp());
1724:       assertFalse(node3.isDefaultCase());
1725:       assertFalse(node3.isFor());
1726:       assertFalse(node3.isFunction());
1727:       assertFalse(node3.isIn());
1728:       assertFalse(node3.isCatch());
1729:       assertFalse(node3.isNull());
1730:       assertFalse(node3.isSetterDef());
1731:       assertFalse(node3.isIf());
1732:       assertFalse(node3.isTrue());
1733:       assertFalse(node3.isInc());
1734:       assertFalse(node3.isEmpty());
1735:       assertFalse(node3.isNE());
1736:       assertFalse(node3.isHook());
1737:       assertFalse(node3.isVar());
1738:       assertFalse(node3.isStringKey());
1739:       assertFalse(node3.isAdd());
1740:       assertFalse(node3.isNew());
1741:       assertFalse(node3.isThis());
1742:       assertFalse(node3.isBlock());
1743:       assertEquals(39, node3.getType());
1744:       assertEquals(0, node3.getChildCount());
1745:       assertFalse(node3.isCase());
1746:       assertFalse(node3.isScript());
1747:       assertFalse(node3.isSwitch());
1748:       assertFalse(node3.isParamList());
1749:       assertFalse(node3.isGetterDef());
1750:       assertFalse(node4.isSwitch());
1751:       assertFalse(node4.isString());
1752:       assertFalse(node4.isInc());
1753:       assertFalse(node4.isFalse());
1754:       assertFalse(node4.isThrow());
1755:       assertFalse(node4.isCase());
1756:       assertFalse(node4.isHook());
1757:       assertFalse(node4.isThis());
1758:       assertFalse(node4.isComma());
1759:       assertFalse(node4.isIn());
1760:       assertFalse(node4.isInstanceOf());
1761:       assertFalse(node4.isBreak());
1762:       assertFalse(node4.isEmpty());
1763:       assertFalse(node4.isDelProp());
1764:       assertFalse(node4.isIf());
1765:       assertFalse(node4.isNE());
1766:       assertFalse(node4.isDebugger());
1767:       assertFalse(node4.isVoid());
1768:       assertFalse(node4.isFunction());
1769:       assertFalse(node4.isCast());
1770:       assertFalse(node4.isExprResult());
1771:       assertFalse(node4.isAssign());
1772:       assertFalse(node4.isDec());
1773:       assertFalse(node4.hasChildren());
1774:       assertEquals(42, node4.getLineno());
1775:       assertEquals(46, node4.getCharno());
1776:       assertFalse(node4.isGetProp());
1777:       assertTrue(node4.isNumber());
1778:       assertEquals(172078, node4.getSourcePosition());
1779:       assertFalse(node4.isAnd());
1780:       assertFalse(node4.isNot());
1781:       assertFalse(node4.isObjectLit());
1782:       assertFalse(node4.isNew());
1783:       assertFalse(node4.isCall());
1784:       assertFalse(node4.isAdd());
1785:       assertFalse(node4.isContinue());
1786:       assertFalse(node4.isDo());
1787:       assertFalse(node4.hasMoreThanOneChild());
1788:       assertFalse(node4.isWhile());
1789:       assertEquals(39, node4.getType());
1790:       assertFalse(node4.isReturn());
1791:       assertFalse(node4.isBlock());
1792:       assertFalse(node4.isVar());
1793:       assertFalse(node4.isAssignAdd());
1794:       assertFalse(node4.isOr());
1795:       assertFalse(node4.isTypeOf());
1796:       assertFalse(node4.isSetterDef());
1797:       assertFalse(node4.isCatch());
1798:       assertFalse(node4.isGetElem());
1799:       assertFalse(node4.isName());
1800:       assertFalse(node4.isNull());
1801:       assertFalse(node4.isTrue());
1802:       assertFalse(node4.isTry());
1803:       assertFalse(node4.isRegExp());
1804:       assertFalse(node4.hasOneChild());
1805:       assertFalse(node4.isArrayLit());
1806:       assertFalse(node4.isScript());
1807:       assertFalse(node4.isWith());
1808:       assertFalse(node4.isDefaultCase());
1809:       assertEquals(0, node4.getChildCount());
1810:       assertFalse(node4.isFor());
1811:       assertFalse(node4.isParamList());
1812:       assertFalse(node4.isLabel());
1813:       assertFalse(node4.isStringKey());
1814:       assertFalse(node4.isLabelName());
1815:       assertFalse(node4.isGetterDef());
1816:       assertEquals(52, Node.LENGTH);
1817:       assertEquals(50, Node.FREE_CALL);
1818:       assertEquals(54, Node.SLASH_V);
1819:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1820:       assertEquals(57, Node.REFLECTED_OBJECT);
1821:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1822:       assertEquals(57, Node.LAST_PROP);
1823:       assertEquals(8, Node.FLAG_NO_THROWS);
1824:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1825:       assertEquals(1, Node.DECR_FLAG);
1826:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1827:       assertEquals(39, Node.EMPTY_BLOCK);
1828:       assertEquals(12, Node.COLUMN_BITS);
1829:       assertEquals(4095, Node.COLUMN_MASK);
1830:       assertEquals(55, Node.INFERRED_FUNCTION);
1831:       assertEquals(32, Node.INCRDECR_PROP);
1832:       assertEquals(56, Node.CHANGE_TIME);
1833:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1834:       assertEquals(48, Node.DIRECTIVES);
1835:       assertEquals(49, Node.DIRECT_EVAL);
1836:       assertEquals(37, Node.OPT_ARG_NAME);
1837:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1838:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1839:       assertEquals(47, Node.IS_DISPATCHER);
1840:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1841:       assertEquals(36, Node.QUOTED_PROP);
1842:       assertEquals(29, Node.JSDOC_INFO_PROP);
1843:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1844:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1845:       assertEquals(53, Node.INPUT_ID);
1846:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1847:       assertEquals(30, Node.VAR_ARGS_NAME);
1848:       assertEquals(46, Node.IS_NAMESPACE);
1849:       assertEquals(2, Node.POST_FLAG);
1850:       assertEquals(43, Node.IS_CONSTANT_NAME);
1851:       assertEquals(40, Node.ORIGINALNAME_PROP);
1852:       assertEquals(32, Node.INCRDECR_PROP);
1853:       assertEquals(46, Node.IS_NAMESPACE);
1854:       assertEquals(2, Node.POST_FLAG);
1855:       assertEquals(12, Node.COLUMN_BITS);
1856:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1857:       assertEquals(47, Node.IS_DISPATCHER);
1858:       assertEquals(30, Node.VAR_ARGS_NAME);
1859:       assertEquals(49, Node.DIRECT_EVAL);
1860:       assertEquals(56, Node.CHANGE_TIME);
1861:       assertEquals(37, Node.OPT_ARG_NAME);
1862:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1863:       assertEquals(54, Node.SLASH_V);
1864:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1865:       assertEquals(50, Node.FREE_CALL);
1866:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1867:       assertEquals(1, Node.DECR_FLAG);
1868:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1869:       assertEquals(4095, Node.COLUMN_MASK);
1870:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1871:       assertEquals(8, Node.FLAG_NO_THROWS);
1872:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1873:       assertEquals(43, Node.IS_CONSTANT_NAME);
1874:       assertEquals(40, Node.ORIGINALNAME_PROP);
1875:       assertEquals(48, Node.DIRECTIVES);
1876:       assertEquals(52, Node.LENGTH);
1877:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1878:       assertEquals(36, Node.QUOTED_PROP);
1879:       assertEquals(57, Node.REFLECTED_OBJECT);
1880:       assertEquals(29, Node.JSDOC_INFO_PROP);
1881:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1882:       assertEquals(57, Node.LAST_PROP);
1883:       assertEquals(55, Node.INFERRED_FUNCTION);
1884:       assertEquals(39, Node.EMPTY_BLOCK);
1885:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1886:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1887:       assertEquals(53, Node.INPUT_ID);
1888:       assertEquals(56, Node.CHANGE_TIME);
1889:       assertEquals(2, Node.POST_FLAG);
1890:       assertEquals(37, Node.OPT_ARG_NAME);
1891:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1892:       assertEquals(47, Node.IS_DISPATCHER);
1893:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1894:       assertEquals(12, Node.COLUMN_BITS);
1895:       assertEquals(30, Node.VAR_ARGS_NAME);
1896:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1897:       assertEquals(36, Node.QUOTED_PROP);
1898:       assertEquals(49, Node.DIRECT_EVAL);
1899:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1900:       assertEquals(57, Node.LAST_PROP);
1901:       assertEquals(57, Node.REFLECTED_OBJECT);
1902:       assertEquals(55, Node.INFERRED_FUNCTION);
1903:       assertEquals(53, Node.INPUT_ID);
1904:       assertEquals(29, Node.JSDOC_INFO_PROP);
1905:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1906:       assertEquals(8, Node.FLAG_NO_THROWS);
1907:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1908:       assertEquals(52, Node.LENGTH);
1909:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1910:       assertEquals(39, Node.EMPTY_BLOCK);
1911:       assertEquals(48, Node.DIRECTIVES);
1912:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1913:       assertEquals(40, Node.ORIGINALNAME_PROP);
1914:       assertEquals(4095, Node.COLUMN_MASK);
1915:       assertEquals(43, Node.IS_CONSTANT_NAME);
1916:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1917:       assertEquals(1, Node.DECR_FLAG);
1918:       assertEquals(54, Node.SLASH_V);
1919:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1920:       assertEquals(32, Node.INCRDECR_PROP);
1921:       assertEquals(46, Node.IS_NAMESPACE);
1922:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1923:       assertEquals(50, Node.FREE_CALL);
1924:       assertEquals(4095, Node.COLUMN_MASK);
1925:       assertEquals(55, Node.INFERRED_FUNCTION);
1926:       assertEquals(43, Node.IS_CONSTANT_NAME);
1927:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1928:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1929:       assertEquals(48, Node.DIRECTIVES);
1930:       assertEquals(40, Node.ORIGINALNAME_PROP);
1931:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1932:       assertEquals(50, Node.FREE_CALL);
1933:       assertEquals(54, Node.SLASH_V);
1934:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1935:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1936:       assertEquals(1, Node.DECR_FLAG);
1937:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1938:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1939:       assertEquals(12, Node.COLUMN_BITS);
1940:       assertEquals(46, Node.IS_NAMESPACE);
1941:       assertEquals(32, Node.INCRDECR_PROP);
1942:       assertEquals(30, Node.VAR_ARGS_NAME);
1943:       assertEquals(56, Node.CHANGE_TIME);
1944:       assertEquals(2, Node.POST_FLAG);
1945:       assertEquals(49, Node.DIRECT_EVAL);
1946:       assertEquals(37, Node.OPT_ARG_NAME);
1947:       assertEquals(57, Node.REFLECTED_OBJECT);
1948:       assertEquals(52, Node.LENGTH);
1949:       assertEquals(47, Node.IS_DISPATCHER);
1950:       assertEquals(36, Node.QUOTED_PROP);
1951:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1952:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1953:       assertEquals(8, Node.FLAG_NO_THROWS);
1954:       assertEquals(57, Node.LAST_PROP);
1955:       assertEquals(53, Node.INPUT_ID);
1956:       assertEquals(29, Node.JSDOC_INFO_PROP);
1957:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1958:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1959:       assertEquals(39, Node.EMPTY_BLOCK);
1960:       assertEquals(2, Node.POST_FLAG);
1961:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1962:       assertEquals(37, Node.OPT_ARG_NAME);
1963:       assertEquals(56, Node.CHANGE_TIME);
1964:       assertEquals(47, Node.IS_DISPATCHER);
1965:       assertEquals(12, Node.COLUMN_BITS);
1966:       assertEquals(32, Node.INCRDECR_PROP);
1967:       assertEquals(46, Node.IS_NAMESPACE);
1968:       assertEquals(49, Node.DIRECT_EVAL);
1969:       assertEquals(30, Node.VAR_ARGS_NAME);
1970:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1971:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1972:       assertEquals(54, Node.SLASH_V);
1973:       assertEquals(43, Node.IS_CONSTANT_NAME);
1974:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1975:       assertEquals(1, Node.DECR_FLAG);
1976:       assertEquals(50, Node.FREE_CALL);
1977:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1978:       assertEquals(48, Node.DIRECTIVES);
1979:       assertEquals(39, Node.EMPTY_BLOCK);
1980:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1981:       assertEquals(40, Node.ORIGINALNAME_PROP);
1982:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1983:       assertEquals(4095, Node.COLUMN_MASK);
1984:       assertEquals(53, Node.INPUT_ID);
1985:       assertEquals(36, Node.QUOTED_PROP);
1986:       assertEquals(57, Node.LAST_PROP);
1987:       assertEquals(57, Node.REFLECTED_OBJECT);
1988:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1989:       assertEquals(29, Node.JSDOC_INFO_PROP);
1990:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1991:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1992:       assertEquals(55, Node.INFERRED_FUNCTION);
1993:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1994:       assertEquals(52, Node.LENGTH);
1995:       assertEquals(8, Node.FLAG_NO_THROWS);
1996:       
1997:       node0.putBooleanProp(174, false);
1998:       assertSame(node0, node4);
1999:       assertSame(node0, node3);
2000:       assertFalse(node0.isCatch());
2001:       assertFalse(node0.isNull());
2002:       assertFalse(node0.isSetterDef());
2003:       assertFalse(node0.isTrue());
2004:       assertFalse(node0.isParamList());
2005:       assertFalse(node0.isDebugger());
2006:       assertFalse(node0.isVar());
2007:       assertFalse(node0.isArrayLit());
2008:       assertFalse(node0.isStringKey());
2009:       assertFalse(node0.isAdd());
2010:       assertFalse(node0.isEmpty());
2011:       assertFalse(node0.isNew());
2012:       assertFalse(node0.isDefaultCase());
2013:       assertFalse(node0.isFunction());
2014:       assertEquals(0, node0.getChildCount());
2015:       assertFalse(node0.isContinue());
2016:       assertFalse(node0.isAssignAdd());
2017:       assertFalse(node0.isDo());
2018:       assertTrue(node0.isNumber());
2019:       assertFalse(node0.isString());
2020:       assertFalse(node0.isOr());
2021:       assertFalse(node0.isCall());
2022:       assertEquals(42, node0.getLineno());
2023:       assertFalse(node0.isName());
2024:       assertFalse(node0.isGetElem());
2025:       assertFalse(node0.isDelProp());
2026:       assertFalse(node0.isVoid());
2027:       assertFalse(node0.isBreak());
2028:       assertFalse(node0.isTypeOf());
2029:       assertFalse(node0.isExprResult());
2030:       assertFalse(node0.isWhile());
2031:       assertFalse(node0.isAssign());
2032:       assertFalse(node0.isReturn());
2033:       assertFalse(node0.hasChildren());
2034:       assertFalse(node0.isDec());
2035:       assertFalse(node0.isComma());
2036:       assertFalse(node0.isAnd());
2037:       assertFalse(node0.isInstanceOf());
2038:       assertFalse(node0.isGetProp());
2039:       assertFalse(node0.isScript());
2040:       assertEquals(172078, node0.getSourcePosition());
2041:       assertFalse(node0.isNot());
2042:       assertFalse(node0.isObjectLit());
2043:       assertFalse(node0.isThrow());
2044:       assertFalse(node0.isCast());
2045:       assertFalse(node0.isLabelName());
2046:       assertFalse(node0.isLabel());
2047:       assertFalse(node0.isFalse());
2048:       assertEquals(46, node0.getCharno());
2049:       assertFalse(node0.hasMoreThanOneChild());
2050:       assertFalse(node0.isIn());
2051:       assertFalse(node0.isCase());
2052:       assertFalse(node0.isNE());
2053:       assertFalse(node0.isSwitch());
2054:       assertFalse(node0.isInc());
2055:       assertFalse(node0.isIf());
2056:       assertFalse(node0.isGetterDef());
2057:       assertFalse(node0.isHook());
2058:       assertFalse(node0.isTry());
2059:       assertFalse(node0.hasOneChild());
2060:       assertFalse(node0.isRegExp());
2061:       assertFalse(node0.isThis());
2062:       assertEquals(39, node0.getType());
2063:       assertFalse(node0.isFor());
2064:       assertFalse(node0.isBlock());
2065:       assertFalse(node0.isWith());
2066:       assertEquals(52, Node.LENGTH);
2067:       assertEquals(50, Node.FREE_CALL);
2068:       assertEquals(54, Node.SLASH_V);
2069:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2070:       assertEquals(57, Node.REFLECTED_OBJECT);
2071:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2072:       assertEquals(57, Node.LAST_PROP);
2073:       assertEquals(8, Node.FLAG_NO_THROWS);
2074:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2075:       assertEquals(1, Node.DECR_FLAG);
2076:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2077:       assertEquals(39, Node.EMPTY_BLOCK);
2078:       assertEquals(12, Node.COLUMN_BITS);
2079:       assertEquals(4095, Node.COLUMN_MASK);
2080:       assertEquals(55, Node.INFERRED_FUNCTION);
2081:       assertEquals(32, Node.INCRDECR_PROP);
2082:       assertEquals(56, Node.CHANGE_TIME);
2083:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2084:       assertEquals(48, Node.DIRECTIVES);
2085:       assertEquals(49, Node.DIRECT_EVAL);
2086:       assertEquals(37, Node.OPT_ARG_NAME);
2087:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2088:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2089:       assertEquals(47, Node.IS_DISPATCHER);
2090:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2091:       assertEquals(36, Node.QUOTED_PROP);
2092:       assertEquals(29, Node.JSDOC_INFO_PROP);
2093:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2094:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2095:       assertEquals(53, Node.INPUT_ID);
2096:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2097:       assertEquals(30, Node.VAR_ARGS_NAME);
2098:       assertEquals(46, Node.IS_NAMESPACE);
2099:       assertEquals(2, Node.POST_FLAG);
2100:       assertEquals(43, Node.IS_CONSTANT_NAME);
2101:       assertEquals(40, Node.ORIGINALNAME_PROP);
2102:       
2103:       boolean boolean0 = node3.isOnlyModifiesThisCall();
2104:       assertFalse(boolean0);
2105:       assertSame(node0, node4);
2106:       assertSame(node0, node3);
2107:       assertNotSame(node1, node2);
2108:       assertNotSame(node2, node1);
2109:       assertSame(node3, node4);
2110:       assertSame(node3, node0);
2111:       assertFalse(node0.isCatch());
2112:       assertFalse(node0.isNull());
2113:       assertFalse(node0.isSetterDef());
2114:       assertFalse(node0.isTrue());
2115:       assertFalse(node0.isParamList());
2116:       assertFalse(node0.isDebugger());
2117:       assertFalse(node0.isVar());
2118:       assertFalse(node0.isArrayLit());
2119:       assertFalse(node0.isStringKey());
2120:       assertFalse(node0.isAdd());
2121:       assertFalse(node0.isEmpty());
2122:       assertFalse(node0.isNew());
2123:       assertFalse(node0.isDefaultCase());
2124:       assertFalse(node0.isFunction());
2125:       assertEquals(0, node0.getChildCount());
2126:       assertFalse(node0.isContinue());
2127:       assertFalse(node0.isAssignAdd());
2128:       assertFalse(node0.isDo());
2129:       assertTrue(node0.isNumber());
2130:       assertFalse(node0.isString());
2131:       assertFalse(node0.isOr());
2132:       assertFalse(node0.isCall());
2133:       assertEquals(42, node0.getLineno());
2134:       assertFalse(node0.isName());
2135:       assertFalse(node0.isGetElem());
2136:       assertFalse(node0.isDelProp());
2137:       assertFalse(node0.isVoid());
2138:       assertFalse(node0.isBreak());
2139:       assertFalse(node0.isTypeOf());
2140:       assertFalse(node0.isExprResult());
2141:       assertFalse(node0.isWhile());
2142:       assertFalse(node0.isAssign());
2143:       assertFalse(node0.isReturn());
2144:       assertFalse(node0.hasChildren());
2145:       assertFalse(node0.isDec());
2146:       assertFalse(node0.isComma());
2147:       assertFalse(node0.isAnd());
2148:       assertFalse(node0.isInstanceOf());
2149:       assertFalse(node0.isGetProp());
2150:       assertFalse(node0.isScript());
2151:       assertEquals(172078, node0.getSourcePosition());
2152:       assertFalse(node0.isNot());
2153:       assertFalse(node0.isObjectLit());
2154:       assertFalse(node0.isThrow());
2155:       assertFalse(node0.isCast());
2156:       assertFalse(node0.isLabelName());
2157:       assertFalse(node0.isLabel());
2158:       assertFalse(node0.isFalse());
2159:       assertEquals(46, node0.getCharno());
2160:       assertFalse(node0.hasMoreThanOneChild());
2161:       assertFalse(node0.isIn());
2162:       assertFalse(node0.isCase());
2163:       assertFalse(node0.isNE());
2164:       assertFalse(node0.isSwitch());
2165:       assertFalse(node0.isInc());
2166:       assertFalse(node0.isIf());
2167:       assertFalse(node0.isGetterDef());
2168:       assertFalse(node0.isHook());
2169:       assertFalse(node0.isTry());
2170:       assertFalse(node0.hasOneChild());
2171:       assertFalse(node0.isRegExp());
2172:       assertFalse(node0.isThis());
2173:       assertEquals(39, node0.getType());
2174:       assertFalse(node0.isFor());
2175:       assertFalse(node0.isBlock());
2176:       assertFalse(node0.isWith());
2177:       assertFalse(node1.isHook());
2178:       assertFalse(node1.isSwitch());
2179:       assertFalse(node1.isInc());
2180:       assertFalse(node1.isBreak());
2181:       assertFalse(node1.isThrow());
2182:       assertFalse(node1.isComma());
2183:       assertFalse(node1.isThis());
2184:       assertFalse(node1.isFalse());
2185:       assertFalse(node1.isIn());
2186:       assertFalse(node1.isInstanceOf());
2187:       assertTrue(node1.hasChildren());
2188:       assertFalse(node1.isDelProp());
2189:       assertFalse(node1.isIf());
2190:       assertFalse(node1.isEmpty());
2191:       assertFalse(node1.isNE());
2192:       assertFalse(node1.isArrayLit());
2193:       assertFalse(node1.isDefaultCase());
2194:       assertFalse(node1.isLabelName());
2195:       assertFalse(node1.isTry());
2196:       assertFalse(node1.isWith());
2197:       assertFalse(node1.isFor());
2198:       assertFalse(node1.isCatch());
2199:       assertFalse(node1.isRegExp());
2200:       assertEquals(1, node1.getChildCount());
2201:       assertFalse(node1.isParamList());
2202:       assertFalse(node1.isCase());
2203:       assertFalse(node1.isStringKey());
2204:       assertFalse(node1.isScript());
2205:       assertEquals((-1), node1.getCharno());
2206:       assertFalse(node1.isNumber());
2207:       assertFalse(node1.isGetterDef());
2208:       assertFalse(node1.isBlock());
2209:       assertFalse(node1.isAdd());
2210:       assertFalse(node1.isVar());
2211:       assertFalse(node1.isNew());
2212:       assertFalse(node1.isName());
2213:       assertFalse(node1.isWhile());
2214:       assertFalse(node1.isCall());
2215:       assertFalse(node1.hasMoreThanOneChild());
2216:       assertFalse(node1.isContinue());
2217:       assertEquals((-1), node1.getLineno());
2218:       assertFalse(node1.isLabel());
2219:       assertFalse(node1.isAssignAdd());
2220:       assertEquals(1200, node1.getType());
2221:       assertFalse(node1.isSetterDef());
2222:       assertFalse(node1.isDo());
2223:       assertFalse(node1.isNull());
2224:       assertFalse(node1.isOr());
2225:       assertFalse(node1.isExprResult());
2226:       assertFalse(node1.isTrue());
2227:       assertFalse(node1.isVoid());
2228:       assertTrue(node1.hasOneChild());
2229:       assertFalse(node1.isGetElem());
2230:       assertFalse(node1.isCast());
2231:       assertFalse(node1.isFunction());
2232:       assertFalse(node1.isDec());
2233:       assertFalse(node1.isAssign());
2234:       assertFalse(node1.isTypeOf());
2235:       assertFalse(node1.isReturn());
2236:       assertFalse(node1.isGetProp());
2237:       assertFalse(node1.isAnd());
2238:       assertFalse(node1.isString());
2239:       assertFalse(node1.isDebugger());
2240:       assertEquals((-1), node1.getSourcePosition());
2241:       assertFalse(node1.isObjectLit());
2242:       assertFalse(node1.isNot());
2243:       assertFalse(node2.isDo());
2244:       assertFalse(node2.isNew());
2245:       assertFalse(node2.isContinue());
2246:       assertFalse(node2.isAdd());
2247:       assertFalse(node2.hasMoreThanOneChild());
2248:       assertFalse(node2.isBlock());
2249:       assertEquals(46, node2.getCharno());
2250:       assertFalse(node2.isLabel());
2251:       assertFalse(node2.isAssignAdd());
2252:       assertFalse(node2.isWhile());
2253:       assertFalse(node2.isReturn());
2254:       assertFalse(node2.isVar());
2255:       assertFalse(node2.isNumber());
2256:       assertFalse(node2.isLabelName());
2257:       assertFalse(node2.isCast());
2258:       assertFalse(node2.isStringKey());
2259:       assertFalse(node2.isParamList());
2260:       assertEquals((-2107), node2.getType());
2261:       assertFalse(node2.isFunction());
2262:       assertFalse(node2.isWith());
2263:       assertFalse(node2.isRegExp());
2264:       assertFalse(node2.isCatch());
2265:       assertFalse(node2.isScript());
2266:       assertFalse(node2.isInstanceOf());
2267:       assertFalse(node2.isTry());
2268:       assertFalse(node2.isThis());
2269:       assertFalse(node2.isFor());
2270:       assertFalse(node2.isIf());
2271:       assertFalse(node2.isSetterDef());
2272:       assertTrue(node2.hasChildren());
2273:       assertFalse(node2.isIn());
2274:       assertFalse(node2.isNE());
2275:       assertFalse(node2.isSwitch());
2276:       assertFalse(node2.isCase());
2277:       assertFalse(node2.isString());
2278:       assertFalse(node2.isInc());
2279:       assertFalse(node2.isHook());
2280:       assertEquals(1, node2.getChildCount());
2281:       assertFalse(node2.isThrow());
2282:       assertEquals(172078, node2.getSourcePosition());
2283:       assertFalse(node2.isGetterDef());
2284:       assertFalse(node2.isFalse());
2285:       assertFalse(node2.isGetProp());
2286:       assertFalse(node2.isArrayLit());
2287:       assertFalse(node2.isObjectLit());
2288:       assertFalse(node2.isDebugger());
2289:       assertFalse(node2.isAnd());
2290:       assertFalse(node2.isDefaultCase());
2291:       assertFalse(node2.isVoid());
2292:       assertFalse(node2.isNot());
2293:       assertFalse(node2.isExprResult());
2294:       assertTrue(node2.hasOneChild());
2295:       assertEquals(42, node2.getLineno());
2296:       assertFalse(node2.isDec());
2297:       assertFalse(node2.isTypeOf());
2298:       assertFalse(node2.isNull());
2299:       assertFalse(node2.isBreak());
2300:       assertFalse(node2.isComma());
2301:       assertFalse(node2.isDelProp());
2302:       assertFalse(node2.isAssign());
2303:       assertFalse(node2.isGetElem());
2304:       assertFalse(node2.isCall());
2305:       assertFalse(node2.isEmpty());
2306:       assertFalse(node2.isOr());
2307:       assertFalse(node2.isName());
2308:       assertFalse(node2.isTrue());
2309:       assertFalse(node3.hasOneChild());
2310:       assertFalse(node3.isCast());
2311:       assertFalse(node3.isGetElem());
2312:       assertFalse(node3.isLabelName());
2313:       assertFalse(node3.isTypeOf());
2314:       assertFalse(node3.hasChildren());
2315:       assertFalse(node3.isExprResult());
2316:       assertEquals(46, node3.getCharno());
2317:       assertFalse(node3.isLabel());
2318:       assertFalse(node3.isWith());
2319:       assertFalse(node3.isAssign());
2320:       assertFalse(node3.isDec());
2321:       assertFalse(node3.isInstanceOf());
2322:       assertFalse(node3.hasMoreThanOneChild());
2323:       assertFalse(node3.isAssignAdd());
2324:       assertFalse(node3.isDo());
2325:       assertFalse(node3.isOr());
2326:       assertFalse(node3.isCall());
2327:       assertFalse(node3.isThrow());
2328:       assertFalse(node3.isName());
2329:       assertFalse(node3.isBreak());
2330:       assertFalse(node3.isWhile());
2331:       assertFalse(node3.isContinue());
2332:       assertFalse(node3.isFalse());
2333:       assertFalse(node3.isComma());
2334:       assertFalse(node3.isReturn());
2335:       assertFalse(node3.isAnd());
2336:       assertFalse(node3.isGetProp());
2337:       assertTrue(node3.isNumber());
2338:       assertEquals(172078, node3.getSourcePosition());
2339:       assertFalse(node3.isString());
2340:       assertFalse(node3.isDebugger());
2341:       assertFalse(node3.isObjectLit());
2342:       assertFalse(node3.isNot());
2343:       assertFalse(node3.isArrayLit());
2344:       assertEquals(42, node3.getLineno());
2345:       assertFalse(node3.isDelProp());
2346:       assertFalse(node3.isVoid());
2347:       assertFalse(node3.isTry());
2348:       assertFalse(node3.isRegExp());
2349:       assertFalse(node3.isDefaultCase());
2350:       assertFalse(node3.isFor());
2351:       assertFalse(node3.isFunction());
2352:       assertFalse(node3.isIn());
2353:       assertFalse(node3.isCatch());
2354:       assertFalse(node3.isNull());
2355:       assertFalse(node3.isSetterDef());
2356:       assertFalse(node3.isIf());
2357:       assertFalse(node3.isTrue());
2358:       assertFalse(node3.isInc());
2359:       assertFalse(node3.isEmpty());
2360:       assertFalse(node3.isNE());
2361:       assertFalse(node3.isHook());
2362:       assertFalse(node3.isVar());
2363:       assertFalse(node3.isStringKey());
2364:       assertFalse(node3.isAdd());
2365:       assertFalse(node3.isNew());
2366:       assertFalse(node3.isThis());
2367:       assertFalse(node3.isBlock());
2368:       assertEquals(39, node3.getType());
2369:       assertEquals(0, node3.getChildCount());
2370:       assertFalse(node3.isCase());
2371:       assertFalse(node3.isScript());
2372:       assertFalse(node3.isSwitch());
2373:       assertFalse(node3.isParamList());
2374:       assertFalse(node3.isGetterDef());
2375:       assertEquals(52, Node.LENGTH);
2376:       assertEquals(50, Node.FREE_CALL);
2377:       assertEquals(54, Node.SLASH_V);
2378:       
2379:       boolean boolean1 = node1.isOnlyModifiesArgumentsCall();
2380:       assertFalse(boolean1);
2381:       assertSame(node0, node4);
2382:       assertSame(node0, node3);
2383:       assertNotSame(node1, node2);
2384:       assertFalse(node0.isCatch());
2385:       assertFalse(node0.isNull());
2386:       assertFalse(node0.isSetterDef());
2387:       assertFalse(node0.isTrue());
2388:       assertFalse(node0.isParamList());
2389:       assertFalse(node0.isDebugger());
2390:       assertFalse(node0.isVar());
2391:       assertFalse(node0.isArrayLit());
2392:       assertFalse(node0.isStringKey());
2393:       assertFalse(node0.isAdd());
2394:       assertFalse(node0.isEmpty());
2395:       assertFalse(node0.isNew());
2396:       assertFalse(node0.isDefaultCase());
2397:       assertFalse(node0.isFunction());
2398:       assertEquals(0, node0.getChildCount());
2399:       assertFalse(node0.isContinue());
2400:       assertFalse(node0.isAssignAdd());
2401:       assertFalse(node0.isDo());
2402:       assertTrue(node0.isNumber());
2403:       assertFalse(node0.isString());
2404:       assertFalse(node0.isOr());
2405:       assertFalse(node0.isCall());
2406:       assertEquals(42, node0.getLineno());
2407:       assertFalse(node0.isName());
2408:       assertFalse(node0.isGetElem());
2409:       assertFalse(node0.isDelProp());
2410:       assertFalse(node0.isVoid());
2411:       assertFalse(node0.isBreak());
2412:       assertFalse(node0.isTypeOf());
2413:       assertFalse(node0.isExprResult());
2414:       assertFalse(node0.isWhile());
2415:       assertFalse(node0.isAssign());
2416:       assertFalse(node0.isReturn());
2417:       assertFalse(node0.hasChildren());
2418:       assertFalse(node0.isDec());
2419:       assertFalse(node0.isComma());
2420:       assertFalse(node0.isAnd());
2421:       assertFalse(node0.isInstanceOf());
2422:       assertFalse(node0.isGetProp());
2423:       assertFalse(node0.isScript());
2424:       assertEquals(172078, node0.getSourcePosition());
2425:       assertFalse(node0.isNot());
2426:       assertFalse(node0.isObjectLit());
2427:       assertFalse(node0.isThrow());
2428:       assertFalse(node0.isCast());
2429:       assertFalse(node0.isLabelName());
2430:       assertFalse(node0.isLabel());
2431:       assertFalse(node0.isFalse());
2432:       assertEquals(46, node0.getCharno());
2433:       assertFalse(node0.hasMoreThanOneChild());
2434:       assertFalse(node0.isIn());
2435:       assertFalse(node0.isCase());
2436:       assertFalse(node0.isNE());
2437:       assertFalse(node0.isSwitch());
2438:       assertFalse(node0.isInc());
2439:       assertFalse(node0.isIf());
2440:       assertFalse(node0.isGetterDef());
2441:       assertFalse(node0.isHook());
2442:       assertFalse(node0.isTry());
2443:       assertFalse(node0.hasOneChild());
2444:       assertFalse(node0.isRegExp());
2445:       assertFalse(node0.isThis());
2446:       assertEquals(39, node0.getType());
2447:       assertFalse(node0.isFor());
2448:       assertFalse(node0.isBlock());
2449:       assertFalse(node0.isWith());
2450:       assertFalse(node1.isHook());
2451:       assertFalse(node1.isSwitch());
2452:       assertFalse(node1.isInc());
2453:       assertFalse(node1.isBreak());
2454:       assertFalse(node1.isThrow());
2455:       assertFalse(node1.isComma());
2456:       assertFalse(node1.isThis());
2457:       assertFalse(node1.isFalse());
2458:       assertFalse(node1.isIn());
2459:       assertFalse(node1.isInstanceOf());
2460:       assertTrue(node1.hasChildren());
2461:       assertFalse(node1.isDelProp());
2462:       assertFalse(node1.isIf());
2463:       assertFalse(node1.isEmpty());
2464:       assertFalse(node1.isNE());
2465:       assertFalse(node1.isArrayLit());
2466:       assertFalse(node1.isDefaultCase());
2467:       assertFalse(node1.isLabelName());
2468:       assertFalse(node1.isTry());
2469:       assertFalse(node1.isWith());
2470:       assertFalse(node1.isFor());
2471:       assertFalse(node1.isCatch());
2472:       assertFalse(node1.isRegExp());
2473:       assertEquals(1, node1.getChildCount());
2474:       assertFalse(node1.isParamList());
2475:       assertFalse(node1.isCase());
2476:       assertFalse(node1.isStringKey());
2477:       assertFalse(node1.isScript());
2478:       assertEquals((-1), node1.getCharno());
2479:       assertFalse(node1.isNumber());
2480:       assertFalse(node1.isGetterDef());
2481:       assertFalse(node1.isBlock());
2482:       assertFalse(node1.isAdd());
2483:       assertFalse(node1.isVar());
2484:       assertFalse(node1.isNew());
2485:       assertFalse(node1.isName());
2486:       assertFalse(node1.isWhile());
2487:       assertFalse(node1.isCall());
2488:       assertFalse(node1.hasMoreThanOneChild());
2489:       assertFalse(node1.isContinue());
2490:       assertEquals((-1), node1.getLineno());
2491:       assertFalse(node1.isLabel());
2492:       assertFalse(node1.isAssignAdd());
2493:       assertEquals(1200, node1.getType());
2494:       assertFalse(node1.isSetterDef());
2495:       assertFalse(node1.isDo());
2496:       assertFalse(node1.isNull());
2497:       assertFalse(node1.isOr());
2498:       assertFalse(node1.isExprResult());
2499:       assertFalse(node1.isTrue());
2500:       assertFalse(node1.isVoid());
2501:       assertTrue(node1.hasOneChild());
2502:       assertFalse(node1.isGetElem());
2503:       assertFalse(node1.isCast());
2504:       assertFalse(node1.isFunction());
2505:       assertFalse(node1.isDec());
2506:       assertFalse(node1.isAssign());
2507:       assertFalse(node1.isTypeOf());
2508:       assertFalse(node1.isReturn());
2509:       assertFalse(node1.isGetProp());
2510:       assertFalse(node1.isAnd());
2511:       assertFalse(node1.isString());
2512:       assertFalse(node1.isDebugger());
2513:       assertEquals((-1), node1.getSourcePosition());
2514:       assertFalse(node1.isObjectLit());
2515:       assertFalse(node1.isNot());
2516:       
2517:       Node node5 = null;
2518:       try {
2519:         node5 = new Node(1200, node2, node0, node2, node2, 323, 296);
2520:         fail("Expecting exception: IllegalArgumentException");
2521:       
2522:       } catch(IllegalArgumentException e) {
2523:          //
2524:          // no message in exception (getMessage() returned null)
2525:          //
2526:          verifyException("com.google.common.base.Preconditions", e);
2527:       }
2528:   }
2529: }
RegularFileObject[/tmp/EvoSuite_121_1628159281917/com/google/javascript/rhino/Node_121_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:02 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_121_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_121_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.common.collect.Iterables",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_121_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.jstype.ArrowType",
322:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
323:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
324:       "com.google.javascript.rhino.jstype.InstanceObjectType",
325:       "com.google.javascript.rhino.jstype.Property",
326:       "com.google.common.collect.Lists",
327:       "com.google.javascript.rhino.jstype.NoObjectType",
328:       "com.google.javascript.rhino.jstype.NoType",
329:       "com.google.javascript.rhino.jstype.NoResolvedType",
330:       "com.google.common.collect.SingletonImmutableList",
331:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
332:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
333:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
334:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
335:       "com.google.javascript.rhino.jstype.UnionType",
336:       "com.google.javascript.rhino.jstype.FunctionBuilder",
337:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.common.base.Objects",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.javascript.rhino.jstype.EnumType",
347:       "com.google.javascript.rhino.jstype.EnumElementType",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.NamedType",
350:       "com.google.common.collect.Sets",
351:       "com.google.javascript.rhino.InputId",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.javascript.rhino.jstype.TernaryValue",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.javascript.rhino.jstype.JSType$2",
363:       "com.google.javascript.rhino.jstype.JSType$TypePair",
364:       "com.google.common.collect.ImmutableList$1",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
367:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
369:       "com.google.common.collect.Platform",
370:       "com.google.javascript.rhino.JSTypeExpression",
371:       "com.google.common.collect.FluentIterable",
372:       "com.google.common.collect.Iterables$2",
373:       "com.google.common.collect.TransformedIterator",
374:       "com.google.common.collect.Iterables$3",
375:       "com.google.common.collect.Iterators$5",
376:       "com.google.common.collect.Iterators$12",
377:       "com.google.javascript.rhino.JSDocInfo$Visibility",
378:       "com.google.javascript.rhino.jstype.NamespaceType",
379:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
380:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
381:     );
382:   }
383: }

[MASTER] 10:28:02.484 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((double) (-2107), (-740), 1200);
assertNotNull(node0);
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

int int0 = (-1014);
Node node1 = new Node(1200, node0, (-1014), 0);
assertNotNull(node1);
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(1200, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);

Node node2 = new Node((-2107), node1, node1, 42, 46);
assertNotNull(node2);
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(1200, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isContinue());
assertFalse(node2.isAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertEquals(46, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isVar());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals((-2107), node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isThrow());
assertEquals(172078, node2.getSourcePosition());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isNot());
assertFalse(node2.isExprResult());
assertTrue(node2.hasOneChild());
assertEquals(42, node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

Node node3 = node0.copyInformationFromForTree(node2);
assertSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertSame(node3, node0);
assertNotNull(node3);
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertEquals(42, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertEquals(172078, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertEquals(46, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(1200, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isContinue());
assertFalse(node2.isAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertEquals(46, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isVar());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals((-2107), node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isThrow());
assertEquals(172078, node2.getSourcePosition());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isNot());
assertFalse(node2.isExprResult());
assertTrue(node2.hasOneChild());
assertEquals(42, node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isExprResult());
assertEquals(46, node3.getCharno());
assertFalse(node3.isLabel());
assertFalse(node3.isWith());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isOr());
assertFalse(node3.isCall());
assertFalse(node3.isThrow());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertTrue(node3.isNumber());
assertEquals(172078, node3.getSourcePosition());
assertFalse(node3.isString());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isArrayLit());
assertEquals(42, node3.getLineno());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isFunction());
assertFalse(node3.isIn());
assertFalse(node3.isCatch());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isInc());
assertFalse(node3.isEmpty());
assertFalse(node3.isNE());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertEquals(39, node3.getType());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

Iterable<Node> iterable0 = node3.children();
assertSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertSame(node3, node0);
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertEquals(42, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertEquals(172078, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertEquals(46, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(1200, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isContinue());
assertFalse(node2.isAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertEquals(46, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isVar());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals((-2107), node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isThrow());
assertEquals(172078, node2.getSourcePosition());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isNot());
assertFalse(node2.isExprResult());
assertTrue(node2.hasOneChild());
assertEquals(42, node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isExprResult());
assertEquals(46, node3.getCharno());
assertFalse(node3.isLabel());
assertFalse(node3.isWith());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isOr());
assertFalse(node3.isCall());
assertFalse(node3.isThrow());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertTrue(node3.isNumber());
assertEquals(172078, node3.getSourcePosition());
assertFalse(node3.isString());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isArrayLit());
assertEquals(42, node3.getLineno());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isFunction());
assertFalse(node3.isIn());
assertFalse(node3.isCatch());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isInc());
assertFalse(node3.isEmpty());
assertFalse(node3.isNE());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertEquals(39, node3.getType());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

Node node4 = node0.srcrefTree(node3);
assertSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertSame(node3, node4);
assertSame(node3, node0);
assertSame(node4, node0);
assertSame(node4, node3);
assertNotNull(node4);
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertEquals(42, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertEquals(172078, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertEquals(46, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(1200, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isContinue());
assertFalse(node2.isAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertEquals(46, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isVar());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals((-2107), node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isThrow());
assertEquals(172078, node2.getSourcePosition());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isNot());
assertFalse(node2.isExprResult());
assertTrue(node2.hasOneChild());
assertEquals(42, node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isExprResult());
assertEquals(46, node3.getCharno());
assertFalse(node3.isLabel());
assertFalse(node3.isWith());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isOr());
assertFalse(node3.isCall());
assertFalse(node3.isThrow());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertTrue(node3.isNumber());
assertEquals(172078, node3.getSourcePosition());
assertFalse(node3.isString());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isArrayLit());
assertEquals(42, node3.getLineno());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isFunction());
assertFalse(node3.isIn());
assertFalse(node3.isCatch());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isInc());
assertFalse(node3.isEmpty());
assertFalse(node3.isNE());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertEquals(39, node3.getType());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertFalse(node4.isSwitch());
assertFalse(node4.isString());
assertFalse(node4.isInc());
assertFalse(node4.isFalse());
assertFalse(node4.isThrow());
assertFalse(node4.isCase());
assertFalse(node4.isHook());
assertFalse(node4.isThis());
assertFalse(node4.isComma());
assertFalse(node4.isIn());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isBreak());
assertFalse(node4.isEmpty());
assertFalse(node4.isDelProp());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertFalse(node4.isDebugger());
assertFalse(node4.isVoid());
assertFalse(node4.isFunction());
assertFalse(node4.isCast());
assertFalse(node4.isExprResult());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.hasChildren());
assertEquals(42, node4.getLineno());
assertEquals(46, node4.getCharno());
assertFalse(node4.isGetProp());
assertTrue(node4.isNumber());
assertEquals(172078, node4.getSourcePosition());
assertFalse(node4.isAnd());
assertFalse(node4.isNot());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNew());
assertFalse(node4.isCall());
assertFalse(node4.isAdd());
assertFalse(node4.isContinue());
assertFalse(node4.isDo());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isWhile());
assertEquals(39, node4.getType());
assertFalse(node4.isReturn());
assertFalse(node4.isBlock());
assertFalse(node4.isVar());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isTypeOf());
assertFalse(node4.isSetterDef());
assertFalse(node4.isCatch());
assertFalse(node4.isGetElem());
assertFalse(node4.isName());
assertFalse(node4.isNull());
assertFalse(node4.isTrue());
assertFalse(node4.isTry());
assertFalse(node4.isRegExp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isArrayLit());
assertFalse(node4.isScript());
assertFalse(node4.isWith());
assertFalse(node4.isDefaultCase());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isFor());
assertFalse(node4.isParamList());
assertFalse(node4.isLabel());
assertFalse(node4.isStringKey());
assertFalse(node4.isLabelName());
assertFalse(node4.isGetterDef());
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

node0.putBooleanProp(174, false);
assertSame(node0, node4);
assertSame(node0, node3);
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertEquals(42, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertEquals(172078, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertEquals(46, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean0 = node3.isOnlyModifiesThisCall();
assertFalse(boolean0);
assertSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertSame(node3, node4);
assertSame(node3, node0);
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertEquals(42, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertEquals(172078, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertEquals(46, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(1200, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isContinue());
assertFalse(node2.isAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertEquals(46, node2.getCharno());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isVar());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertEquals((-2107), node2.getType());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTry());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.isSetterDef());
assertTrue(node2.hasChildren());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isThrow());
assertEquals(172078, node2.getSourcePosition());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isGetProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isObjectLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isNot());
assertFalse(node2.isExprResult());
assertTrue(node2.hasOneChild());
assertEquals(42, node2.getLineno());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node3.hasOneChild());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isExprResult());
assertEquals(46, node3.getCharno());
assertFalse(node3.isLabel());
assertFalse(node3.isWith());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDo());
assertFalse(node3.isOr());
assertFalse(node3.isCall());
assertFalse(node3.isThrow());
assertFalse(node3.isName());
assertFalse(node3.isBreak());
assertFalse(node3.isWhile());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isComma());
assertFalse(node3.isReturn());
assertFalse(node3.isAnd());
assertFalse(node3.isGetProp());
assertTrue(node3.isNumber());
assertEquals(172078, node3.getSourcePosition());
assertFalse(node3.isString());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isArrayLit());
assertEquals(42, node3.getLineno());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isTry());
assertFalse(node3.isRegExp());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFor());
assertFalse(node3.isFunction());
assertFalse(node3.isIn());
assertFalse(node3.isCatch());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIf());
assertFalse(node3.isTrue());
assertFalse(node3.isInc());
assertFalse(node3.isEmpty());
assertFalse(node3.isNE());
assertFalse(node3.isHook());
assertFalse(node3.isVar());
assertFalse(node3.isStringKey());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isThis());
assertFalse(node3.isBlock());
assertEquals(39, node3.getType());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isSwitch());
assertFalse(node3.isParamList());
assertFalse(node3.isGetterDef());
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);

boolean boolean1 = node1.isOnlyModifiesArgumentsCall();
assertFalse(boolean1);
assertSame(node0, node4);
assertSame(node0, node3);
assertNotSame(node1, node2);
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertTrue(node0.isNumber());
assertFalse(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertEquals(42, node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isWhile());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertEquals(172078, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isFalse());
assertEquals(46, node0.getCharno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isNE());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertTrue(node1.hasChildren());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabelName());
assertFalse(node1.isTry());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(1200, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());

Node node5 = new Node(1200, node2, node0, node2, node2, 323, 296);

[MASTER] 10:28:20.218 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_219_1628159300139/com/google/javascript/rhino/Node_219_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_219_1628159300139/com/google/javascript/rhino/Node_219_tmp__ESTest_scaffolding.java]]
[MASTER] 10:28:20.218 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:20.218 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:28:20.219 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 566
[MASTER] 10:28:20.219 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_219_1628159300139/com/google/javascript/rhino/Node_219_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:28:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.common.collect.ImmutableList;
12: import com.google.javascript.rhino.ErrorReporter;
13: import com.google.javascript.rhino.Node;
14: import com.google.javascript.rhino.jstype.JSType;
15: import com.google.javascript.rhino.jstype.JSTypeRegistry;
16: import com.google.javascript.rhino.jstype.TemplateType;
17: import java.util.ArrayList;
18: import java.util.Iterator;
19: import java.util.List;
20: import java.util.ListIterator;
21: import java.util.Stack;
22: import org.evosuite.runtime.EvoRunner;
23: import org.evosuite.runtime.EvoRunnerParameters;
24: import org.evosuite.runtime.testdata.EvoSuiteFile;
25: import org.evosuite.runtime.testdata.FileSystemHandling;
26: import org.junit.runner.RunWith;
27: 
28: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
29: public class Node_219_tmp__ESTest extends Node_219_tmp__ESTest_scaffolding {
30: 
31:   @Test(timeout = 4000)
32:   public void test0()  throws Throwable  {
33:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
34:       assertNotNull(jSTypeRegistry0);
35:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
36:       
37:       ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
38:       assertNotNull(arrayList0);
39:       assertTrue(arrayList0.isEmpty());
40:       assertEquals(0, arrayList0.size());
41:       
42:       ListIterator<TemplateType> listIterator0 = arrayList0.listIterator();
43:       assertNotNull(listIterator0);
44:       assertTrue(arrayList0.isEmpty());
45:       assertEquals(0, arrayList0.size());
46:       assertFalse(listIterator0.hasNext());
47:       assertFalse(listIterator0.hasPrevious());
48:       
49:       boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
50:       assertFalse(boolean0);
51:       
52:       Stack<TemplateType> stack0 = new Stack<TemplateType>();
53:       assertNotNull(stack0);
54:       assertEquals(0, stack0.size());
55:       assertEquals(10, stack0.capacity());
56:       assertEquals("[]", stack0.toString());
57:       assertTrue(stack0.isEmpty());
58:       assertTrue(stack0.empty());
59:       
60:       ListIterator<TemplateType> listIterator1 = stack0.listIterator();
61:       assertNotNull(listIterator1);
62:       assertEquals(0, stack0.size());
63:       assertEquals(10, stack0.capacity());
64:       assertEquals("[]", stack0.toString());
65:       assertTrue(stack0.isEmpty());
66:       assertTrue(stack0.empty());
67:       assertFalse(listIterator1.hasNext());
68:       assertFalse(listIterator1.hasPrevious());
69:       assertFalse(listIterator1.equals((Object)listIterator0));
70:       
71:       ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator1);
72:       assertNotNull(immutableList0);
73:       assertEquals(0, stack0.size());
74:       assertEquals(10, stack0.capacity());
75:       assertEquals("[]", stack0.toString());
76:       assertTrue(stack0.isEmpty());
77:       assertTrue(stack0.empty());
78:       assertFalse(listIterator1.hasNext());
79:       assertFalse(listIterator1.hasPrevious());
80:       assertEquals(0, immutableList0.size());
81:       assertFalse(listIterator1.equals((Object)listIterator0));
82:       
83:       JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
84:       assertNotNull(jSTypeRegistry1);
85:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
86:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
87:       
88:       Node node0 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) immutableList0);
89:       assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
90:       assertNotNull(node0);
91:       assertEquals(0, stack0.size());
92:       assertEquals(10, stack0.capacity());
93:       assertEquals("[]", stack0.toString());
94:       assertTrue(stack0.isEmpty());
95:       assertTrue(stack0.empty());
96:       assertFalse(listIterator1.hasNext());
97:       assertFalse(listIterator1.hasPrevious());
98:       assertEquals(0, immutableList0.size());
99:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
100:       assertFalse(node0.isIf());
101:       assertFalse(node0.isDelProp());
102:       assertFalse(node0.isGetterDef());
103:       assertFalse(node0.isEmpty());
104:       assertFalse(node0.isFor());
105:       assertFalse(node0.isTry());
106:       assertFalse(node0.isRegExp());
107:       assertFalse(node0.isDefaultCase());
108:       assertFalse(node0.isInc());
109:       assertFalse(node0.isVoid());
110:       assertFalse(node0.isCatch());
111:       assertFalse(node0.isIn());
112:       assertFalse(node0.isTrue());
113:       assertFalse(node0.isNE());
114:       assertFalse(node0.isSetterDef());
115:       assertFalse(node0.isBreak());
116:       assertFalse(node0.isComma());
117:       assertFalse(node0.isFalse());
118:       assertFalse(node0.isGetProp());
119:       assertFalse(node0.isCall());
120:       assertFalse(node0.isThrow());
121:       assertFalse(node0.isFunction());
122:       assertFalse(node0.isDebugger());
123:       assertFalse(node0.isNot());
124:       assertFalse(node0.isContinue());
125:       assertFalse(node0.isString());
126:       assertTrue(node0.isParamList());
127:       assertFalse(node0.isObjectLit());
128:       assertFalse(node0.isAnd());
129:       assertFalse(node0.isTypeOf());
130:       assertEquals((-1), node0.getSourcePosition());
131:       assertFalse(node0.isNumber());
132:       assertFalse(node0.hasChildren());
133:       assertFalse(node0.isAssign());
134:       assertFalse(node0.isDec());
135:       assertFalse(node0.isGetElem());
136:       assertFalse(node0.isCast());
137:       assertFalse(node0.hasMoreThanOneChild());
138:       assertFalse(node0.hasOneChild());
139:       assertFalse(node0.isLabel());
140:       assertFalse(node0.isAssignAdd());
141:       assertFalse(node0.isReturn());
142:       assertFalse(node0.isWhile());
143:       assertFalse(node0.isNew());
144:       assertFalse(node0.isDo());
145:       assertFalse(node0.isAdd());
146:       assertFalse(node0.isWith());
147:       assertFalse(node0.isExprResult());
148:       assertFalse(node0.isOr());
149:       assertEquals((-1), node0.getLineno());
150:       assertFalse(node0.isName());
151:       assertFalse(node0.isNull());
152:       assertEquals(83, node0.getType());
153:       assertFalse(node0.isThis());
154:       assertFalse(node0.isInstanceOf());
155:       assertFalse(node0.isVar());
156:       assertFalse(node0.isHook());
157:       assertEquals(0, node0.getChildCount());
158:       assertFalse(node0.isBlock());
159:       assertFalse(node0.isScript());
160:       assertFalse(node0.isSwitch());
161:       assertEquals((-1), node0.getCharno());
162:       assertFalse(node0.isCase());
163:       assertFalse(node0.isArrayLit());
164:       assertFalse(node0.isLabelName());
165:       assertFalse(node0.isStringKey());
166:       assertEquals(36, Node.QUOTED_PROP);
167:       assertEquals(43, Node.IS_CONSTANT_NAME);
168:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
170:       assertEquals(4095, Node.COLUMN_MASK);
171:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
172:       assertEquals(32, Node.INCRDECR_PROP);
173:       assertEquals(51, Node.STATIC_SOURCE_FILE);
174:       assertEquals(46, Node.IS_NAMESPACE);
175:       assertEquals(50, Node.FREE_CALL);
176:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
177:       assertEquals(54, Node.SLASH_V);
178:       assertEquals(15, Node.NO_SIDE_EFFECTS);
179:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
180:       assertEquals(49, Node.DIRECT_EVAL);
181:       assertEquals(1, Node.DECR_FLAG);
182:       assertEquals(57, Node.LAST_PROP);
183:       assertEquals(12, Node.COLUMN_BITS);
184:       assertEquals(40, Node.ORIGINALNAME_PROP);
185:       assertEquals(30, Node.VAR_ARGS_NAME);
186:       assertEquals(2, Node.POST_FLAG);
187:       assertEquals(56, Node.CHANGE_TIME);
188:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
189:       assertEquals(37, Node.OPT_ARG_NAME);
190:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
191:       assertEquals(39, Node.EMPTY_BLOCK);
192:       assertEquals(47, Node.IS_DISPATCHER);
193:       assertEquals(48, Node.DIRECTIVES);
194:       assertEquals(55, Node.INFERRED_FUNCTION);
195:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
196:       assertEquals(57, Node.REFLECTED_OBJECT);
197:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
198:       assertEquals(29, Node.JSDOC_INFO_PROP);
199:       assertEquals(53, Node.INPUT_ID);
200:       assertEquals(52, Node.LENGTH);
201:       assertEquals(8, Node.FLAG_NO_THROWS);
202:       assertFalse(listIterator1.equals((Object)listIterator0));
203:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
204:       
205:       boolean boolean1 = node0.hasChild(node0);
206:       assertFalse(boolean1);
207:       assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
208:       assertEquals(0, stack0.size());
209:       assertEquals(10, stack0.capacity());
210:       assertEquals("[]", stack0.toString());
211:       assertTrue(stack0.isEmpty());
212:       assertTrue(stack0.empty());
213:       assertFalse(listIterator1.hasNext());
214:       assertFalse(listIterator1.hasPrevious());
215:       assertEquals(0, immutableList0.size());
216:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
217:       assertFalse(node0.isIf());
218:       assertFalse(node0.isDelProp());
219:       assertFalse(node0.isGetterDef());
220:       assertFalse(node0.isEmpty());
221:       assertFalse(node0.isFor());
222:       assertFalse(node0.isTry());
223:       assertFalse(node0.isRegExp());
224:       assertFalse(node0.isDefaultCase());
225:       assertFalse(node0.isInc());
226:       assertFalse(node0.isVoid());
227:       assertFalse(node0.isCatch());
228:       assertFalse(node0.isIn());
229:       assertFalse(node0.isTrue());
230:       assertFalse(node0.isNE());
231:       assertFalse(node0.isSetterDef());
232:       assertFalse(node0.isBreak());
233:       assertFalse(node0.isComma());
234:       assertFalse(node0.isFalse());
235:       assertFalse(node0.isGetProp());
236:       assertFalse(node0.isCall());
237:       assertFalse(node0.isThrow());
238:       assertFalse(node0.isFunction());
239:       assertFalse(node0.isDebugger());
240:       assertFalse(node0.isNot());
241:       assertFalse(node0.isContinue());
242:       assertFalse(node0.isString());
243:       assertTrue(node0.isParamList());
244:       assertFalse(node0.isObjectLit());
245:       assertFalse(node0.isAnd());
246:       assertFalse(node0.isTypeOf());
247:       assertEquals((-1), node0.getSourcePosition());
248:       assertFalse(node0.isNumber());
249:       assertFalse(node0.hasChildren());
250:       assertFalse(node0.isAssign());
251:       assertFalse(node0.isDec());
252:       assertFalse(node0.isGetElem());
253:       assertFalse(node0.isCast());
254:       assertFalse(node0.hasMoreThanOneChild());
255:       assertFalse(node0.hasOneChild());
256:       assertFalse(node0.isLabel());
257:       assertFalse(node0.isAssignAdd());
258:       assertFalse(node0.isReturn());
259:       assertFalse(node0.isWhile());
260:       assertFalse(node0.isNew());
261:       assertFalse(node0.isDo());
262:       assertFalse(node0.isAdd());
263:       assertFalse(node0.isWith());
264:       assertFalse(node0.isExprResult());
265:       assertFalse(node0.isOr());
266:       assertEquals((-1), node0.getLineno());
267:       assertFalse(node0.isName());
268:       assertFalse(node0.isNull());
269:       assertEquals(83, node0.getType());
270:       assertFalse(node0.isThis());
271:       assertFalse(node0.isInstanceOf());
272:       assertFalse(node0.isVar());
273:       assertFalse(node0.isHook());
274:       assertEquals(0, node0.getChildCount());
275:       assertFalse(node0.isBlock());
276:       assertFalse(node0.isScript());
277:       assertFalse(node0.isSwitch());
278:       assertEquals((-1), node0.getCharno());
279:       assertFalse(node0.isCase());
280:       assertFalse(node0.isArrayLit());
281:       assertFalse(node0.isLabelName());
282:       assertFalse(node0.isStringKey());
283:       assertEquals(36, Node.QUOTED_PROP);
284:       assertEquals(43, Node.IS_CONSTANT_NAME);
285:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
286:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
287:       assertEquals(4095, Node.COLUMN_MASK);
288:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
289:       assertEquals(32, Node.INCRDECR_PROP);
290:       assertEquals(51, Node.STATIC_SOURCE_FILE);
291:       assertEquals(46, Node.IS_NAMESPACE);
292:       assertEquals(50, Node.FREE_CALL);
293:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
294:       assertEquals(54, Node.SLASH_V);
295:       assertEquals(15, Node.NO_SIDE_EFFECTS);
296:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
297:       assertEquals(49, Node.DIRECT_EVAL);
298:       assertEquals(1, Node.DECR_FLAG);
299:       assertEquals(57, Node.LAST_PROP);
300:       assertEquals(12, Node.COLUMN_BITS);
301:       assertEquals(40, Node.ORIGINALNAME_PROP);
302:       assertEquals(30, Node.VAR_ARGS_NAME);
303:       assertEquals(2, Node.POST_FLAG);
304:       assertEquals(56, Node.CHANGE_TIME);
305:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
306:       assertEquals(37, Node.OPT_ARG_NAME);
307:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
308:       assertEquals(39, Node.EMPTY_BLOCK);
309:       assertEquals(47, Node.IS_DISPATCHER);
310:       assertEquals(48, Node.DIRECTIVES);
311:       assertEquals(55, Node.INFERRED_FUNCTION);
312:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
313:       assertEquals(57, Node.REFLECTED_OBJECT);
314:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
315:       assertEquals(29, Node.JSDOC_INFO_PROP);
316:       assertEquals(53, Node.INPUT_ID);
317:       assertEquals(52, Node.LENGTH);
318:       assertEquals(8, Node.FLAG_NO_THROWS);
319:       assertFalse(listIterator1.equals((Object)listIterator0));
320:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
321:       assertTrue(boolean1 == boolean0);
322:       
323:       Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
324:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
325:       assertNotSame(node1, node0);
326:       assertNotNull(node1);
327:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
328:       assertEquals(0, stack0.size());
329:       assertEquals(10, stack0.capacity());
330:       assertEquals("[]", stack0.toString());
331:       assertTrue(stack0.isEmpty());
332:       assertTrue(stack0.empty());
333:       assertFalse(listIterator1.hasNext());
334:       assertFalse(listIterator1.hasPrevious());
335:       assertEquals(0, immutableList0.size());
336:       assertFalse(node1.isVoid());
337:       assertFalse(node1.isTry());
338:       assertFalse(node1.isFunction());
339:       assertFalse(node1.isRegExp());
340:       assertFalse(node1.isTrue());
341:       assertFalse(node1.isDebugger());
342:       assertFalse(node1.isEmpty());
343:       assertFalse(node1.isFor());
344:       assertFalse(node1.isDefaultCase());
345:       assertFalse(node1.isIn());
346:       assertFalse(node1.isNull());
347:       assertFalse(node1.isNE());
348:       assertFalse(node1.isName());
349:       assertFalse(node1.isCatch());
350:       assertFalse(node1.isIf());
351:       assertFalse(node1.isDelProp());
352:       assertFalse(node1.isCall());
353:       assertFalse(node1.isThrow());
354:       assertFalse(node1.isWhile());
355:       assertFalse(node1.isString());
356:       assertFalse(node1.isSetterDef());
357:       assertFalse(node1.isInc());
358:       assertFalse(node1.isGetProp());
359:       assertTrue(node1.isParamList());
360:       assertEquals((-1), node1.getSourcePosition());
361:       assertFalse(node1.isFalse());
362:       assertFalse(node1.isContinue());
363:       assertFalse(node1.isAnd());
364:       assertFalse(node1.isCast());
365:       assertFalse(node1.isObjectLit());
366:       assertFalse(node1.isNot());
367:       assertFalse(node1.hasOneChild());
368:       assertFalse(node1.isScript());
369:       assertFalse(node1.isOr());
370:       assertEquals(83, node1.getType());
371:       assertFalse(node1.isDec());
372:       assertFalse(node1.isTypeOf());
373:       assertFalse(node1.isReturn());
374:       assertFalse(node1.isComma());
375:       assertFalse(node1.isThis());
376:       assertFalse(node1.hasChildren());
377:       assertFalse(node1.isGetElem());
378:       assertFalse(node1.isAssign());
379:       assertFalse(node1.isWith());
380:       assertFalse(node1.hasMoreThanOneChild());
381:       assertFalse(node1.isInstanceOf());
382:       assertFalse(node1.isExprResult());
383:       assertEquals((-1), node1.getLineno());
384:       assertFalse(node1.isBreak());
385:       assertFalse(node1.isBlock());
386:       assertFalse(node1.isNew());
387:       assertFalse(node1.isAdd());
388:       assertFalse(node1.isSwitch());
389:       assertFalse(node1.isHook());
390:       assertFalse(node1.isVar());
391:       assertEquals((-1), node1.getCharno());
392:       assertFalse(node1.isCase());
393:       assertFalse(node1.isDo());
394:       assertFalse(node1.isAssignAdd());
395:       assertFalse(node1.isNumber());
396:       assertEquals(0, node1.getChildCount());
397:       assertFalse(node1.isGetterDef());
398:       assertFalse(node1.isLabel());
399:       assertFalse(node1.isStringKey());
400:       assertFalse(node1.isLabelName());
401:       assertFalse(node1.isArrayLit());
402:       assertEquals(8, Node.FLAG_NO_THROWS);
403:       assertEquals(48, Node.DIRECTIVES);
404:       assertEquals(4095, Node.COLUMN_MASK);
405:       assertEquals(55, Node.INFERRED_FUNCTION);
406:       assertEquals(39, Node.EMPTY_BLOCK);
407:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
408:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
409:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
410:       assertEquals(40, Node.ORIGINALNAME_PROP);
411:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
412:       assertEquals(50, Node.FREE_CALL);
413:       assertEquals(43, Node.IS_CONSTANT_NAME);
414:       assertEquals(51, Node.STATIC_SOURCE_FILE);
415:       assertEquals(46, Node.IS_NAMESPACE);
416:       assertEquals(54, Node.SLASH_V);
417:       assertEquals(37, Node.OPT_ARG_NAME);
418:       assertEquals(2, Node.POST_FLAG);
419:       assertEquals(32, Node.INCRDECR_PROP);
420:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
421:       assertEquals(29, Node.JSDOC_INFO_PROP);
422:       assertEquals(1, Node.DECR_FLAG);
423:       assertEquals(30, Node.VAR_ARGS_NAME);
424:       assertEquals(47, Node.IS_DISPATCHER);
425:       assertEquals(57, Node.LAST_PROP);
426:       assertEquals(12, Node.COLUMN_BITS);
427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
428:       assertEquals(53, Node.INPUT_ID);
429:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
430:       assertEquals(52, Node.LENGTH);
431:       assertEquals(15, Node.NO_SIDE_EFFECTS);
432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
434:       assertEquals(49, Node.DIRECT_EVAL);
435:       assertEquals(56, Node.CHANGE_TIME);
436:       assertEquals(36, Node.QUOTED_PROP);
437:       assertEquals(57, Node.REFLECTED_OBJECT);
438:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
439:       assertFalse(listIterator1.equals((Object)listIterator0));
440:       assertFalse(node1.equals((Object)node0));
441:       
442:       boolean boolean2 = node1.isCall();
443:       assertFalse(boolean2);
444:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
445:       assertNotSame(node1, node0);
446:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
447:       assertEquals(0, stack0.size());
448:       assertEquals(10, stack0.capacity());
449:       assertEquals("[]", stack0.toString());
450:       assertTrue(stack0.isEmpty());
451:       assertTrue(stack0.empty());
452:       assertFalse(listIterator1.hasNext());
453:       assertFalse(listIterator1.hasPrevious());
454:       assertEquals(0, immutableList0.size());
455:       assertFalse(node1.isVoid());
456:       assertFalse(node1.isTry());
457:       assertFalse(node1.isFunction());
458:       assertFalse(node1.isRegExp());
459:       assertFalse(node1.isTrue());
460:       assertFalse(node1.isDebugger());
461:       assertFalse(node1.isEmpty());
462:       assertFalse(node1.isFor());
463:       assertFalse(node1.isDefaultCase());
464:       assertFalse(node1.isIn());
465:       assertFalse(node1.isNull());
466:       assertFalse(node1.isNE());
467:       assertFalse(node1.isName());
468:       assertFalse(node1.isCatch());
469:       assertFalse(node1.isIf());
470:       assertFalse(node1.isDelProp());
471:       assertFalse(node1.isCall());
472:       assertFalse(node1.isThrow());
473:       assertFalse(node1.isWhile());
474:       assertFalse(node1.isString());
475:       assertFalse(node1.isSetterDef());
476:       assertFalse(node1.isInc());
477:       assertFalse(node1.isGetProp());
478:       assertTrue(node1.isParamList());
479:       assertEquals((-1), node1.getSourcePosition());
480:       assertFalse(node1.isFalse());
481:       assertFalse(node1.isContinue());
482:       assertFalse(node1.isAnd());
483:       assertFalse(node1.isCast());
484:       assertFalse(node1.isObjectLit());
485:       assertFalse(node1.isNot());
486:       assertFalse(node1.hasOneChild());
487:       assertFalse(node1.isScript());
488:       assertFalse(node1.isOr());
489:       assertEquals(83, node1.getType());
490:       assertFalse(node1.isDec());
491:       assertFalse(node1.isTypeOf());
492:       assertFalse(node1.isReturn());
493:       assertFalse(node1.isComma());
494:       assertFalse(node1.isThis());
495:       assertFalse(node1.hasChildren());
496:       assertFalse(node1.isGetElem());
497:       assertFalse(node1.isAssign());
498:       assertFalse(node1.isWith());
499:       assertFalse(node1.hasMoreThanOneChild());
500:       assertFalse(node1.isInstanceOf());
501:       assertFalse(node1.isExprResult());
502:       assertEquals((-1), node1.getLineno());
503:       assertFalse(node1.isBreak());
504:       assertFalse(node1.isBlock());
505:       assertFalse(node1.isNew());
506:       assertFalse(node1.isAdd());
507:       assertFalse(node1.isSwitch());
508:       assertFalse(node1.isHook());
509:       assertFalse(node1.isVar());
510:       assertEquals((-1), node1.getCharno());
511:       assertFalse(node1.isCase());
512:       assertFalse(node1.isDo());
513:       assertFalse(node1.isAssignAdd());
514:       assertFalse(node1.isNumber());
515:       assertEquals(0, node1.getChildCount());
516:       assertFalse(node1.isGetterDef());
517:       assertFalse(node1.isLabel());
518:       assertFalse(node1.isStringKey());
519:       assertFalse(node1.isLabelName());
520:       assertFalse(node1.isArrayLit());
521:       assertEquals(8, Node.FLAG_NO_THROWS);
522:       assertEquals(48, Node.DIRECTIVES);
523:       assertEquals(4095, Node.COLUMN_MASK);
524:       assertEquals(55, Node.INFERRED_FUNCTION);
525:       assertEquals(39, Node.EMPTY_BLOCK);
526:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
527:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
528:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
529:       assertEquals(40, Node.ORIGINALNAME_PROP);
530:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
531:       assertEquals(50, Node.FREE_CALL);
532:       assertEquals(43, Node.IS_CONSTANT_NAME);
533:       assertEquals(51, Node.STATIC_SOURCE_FILE);
534:       assertEquals(46, Node.IS_NAMESPACE);
535:       assertEquals(54, Node.SLASH_V);
536:       assertEquals(37, Node.OPT_ARG_NAME);
537:       assertEquals(2, Node.POST_FLAG);
538:       assertEquals(32, Node.INCRDECR_PROP);
539:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
540:       assertEquals(29, Node.JSDOC_INFO_PROP);
541:       assertEquals(1, Node.DECR_FLAG);
542:       assertEquals(30, Node.VAR_ARGS_NAME);
543:       assertEquals(47, Node.IS_DISPATCHER);
544:       assertEquals(57, Node.LAST_PROP);
545:       assertEquals(12, Node.COLUMN_BITS);
546:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
547:       assertEquals(53, Node.INPUT_ID);
548:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
549:       assertEquals(52, Node.LENGTH);
550:       assertEquals(15, Node.NO_SIDE_EFFECTS);
551:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
552:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
553:       assertEquals(49, Node.DIRECT_EVAL);
554:       assertEquals(56, Node.CHANGE_TIME);
555:       assertEquals(36, Node.QUOTED_PROP);
556:       assertEquals(57, Node.REFLECTED_OBJECT);
557:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
558:       assertFalse(listIterator1.equals((Object)listIterator0));
559:       assertFalse(node1.equals((Object)node0));
560:       assertTrue(boolean2 == boolean1);
561:       assertTrue(boolean2 == boolean0);
562:       
563:       Iterable<Node> iterable0 = node0.children();
564:       assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
565:       assertNotSame(node0, node1);
566:       assertFalse(iterable0.contains(node1));
567:       assertNotNull(iterable0);
568:       assertEquals(0, stack0.size());
569:       assertEquals(10, stack0.capacity());
570:       assertEquals("[]", stack0.toString());
571:       assertTrue(stack0.isEmpty());
572:       assertTrue(stack0.empty());
573:       assertFalse(listIterator1.hasNext());
574:       assertFalse(listIterator1.hasPrevious());
575:       assertEquals(0, immutableList0.size());
576:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
577:       assertFalse(node0.isIf());
578:       assertFalse(node0.isDelProp());
579:       assertFalse(node0.isGetterDef());
580:       assertFalse(node0.isEmpty());
581:       assertFalse(node0.isFor());
582:       assertFalse(node0.isTry());
583:       assertFalse(node0.isRegExp());
584:       assertFalse(node0.isDefaultCase());
585:       assertFalse(node0.isInc());
586:       assertFalse(node0.isVoid());
587:       assertFalse(node0.isCatch());
588:       assertFalse(node0.isIn());
589:       assertFalse(node0.isTrue());
590:       assertFalse(node0.isNE());
591:       assertFalse(node0.isSetterDef());
592:       assertFalse(node0.isBreak());
593:       assertFalse(node0.isComma());
594:       assertFalse(node0.isFalse());
595:       assertFalse(node0.isGetProp());
596:       assertFalse(node0.isCall());
597:       assertFalse(node0.isThrow());
598:       assertFalse(node0.isFunction());
599:       assertFalse(node0.isDebugger());
600:       assertFalse(node0.isNot());
601:       assertFalse(node0.isContinue());
602:       assertFalse(node0.isString());
603:       assertTrue(node0.isParamList());
604:       assertFalse(node0.isObjectLit());
605:       assertFalse(node0.isAnd());
606:       assertFalse(node0.isTypeOf());
607:       assertEquals((-1), node0.getSourcePosition());
608:       assertFalse(node0.isNumber());
609:       assertFalse(node0.hasChildren());
610:       assertFalse(node0.isAssign());
611:       assertFalse(node0.isDec());
612:       assertFalse(node0.isGetElem());
613:       assertFalse(node0.isCast());
614:       assertFalse(node0.hasMoreThanOneChild());
615:       assertFalse(node0.hasOneChild());
616:       assertFalse(node0.isLabel());
617:       assertFalse(node0.isAssignAdd());
618:       assertFalse(node0.isReturn());
619:       assertFalse(node0.isWhile());
620:       assertFalse(node0.isNew());
621:       assertFalse(node0.isDo());
622:       assertFalse(node0.isAdd());
623:       assertFalse(node0.isWith());
624:       assertFalse(node0.isExprResult());
625:       assertFalse(node0.isOr());
626:       assertEquals((-1), node0.getLineno());
627:       assertFalse(node0.isName());
628:       assertFalse(node0.isNull());
629:       assertEquals(83, node0.getType());
630:       assertFalse(node0.isThis());
631:       assertFalse(node0.isInstanceOf());
632:       assertFalse(node0.isVar());
633:       assertFalse(node0.isHook());
634:       assertEquals(0, node0.getChildCount());
635:       assertFalse(node0.isBlock());
636:       assertFalse(node0.isScript());
637:       assertFalse(node0.isSwitch());
638:       assertEquals((-1), node0.getCharno());
639:       assertFalse(node0.isCase());
640:       assertFalse(node0.isArrayLit());
641:       assertFalse(node0.isLabelName());
642:       assertFalse(node0.isStringKey());
643:       assertEquals(36, Node.QUOTED_PROP);
644:       assertEquals(43, Node.IS_CONSTANT_NAME);
645:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
646:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
647:       assertEquals(4095, Node.COLUMN_MASK);
648:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
649:       assertEquals(32, Node.INCRDECR_PROP);
650:       assertEquals(51, Node.STATIC_SOURCE_FILE);
651:       assertEquals(46, Node.IS_NAMESPACE);
652:       assertEquals(50, Node.FREE_CALL);
653:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
654:       assertEquals(54, Node.SLASH_V);
655:       assertEquals(15, Node.NO_SIDE_EFFECTS);
656:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
657:       assertEquals(49, Node.DIRECT_EVAL);
658:       assertEquals(1, Node.DECR_FLAG);
659:       assertEquals(57, Node.LAST_PROP);
660:       assertEquals(12, Node.COLUMN_BITS);
661:       assertEquals(40, Node.ORIGINALNAME_PROP);
662:       assertEquals(30, Node.VAR_ARGS_NAME);
663:       assertEquals(2, Node.POST_FLAG);
664:       assertEquals(56, Node.CHANGE_TIME);
665:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
666:       assertEquals(37, Node.OPT_ARG_NAME);
667:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
668:       assertEquals(39, Node.EMPTY_BLOCK);
669:       assertEquals(47, Node.IS_DISPATCHER);
670:       assertEquals(48, Node.DIRECTIVES);
671:       assertEquals(55, Node.INFERRED_FUNCTION);
672:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
673:       assertEquals(57, Node.REFLECTED_OBJECT);
674:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
675:       assertEquals(29, Node.JSDOC_INFO_PROP);
676:       assertEquals(53, Node.INPUT_ID);
677:       assertEquals(52, Node.LENGTH);
678:       assertEquals(8, Node.FLAG_NO_THROWS);
679:       assertFalse(listIterator1.equals((Object)listIterator0));
680:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
681:       assertFalse(node0.equals((Object)node1));
682:       
683:       Node node2 = node0.getFirstChild();
684:       assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
685:       assertNotSame(node0, node1);
686:       assertNull(node2);
687:       assertEquals(0, stack0.size());
688:       assertEquals(10, stack0.capacity());
689:       assertEquals("[]", stack0.toString());
690:       assertTrue(stack0.isEmpty());
691:       assertTrue(stack0.empty());
692:       assertFalse(listIterator1.hasNext());
693:       assertFalse(listIterator1.hasPrevious());
694:       assertEquals(0, immutableList0.size());
695:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
696:       assertFalse(node0.isIf());
697:       assertFalse(node0.isDelProp());
698:       assertFalse(node0.isGetterDef());
699:       assertFalse(node0.isEmpty());
700:       assertFalse(node0.isFor());
701:       assertFalse(node0.isTry());
702:       assertFalse(node0.isRegExp());
703:       assertFalse(node0.isDefaultCase());
704:       assertFalse(node0.isInc());
705:       assertFalse(node0.isVoid());
706:       assertFalse(node0.isCatch());
707:       assertFalse(node0.isIn());
708:       assertFalse(node0.isTrue());
709:       assertFalse(node0.isNE());
710:       assertFalse(node0.isSetterDef());
711:       assertFalse(node0.isBreak());
712:       assertFalse(node0.isComma());
713:       assertFalse(node0.isFalse());
714:       assertFalse(node0.isGetProp());
715:       assertFalse(node0.isCall());
716:       assertFalse(node0.isThrow());
717:       assertFalse(node0.isFunction());
718:       assertFalse(node0.isDebugger());
719:       assertFalse(node0.isNot());
720:       assertFalse(node0.isContinue());
721:       assertFalse(node0.isString());
722:       assertTrue(node0.isParamList());
723:       assertFalse(node0.isObjectLit());
724:       assertFalse(node0.isAnd());
725:       assertFalse(node0.isTypeOf());
726:       assertEquals((-1), node0.getSourcePosition());
727:       assertFalse(node0.isNumber());
728:       assertFalse(node0.hasChildren());
729:       assertFalse(node0.isAssign());
730:       assertFalse(node0.isDec());
731:       assertFalse(node0.isGetElem());
732:       assertFalse(node0.isCast());
733:       assertFalse(node0.hasMoreThanOneChild());
734:       assertFalse(node0.hasOneChild());
735:       assertFalse(node0.isLabel());
736:       assertFalse(node0.isAssignAdd());
737:       assertFalse(node0.isReturn());
738:       assertFalse(node0.isWhile());
739:       assertFalse(node0.isNew());
740:       assertFalse(node0.isDo());
741:       assertFalse(node0.isAdd());
742:       assertFalse(node0.isWith());
743:       assertFalse(node0.isExprResult());
744:       assertFalse(node0.isOr());
745:       assertEquals((-1), node0.getLineno());
746:       assertFalse(node0.isName());
747:       assertFalse(node0.isNull());
748:       assertEquals(83, node0.getType());
749:       assertFalse(node0.isThis());
750:       assertFalse(node0.isInstanceOf());
751:       assertFalse(node0.isVar());
752:       assertFalse(node0.isHook());
753:       assertEquals(0, node0.getChildCount());
754:       assertFalse(node0.isBlock());
755:       assertFalse(node0.isScript());
756:       assertFalse(node0.isSwitch());
757:       assertEquals((-1), node0.getCharno());
758:       assertFalse(node0.isCase());
759:       assertFalse(node0.isArrayLit());
760:       assertFalse(node0.isLabelName());
761:       assertFalse(node0.isStringKey());
762:       assertEquals(36, Node.QUOTED_PROP);
763:       assertEquals(43, Node.IS_CONSTANT_NAME);
764:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
765:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
766:       assertEquals(4095, Node.COLUMN_MASK);
767:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
768:       assertEquals(32, Node.INCRDECR_PROP);
769:       assertEquals(51, Node.STATIC_SOURCE_FILE);
770:       assertEquals(46, Node.IS_NAMESPACE);
771:       assertEquals(50, Node.FREE_CALL);
772:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
773:       assertEquals(54, Node.SLASH_V);
774:       assertEquals(15, Node.NO_SIDE_EFFECTS);
775:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
776:       assertEquals(49, Node.DIRECT_EVAL);
777:       assertEquals(1, Node.DECR_FLAG);
778:       assertEquals(57, Node.LAST_PROP);
779:       assertEquals(12, Node.COLUMN_BITS);
780:       assertEquals(40, Node.ORIGINALNAME_PROP);
781:       assertEquals(30, Node.VAR_ARGS_NAME);
782:       assertEquals(2, Node.POST_FLAG);
783:       assertEquals(56, Node.CHANGE_TIME);
784:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
785:       assertEquals(37, Node.OPT_ARG_NAME);
786:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
787:       assertEquals(39, Node.EMPTY_BLOCK);
788:       assertEquals(47, Node.IS_DISPATCHER);
789:       assertEquals(48, Node.DIRECTIVES);
790:       assertEquals(55, Node.INFERRED_FUNCTION);
791:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
792:       assertEquals(57, Node.REFLECTED_OBJECT);
793:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
794:       assertEquals(29, Node.JSDOC_INFO_PROP);
795:       assertEquals(53, Node.INPUT_ID);
796:       assertEquals(52, Node.LENGTH);
797:       assertEquals(8, Node.FLAG_NO_THROWS);
798:       assertFalse(listIterator1.equals((Object)listIterator0));
799:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
800:       assertFalse(node0.equals((Object)node1));
801:       
802:       int int0 = node0.getCharno();
803:       assertEquals((-1), int0);
804:       assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
805:       assertNotSame(node0, node1);
806:       assertEquals(0, stack0.size());
807:       assertEquals(10, stack0.capacity());
808:       assertEquals("[]", stack0.toString());
809:       assertTrue(stack0.isEmpty());
810:       assertTrue(stack0.empty());
811:       assertFalse(listIterator1.hasNext());
812:       assertFalse(listIterator1.hasPrevious());
813:       assertEquals(0, immutableList0.size());
814:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
815:       assertFalse(node0.isIf());
816:       assertFalse(node0.isDelProp());
817:       assertFalse(node0.isGetterDef());
818:       assertFalse(node0.isEmpty());
819:       assertFalse(node0.isFor());
820:       assertFalse(node0.isTry());
821:       assertFalse(node0.isRegExp());
822:       assertFalse(node0.isDefaultCase());
823:       assertFalse(node0.isInc());
824:       assertFalse(node0.isVoid());
825:       assertFalse(node0.isCatch());
826:       assertFalse(node0.isIn());
827:       assertFalse(node0.isTrue());
828:       assertFalse(node0.isNE());
829:       assertFalse(node0.isSetterDef());
830:       assertFalse(node0.isBreak());
831:       assertFalse(node0.isComma());
832:       assertFalse(node0.isFalse());
833:       assertFalse(node0.isGetProp());
834:       assertFalse(node0.isCall());
835:       assertFalse(node0.isThrow());
836:       assertFalse(node0.isFunction());
837:       assertFalse(node0.isDebugger());
838:       assertFalse(node0.isNot());
839:       assertFalse(node0.isContinue());
840:       assertFalse(node0.isString());
841:       assertTrue(node0.isParamList());
842:       assertFalse(node0.isObjectLit());
843:       assertFalse(node0.isAnd());
844:       assertFalse(node0.isTypeOf());
845:       assertEquals((-1), node0.getSourcePosition());
846:       assertFalse(node0.isNumber());
847:       assertFalse(node0.hasChildren());
848:       assertFalse(node0.isAssign());
849:       assertFalse(node0.isDec());
850:       assertFalse(node0.isGetElem());
851:       assertFalse(node0.isCast());
852:       assertFalse(node0.hasMoreThanOneChild());
853:       assertFalse(node0.hasOneChild());
854:       assertFalse(node0.isLabel());
855:       assertFalse(node0.isAssignAdd());
856:       assertFalse(node0.isReturn());
857:       assertFalse(node0.isWhile());
858:       assertFalse(node0.isNew());
859:       assertFalse(node0.isDo());
860:       assertFalse(node0.isAdd());
861:       assertFalse(node0.isWith());
862:       assertFalse(node0.isExprResult());
863:       assertFalse(node0.isOr());
864:       assertEquals((-1), node0.getLineno());
865:       assertFalse(node0.isName());
866:       assertFalse(node0.isNull());
867:       assertEquals(83, node0.getType());
868:       assertFalse(node0.isThis());
869:       assertFalse(node0.isInstanceOf());
870:       assertFalse(node0.isVar());
871:       assertFalse(node0.isHook());
872:       assertEquals(0, node0.getChildCount());
873:       assertFalse(node0.isBlock());
874:       assertFalse(node0.isScript());
875:       assertFalse(node0.isSwitch());
876:       assertEquals((-1), node0.getCharno());
877:       assertFalse(node0.isCase());
878:       assertFalse(node0.isArrayLit());
879:       assertFalse(node0.isLabelName());
880:       assertFalse(node0.isStringKey());
881:       assertEquals(36, Node.QUOTED_PROP);
882:       assertEquals(43, Node.IS_CONSTANT_NAME);
883:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
884:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
885:       assertEquals(4095, Node.COLUMN_MASK);
886:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
887:       assertEquals(32, Node.INCRDECR_PROP);
888:       assertEquals(51, Node.STATIC_SOURCE_FILE);
889:       assertEquals(46, Node.IS_NAMESPACE);
890:       assertEquals(50, Node.FREE_CALL);
891:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
892:       assertEquals(54, Node.SLASH_V);
893:       assertEquals(15, Node.NO_SIDE_EFFECTS);
894:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
895:       assertEquals(49, Node.DIRECT_EVAL);
896:       assertEquals(1, Node.DECR_FLAG);
897:       assertEquals(57, Node.LAST_PROP);
898:       assertEquals(12, Node.COLUMN_BITS);
899:       assertEquals(40, Node.ORIGINALNAME_PROP);
900:       assertEquals(30, Node.VAR_ARGS_NAME);
901:       assertEquals(2, Node.POST_FLAG);
902:       assertEquals(56, Node.CHANGE_TIME);
903:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
904:       assertEquals(37, Node.OPT_ARG_NAME);
905:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
906:       assertEquals(39, Node.EMPTY_BLOCK);
907:       assertEquals(47, Node.IS_DISPATCHER);
908:       assertEquals(48, Node.DIRECTIVES);
909:       assertEquals(55, Node.INFERRED_FUNCTION);
910:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
911:       assertEquals(57, Node.REFLECTED_OBJECT);
912:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
913:       assertEquals(29, Node.JSDOC_INFO_PROP);
914:       assertEquals(53, Node.INPUT_ID);
915:       assertEquals(52, Node.LENGTH);
916:       assertEquals(8, Node.FLAG_NO_THROWS);
917:       assertFalse(listIterator1.equals((Object)listIterator0));
918:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
919:       assertFalse(node0.equals((Object)node1));
920:       
921:       // Undeclared exception!
922:       try { 
923:         node1.setSideEffectFlags(37);
924:         fail("Expecting exception: IllegalArgumentException");
925:       
926:       } catch(IllegalArgumentException e) {
927:          //
928:          // setIsNoSideEffectsCall only supports CALL and NEW nodes, got PARAM_LIST
929:          //
930:          verifyException("com.google.common.base.Preconditions", e);
931:       }
932:   }
933: }
RegularFileObject[/tmp/EvoSuite_219_1628159300139/com/google/javascript/rhino/Node_219_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:28:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_219_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_219_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.common.collect.Iterables",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.javascript.rhino.JSDocInfo$1",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250: 
251:   private static void resetClasses() {
252:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_219_tmp__ESTest_scaffolding.class.getClassLoader()); 
253: 
254:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
255:       "com.google.javascript.rhino.Node",
256:       "com.google.javascript.rhino.Node$NumberNode",
257:       "com.google.javascript.rhino.Node$StringNode",
258:       "com.google.javascript.rhino.Node$AbstractPropListItem",
259:       "com.google.javascript.rhino.Node$ObjectPropListItem",
260:       "com.google.javascript.rhino.Node$IntPropListItem",
261:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
262:       "com.google.javascript.rhino.Node$AncestorIterable",
263:       "com.google.javascript.rhino.Node$NodeMismatch",
264:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
265:       "com.google.javascript.rhino.Node$SideEffectFlags",
266:       "com.google.javascript.rhino.Token",
267:       "com.google.common.base.Preconditions",
268:       "com.google.javascript.rhino.SimpleErrorReporter",
269:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
270:       "com.google.common.base.Joiner",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.jstype.ArrowType",
322:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
323:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
324:       "com.google.javascript.rhino.jstype.InstanceObjectType",
325:       "com.google.javascript.rhino.jstype.Property",
326:       "com.google.common.collect.Lists",
327:       "com.google.javascript.rhino.jstype.NoObjectType",
328:       "com.google.javascript.rhino.jstype.NoType",
329:       "com.google.javascript.rhino.jstype.NoResolvedType",
330:       "com.google.common.collect.SingletonImmutableList",
331:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
332:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
333:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
334:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
335:       "com.google.javascript.rhino.jstype.UnionType",
336:       "com.google.javascript.rhino.jstype.FunctionBuilder",
337:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
338:       "com.google.javascript.rhino.Node$AncestorIterable$1",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.AbstractIndexedListIterator",
342:       "com.google.common.collect.Iterators$11",
343:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
344:       "com.google.common.base.Objects",
345:       "com.google.javascript.rhino.jstype.TemplatizedType",
346:       "com.google.javascript.rhino.jstype.EnumType",
347:       "com.google.javascript.rhino.jstype.EnumElementType",
348:       "com.google.common.collect.Iterables",
349:       "com.google.javascript.rhino.jstype.NamedType",
350:       "com.google.common.collect.Sets",
351:       "com.google.javascript.rhino.InputId",
352:       "com.google.common.collect.ImmutableSet",
353:       "com.google.common.collect.EmptyImmutableSet",
354:       "com.google.javascript.rhino.jstype.TernaryValue",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.javascript.rhino.jstype.JSType$2",
363:       "com.google.javascript.rhino.jstype.JSType$TypePair",
364:       "com.google.common.collect.ImmutableList$1",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
366:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
367:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
369:       "com.google.common.collect.Platform",
370:       "com.google.javascript.rhino.JSTypeExpression",
371:       "com.google.common.collect.FluentIterable",
372:       "com.google.common.collect.Iterables$2",
373:       "com.google.common.collect.TransformedIterator",
374:       "com.google.common.collect.Iterables$3",
375:       "com.google.common.collect.Iterators$5",
376:       "com.google.common.collect.Iterators$12",
377:       "com.google.javascript.rhino.JSDocInfo$Visibility",
378:       "com.google.javascript.rhino.jstype.NamespaceType",
379:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
380:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
381:     );
382:   }
383: }

[MASTER] 10:28:20.236 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
assertNotNull(jSTypeRegistry0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());

ArrayList<TemplateType> arrayList0 = new ArrayList<TemplateType>();
assertNotNull(arrayList0);
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());

ListIterator<TemplateType> listIterator0 = arrayList0.listIterator();
assertNotNull(listIterator0);
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(listIterator0.hasNext());
assertFalse(listIterator0.hasPrevious());

boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean0);

Stack<TemplateType> stack0 = new Stack<TemplateType>();
assertNotNull(stack0);
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());

ListIterator<TemplateType> listIterator1 = stack0.listIterator();
assertNotNull(listIterator1);
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(listIterator1.hasNext());
assertFalse(listIterator1.hasPrevious());
assertFalse(listIterator1.equals((Object)listIterator0));

ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) listIterator1);
assertNotNull(immutableList0);
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(listIterator1.hasNext());
assertFalse(listIterator1.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(listIterator1.equals((Object)listIterator0));

JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
assertNotNull(jSTypeRegistry1);
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));

Node node0 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) immutableList0);
assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
assertNotNull(node0);
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(listIterator1.hasNext());
assertFalse(listIterator1.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(listIterator1.equals((Object)listIterator0));
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));

boolean boolean1 = node0.hasChild(node0);
assertFalse(boolean1);
assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(listIterator1.hasNext());
assertFalse(listIterator1.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(listIterator1.equals((Object)listIterator0));
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertTrue(boolean1 == boolean0);

Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(listIterator1.hasNext());
assertFalse(listIterator1.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertTrue(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isOr());
assertEquals(83, node1.getType());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(listIterator1.equals((Object)listIterator0));
assertFalse(node1.equals((Object)node0));

boolean boolean2 = node1.isCall();
assertFalse(boolean2);
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotSame(node1, node0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(listIterator1.hasNext());
assertFalse(listIterator1.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isName());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isCall());
assertFalse(node1.isThrow());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertTrue(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isOr());
assertEquals(83, node1.getType());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBreak());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
assertFalse(listIterator1.equals((Object)listIterator0));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

Iterable<Node> iterable0 = node0.children();
assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
assertNotSame(node0, node1);
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(listIterator1.hasNext());
assertFalse(listIterator1.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(listIterator1.equals((Object)listIterator0));
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertFalse(node0.equals((Object)node1));

Node node2 = node0.getFirstChild();
assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
assertNotSame(node0, node1);
assertNull(node2);
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(listIterator1.hasNext());
assertFalse(listIterator1.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(listIterator1.equals((Object)listIterator0));
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertFalse(node0.equals((Object)node1));

int int0 = node0.getCharno();
assertEquals((-1), int0);
assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
assertNotSame(node0, node1);
assertEquals(0, stack0.size());
assertEquals(10, stack0.capacity());
assertEquals("[]", stack0.toString());
assertTrue(stack0.isEmpty());
assertTrue(stack0.empty());
assertFalse(listIterator1.hasNext());
assertFalse(listIterator1.hasPrevious());
assertEquals(0, immutableList0.size());
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isInc());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isTypeOf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(listIterator1.equals((Object)listIterator0));
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertFalse(node0.equals((Object)node1));

node1.setSideEffectFlags(37);

[MASTER] 10:28:39.632 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:40.000 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:40.269 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:40.509 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:28:40.735 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/13
* Done!

* Computation finished
