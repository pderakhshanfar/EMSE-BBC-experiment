* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 13766
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2253907989
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 10:35:21.585 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 10:35:25.992 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 10:38:04.365 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 1208
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 37023
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 222
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 1208
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 1208
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 193
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 7768
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 541
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 21
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 2802
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 664
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 1
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 243
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 1621
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 664
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 664
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 305
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 664
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 41
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 928
Number of times BBC is called for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 502
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 19572
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 664
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 664
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 9319
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 217
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 222
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 4563
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 17483
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 4563
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 222
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 8705
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 3783
Number of times BBC is called for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 541
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 7244
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 3611
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 307
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 888
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 315
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 87
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 18971
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 116
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 2580
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 116
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 385
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 550
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 13642
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 222
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 43
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 1682
Number of times BBC is called for com.google.javascript.rhino.Node.mergeLineCharNo(II)I: I15 Branch 141 IFEQ L1197 - false: 281
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 140
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 315
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1014
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 541
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 39721
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 2067
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 4983
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 14701
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 1106
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 157
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 541
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 767
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 821
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 2640
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 3783
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 15695
Number of times BBC is called for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 17735
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 541
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 121
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 391
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 315
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 101
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 1106
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 2474
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: root-Branch: 1347
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 2474
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 1106
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 2476
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 2474
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 955
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 1441
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 315
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 664
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 6448
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 10601
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 16038
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 43
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 43
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 3552
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setThrows()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2096: 43
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setThrows()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2097: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 7550
Number of times BBC is called for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 19639
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 541
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: Line 162: 129
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 166
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 4565
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 5789
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 4565
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 45769
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 1071
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 4599
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>(I)V: Line 2055: 43
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>(I)V: Line 2057: 43
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>(I)V: Line 2056: 43
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 24779
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 797
Number of times BBC is called for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 5079
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 3732
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 2299
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 86279
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 56986
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 235
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 2626
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 3086
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 2499
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 2672
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 211
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 26714
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 315
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2091: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 3032
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 315
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 13
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2092: 43
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 43
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 1870
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 4783
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 4339
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 9319
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 9536
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 68
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 3752
Number of times BBC is called for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 1791
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 3888
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 222
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 694
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 129
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 143
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 2640
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 664
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 1071
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 1440
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 47
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 1
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 6621
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 58304
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 65
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 3611
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 45769
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 18595
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: root-Branch: 2299
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2089: 43
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 86279
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2090: 43
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 176
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 9260
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 2474
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 11128
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 3032
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 87
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 550: 43
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 157
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 2474
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 129
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 129
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 2653
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 39546
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 2769
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 4565
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 3374
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 1639
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 541
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 5671
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 14951
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 315
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 130
Number of times BBC is called for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 2798
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 166
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 7424
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 49556
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 5274
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 4449
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 45769
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 4565
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 1489
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 58304
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 427
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 2129
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 541
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 86279
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 45769
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 509
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 1639
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 24993
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 134
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 664
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 19617
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 129
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 1791
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 59
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 509
Number of times BBC is called for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 1071
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 112
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 1
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 818
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 6011
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 1639
Number of times BBC is called for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 2640
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 49935
Number of times BBC is called for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 4563
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 43
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 1
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 442
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 189
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 1958
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 11128
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 18944
Number of times BBC is called for com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;: Line 1881: 541
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 3594
Number of times BBC is called for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 1639
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 3860
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 6294
Number of times BBC is called for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 11869
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.getDouble()D: root-Branch: 129
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 201
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 222
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 2474
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 315
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 2671
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 222
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 416
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 2518
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 222
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 112
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 374
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 1576
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 303
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 1489
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 6568
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 112
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 215
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 1989
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 1155
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 427
Number of times BBC is called for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 5643
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 23326
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 8384
Number of times BBC is called for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 16253
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 5643
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 222
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 222
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 43
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 7100
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 112
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 1639
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 813
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 5888
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 9206
Number of times BBC is called for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 797
Number of times BBC is called for com.google.javascript.rhino.Node.isString()Z: Line 2403: 43
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 84
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 65
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 112
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 2913
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 112
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 222
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 489
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 222
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 59
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 59
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 1958
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 1893
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 1958
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 222
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 222
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 222
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 315
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 461
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 43
Number of times BBC is called for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 7217
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 2173
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 59
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 541
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 222
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 59
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 59
Number of times BBC is called for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 1639
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 59
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 222
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - true: 1
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 32971
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 2961
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 2640
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 822
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 2861
Number of times BBC is called for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 7956
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.<init>(I)V: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.getJSDocInfo()Lcom/google/javascript/rhino/JSDocInfo;: root-Branch: 541
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 16669
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 24805
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 11624
Number of times BBC is called for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 702
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 541
Number of times BBC is called for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 43
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 797
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 625
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 315
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 222
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 129
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: Line 312: 222
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 222
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 368
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1106
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 847
Number of times BBC is called for com.google.javascript.rhino.Node.putBooleanProp(IZ)V: I5 Branch 109 IFEQ L852 - true: 25
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 45769
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 5354
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 1304
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 129
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 19659
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 649
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 17432
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 2458
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 1
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 216
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 101
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 1958
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 1489
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 129
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 5354
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 20871
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 14718
Number of times BBC is called for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 541
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 262
Number of times BBC is called for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 20
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 14581
Number of times BBC is called for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 17313
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 541
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 35070
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 884
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 440
Number of times BBC is called for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 215
Number of times BBC is called for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 315
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 688
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 18633
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 222
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 6902
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 222
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 222
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 1639
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 5906
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 3142
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 19203
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 3
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 7244
Number of times BBC is called for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 2297
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 112
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 7244
Number of times BBC is called for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 977
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 28
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 652
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 541
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 5671
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 2299
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 5671
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 5671
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 2489
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 5671
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 22207
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 5671
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 5671
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 664
Number of times BBC is called for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 1
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 674
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 427
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 9172
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 9172
Number of times BBC is called for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 2129
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 15695
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 1
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1858: 315
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 222
Number of times BBC is called for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 222
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 3142
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - false: 8
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 5539
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 282
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 129
Number of times BBC is called for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 508
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setThrows()Lcom/google/javascript/rhino/Node$SideEffectFlags;: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 243
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 2439
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 6285
Number of times BBC is called for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 22620
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 315
Number of times BBC is called for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 315
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 315
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 129
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2084: 1347
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1888: 315
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1889: 315
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 2271
Number of times BBC is called for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 43
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2085: 1347
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 2129
Number of times BBC is called for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 315
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 315
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 3082
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 90
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 504
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 2495
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 17537
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 64
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 625
Number of times BBC is called for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 2183
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 625
Number of times BBC is called for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 222
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 267
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 3141
Number of times BBC is called for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 1090
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 2299
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 368
Number of times BBC is called for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 129
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - true: 9
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 19020
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 22452
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 664
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 1064
Number of times BBC is called for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 664
Number of times BBC is called for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 2129
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 143
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 1791
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 5643
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 334
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 2224
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 5570
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 4781
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 222
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 3594
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 46477
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 129
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 46477
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 393
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 7244
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 37337
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 43
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - true: 1
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 14626
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 222
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 222
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 222
Number of times BBC is called for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 129
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 5317
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 13470
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 103
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 2299
Number of times BBC is called for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 222
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 2299
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 16695
Number of times BBC is called for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 29
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 222
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 222
Number of times BBC is called for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 2487
Number of times BBC is called for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 797
Number of times BBC is called for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 797
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 1566
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 68
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 764
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 15672
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 278
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 7683
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 129
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 222
Number of times BBC is called for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 315
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 222
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 222
Number of times BBC is called for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 5888
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 222
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 265
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 1297
Number of times BBC is called for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 222
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 1
Number of times BBC is called for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 120
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 46477
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 521
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 46477
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 129
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 46477
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 46477
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 4881
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 23
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 16417
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 46477
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 1508
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 46477
Number of times BBC is called for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 222
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 16417
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 16417
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 21029
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 541
Number of times BBC is called for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 1106
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 429
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 1106
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 12775
Number of times BBC is called for com.google.javascript.rhino.Node.putIntProp(II)V: I8 Branch 110 IFEQ L857 - true: 25
Number of times BBC is called for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 12775
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 16926
Number of times BBC is called for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 45769
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 17174
Number of times BBC is called for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 43
Number of times BBC is called for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 25318
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 22255
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 33695
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: Line 2060: 2299
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 43
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 1791
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 1958
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 9127
Number of times BBC is called for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 56986
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 427
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 1071
Number of times BBC is called for com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;: I9 Branch 104 IFNONNULL L814 - true: 56
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 1062
Number of times BBC is called for com.google.javascript.rhino.Node.getDouble()D: Line 889: 129
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 22834
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 30586
Number of times BBC is called for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 3032
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 11567
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 11624
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 1958
Number of times BBC is called for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 664
Number of times BBC is called for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 1958
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 1651
Number of times BBC is called for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 2299
Number of times BBC is called for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 4641
Number of times BBC is called for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 2474
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 3531
Number of times BBC is called for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 1958
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 1208
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 2167
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 1586
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 6493
Number of times BBC is called for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 2246
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 5
Number of times BBC is called for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 664
Number of times BBC is called for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 11781
Number of times BBC is called for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 43
Number of times BBC is called for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - true: 8
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 315
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 35536
Number of times BBC is called for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 3032
Number of times BBC is called for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 23871
Number of times BBC is called for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 1489
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 115
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 222
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 1071
Number of times BBC is called for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 5354
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 16187
Number of times BBC is called for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 326
Number of times BBC is called for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 129
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 26667
Number of times BBC is called for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 7550
Number of times BBC is called for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 5354
Number of times BBC is called for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 137
Number of times BBC is called for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 1062
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 1000
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 289
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 59
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 129
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 541
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 59
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 270
Number of times BBC is called for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 541
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 2299
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 22079
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 1958
Number of times BBC is called for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 2299
Number of times BBC is called for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: root-Branch: 43
Number of times BBC is called for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 129
Number of times BBC is called for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 129
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 664
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 664
Number of times BBC is called for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 89
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 664
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 664
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 664
Number of times BBC is called for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 664
Number of times BBC is called for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: root-Branch: 315
Number of times BBC is called for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 664
Number of times BBC is called for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 24502
Number of times BBC is called for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 1071
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 636
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 563
Number of times BBC is called for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 129
Number of times BBC is called for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 315
Number of times BBC is called for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 28349
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 18
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 222
Number of times BBC is called for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 86279
Number of times BBC is called for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 6768
Number of times BBC is called for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 222
Number of times BBC is called for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 84
Number of times BBC is called for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 315
Number of times BBC is called for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 928
Number of times BBC is called for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 129
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 129
Number of times BBC is called for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 129
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 1943
Number of times BBC is called for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 541
Number of times BBC is called for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 1522
Number of times BBC is called for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 1791
Number of times BBC is called in total: 4787191
* Search finished after 604s and 497 generations, 206651 statements, best individual has fitness: 2838.0
* Minimizing test suite
[MASTER] 10:46:41.277 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 803
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 619
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 100
* Number of covered goals: 100
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 472
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2209
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 579
* Generated 791 tests with total length 8883
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:47:46.680 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6739833333333334% of time used, but only 66/791 tests minimized), falling back to using all assertions
[MASTER] 10:48:06.266 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
[MASTER] 10:48:17.305 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 10:48:30.629 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_143_1628160510546/com/google/javascript/rhino/Node_143_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_143_1628160510546/com/google/javascript/rhino/Node_143_tmp__ESTest_scaffolding.java]]
[MASTER] 10:48:30.629 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:30.629 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:30.633 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 860
[MASTER] 10:48:30.634 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_143_1628160510546/com/google/javascript/rhino/Node_143_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:48:30 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_143_tmp__ESTest extends Node_143_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(0.0);
21:       assertFalse(node0.isComma());
22:       assertFalse(node0.isGetProp());
23:       assertFalse(node0.isThis());
24:       assertFalse(node0.isBreak());
25:       assertFalse(node0.isFalse());
26:       assertFalse(node0.isInstanceOf());
27:       assertFalse(node0.isAnd());
28:       assertFalse(node0.isSwitch());
29:       assertFalse(node0.isInc());
30:       assertFalse(node0.isThrow());
31:       assertEquals((-1), node0.getSourcePosition());
32:       assertFalse(node0.isTypeOf());
33:       assertFalse(node0.isDec());
34:       assertFalse(node0.hasChildren());
35:       assertFalse(node0.isEmpty());
36:       assertFalse(node0.isAssign());
37:       assertFalse(node0.isOr());
38:       assertFalse(node0.isCast());
39:       assertFalse(node0.isGetElem());
40:       assertFalse(node0.isDelProp());
41:       assertFalse(node0.isVoid());
42:       assertFalse(node0.isDebugger());
43:       assertFalse(node0.isExprResult());
44:       assertFalse(node0.isNot());
45:       assertFalse(node0.isString());
46:       assertFalse(node0.isObjectLit());
47:       assertFalse(node0.isReturn());
48:       assertTrue(node0.isNumber());
49:       assertFalse(node0.isWhile());
50:       assertFalse(node0.isNull());
51:       assertFalse(node0.isSetterDef());
52:       assertFalse(node0.isCatch());
53:       assertFalse(node0.isCall());
54:       assertFalse(node0.isName());
55:       assertFalse(node0.isStringKey());
56:       assertFalse(node0.isParamList());
57:       assertFalse(node0.isTrue());
58:       assertFalse(node0.isAdd());
59:       assertFalse(node0.isFunction());
60:       assertFalse(node0.isContinue());
61:       assertFalse(node0.isVar());
62:       assertEquals(0, node0.getChildCount());
63:       assertFalse(node0.isNew());
64:       assertFalse(node0.isDo());
65:       assertFalse(node0.isDefaultCase());
66:       assertFalse(node0.isAssignAdd());
67:       assertFalse(node0.isNE());
68:       assertFalse(node0.isLabel());
69:       assertFalse(node0.isGetterDef());
70:       assertFalse(node0.isIn());
71:       assertFalse(node0.isArrayLit());
72:       assertEquals((-1), node0.getLineno());
73:       assertFalse(node0.isLabelName());
74:       assertFalse(node0.isIf());
75:       assertFalse(node0.isRegExp());
76:       assertFalse(node0.isScript());
77:       assertEquals((-1), node0.getCharno());
78:       assertEquals(39, node0.getType());
79:       assertFalse(node0.isWith());
80:       assertFalse(node0.hasMoreThanOneChild());
81:       assertFalse(node0.hasOneChild());
82:       assertFalse(node0.isHook());
83:       assertFalse(node0.isTry());
84:       assertFalse(node0.isFor());
85:       assertFalse(node0.isBlock());
86:       assertFalse(node0.isCase());
87:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
88:       assertEquals(56, Node.CHANGE_TIME);
89:       assertEquals(47, Node.IS_DISPATCHER);
90:       assertEquals(53, Node.INPUT_ID);
91:       assertEquals(32, Node.INCRDECR_PROP);
92:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
93:       assertEquals(29, Node.JSDOC_INFO_PROP);
94:       assertEquals(30, Node.VAR_ARGS_NAME);
95:       assertEquals(43, Node.IS_CONSTANT_NAME);
96:       assertEquals(51, Node.STATIC_SOURCE_FILE);
97:       assertEquals(57, Node.LAST_PROP);
98:       assertEquals(46, Node.IS_NAMESPACE);
99:       assertEquals(54, Node.SLASH_V);
100:       assertEquals(2, Node.POST_FLAG);
101:       assertEquals(40, Node.ORIGINALNAME_PROP);
102:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
103:       assertEquals(50, Node.FREE_CALL);
104:       assertEquals(57, Node.REFLECTED_OBJECT);
105:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
106:       assertEquals(52, Node.LENGTH);
107:       assertEquals(8, Node.FLAG_NO_THROWS);
108:       assertEquals(15, Node.NO_SIDE_EFFECTS);
109:       assertEquals(39, Node.EMPTY_BLOCK);
110:       assertEquals(55, Node.INFERRED_FUNCTION);
111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
112:       assertEquals(49, Node.DIRECT_EVAL);
113:       assertEquals(1, Node.DECR_FLAG);
114:       assertEquals(36, Node.QUOTED_PROP);
115:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
116:       assertEquals(12, Node.COLUMN_BITS);
117:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
118:       assertEquals(37, Node.OPT_ARG_NAME);
119:       assertEquals(48, Node.DIRECTIVES);
120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
121:       assertEquals(4095, Node.COLUMN_MASK);
122:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
123:       assertNotNull(node0);
124:       
125:       boolean boolean0 = node0.isArrayLit();
126:       assertFalse(node0.isComma());
127:       assertFalse(node0.isGetProp());
128:       assertFalse(node0.isThis());
129:       assertFalse(node0.isBreak());
130:       assertFalse(node0.isFalse());
131:       assertFalse(node0.isInstanceOf());
132:       assertFalse(node0.isAnd());
133:       assertFalse(node0.isSwitch());
134:       assertFalse(node0.isInc());
135:       assertFalse(node0.isThrow());
136:       assertEquals((-1), node0.getSourcePosition());
137:       assertFalse(node0.isTypeOf());
138:       assertFalse(node0.isDec());
139:       assertFalse(node0.hasChildren());
140:       assertFalse(node0.isEmpty());
141:       assertFalse(node0.isAssign());
142:       assertFalse(node0.isOr());
143:       assertFalse(node0.isCast());
144:       assertFalse(node0.isGetElem());
145:       assertFalse(node0.isDelProp());
146:       assertFalse(node0.isVoid());
147:       assertFalse(node0.isDebugger());
148:       assertFalse(node0.isExprResult());
149:       assertFalse(node0.isNot());
150:       assertFalse(node0.isString());
151:       assertFalse(node0.isObjectLit());
152:       assertFalse(node0.isReturn());
153:       assertTrue(node0.isNumber());
154:       assertFalse(node0.isWhile());
155:       assertFalse(node0.isNull());
156:       assertFalse(node0.isSetterDef());
157:       assertFalse(node0.isCatch());
158:       assertFalse(node0.isCall());
159:       assertFalse(node0.isName());
160:       assertFalse(node0.isStringKey());
161:       assertFalse(node0.isParamList());
162:       assertFalse(node0.isTrue());
163:       assertFalse(node0.isAdd());
164:       assertFalse(node0.isFunction());
165:       assertFalse(node0.isContinue());
166:       assertFalse(node0.isVar());
167:       assertEquals(0, node0.getChildCount());
168:       assertFalse(node0.isNew());
169:       assertFalse(node0.isDo());
170:       assertFalse(node0.isDefaultCase());
171:       assertFalse(node0.isAssignAdd());
172:       assertFalse(node0.isNE());
173:       assertFalse(node0.isLabel());
174:       assertFalse(node0.isGetterDef());
175:       assertFalse(node0.isIn());
176:       assertFalse(node0.isArrayLit());
177:       assertEquals((-1), node0.getLineno());
178:       assertFalse(node0.isLabelName());
179:       assertFalse(node0.isIf());
180:       assertFalse(node0.isRegExp());
181:       assertFalse(node0.isScript());
182:       assertEquals((-1), node0.getCharno());
183:       assertEquals(39, node0.getType());
184:       assertFalse(node0.isWith());
185:       assertFalse(node0.hasMoreThanOneChild());
186:       assertFalse(node0.hasOneChild());
187:       assertFalse(node0.isHook());
188:       assertFalse(node0.isTry());
189:       assertFalse(node0.isFor());
190:       assertFalse(node0.isBlock());
191:       assertFalse(node0.isCase());
192:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
193:       assertEquals(56, Node.CHANGE_TIME);
194:       assertEquals(47, Node.IS_DISPATCHER);
195:       assertEquals(53, Node.INPUT_ID);
196:       assertEquals(32, Node.INCRDECR_PROP);
197:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
198:       assertEquals(29, Node.JSDOC_INFO_PROP);
199:       assertEquals(30, Node.VAR_ARGS_NAME);
200:       assertEquals(43, Node.IS_CONSTANT_NAME);
201:       assertEquals(51, Node.STATIC_SOURCE_FILE);
202:       assertEquals(57, Node.LAST_PROP);
203:       assertEquals(46, Node.IS_NAMESPACE);
204:       assertEquals(54, Node.SLASH_V);
205:       assertEquals(2, Node.POST_FLAG);
206:       assertEquals(40, Node.ORIGINALNAME_PROP);
207:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
208:       assertEquals(50, Node.FREE_CALL);
209:       assertEquals(57, Node.REFLECTED_OBJECT);
210:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
211:       assertEquals(52, Node.LENGTH);
212:       assertEquals(8, Node.FLAG_NO_THROWS);
213:       assertEquals(15, Node.NO_SIDE_EFFECTS);
214:       assertEquals(39, Node.EMPTY_BLOCK);
215:       assertEquals(55, Node.INFERRED_FUNCTION);
216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
217:       assertEquals(49, Node.DIRECT_EVAL);
218:       assertEquals(1, Node.DECR_FLAG);
219:       assertEquals(36, Node.QUOTED_PROP);
220:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
221:       assertEquals(12, Node.COLUMN_BITS);
222:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
223:       assertEquals(37, Node.OPT_ARG_NAME);
224:       assertEquals(48, Node.DIRECTIVES);
225:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
226:       assertEquals(4095, Node.COLUMN_MASK);
227:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
228:       assertFalse(boolean0);
229:       
230:       Node node1 = new Node(55);
231:       assertFalse(node1.isCast());
232:       assertFalse(node1.isExprResult());
233:       assertFalse(node1.isGetElem());
234:       assertFalse(node1.isLabelName());
235:       assertFalse(node1.hasOneChild());
236:       assertFalse(node1.isNumber());
237:       assertFalse(node1.isScript());
238:       assertFalse(node1.isObjectLit());
239:       assertEquals(55, node1.getType());
240:       assertFalse(node1.isNot());
241:       assertFalse(node1.isOr());
242:       assertEquals((-1), node1.getSourcePosition());
243:       assertFalse(node1.isReturn());
244:       assertFalse(node1.hasMoreThanOneChild());
245:       assertFalse(node1.isInstanceOf());
246:       assertFalse(node1.isGetProp());
247:       assertEquals((-1), node1.getLineno());
248:       assertFalse(node1.hasChildren());
249:       assertFalse(node1.isBreak());
250:       assertFalse(node1.isTypeOf());
251:       assertFalse(node1.isWith());
252:       assertFalse(node1.isWhile());
253:       assertFalse(node1.isThis());
254:       assertFalse(node1.isBlock());
255:       assertFalse(node1.isAssign());
256:       assertFalse(node1.isComma());
257:       assertFalse(node1.isDec());
258:       assertFalse(node1.isHook());
259:       assertFalse(node1.isVar());
260:       assertFalse(node1.isCall());
261:       assertFalse(node1.isName());
262:       assertFalse(node1.isAdd());
263:       assertFalse(node1.isNew());
264:       assertFalse(node1.isNull());
265:       assertFalse(node1.isSwitch());
266:       assertFalse(node1.isParamList());
267:       assertFalse(node1.isStringKey());
268:       assertEquals((-1), node1.getCharno());
269:       assertEquals(0, node1.getChildCount());
270:       assertFalse(node1.isAssignAdd());
271:       assertFalse(node1.isDo());
272:       assertFalse(node1.isDefaultCase());
273:       assertFalse(node1.isLabel());
274:       assertFalse(node1.isVoid());
275:       assertFalse(node1.isTry());
276:       assertFalse(node1.isArrayLit());
277:       assertFalse(node1.isIf());
278:       assertFalse(node1.isGetterDef());
279:       assertFalse(node1.isDelProp());
280:       assertFalse(node1.isEmpty());
281:       assertFalse(node1.isNE());
282:       assertFalse(node1.isTrue());
283:       assertFalse(node1.isDebugger());
284:       assertFalse(node1.isCatch());
285:       assertFalse(node1.isCase());
286:       assertFalse(node1.isRegExp());
287:       assertFalse(node1.isFor());
288:       assertFalse(node1.isInc());
289:       assertFalse(node1.isString());
290:       assertFalse(node1.isIn());
291:       assertFalse(node1.isAnd());
292:       assertFalse(node1.isSetterDef());
293:       assertFalse(node1.isThrow());
294:       assertFalse(node1.isContinue());
295:       assertFalse(node1.isFunction());
296:       assertFalse(node1.isFalse());
297:       assertEquals(54, Node.SLASH_V);
298:       assertEquals(15, Node.NO_SIDE_EFFECTS);
299:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
300:       assertEquals(30, Node.VAR_ARGS_NAME);
301:       assertEquals(52, Node.LENGTH);
302:       assertEquals(1, Node.DECR_FLAG);
303:       assertEquals(12, Node.COLUMN_BITS);
304:       assertEquals(32, Node.INCRDECR_PROP);
305:       assertEquals(57, Node.LAST_PROP);
306:       assertEquals(37, Node.OPT_ARG_NAME);
307:       assertEquals(48, Node.DIRECTIVES);
308:       assertEquals(39, Node.EMPTY_BLOCK);
309:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
310:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
311:       assertEquals(4095, Node.COLUMN_MASK);
312:       assertEquals(8, Node.FLAG_NO_THROWS);
313:       assertEquals(57, Node.REFLECTED_OBJECT);
314:       assertEquals(56, Node.CHANGE_TIME);
315:       assertEquals(49, Node.DIRECT_EVAL);
316:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
317:       assertEquals(36, Node.QUOTED_PROP);
318:       assertEquals(53, Node.INPUT_ID);
319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
320:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
321:       assertEquals(55, Node.INFERRED_FUNCTION);
322:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
323:       assertEquals(29, Node.JSDOC_INFO_PROP);
324:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
325:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
326:       assertEquals(47, Node.IS_DISPATCHER);
327:       assertEquals(51, Node.STATIC_SOURCE_FILE);
328:       assertEquals(2, Node.POST_FLAG);
329:       assertEquals(50, Node.FREE_CALL);
330:       assertEquals(40, Node.ORIGINALNAME_PROP);
331:       assertEquals(46, Node.IS_NAMESPACE);
332:       assertEquals(43, Node.IS_CONSTANT_NAME);
333:       assertNotNull(node1);
334:       assertFalse(node1.equals((Object)node0));
335:       
336:       node1.putIntProp(38, 25);
337:       assertFalse(node1.isCast());
338:       assertFalse(node1.isExprResult());
339:       assertFalse(node1.isGetElem());
340:       assertFalse(node1.isLabelName());
341:       assertFalse(node1.hasOneChild());
342:       assertFalse(node1.isNumber());
343:       assertFalse(node1.isScript());
344:       assertFalse(node1.isObjectLit());
345:       assertEquals(55, node1.getType());
346:       assertFalse(node1.isNot());
347:       assertFalse(node1.isOr());
348:       assertEquals((-1), node1.getSourcePosition());
349:       assertFalse(node1.isReturn());
350:       assertFalse(node1.hasMoreThanOneChild());
351:       assertFalse(node1.isInstanceOf());
352:       assertFalse(node1.isGetProp());
353:       assertEquals((-1), node1.getLineno());
354:       assertFalse(node1.hasChildren());
355:       assertFalse(node1.isBreak());
356:       assertFalse(node1.isTypeOf());
357:       assertFalse(node1.isWith());
358:       assertFalse(node1.isWhile());
359:       assertFalse(node1.isThis());
360:       assertFalse(node1.isBlock());
361:       assertFalse(node1.isAssign());
362:       assertFalse(node1.isComma());
363:       assertFalse(node1.isDec());
364:       assertFalse(node1.isHook());
365:       assertFalse(node1.isVar());
366:       assertFalse(node1.isCall());
367:       assertFalse(node1.isName());
368:       assertFalse(node1.isAdd());
369:       assertFalse(node1.isNew());
370:       assertFalse(node1.isNull());
371:       assertFalse(node1.isSwitch());
372:       assertFalse(node1.isParamList());
373:       assertFalse(node1.isStringKey());
374:       assertEquals((-1), node1.getCharno());
375:       assertEquals(0, node1.getChildCount());
376:       assertFalse(node1.isAssignAdd());
377:       assertFalse(node1.isDo());
378:       assertFalse(node1.isDefaultCase());
379:       assertFalse(node1.isLabel());
380:       assertFalse(node1.isVoid());
381:       assertFalse(node1.isTry());
382:       assertFalse(node1.isArrayLit());
383:       assertFalse(node1.isIf());
384:       assertFalse(node1.isGetterDef());
385:       assertFalse(node1.isDelProp());
386:       assertFalse(node1.isEmpty());
387:       assertFalse(node1.isNE());
388:       assertFalse(node1.isTrue());
389:       assertFalse(node1.isDebugger());
390:       assertFalse(node1.isCatch());
391:       assertFalse(node1.isCase());
392:       assertFalse(node1.isRegExp());
393:       assertFalse(node1.isFor());
394:       assertFalse(node1.isInc());
395:       assertFalse(node1.isString());
396:       assertFalse(node1.isIn());
397:       assertFalse(node1.isAnd());
398:       assertFalse(node1.isSetterDef());
399:       assertFalse(node1.isThrow());
400:       assertFalse(node1.isContinue());
401:       assertFalse(node1.isFunction());
402:       assertFalse(node1.isFalse());
403:       assertEquals(54, Node.SLASH_V);
404:       assertEquals(15, Node.NO_SIDE_EFFECTS);
405:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
406:       assertEquals(30, Node.VAR_ARGS_NAME);
407:       assertEquals(52, Node.LENGTH);
408:       assertEquals(1, Node.DECR_FLAG);
409:       assertEquals(12, Node.COLUMN_BITS);
410:       assertEquals(32, Node.INCRDECR_PROP);
411:       assertEquals(57, Node.LAST_PROP);
412:       assertEquals(37, Node.OPT_ARG_NAME);
413:       assertEquals(48, Node.DIRECTIVES);
414:       assertEquals(39, Node.EMPTY_BLOCK);
415:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
416:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
417:       assertEquals(4095, Node.COLUMN_MASK);
418:       assertEquals(8, Node.FLAG_NO_THROWS);
419:       assertEquals(57, Node.REFLECTED_OBJECT);
420:       assertEquals(56, Node.CHANGE_TIME);
421:       assertEquals(49, Node.DIRECT_EVAL);
422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
423:       assertEquals(36, Node.QUOTED_PROP);
424:       assertEquals(53, Node.INPUT_ID);
425:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
426:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
427:       assertEquals(55, Node.INFERRED_FUNCTION);
428:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
429:       assertEquals(29, Node.JSDOC_INFO_PROP);
430:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
431:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
432:       assertEquals(47, Node.IS_DISPATCHER);
433:       assertEquals(51, Node.STATIC_SOURCE_FILE);
434:       assertEquals(2, Node.POST_FLAG);
435:       assertEquals(50, Node.FREE_CALL);
436:       assertEquals(40, Node.ORIGINALNAME_PROP);
437:       assertEquals(46, Node.IS_NAMESPACE);
438:       assertEquals(43, Node.IS_CONSTANT_NAME);
439:       assertFalse(node1.equals((Object)node0));
440:       
441:       Node node2 = new Node(1110, node1, node0, node0, node0);
442:       assertFalse(node0.isComma());
443:       assertFalse(node0.isGetProp());
444:       assertFalse(node0.isThis());
445:       assertFalse(node0.isBreak());
446:       assertFalse(node0.isFalse());
447:       assertFalse(node0.isInstanceOf());
448:       assertFalse(node0.isAnd());
449:       assertFalse(node0.isSwitch());
450:       assertFalse(node0.isInc());
451:       assertFalse(node0.isThrow());
452:       assertEquals((-1), node0.getSourcePosition());
453:       assertFalse(node0.isTypeOf());
454:       assertFalse(node0.isDec());
455:       assertFalse(node0.hasChildren());
456:       assertFalse(node0.isEmpty());
457:       assertFalse(node0.isAssign());
458:       assertFalse(node0.isOr());
459:       assertFalse(node0.isCast());
460:       assertFalse(node0.isGetElem());
461:       assertFalse(node0.isDelProp());
462:       assertFalse(node0.isVoid());
463:       assertFalse(node0.isDebugger());
464:       assertFalse(node0.isExprResult());
465:       assertFalse(node0.isNot());
466:       assertFalse(node0.isString());
467:       assertFalse(node0.isObjectLit());
468:       assertFalse(node0.isReturn());
469:       assertTrue(node0.isNumber());
470:       assertFalse(node0.isWhile());
471:       assertFalse(node0.isNull());
472:       assertFalse(node0.isSetterDef());
473:       assertFalse(node0.isCatch());
474:       assertFalse(node0.isCall());
475:       assertFalse(node0.isName());
476:       assertFalse(node0.isStringKey());
477:       assertFalse(node0.isParamList());
478:       assertFalse(node0.isTrue());
479:       assertFalse(node0.isAdd());
480:       assertFalse(node0.isFunction());
481:       assertFalse(node0.isContinue());
482:       assertFalse(node0.isVar());
483:       assertEquals(0, node0.getChildCount());
484:       assertFalse(node0.isNew());
485:       assertFalse(node0.isDo());
486:       assertFalse(node0.isDefaultCase());
487:       assertFalse(node0.isAssignAdd());
488:       assertFalse(node0.isNE());
489:       assertFalse(node0.isLabel());
490:       assertFalse(node0.isGetterDef());
491:       assertFalse(node0.isIn());
492:       assertFalse(node0.isArrayLit());
493:       assertEquals((-1), node0.getLineno());
494:       assertFalse(node0.isLabelName());
495:       assertFalse(node0.isIf());
496:       assertFalse(node0.isRegExp());
497:       assertFalse(node0.isScript());
498:       assertEquals((-1), node0.getCharno());
499:       assertEquals(39, node0.getType());
500:       assertFalse(node0.isWith());
501:       assertFalse(node0.hasMoreThanOneChild());
502:       assertFalse(node0.hasOneChild());
503:       assertFalse(node0.isHook());
504:       assertFalse(node0.isTry());
505:       assertFalse(node0.isFor());
506:       assertFalse(node0.isBlock());
507:       assertFalse(node0.isCase());
508:       assertFalse(node1.isCast());
509:       assertFalse(node1.isExprResult());
510:       assertFalse(node1.isGetElem());
511:       assertFalse(node1.isLabelName());
512:       assertFalse(node1.hasOneChild());
513:       assertFalse(node1.isNumber());
514:       assertFalse(node1.isScript());
515:       assertFalse(node1.isObjectLit());
516:       assertEquals(55, node1.getType());
517:       assertFalse(node1.isNot());
518:       assertFalse(node1.isOr());
519:       assertEquals((-1), node1.getSourcePosition());
520:       assertFalse(node1.isReturn());
521:       assertFalse(node1.hasMoreThanOneChild());
522:       assertFalse(node1.isInstanceOf());
523:       assertFalse(node1.isGetProp());
524:       assertEquals((-1), node1.getLineno());
525:       assertFalse(node1.hasChildren());
526:       assertFalse(node1.isBreak());
527:       assertFalse(node1.isTypeOf());
528:       assertFalse(node1.isWith());
529:       assertFalse(node1.isWhile());
530:       assertFalse(node1.isThis());
531:       assertFalse(node1.isBlock());
532:       assertFalse(node1.isAssign());
533:       assertFalse(node1.isComma());
534:       assertFalse(node1.isDec());
535:       assertFalse(node1.isHook());
536:       assertFalse(node1.isVar());
537:       assertFalse(node1.isCall());
538:       assertFalse(node1.isName());
539:       assertFalse(node1.isAdd());
540:       assertFalse(node1.isNew());
541:       assertFalse(node1.isNull());
542:       assertFalse(node1.isSwitch());
543:       assertFalse(node1.isParamList());
544:       assertFalse(node1.isStringKey());
545:       assertEquals((-1), node1.getCharno());
546:       assertEquals(0, node1.getChildCount());
547:       assertFalse(node1.isAssignAdd());
548:       assertFalse(node1.isDo());
549:       assertFalse(node1.isDefaultCase());
550:       assertFalse(node1.isLabel());
551:       assertFalse(node1.isVoid());
552:       assertFalse(node1.isTry());
553:       assertFalse(node1.isArrayLit());
554:       assertFalse(node1.isIf());
555:       assertFalse(node1.isGetterDef());
556:       assertFalse(node1.isDelProp());
557:       assertFalse(node1.isEmpty());
558:       assertFalse(node1.isNE());
559:       assertFalse(node1.isTrue());
560:       assertFalse(node1.isDebugger());
561:       assertFalse(node1.isCatch());
562:       assertFalse(node1.isCase());
563:       assertFalse(node1.isRegExp());
564:       assertFalse(node1.isFor());
565:       assertFalse(node1.isInc());
566:       assertFalse(node1.isString());
567:       assertFalse(node1.isIn());
568:       assertFalse(node1.isAnd());
569:       assertFalse(node1.isSetterDef());
570:       assertFalse(node1.isThrow());
571:       assertFalse(node1.isContinue());
572:       assertFalse(node1.isFunction());
573:       assertFalse(node1.isFalse());
574:       assertFalse(node2.isNE());
575:       assertTrue(node2.hasChildren());
576:       assertFalse(node2.isIf());
577:       assertFalse(node2.isDelProp());
578:       assertFalse(node2.isFor());
579:       assertFalse(node2.isArrayLit());
580:       assertFalse(node2.isSwitch());
581:       assertFalse(node2.isTry());
582:       assertFalse(node2.isCase());
583:       assertFalse(node2.isString());
584:       assertFalse(node2.isDebugger());
585:       assertEquals((-1), node2.getCharno());
586:       assertFalse(node2.isGetterDef());
587:       assertEquals(1110, node2.getType());
588:       assertEquals(2, node2.getChildCount());
589:       assertFalse(node2.isThis());
590:       assertFalse(node2.isInstanceOf());
591:       assertFalse(node2.isSetterDef());
592:       assertFalse(node2.isFalse());
593:       assertFalse(node2.isWith());
594:       assertFalse(node2.isCatch());
595:       assertFalse(node2.isThrow());
596:       assertFalse(node2.isRegExp());
597:       assertFalse(node2.isHook());
598:       assertFalse(node2.isFunction());
599:       assertFalse(node2.isInc());
600:       assertFalse(node2.isIn());
601:       assertFalse(node2.isAssignAdd());
602:       assertFalse(node2.isLabel());
603:       assertFalse(node2.isReturn());
604:       assertEquals((-1), node2.getLineno());
605:       assertFalse(node2.isLabelName());
606:       assertFalse(node2.isGetElem());
607:       assertFalse(node2.isWhile());
608:       assertFalse(node2.isContinue());
609:       assertFalse(node2.isCast());
610:       assertFalse(node2.isTypeOf());
611:       assertFalse(node2.isAssign());
612:       assertFalse(node2.isDec());
613:       assertFalse(node2.isBlock());
614:       assertFalse(node2.isScript());
615:       assertFalse(node2.hasOneChild());
616:       assertFalse(node2.isAnd());
617:       assertFalse(node2.isStringKey());
618:       assertEquals((-1), node2.getSourcePosition());
619:       assertFalse(node2.isNumber());
620:       assertFalse(node2.isObjectLit());
621:       assertFalse(node2.isNot());
622:       assertFalse(node2.isGetProp());
623:       assertFalse(node2.isParamList());
624:       assertFalse(node2.isBreak());
625:       assertFalse(node2.isCall());
626:       assertFalse(node2.isVar());
627:       assertFalse(node2.isComma());
628:       assertFalse(node2.isAdd());
629:       assertFalse(node2.isNew());
630:       assertFalse(node2.isTrue());
631:       assertFalse(node2.isExprResult());
632:       assertFalse(node2.isDefaultCase());
633:       assertFalse(node2.isVoid());
634:       assertTrue(node2.hasMoreThanOneChild());
635:       assertFalse(node2.isDo());
636:       assertFalse(node2.isName());
637:       assertFalse(node2.isEmpty());
638:       assertFalse(node2.isNull());
639:       assertFalse(node2.isOr());
640:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
641:       assertEquals(56, Node.CHANGE_TIME);
642:       assertEquals(47, Node.IS_DISPATCHER);
643:       assertEquals(53, Node.INPUT_ID);
644:       assertEquals(32, Node.INCRDECR_PROP);
645:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
646:       assertEquals(29, Node.JSDOC_INFO_PROP);
647:       assertEquals(30, Node.VAR_ARGS_NAME);
648:       assertEquals(43, Node.IS_CONSTANT_NAME);
649:       assertEquals(51, Node.STATIC_SOURCE_FILE);
650:       assertEquals(57, Node.LAST_PROP);
651:       assertEquals(46, Node.IS_NAMESPACE);
652:       assertEquals(54, Node.SLASH_V);
653:       assertEquals(2, Node.POST_FLAG);
654:       assertEquals(40, Node.ORIGINALNAME_PROP);
655:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
656:       assertEquals(50, Node.FREE_CALL);
657:       assertEquals(57, Node.REFLECTED_OBJECT);
658:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
659:       assertEquals(52, Node.LENGTH);
660:       assertEquals(8, Node.FLAG_NO_THROWS);
661:       assertEquals(15, Node.NO_SIDE_EFFECTS);
662:       assertEquals(39, Node.EMPTY_BLOCK);
663:       assertEquals(55, Node.INFERRED_FUNCTION);
664:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
665:       assertEquals(49, Node.DIRECT_EVAL);
666:       assertEquals(1, Node.DECR_FLAG);
667:       assertEquals(36, Node.QUOTED_PROP);
668:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
669:       assertEquals(12, Node.COLUMN_BITS);
670:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
671:       assertEquals(37, Node.OPT_ARG_NAME);
672:       assertEquals(48, Node.DIRECTIVES);
673:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
674:       assertEquals(4095, Node.COLUMN_MASK);
675:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
676:       assertEquals(54, Node.SLASH_V);
677:       assertEquals(15, Node.NO_SIDE_EFFECTS);
678:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
679:       assertEquals(30, Node.VAR_ARGS_NAME);
680:       assertEquals(52, Node.LENGTH);
681:       assertEquals(1, Node.DECR_FLAG);
682:       assertEquals(12, Node.COLUMN_BITS);
683:       assertEquals(32, Node.INCRDECR_PROP);
684:       assertEquals(57, Node.LAST_PROP);
685:       assertEquals(37, Node.OPT_ARG_NAME);
686:       assertEquals(48, Node.DIRECTIVES);
687:       assertEquals(39, Node.EMPTY_BLOCK);
688:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
689:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
690:       assertEquals(4095, Node.COLUMN_MASK);
691:       assertEquals(8, Node.FLAG_NO_THROWS);
692:       assertEquals(57, Node.REFLECTED_OBJECT);
693:       assertEquals(56, Node.CHANGE_TIME);
694:       assertEquals(49, Node.DIRECT_EVAL);
695:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
696:       assertEquals(36, Node.QUOTED_PROP);
697:       assertEquals(53, Node.INPUT_ID);
698:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
699:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
700:       assertEquals(55, Node.INFERRED_FUNCTION);
701:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
702:       assertEquals(29, Node.JSDOC_INFO_PROP);
703:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
704:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
705:       assertEquals(47, Node.IS_DISPATCHER);
706:       assertEquals(51, Node.STATIC_SOURCE_FILE);
707:       assertEquals(2, Node.POST_FLAG);
708:       assertEquals(50, Node.FREE_CALL);
709:       assertEquals(40, Node.ORIGINALNAME_PROP);
710:       assertEquals(46, Node.IS_NAMESPACE);
711:       assertEquals(43, Node.IS_CONSTANT_NAME);
712:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
713:       assertEquals(39, Node.EMPTY_BLOCK);
714:       assertEquals(50, Node.FREE_CALL);
715:       assertEquals(8, Node.FLAG_NO_THROWS);
716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
717:       assertEquals(57, Node.REFLECTED_OBJECT);
718:       assertEquals(40, Node.ORIGINALNAME_PROP);
719:       assertEquals(48, Node.DIRECTIVES);
720:       assertEquals(54, Node.SLASH_V);
721:       assertEquals(43, Node.IS_CONSTANT_NAME);
722:       assertEquals(4095, Node.COLUMN_MASK);
723:       assertEquals(12, Node.COLUMN_BITS);
724:       assertEquals(32, Node.INCRDECR_PROP);
725:       assertEquals(1, Node.DECR_FLAG);
726:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
727:       assertEquals(56, Node.CHANGE_TIME);
728:       assertEquals(2, Node.POST_FLAG);
729:       assertEquals(37, Node.OPT_ARG_NAME);
730:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
731:       assertEquals(47, Node.IS_DISPATCHER);
732:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
733:       assertEquals(29, Node.JSDOC_INFO_PROP);
734:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
735:       assertEquals(51, Node.STATIC_SOURCE_FILE);
736:       assertEquals(46, Node.IS_NAMESPACE);
737:       assertEquals(49, Node.DIRECT_EVAL);
738:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
739:       assertEquals(15, Node.NO_SIDE_EFFECTS);
740:       assertEquals(36, Node.QUOTED_PROP);
741:       assertEquals(53, Node.INPUT_ID);
742:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
743:       assertEquals(30, Node.VAR_ARGS_NAME);
744:       assertEquals(55, Node.INFERRED_FUNCTION);
745:       assertEquals(52, Node.LENGTH);
746:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
747:       assertEquals(57, Node.LAST_PROP);
748:       assertNotNull(node2);
749:       assertFalse(node0.equals((Object)node1));
750:       assertFalse(node1.equals((Object)node0));
751:       assertFalse(node2.equals((Object)node0));
752:       assertFalse(node2.equals((Object)node1));
753:       
754:       Iterable<Node> iterable0 = node0.children();
755:       assertFalse(node0.isComma());
756:       assertFalse(node0.isGetProp());
757:       assertFalse(node0.isThis());
758:       assertFalse(node0.isBreak());
759:       assertFalse(node0.isFalse());
760:       assertFalse(node0.isInstanceOf());
761:       assertFalse(node0.isAnd());
762:       assertFalse(node0.isSwitch());
763:       assertFalse(node0.isInc());
764:       assertFalse(node0.isThrow());
765:       assertEquals((-1), node0.getSourcePosition());
766:       assertFalse(node0.isTypeOf());
767:       assertFalse(node0.isDec());
768:       assertFalse(node0.hasChildren());
769:       assertFalse(node0.isEmpty());
770:       assertFalse(node0.isAssign());
771:       assertFalse(node0.isOr());
772:       assertFalse(node0.isCast());
773:       assertFalse(node0.isGetElem());
774:       assertFalse(node0.isDelProp());
775:       assertFalse(node0.isVoid());
776:       assertFalse(node0.isDebugger());
777:       assertFalse(node0.isExprResult());
778:       assertFalse(node0.isNot());
779:       assertFalse(node0.isString());
780:       assertFalse(node0.isObjectLit());
781:       assertFalse(node0.isReturn());
782:       assertTrue(node0.isNumber());
783:       assertFalse(node0.isWhile());
784:       assertFalse(node0.isNull());
785:       assertFalse(node0.isSetterDef());
786:       assertFalse(node0.isCatch());
787:       assertFalse(node0.isCall());
788:       assertFalse(node0.isName());
789:       assertFalse(node0.isStringKey());
790:       assertFalse(node0.isParamList());
791:       assertFalse(node0.isTrue());
792:       assertFalse(node0.isAdd());
793:       assertFalse(node0.isFunction());
794:       assertFalse(node0.isContinue());
795:       assertFalse(node0.isVar());
796:       assertEquals(0, node0.getChildCount());
797:       assertFalse(node0.isNew());
798:       assertFalse(node0.isDo());
799:       assertFalse(node0.isDefaultCase());
800:       assertFalse(node0.isAssignAdd());
801:       assertFalse(node0.isNE());
802:       assertFalse(node0.isLabel());
803:       assertFalse(node0.isGetterDef());
804:       assertFalse(node0.isIn());
805:       assertFalse(node0.isArrayLit());
806:       assertEquals((-1), node0.getLineno());
807:       assertFalse(node0.isLabelName());
808:       assertFalse(node0.isIf());
809:       assertFalse(node0.isRegExp());
810:       assertFalse(node0.isScript());
811:       assertEquals((-1), node0.getCharno());
812:       assertEquals(39, node0.getType());
813:       assertFalse(node0.isWith());
814:       assertFalse(node0.hasMoreThanOneChild());
815:       assertFalse(node0.hasOneChild());
816:       assertFalse(node0.isHook());
817:       assertFalse(node0.isTry());
818:       assertFalse(node0.isFor());
819:       assertFalse(node0.isBlock());
820:       assertFalse(node0.isCase());
821:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
822:       assertEquals(56, Node.CHANGE_TIME);
823:       assertEquals(47, Node.IS_DISPATCHER);
824:       assertEquals(53, Node.INPUT_ID);
825:       assertEquals(32, Node.INCRDECR_PROP);
826:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
827:       assertEquals(29, Node.JSDOC_INFO_PROP);
828:       assertEquals(30, Node.VAR_ARGS_NAME);
829:       assertEquals(43, Node.IS_CONSTANT_NAME);
830:       assertEquals(51, Node.STATIC_SOURCE_FILE);
831:       assertEquals(57, Node.LAST_PROP);
832:       assertEquals(46, Node.IS_NAMESPACE);
833:       assertEquals(54, Node.SLASH_V);
834:       assertEquals(2, Node.POST_FLAG);
835:       assertEquals(40, Node.ORIGINALNAME_PROP);
836:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
837:       assertEquals(50, Node.FREE_CALL);
838:       assertEquals(57, Node.REFLECTED_OBJECT);
839:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
840:       assertEquals(52, Node.LENGTH);
841:       assertEquals(8, Node.FLAG_NO_THROWS);
842:       assertEquals(15, Node.NO_SIDE_EFFECTS);
843:       assertEquals(39, Node.EMPTY_BLOCK);
844:       assertEquals(55, Node.INFERRED_FUNCTION);
845:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
846:       assertEquals(49, Node.DIRECT_EVAL);
847:       assertEquals(1, Node.DECR_FLAG);
848:       assertEquals(36, Node.QUOTED_PROP);
849:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
850:       assertEquals(12, Node.COLUMN_BITS);
851:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
852:       assertEquals(37, Node.OPT_ARG_NAME);
853:       assertEquals(48, Node.DIRECTIVES);
854:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
855:       assertEquals(4095, Node.COLUMN_MASK);
856:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
857:       assertNotNull(iterable0);
858:       assertFalse(node0.equals((Object)node1));
859:       assertFalse(node0.equals((Object)node2));
860:       assertFalse(iterable0.contains(node2));
861:       
862:       boolean boolean1 = node1.hasMoreThanOneChild();
863:       assertFalse(node1.isCast());
864:       assertFalse(node1.isExprResult());
865:       assertFalse(node1.isGetElem());
866:       assertFalse(node1.isLabelName());
867:       assertFalse(node1.hasOneChild());
868:       assertFalse(node1.isNumber());
869:       assertFalse(node1.isScript());
870:       assertFalse(node1.isObjectLit());
871:       assertEquals(55, node1.getType());
872:       assertFalse(node1.isNot());
873:       assertFalse(node1.isOr());
874:       assertEquals((-1), node1.getSourcePosition());
875:       assertFalse(node1.isReturn());
876:       assertFalse(node1.hasMoreThanOneChild());
877:       assertFalse(node1.isInstanceOf());
878:       assertFalse(node1.isGetProp());
879:       assertEquals((-1), node1.getLineno());
880:       assertFalse(node1.hasChildren());
881:       assertFalse(node1.isBreak());
882:       assertFalse(node1.isTypeOf());
883:       assertFalse(node1.isWith());
884:       assertFalse(node1.isWhile());
885:       assertFalse(node1.isThis());
886:       assertFalse(node1.isBlock());
887:       assertFalse(node1.isAssign());
888:       assertFalse(node1.isComma());
889:       assertFalse(node1.isDec());
890:       assertFalse(node1.isHook());
891:       assertFalse(node1.isVar());
892:       assertFalse(node1.isCall());
893:       assertFalse(node1.isName());
894:       assertFalse(node1.isAdd());
895:       assertFalse(node1.isNew());
896:       assertFalse(node1.isNull());
897:       assertFalse(node1.isSwitch());
898:       assertFalse(node1.isParamList());
899:       assertFalse(node1.isStringKey());
900:       assertEquals((-1), node1.getCharno());
901:       assertEquals(0, node1.getChildCount());
902:       assertFalse(node1.isAssignAdd());
903:       assertFalse(node1.isDo());
904:       assertFalse(node1.isDefaultCase());
905:       assertFalse(node1.isLabel());
906:       assertFalse(node1.isVoid());
907:       assertFalse(node1.isTry());
908:       assertFalse(node1.isArrayLit());
909:       assertFalse(node1.isIf());
910:       assertFalse(node1.isGetterDef());
911:       assertFalse(node1.isDelProp());
912:       assertFalse(node1.isEmpty());
913:       assertFalse(node1.isNE());
914:       assertFalse(node1.isTrue());
915:       assertFalse(node1.isDebugger());
916:       assertFalse(node1.isCatch());
917:       assertFalse(node1.isCase());
918:       assertFalse(node1.isRegExp());
919:       assertFalse(node1.isFor());
920:       assertFalse(node1.isInc());
921:       assertFalse(node1.isString());
922:       assertFalse(node1.isIn());
923:       assertFalse(node1.isAnd());
924:       assertFalse(node1.isSetterDef());
925:       assertFalse(node1.isThrow());
926:       assertFalse(node1.isContinue());
927:       assertFalse(node1.isFunction());
928:       assertFalse(node1.isFalse());
929:       assertEquals(54, Node.SLASH_V);
930:       assertEquals(15, Node.NO_SIDE_EFFECTS);
931:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
932:       assertEquals(30, Node.VAR_ARGS_NAME);
933:       assertEquals(52, Node.LENGTH);
934:       assertEquals(1, Node.DECR_FLAG);
935:       assertEquals(12, Node.COLUMN_BITS);
936:       assertEquals(32, Node.INCRDECR_PROP);
937:       assertEquals(57, Node.LAST_PROP);
938:       assertEquals(37, Node.OPT_ARG_NAME);
939:       assertEquals(48, Node.DIRECTIVES);
940:       assertEquals(39, Node.EMPTY_BLOCK);
941:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
942:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
943:       assertEquals(4095, Node.COLUMN_MASK);
944:       assertEquals(8, Node.FLAG_NO_THROWS);
945:       assertEquals(57, Node.REFLECTED_OBJECT);
946:       assertEquals(56, Node.CHANGE_TIME);
947:       assertEquals(49, Node.DIRECT_EVAL);
948:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
949:       assertEquals(36, Node.QUOTED_PROP);
950:       assertEquals(53, Node.INPUT_ID);
951:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
952:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
953:       assertEquals(55, Node.INFERRED_FUNCTION);
954:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
955:       assertEquals(29, Node.JSDOC_INFO_PROP);
956:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
957:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
958:       assertEquals(47, Node.IS_DISPATCHER);
959:       assertEquals(51, Node.STATIC_SOURCE_FILE);
960:       assertEquals(2, Node.POST_FLAG);
961:       assertEquals(50, Node.FREE_CALL);
962:       assertEquals(40, Node.ORIGINALNAME_PROP);
963:       assertEquals(46, Node.IS_NAMESPACE);
964:       assertEquals(43, Node.IS_CONSTANT_NAME);
965:       assertNotSame(node1, node2);
966:       assertFalse(boolean1);
967:       assertFalse(node1.equals((Object)node0));
968:       assertFalse(node1.equals((Object)node2));
969:       assertTrue(boolean1 == boolean0);
970:       
971:       boolean boolean2 = node0.isOnlyModifiesArgumentsCall();
972:       assertFalse(node0.isComma());
973:       assertFalse(node0.isGetProp());
974:       assertFalse(node0.isThis());
975:       assertFalse(node0.isBreak());
976:       assertFalse(node0.isFalse());
977:       assertFalse(node0.isInstanceOf());
978:       assertFalse(node0.isAnd());
979:       assertFalse(node0.isSwitch());
980:       assertFalse(node0.isInc());
981:       assertFalse(node0.isThrow());
982:       assertEquals((-1), node0.getSourcePosition());
983:       assertFalse(node0.isTypeOf());
984:       assertFalse(node0.isDec());
985:       assertFalse(node0.hasChildren());
986:       assertFalse(node0.isEmpty());
987:       assertFalse(node0.isAssign());
988:       assertFalse(node0.isOr());
989:       assertFalse(node0.isCast());
990:       assertFalse(node0.isGetElem());
991:       assertFalse(node0.isDelProp());
992:       assertFalse(node0.isVoid());
993:       assertFalse(node0.isDebugger());
994:       assertFalse(node0.isExprResult());
995:       assertFalse(node0.isNot());
996:       assertFalse(node0.isString());
997:       assertFalse(node0.isObjectLit());
998:       assertFalse(node0.isReturn());
999:       assertTrue(node0.isNumber());
1000:       assertFalse(node0.isWhile());
1001:       assertFalse(node0.isNull());
1002:       assertFalse(node0.isSetterDef());
1003:       assertFalse(node0.isCatch());
1004:       assertFalse(node0.isCall());
1005:       assertFalse(node0.isName());
1006:       assertFalse(node0.isStringKey());
1007:       assertFalse(node0.isParamList());
1008:       assertFalse(node0.isTrue());
1009:       assertFalse(node0.isAdd());
1010:       assertFalse(node0.isFunction());
1011:       assertFalse(node0.isContinue());
1012:       assertFalse(node0.isVar());
1013:       assertEquals(0, node0.getChildCount());
1014:       assertFalse(node0.isNew());
1015:       assertFalse(node0.isDo());
1016:       assertFalse(node0.isDefaultCase());
1017:       assertFalse(node0.isAssignAdd());
1018:       assertFalse(node0.isNE());
1019:       assertFalse(node0.isLabel());
1020:       assertFalse(node0.isGetterDef());
1021:       assertFalse(node0.isIn());
1022:       assertFalse(node0.isArrayLit());
1023:       assertEquals((-1), node0.getLineno());
1024:       assertFalse(node0.isLabelName());
1025:       assertFalse(node0.isIf());
1026:       assertFalse(node0.isRegExp());
1027:       assertFalse(node0.isScript());
1028:       assertEquals((-1), node0.getCharno());
1029:       assertEquals(39, node0.getType());
1030:       assertFalse(node0.isWith());
1031:       assertFalse(node0.hasMoreThanOneChild());
1032:       assertFalse(node0.hasOneChild());
1033:       assertFalse(node0.isHook());
1034:       assertFalse(node0.isTry());
1035:       assertFalse(node0.isFor());
1036:       assertFalse(node0.isBlock());
1037:       assertFalse(node0.isCase());
1038:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1039:       assertEquals(56, Node.CHANGE_TIME);
1040:       assertEquals(47, Node.IS_DISPATCHER);
1041:       assertEquals(53, Node.INPUT_ID);
1042:       assertEquals(32, Node.INCRDECR_PROP);
1043:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1044:       assertEquals(29, Node.JSDOC_INFO_PROP);
1045:       assertEquals(30, Node.VAR_ARGS_NAME);
1046:       assertEquals(43, Node.IS_CONSTANT_NAME);
1047:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1048:       assertEquals(57, Node.LAST_PROP);
1049:       assertEquals(46, Node.IS_NAMESPACE);
1050:       assertEquals(54, Node.SLASH_V);
1051:       assertEquals(2, Node.POST_FLAG);
1052:       assertEquals(40, Node.ORIGINALNAME_PROP);
1053:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1054:       assertEquals(50, Node.FREE_CALL);
1055:       assertEquals(57, Node.REFLECTED_OBJECT);
1056:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1057:       assertEquals(52, Node.LENGTH);
1058:       assertEquals(8, Node.FLAG_NO_THROWS);
1059:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1060:       assertEquals(39, Node.EMPTY_BLOCK);
1061:       assertEquals(55, Node.INFERRED_FUNCTION);
1062:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1063:       assertEquals(49, Node.DIRECT_EVAL);
1064:       assertEquals(1, Node.DECR_FLAG);
1065:       assertEquals(36, Node.QUOTED_PROP);
1066:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1067:       assertEquals(12, Node.COLUMN_BITS);
1068:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1069:       assertEquals(37, Node.OPT_ARG_NAME);
1070:       assertEquals(48, Node.DIRECTIVES);
1071:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1072:       assertEquals(4095, Node.COLUMN_MASK);
1073:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1074:       assertFalse(boolean2);
1075:       assertFalse(node0.equals((Object)node1));
1076:       assertFalse(node0.equals((Object)node2));
1077:       assertTrue(boolean2 == boolean1);
1078:       assertTrue(boolean2 == boolean0);
1079:   }
1080: }
RegularFileObject[/tmp/EvoSuite_143_1628160510546/com/google/javascript/rhino/Node_143_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:48:30 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_143_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_143_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.common.collect.AbstractMultimap$Values",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.javascript.rhino.JSDocInfo$1",
166:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
167:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
168:       "com.google.common.collect.Sets$ImprovedAbstractSet",
169:       "com.google.javascript.rhino.jstype.FunctionType",
170:       "com.google.common.base.Preconditions",
171:       "com.google.common.collect.UnmodifiableIterator",
172:       "com.google.javascript.rhino.JSDocInfo",
173:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
174:       "com.google.javascript.rhino.jstype.Property",
175:       "com.google.common.collect.ImmutableMapValues",
176:       "com.google.common.collect.ImmutableEntry",
177:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMultimap$Entries",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.Multimaps$Entries",
228:       "com.google.common.collect.AbstractMultimap",
229:       "com.google.common.collect.Multimap",
230:       "com.google.common.collect.Iterators",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_143_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.common.base.Objects",
274:       "com.google.javascript.rhino.SimpleErrorReporter",
275:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
276:       "com.google.common.base.Joiner",
277:       "com.google.common.base.Joiner$1",
278:       "com.google.common.collect.Collections2",
279:       "com.google.common.base.Joiner$MapJoiner",
280:       "com.google.common.collect.Maps",
281:       "com.google.common.collect.AbstractMultimap",
282:       "com.google.common.collect.AbstractMapBasedMultimap",
283:       "com.google.common.collect.AbstractSetMultimap",
284:       "com.google.common.collect.LinkedHashMultimap",
285:       "com.google.common.collect.AbstractMapEntry",
286:       "com.google.common.collect.ImmutableEntry",
287:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
288:       "com.google.common.collect.AbstractListMultimap",
289:       "com.google.common.collect.ArrayListMultimap",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
291:       "com.google.common.collect.ImmutableCollection",
292:       "com.google.common.collect.RegularImmutableList",
293:       "com.google.common.collect.ObjectArrays",
294:       "com.google.common.collect.ImmutableList",
295:       "com.google.javascript.rhino.jstype.ModificationVisitor",
296:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
297:       "com.google.common.collect.ImmutableCollection$Builder",
298:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
299:       "com.google.common.collect.ImmutableList$Builder",
300:       "com.google.common.collect.UnmodifiableIterator",
301:       "com.google.common.collect.UnmodifiableListIterator",
302:       "com.google.common.collect.Iterators$1",
303:       "com.google.common.collect.Iterators$2",
304:       "com.google.common.collect.Iterators",
305:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
306:       "com.google.javascript.rhino.jstype.JSType$1",
307:       "com.google.javascript.rhino.jstype.JSType",
308:       "com.google.javascript.rhino.jstype.ObjectType",
309:       "com.google.javascript.rhino.jstype.ProxyObjectType",
310:       "com.google.javascript.rhino.jstype.TemplateType",
311:       "com.google.javascript.rhino.jstype.ValueType",
312:       "com.google.javascript.rhino.jstype.BooleanType",
313:       "com.google.javascript.rhino.jstype.NullType",
314:       "com.google.javascript.rhino.jstype.NumberType",
315:       "com.google.javascript.rhino.jstype.StringType",
316:       "com.google.javascript.rhino.jstype.UnknownType",
317:       "com.google.javascript.rhino.jstype.VoidType",
318:       "com.google.javascript.rhino.jstype.AllType",
319:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
320:       "com.google.common.collect.ImmutableMap",
321:       "com.google.common.collect.ImmutableBiMap",
322:       "com.google.common.collect.EmptyImmutableBiMap",
323:       "com.google.javascript.rhino.jstype.PropertyMap$1",
324:       "com.google.javascript.rhino.jstype.PropertyMap",
325:       "com.google.javascript.rhino.jstype.FunctionType",
326:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.javascript.rhino.JSDocInfo",
347:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.common.collect.Sets",
352:       "com.google.common.collect.Iterables",
353:       "com.google.javascript.rhino.jstype.TemplatizedType",
354:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.javascript.rhino.jstype.JSType$2",
357:       "com.google.javascript.rhino.jstype.JSType$TypePair",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.javascript.rhino.Node$AncestorIterable$1",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.common.collect.AbstractMultimap$Values",
362:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
363:       "com.google.common.collect.AbstractMapBasedMultimap$1",
364:       "com.google.common.collect.Multimaps$Entries",
365:       "com.google.common.collect.AbstractMultimap$Entries",
366:       "com.google.common.collect.AbstractMapBasedMultimap$2",
367:       "com.google.common.collect.FluentIterable",
368:       "com.google.common.collect.Iterables$2",
369:       "com.google.javascript.rhino.JSTypeExpression",
370:       "com.google.common.collect.ImmutableSet",
371:       "com.google.common.collect.EmptyImmutableSet",
372:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
373:       "com.google.common.collect.Platform",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.common.collect.ImmutableList$1",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
378:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
379:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
380:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
381:     );
382:   }
383: }

[MASTER] 10:48:30.711 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNE());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node0);

boolean boolean0 = node0.isArrayLit();
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNE());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(boolean0);

Node node1 = new Node(55);
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertEquals(55, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isWhile());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

node1.putIntProp(38, 25);
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertEquals(55, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isWhile());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node1.equals((Object)node0));

Node node2 = new Node(1110, node1, node0, node0, node0);
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNE());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertEquals(55, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isWhile());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node2.isNE());
assertTrue(node2.hasChildren());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isFor());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertEquals(1110, node2.getType());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isThis());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isThrow());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isWhile());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isAnd());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isParamList());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isComma());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isName());
assertFalse(node2.isEmpty());
assertFalse(node2.isNull());
assertFalse(node2.isOr());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNE());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(iterable0.contains(node2));

boolean boolean1 = node1.hasMoreThanOneChild();
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertEquals(55, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isWhile());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isHook());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node1, node2);
assertFalse(boolean1);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node0.isOnlyModifiesArgumentsCall();
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isFalse());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNE());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isArrayLit());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertEquals(39, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(boolean2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);


[MASTER] 10:48:45.318 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_227_1628160525010/com/google/javascript/rhino/Node_227_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_227_1628160525010/com/google/javascript/rhino/Node_227_tmp__ESTest_scaffolding.java]]
[MASTER] 10:48:45.318 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:45.318 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:45.320 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 442
[MASTER] 10:48:45.323 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_227_1628160525010/com/google/javascript/rhino/Node_227_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:48:45 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.JSTypeNative;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_227_tmp__ESTest extends Node_227_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("com.google.javascript.rhino.Node$SideEffectFlags", 2361, 42);
22:       assertFalse(node0.isTry());
23:       assertFalse(node0.isDebugger());
24:       assertFalse(node0.isVoid());
25:       assertFalse(node0.isRegExp());
26:       assertFalse(node0.isArrayLit());
27:       assertFalse(node0.isFunction());
28:       assertFalse(node0.isDelProp());
29:       assertFalse(node0.isGetterDef());
30:       assertFalse(node0.isNE());
31:       assertFalse(node0.isTrue());
32:       assertFalse(node0.isIf());
33:       assertEquals(0, node0.getChildCount());
34:       assertFalse(node0.isSetterDef());
35:       assertFalse(node0.isIn());
36:       assertFalse(node0.isEmpty());
37:       assertEquals(40, node0.getType());
38:       assertFalse(node0.isVar());
39:       assertFalse(node0.isDefaultCase());
40:       assertTrue(node0.isString());
41:       assertFalse(node0.isBlock());
42:       assertFalse(node0.isInc());
43:       assertEquals(2361, node0.getLineno());
44:       assertFalse(node0.isSwitch());
45:       assertFalse(node0.isParamList());
46:       assertFalse(node0.isStringKey());
47:       assertFalse(node0.hasMoreThanOneChild());
48:       assertFalse(node0.isNumber());
49:       assertFalse(node0.isCatch());
50:       assertFalse(node0.isInstanceOf());
51:       assertFalse(node0.isFor());
52:       assertFalse(node0.isCase());
53:       assertFalse(node0.isWith());
54:       assertFalse(node0.isThis());
55:       assertFalse(node0.isHook());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isScript());
58:       assertFalse(node0.isExprResult());
59:       assertFalse(node0.isCast());
60:       assertFalse(node0.isNot());
61:       assertFalse(node0.isLabelName());
62:       assertFalse(node0.isGetElem());
63:       assertFalse(node0.isObjectLit());
64:       assertFalse(node0.isAnd());
65:       assertFalse(node0.isOr());
66:       assertFalse(node0.isAssignAdd());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.isContinue());
69:       assertEquals(42, node0.getCharno());
70:       assertFalse(node0.isDo());
71:       assertFalse(node0.isFalse());
72:       assertFalse(node0.isThrow());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.isNew());
75:       assertFalse(node0.isCall());
76:       assertEquals(9670698, node0.getSourcePosition());
77:       assertFalse(node0.isName());
78:       assertFalse(node0.isBreak());
79:       assertFalse(node0.isNull());
80:       assertFalse(node0.isGetProp());
81:       assertFalse(node0.isReturn());
82:       assertFalse(node0.isComma());
83:       assertFalse(node0.isTypeOf());
84:       assertFalse(node0.isAssign());
85:       assertFalse(node0.hasChildren());
86:       assertFalse(node0.isDec());
87:       assertFalse(node0.isWhile());
88:       assertEquals(57, Node.LAST_PROP);
89:       assertEquals(30, Node.VAR_ARGS_NAME);
90:       assertEquals(54, Node.SLASH_V);
91:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
92:       assertEquals(51, Node.STATIC_SOURCE_FILE);
93:       assertEquals(12, Node.COLUMN_BITS);
94:       assertEquals(32, Node.INCRDECR_PROP);
95:       assertEquals(52, Node.LENGTH);
96:       assertEquals(1, Node.DECR_FLAG);
97:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
98:       assertEquals(15, Node.NO_SIDE_EFFECTS);
99:       assertEquals(2, Node.POST_FLAG);
100:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
101:       assertEquals(50, Node.FREE_CALL);
102:       assertEquals(47, Node.IS_DISPATCHER);
103:       assertEquals(46, Node.IS_NAMESPACE);
104:       assertEquals(40, Node.ORIGINALNAME_PROP);
105:       assertEquals(43, Node.IS_CONSTANT_NAME);
106:       assertEquals(36, Node.QUOTED_PROP);
107:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
108:       assertEquals(55, Node.INFERRED_FUNCTION);
109:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
110:       assertEquals(53, Node.INPUT_ID);
111:       assertEquals(29, Node.JSDOC_INFO_PROP);
112:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
113:       assertEquals(39, Node.EMPTY_BLOCK);
114:       assertEquals(56, Node.CHANGE_TIME);
115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
116:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
117:       assertEquals(8, Node.FLAG_NO_THROWS);
118:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
119:       assertEquals(4095, Node.COLUMN_MASK);
120:       assertEquals(57, Node.REFLECTED_OBJECT);
121:       assertEquals(48, Node.DIRECTIVES);
122:       assertEquals(49, Node.DIRECT_EVAL);
123:       assertEquals(37, Node.OPT_ARG_NAME);
124:       assertNotNull(node0);
125:       
126:       boolean boolean0 = node0.isWith();
127:       assertFalse(node0.isTry());
128:       assertFalse(node0.isDebugger());
129:       assertFalse(node0.isVoid());
130:       assertFalse(node0.isRegExp());
131:       assertFalse(node0.isArrayLit());
132:       assertFalse(node0.isFunction());
133:       assertFalse(node0.isDelProp());
134:       assertFalse(node0.isGetterDef());
135:       assertFalse(node0.isNE());
136:       assertFalse(node0.isTrue());
137:       assertFalse(node0.isIf());
138:       assertEquals(0, node0.getChildCount());
139:       assertFalse(node0.isSetterDef());
140:       assertFalse(node0.isIn());
141:       assertFalse(node0.isEmpty());
142:       assertEquals(40, node0.getType());
143:       assertFalse(node0.isVar());
144:       assertFalse(node0.isDefaultCase());
145:       assertTrue(node0.isString());
146:       assertFalse(node0.isBlock());
147:       assertFalse(node0.isInc());
148:       assertEquals(2361, node0.getLineno());
149:       assertFalse(node0.isSwitch());
150:       assertFalse(node0.isParamList());
151:       assertFalse(node0.isStringKey());
152:       assertFalse(node0.hasMoreThanOneChild());
153:       assertFalse(node0.isNumber());
154:       assertFalse(node0.isCatch());
155:       assertFalse(node0.isInstanceOf());
156:       assertFalse(node0.isFor());
157:       assertFalse(node0.isCase());
158:       assertFalse(node0.isWith());
159:       assertFalse(node0.isThis());
160:       assertFalse(node0.isHook());
161:       assertFalse(node0.hasOneChild());
162:       assertFalse(node0.isScript());
163:       assertFalse(node0.isExprResult());
164:       assertFalse(node0.isCast());
165:       assertFalse(node0.isNot());
166:       assertFalse(node0.isLabelName());
167:       assertFalse(node0.isGetElem());
168:       assertFalse(node0.isObjectLit());
169:       assertFalse(node0.isAnd());
170:       assertFalse(node0.isOr());
171:       assertFalse(node0.isAssignAdd());
172:       assertFalse(node0.isLabel());
173:       assertFalse(node0.isContinue());
174:       assertEquals(42, node0.getCharno());
175:       assertFalse(node0.isDo());
176:       assertFalse(node0.isFalse());
177:       assertFalse(node0.isThrow());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isNew());
180:       assertFalse(node0.isCall());
181:       assertEquals(9670698, node0.getSourcePosition());
182:       assertFalse(node0.isName());
183:       assertFalse(node0.isBreak());
184:       assertFalse(node0.isNull());
185:       assertFalse(node0.isGetProp());
186:       assertFalse(node0.isReturn());
187:       assertFalse(node0.isComma());
188:       assertFalse(node0.isTypeOf());
189:       assertFalse(node0.isAssign());
190:       assertFalse(node0.hasChildren());
191:       assertFalse(node0.isDec());
192:       assertFalse(node0.isWhile());
193:       assertEquals(57, Node.LAST_PROP);
194:       assertEquals(30, Node.VAR_ARGS_NAME);
195:       assertEquals(54, Node.SLASH_V);
196:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
197:       assertEquals(51, Node.STATIC_SOURCE_FILE);
198:       assertEquals(12, Node.COLUMN_BITS);
199:       assertEquals(32, Node.INCRDECR_PROP);
200:       assertEquals(52, Node.LENGTH);
201:       assertEquals(1, Node.DECR_FLAG);
202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(2, Node.POST_FLAG);
205:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
206:       assertEquals(50, Node.FREE_CALL);
207:       assertEquals(47, Node.IS_DISPATCHER);
208:       assertEquals(46, Node.IS_NAMESPACE);
209:       assertEquals(40, Node.ORIGINALNAME_PROP);
210:       assertEquals(43, Node.IS_CONSTANT_NAME);
211:       assertEquals(36, Node.QUOTED_PROP);
212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
213:       assertEquals(55, Node.INFERRED_FUNCTION);
214:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
215:       assertEquals(53, Node.INPUT_ID);
216:       assertEquals(29, Node.JSDOC_INFO_PROP);
217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
218:       assertEquals(39, Node.EMPTY_BLOCK);
219:       assertEquals(56, Node.CHANGE_TIME);
220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
221:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
224:       assertEquals(4095, Node.COLUMN_MASK);
225:       assertEquals(57, Node.REFLECTED_OBJECT);
226:       assertEquals(48, Node.DIRECTIVES);
227:       assertEquals(49, Node.DIRECT_EVAL);
228:       assertEquals(37, Node.OPT_ARG_NAME);
229:       assertFalse(boolean0);
230:       
231:       Node node1 = Node.newNumber(768.23646, 40, 47);
232:       assertFalse(node1.isNot());
233:       assertFalse(node1.isAnd());
234:       assertFalse(node1.isObjectLit());
235:       assertFalse(node1.isWith());
236:       assertFalse(node1.isInstanceOf());
237:       assertFalse(node1.isScript());
238:       assertFalse(node1.isExprResult());
239:       assertFalse(node1.isGetElem());
240:       assertFalse(node1.isAssign());
241:       assertFalse(node1.hasOneChild());
242:       assertFalse(node1.isGetProp());
243:       assertFalse(node1.isBreak());
244:       assertFalse(node1.isTypeOf());
245:       assertFalse(node1.isHook());
246:       assertFalse(node1.isDec());
247:       assertFalse(node1.isThis());
248:       assertFalse(node1.isReturn());
249:       assertFalse(node1.isComma());
250:       assertEquals(40, node1.getLineno());
251:       assertFalse(node1.hasChildren());
252:       assertFalse(node1.isWhile());
253:       assertFalse(node1.isString());
254:       assertFalse(node1.isContinue());
255:       assertFalse(node1.hasMoreThanOneChild());
256:       assertFalse(node1.isInc());
257:       assertTrue(node1.isNumber());
258:       assertFalse(node1.isIn());
259:       assertFalse(node1.isNE());
260:       assertFalse(node1.isFalse());
261:       assertFalse(node1.isThrow());
262:       assertFalse(node1.isCast());
263:       assertFalse(node1.isSetterDef());
264:       assertFalse(node1.isFunction());
265:       assertFalse(node1.isDefaultCase());
266:       assertFalse(node1.isCatch());
267:       assertFalse(node1.isVoid());
268:       assertFalse(node1.isParamList());
269:       assertFalse(node1.isNull());
270:       assertFalse(node1.isTrue());
271:       assertFalse(node1.isDebugger());
272:       assertFalse(node1.isFor());
273:       assertFalse(node1.isName());
274:       assertFalse(node1.isDelProp());
275:       assertFalse(node1.isIf());
276:       assertFalse(node1.isCall());
277:       assertFalse(node1.isBlock());
278:       assertFalse(node1.isTry());
279:       assertFalse(node1.isRegExp());
280:       assertEquals(47, node1.getCharno());
281:       assertEquals(39, node1.getType());
282:       assertFalse(node1.isCase());
283:       assertFalse(node1.isDo());
284:       assertFalse(node1.isAdd());
285:       assertFalse(node1.isOr());
286:       assertFalse(node1.isSwitch());
287:       assertFalse(node1.isGetterDef());
288:       assertEquals(163887, node1.getSourcePosition());
289:       assertFalse(node1.isStringKey());
290:       assertFalse(node1.isEmpty());
291:       assertFalse(node1.isLabelName());
292:       assertFalse(node1.isArrayLit());
293:       assertFalse(node1.isNew());
294:       assertFalse(node1.isAssignAdd());
295:       assertEquals(0, node1.getChildCount());
296:       assertFalse(node1.isVar());
297:       assertFalse(node1.isLabel());
298:       assertEquals(51, Node.STATIC_SOURCE_FILE);
299:       assertEquals(12, Node.COLUMN_BITS);
300:       assertEquals(46, Node.IS_NAMESPACE);
301:       assertEquals(30, Node.VAR_ARGS_NAME);
302:       assertEquals(2, Node.POST_FLAG);
303:       assertEquals(15, Node.NO_SIDE_EFFECTS);
304:       assertEquals(47, Node.IS_DISPATCHER);
305:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
306:       assertEquals(57, Node.LAST_PROP);
307:       assertEquals(29, Node.JSDOC_INFO_PROP);
308:       assertEquals(1, Node.DECR_FLAG);
309:       assertEquals(32, Node.INCRDECR_PROP);
310:       assertEquals(57, Node.REFLECTED_OBJECT);
311:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
312:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
313:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
314:       assertEquals(52, Node.LENGTH);
315:       assertEquals(56, Node.CHANGE_TIME);
316:       assertEquals(36, Node.QUOTED_PROP);
317:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
318:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
319:       assertEquals(37, Node.OPT_ARG_NAME);
320:       assertEquals(48, Node.DIRECTIVES);
321:       assertEquals(49, Node.DIRECT_EVAL);
322:       assertEquals(4095, Node.COLUMN_MASK);
323:       assertEquals(55, Node.INFERRED_FUNCTION);
324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
325:       assertEquals(8, Node.FLAG_NO_THROWS);
326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
327:       assertEquals(39, Node.EMPTY_BLOCK);
328:       assertEquals(53, Node.INPUT_ID);
329:       assertEquals(40, Node.ORIGINALNAME_PROP);
330:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
331:       assertEquals(50, Node.FREE_CALL);
332:       assertEquals(43, Node.IS_CONSTANT_NAME);
333:       assertEquals(54, Node.SLASH_V);
334:       assertNotNull(node1);
335:       assertFalse(node1.equals((Object)node0));
336:       
337:       Iterable<Node> iterable0 = node1.children();
338:       assertFalse(node1.isNot());
339:       assertFalse(node1.isAnd());
340:       assertFalse(node1.isObjectLit());
341:       assertFalse(node1.isWith());
342:       assertFalse(node1.isInstanceOf());
343:       assertFalse(node1.isScript());
344:       assertFalse(node1.isExprResult());
345:       assertFalse(node1.isGetElem());
346:       assertFalse(node1.isAssign());
347:       assertFalse(node1.hasOneChild());
348:       assertFalse(node1.isGetProp());
349:       assertFalse(node1.isBreak());
350:       assertFalse(node1.isTypeOf());
351:       assertFalse(node1.isHook());
352:       assertFalse(node1.isDec());
353:       assertFalse(node1.isThis());
354:       assertFalse(node1.isReturn());
355:       assertFalse(node1.isComma());
356:       assertEquals(40, node1.getLineno());
357:       assertFalse(node1.hasChildren());
358:       assertFalse(node1.isWhile());
359:       assertFalse(node1.isString());
360:       assertFalse(node1.isContinue());
361:       assertFalse(node1.hasMoreThanOneChild());
362:       assertFalse(node1.isInc());
363:       assertTrue(node1.isNumber());
364:       assertFalse(node1.isIn());
365:       assertFalse(node1.isNE());
366:       assertFalse(node1.isFalse());
367:       assertFalse(node1.isThrow());
368:       assertFalse(node1.isCast());
369:       assertFalse(node1.isSetterDef());
370:       assertFalse(node1.isFunction());
371:       assertFalse(node1.isDefaultCase());
372:       assertFalse(node1.isCatch());
373:       assertFalse(node1.isVoid());
374:       assertFalse(node1.isParamList());
375:       assertFalse(node1.isNull());
376:       assertFalse(node1.isTrue());
377:       assertFalse(node1.isDebugger());
378:       assertFalse(node1.isFor());
379:       assertFalse(node1.isName());
380:       assertFalse(node1.isDelProp());
381:       assertFalse(node1.isIf());
382:       assertFalse(node1.isCall());
383:       assertFalse(node1.isBlock());
384:       assertFalse(node1.isTry());
385:       assertFalse(node1.isRegExp());
386:       assertEquals(47, node1.getCharno());
387:       assertEquals(39, node1.getType());
388:       assertFalse(node1.isCase());
389:       assertFalse(node1.isDo());
390:       assertFalse(node1.isAdd());
391:       assertFalse(node1.isOr());
392:       assertFalse(node1.isSwitch());
393:       assertFalse(node1.isGetterDef());
394:       assertEquals(163887, node1.getSourcePosition());
395:       assertFalse(node1.isStringKey());
396:       assertFalse(node1.isEmpty());
397:       assertFalse(node1.isLabelName());
398:       assertFalse(node1.isArrayLit());
399:       assertFalse(node1.isNew());
400:       assertFalse(node1.isAssignAdd());
401:       assertEquals(0, node1.getChildCount());
402:       assertFalse(node1.isVar());
403:       assertFalse(node1.isLabel());
404:       assertEquals(51, Node.STATIC_SOURCE_FILE);
405:       assertEquals(12, Node.COLUMN_BITS);
406:       assertEquals(46, Node.IS_NAMESPACE);
407:       assertEquals(30, Node.VAR_ARGS_NAME);
408:       assertEquals(2, Node.POST_FLAG);
409:       assertEquals(15, Node.NO_SIDE_EFFECTS);
410:       assertEquals(47, Node.IS_DISPATCHER);
411:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
412:       assertEquals(57, Node.LAST_PROP);
413:       assertEquals(29, Node.JSDOC_INFO_PROP);
414:       assertEquals(1, Node.DECR_FLAG);
415:       assertEquals(32, Node.INCRDECR_PROP);
416:       assertEquals(57, Node.REFLECTED_OBJECT);
417:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
418:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
419:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
420:       assertEquals(52, Node.LENGTH);
421:       assertEquals(56, Node.CHANGE_TIME);
422:       assertEquals(36, Node.QUOTED_PROP);
423:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
424:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
425:       assertEquals(37, Node.OPT_ARG_NAME);
426:       assertEquals(48, Node.DIRECTIVES);
427:       assertEquals(49, Node.DIRECT_EVAL);
428:       assertEquals(4095, Node.COLUMN_MASK);
429:       assertEquals(55, Node.INFERRED_FUNCTION);
430:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
431:       assertEquals(8, Node.FLAG_NO_THROWS);
432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
433:       assertEquals(39, Node.EMPTY_BLOCK);
434:       assertEquals(53, Node.INPUT_ID);
435:       assertEquals(40, Node.ORIGINALNAME_PROP);
436:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
437:       assertEquals(50, Node.FREE_CALL);
438:       assertEquals(43, Node.IS_CONSTANT_NAME);
439:       assertEquals(54, Node.SLASH_V);
440:       assertNotNull(iterable0);
441:       assertFalse(node1.equals((Object)node0));
442:       assertFalse(iterable0.contains(node1));
443:       
444:       Node node2 = node1.useSourceInfoFrom(node0);
445:       assertFalse(node0.isTry());
446:       assertFalse(node0.isDebugger());
447:       assertFalse(node0.isVoid());
448:       assertFalse(node0.isRegExp());
449:       assertFalse(node0.isArrayLit());
450:       assertFalse(node0.isFunction());
451:       assertFalse(node0.isDelProp());
452:       assertFalse(node0.isGetterDef());
453:       assertFalse(node0.isNE());
454:       assertFalse(node0.isTrue());
455:       assertFalse(node0.isIf());
456:       assertEquals(0, node0.getChildCount());
457:       assertFalse(node0.isSetterDef());
458:       assertFalse(node0.isIn());
459:       assertFalse(node0.isEmpty());
460:       assertEquals(40, node0.getType());
461:       assertFalse(node0.isVar());
462:       assertFalse(node0.isDefaultCase());
463:       assertTrue(node0.isString());
464:       assertFalse(node0.isBlock());
465:       assertFalse(node0.isInc());
466:       assertEquals(2361, node0.getLineno());
467:       assertFalse(node0.isSwitch());
468:       assertFalse(node0.isParamList());
469:       assertFalse(node0.isStringKey());
470:       assertFalse(node0.hasMoreThanOneChild());
471:       assertFalse(node0.isNumber());
472:       assertFalse(node0.isCatch());
473:       assertFalse(node0.isInstanceOf());
474:       assertFalse(node0.isFor());
475:       assertFalse(node0.isCase());
476:       assertFalse(node0.isWith());
477:       assertFalse(node0.isThis());
478:       assertFalse(node0.isHook());
479:       assertFalse(node0.hasOneChild());
480:       assertFalse(node0.isScript());
481:       assertFalse(node0.isExprResult());
482:       assertFalse(node0.isCast());
483:       assertFalse(node0.isNot());
484:       assertFalse(node0.isLabelName());
485:       assertFalse(node0.isGetElem());
486:       assertFalse(node0.isObjectLit());
487:       assertFalse(node0.isAnd());
488:       assertFalse(node0.isOr());
489:       assertFalse(node0.isAssignAdd());
490:       assertFalse(node0.isLabel());
491:       assertFalse(node0.isContinue());
492:       assertEquals(42, node0.getCharno());
493:       assertFalse(node0.isDo());
494:       assertFalse(node0.isFalse());
495:       assertFalse(node0.isThrow());
496:       assertFalse(node0.isAdd());
497:       assertFalse(node0.isNew());
498:       assertFalse(node0.isCall());
499:       assertEquals(9670698, node0.getSourcePosition());
500:       assertFalse(node0.isName());
501:       assertFalse(node0.isBreak());
502:       assertFalse(node0.isNull());
503:       assertFalse(node0.isGetProp());
504:       assertFalse(node0.isReturn());
505:       assertFalse(node0.isComma());
506:       assertFalse(node0.isTypeOf());
507:       assertFalse(node0.isAssign());
508:       assertFalse(node0.hasChildren());
509:       assertFalse(node0.isDec());
510:       assertFalse(node0.isWhile());
511:       assertFalse(node1.isNot());
512:       assertFalse(node1.isAnd());
513:       assertFalse(node1.isObjectLit());
514:       assertFalse(node1.isWith());
515:       assertFalse(node1.isInstanceOf());
516:       assertFalse(node1.isScript());
517:       assertFalse(node1.isExprResult());
518:       assertFalse(node1.isGetElem());
519:       assertFalse(node1.isAssign());
520:       assertFalse(node1.hasOneChild());
521:       assertFalse(node1.isGetProp());
522:       assertFalse(node1.isBreak());
523:       assertEquals(9670698, node1.getSourcePosition());
524:       assertFalse(node1.isTypeOf());
525:       assertFalse(node1.isHook());
526:       assertFalse(node1.isDec());
527:       assertFalse(node1.isThis());
528:       assertFalse(node1.isReturn());
529:       assertFalse(node1.isComma());
530:       assertFalse(node1.hasChildren());
531:       assertFalse(node1.isWhile());
532:       assertFalse(node1.isString());
533:       assertFalse(node1.isContinue());
534:       assertFalse(node1.hasMoreThanOneChild());
535:       assertEquals(42, node1.getCharno());
536:       assertFalse(node1.isInc());
537:       assertTrue(node1.isNumber());
538:       assertFalse(node1.isIn());
539:       assertFalse(node1.isNE());
540:       assertEquals(2361, node1.getLineno());
541:       assertFalse(node1.isFalse());
542:       assertFalse(node1.isThrow());
543:       assertFalse(node1.isCast());
544:       assertFalse(node1.isSetterDef());
545:       assertFalse(node1.isFunction());
546:       assertFalse(node1.isDefaultCase());
547:       assertFalse(node1.isCatch());
548:       assertFalse(node1.isVoid());
549:       assertFalse(node1.isParamList());
550:       assertFalse(node1.isNull());
551:       assertFalse(node1.isTrue());
552:       assertFalse(node1.isDebugger());
553:       assertFalse(node1.isFor());
554:       assertFalse(node1.isName());
555:       assertFalse(node1.isDelProp());
556:       assertFalse(node1.isIf());
557:       assertFalse(node1.isCall());
558:       assertFalse(node1.isBlock());
559:       assertFalse(node1.isTry());
560:       assertFalse(node1.isRegExp());
561:       assertEquals(39, node1.getType());
562:       assertFalse(node1.isCase());
563:       assertFalse(node1.isDo());
564:       assertFalse(node1.isAdd());
565:       assertFalse(node1.isOr());
566:       assertFalse(node1.isSwitch());
567:       assertFalse(node1.isGetterDef());
568:       assertFalse(node1.isStringKey());
569:       assertFalse(node1.isEmpty());
570:       assertFalse(node1.isLabelName());
571:       assertFalse(node1.isArrayLit());
572:       assertFalse(node1.isNew());
573:       assertFalse(node1.isAssignAdd());
574:       assertEquals(0, node1.getChildCount());
575:       assertFalse(node1.isVar());
576:       assertFalse(node1.isLabel());
577:       assertFalse(node2.isHook());
578:       assertEquals(9670698, node2.getSourcePosition());
579:       assertFalse(node2.isThrow());
580:       assertFalse(node2.isFalse());
581:       assertFalse(node2.isBreak());
582:       assertFalse(node2.isSwitch());
583:       assertFalse(node2.isIn());
584:       assertFalse(node2.isInc());
585:       assertFalse(node2.isEmpty());
586:       assertFalse(node2.isCast());
587:       assertFalse(node2.isFunction());
588:       assertFalse(node2.isDebugger());
589:       assertFalse(node2.isAssign());
590:       assertFalse(node2.isDec());
591:       assertFalse(node2.isTypeOf());
592:       assertFalse(node2.isTrue());
593:       assertFalse(node2.isExprResult());
594:       assertFalse(node2.isGetElem());
595:       assertFalse(node2.isDelProp());
596:       assertFalse(node2.isVoid());
597:       assertFalse(node2.isAnd());
598:       assertFalse(node2.isReturn());
599:       assertFalse(node2.isObjectLit());
600:       assertFalse(node2.isNot());
601:       assertFalse(node2.isComma());
602:       assertFalse(node2.hasChildren());
603:       assertFalse(node2.isWhile());
604:       assertFalse(node2.isString());
605:       assertFalse(node2.isGetProp());
606:       assertTrue(node2.isNumber());
607:       assertFalse(node2.isCall());
608:       assertFalse(node2.isVar());
609:       assertFalse(node2.isStringKey());
610:       assertFalse(node2.isBlock());
611:       assertFalse(node2.isNull());
612:       assertFalse(node2.isParamList());
613:       assertFalse(node2.isName());
614:       assertFalse(node2.isContinue());
615:       assertEquals(42, node2.getCharno());
616:       assertEquals(2361, node2.getLineno());
617:       assertFalse(node2.isLabel());
618:       assertEquals(0, node2.getChildCount());
619:       assertFalse(node2.isOr());
620:       assertFalse(node2.isDefaultCase());
621:       assertFalse(node2.isSetterDef());
622:       assertFalse(node2.isAdd());
623:       assertFalse(node2.isNew());
624:       assertFalse(node2.isAssignAdd());
625:       assertFalse(node2.isDo());
626:       assertFalse(node2.isArrayLit());
627:       assertFalse(node2.isFor());
628:       assertFalse(node2.isGetterDef());
629:       assertFalse(node2.isRegExp());
630:       assertFalse(node2.isIf());
631:       assertFalse(node2.isNE());
632:       assertFalse(node2.isLabelName());
633:       assertFalse(node2.hasMoreThanOneChild());
634:       assertFalse(node2.isCatch());
635:       assertFalse(node2.isInstanceOf());
636:       assertEquals(39, node2.getType());
637:       assertFalse(node2.isWith());
638:       assertFalse(node2.isScript());
639:       assertFalse(node2.isThis());
640:       assertFalse(node2.isCase());
641:       assertFalse(node2.isTry());
642:       assertFalse(node2.hasOneChild());
643:       assertEquals(57, Node.LAST_PROP);
644:       assertEquals(30, Node.VAR_ARGS_NAME);
645:       assertEquals(54, Node.SLASH_V);
646:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
647:       assertEquals(51, Node.STATIC_SOURCE_FILE);
648:       assertEquals(12, Node.COLUMN_BITS);
649:       assertEquals(32, Node.INCRDECR_PROP);
650:       assertEquals(52, Node.LENGTH);
651:       assertEquals(1, Node.DECR_FLAG);
652:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
653:       assertEquals(15, Node.NO_SIDE_EFFECTS);
654:       assertEquals(2, Node.POST_FLAG);
655:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
656:       assertEquals(50, Node.FREE_CALL);
657:       assertEquals(47, Node.IS_DISPATCHER);
658:       assertEquals(46, Node.IS_NAMESPACE);
659:       assertEquals(40, Node.ORIGINALNAME_PROP);
660:       assertEquals(43, Node.IS_CONSTANT_NAME);
661:       assertEquals(36, Node.QUOTED_PROP);
662:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
663:       assertEquals(55, Node.INFERRED_FUNCTION);
664:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
665:       assertEquals(53, Node.INPUT_ID);
666:       assertEquals(29, Node.JSDOC_INFO_PROP);
667:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
668:       assertEquals(39, Node.EMPTY_BLOCK);
669:       assertEquals(56, Node.CHANGE_TIME);
670:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
671:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
672:       assertEquals(8, Node.FLAG_NO_THROWS);
673:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
674:       assertEquals(4095, Node.COLUMN_MASK);
675:       assertEquals(57, Node.REFLECTED_OBJECT);
676:       assertEquals(48, Node.DIRECTIVES);
677:       assertEquals(49, Node.DIRECT_EVAL);
678:       assertEquals(37, Node.OPT_ARG_NAME);
679:       assertEquals(51, Node.STATIC_SOURCE_FILE);
680:       assertEquals(12, Node.COLUMN_BITS);
681:       assertEquals(46, Node.IS_NAMESPACE);
682:       assertEquals(30, Node.VAR_ARGS_NAME);
683:       assertEquals(2, Node.POST_FLAG);
684:       assertEquals(15, Node.NO_SIDE_EFFECTS);
685:       assertEquals(47, Node.IS_DISPATCHER);
686:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
687:       assertEquals(57, Node.LAST_PROP);
688:       assertEquals(29, Node.JSDOC_INFO_PROP);
689:       assertEquals(1, Node.DECR_FLAG);
690:       assertEquals(32, Node.INCRDECR_PROP);
691:       assertEquals(57, Node.REFLECTED_OBJECT);
692:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
693:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
694:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
695:       assertEquals(52, Node.LENGTH);
696:       assertEquals(56, Node.CHANGE_TIME);
697:       assertEquals(36, Node.QUOTED_PROP);
698:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
699:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
700:       assertEquals(37, Node.OPT_ARG_NAME);
701:       assertEquals(48, Node.DIRECTIVES);
702:       assertEquals(49, Node.DIRECT_EVAL);
703:       assertEquals(4095, Node.COLUMN_MASK);
704:       assertEquals(55, Node.INFERRED_FUNCTION);
705:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
706:       assertEquals(8, Node.FLAG_NO_THROWS);
707:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
708:       assertEquals(39, Node.EMPTY_BLOCK);
709:       assertEquals(53, Node.INPUT_ID);
710:       assertEquals(40, Node.ORIGINALNAME_PROP);
711:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
712:       assertEquals(50, Node.FREE_CALL);
713:       assertEquals(43, Node.IS_CONSTANT_NAME);
714:       assertEquals(54, Node.SLASH_V);
715:       assertEquals(53, Node.INPUT_ID);
716:       assertEquals(43, Node.IS_CONSTANT_NAME);
717:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
718:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
719:       assertEquals(29, Node.JSDOC_INFO_PROP);
720:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
721:       assertEquals(36, Node.QUOTED_PROP);
722:       assertEquals(55, Node.INFERRED_FUNCTION);
723:       assertEquals(39, Node.EMPTY_BLOCK);
724:       assertEquals(46, Node.IS_NAMESPACE);
725:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
726:       assertEquals(30, Node.VAR_ARGS_NAME);
727:       assertEquals(40, Node.ORIGINALNAME_PROP);
728:       assertEquals(47, Node.IS_DISPATCHER);
729:       assertEquals(2, Node.POST_FLAG);
730:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
731:       assertEquals(54, Node.SLASH_V);
732:       assertEquals(57, Node.REFLECTED_OBJECT);
733:       assertEquals(57, Node.LAST_PROP);
734:       assertEquals(1, Node.DECR_FLAG);
735:       assertEquals(50, Node.FREE_CALL);
736:       assertEquals(51, Node.STATIC_SOURCE_FILE);
737:       assertEquals(15, Node.NO_SIDE_EFFECTS);
738:       assertEquals(52, Node.LENGTH);
739:       assertEquals(8, Node.FLAG_NO_THROWS);
740:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
741:       assertEquals(48, Node.DIRECTIVES);
742:       assertEquals(37, Node.OPT_ARG_NAME);
743:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
744:       assertEquals(56, Node.CHANGE_TIME);
745:       assertEquals(12, Node.COLUMN_BITS);
746:       assertEquals(32, Node.INCRDECR_PROP);
747:       assertEquals(49, Node.DIRECT_EVAL);
748:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
749:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
750:       assertEquals(4095, Node.COLUMN_MASK);
751:       assertSame(node1, node2);
752:       assertSame(node2, node1);
753:       assertNotNull(node2);
754:       assertFalse(node0.equals((Object)node1));
755:       assertFalse(node1.equals((Object)node0));
756:       assertFalse(node2.equals((Object)node0));
757:       
758:       boolean boolean1 = node0.isEquivalentToShallow(node1);
759:       assertFalse(node0.isTry());
760:       assertFalse(node0.isDebugger());
761:       assertFalse(node0.isVoid());
762:       assertFalse(node0.isRegExp());
763:       assertFalse(node0.isArrayLit());
764:       assertFalse(node0.isFunction());
765:       assertFalse(node0.isDelProp());
766:       assertFalse(node0.isGetterDef());
767:       assertFalse(node0.isNE());
768:       assertFalse(node0.isTrue());
769:       assertFalse(node0.isIf());
770:       assertEquals(0, node0.getChildCount());
771:       assertFalse(node0.isSetterDef());
772:       assertFalse(node0.isIn());
773:       assertFalse(node0.isEmpty());
774:       assertEquals(40, node0.getType());
775:       assertFalse(node0.isVar());
776:       assertFalse(node0.isDefaultCase());
777:       assertTrue(node0.isString());
778:       assertFalse(node0.isBlock());
779:       assertFalse(node0.isInc());
780:       assertEquals(2361, node0.getLineno());
781:       assertFalse(node0.isSwitch());
782:       assertFalse(node0.isParamList());
783:       assertFalse(node0.isStringKey());
784:       assertFalse(node0.hasMoreThanOneChild());
785:       assertFalse(node0.isNumber());
786:       assertFalse(node0.isCatch());
787:       assertFalse(node0.isInstanceOf());
788:       assertFalse(node0.isFor());
789:       assertFalse(node0.isCase());
790:       assertFalse(node0.isWith());
791:       assertFalse(node0.isThis());
792:       assertFalse(node0.isHook());
793:       assertFalse(node0.hasOneChild());
794:       assertFalse(node0.isScript());
795:       assertFalse(node0.isExprResult());
796:       assertFalse(node0.isCast());
797:       assertFalse(node0.isNot());
798:       assertFalse(node0.isLabelName());
799:       assertFalse(node0.isGetElem());
800:       assertFalse(node0.isObjectLit());
801:       assertFalse(node0.isAnd());
802:       assertFalse(node0.isOr());
803:       assertFalse(node0.isAssignAdd());
804:       assertFalse(node0.isLabel());
805:       assertFalse(node0.isContinue());
806:       assertEquals(42, node0.getCharno());
807:       assertFalse(node0.isDo());
808:       assertFalse(node0.isFalse());
809:       assertFalse(node0.isThrow());
810:       assertFalse(node0.isAdd());
811:       assertFalse(node0.isNew());
812:       assertFalse(node0.isCall());
813:       assertEquals(9670698, node0.getSourcePosition());
814:       assertFalse(node0.isName());
815:       assertFalse(node0.isBreak());
816:       assertFalse(node0.isNull());
817:       assertFalse(node0.isGetProp());
818:       assertFalse(node0.isReturn());
819:       assertFalse(node0.isComma());
820:       assertFalse(node0.isTypeOf());
821:       assertFalse(node0.isAssign());
822:       assertFalse(node0.hasChildren());
823:       assertFalse(node0.isDec());
824:       assertFalse(node0.isWhile());
825:       assertFalse(node1.isNot());
826:       assertFalse(node1.isAnd());
827:       assertFalse(node1.isObjectLit());
828:       assertFalse(node1.isWith());
829:       assertFalse(node1.isInstanceOf());
830:       assertFalse(node1.isScript());
831:       assertFalse(node1.isExprResult());
832:       assertFalse(node1.isGetElem());
833:       assertFalse(node1.isAssign());
834:       assertFalse(node1.hasOneChild());
835:       assertFalse(node1.isGetProp());
836:       assertFalse(node1.isBreak());
837:       assertEquals(9670698, node1.getSourcePosition());
838:       assertFalse(node1.isTypeOf());
839:       assertFalse(node1.isHook());
840:       assertFalse(node1.isDec());
841:       assertFalse(node1.isThis());
842:       assertFalse(node1.isReturn());
843:       assertFalse(node1.isComma());
844:       assertFalse(node1.hasChildren());
845:       assertFalse(node1.isWhile());
846:       assertFalse(node1.isString());
847:       assertFalse(node1.isContinue());
848:       assertFalse(node1.hasMoreThanOneChild());
849:       assertEquals(42, node1.getCharno());
850:       assertFalse(node1.isInc());
851:       assertTrue(node1.isNumber());
852:       assertFalse(node1.isIn());
853:       assertFalse(node1.isNE());
854:       assertEquals(2361, node1.getLineno());
855:       assertFalse(node1.isFalse());
856:       assertFalse(node1.isThrow());
857:       assertFalse(node1.isCast());
858:       assertFalse(node1.isSetterDef());
859:       assertFalse(node1.isFunction());
860:       assertFalse(node1.isDefaultCase());
861:       assertFalse(node1.isCatch());
862:       assertFalse(node1.isVoid());
863:       assertFalse(node1.isParamList());
864:       assertFalse(node1.isNull());
865:       assertFalse(node1.isTrue());
866:       assertFalse(node1.isDebugger());
867:       assertFalse(node1.isFor());
868:       assertFalse(node1.isName());
869:       assertFalse(node1.isDelProp());
870:       assertFalse(node1.isIf());
871:       assertFalse(node1.isCall());
872:       assertFalse(node1.isBlock());
873:       assertFalse(node1.isTry());
874:       assertFalse(node1.isRegExp());
875:       assertEquals(39, node1.getType());
876:       assertFalse(node1.isCase());
877:       assertFalse(node1.isDo());
878:       assertFalse(node1.isAdd());
879:       assertFalse(node1.isOr());
880:       assertFalse(node1.isSwitch());
881:       assertFalse(node1.isGetterDef());
882:       assertFalse(node1.isStringKey());
883:       assertFalse(node1.isEmpty());
884:       assertFalse(node1.isLabelName());
885:       assertFalse(node1.isArrayLit());
886:       assertFalse(node1.isNew());
887:       assertFalse(node1.isAssignAdd());
888:       assertEquals(0, node1.getChildCount());
889:       assertFalse(node1.isVar());
890:       assertFalse(node1.isLabel());
891:       assertEquals(57, Node.LAST_PROP);
892:       assertEquals(30, Node.VAR_ARGS_NAME);
893:       assertEquals(54, Node.SLASH_V);
894:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
895:       assertEquals(51, Node.STATIC_SOURCE_FILE);
896:       assertEquals(12, Node.COLUMN_BITS);
897:       assertEquals(32, Node.INCRDECR_PROP);
898:       assertEquals(52, Node.LENGTH);
899:       assertEquals(1, Node.DECR_FLAG);
900:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
901:       assertEquals(15, Node.NO_SIDE_EFFECTS);
902:       assertEquals(2, Node.POST_FLAG);
903:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
904:       assertEquals(50, Node.FREE_CALL);
905:       assertEquals(47, Node.IS_DISPATCHER);
906:       assertEquals(46, Node.IS_NAMESPACE);
907:       assertEquals(40, Node.ORIGINALNAME_PROP);
908:       assertEquals(43, Node.IS_CONSTANT_NAME);
909:       assertEquals(36, Node.QUOTED_PROP);
910:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
911:       assertEquals(55, Node.INFERRED_FUNCTION);
912:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
913:       assertEquals(53, Node.INPUT_ID);
914:       assertEquals(29, Node.JSDOC_INFO_PROP);
915:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
916:       assertEquals(39, Node.EMPTY_BLOCK);
917:       assertEquals(56, Node.CHANGE_TIME);
918:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
919:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
920:       assertEquals(8, Node.FLAG_NO_THROWS);
921:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
922:       assertEquals(4095, Node.COLUMN_MASK);
923:       assertEquals(57, Node.REFLECTED_OBJECT);
924:       assertEquals(48, Node.DIRECTIVES);
925:       assertEquals(49, Node.DIRECT_EVAL);
926:       assertEquals(37, Node.OPT_ARG_NAME);
927:       assertEquals(51, Node.STATIC_SOURCE_FILE);
928:       assertEquals(12, Node.COLUMN_BITS);
929:       assertEquals(46, Node.IS_NAMESPACE);
930:       assertEquals(30, Node.VAR_ARGS_NAME);
931:       assertEquals(2, Node.POST_FLAG);
932:       assertEquals(15, Node.NO_SIDE_EFFECTS);
933:       assertEquals(47, Node.IS_DISPATCHER);
934:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
935:       assertEquals(57, Node.LAST_PROP);
936:       assertEquals(29, Node.JSDOC_INFO_PROP);
937:       assertEquals(1, Node.DECR_FLAG);
938:       assertEquals(32, Node.INCRDECR_PROP);
939:       assertEquals(57, Node.REFLECTED_OBJECT);
940:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
941:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
942:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
943:       assertEquals(52, Node.LENGTH);
944:       assertEquals(56, Node.CHANGE_TIME);
945:       assertEquals(36, Node.QUOTED_PROP);
946:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
947:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
948:       assertEquals(37, Node.OPT_ARG_NAME);
949:       assertEquals(48, Node.DIRECTIVES);
950:       assertEquals(49, Node.DIRECT_EVAL);
951:       assertEquals(4095, Node.COLUMN_MASK);
952:       assertEquals(55, Node.INFERRED_FUNCTION);
953:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
954:       assertEquals(8, Node.FLAG_NO_THROWS);
955:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
956:       assertEquals(39, Node.EMPTY_BLOCK);
957:       assertEquals(53, Node.INPUT_ID);
958:       assertEquals(40, Node.ORIGINALNAME_PROP);
959:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
960:       assertEquals(50, Node.FREE_CALL);
961:       assertEquals(43, Node.IS_CONSTANT_NAME);
962:       assertEquals(54, Node.SLASH_V);
963:       assertSame(node1, node2);
964:       assertFalse(boolean1);
965:       assertFalse(node0.equals((Object)node2));
966:       assertFalse(node0.equals((Object)node1));
967:       assertFalse(node1.equals((Object)node0));
968:       assertTrue(boolean1 == boolean0);
969:       
970:       boolean boolean2 = node2.isFromExterns();
971:       assertFalse(node0.isTry());
972:       assertFalse(node0.isDebugger());
973:       assertFalse(node0.isVoid());
974:       assertFalse(node0.isRegExp());
975:       assertFalse(node0.isArrayLit());
976:       assertFalse(node0.isFunction());
977:       assertFalse(node0.isDelProp());
978:       assertFalse(node0.isGetterDef());
979:       assertFalse(node0.isNE());
980:       assertFalse(node0.isTrue());
981:       assertFalse(node0.isIf());
982:       assertEquals(0, node0.getChildCount());
983:       assertFalse(node0.isSetterDef());
984:       assertFalse(node0.isIn());
985:       assertFalse(node0.isEmpty());
986:       assertEquals(40, node0.getType());
987:       assertFalse(node0.isVar());
988:       assertFalse(node0.isDefaultCase());
989:       assertTrue(node0.isString());
990:       assertFalse(node0.isBlock());
991:       assertFalse(node0.isInc());
992:       assertEquals(2361, node0.getLineno());
993:       assertFalse(node0.isSwitch());
994:       assertFalse(node0.isParamList());
995:       assertFalse(node0.isStringKey());
996:       assertFalse(node0.hasMoreThanOneChild());
997:       assertFalse(node0.isNumber());
998:       assertFalse(node0.isCatch());
999:       assertFalse(node0.isInstanceOf());
1000:       assertFalse(node0.isFor());
1001:       assertFalse(node0.isCase());
1002:       assertFalse(node0.isWith());
1003:       assertFalse(node0.isThis());
1004:       assertFalse(node0.isHook());
1005:       assertFalse(node0.hasOneChild());
1006:       assertFalse(node0.isScript());
1007:       assertFalse(node0.isExprResult());
1008:       assertFalse(node0.isCast());
1009:       assertFalse(node0.isNot());
1010:       assertFalse(node0.isLabelName());
1011:       assertFalse(node0.isGetElem());
1012:       assertFalse(node0.isObjectLit());
1013:       assertFalse(node0.isAnd());
1014:       assertFalse(node0.isOr());
1015:       assertFalse(node0.isAssignAdd());
1016:       assertFalse(node0.isLabel());
1017:       assertFalse(node0.isContinue());
1018:       assertEquals(42, node0.getCharno());
1019:       assertFalse(node0.isDo());
1020:       assertFalse(node0.isFalse());
1021:       assertFalse(node0.isThrow());
1022:       assertFalse(node0.isAdd());
1023:       assertFalse(node0.isNew());
1024:       assertFalse(node0.isCall());
1025:       assertEquals(9670698, node0.getSourcePosition());
1026:       assertFalse(node0.isName());
1027:       assertFalse(node0.isBreak());
1028:       assertFalse(node0.isNull());
1029:       assertFalse(node0.isGetProp());
1030:       assertFalse(node0.isReturn());
1031:       assertFalse(node0.isComma());
1032:       assertFalse(node0.isTypeOf());
1033:       assertFalse(node0.isAssign());
1034:       assertFalse(node0.hasChildren());
1035:       assertFalse(node0.isDec());
1036:       assertFalse(node0.isWhile());
1037:       assertFalse(node1.isNot());
1038:       assertFalse(node1.isAnd());
1039:       assertFalse(node1.isObjectLit());
1040:       assertFalse(node1.isWith());
1041:       assertFalse(node1.isInstanceOf());
1042:       assertFalse(node1.isScript());
1043:       assertFalse(node1.isExprResult());
1044:       assertFalse(node1.isGetElem());
1045:       assertFalse(node1.isAssign());
1046:       assertFalse(node1.hasOneChild());
1047:       assertFalse(node1.isGetProp());
1048:       assertFalse(node1.isBreak());
1049:       assertEquals(9670698, node1.getSourcePosition());
1050:       assertFalse(node1.isTypeOf());
1051:       assertFalse(node1.isHook());
1052:       assertFalse(node1.isDec());
1053:       assertFalse(node1.isThis());
1054:       assertFalse(node1.isReturn());
1055:       assertFalse(node1.isComma());
1056:       assertFalse(node1.hasChildren());
1057:       assertFalse(node1.isWhile());
1058:       assertFalse(node1.isString());
1059:       assertFalse(node1.isContinue());
1060:       assertFalse(node1.hasMoreThanOneChild());
1061:       assertEquals(42, node1.getCharno());
1062:       assertFalse(node1.isInc());
1063:       assertTrue(node1.isNumber());
1064:       assertFalse(node1.isIn());
1065:       assertFalse(node1.isNE());
1066:       assertEquals(2361, node1.getLineno());
1067:       assertFalse(node1.isFalse());
1068:       assertFalse(node1.isThrow());
1069:       assertFalse(node1.isCast());
1070:       assertFalse(node1.isSetterDef());
1071:       assertFalse(node1.isFunction());
1072:       assertFalse(node1.isDefaultCase());
1073:       assertFalse(node1.isCatch());
1074:       assertFalse(node1.isVoid());
1075:       assertFalse(node1.isParamList());
1076:       assertFalse(node1.isNull());
1077:       assertFalse(node1.isTrue());
1078:       assertFalse(node1.isDebugger());
1079:       assertFalse(node1.isFor());
1080:       assertFalse(node1.isName());
1081:       assertFalse(node1.isDelProp());
1082:       assertFalse(node1.isIf());
1083:       assertFalse(node1.isCall());
1084:       assertFalse(node1.isBlock());
1085:       assertFalse(node1.isTry());
1086:       assertFalse(node1.isRegExp());
1087:       assertEquals(39, node1.getType());
1088:       assertFalse(node1.isCase());
1089:       assertFalse(node1.isDo());
1090:       assertFalse(node1.isAdd());
1091:       assertFalse(node1.isOr());
1092:       assertFalse(node1.isSwitch());
1093:       assertFalse(node1.isGetterDef());
1094:       assertFalse(node1.isStringKey());
1095:       assertFalse(node1.isEmpty());
1096:       assertFalse(node1.isLabelName());
1097:       assertFalse(node1.isArrayLit());
1098:       assertFalse(node1.isNew());
1099:       assertFalse(node1.isAssignAdd());
1100:       assertEquals(0, node1.getChildCount());
1101:       assertFalse(node1.isVar());
1102:       assertFalse(node1.isLabel());
1103:       assertFalse(node2.isHook());
1104:       assertEquals(9670698, node2.getSourcePosition());
1105:       assertFalse(node2.isThrow());
1106:       assertFalse(node2.isFalse());
1107:       assertFalse(node2.isBreak());
1108:       assertFalse(node2.isSwitch());
1109:       assertFalse(node2.isIn());
1110:       assertFalse(node2.isInc());
1111:       assertFalse(node2.isEmpty());
1112:       assertFalse(node2.isCast());
1113:       assertFalse(node2.isFunction());
1114:       assertFalse(node2.isDebugger());
1115:       assertFalse(node2.isAssign());
1116:       assertFalse(node2.isDec());
1117:       assertFalse(node2.isTypeOf());
1118:       assertFalse(node2.isTrue());
1119:       assertFalse(node2.isExprResult());
1120:       assertFalse(node2.isGetElem());
1121:       assertFalse(node2.isDelProp());
1122:       assertFalse(node2.isVoid());
1123:       assertFalse(node2.isAnd());
1124:       assertFalse(node2.isReturn());
1125:       assertFalse(node2.isObjectLit());
1126:       assertFalse(node2.isNot());
1127:       assertFalse(node2.isComma());
1128:       assertFalse(node2.hasChildren());
1129:       assertFalse(node2.isWhile());
1130:       assertFalse(node2.isString());
1131:       assertFalse(node2.isGetProp());
1132:       assertTrue(node2.isNumber());
1133:       assertFalse(node2.isCall());
1134:       assertFalse(node2.isVar());
1135:       assertFalse(node2.isStringKey());
1136:       assertFalse(node2.isBlock());
1137:       assertFalse(node2.isNull());
1138:       assertFalse(node2.isParamList());
1139:       assertFalse(node2.isName());
1140:       assertFalse(node2.isContinue());
1141:       assertEquals(42, node2.getCharno());
1142:       assertEquals(2361, node2.getLineno());
1143:       assertFalse(node2.isLabel());
1144:       assertEquals(0, node2.getChildCount());
1145:       assertFalse(node2.isOr());
1146:       assertFalse(node2.isDefaultCase());
1147:       assertFalse(node2.isSetterDef());
1148:       assertFalse(node2.isAdd());
1149:       assertFalse(node2.isNew());
1150:       assertFalse(node2.isAssignAdd());
1151:       assertFalse(node2.isDo());
1152:       assertFalse(node2.isArrayLit());
1153:       assertFalse(node2.isFor());
1154:       assertFalse(node2.isGetterDef());
1155:       assertFalse(node2.isRegExp());
1156:       assertFalse(node2.isIf());
1157:       assertFalse(node2.isNE());
1158:       assertFalse(node2.isLabelName());
1159:       assertFalse(node2.hasMoreThanOneChild());
1160:       assertFalse(node2.isCatch());
1161:       assertFalse(node2.isInstanceOf());
1162:       assertEquals(39, node2.getType());
1163:       assertFalse(node2.isWith());
1164:       assertFalse(node2.isScript());
1165:       assertFalse(node2.isThis());
1166:       assertFalse(node2.isCase());
1167:       assertFalse(node2.isTry());
1168:       assertFalse(node2.hasOneChild());
1169:       assertEquals(57, Node.LAST_PROP);
1170:       assertEquals(30, Node.VAR_ARGS_NAME);
1171:       assertEquals(54, Node.SLASH_V);
1172:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1173:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1174:       assertEquals(12, Node.COLUMN_BITS);
1175:       assertEquals(32, Node.INCRDECR_PROP);
1176:       assertEquals(52, Node.LENGTH);
1177:       assertEquals(1, Node.DECR_FLAG);
1178:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1179:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1180:       assertEquals(2, Node.POST_FLAG);
1181:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1182:       assertEquals(50, Node.FREE_CALL);
1183:       assertEquals(47, Node.IS_DISPATCHER);
1184:       assertEquals(46, Node.IS_NAMESPACE);
1185:       assertEquals(40, Node.ORIGINALNAME_PROP);
1186:       assertEquals(43, Node.IS_CONSTANT_NAME);
1187:       assertEquals(36, Node.QUOTED_PROP);
1188:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1189:       assertEquals(55, Node.INFERRED_FUNCTION);
1190:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1191:       assertEquals(53, Node.INPUT_ID);
1192:       assertEquals(29, Node.JSDOC_INFO_PROP);
1193:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1194:       assertEquals(39, Node.EMPTY_BLOCK);
1195:       assertEquals(56, Node.CHANGE_TIME);
1196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1197:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1198:       assertEquals(8, Node.FLAG_NO_THROWS);
1199:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1200:       assertEquals(4095, Node.COLUMN_MASK);
1201:       assertEquals(57, Node.REFLECTED_OBJECT);
1202:       assertEquals(48, Node.DIRECTIVES);
1203:       assertEquals(49, Node.DIRECT_EVAL);
1204:       assertEquals(37, Node.OPT_ARG_NAME);
1205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1206:       assertEquals(12, Node.COLUMN_BITS);
1207:       assertEquals(46, Node.IS_NAMESPACE);
1208:       assertEquals(30, Node.VAR_ARGS_NAME);
1209:       assertEquals(2, Node.POST_FLAG);
1210:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1211:       assertEquals(47, Node.IS_DISPATCHER);
1212:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1213:       assertEquals(57, Node.LAST_PROP);
1214:       assertEquals(29, Node.JSDOC_INFO_PROP);
1215:       assertEquals(1, Node.DECR_FLAG);
1216:       assertEquals(32, Node.INCRDECR_PROP);
1217:       assertEquals(57, Node.REFLECTED_OBJECT);
1218:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1219:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1221:       assertEquals(52, Node.LENGTH);
1222:       assertEquals(56, Node.CHANGE_TIME);
1223:       assertEquals(36, Node.QUOTED_PROP);
1224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1225:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1226:       assertEquals(37, Node.OPT_ARG_NAME);
1227:       assertEquals(48, Node.DIRECTIVES);
1228:       assertEquals(49, Node.DIRECT_EVAL);
1229:       assertEquals(4095, Node.COLUMN_MASK);
1230:       assertEquals(55, Node.INFERRED_FUNCTION);
1231:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1232:       assertEquals(8, Node.FLAG_NO_THROWS);
1233:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1234:       assertEquals(39, Node.EMPTY_BLOCK);
1235:       assertEquals(53, Node.INPUT_ID);
1236:       assertEquals(40, Node.ORIGINALNAME_PROP);
1237:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1238:       assertEquals(50, Node.FREE_CALL);
1239:       assertEquals(43, Node.IS_CONSTANT_NAME);
1240:       assertEquals(54, Node.SLASH_V);
1241:       assertEquals(53, Node.INPUT_ID);
1242:       assertEquals(43, Node.IS_CONSTANT_NAME);
1243:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1244:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1245:       assertEquals(29, Node.JSDOC_INFO_PROP);
1246:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1247:       assertEquals(36, Node.QUOTED_PROP);
1248:       assertEquals(55, Node.INFERRED_FUNCTION);
1249:       assertEquals(39, Node.EMPTY_BLOCK);
1250:       assertEquals(46, Node.IS_NAMESPACE);
1251:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1252:       assertEquals(30, Node.VAR_ARGS_NAME);
1253:       assertEquals(40, Node.ORIGINALNAME_PROP);
1254:       assertEquals(47, Node.IS_DISPATCHER);
1255:       assertEquals(2, Node.POST_FLAG);
1256:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1257:       assertEquals(54, Node.SLASH_V);
1258:       assertEquals(57, Node.REFLECTED_OBJECT);
1259:       assertEquals(57, Node.LAST_PROP);
1260:       assertEquals(1, Node.DECR_FLAG);
1261:       assertEquals(50, Node.FREE_CALL);
1262:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1263:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1264:       assertEquals(52, Node.LENGTH);
1265:       assertEquals(8, Node.FLAG_NO_THROWS);
1266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1267:       assertEquals(48, Node.DIRECTIVES);
1268:       assertEquals(37, Node.OPT_ARG_NAME);
1269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1270:       assertEquals(56, Node.CHANGE_TIME);
1271:       assertEquals(12, Node.COLUMN_BITS);
1272:       assertEquals(32, Node.INCRDECR_PROP);
1273:       assertEquals(49, Node.DIRECT_EVAL);
1274:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1275:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1276:       assertEquals(4095, Node.COLUMN_MASK);
1277:       assertSame(node1, node2);
1278:       assertSame(node2, node1);
1279:       assertFalse(boolean2);
1280:       assertFalse(node0.equals((Object)node2));
1281:       assertFalse(node0.equals((Object)node1));
1282:       assertFalse(node1.equals((Object)node0));
1283:       assertFalse(node2.equals((Object)node0));
1284:       assertTrue(boolean2 == boolean0);
1285:       assertTrue(boolean2 == boolean1);
1286:       
1287:       JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
1288:       assertEquals(JSTypeNative.NO_OBJECT_TYPE, jSTypeNative0);
1289:       
1290:       node0.putProp(49, node1);
1291:       assertFalse(node0.isTry());
1292:       assertFalse(node0.isDebugger());
1293:       assertFalse(node0.isVoid());
1294:       assertFalse(node0.isRegExp());
1295:       assertFalse(node0.isArrayLit());
1296:       assertFalse(node0.isFunction());
1297:       assertFalse(node0.isDelProp());
1298:       assertFalse(node0.isGetterDef());
1299:       assertFalse(node0.isNE());
1300:       assertFalse(node0.isTrue());
1301:       assertFalse(node0.isIf());
1302:       assertEquals(0, node0.getChildCount());
1303:       assertFalse(node0.isSetterDef());
1304:       assertFalse(node0.isIn());
1305:       assertFalse(node0.isEmpty());
1306:       assertEquals(40, node0.getType());
1307:       assertFalse(node0.isVar());
1308:       assertFalse(node0.isDefaultCase());
1309:       assertTrue(node0.isString());
1310:       assertFalse(node0.isBlock());
1311:       assertFalse(node0.isInc());
1312:       assertEquals(2361, node0.getLineno());
1313:       assertFalse(node0.isSwitch());
1314:       assertFalse(node0.isParamList());
1315:       assertFalse(node0.isStringKey());
1316:       assertFalse(node0.hasMoreThanOneChild());
1317:       assertFalse(node0.isNumber());
1318:       assertFalse(node0.isCatch());
1319:       assertFalse(node0.isInstanceOf());
1320:       assertFalse(node0.isFor());
1321:       assertFalse(node0.isCase());
1322:       assertFalse(node0.isWith());
1323:       assertFalse(node0.isThis());
1324:       assertFalse(node0.isHook());
1325:       assertFalse(node0.hasOneChild());
1326:       assertFalse(node0.isScript());
1327:       assertFalse(node0.isExprResult());
1328:       assertFalse(node0.isCast());
1329:       assertFalse(node0.isNot());
1330:       assertFalse(node0.isLabelName());
1331:       assertFalse(node0.isGetElem());
1332:       assertFalse(node0.isObjectLit());
1333:       assertFalse(node0.isAnd());
1334:       assertFalse(node0.isOr());
1335:       assertFalse(node0.isAssignAdd());
1336:       assertFalse(node0.isLabel());
1337:       assertFalse(node0.isContinue());
1338:       assertEquals(42, node0.getCharno());
1339:       assertFalse(node0.isDo());
1340:       assertFalse(node0.isFalse());
1341:       assertFalse(node0.isThrow());
1342:       assertFalse(node0.isAdd());
1343:       assertFalse(node0.isNew());
1344:       assertFalse(node0.isCall());
1345:       assertEquals(9670698, node0.getSourcePosition());
1346:       assertFalse(node0.isName());
1347:       assertFalse(node0.isBreak());
1348:       assertFalse(node0.isNull());
1349:       assertFalse(node0.isGetProp());
1350:       assertFalse(node0.isReturn());
1351:       assertFalse(node0.isComma());
1352:       assertFalse(node0.isTypeOf());
1353:       assertFalse(node0.isAssign());
1354:       assertFalse(node0.hasChildren());
1355:       assertFalse(node0.isDec());
1356:       assertFalse(node0.isWhile());
1357:       assertFalse(node1.isNot());
1358:       assertFalse(node1.isAnd());
1359:       assertFalse(node1.isObjectLit());
1360:       assertFalse(node1.isWith());
1361:       assertFalse(node1.isInstanceOf());
1362:       assertFalse(node1.isScript());
1363:       assertFalse(node1.isExprResult());
1364:       assertFalse(node1.isGetElem());
1365:       assertFalse(node1.isAssign());
1366:       assertFalse(node1.hasOneChild());
1367:       assertFalse(node1.isGetProp());
1368:       assertFalse(node1.isBreak());
1369:       assertEquals(9670698, node1.getSourcePosition());
1370:       assertFalse(node1.isTypeOf());
1371:       assertFalse(node1.isHook());
1372:       assertFalse(node1.isDec());
1373:       assertFalse(node1.isThis());
1374:       assertFalse(node1.isReturn());
1375:       assertFalse(node1.isComma());
1376:       assertFalse(node1.hasChildren());
1377:       assertFalse(node1.isWhile());
1378:       assertFalse(node1.isString());
1379:       assertFalse(node1.isContinue());
1380:       assertFalse(node1.hasMoreThanOneChild());
1381:       assertEquals(42, node1.getCharno());
1382:       assertFalse(node1.isInc());
1383:       assertTrue(node1.isNumber());
1384:       assertFalse(node1.isIn());
1385:       assertFalse(node1.isNE());
1386:       assertEquals(2361, node1.getLineno());
1387:       assertFalse(node1.isFalse());
1388:       assertFalse(node1.isThrow());
1389:       assertFalse(node1.isCast());
1390:       assertFalse(node1.isSetterDef());
1391:       assertFalse(node1.isFunction());
1392:       assertFalse(node1.isDefaultCase());
1393:       assertFalse(node1.isCatch());
1394:       assertFalse(node1.isVoid());
1395:       assertFalse(node1.isParamList());
1396:       assertFalse(node1.isNull());
1397:       assertFalse(node1.isTrue());
1398:       assertFalse(node1.isDebugger());
1399:       assertFalse(node1.isFor());
1400:       assertFalse(node1.isName());
1401:       assertFalse(node1.isDelProp());
1402:       assertFalse(node1.isIf());
1403:       assertFalse(node1.isCall());
1404:       assertFalse(node1.isBlock());
1405:       assertFalse(node1.isTry());
1406:       assertFalse(node1.isRegExp());
1407:       assertEquals(39, node1.getType());
1408:       assertFalse(node1.isCase());
1409:       assertFalse(node1.isDo());
1410:       assertFalse(node1.isAdd());
1411:       assertFalse(node1.isOr());
1412:       assertFalse(node1.isSwitch());
1413:       assertFalse(node1.isGetterDef());
1414:       assertFalse(node1.isStringKey());
1415:       assertFalse(node1.isEmpty());
1416:       assertFalse(node1.isLabelName());
1417:       assertFalse(node1.isArrayLit());
1418:       assertFalse(node1.isNew());
1419:       assertFalse(node1.isAssignAdd());
1420:       assertEquals(0, node1.getChildCount());
1421:       assertFalse(node1.isVar());
1422:       assertFalse(node1.isLabel());
1423:       assertEquals(57, Node.LAST_PROP);
1424:       assertEquals(30, Node.VAR_ARGS_NAME);
1425:       assertEquals(54, Node.SLASH_V);
1426:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1427:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1428:       assertEquals(12, Node.COLUMN_BITS);
1429:       assertEquals(32, Node.INCRDECR_PROP);
1430:       assertEquals(52, Node.LENGTH);
1431:       assertEquals(1, Node.DECR_FLAG);
1432:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1434:       assertEquals(2, Node.POST_FLAG);
1435:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1436:       assertEquals(50, Node.FREE_CALL);
1437:       assertEquals(47, Node.IS_DISPATCHER);
1438:       assertEquals(46, Node.IS_NAMESPACE);
1439:       assertEquals(40, Node.ORIGINALNAME_PROP);
1440:       assertEquals(43, Node.IS_CONSTANT_NAME);
1441:       assertEquals(36, Node.QUOTED_PROP);
1442:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1443:       assertEquals(55, Node.INFERRED_FUNCTION);
1444:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1445:       assertEquals(53, Node.INPUT_ID);
1446:       assertEquals(29, Node.JSDOC_INFO_PROP);
1447:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1448:       assertEquals(39, Node.EMPTY_BLOCK);
1449:       assertEquals(56, Node.CHANGE_TIME);
1450:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1452:       assertEquals(8, Node.FLAG_NO_THROWS);
1453:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1454:       assertEquals(4095, Node.COLUMN_MASK);
1455:       assertEquals(57, Node.REFLECTED_OBJECT);
1456:       assertEquals(48, Node.DIRECTIVES);
1457:       assertEquals(49, Node.DIRECT_EVAL);
1458:       assertEquals(37, Node.OPT_ARG_NAME);
1459:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1460:       assertEquals(12, Node.COLUMN_BITS);
1461:       assertEquals(46, Node.IS_NAMESPACE);
1462:       assertEquals(30, Node.VAR_ARGS_NAME);
1463:       assertEquals(2, Node.POST_FLAG);
1464:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1465:       assertEquals(47, Node.IS_DISPATCHER);
1466:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1467:       assertEquals(57, Node.LAST_PROP);
1468:       assertEquals(29, Node.JSDOC_INFO_PROP);
1469:       assertEquals(1, Node.DECR_FLAG);
1470:       assertEquals(32, Node.INCRDECR_PROP);
1471:       assertEquals(57, Node.REFLECTED_OBJECT);
1472:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1473:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1474:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1475:       assertEquals(52, Node.LENGTH);
1476:       assertEquals(56, Node.CHANGE_TIME);
1477:       assertEquals(36, Node.QUOTED_PROP);
1478:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1479:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1480:       assertEquals(37, Node.OPT_ARG_NAME);
1481:       assertEquals(48, Node.DIRECTIVES);
1482:       assertEquals(49, Node.DIRECT_EVAL);
1483:       assertEquals(4095, Node.COLUMN_MASK);
1484:       assertEquals(55, Node.INFERRED_FUNCTION);
1485:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1486:       assertEquals(8, Node.FLAG_NO_THROWS);
1487:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1488:       assertEquals(39, Node.EMPTY_BLOCK);
1489:       assertEquals(53, Node.INPUT_ID);
1490:       assertEquals(40, Node.ORIGINALNAME_PROP);
1491:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1492:       assertEquals(50, Node.FREE_CALL);
1493:       assertEquals(43, Node.IS_CONSTANT_NAME);
1494:       assertEquals(54, Node.SLASH_V);
1495:       assertSame(node1, node2);
1496:       assertFalse(node0.equals((Object)node2));
1497:       assertFalse(node0.equals((Object)node1));
1498:       assertFalse(node1.equals((Object)node0));
1499:       
1500:       boolean boolean3 = node2.isNumber();
1501:       assertFalse(node0.isTry());
1502:       assertFalse(node0.isDebugger());
1503:       assertFalse(node0.isVoid());
1504:       assertFalse(node0.isRegExp());
1505:       assertFalse(node0.isArrayLit());
1506:       assertFalse(node0.isFunction());
1507:       assertFalse(node0.isDelProp());
1508:       assertFalse(node0.isGetterDef());
1509:       assertFalse(node0.isNE());
1510:       assertFalse(node0.isTrue());
1511:       assertFalse(node0.isIf());
1512:       assertEquals(0, node0.getChildCount());
1513:       assertFalse(node0.isSetterDef());
1514:       assertFalse(node0.isIn());
1515:       assertFalse(node0.isEmpty());
1516:       assertEquals(40, node0.getType());
1517:       assertFalse(node0.isVar());
1518:       assertFalse(node0.isDefaultCase());
1519:       assertTrue(node0.isString());
1520:       assertFalse(node0.isBlock());
1521:       assertFalse(node0.isInc());
1522:       assertEquals(2361, node0.getLineno());
1523:       assertFalse(node0.isSwitch());
1524:       assertFalse(node0.isParamList());
1525:       assertFalse(node0.isStringKey());
1526:       assertFalse(node0.hasMoreThanOneChild());
1527:       assertFalse(node0.isNumber());
1528:       assertFalse(node0.isCatch());
1529:       assertFalse(node0.isInstanceOf());
1530:       assertFalse(node0.isFor());
1531:       assertFalse(node0.isCase());
1532:       assertFalse(node0.isWith());
1533:       assertFalse(node0.isThis());
1534:       assertFalse(node0.isHook());
1535:       assertFalse(node0.hasOneChild());
1536:       assertFalse(node0.isScript());
1537:       assertFalse(node0.isExprResult());
1538:       assertFalse(node0.isCast());
1539:       assertFalse(node0.isNot());
1540:       assertFalse(node0.isLabelName());
1541:       assertFalse(node0.isGetElem());
1542:       assertFalse(node0.isObjectLit());
1543:       assertFalse(node0.isAnd());
1544:       assertFalse(node0.isOr());
1545:       assertFalse(node0.isAssignAdd());
1546:       assertFalse(node0.isLabel());
1547:       assertFalse(node0.isContinue());
1548:       assertEquals(42, node0.getCharno());
1549:       assertFalse(node0.isDo());
1550:       assertFalse(node0.isFalse());
1551:       assertFalse(node0.isThrow());
1552:       assertFalse(node0.isAdd());
1553:       assertFalse(node0.isNew());
1554:       assertFalse(node0.isCall());
1555:       assertEquals(9670698, node0.getSourcePosition());
1556:       assertFalse(node0.isName());
1557:       assertFalse(node0.isBreak());
1558:       assertFalse(node0.isNull());
1559:       assertFalse(node0.isGetProp());
1560:       assertFalse(node0.isReturn());
1561:       assertFalse(node0.isComma());
1562:       assertFalse(node0.isTypeOf());
1563:       assertFalse(node0.isAssign());
1564:       assertFalse(node0.hasChildren());
1565:       assertFalse(node0.isDec());
1566:       assertFalse(node0.isWhile());
1567:       assertFalse(node1.isNot());
1568:       assertFalse(node1.isAnd());
1569:       assertFalse(node1.isObjectLit());
1570:       assertFalse(node1.isWith());
1571:       assertFalse(node1.isInstanceOf());
1572:       assertFalse(node1.isScript());
1573:       assertFalse(node1.isExprResult());
1574:       assertFalse(node1.isGetElem());
1575:       assertFalse(node1.isAssign());
1576:       assertFalse(node1.hasOneChild());
1577:       assertFalse(node1.isGetProp());
1578:       assertFalse(node1.isBreak());
1579:       assertEquals(9670698, node1.getSourcePosition());
1580:       assertFalse(node1.isTypeOf());
1581:       assertFalse(node1.isHook());
1582:       assertFalse(node1.isDec());
1583:       assertFalse(node1.isThis());
1584:       assertFalse(node1.isReturn());
1585:       assertFalse(node1.isComma());
1586:       assertFalse(node1.hasChildren());
1587:       assertFalse(node1.isWhile());
1588:       assertFalse(node1.isString());
1589:       assertFalse(node1.isContinue());
1590:       assertFalse(node1.hasMoreThanOneChild());
1591:       assertEquals(42, node1.getCharno());
1592:       assertFalse(node1.isInc());
1593:       assertTrue(node1.isNumber());
1594:       assertFalse(node1.isIn());
1595:       assertFalse(node1.isNE());
1596:       assertEquals(2361, node1.getLineno());
1597:       assertFalse(node1.isFalse());
1598:       assertFalse(node1.isThrow());
1599:       assertFalse(node1.isCast());
1600:       assertFalse(node1.isSetterDef());
1601:       assertFalse(node1.isFunction());
1602:       assertFalse(node1.isDefaultCase());
1603:       assertFalse(node1.isCatch());
1604:       assertFalse(node1.isVoid());
1605:       assertFalse(node1.isParamList());
1606:       assertFalse(node1.isNull());
1607:       assertFalse(node1.isTrue());
1608:       assertFalse(node1.isDebugger());
1609:       assertFalse(node1.isFor());
1610:       assertFalse(node1.isName());
1611:       assertFalse(node1.isDelProp());
1612:       assertFalse(node1.isIf());
1613:       assertFalse(node1.isCall());
1614:       assertFalse(node1.isBlock());
1615:       assertFalse(node1.isTry());
1616:       assertFalse(node1.isRegExp());
1617:       assertEquals(39, node1.getType());
1618:       assertFalse(node1.isCase());
1619:       assertFalse(node1.isDo());
1620:       assertFalse(node1.isAdd());
1621:       assertFalse(node1.isOr());
1622:       assertFalse(node1.isSwitch());
1623:       assertFalse(node1.isGetterDef());
1624:       assertFalse(node1.isStringKey());
1625:       assertFalse(node1.isEmpty());
1626:       assertFalse(node1.isLabelName());
1627:       assertFalse(node1.isArrayLit());
1628:       assertFalse(node1.isNew());
1629:       assertFalse(node1.isAssignAdd());
1630:       assertEquals(0, node1.getChildCount());
1631:       assertFalse(node1.isVar());
1632:       assertFalse(node1.isLabel());
1633:       assertFalse(node2.isHook());
1634:       assertEquals(9670698, node2.getSourcePosition());
1635:       assertFalse(node2.isThrow());
1636:       assertFalse(node2.isFalse());
1637:       assertFalse(node2.isBreak());
1638:       assertFalse(node2.isSwitch());
1639:       assertFalse(node2.isIn());
1640:       assertFalse(node2.isInc());
1641:       assertFalse(node2.isEmpty());
1642:       assertFalse(node2.isCast());
1643:       assertFalse(node2.isFunction());
1644:       assertFalse(node2.isDebugger());
1645:       assertFalse(node2.isAssign());
1646:       assertFalse(node2.isDec());
1647:       assertFalse(node2.isTypeOf());
1648:       assertFalse(node2.isTrue());
1649:       assertFalse(node2.isExprResult());
1650:       assertFalse(node2.isGetElem());
1651:       assertFalse(node2.isDelProp());
1652:       assertFalse(node2.isVoid());
1653:       assertFalse(node2.isAnd());
1654:       assertFalse(node2.isReturn());
1655:       assertFalse(node2.isObjectLit());
1656:       assertFalse(node2.isNot());
1657:       assertFalse(node2.isComma());
1658:       assertFalse(node2.hasChildren());
1659:       assertFalse(node2.isWhile());
1660:       assertFalse(node2.isString());
1661:       assertFalse(node2.isGetProp());
1662:       assertTrue(node2.isNumber());
1663:       assertFalse(node2.isCall());
1664:       assertFalse(node2.isVar());
1665:       assertFalse(node2.isStringKey());
1666:       assertFalse(node2.isBlock());
1667:       assertFalse(node2.isNull());
1668:       assertFalse(node2.isParamList());
1669:       assertFalse(node2.isName());
1670:       assertFalse(node2.isContinue());
1671:       assertEquals(42, node2.getCharno());
1672:       assertEquals(2361, node2.getLineno());
1673:       assertFalse(node2.isLabel());
1674:       assertEquals(0, node2.getChildCount());
1675:       assertFalse(node2.isOr());
1676:       assertFalse(node2.isDefaultCase());
1677:       assertFalse(node2.isSetterDef());
1678:       assertFalse(node2.isAdd());
1679:       assertFalse(node2.isNew());
1680:       assertFalse(node2.isAssignAdd());
1681:       assertFalse(node2.isDo());
1682:       assertFalse(node2.isArrayLit());
1683:       assertFalse(node2.isFor());
1684:       assertFalse(node2.isGetterDef());
1685:       assertFalse(node2.isRegExp());
1686:       assertFalse(node2.isIf());
1687:       assertFalse(node2.isNE());
1688:       assertFalse(node2.isLabelName());
1689:       assertFalse(node2.hasMoreThanOneChild());
1690:       assertFalse(node2.isCatch());
1691:       assertFalse(node2.isInstanceOf());
1692:       assertEquals(39, node2.getType());
1693:       assertFalse(node2.isWith());
1694:       assertFalse(node2.isScript());
1695:       assertFalse(node2.isThis());
1696:       assertFalse(node2.isCase());
1697:       assertFalse(node2.isTry());
1698:       assertFalse(node2.hasOneChild());
1699:       assertEquals(57, Node.LAST_PROP);
1700:       assertEquals(30, Node.VAR_ARGS_NAME);
1701:       assertEquals(54, Node.SLASH_V);
1702:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1703:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1704:       assertEquals(12, Node.COLUMN_BITS);
1705:       assertEquals(32, Node.INCRDECR_PROP);
1706:       assertEquals(52, Node.LENGTH);
1707:       assertEquals(1, Node.DECR_FLAG);
1708:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1709:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1710:       assertEquals(2, Node.POST_FLAG);
1711:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1712:       assertEquals(50, Node.FREE_CALL);
1713:       assertEquals(47, Node.IS_DISPATCHER);
1714:       assertEquals(46, Node.IS_NAMESPACE);
1715:       assertEquals(40, Node.ORIGINALNAME_PROP);
1716:       assertEquals(43, Node.IS_CONSTANT_NAME);
1717:       assertEquals(36, Node.QUOTED_PROP);
1718:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1719:       assertEquals(55, Node.INFERRED_FUNCTION);
1720:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1721:       assertEquals(53, Node.INPUT_ID);
1722:       assertEquals(29, Node.JSDOC_INFO_PROP);
1723:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1724:       assertEquals(39, Node.EMPTY_BLOCK);
1725:       assertEquals(56, Node.CHANGE_TIME);
1726:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1727:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1728:       assertEquals(8, Node.FLAG_NO_THROWS);
1729:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1730:       assertEquals(4095, Node.COLUMN_MASK);
1731:       assertEquals(57, Node.REFLECTED_OBJECT);
1732:       assertEquals(48, Node.DIRECTIVES);
1733:       assertEquals(49, Node.DIRECT_EVAL);
1734:       assertEquals(37, Node.OPT_ARG_NAME);
1735:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1736:       assertEquals(12, Node.COLUMN_BITS);
1737:       assertEquals(46, Node.IS_NAMESPACE);
1738:       assertEquals(30, Node.VAR_ARGS_NAME);
1739:       assertEquals(2, Node.POST_FLAG);
1740:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1741:       assertEquals(47, Node.IS_DISPATCHER);
1742:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1743:       assertEquals(57, Node.LAST_PROP);
1744:       assertEquals(29, Node.JSDOC_INFO_PROP);
1745:       assertEquals(1, Node.DECR_FLAG);
1746:       assertEquals(32, Node.INCRDECR_PROP);
1747:       assertEquals(57, Node.REFLECTED_OBJECT);
1748:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1749:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1750:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1751:       assertEquals(52, Node.LENGTH);
1752:       assertEquals(56, Node.CHANGE_TIME);
1753:       assertEquals(36, Node.QUOTED_PROP);
1754:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1755:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1756:       assertEquals(37, Node.OPT_ARG_NAME);
1757:       assertEquals(48, Node.DIRECTIVES);
1758:       assertEquals(49, Node.DIRECT_EVAL);
1759:       assertEquals(4095, Node.COLUMN_MASK);
1760:       assertEquals(55, Node.INFERRED_FUNCTION);
1761:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1762:       assertEquals(8, Node.FLAG_NO_THROWS);
1763:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1764:       assertEquals(39, Node.EMPTY_BLOCK);
1765:       assertEquals(53, Node.INPUT_ID);
1766:       assertEquals(40, Node.ORIGINALNAME_PROP);
1767:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1768:       assertEquals(50, Node.FREE_CALL);
1769:       assertEquals(43, Node.IS_CONSTANT_NAME);
1770:       assertEquals(54, Node.SLASH_V);
1771:       assertEquals(53, Node.INPUT_ID);
1772:       assertEquals(43, Node.IS_CONSTANT_NAME);
1773:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1774:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1775:       assertEquals(29, Node.JSDOC_INFO_PROP);
1776:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1777:       assertEquals(36, Node.QUOTED_PROP);
1778:       assertEquals(55, Node.INFERRED_FUNCTION);
1779:       assertEquals(39, Node.EMPTY_BLOCK);
1780:       assertEquals(46, Node.IS_NAMESPACE);
1781:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1782:       assertEquals(30, Node.VAR_ARGS_NAME);
1783:       assertEquals(40, Node.ORIGINALNAME_PROP);
1784:       assertEquals(47, Node.IS_DISPATCHER);
1785:       assertEquals(2, Node.POST_FLAG);
1786:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1787:       assertEquals(54, Node.SLASH_V);
1788:       assertEquals(57, Node.REFLECTED_OBJECT);
1789:       assertEquals(57, Node.LAST_PROP);
1790:       assertEquals(1, Node.DECR_FLAG);
1791:       assertEquals(50, Node.FREE_CALL);
1792:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1793:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1794:       assertEquals(52, Node.LENGTH);
1795:       assertEquals(8, Node.FLAG_NO_THROWS);
1796:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1797:       assertEquals(48, Node.DIRECTIVES);
1798:       assertEquals(37, Node.OPT_ARG_NAME);
1799:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1800:       assertEquals(56, Node.CHANGE_TIME);
1801:       assertEquals(12, Node.COLUMN_BITS);
1802:       assertEquals(32, Node.INCRDECR_PROP);
1803:       assertEquals(49, Node.DIRECT_EVAL);
1804:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1805:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1806:       assertEquals(4095, Node.COLUMN_MASK);
1807:       assertSame(node1, node2);
1808:       assertSame(node2, node1);
1809:       assertTrue(boolean3);
1810:       assertFalse(node0.equals((Object)node2));
1811:       assertFalse(node0.equals((Object)node1));
1812:       assertFalse(node1.equals((Object)node0));
1813:       assertFalse(node2.equals((Object)node0));
1814:       assertFalse(boolean3 == boolean0);
1815:       assertFalse(boolean3 == boolean1);
1816:       assertFalse(boolean3 == boolean2);
1817:       
1818:       boolean boolean4 = node1.isAdd();
1819:       assertFalse(node1.isNot());
1820:       assertFalse(node1.isAnd());
1821:       assertFalse(node1.isObjectLit());
1822:       assertFalse(node1.isWith());
1823:       assertFalse(node1.isInstanceOf());
1824:       assertFalse(node1.isScript());
1825:       assertFalse(node1.isExprResult());
1826:       assertFalse(node1.isGetElem());
1827:       assertFalse(node1.isAssign());
1828:       assertFalse(node1.hasOneChild());
1829:       assertFalse(node1.isGetProp());
1830:       assertFalse(node1.isBreak());
1831:       assertEquals(9670698, node1.getSourcePosition());
1832:       assertFalse(node1.isTypeOf());
1833:       assertFalse(node1.isHook());
1834:       assertFalse(node1.isDec());
1835:       assertFalse(node1.isThis());
1836:       assertFalse(node1.isReturn());
1837:       assertFalse(node1.isComma());
1838:       assertFalse(node1.hasChildren());
1839:       assertFalse(node1.isWhile());
1840:       assertFalse(node1.isString());
1841:       assertFalse(node1.isContinue());
1842:       assertFalse(node1.hasMoreThanOneChild());
1843:       assertEquals(42, node1.getCharno());
1844:       assertFalse(node1.isInc());
1845:       assertTrue(node1.isNumber());
1846:       assertFalse(node1.isIn());
1847:       assertFalse(node1.isNE());
1848:       assertEquals(2361, node1.getLineno());
1849:       assertFalse(node1.isFalse());
1850:       assertFalse(node1.isThrow());
1851:       assertFalse(node1.isCast());
1852:       assertFalse(node1.isSetterDef());
1853:       assertFalse(node1.isFunction());
1854:       assertFalse(node1.isDefaultCase());
1855:       assertFalse(node1.isCatch());
1856:       assertFalse(node1.isVoid());
1857:       assertFalse(node1.isParamList());
1858:       assertFalse(node1.isNull());
1859:       assertFalse(node1.isTrue());
1860:       assertFalse(node1.isDebugger());
1861:       assertFalse(node1.isFor());
1862:       assertFalse(node1.isName());
1863:       assertFalse(node1.isDelProp());
1864:       assertFalse(node1.isIf());
1865:       assertFalse(node1.isCall());
1866:       assertFalse(node1.isBlock());
1867:       assertFalse(node1.isTry());
1868:       assertFalse(node1.isRegExp());
1869:       assertEquals(39, node1.getType());
1870:       assertFalse(node1.isCase());
1871:       assertFalse(node1.isDo());
1872:       assertFalse(node1.isAdd());
1873:       assertFalse(node1.isOr());
1874:       assertFalse(node1.isSwitch());
1875:       assertFalse(node1.isGetterDef());
1876:       assertFalse(node1.isStringKey());
1877:       assertFalse(node1.isEmpty());
1878:       assertFalse(node1.isLabelName());
1879:       assertFalse(node1.isArrayLit());
1880:       assertFalse(node1.isNew());
1881:       assertFalse(node1.isAssignAdd());
1882:       assertEquals(0, node1.getChildCount());
1883:       assertFalse(node1.isVar());
1884:       assertFalse(node1.isLabel());
1885:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1886:       assertEquals(12, Node.COLUMN_BITS);
1887:       assertEquals(46, Node.IS_NAMESPACE);
1888:       assertEquals(30, Node.VAR_ARGS_NAME);
1889:       assertEquals(2, Node.POST_FLAG);
1890:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1891:       assertEquals(47, Node.IS_DISPATCHER);
1892:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1893:       assertEquals(57, Node.LAST_PROP);
1894:       assertEquals(29, Node.JSDOC_INFO_PROP);
1895:       assertEquals(1, Node.DECR_FLAG);
1896:       assertEquals(32, Node.INCRDECR_PROP);
1897:       assertEquals(57, Node.REFLECTED_OBJECT);
1898:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1899:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1900:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1901:       assertEquals(52, Node.LENGTH);
1902:       assertEquals(56, Node.CHANGE_TIME);
1903:       assertEquals(36, Node.QUOTED_PROP);
1904:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1905:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1906:       assertEquals(37, Node.OPT_ARG_NAME);
1907:       assertEquals(48, Node.DIRECTIVES);
1908:       assertEquals(49, Node.DIRECT_EVAL);
1909:       assertEquals(4095, Node.COLUMN_MASK);
1910:       assertEquals(55, Node.INFERRED_FUNCTION);
1911:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1912:       assertEquals(8, Node.FLAG_NO_THROWS);
1913:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1914:       assertEquals(39, Node.EMPTY_BLOCK);
1915:       assertEquals(53, Node.INPUT_ID);
1916:       assertEquals(40, Node.ORIGINALNAME_PROP);
1917:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1918:       assertEquals(50, Node.FREE_CALL);
1919:       assertEquals(43, Node.IS_CONSTANT_NAME);
1920:       assertEquals(54, Node.SLASH_V);
1921:       assertSame(node1, node2);
1922:       assertFalse(boolean4);
1923:       assertFalse(node1.equals((Object)node0));
1924:       assertTrue(boolean4 == boolean0);
1925:       assertFalse(boolean4 == boolean3);
1926:       assertTrue(boolean4 == boolean1);
1927:       assertTrue(boolean4 == boolean2);
1928:       
1929:       String string0 = node0.toString(false, false, false);
1930:       assertFalse(node0.isTry());
1931:       assertFalse(node0.isDebugger());
1932:       assertFalse(node0.isVoid());
1933:       assertFalse(node0.isRegExp());
1934:       assertFalse(node0.isArrayLit());
1935:       assertFalse(node0.isFunction());
1936:       assertFalse(node0.isDelProp());
1937:       assertFalse(node0.isGetterDef());
1938:       assertFalse(node0.isNE());
1939:       assertFalse(node0.isTrue());
1940:       assertFalse(node0.isIf());
1941:       assertEquals(0, node0.getChildCount());
1942:       assertFalse(node0.isSetterDef());
1943:       assertFalse(node0.isIn());
1944:       assertFalse(node0.isEmpty());
1945:       assertEquals(40, node0.getType());
1946:       assertFalse(node0.isVar());
1947:       assertFalse(node0.isDefaultCase());
1948:       assertTrue(node0.isString());
1949:       assertFalse(node0.isBlock());
1950:       assertFalse(node0.isInc());
1951:       assertEquals(2361, node0.getLineno());
1952:       assertFalse(node0.isSwitch());
1953:       assertFalse(node0.isParamList());
1954:       assertFalse(node0.isStringKey());
1955:       assertFalse(node0.hasMoreThanOneChild());
1956:       assertFalse(node0.isNumber());
1957:       assertFalse(node0.isCatch());
1958:       assertFalse(node0.isInstanceOf());
1959:       assertFalse(node0.isFor());
1960:       assertFalse(node0.isCase());
1961:       assertFalse(node0.isWith());
1962:       assertFalse(node0.isThis());
1963:       assertFalse(node0.isHook());
1964:       assertFalse(node0.hasOneChild());
1965:       assertFalse(node0.isScript());
1966:       assertFalse(node0.isExprResult());
1967:       assertFalse(node0.isCast());
1968:       assertFalse(node0.isNot());
1969:       assertFalse(node0.isLabelName());
1970:       assertFalse(node0.isGetElem());
1971:       assertFalse(node0.isObjectLit());
1972:       assertFalse(node0.isAnd());
1973:       assertFalse(node0.isOr());
1974:       assertFalse(node0.isAssignAdd());
1975:       assertFalse(node0.isLabel());
1976:       assertFalse(node0.isContinue());
1977:       assertEquals(42, node0.getCharno());
1978:       assertFalse(node0.isDo());
1979:       assertFalse(node0.isFalse());
1980:       assertFalse(node0.isThrow());
1981:       assertFalse(node0.isAdd());
1982:       assertFalse(node0.isNew());
1983:       assertFalse(node0.isCall());
1984:       assertEquals(9670698, node0.getSourcePosition());
1985:       assertFalse(node0.isName());
1986:       assertFalse(node0.isBreak());
1987:       assertFalse(node0.isNull());
1988:       assertFalse(node0.isGetProp());
1989:       assertFalse(node0.isReturn());
1990:       assertFalse(node0.isComma());
1991:       assertFalse(node0.isTypeOf());
1992:       assertFalse(node0.isAssign());
1993:       assertFalse(node0.hasChildren());
1994:       assertFalse(node0.isDec());
1995:       assertFalse(node0.isWhile());
1996:       assertEquals(57, Node.LAST_PROP);
1997:       assertEquals(30, Node.VAR_ARGS_NAME);
1998:       assertEquals(54, Node.SLASH_V);
1999:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2000:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2001:       assertEquals(12, Node.COLUMN_BITS);
2002:       assertEquals(32, Node.INCRDECR_PROP);
2003:       assertEquals(52, Node.LENGTH);
2004:       assertEquals(1, Node.DECR_FLAG);
2005:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2006:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2007:       assertEquals(2, Node.POST_FLAG);
2008:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2009:       assertEquals(50, Node.FREE_CALL);
2010:       assertEquals(47, Node.IS_DISPATCHER);
2011:       assertEquals(46, Node.IS_NAMESPACE);
2012:       assertEquals(40, Node.ORIGINALNAME_PROP);
2013:       assertEquals(43, Node.IS_CONSTANT_NAME);
2014:       assertEquals(36, Node.QUOTED_PROP);
2015:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2016:       assertEquals(55, Node.INFERRED_FUNCTION);
2017:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2018:       assertEquals(53, Node.INPUT_ID);
2019:       assertEquals(29, Node.JSDOC_INFO_PROP);
2020:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2021:       assertEquals(39, Node.EMPTY_BLOCK);
2022:       assertEquals(56, Node.CHANGE_TIME);
2023:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2024:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2025:       assertEquals(8, Node.FLAG_NO_THROWS);
2026:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2027:       assertEquals(4095, Node.COLUMN_MASK);
2028:       assertEquals(57, Node.REFLECTED_OBJECT);
2029:       assertEquals(48, Node.DIRECTIVES);
2030:       assertEquals(49, Node.DIRECT_EVAL);
2031:       assertEquals(37, Node.OPT_ARG_NAME);
2032:       assertNotNull(string0);
2033:       assertEquals("STRING com.google.javascript.rhino.Node$SideEffectFlags", string0);
2034:       assertFalse(node0.equals((Object)node2));
2035:       assertFalse(node0.equals((Object)node1));
2036:   }
2037: }
RegularFileObject[/tmp/EvoSuite_227_1628160525010/com/google/javascript/rhino/Node_227_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:48:45 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_227_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_227_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.common.collect.AbstractMultimap$Values",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.javascript.rhino.JSDocInfo$1",
166:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
167:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
168:       "com.google.common.collect.Sets$ImprovedAbstractSet",
169:       "com.google.javascript.rhino.jstype.FunctionType",
170:       "com.google.common.base.Preconditions",
171:       "com.google.common.collect.UnmodifiableIterator",
172:       "com.google.javascript.rhino.JSDocInfo",
173:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
174:       "com.google.javascript.rhino.jstype.Property",
175:       "com.google.common.collect.ImmutableMapValues",
176:       "com.google.common.collect.ImmutableEntry",
177:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMultimap$Entries",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.Multimaps$Entries",
228:       "com.google.common.collect.AbstractMultimap",
229:       "com.google.common.collect.Multimap",
230:       "com.google.common.collect.Iterators",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_227_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.common.base.Objects",
274:       "com.google.javascript.rhino.SimpleErrorReporter",
275:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
276:       "com.google.common.base.Joiner",
277:       "com.google.common.base.Joiner$1",
278:       "com.google.common.collect.Collections2",
279:       "com.google.common.base.Joiner$MapJoiner",
280:       "com.google.common.collect.Maps",
281:       "com.google.common.collect.AbstractMultimap",
282:       "com.google.common.collect.AbstractMapBasedMultimap",
283:       "com.google.common.collect.AbstractSetMultimap",
284:       "com.google.common.collect.LinkedHashMultimap",
285:       "com.google.common.collect.AbstractMapEntry",
286:       "com.google.common.collect.ImmutableEntry",
287:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
288:       "com.google.common.collect.AbstractListMultimap",
289:       "com.google.common.collect.ArrayListMultimap",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
291:       "com.google.common.collect.ImmutableCollection",
292:       "com.google.common.collect.RegularImmutableList",
293:       "com.google.common.collect.ObjectArrays",
294:       "com.google.common.collect.ImmutableList",
295:       "com.google.javascript.rhino.jstype.ModificationVisitor",
296:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
297:       "com.google.common.collect.ImmutableCollection$Builder",
298:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
299:       "com.google.common.collect.ImmutableList$Builder",
300:       "com.google.common.collect.UnmodifiableIterator",
301:       "com.google.common.collect.UnmodifiableListIterator",
302:       "com.google.common.collect.Iterators$1",
303:       "com.google.common.collect.Iterators$2",
304:       "com.google.common.collect.Iterators",
305:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
306:       "com.google.javascript.rhino.jstype.JSType$1",
307:       "com.google.javascript.rhino.jstype.JSType",
308:       "com.google.javascript.rhino.jstype.ObjectType",
309:       "com.google.javascript.rhino.jstype.ProxyObjectType",
310:       "com.google.javascript.rhino.jstype.TemplateType",
311:       "com.google.javascript.rhino.jstype.ValueType",
312:       "com.google.javascript.rhino.jstype.BooleanType",
313:       "com.google.javascript.rhino.jstype.NullType",
314:       "com.google.javascript.rhino.jstype.NumberType",
315:       "com.google.javascript.rhino.jstype.StringType",
316:       "com.google.javascript.rhino.jstype.UnknownType",
317:       "com.google.javascript.rhino.jstype.VoidType",
318:       "com.google.javascript.rhino.jstype.AllType",
319:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
320:       "com.google.common.collect.ImmutableMap",
321:       "com.google.common.collect.ImmutableBiMap",
322:       "com.google.common.collect.EmptyImmutableBiMap",
323:       "com.google.javascript.rhino.jstype.PropertyMap$1",
324:       "com.google.javascript.rhino.jstype.PropertyMap",
325:       "com.google.javascript.rhino.jstype.FunctionType",
326:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.javascript.rhino.JSDocInfo",
347:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.common.collect.Sets",
352:       "com.google.common.collect.Iterables",
353:       "com.google.javascript.rhino.jstype.TemplatizedType",
354:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.javascript.rhino.jstype.JSType$2",
357:       "com.google.javascript.rhino.jstype.JSType$TypePair",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.javascript.rhino.Node$AncestorIterable$1",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.common.collect.AbstractMultimap$Values",
362:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
363:       "com.google.common.collect.AbstractMapBasedMultimap$1",
364:       "com.google.common.collect.Multimaps$Entries",
365:       "com.google.common.collect.AbstractMultimap$Entries",
366:       "com.google.common.collect.AbstractMapBasedMultimap$2",
367:       "com.google.common.collect.FluentIterable",
368:       "com.google.common.collect.Iterables$2",
369:       "com.google.javascript.rhino.JSTypeExpression",
370:       "com.google.common.collect.ImmutableSet",
371:       "com.google.common.collect.EmptyImmutableSet",
372:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
373:       "com.google.common.collect.Platform",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.common.collect.ImmutableList$1",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
378:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
379:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
380:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
381:     );
382:   }
383: }

[MASTER] 10:48:45.448 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("com.google.javascript.rhino.Node$SideEffectFlags", 2361, 42);
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertEquals(2361, node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertEquals(42, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertEquals(9670698, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotNull(node0);

boolean boolean0 = node0.isWith();
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertEquals(2361, node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertEquals(42, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertEquals(9670698, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(boolean0);

Node node1 = Node.newNumber(768.23646, 40, 47);
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertEquals(40, node1.getLineno());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(47, node1.getCharno());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertEquals(163887, node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

Iterable<Node> iterable0 = node1.children();
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertEquals(40, node1.getLineno());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(47, node1.getCharno());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertEquals(163887, node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertFalse(iterable0.contains(node1));

Node node2 = node1.useSourceInfoFrom(node0);
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertEquals(2361, node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertEquals(42, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertEquals(9670698, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertEquals(9670698, node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(42, node1.getCharno());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(2361, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node2.isHook());
assertEquals(9670698, node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isAnd());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isContinue());
assertEquals(42, node2.getCharno());
assertEquals(2361, node2.getLineno());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isLabelName());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertSame(node1, node2);
assertSame(node2, node1);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));

boolean boolean1 = node0.isEquivalentToShallow(node1);
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertEquals(2361, node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertEquals(42, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertEquals(9670698, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertEquals(9670698, node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(42, node1.getCharno());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(2361, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertSame(node1, node2);
assertFalse(boolean1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node2.isFromExterns();
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertEquals(2361, node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertEquals(42, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertEquals(9670698, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertEquals(9670698, node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(42, node1.getCharno());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(2361, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node2.isHook());
assertEquals(9670698, node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isAnd());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isContinue());
assertEquals(42, node2.getCharno());
assertEquals(2361, node2.getLineno());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isLabelName());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertSame(node1, node2);
assertSame(node2, node1);
assertFalse(boolean2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
assertEquals(JSTypeNative.NO_OBJECT_TYPE, jSTypeNative0);

node0.putProp(49, node1);
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertEquals(2361, node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertEquals(42, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertEquals(9670698, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertEquals(9670698, node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(42, node1.getCharno());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(2361, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertSame(node1, node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

boolean boolean3 = node2.isNumber();
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertEquals(2361, node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertEquals(42, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertEquals(9670698, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertEquals(9670698, node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(42, node1.getCharno());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(2361, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node2.isHook());
assertEquals(9670698, node2.getSourcePosition());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isIn());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isCast());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isAnd());
assertFalse(node2.isReturn());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.hasChildren());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isContinue());
assertEquals(42, node2.getCharno());
assertEquals(2361, node2.getLineno());
assertFalse(node2.isLabel());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isOr());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isLabelName());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isScript());
assertFalse(node2.isThis());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertSame(node1, node2);
assertSame(node2, node1);
assertTrue(boolean3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(boolean3 == boolean0);
assertFalse(boolean3 == boolean1);
assertFalse(boolean3 == boolean2);

boolean boolean4 = node1.isAdd();
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertEquals(9670698, node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isHook());
assertFalse(node1.isDec());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(42, node1.getCharno());
assertFalse(node1.isInc());
assertTrue(node1.isNumber());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals(2361, node1.getLineno());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isCall());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(39, node1.getType());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertSame(node1, node2);
assertFalse(boolean4);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean0);
assertFalse(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean2);

String string0 = node0.toString(false, false, false);
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(40, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertEquals(2361, node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertEquals(42, node0.getCharno());
assertFalse(node0.isDo());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertEquals(9670698, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isWhile());
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotNull(string0);
assertEquals("STRING com.google.javascript.rhino.Node$SideEffectFlags", string0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));


[MASTER] 10:48:49.190 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_253_1628160529157/com/google/javascript/rhino/Node_253_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_253_1628160529157/com/google/javascript/rhino/Node_253_tmp__ESTest_scaffolding.java]]
[MASTER] 10:48:49.190 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:49.190 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 10:48:49.191 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 339
[MASTER] 10:48:49.192 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_253_1628160529157/com/google/javascript/rhino/Node_253_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Aug 05 10:48:49 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.ArrayDeque;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_253_tmp__ESTest extends Node_253_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(152, 152, 152);
22:       assertEquals(0, node0.getChildCount());
23:       assertFalse(node0.isSetterDef());
24:       assertFalse(node0.isCatch());
25:       assertFalse(node0.isNull());
26:       assertFalse(node0.isTrue());
27:       assertFalse(node0.isParamList());
28:       assertFalse(node0.isVoid());
29:       assertFalse(node0.isName());
30:       assertFalse(node0.isStringKey());
31:       assertFalse(node0.isTry());
32:       assertFalse(node0.isBlock());
33:       assertFalse(node0.isCall());
34:       assertFalse(node0.isRegExp());
35:       assertFalse(node0.isWhile());
36:       assertFalse(node0.isFor());
37:       assertFalse(node0.isIn());
38:       assertFalse(node0.isContinue());
39:       assertFalse(node0.hasMoreThanOneChild());
40:       assertEquals(152, node0.getType());
41:       assertEquals(152, node0.getLineno());
42:       assertFalse(node0.isNE());
43:       assertFalse(node0.isIf());
44:       assertFalse(node0.isFunction());
45:       assertFalse(node0.isInc());
46:       assertFalse(node0.isCast());
47:       assertFalse(node0.isFalse());
48:       assertFalse(node0.isThrow());
49:       assertFalse(node0.isGetProp());
50:       assertFalse(node0.isComma());
51:       assertFalse(node0.isObjectLit());
52:       assertFalse(node0.isInstanceOf());
53:       assertFalse(node0.isNot());
54:       assertFalse(node0.isBreak());
55:       assertFalse(node0.isAnd());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isHook());
58:       assertEquals(152, node0.getCharno());
59:       assertFalse(node0.isExprResult());
60:       assertTrue(node0.isDebugger());
61:       assertFalse(node0.isScript());
62:       assertFalse(node0.isString());
63:       assertFalse(node0.isWith());
64:       assertFalse(node0.isAssign());
65:       assertFalse(node0.isDec());
66:       assertFalse(node0.isCase());
67:       assertFalse(node0.hasChildren());
68:       assertFalse(node0.isThis());
69:       assertFalse(node0.isReturn());
70:       assertFalse(node0.isOr());
71:       assertFalse(node0.isLabel());
72:       assertFalse(node0.isTypeOf());
73:       assertFalse(node0.isNumber());
74:       assertFalse(node0.isDelProp());
75:       assertFalse(node0.isGetterDef());
76:       assertFalse(node0.isLabelName());
77:       assertFalse(node0.isGetElem());
78:       assertFalse(node0.isSwitch());
79:       assertFalse(node0.isAdd());
80:       assertFalse(node0.isNew());
81:       assertFalse(node0.isArrayLit());
82:       assertFalse(node0.isEmpty());
83:       assertFalse(node0.isDo());
84:       assertEquals(622744, node0.getSourcePosition());
85:       assertFalse(node0.isVar());
86:       assertFalse(node0.isDefaultCase());
87:       assertFalse(node0.isAssignAdd());
88:       assertEquals(2, Node.POST_FLAG);
89:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
90:       assertEquals(37, Node.OPT_ARG_NAME);
91:       assertEquals(56, Node.CHANGE_TIME);
92:       assertEquals(47, Node.IS_DISPATCHER);
93:       assertEquals(12, Node.COLUMN_BITS);
94:       assertEquals(46, Node.IS_NAMESPACE);
95:       assertEquals(51, Node.STATIC_SOURCE_FILE);
96:       assertEquals(1, Node.DECR_FLAG);
97:       assertEquals(32, Node.INCRDECR_PROP);
98:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
99:       assertEquals(15, Node.NO_SIDE_EFFECTS);
100:       assertEquals(29, Node.JSDOC_INFO_PROP);
101:       assertEquals(53, Node.INPUT_ID);
102:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
103:       assertEquals(36, Node.QUOTED_PROP);
104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
105:       assertEquals(57, Node.REFLECTED_OBJECT);
106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
107:       assertEquals(4095, Node.COLUMN_MASK);
108:       assertEquals(49, Node.DIRECT_EVAL);
109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
111:       assertEquals(8, Node.FLAG_NO_THROWS);
112:       assertEquals(39, Node.EMPTY_BLOCK);
113:       assertEquals(48, Node.DIRECTIVES);
114:       assertEquals(55, Node.INFERRED_FUNCTION);
115:       assertEquals(50, Node.FREE_CALL);
116:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
117:       assertEquals(52, Node.LENGTH);
118:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
119:       assertEquals(43, Node.IS_CONSTANT_NAME);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(30, Node.VAR_ARGS_NAME);
122:       assertEquals(54, Node.SLASH_V);
123:       assertEquals(40, Node.ORIGINALNAME_PROP);
124:       assertNotNull(node0);
125:       
126:       String string0 = node0.toString(true, false, false);
127:       assertEquals(0, node0.getChildCount());
128:       assertFalse(node0.isSetterDef());
129:       assertFalse(node0.isCatch());
130:       assertFalse(node0.isNull());
131:       assertFalse(node0.isTrue());
132:       assertFalse(node0.isParamList());
133:       assertFalse(node0.isVoid());
134:       assertFalse(node0.isName());
135:       assertFalse(node0.isStringKey());
136:       assertFalse(node0.isTry());
137:       assertFalse(node0.isBlock());
138:       assertFalse(node0.isCall());
139:       assertFalse(node0.isRegExp());
140:       assertFalse(node0.isWhile());
141:       assertFalse(node0.isFor());
142:       assertFalse(node0.isIn());
143:       assertFalse(node0.isContinue());
144:       assertFalse(node0.hasMoreThanOneChild());
145:       assertEquals(152, node0.getType());
146:       assertEquals(152, node0.getLineno());
147:       assertFalse(node0.isNE());
148:       assertFalse(node0.isIf());
149:       assertFalse(node0.isFunction());
150:       assertFalse(node0.isInc());
151:       assertFalse(node0.isCast());
152:       assertFalse(node0.isFalse());
153:       assertFalse(node0.isThrow());
154:       assertFalse(node0.isGetProp());
155:       assertFalse(node0.isComma());
156:       assertFalse(node0.isObjectLit());
157:       assertFalse(node0.isInstanceOf());
158:       assertFalse(node0.isNot());
159:       assertFalse(node0.isBreak());
160:       assertFalse(node0.isAnd());
161:       assertFalse(node0.hasOneChild());
162:       assertFalse(node0.isHook());
163:       assertEquals(152, node0.getCharno());
164:       assertFalse(node0.isExprResult());
165:       assertTrue(node0.isDebugger());
166:       assertFalse(node0.isScript());
167:       assertFalse(node0.isString());
168:       assertFalse(node0.isWith());
169:       assertFalse(node0.isAssign());
170:       assertFalse(node0.isDec());
171:       assertFalse(node0.isCase());
172:       assertFalse(node0.hasChildren());
173:       assertFalse(node0.isThis());
174:       assertFalse(node0.isReturn());
175:       assertFalse(node0.isOr());
176:       assertFalse(node0.isLabel());
177:       assertFalse(node0.isTypeOf());
178:       assertFalse(node0.isNumber());
179:       assertFalse(node0.isDelProp());
180:       assertFalse(node0.isGetterDef());
181:       assertFalse(node0.isLabelName());
182:       assertFalse(node0.isGetElem());
183:       assertFalse(node0.isSwitch());
184:       assertFalse(node0.isAdd());
185:       assertFalse(node0.isNew());
186:       assertFalse(node0.isArrayLit());
187:       assertFalse(node0.isEmpty());
188:       assertFalse(node0.isDo());
189:       assertEquals(622744, node0.getSourcePosition());
190:       assertFalse(node0.isVar());
191:       assertFalse(node0.isDefaultCase());
192:       assertFalse(node0.isAssignAdd());
193:       assertEquals(2, Node.POST_FLAG);
194:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
195:       assertEquals(37, Node.OPT_ARG_NAME);
196:       assertEquals(56, Node.CHANGE_TIME);
197:       assertEquals(47, Node.IS_DISPATCHER);
198:       assertEquals(12, Node.COLUMN_BITS);
199:       assertEquals(46, Node.IS_NAMESPACE);
200:       assertEquals(51, Node.STATIC_SOURCE_FILE);
201:       assertEquals(1, Node.DECR_FLAG);
202:       assertEquals(32, Node.INCRDECR_PROP);
203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
204:       assertEquals(15, Node.NO_SIDE_EFFECTS);
205:       assertEquals(29, Node.JSDOC_INFO_PROP);
206:       assertEquals(53, Node.INPUT_ID);
207:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
208:       assertEquals(36, Node.QUOTED_PROP);
209:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
210:       assertEquals(57, Node.REFLECTED_OBJECT);
211:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
212:       assertEquals(4095, Node.COLUMN_MASK);
213:       assertEquals(49, Node.DIRECT_EVAL);
214:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
215:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
216:       assertEquals(8, Node.FLAG_NO_THROWS);
217:       assertEquals(39, Node.EMPTY_BLOCK);
218:       assertEquals(48, Node.DIRECTIVES);
219:       assertEquals(55, Node.INFERRED_FUNCTION);
220:       assertEquals(50, Node.FREE_CALL);
221:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
222:       assertEquals(52, Node.LENGTH);
223:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
224:       assertEquals(43, Node.IS_CONSTANT_NAME);
225:       assertEquals(57, Node.LAST_PROP);
226:       assertEquals(30, Node.VAR_ARGS_NAME);
227:       assertEquals(54, Node.SLASH_V);
228:       assertEquals(40, Node.ORIGINALNAME_PROP);
229:       assertNotNull(string0);
230:       assertEquals("DEBUGGER 152", string0);
231:       
232:       boolean boolean0 = node0.hasOneChild();
233:       assertEquals(0, node0.getChildCount());
234:       assertFalse(node0.isSetterDef());
235:       assertFalse(node0.isCatch());
236:       assertFalse(node0.isNull());
237:       assertFalse(node0.isTrue());
238:       assertFalse(node0.isParamList());
239:       assertFalse(node0.isVoid());
240:       assertFalse(node0.isName());
241:       assertFalse(node0.isStringKey());
242:       assertFalse(node0.isTry());
243:       assertFalse(node0.isBlock());
244:       assertFalse(node0.isCall());
245:       assertFalse(node0.isRegExp());
246:       assertFalse(node0.isWhile());
247:       assertFalse(node0.isFor());
248:       assertFalse(node0.isIn());
249:       assertFalse(node0.isContinue());
250:       assertFalse(node0.hasMoreThanOneChild());
251:       assertEquals(152, node0.getType());
252:       assertEquals(152, node0.getLineno());
253:       assertFalse(node0.isNE());
254:       assertFalse(node0.isIf());
255:       assertFalse(node0.isFunction());
256:       assertFalse(node0.isInc());
257:       assertFalse(node0.isCast());
258:       assertFalse(node0.isFalse());
259:       assertFalse(node0.isThrow());
260:       assertFalse(node0.isGetProp());
261:       assertFalse(node0.isComma());
262:       assertFalse(node0.isObjectLit());
263:       assertFalse(node0.isInstanceOf());
264:       assertFalse(node0.isNot());
265:       assertFalse(node0.isBreak());
266:       assertFalse(node0.isAnd());
267:       assertFalse(node0.hasOneChild());
268:       assertFalse(node0.isHook());
269:       assertEquals(152, node0.getCharno());
270:       assertFalse(node0.isExprResult());
271:       assertTrue(node0.isDebugger());
272:       assertFalse(node0.isScript());
273:       assertFalse(node0.isString());
274:       assertFalse(node0.isWith());
275:       assertFalse(node0.isAssign());
276:       assertFalse(node0.isDec());
277:       assertFalse(node0.isCase());
278:       assertFalse(node0.hasChildren());
279:       assertFalse(node0.isThis());
280:       assertFalse(node0.isReturn());
281:       assertFalse(node0.isOr());
282:       assertFalse(node0.isLabel());
283:       assertFalse(node0.isTypeOf());
284:       assertFalse(node0.isNumber());
285:       assertFalse(node0.isDelProp());
286:       assertFalse(node0.isGetterDef());
287:       assertFalse(node0.isLabelName());
288:       assertFalse(node0.isGetElem());
289:       assertFalse(node0.isSwitch());
290:       assertFalse(node0.isAdd());
291:       assertFalse(node0.isNew());
292:       assertFalse(node0.isArrayLit());
293:       assertFalse(node0.isEmpty());
294:       assertFalse(node0.isDo());
295:       assertEquals(622744, node0.getSourcePosition());
296:       assertFalse(node0.isVar());
297:       assertFalse(node0.isDefaultCase());
298:       assertFalse(node0.isAssignAdd());
299:       assertEquals(2, Node.POST_FLAG);
300:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
301:       assertEquals(37, Node.OPT_ARG_NAME);
302:       assertEquals(56, Node.CHANGE_TIME);
303:       assertEquals(47, Node.IS_DISPATCHER);
304:       assertEquals(12, Node.COLUMN_BITS);
305:       assertEquals(46, Node.IS_NAMESPACE);
306:       assertEquals(51, Node.STATIC_SOURCE_FILE);
307:       assertEquals(1, Node.DECR_FLAG);
308:       assertEquals(32, Node.INCRDECR_PROP);
309:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
310:       assertEquals(15, Node.NO_SIDE_EFFECTS);
311:       assertEquals(29, Node.JSDOC_INFO_PROP);
312:       assertEquals(53, Node.INPUT_ID);
313:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
314:       assertEquals(36, Node.QUOTED_PROP);
315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
316:       assertEquals(57, Node.REFLECTED_OBJECT);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(4095, Node.COLUMN_MASK);
319:       assertEquals(49, Node.DIRECT_EVAL);
320:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
321:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
322:       assertEquals(8, Node.FLAG_NO_THROWS);
323:       assertEquals(39, Node.EMPTY_BLOCK);
324:       assertEquals(48, Node.DIRECTIVES);
325:       assertEquals(55, Node.INFERRED_FUNCTION);
326:       assertEquals(50, Node.FREE_CALL);
327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
328:       assertEquals(52, Node.LENGTH);
329:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
330:       assertEquals(43, Node.IS_CONSTANT_NAME);
331:       assertEquals(57, Node.LAST_PROP);
332:       assertEquals(30, Node.VAR_ARGS_NAME);
333:       assertEquals(54, Node.SLASH_V);
334:       assertEquals(40, Node.ORIGINALNAME_PROP);
335:       assertFalse(boolean0);
336:       
337:       Iterable<Node> iterable0 = new ArrayDeque<Node>(57);
338:       assertNotNull(iterable0);
339:       assertFalse(iterable0.contains(node0));
340:       
341:       int int0 = node0.getLength();
342:       assertEquals(0, node0.getChildCount());
343:       assertFalse(node0.isSetterDef());
344:       assertFalse(node0.isCatch());
345:       assertFalse(node0.isNull());
346:       assertFalse(node0.isTrue());
347:       assertFalse(node0.isParamList());
348:       assertFalse(node0.isVoid());
349:       assertFalse(node0.isName());
350:       assertFalse(node0.isStringKey());
351:       assertFalse(node0.isTry());
352:       assertFalse(node0.isBlock());
353:       assertFalse(node0.isCall());
354:       assertFalse(node0.isRegExp());
355:       assertFalse(node0.isWhile());
356:       assertFalse(node0.isFor());
357:       assertFalse(node0.isIn());
358:       assertFalse(node0.isContinue());
359:       assertFalse(node0.hasMoreThanOneChild());
360:       assertEquals(152, node0.getType());
361:       assertEquals(152, node0.getLineno());
362:       assertFalse(node0.isNE());
363:       assertFalse(node0.isIf());
364:       assertFalse(node0.isFunction());
365:       assertFalse(node0.isInc());
366:       assertFalse(node0.isCast());
367:       assertFalse(node0.isFalse());
368:       assertFalse(node0.isThrow());
369:       assertFalse(node0.isGetProp());
370:       assertFalse(node0.isComma());
371:       assertFalse(node0.isObjectLit());
372:       assertFalse(node0.isInstanceOf());
373:       assertFalse(node0.isNot());
374:       assertFalse(node0.isBreak());
375:       assertFalse(node0.isAnd());
376:       assertFalse(node0.hasOneChild());
377:       assertFalse(node0.isHook());
378:       assertEquals(152, node0.getCharno());
379:       assertFalse(node0.isExprResult());
380:       assertTrue(node0.isDebugger());
381:       assertFalse(node0.isScript());
382:       assertFalse(node0.isString());
383:       assertFalse(node0.isWith());
384:       assertFalse(node0.isAssign());
385:       assertFalse(node0.isDec());
386:       assertFalse(node0.isCase());
387:       assertFalse(node0.hasChildren());
388:       assertFalse(node0.isThis());
389:       assertFalse(node0.isReturn());
390:       assertFalse(node0.isOr());
391:       assertFalse(node0.isLabel());
392:       assertFalse(node0.isTypeOf());
393:       assertFalse(node0.isNumber());
394:       assertFalse(node0.isDelProp());
395:       assertFalse(node0.isGetterDef());
396:       assertFalse(node0.isLabelName());
397:       assertFalse(node0.isGetElem());
398:       assertFalse(node0.isSwitch());
399:       assertFalse(node0.isAdd());
400:       assertFalse(node0.isNew());
401:       assertFalse(node0.isArrayLit());
402:       assertFalse(node0.isEmpty());
403:       assertFalse(node0.isDo());
404:       assertEquals(622744, node0.getSourcePosition());
405:       assertFalse(node0.isVar());
406:       assertFalse(node0.isDefaultCase());
407:       assertFalse(node0.isAssignAdd());
408:       assertEquals(2, Node.POST_FLAG);
409:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
410:       assertEquals(37, Node.OPT_ARG_NAME);
411:       assertEquals(56, Node.CHANGE_TIME);
412:       assertEquals(47, Node.IS_DISPATCHER);
413:       assertEquals(12, Node.COLUMN_BITS);
414:       assertEquals(46, Node.IS_NAMESPACE);
415:       assertEquals(51, Node.STATIC_SOURCE_FILE);
416:       assertEquals(1, Node.DECR_FLAG);
417:       assertEquals(32, Node.INCRDECR_PROP);
418:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
419:       assertEquals(15, Node.NO_SIDE_EFFECTS);
420:       assertEquals(29, Node.JSDOC_INFO_PROP);
421:       assertEquals(53, Node.INPUT_ID);
422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
423:       assertEquals(36, Node.QUOTED_PROP);
424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
425:       assertEquals(57, Node.REFLECTED_OBJECT);
426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
427:       assertEquals(4095, Node.COLUMN_MASK);
428:       assertEquals(49, Node.DIRECT_EVAL);
429:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
430:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
431:       assertEquals(8, Node.FLAG_NO_THROWS);
432:       assertEquals(39, Node.EMPTY_BLOCK);
433:       assertEquals(48, Node.DIRECTIVES);
434:       assertEquals(55, Node.INFERRED_FUNCTION);
435:       assertEquals(50, Node.FREE_CALL);
436:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
437:       assertEquals(52, Node.LENGTH);
438:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
439:       assertEquals(43, Node.IS_CONSTANT_NAME);
440:       assertEquals(57, Node.LAST_PROP);
441:       assertEquals(30, Node.VAR_ARGS_NAME);
442:       assertEquals(54, Node.SLASH_V);
443:       assertEquals(40, Node.ORIGINALNAME_PROP);
444:       assertEquals(0, int0);
445:       
446:       boolean boolean1 = node0.isBreak();
447:       assertEquals(0, node0.getChildCount());
448:       assertFalse(node0.isSetterDef());
449:       assertFalse(node0.isCatch());
450:       assertFalse(node0.isNull());
451:       assertFalse(node0.isTrue());
452:       assertFalse(node0.isParamList());
453:       assertFalse(node0.isVoid());
454:       assertFalse(node0.isName());
455:       assertFalse(node0.isStringKey());
456:       assertFalse(node0.isTry());
457:       assertFalse(node0.isBlock());
458:       assertFalse(node0.isCall());
459:       assertFalse(node0.isRegExp());
460:       assertFalse(node0.isWhile());
461:       assertFalse(node0.isFor());
462:       assertFalse(node0.isIn());
463:       assertFalse(node0.isContinue());
464:       assertFalse(node0.hasMoreThanOneChild());
465:       assertEquals(152, node0.getType());
466:       assertEquals(152, node0.getLineno());
467:       assertFalse(node0.isNE());
468:       assertFalse(node0.isIf());
469:       assertFalse(node0.isFunction());
470:       assertFalse(node0.isInc());
471:       assertFalse(node0.isCast());
472:       assertFalse(node0.isFalse());
473:       assertFalse(node0.isThrow());
474:       assertFalse(node0.isGetProp());
475:       assertFalse(node0.isComma());
476:       assertFalse(node0.isObjectLit());
477:       assertFalse(node0.isInstanceOf());
478:       assertFalse(node0.isNot());
479:       assertFalse(node0.isBreak());
480:       assertFalse(node0.isAnd());
481:       assertFalse(node0.hasOneChild());
482:       assertFalse(node0.isHook());
483:       assertEquals(152, node0.getCharno());
484:       assertFalse(node0.isExprResult());
485:       assertTrue(node0.isDebugger());
486:       assertFalse(node0.isScript());
487:       assertFalse(node0.isString());
488:       assertFalse(node0.isWith());
489:       assertFalse(node0.isAssign());
490:       assertFalse(node0.isDec());
491:       assertFalse(node0.isCase());
492:       assertFalse(node0.hasChildren());
493:       assertFalse(node0.isThis());
494:       assertFalse(node0.isReturn());
495:       assertFalse(node0.isOr());
496:       assertFalse(node0.isLabel());
497:       assertFalse(node0.isTypeOf());
498:       assertFalse(node0.isNumber());
499:       assertFalse(node0.isDelProp());
500:       assertFalse(node0.isGetterDef());
501:       assertFalse(node0.isLabelName());
502:       assertFalse(node0.isGetElem());
503:       assertFalse(node0.isSwitch());
504:       assertFalse(node0.isAdd());
505:       assertFalse(node0.isNew());
506:       assertFalse(node0.isArrayLit());
507:       assertFalse(node0.isEmpty());
508:       assertFalse(node0.isDo());
509:       assertEquals(622744, node0.getSourcePosition());
510:       assertFalse(node0.isVar());
511:       assertFalse(node0.isDefaultCase());
512:       assertFalse(node0.isAssignAdd());
513:       assertEquals(2, Node.POST_FLAG);
514:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
515:       assertEquals(37, Node.OPT_ARG_NAME);
516:       assertEquals(56, Node.CHANGE_TIME);
517:       assertEquals(47, Node.IS_DISPATCHER);
518:       assertEquals(12, Node.COLUMN_BITS);
519:       assertEquals(46, Node.IS_NAMESPACE);
520:       assertEquals(51, Node.STATIC_SOURCE_FILE);
521:       assertEquals(1, Node.DECR_FLAG);
522:       assertEquals(32, Node.INCRDECR_PROP);
523:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
524:       assertEquals(15, Node.NO_SIDE_EFFECTS);
525:       assertEquals(29, Node.JSDOC_INFO_PROP);
526:       assertEquals(53, Node.INPUT_ID);
527:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
528:       assertEquals(36, Node.QUOTED_PROP);
529:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
530:       assertEquals(57, Node.REFLECTED_OBJECT);
531:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
532:       assertEquals(4095, Node.COLUMN_MASK);
533:       assertEquals(49, Node.DIRECT_EVAL);
534:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
535:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
536:       assertEquals(8, Node.FLAG_NO_THROWS);
537:       assertEquals(39, Node.EMPTY_BLOCK);
538:       assertEquals(48, Node.DIRECTIVES);
539:       assertEquals(55, Node.INFERRED_FUNCTION);
540:       assertEquals(50, Node.FREE_CALL);
541:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
542:       assertEquals(52, Node.LENGTH);
543:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
544:       assertEquals(43, Node.IS_CONSTANT_NAME);
545:       assertEquals(57, Node.LAST_PROP);
546:       assertEquals(30, Node.VAR_ARGS_NAME);
547:       assertEquals(54, Node.SLASH_V);
548:       assertEquals(40, Node.ORIGINALNAME_PROP);
549:       assertFalse(boolean1);
550:       assertTrue(boolean1 == boolean0);
551:   }
552: }
RegularFileObject[/tmp/EvoSuite_253_1628160529157/com/google/javascript/rhino/Node_253_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Aug 05 10:48:49 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_253_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_253_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.common.collect.AbstractMapBasedMultimap$1",
122:       "com.google.common.collect.AbstractMapBasedMultimap$2",
123:       "com.google.javascript.rhino.jstype.VoidType",
124:       "com.google.common.base.Joiner",
125:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
126:       "com.google.common.collect.AbstractListMultimap",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.common.collect.AbstractMultimap$Values",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.javascript.rhino.JSDocInfo$1",
166:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
167:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
168:       "com.google.common.collect.Sets$ImprovedAbstractSet",
169:       "com.google.javascript.rhino.jstype.FunctionType",
170:       "com.google.common.base.Preconditions",
171:       "com.google.common.collect.UnmodifiableIterator",
172:       "com.google.javascript.rhino.JSDocInfo",
173:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
174:       "com.google.javascript.rhino.jstype.Property",
175:       "com.google.common.collect.ImmutableMapValues",
176:       "com.google.common.collect.ImmutableEntry",
177:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.javascript.rhino.Node$AncestorIterable",
185:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
186:       "com.google.common.collect.Lists$RandomAccessListWrapper",
187:       "com.google.common.collect.ImmutableEnumSet",
188:       "com.google.common.collect.AbstractMultimap$Entries",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
208:       "com.google.common.collect.AbstractIndexedListIterator",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.Multimaps$Entries",
228:       "com.google.common.collect.AbstractMultimap",
229:       "com.google.common.collect.Multimap",
230:       "com.google.common.collect.Iterators",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_253_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.common.base.Objects",
274:       "com.google.javascript.rhino.SimpleErrorReporter",
275:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
276:       "com.google.common.base.Joiner",
277:       "com.google.common.base.Joiner$1",
278:       "com.google.common.collect.Collections2",
279:       "com.google.common.base.Joiner$MapJoiner",
280:       "com.google.common.collect.Maps",
281:       "com.google.common.collect.AbstractMultimap",
282:       "com.google.common.collect.AbstractMapBasedMultimap",
283:       "com.google.common.collect.AbstractSetMultimap",
284:       "com.google.common.collect.LinkedHashMultimap",
285:       "com.google.common.collect.AbstractMapEntry",
286:       "com.google.common.collect.ImmutableEntry",
287:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
288:       "com.google.common.collect.AbstractListMultimap",
289:       "com.google.common.collect.ArrayListMultimap",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
291:       "com.google.common.collect.ImmutableCollection",
292:       "com.google.common.collect.RegularImmutableList",
293:       "com.google.common.collect.ObjectArrays",
294:       "com.google.common.collect.ImmutableList",
295:       "com.google.javascript.rhino.jstype.ModificationVisitor",
296:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
297:       "com.google.common.collect.ImmutableCollection$Builder",
298:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
299:       "com.google.common.collect.ImmutableList$Builder",
300:       "com.google.common.collect.UnmodifiableIterator",
301:       "com.google.common.collect.UnmodifiableListIterator",
302:       "com.google.common.collect.Iterators$1",
303:       "com.google.common.collect.Iterators$2",
304:       "com.google.common.collect.Iterators",
305:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
306:       "com.google.javascript.rhino.jstype.JSType$1",
307:       "com.google.javascript.rhino.jstype.JSType",
308:       "com.google.javascript.rhino.jstype.ObjectType",
309:       "com.google.javascript.rhino.jstype.ProxyObjectType",
310:       "com.google.javascript.rhino.jstype.TemplateType",
311:       "com.google.javascript.rhino.jstype.ValueType",
312:       "com.google.javascript.rhino.jstype.BooleanType",
313:       "com.google.javascript.rhino.jstype.NullType",
314:       "com.google.javascript.rhino.jstype.NumberType",
315:       "com.google.javascript.rhino.jstype.StringType",
316:       "com.google.javascript.rhino.jstype.UnknownType",
317:       "com.google.javascript.rhino.jstype.VoidType",
318:       "com.google.javascript.rhino.jstype.AllType",
319:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
320:       "com.google.common.collect.ImmutableMap",
321:       "com.google.common.collect.ImmutableBiMap",
322:       "com.google.common.collect.EmptyImmutableBiMap",
323:       "com.google.javascript.rhino.jstype.PropertyMap$1",
324:       "com.google.javascript.rhino.jstype.PropertyMap",
325:       "com.google.javascript.rhino.jstype.FunctionType",
326:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
327:       "com.google.javascript.rhino.jstype.ArrowType",
328:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
329:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
330:       "com.google.javascript.rhino.jstype.InstanceObjectType",
331:       "com.google.javascript.rhino.jstype.Property",
332:       "com.google.common.collect.Lists",
333:       "com.google.javascript.rhino.jstype.NoObjectType",
334:       "com.google.javascript.rhino.jstype.NoType",
335:       "com.google.javascript.rhino.jstype.NoResolvedType",
336:       "com.google.common.collect.SingletonImmutableList",
337:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
338:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
339:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
340:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
341:       "com.google.javascript.rhino.jstype.UnionType",
342:       "com.google.javascript.rhino.jstype.FunctionBuilder",
343:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
344:       "com.google.javascript.rhino.jstype.EnumType",
345:       "com.google.javascript.rhino.jstype.EnumElementType",
346:       "com.google.javascript.rhino.JSDocInfo",
347:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
348:       "com.google.common.collect.AbstractIndexedListIterator",
349:       "com.google.common.collect.Iterators$11",
350:       "com.google.javascript.rhino.InputId",
351:       "com.google.common.collect.Sets",
352:       "com.google.common.collect.Iterables",
353:       "com.google.javascript.rhino.jstype.TemplatizedType",
354:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
355:       "com.google.javascript.rhino.jstype.TernaryValue",
356:       "com.google.javascript.rhino.jstype.JSType$2",
357:       "com.google.javascript.rhino.jstype.JSType$TypePair",
358:       "com.google.javascript.rhino.jstype.NamedType",
359:       "com.google.javascript.rhino.Node$AncestorIterable$1",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.common.collect.AbstractMultimap$Values",
362:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
363:       "com.google.common.collect.AbstractMapBasedMultimap$1",
364:       "com.google.common.collect.Multimaps$Entries",
365:       "com.google.common.collect.AbstractMultimap$Entries",
366:       "com.google.common.collect.AbstractMapBasedMultimap$2",
367:       "com.google.common.collect.FluentIterable",
368:       "com.google.common.collect.Iterables$2",
369:       "com.google.javascript.rhino.JSTypeExpression",
370:       "com.google.common.collect.ImmutableSet",
371:       "com.google.common.collect.EmptyImmutableSet",
372:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
373:       "com.google.common.collect.Platform",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.common.collect.ImmutableList$1",
376:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
377:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
378:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
379:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
380:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation"
381:     );
382:   }
383: }

[MASTER] 10:48:49.199 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(152, 152, 152);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(152, node0.getType());
assertEquals(152, node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(152, node0.getCharno());
assertFalse(node0.isExprResult());
assertTrue(node0.isDebugger());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCase());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(622744, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(node0);

String string0 = node0.toString(true, false, false);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(152, node0.getType());
assertEquals(152, node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(152, node0.getCharno());
assertFalse(node0.isExprResult());
assertTrue(node0.isDebugger());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCase());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(622744, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertNotNull(string0);
assertEquals("DEBUGGER 152", string0);

boolean boolean0 = node0.hasOneChild();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(152, node0.getType());
assertEquals(152, node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(152, node0.getCharno());
assertFalse(node0.isExprResult());
assertTrue(node0.isDebugger());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCase());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(622744, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(boolean0);

Iterable<Node> iterable0 = new ArrayDeque<Node>(57);
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));

int int0 = node0.getLength();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(152, node0.getType());
assertEquals(152, node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(152, node0.getCharno());
assertFalse(node0.isExprResult());
assertTrue(node0.isDebugger());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCase());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(622744, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, int0);

boolean boolean1 = node0.isBreak();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(152, node0.getType());
assertEquals(152, node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNot());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertEquals(152, node0.getCharno());
assertFalse(node0.isExprResult());
assertTrue(node0.isDebugger());
assertFalse(node0.isScript());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isCase());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertEquals(622744, node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);


[MASTER] 10:49:08.687 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:09.090 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:09.322 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:09.524 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:09.776 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:09.990 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:10.207 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:10.469 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:10.673 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:10.918 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:11.152 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:11.337 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:11.569 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:11.783 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:11.992 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:12.237 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:12.446 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:12.672 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:12.913 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:14.001 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:14.244 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:49:14.437 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/21
* Done!

* Computation finished
