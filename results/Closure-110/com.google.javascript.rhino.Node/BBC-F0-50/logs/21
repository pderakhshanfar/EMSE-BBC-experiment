* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 13766
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2253907989
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:48:56.149 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:49:01.611 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:52:10.749 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 17:55:22.959 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 605s and 403 generations, 171868 statements, best individual has fitness: 2998.0
* Minimizing test suite
[MASTER] 18:00:18.458 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 798
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 606
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 100
* Number of covered goals: 100
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 530
* Number of covered goals: 462
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 46%
* Total number of goals: 4536
* Number of covered goals: 2089
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 714
* Number of covered goals: 565
* Generated 733 tests with total length 9229
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:01:28.998 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6682833333333333% of time used, but only 58/733 tests minimized), falling back to using all assertions
[MASTER] 18:01:48.902 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
[MASTER] 18:02:02.083 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 18:02:17.907 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_143_1629223337730/com/google/javascript/rhino/Node_143_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_143_1629223337730/com/google/javascript/rhino/Node_143_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:17.907 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:17.907 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:17.911 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 822
[MASTER] 18:02:17.912 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_143_1629223337730/com/google/javascript/rhino/Node_143_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:17 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_143_tmp__ESTest extends Node_143_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber(0.0);
21:       assertFalse(node0.isBlock());
22:       assertFalse(node0.isNew());
23:       assertFalse(node0.isAdd());
24:       assertFalse(node0.isContinue());
25:       assertFalse(node0.isCall());
26:       assertEquals((-1), node0.getLineno());
27:       assertFalse(node0.isStringKey());
28:       assertFalse(node0.isName());
29:       assertFalse(node0.isSetterDef());
30:       assertFalse(node0.isNull());
31:       assertFalse(node0.isLabel());
32:       assertEquals(0, node0.getChildCount());
33:       assertFalse(node0.isOr());
34:       assertFalse(node0.isVar());
35:       assertFalse(node0.isDo());
36:       assertFalse(node0.isDefaultCase());
37:       assertFalse(node0.isAssignAdd());
38:       assertFalse(node0.isExprResult());
39:       assertFalse(node0.isFunction());
40:       assertFalse(node0.isTrue());
41:       assertFalse(node0.isVoid());
42:       assertFalse(node0.isDebugger());
43:       assertFalse(node0.isNot());
44:       assertFalse(node0.isCast());
45:       assertFalse(node0.isObjectLit());
46:       assertFalse(node0.isGetElem());
47:       assertFalse(node0.isDelProp());
48:       assertFalse(node0.isAnd());
49:       assertFalse(node0.isComma());
50:       assertFalse(node0.isTypeOf());
51:       assertFalse(node0.isDec());
52:       assertEquals((-1), node0.getSourcePosition());
53:       assertFalse(node0.hasChildren());
54:       assertFalse(node0.isGetProp());
55:       assertFalse(node0.isBreak());
56:       assertFalse(node0.isAssign());
57:       assertFalse(node0.isReturn());
58:       assertTrue(node0.isNumber());
59:       assertFalse(node0.isWhile());
60:       assertFalse(node0.isInc());
61:       assertFalse(node0.isSwitch());
62:       assertEquals((-1), node0.getCharno());
63:       assertFalse(node0.isString());
64:       assertFalse(node0.isNE());
65:       assertFalse(node0.isEmpty());
66:       assertFalse(node0.isFalse());
67:       assertFalse(node0.isIn());
68:       assertFalse(node0.isThrow());
69:       assertFalse(node0.isScript());
70:       assertFalse(node0.isRegExp());
71:       assertFalse(node0.isWith());
72:       assertFalse(node0.isCatch());
73:       assertFalse(node0.isArrayLit());
74:       assertFalse(node0.isLabelName());
75:       assertFalse(node0.isIf());
76:       assertFalse(node0.isThis());
77:       assertFalse(node0.isParamList());
78:       assertFalse(node0.isGetterDef());
79:       assertFalse(node0.isInstanceOf());
80:       assertFalse(node0.hasMoreThanOneChild());
81:       assertFalse(node0.hasOneChild());
82:       assertFalse(node0.isHook());
83:       assertFalse(node0.isCase());
84:       assertEquals(39, node0.getType());
85:       assertFalse(node0.isTry());
86:       assertFalse(node0.isFor());
87:       assertNotNull(node0);
88:       assertEquals(4095, Node.COLUMN_MASK);
89:       assertEquals(55, Node.INFERRED_FUNCTION);
90:       assertEquals(39, Node.EMPTY_BLOCK);
91:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
92:       assertEquals(48, Node.DIRECTIVES);
93:       assertEquals(50, Node.FREE_CALL);
94:       assertEquals(43, Node.IS_CONSTANT_NAME);
95:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
96:       assertEquals(8, Node.FLAG_NO_THROWS);
97:       assertEquals(57, Node.REFLECTED_OBJECT);
98:       assertEquals(36, Node.QUOTED_PROP);
99:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
101:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
102:       assertEquals(12, Node.COLUMN_BITS);
103:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(46, Node.IS_NAMESPACE);
106:       assertEquals(1, Node.DECR_FLAG);
107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
108:       assertEquals(37, Node.OPT_ARG_NAME);
109:       assertEquals(29, Node.JSDOC_INFO_PROP);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
112:       assertEquals(56, Node.CHANGE_TIME);
113:       assertEquals(54, Node.SLASH_V);
114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
115:       assertEquals(52, Node.LENGTH);
116:       assertEquals(53, Node.INPUT_ID);
117:       assertEquals(40, Node.ORIGINALNAME_PROP);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(30, Node.VAR_ARGS_NAME);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
122:       assertEquals(2, Node.POST_FLAG);
123:       assertEquals(47, Node.IS_DISPATCHER);
124:       
125:       boolean boolean0 = node0.isArrayLit();
126:       assertFalse(node0.isBlock());
127:       assertFalse(node0.isNew());
128:       assertFalse(node0.isAdd());
129:       assertFalse(node0.isContinue());
130:       assertFalse(node0.isCall());
131:       assertEquals((-1), node0.getLineno());
132:       assertFalse(node0.isStringKey());
133:       assertFalse(node0.isName());
134:       assertFalse(node0.isSetterDef());
135:       assertFalse(node0.isNull());
136:       assertFalse(node0.isLabel());
137:       assertEquals(0, node0.getChildCount());
138:       assertFalse(node0.isOr());
139:       assertFalse(node0.isVar());
140:       assertFalse(node0.isDo());
141:       assertFalse(node0.isDefaultCase());
142:       assertFalse(node0.isAssignAdd());
143:       assertFalse(node0.isExprResult());
144:       assertFalse(node0.isFunction());
145:       assertFalse(node0.isTrue());
146:       assertFalse(node0.isVoid());
147:       assertFalse(node0.isDebugger());
148:       assertFalse(node0.isNot());
149:       assertFalse(node0.isCast());
150:       assertFalse(node0.isObjectLit());
151:       assertFalse(node0.isGetElem());
152:       assertFalse(node0.isDelProp());
153:       assertFalse(node0.isAnd());
154:       assertFalse(node0.isComma());
155:       assertFalse(node0.isTypeOf());
156:       assertFalse(node0.isDec());
157:       assertEquals((-1), node0.getSourcePosition());
158:       assertFalse(node0.hasChildren());
159:       assertFalse(node0.isGetProp());
160:       assertFalse(node0.isBreak());
161:       assertFalse(node0.isAssign());
162:       assertFalse(node0.isReturn());
163:       assertTrue(node0.isNumber());
164:       assertFalse(node0.isWhile());
165:       assertFalse(node0.isInc());
166:       assertFalse(node0.isSwitch());
167:       assertEquals((-1), node0.getCharno());
168:       assertFalse(node0.isString());
169:       assertFalse(node0.isNE());
170:       assertFalse(node0.isEmpty());
171:       assertFalse(node0.isFalse());
172:       assertFalse(node0.isIn());
173:       assertFalse(node0.isThrow());
174:       assertFalse(node0.isScript());
175:       assertFalse(node0.isRegExp());
176:       assertFalse(node0.isWith());
177:       assertFalse(node0.isCatch());
178:       assertFalse(node0.isArrayLit());
179:       assertFalse(node0.isLabelName());
180:       assertFalse(node0.isIf());
181:       assertFalse(node0.isThis());
182:       assertFalse(node0.isParamList());
183:       assertFalse(node0.isGetterDef());
184:       assertFalse(node0.isInstanceOf());
185:       assertFalse(node0.hasMoreThanOneChild());
186:       assertFalse(node0.hasOneChild());
187:       assertFalse(node0.isHook());
188:       assertFalse(node0.isCase());
189:       assertEquals(39, node0.getType());
190:       assertFalse(node0.isTry());
191:       assertFalse(node0.isFor());
192:       assertFalse(boolean0);
193:       assertEquals(4095, Node.COLUMN_MASK);
194:       assertEquals(55, Node.INFERRED_FUNCTION);
195:       assertEquals(39, Node.EMPTY_BLOCK);
196:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
197:       assertEquals(48, Node.DIRECTIVES);
198:       assertEquals(50, Node.FREE_CALL);
199:       assertEquals(43, Node.IS_CONSTANT_NAME);
200:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
201:       assertEquals(8, Node.FLAG_NO_THROWS);
202:       assertEquals(57, Node.REFLECTED_OBJECT);
203:       assertEquals(36, Node.QUOTED_PROP);
204:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
206:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
207:       assertEquals(12, Node.COLUMN_BITS);
208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
209:       assertEquals(32, Node.INCRDECR_PROP);
210:       assertEquals(46, Node.IS_NAMESPACE);
211:       assertEquals(1, Node.DECR_FLAG);
212:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
213:       assertEquals(37, Node.OPT_ARG_NAME);
214:       assertEquals(29, Node.JSDOC_INFO_PROP);
215:       assertEquals(49, Node.DIRECT_EVAL);
216:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
217:       assertEquals(56, Node.CHANGE_TIME);
218:       assertEquals(54, Node.SLASH_V);
219:       assertEquals(51, Node.STATIC_SOURCE_FILE);
220:       assertEquals(52, Node.LENGTH);
221:       assertEquals(53, Node.INPUT_ID);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(15, Node.NO_SIDE_EFFECTS);
224:       assertEquals(30, Node.VAR_ARGS_NAME);
225:       assertEquals(57, Node.LAST_PROP);
226:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
227:       assertEquals(2, Node.POST_FLAG);
228:       assertEquals(47, Node.IS_DISPATCHER);
229:       
230:       Node node1 = new Node(55);
231:       assertFalse(node1.isIf());
232:       assertFalse(node1.isGetterDef());
233:       assertFalse(node1.isDelProp());
234:       assertFalse(node1.isNE());
235:       assertFalse(node1.isFor());
236:       assertFalse(node1.isIn());
237:       assertFalse(node1.isTry());
238:       assertFalse(node1.isEmpty());
239:       assertFalse(node1.isString());
240:       assertFalse(node1.isDefaultCase());
241:       assertEquals((-1), node1.getCharno());
242:       assertFalse(node1.isDebugger());
243:       assertFalse(node1.isSwitch());
244:       assertEquals(0, node1.getChildCount());
245:       assertFalse(node1.isArrayLit());
246:       assertFalse(node1.isFalse());
247:       assertFalse(node1.isFunction());
248:       assertFalse(node1.isBreak());
249:       assertFalse(node1.isNull());
250:       assertFalse(node1.isComma());
251:       assertFalse(node1.isName());
252:       assertFalse(node1.isVar());
253:       assertFalse(node1.isNew());
254:       assertFalse(node1.isGetProp());
255:       assertFalse(node1.isObjectLit());
256:       assertFalse(node1.isAdd());
257:       assertFalse(node1.isVoid());
258:       assertFalse(node1.isTrue());
259:       assertFalse(node1.isWhile());
260:       assertFalse(node1.isReturn());
261:       assertFalse(node1.isExprResult());
262:       assertFalse(node1.isGetElem());
263:       assertFalse(node1.isCall());
264:       assertFalse(node1.hasChildren());
265:       assertFalse(node1.isTypeOf());
266:       assertFalse(node1.isNumber());
267:       assertFalse(node1.isLabelName());
268:       assertFalse(node1.isAssign());
269:       assertEquals(55, node1.getType());
270:       assertFalse(node1.isDec());
271:       assertEquals((-1), node1.getSourcePosition());
272:       assertFalse(node1.isAssignAdd());
273:       assertFalse(node1.isOr());
274:       assertFalse(node1.hasOneChild());
275:       assertFalse(node1.isScript());
276:       assertFalse(node1.isNot());
277:       assertFalse(node1.isDo());
278:       assertFalse(node1.isAnd());
279:       assertFalse(node1.isLabel());
280:       assertFalse(node1.isContinue());
281:       assertFalse(node1.isCast());
282:       assertFalse(node1.isThrow());
283:       assertFalse(node1.isThis());
284:       assertFalse(node1.isParamList());
285:       assertFalse(node1.isStringKey());
286:       assertFalse(node1.isInc());
287:       assertFalse(node1.isSetterDef());
288:       assertFalse(node1.isRegExp());
289:       assertFalse(node1.isCase());
290:       assertFalse(node1.isBlock());
291:       assertFalse(node1.isHook());
292:       assertEquals((-1), node1.getLineno());
293:       assertFalse(node1.isWith());
294:       assertFalse(node1.hasMoreThanOneChild());
295:       assertFalse(node1.isCatch());
296:       assertFalse(node1.isInstanceOf());
297:       assertNotNull(node1);
298:       assertEquals(54, Node.SLASH_V);
299:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
300:       assertEquals(52, Node.LENGTH);
301:       assertEquals(57, Node.REFLECTED_OBJECT);
302:       assertEquals(30, Node.VAR_ARGS_NAME);
303:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
304:       assertEquals(12, Node.COLUMN_BITS);
305:       assertEquals(57, Node.LAST_PROP);
306:       assertEquals(32, Node.INCRDECR_PROP);
307:       assertEquals(15, Node.NO_SIDE_EFFECTS);
308:       assertEquals(1, Node.DECR_FLAG);
309:       assertEquals(37, Node.OPT_ARG_NAME);
310:       assertEquals(48, Node.DIRECTIVES);
311:       assertEquals(8, Node.FLAG_NO_THROWS);
312:       assertEquals(39, Node.EMPTY_BLOCK);
313:       assertEquals(56, Node.CHANGE_TIME);
314:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
315:       assertEquals(4095, Node.COLUMN_MASK);
316:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
317:       assertEquals(49, Node.DIRECT_EVAL);
318:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
319:       assertEquals(53, Node.INPUT_ID);
320:       assertEquals(43, Node.IS_CONSTANT_NAME);
321:       assertEquals(36, Node.QUOTED_PROP);
322:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
323:       assertEquals(29, Node.JSDOC_INFO_PROP);
324:       assertEquals(55, Node.INFERRED_FUNCTION);
325:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
326:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
328:       assertEquals(46, Node.IS_NAMESPACE);
329:       assertEquals(47, Node.IS_DISPATCHER);
330:       assertEquals(2, Node.POST_FLAG);
331:       assertEquals(50, Node.FREE_CALL);
332:       assertEquals(51, Node.STATIC_SOURCE_FILE);
333:       assertEquals(40, Node.ORIGINALNAME_PROP);
334:       assertFalse(node1.equals((Object)node0));
335:       
336:       node1.putIntProp(38, 25);
337:       assertFalse(node1.isIf());
338:       assertFalse(node1.isGetterDef());
339:       assertFalse(node1.isDelProp());
340:       assertFalse(node1.isNE());
341:       assertFalse(node1.isFor());
342:       assertFalse(node1.isIn());
343:       assertFalse(node1.isTry());
344:       assertFalse(node1.isEmpty());
345:       assertFalse(node1.isString());
346:       assertFalse(node1.isDefaultCase());
347:       assertEquals((-1), node1.getCharno());
348:       assertFalse(node1.isDebugger());
349:       assertFalse(node1.isSwitch());
350:       assertEquals(0, node1.getChildCount());
351:       assertFalse(node1.isArrayLit());
352:       assertFalse(node1.isFalse());
353:       assertFalse(node1.isFunction());
354:       assertFalse(node1.isBreak());
355:       assertFalse(node1.isNull());
356:       assertFalse(node1.isComma());
357:       assertFalse(node1.isName());
358:       assertFalse(node1.isVar());
359:       assertFalse(node1.isNew());
360:       assertFalse(node1.isGetProp());
361:       assertFalse(node1.isObjectLit());
362:       assertFalse(node1.isAdd());
363:       assertFalse(node1.isVoid());
364:       assertFalse(node1.isTrue());
365:       assertFalse(node1.isWhile());
366:       assertFalse(node1.isReturn());
367:       assertFalse(node1.isExprResult());
368:       assertFalse(node1.isGetElem());
369:       assertFalse(node1.isCall());
370:       assertFalse(node1.hasChildren());
371:       assertFalse(node1.isTypeOf());
372:       assertFalse(node1.isNumber());
373:       assertFalse(node1.isLabelName());
374:       assertFalse(node1.isAssign());
375:       assertEquals(55, node1.getType());
376:       assertFalse(node1.isDec());
377:       assertEquals((-1), node1.getSourcePosition());
378:       assertFalse(node1.isAssignAdd());
379:       assertFalse(node1.isOr());
380:       assertFalse(node1.hasOneChild());
381:       assertFalse(node1.isScript());
382:       assertFalse(node1.isNot());
383:       assertFalse(node1.isDo());
384:       assertFalse(node1.isAnd());
385:       assertFalse(node1.isLabel());
386:       assertFalse(node1.isContinue());
387:       assertFalse(node1.isCast());
388:       assertFalse(node1.isThrow());
389:       assertFalse(node1.isThis());
390:       assertFalse(node1.isParamList());
391:       assertFalse(node1.isStringKey());
392:       assertFalse(node1.isInc());
393:       assertFalse(node1.isSetterDef());
394:       assertFalse(node1.isRegExp());
395:       assertFalse(node1.isCase());
396:       assertFalse(node1.isBlock());
397:       assertFalse(node1.isHook());
398:       assertEquals((-1), node1.getLineno());
399:       assertFalse(node1.isWith());
400:       assertFalse(node1.hasMoreThanOneChild());
401:       assertFalse(node1.isCatch());
402:       assertFalse(node1.isInstanceOf());
403:       assertEquals(54, Node.SLASH_V);
404:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
405:       assertEquals(52, Node.LENGTH);
406:       assertEquals(57, Node.REFLECTED_OBJECT);
407:       assertEquals(30, Node.VAR_ARGS_NAME);
408:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
409:       assertEquals(12, Node.COLUMN_BITS);
410:       assertEquals(57, Node.LAST_PROP);
411:       assertEquals(32, Node.INCRDECR_PROP);
412:       assertEquals(15, Node.NO_SIDE_EFFECTS);
413:       assertEquals(1, Node.DECR_FLAG);
414:       assertEquals(37, Node.OPT_ARG_NAME);
415:       assertEquals(48, Node.DIRECTIVES);
416:       assertEquals(8, Node.FLAG_NO_THROWS);
417:       assertEquals(39, Node.EMPTY_BLOCK);
418:       assertEquals(56, Node.CHANGE_TIME);
419:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
420:       assertEquals(4095, Node.COLUMN_MASK);
421:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
422:       assertEquals(49, Node.DIRECT_EVAL);
423:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
424:       assertEquals(53, Node.INPUT_ID);
425:       assertEquals(43, Node.IS_CONSTANT_NAME);
426:       assertEquals(36, Node.QUOTED_PROP);
427:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
428:       assertEquals(29, Node.JSDOC_INFO_PROP);
429:       assertEquals(55, Node.INFERRED_FUNCTION);
430:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
431:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
433:       assertEquals(46, Node.IS_NAMESPACE);
434:       assertEquals(47, Node.IS_DISPATCHER);
435:       assertEquals(2, Node.POST_FLAG);
436:       assertEquals(50, Node.FREE_CALL);
437:       assertEquals(51, Node.STATIC_SOURCE_FILE);
438:       assertEquals(40, Node.ORIGINALNAME_PROP);
439:       assertFalse(node1.equals((Object)node0));
440:       
441:       Node node2 = new Node(1110, node1, node0, node0, node0);
442:       assertFalse(node0.isBlock());
443:       assertFalse(node0.isNew());
444:       assertFalse(node0.isAdd());
445:       assertFalse(node0.isContinue());
446:       assertFalse(node0.isCall());
447:       assertEquals((-1), node0.getLineno());
448:       assertFalse(node0.isStringKey());
449:       assertFalse(node0.isName());
450:       assertFalse(node0.isSetterDef());
451:       assertFalse(node0.isNull());
452:       assertFalse(node0.isLabel());
453:       assertEquals(0, node0.getChildCount());
454:       assertFalse(node0.isOr());
455:       assertFalse(node0.isVar());
456:       assertFalse(node0.isDo());
457:       assertFalse(node0.isDefaultCase());
458:       assertFalse(node0.isAssignAdd());
459:       assertFalse(node0.isExprResult());
460:       assertFalse(node0.isFunction());
461:       assertFalse(node0.isTrue());
462:       assertFalse(node0.isVoid());
463:       assertFalse(node0.isDebugger());
464:       assertFalse(node0.isNot());
465:       assertFalse(node0.isCast());
466:       assertFalse(node0.isObjectLit());
467:       assertFalse(node0.isGetElem());
468:       assertFalse(node0.isDelProp());
469:       assertFalse(node0.isAnd());
470:       assertFalse(node0.isComma());
471:       assertFalse(node0.isTypeOf());
472:       assertFalse(node0.isDec());
473:       assertEquals((-1), node0.getSourcePosition());
474:       assertFalse(node0.hasChildren());
475:       assertFalse(node0.isGetProp());
476:       assertFalse(node0.isBreak());
477:       assertFalse(node0.isAssign());
478:       assertFalse(node0.isReturn());
479:       assertTrue(node0.isNumber());
480:       assertFalse(node0.isWhile());
481:       assertFalse(node0.isInc());
482:       assertFalse(node0.isSwitch());
483:       assertEquals((-1), node0.getCharno());
484:       assertFalse(node0.isString());
485:       assertFalse(node0.isNE());
486:       assertFalse(node0.isEmpty());
487:       assertFalse(node0.isFalse());
488:       assertFalse(node0.isIn());
489:       assertFalse(node0.isThrow());
490:       assertFalse(node0.isScript());
491:       assertFalse(node0.isRegExp());
492:       assertFalse(node0.isWith());
493:       assertFalse(node0.isCatch());
494:       assertFalse(node0.isArrayLit());
495:       assertFalse(node0.isLabelName());
496:       assertFalse(node0.isIf());
497:       assertFalse(node0.isThis());
498:       assertFalse(node0.isParamList());
499:       assertFalse(node0.isGetterDef());
500:       assertFalse(node0.isInstanceOf());
501:       assertFalse(node0.hasMoreThanOneChild());
502:       assertFalse(node0.hasOneChild());
503:       assertFalse(node0.isHook());
504:       assertFalse(node0.isCase());
505:       assertEquals(39, node0.getType());
506:       assertFalse(node0.isTry());
507:       assertFalse(node0.isFor());
508:       assertFalse(node1.isIf());
509:       assertFalse(node1.isGetterDef());
510:       assertFalse(node1.isDelProp());
511:       assertFalse(node1.isNE());
512:       assertFalse(node1.isFor());
513:       assertFalse(node1.isIn());
514:       assertFalse(node1.isTry());
515:       assertFalse(node1.isEmpty());
516:       assertFalse(node1.isString());
517:       assertFalse(node1.isDefaultCase());
518:       assertEquals((-1), node1.getCharno());
519:       assertFalse(node1.isDebugger());
520:       assertFalse(node1.isSwitch());
521:       assertEquals(0, node1.getChildCount());
522:       assertFalse(node1.isArrayLit());
523:       assertFalse(node1.isFalse());
524:       assertFalse(node1.isFunction());
525:       assertFalse(node1.isBreak());
526:       assertFalse(node1.isNull());
527:       assertFalse(node1.isComma());
528:       assertFalse(node1.isName());
529:       assertFalse(node1.isVar());
530:       assertFalse(node1.isNew());
531:       assertFalse(node1.isGetProp());
532:       assertFalse(node1.isObjectLit());
533:       assertFalse(node1.isAdd());
534:       assertFalse(node1.isVoid());
535:       assertFalse(node1.isTrue());
536:       assertFalse(node1.isWhile());
537:       assertFalse(node1.isReturn());
538:       assertFalse(node1.isExprResult());
539:       assertFalse(node1.isGetElem());
540:       assertFalse(node1.isCall());
541:       assertFalse(node1.hasChildren());
542:       assertFalse(node1.isTypeOf());
543:       assertFalse(node1.isNumber());
544:       assertFalse(node1.isLabelName());
545:       assertFalse(node1.isAssign());
546:       assertEquals(55, node1.getType());
547:       assertFalse(node1.isDec());
548:       assertEquals((-1), node1.getSourcePosition());
549:       assertFalse(node1.isAssignAdd());
550:       assertFalse(node1.isOr());
551:       assertFalse(node1.hasOneChild());
552:       assertFalse(node1.isScript());
553:       assertFalse(node1.isNot());
554:       assertFalse(node1.isDo());
555:       assertFalse(node1.isAnd());
556:       assertFalse(node1.isLabel());
557:       assertFalse(node1.isContinue());
558:       assertFalse(node1.isCast());
559:       assertFalse(node1.isThrow());
560:       assertFalse(node1.isThis());
561:       assertFalse(node1.isParamList());
562:       assertFalse(node1.isStringKey());
563:       assertFalse(node1.isInc());
564:       assertFalse(node1.isSetterDef());
565:       assertFalse(node1.isRegExp());
566:       assertFalse(node1.isCase());
567:       assertFalse(node1.isBlock());
568:       assertFalse(node1.isHook());
569:       assertEquals((-1), node1.getLineno());
570:       assertFalse(node1.isWith());
571:       assertFalse(node1.hasMoreThanOneChild());
572:       assertFalse(node1.isCatch());
573:       assertFalse(node1.isInstanceOf());
574:       assertFalse(node2.isComma());
575:       assertFalse(node2.isGetProp());
576:       assertFalse(node2.isBreak());
577:       assertFalse(node2.isAnd());
578:       assertFalse(node2.isObjectLit());
579:       assertFalse(node2.isNot());
580:       assertEquals((-1), node2.getCharno());
581:       assertFalse(node2.isSwitch());
582:       assertFalse(node2.isInc());
583:       assertFalse(node2.isCast());
584:       assertFalse(node2.isFalse());
585:       assertEquals(2, node2.getChildCount());
586:       assertFalse(node2.isThrow());
587:       assertFalse(node2.isTypeOf());
588:       assertFalse(node2.isDec());
589:       assertEquals((-1), node2.getSourcePosition());
590:       assertFalse(node2.isDelProp());
591:       assertFalse(node2.isEmpty());
592:       assertFalse(node2.isGetElem());
593:       assertFalse(node2.isOr());
594:       assertEquals(1110, node2.getType());
595:       assertFalse(node2.isDebugger());
596:       assertFalse(node2.isTrue());
597:       assertTrue(node2.hasMoreThanOneChild());
598:       assertFalse(node2.isVoid());
599:       assertFalse(node2.isString());
600:       assertFalse(node2.isExprResult());
601:       assertFalse(node2.isAssign());
602:       assertFalse(node2.isWhile());
603:       assertFalse(node2.isReturn());
604:       assertFalse(node2.isNull());
605:       assertFalse(node2.isParamList());
606:       assertFalse(node2.isName());
607:       assertFalse(node2.isCall());
608:       assertFalse(node2.isSetterDef());
609:       assertFalse(node2.isStringKey());
610:       assertFalse(node2.isFunction());
611:       assertFalse(node2.isDefaultCase());
612:       assertFalse(node2.isAdd());
613:       assertFalse(node2.isDo());
614:       assertFalse(node2.isNew());
615:       assertFalse(node2.isVar());
616:       assertFalse(node2.isContinue());
617:       assertFalse(node2.isLabel());
618:       assertFalse(node2.isAssignAdd());
619:       assertFalse(node2.isNE());
620:       assertFalse(node2.isIf());
621:       assertFalse(node2.isGetterDef());
622:       assertFalse(node2.isNumber());
623:       assertFalse(node2.isLabelName());
624:       assertTrue(node2.hasChildren());
625:       assertEquals((-1), node2.getLineno());
626:       assertFalse(node2.isArrayLit());
627:       assertFalse(node2.isIn());
628:       assertFalse(node2.isScript());
629:       assertFalse(node2.isRegExp());
630:       assertFalse(node2.isWith());
631:       assertFalse(node2.isTry());
632:       assertFalse(node2.isCase());
633:       assertFalse(node2.hasOneChild());
634:       assertFalse(node2.isCatch());
635:       assertFalse(node2.isInstanceOf());
636:       assertFalse(node2.isFor());
637:       assertFalse(node2.isBlock());
638:       assertFalse(node2.isHook());
639:       assertFalse(node2.isThis());
640:       assertNotNull(node2);
641:       assertEquals(4095, Node.COLUMN_MASK);
642:       assertEquals(55, Node.INFERRED_FUNCTION);
643:       assertEquals(39, Node.EMPTY_BLOCK);
644:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
645:       assertEquals(48, Node.DIRECTIVES);
646:       assertEquals(50, Node.FREE_CALL);
647:       assertEquals(43, Node.IS_CONSTANT_NAME);
648:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
649:       assertEquals(8, Node.FLAG_NO_THROWS);
650:       assertEquals(57, Node.REFLECTED_OBJECT);
651:       assertEquals(36, Node.QUOTED_PROP);
652:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
653:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
654:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
655:       assertEquals(12, Node.COLUMN_BITS);
656:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
657:       assertEquals(32, Node.INCRDECR_PROP);
658:       assertEquals(46, Node.IS_NAMESPACE);
659:       assertEquals(1, Node.DECR_FLAG);
660:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
661:       assertEquals(37, Node.OPT_ARG_NAME);
662:       assertEquals(29, Node.JSDOC_INFO_PROP);
663:       assertEquals(49, Node.DIRECT_EVAL);
664:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
665:       assertEquals(56, Node.CHANGE_TIME);
666:       assertEquals(54, Node.SLASH_V);
667:       assertEquals(51, Node.STATIC_SOURCE_FILE);
668:       assertEquals(52, Node.LENGTH);
669:       assertEquals(53, Node.INPUT_ID);
670:       assertEquals(40, Node.ORIGINALNAME_PROP);
671:       assertEquals(15, Node.NO_SIDE_EFFECTS);
672:       assertEquals(30, Node.VAR_ARGS_NAME);
673:       assertEquals(57, Node.LAST_PROP);
674:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
675:       assertEquals(2, Node.POST_FLAG);
676:       assertEquals(47, Node.IS_DISPATCHER);
677:       assertEquals(54, Node.SLASH_V);
678:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
679:       assertEquals(52, Node.LENGTH);
680:       assertEquals(57, Node.REFLECTED_OBJECT);
681:       assertEquals(30, Node.VAR_ARGS_NAME);
682:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
683:       assertEquals(12, Node.COLUMN_BITS);
684:       assertEquals(57, Node.LAST_PROP);
685:       assertEquals(32, Node.INCRDECR_PROP);
686:       assertEquals(15, Node.NO_SIDE_EFFECTS);
687:       assertEquals(1, Node.DECR_FLAG);
688:       assertEquals(37, Node.OPT_ARG_NAME);
689:       assertEquals(48, Node.DIRECTIVES);
690:       assertEquals(8, Node.FLAG_NO_THROWS);
691:       assertEquals(39, Node.EMPTY_BLOCK);
692:       assertEquals(56, Node.CHANGE_TIME);
693:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
694:       assertEquals(4095, Node.COLUMN_MASK);
695:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
696:       assertEquals(49, Node.DIRECT_EVAL);
697:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
698:       assertEquals(53, Node.INPUT_ID);
699:       assertEquals(43, Node.IS_CONSTANT_NAME);
700:       assertEquals(36, Node.QUOTED_PROP);
701:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
702:       assertEquals(29, Node.JSDOC_INFO_PROP);
703:       assertEquals(55, Node.INFERRED_FUNCTION);
704:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
705:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
706:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
707:       assertEquals(46, Node.IS_NAMESPACE);
708:       assertEquals(47, Node.IS_DISPATCHER);
709:       assertEquals(2, Node.POST_FLAG);
710:       assertEquals(50, Node.FREE_CALL);
711:       assertEquals(51, Node.STATIC_SOURCE_FILE);
712:       assertEquals(40, Node.ORIGINALNAME_PROP);
713:       assertEquals(53, Node.INPUT_ID);
714:       assertEquals(43, Node.IS_CONSTANT_NAME);
715:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
716:       assertEquals(29, Node.JSDOC_INFO_PROP);
717:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
718:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
719:       assertEquals(36, Node.QUOTED_PROP);
720:       assertEquals(55, Node.INFERRED_FUNCTION);
721:       assertEquals(48, Node.DIRECTIVES);
722:       assertEquals(37, Node.OPT_ARG_NAME);
723:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
724:       assertEquals(12, Node.COLUMN_BITS);
725:       assertEquals(56, Node.CHANGE_TIME);
726:       assertEquals(32, Node.INCRDECR_PROP);
727:       assertEquals(49, Node.DIRECT_EVAL);
728:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
729:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
730:       assertEquals(4095, Node.COLUMN_MASK);
731:       assertEquals(54, Node.SLASH_V);
732:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
733:       assertEquals(57, Node.REFLECTED_OBJECT);
734:       assertEquals(57, Node.LAST_PROP);
735:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
736:       assertEquals(50, Node.FREE_CALL);
737:       assertEquals(1, Node.DECR_FLAG);
738:       assertEquals(15, Node.NO_SIDE_EFFECTS);
739:       assertEquals(51, Node.STATIC_SOURCE_FILE);
740:       assertEquals(52, Node.LENGTH);
741:       assertEquals(8, Node.FLAG_NO_THROWS);
742:       assertEquals(46, Node.IS_NAMESPACE);
743:       assertEquals(39, Node.EMPTY_BLOCK);
744:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
745:       assertEquals(30, Node.VAR_ARGS_NAME);
746:       assertEquals(40, Node.ORIGINALNAME_PROP);
747:       assertEquals(47, Node.IS_DISPATCHER);
748:       assertEquals(2, Node.POST_FLAG);
749:       assertFalse(node0.equals((Object)node1));
750:       assertFalse(node1.equals((Object)node0));
751:       assertFalse(node2.equals((Object)node0));
752:       assertFalse(node2.equals((Object)node1));
753:       
754:       Iterable<Node> iterable0 = node0.children();
755:       assertFalse(node0.isBlock());
756:       assertFalse(node0.isNew());
757:       assertFalse(node0.isAdd());
758:       assertFalse(node0.isContinue());
759:       assertFalse(node0.isCall());
760:       assertEquals((-1), node0.getLineno());
761:       assertFalse(node0.isStringKey());
762:       assertFalse(node0.isName());
763:       assertFalse(node0.isSetterDef());
764:       assertFalse(node0.isNull());
765:       assertFalse(node0.isLabel());
766:       assertEquals(0, node0.getChildCount());
767:       assertFalse(node0.isOr());
768:       assertFalse(node0.isVar());
769:       assertFalse(node0.isDo());
770:       assertFalse(node0.isDefaultCase());
771:       assertFalse(node0.isAssignAdd());
772:       assertFalse(node0.isExprResult());
773:       assertFalse(node0.isFunction());
774:       assertFalse(node0.isTrue());
775:       assertFalse(node0.isVoid());
776:       assertFalse(node0.isDebugger());
777:       assertFalse(node0.isNot());
778:       assertFalse(node0.isCast());
779:       assertFalse(node0.isObjectLit());
780:       assertFalse(node0.isGetElem());
781:       assertFalse(node0.isDelProp());
782:       assertFalse(node0.isAnd());
783:       assertFalse(node0.isComma());
784:       assertFalse(node0.isTypeOf());
785:       assertFalse(node0.isDec());
786:       assertEquals((-1), node0.getSourcePosition());
787:       assertFalse(node0.hasChildren());
788:       assertFalse(node0.isGetProp());
789:       assertFalse(node0.isBreak());
790:       assertFalse(node0.isAssign());
791:       assertFalse(node0.isReturn());
792:       assertTrue(node0.isNumber());
793:       assertFalse(node0.isWhile());
794:       assertFalse(node0.isInc());
795:       assertFalse(node0.isSwitch());
796:       assertEquals((-1), node0.getCharno());
797:       assertFalse(node0.isString());
798:       assertFalse(node0.isNE());
799:       assertFalse(node0.isEmpty());
800:       assertFalse(node0.isFalse());
801:       assertFalse(node0.isIn());
802:       assertFalse(node0.isThrow());
803:       assertFalse(node0.isScript());
804:       assertFalse(node0.isRegExp());
805:       assertFalse(node0.isWith());
806:       assertFalse(node0.isCatch());
807:       assertFalse(node0.isArrayLit());
808:       assertFalse(node0.isLabelName());
809:       assertFalse(node0.isIf());
810:       assertFalse(node0.isThis());
811:       assertFalse(node0.isParamList());
812:       assertFalse(node0.isGetterDef());
813:       assertFalse(node0.isInstanceOf());
814:       assertFalse(node0.hasMoreThanOneChild());
815:       assertFalse(node0.hasOneChild());
816:       assertFalse(node0.isHook());
817:       assertFalse(node0.isCase());
818:       assertEquals(39, node0.getType());
819:       assertFalse(node0.isTry());
820:       assertFalse(node0.isFor());
821:       assertNotNull(iterable0);
822:       assertFalse(iterable0.contains(node0));
823:       assertEquals(4095, Node.COLUMN_MASK);
824:       assertEquals(55, Node.INFERRED_FUNCTION);
825:       assertEquals(39, Node.EMPTY_BLOCK);
826:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
827:       assertEquals(48, Node.DIRECTIVES);
828:       assertEquals(50, Node.FREE_CALL);
829:       assertEquals(43, Node.IS_CONSTANT_NAME);
830:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
831:       assertEquals(8, Node.FLAG_NO_THROWS);
832:       assertEquals(57, Node.REFLECTED_OBJECT);
833:       assertEquals(36, Node.QUOTED_PROP);
834:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
835:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
836:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
837:       assertEquals(12, Node.COLUMN_BITS);
838:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
839:       assertEquals(32, Node.INCRDECR_PROP);
840:       assertEquals(46, Node.IS_NAMESPACE);
841:       assertEquals(1, Node.DECR_FLAG);
842:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
843:       assertEquals(37, Node.OPT_ARG_NAME);
844:       assertEquals(29, Node.JSDOC_INFO_PROP);
845:       assertEquals(49, Node.DIRECT_EVAL);
846:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
847:       assertEquals(56, Node.CHANGE_TIME);
848:       assertEquals(54, Node.SLASH_V);
849:       assertEquals(51, Node.STATIC_SOURCE_FILE);
850:       assertEquals(52, Node.LENGTH);
851:       assertEquals(53, Node.INPUT_ID);
852:       assertEquals(40, Node.ORIGINALNAME_PROP);
853:       assertEquals(15, Node.NO_SIDE_EFFECTS);
854:       assertEquals(30, Node.VAR_ARGS_NAME);
855:       assertEquals(57, Node.LAST_PROP);
856:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
857:       assertEquals(2, Node.POST_FLAG);
858:       assertEquals(47, Node.IS_DISPATCHER);
859:       assertFalse(node0.equals((Object)node1));
860:       assertFalse(node0.equals((Object)node2));
861:       
862:       boolean boolean1 = node1.hasMoreThanOneChild();
863:       assertNotSame(node1, node2);
864:       assertFalse(node1.isIf());
865:       assertFalse(node1.isGetterDef());
866:       assertFalse(node1.isDelProp());
867:       assertFalse(node1.isNE());
868:       assertFalse(node1.isFor());
869:       assertFalse(node1.isIn());
870:       assertFalse(node1.isTry());
871:       assertFalse(node1.isEmpty());
872:       assertFalse(node1.isString());
873:       assertFalse(node1.isDefaultCase());
874:       assertEquals((-1), node1.getCharno());
875:       assertFalse(node1.isDebugger());
876:       assertFalse(node1.isSwitch());
877:       assertEquals(0, node1.getChildCount());
878:       assertFalse(node1.isArrayLit());
879:       assertFalse(node1.isFalse());
880:       assertFalse(node1.isFunction());
881:       assertFalse(node1.isBreak());
882:       assertFalse(node1.isNull());
883:       assertFalse(node1.isComma());
884:       assertFalse(node1.isName());
885:       assertFalse(node1.isVar());
886:       assertFalse(node1.isNew());
887:       assertFalse(node1.isGetProp());
888:       assertFalse(node1.isObjectLit());
889:       assertFalse(node1.isAdd());
890:       assertFalse(node1.isVoid());
891:       assertFalse(node1.isTrue());
892:       assertFalse(node1.isWhile());
893:       assertFalse(node1.isReturn());
894:       assertFalse(node1.isExprResult());
895:       assertFalse(node1.isGetElem());
896:       assertFalse(node1.isCall());
897:       assertFalse(node1.hasChildren());
898:       assertFalse(node1.isTypeOf());
899:       assertFalse(node1.isNumber());
900:       assertFalse(node1.isLabelName());
901:       assertFalse(node1.isAssign());
902:       assertEquals(55, node1.getType());
903:       assertFalse(node1.isDec());
904:       assertEquals((-1), node1.getSourcePosition());
905:       assertFalse(node1.isAssignAdd());
906:       assertFalse(node1.isOr());
907:       assertFalse(node1.hasOneChild());
908:       assertFalse(node1.isScript());
909:       assertFalse(node1.isNot());
910:       assertFalse(node1.isDo());
911:       assertFalse(node1.isAnd());
912:       assertFalse(node1.isLabel());
913:       assertFalse(node1.isContinue());
914:       assertFalse(node1.isCast());
915:       assertFalse(node1.isThrow());
916:       assertFalse(node1.isThis());
917:       assertFalse(node1.isParamList());
918:       assertFalse(node1.isStringKey());
919:       assertFalse(node1.isInc());
920:       assertFalse(node1.isSetterDef());
921:       assertFalse(node1.isRegExp());
922:       assertFalse(node1.isCase());
923:       assertFalse(node1.isBlock());
924:       assertFalse(node1.isHook());
925:       assertEquals((-1), node1.getLineno());
926:       assertFalse(node1.isWith());
927:       assertFalse(node1.hasMoreThanOneChild());
928:       assertFalse(node1.isCatch());
929:       assertFalse(node1.isInstanceOf());
930:       assertFalse(boolean1);
931:       assertEquals(54, Node.SLASH_V);
932:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
933:       assertEquals(52, Node.LENGTH);
934:       assertEquals(57, Node.REFLECTED_OBJECT);
935:       assertEquals(30, Node.VAR_ARGS_NAME);
936:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
937:       assertEquals(12, Node.COLUMN_BITS);
938:       assertEquals(57, Node.LAST_PROP);
939:       assertEquals(32, Node.INCRDECR_PROP);
940:       assertEquals(15, Node.NO_SIDE_EFFECTS);
941:       assertEquals(1, Node.DECR_FLAG);
942:       assertEquals(37, Node.OPT_ARG_NAME);
943:       assertEquals(48, Node.DIRECTIVES);
944:       assertEquals(8, Node.FLAG_NO_THROWS);
945:       assertEquals(39, Node.EMPTY_BLOCK);
946:       assertEquals(56, Node.CHANGE_TIME);
947:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
948:       assertEquals(4095, Node.COLUMN_MASK);
949:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
950:       assertEquals(49, Node.DIRECT_EVAL);
951:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
952:       assertEquals(53, Node.INPUT_ID);
953:       assertEquals(43, Node.IS_CONSTANT_NAME);
954:       assertEquals(36, Node.QUOTED_PROP);
955:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
956:       assertEquals(29, Node.JSDOC_INFO_PROP);
957:       assertEquals(55, Node.INFERRED_FUNCTION);
958:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
959:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
960:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
961:       assertEquals(46, Node.IS_NAMESPACE);
962:       assertEquals(47, Node.IS_DISPATCHER);
963:       assertEquals(2, Node.POST_FLAG);
964:       assertEquals(50, Node.FREE_CALL);
965:       assertEquals(51, Node.STATIC_SOURCE_FILE);
966:       assertEquals(40, Node.ORIGINALNAME_PROP);
967:       assertFalse(node1.equals((Object)node0));
968:       assertFalse(node1.equals((Object)node2));
969:       assertTrue(boolean1 == boolean0);
970:       
971:       boolean boolean2 = node0.isOnlyModifiesArgumentsCall();
972:       assertFalse(node0.isBlock());
973:       assertFalse(node0.isNew());
974:       assertFalse(node0.isAdd());
975:       assertFalse(node0.isContinue());
976:       assertFalse(node0.isCall());
977:       assertEquals((-1), node0.getLineno());
978:       assertFalse(node0.isStringKey());
979:       assertFalse(node0.isName());
980:       assertFalse(node0.isSetterDef());
981:       assertFalse(node0.isNull());
982:       assertFalse(node0.isLabel());
983:       assertEquals(0, node0.getChildCount());
984:       assertFalse(node0.isOr());
985:       assertFalse(node0.isVar());
986:       assertFalse(node0.isDo());
987:       assertFalse(node0.isDefaultCase());
988:       assertFalse(node0.isAssignAdd());
989:       assertFalse(node0.isExprResult());
990:       assertFalse(node0.isFunction());
991:       assertFalse(node0.isTrue());
992:       assertFalse(node0.isVoid());
993:       assertFalse(node0.isDebugger());
994:       assertFalse(node0.isNot());
995:       assertFalse(node0.isCast());
996:       assertFalse(node0.isObjectLit());
997:       assertFalse(node0.isGetElem());
998:       assertFalse(node0.isDelProp());
999:       assertFalse(node0.isAnd());
1000:       assertFalse(node0.isComma());
1001:       assertFalse(node0.isTypeOf());
1002:       assertFalse(node0.isDec());
1003:       assertEquals((-1), node0.getSourcePosition());
1004:       assertFalse(node0.hasChildren());
1005:       assertFalse(node0.isGetProp());
1006:       assertFalse(node0.isBreak());
1007:       assertFalse(node0.isAssign());
1008:       assertFalse(node0.isReturn());
1009:       assertTrue(node0.isNumber());
1010:       assertFalse(node0.isWhile());
1011:       assertFalse(node0.isInc());
1012:       assertFalse(node0.isSwitch());
1013:       assertEquals((-1), node0.getCharno());
1014:       assertFalse(node0.isString());
1015:       assertFalse(node0.isNE());
1016:       assertFalse(node0.isEmpty());
1017:       assertFalse(node0.isFalse());
1018:       assertFalse(node0.isIn());
1019:       assertFalse(node0.isThrow());
1020:       assertFalse(node0.isScript());
1021:       assertFalse(node0.isRegExp());
1022:       assertFalse(node0.isWith());
1023:       assertFalse(node0.isCatch());
1024:       assertFalse(node0.isArrayLit());
1025:       assertFalse(node0.isLabelName());
1026:       assertFalse(node0.isIf());
1027:       assertFalse(node0.isThis());
1028:       assertFalse(node0.isParamList());
1029:       assertFalse(node0.isGetterDef());
1030:       assertFalse(node0.isInstanceOf());
1031:       assertFalse(node0.hasMoreThanOneChild());
1032:       assertFalse(node0.hasOneChild());
1033:       assertFalse(node0.isHook());
1034:       assertFalse(node0.isCase());
1035:       assertEquals(39, node0.getType());
1036:       assertFalse(node0.isTry());
1037:       assertFalse(node0.isFor());
1038:       assertFalse(boolean2);
1039:       assertEquals(4095, Node.COLUMN_MASK);
1040:       assertEquals(55, Node.INFERRED_FUNCTION);
1041:       assertEquals(39, Node.EMPTY_BLOCK);
1042:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1043:       assertEquals(48, Node.DIRECTIVES);
1044:       assertEquals(50, Node.FREE_CALL);
1045:       assertEquals(43, Node.IS_CONSTANT_NAME);
1046:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1047:       assertEquals(8, Node.FLAG_NO_THROWS);
1048:       assertEquals(57, Node.REFLECTED_OBJECT);
1049:       assertEquals(36, Node.QUOTED_PROP);
1050:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1051:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1052:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1053:       assertEquals(12, Node.COLUMN_BITS);
1054:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1055:       assertEquals(32, Node.INCRDECR_PROP);
1056:       assertEquals(46, Node.IS_NAMESPACE);
1057:       assertEquals(1, Node.DECR_FLAG);
1058:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1059:       assertEquals(37, Node.OPT_ARG_NAME);
1060:       assertEquals(29, Node.JSDOC_INFO_PROP);
1061:       assertEquals(49, Node.DIRECT_EVAL);
1062:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1063:       assertEquals(56, Node.CHANGE_TIME);
1064:       assertEquals(54, Node.SLASH_V);
1065:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1066:       assertEquals(52, Node.LENGTH);
1067:       assertEquals(53, Node.INPUT_ID);
1068:       assertEquals(40, Node.ORIGINALNAME_PROP);
1069:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1070:       assertEquals(30, Node.VAR_ARGS_NAME);
1071:       assertEquals(57, Node.LAST_PROP);
1072:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1073:       assertEquals(2, Node.POST_FLAG);
1074:       assertEquals(47, Node.IS_DISPATCHER);
1075:       assertFalse(node0.equals((Object)node1));
1076:       assertFalse(node0.equals((Object)node2));
1077:       assertTrue(boolean2 == boolean1);
1078:       assertTrue(boolean2 == boolean0);
1079:   }
1080: }
RegularFileObject[/tmp/EvoSuite_143_1629223337730/com/google/javascript/rhino/Node_143_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:17 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_143_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_143_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Maps$KeySet",
93:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
94:       "com.google.common.collect.LinkedHashMultimap",
95:       "com.google.javascript.rhino.Node",
96:       "com.google.javascript.rhino.jstype.ObjectType",
97:       "com.google.common.collect.ImmutableMapKeySet",
98:       "com.google.javascript.rhino.JSDocInfo$Marker",
99:       "com.google.common.collect.RegularImmutableMap",
100:       "com.google.common.collect.RegularImmutableBiMap",
101:       "com.google.javascript.rhino.Node$NodeMismatch",
102:       "com.google.javascript.rhino.jstype.RecordType",
103:       "com.google.common.collect.SortedMapDifference",
104:       "com.google.javascript.rhino.jstype.ModificationVisitor",
105:       "com.google.javascript.rhino.jstype.PropertyMap$1",
106:       "com.google.common.collect.AbstractMapEntry",
107:       "com.google.javascript.rhino.Node$AncestorIterable$1",
108:       "com.google.common.collect.Iterators$12",
109:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
110:       "com.google.common.collect.Iterators$11",
111:       "com.google.javascript.rhino.jstype.JSType$1",
112:       "com.google.common.collect.EmptyImmutableBiMap",
113:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
114:       "com.google.common.base.Predicate",
115:       "com.google.javascript.rhino.jstype.JSType$2",
116:       "com.google.javascript.rhino.jstype.VoidType",
117:       "com.google.common.base.Joiner",
118:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
119:       "com.google.common.collect.AbstractListMultimap",
120:       "com.google.javascript.rhino.jstype.JSType",
121:       "com.google.common.collect.ImmutableAsList",
122:       "com.google.javascript.rhino.Node$StringNode",
123:       "com.google.javascript.rhino.jstype.ProxyObjectType",
124:       "com.google.common.collect.RegularImmutableAsList",
125:       "com.google.javascript.rhino.jstype.TemplateType",
126:       "com.google.javascript.rhino.jstype.NamedType",
127:       "com.google.common.collect.Iterators$13",
128:       "com.google.javascript.rhino.InputId",
129:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
130:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
131:       "com.google.common.collect.AbstractMapBasedMultimap",
132:       "com.google.common.collect.Lists$Partition",
133:       "com.google.common.collect.Lists",
134:       "com.google.javascript.rhino.Node$SideEffectFlags",
135:       "com.google.common.collect.UnmodifiableListIterator",
136:       "com.google.javascript.rhino.jstype.NullType",
137:       "com.google.common.collect.Lists$TransformingSequentialList",
138:       "com.google.javascript.rhino.ErrorReporter",
139:       "com.google.javascript.rhino.jstype.UnknownType",
140:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
141:       "com.google.javascript.rhino.jstype.ValueType",
142:       "com.google.javascript.rhino.jstype.PropertyMap",
143:       "com.google.javascript.rhino.Token",
144:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
145:       "com.google.common.collect.ObjectArrays",
146:       "com.google.javascript.rhino.jstype.StaticSourceFile",
147:       "com.google.javascript.rhino.jstype.BooleanType",
148:       "com.google.javascript.rhino.jstype.NoObjectType",
149:       "com.google.common.collect.AbstractIterator",
150:       "com.google.javascript.rhino.jstype.FunctionBuilder",
151:       "com.google.javascript.rhino.jstype.JSType$TypePair",
152:       "com.google.common.base.Joiner$MapJoiner",
153:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
154:       "com.google.common.collect.ImmutableList$1",
155:       "com.google.common.collect.MapDifference",
156:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
157:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
158:       "com.google.common.collect.Sets$ImprovedAbstractSet",
159:       "com.google.javascript.rhino.jstype.FunctionType",
160:       "com.google.common.base.Preconditions",
161:       "com.google.common.collect.UnmodifiableIterator",
162:       "com.google.javascript.rhino.JSDocInfo",
163:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
164:       "com.google.javascript.rhino.jstype.Property",
165:       "com.google.common.collect.ImmutableMapValues",
166:       "com.google.common.collect.ImmutableEntry",
167:       "com.google.common.base.Joiner$1",
168:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
169:       "com.google.common.base.Joiner$2",
170:       "com.google.common.collect.ImmutableCollection",
171:       "com.google.common.collect.ImmutableEnumMap",
172:       "com.google.javascript.rhino.jstype.TernaryValue",
173:       "com.google.javascript.rhino.Node$AncestorIterable",
174:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
175:       "com.google.common.collect.Lists$RandomAccessListWrapper",
176:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
177:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
178:       "com.google.javascript.rhino.jstype.EnumElementType",
179:       "com.google.javascript.rhino.jstype.UnionType",
180:       "com.google.common.base.Objects",
181:       "com.google.javascript.rhino.Node$NumberNode",
182:       "com.google.common.collect.SingletonImmutableList",
183:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
184:       "com.google.common.collect.ImmutableCollection$Builder",
185:       "com.google.javascript.rhino.jstype.StaticSlot",
186:       "com.google.common.collect.Iterators$6",
187:       "com.google.common.collect.BiMap",
188:       "com.google.common.collect.Iterators$7",
189:       "com.google.common.collect.AbstractSetMultimap",
190:       "com.google.common.base.Function",
191:       "com.google.common.collect.ImmutableSet",
192:       "com.google.common.collect.Lists$AbstractListWrapper",
193:       "com.google.common.collect.ImmutableMap",
194:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
195:       "com.google.common.collect.AbstractIndexedListIterator",
196:       "com.google.common.collect.Maps$1",
197:       "com.google.javascript.rhino.jstype.EnumType",
198:       "com.google.common.collect.Iterators$1",
199:       "com.google.common.collect.Iterators$2",
200:       "com.google.javascript.rhino.jstype.NamespaceType",
201:       "com.google.common.collect.Iterators$3",
202:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
203:       "com.google.javascript.rhino.Node$ObjectPropListItem",
204:       "com.google.common.collect.Lists$StringAsImmutableList",
205:       "com.google.common.collect.Lists$2",
206:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
207:       "com.google.common.collect.ImmutableList$Builder",
208:       "com.google.common.collect.Lists$1",
209:       "com.google.javascript.rhino.jstype.StaticReference",
210:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
211:       "com.google.common.collect.Multiset",
212:       "com.google.common.collect.AbstractMultimap",
213:       "com.google.common.collect.Multimap",
214:       "com.google.common.collect.Iterators",
215:       "com.google.common.collect.Maps$ImprovedAbstractMap",
216:       "com.google.common.collect.ImmutableBiMap",
217:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
218:       "com.google.common.collect.ImmutableList",
219:       "com.google.common.collect.SingletonImmutableBiMap",
220:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
221:       "com.google.javascript.rhino.jstype.StringType",
222:       "com.google.javascript.rhino.Node$AbstractPropListItem",
223:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
224:       "com.google.javascript.rhino.jstype.TemplatizedType",
225:       "com.google.javascript.rhino.jstype.Visitor",
226:       "com.google.javascript.rhino.jstype.NoResolvedType",
227:       "com.google.javascript.rhino.jstype.JSTypeNative",
228:       "com.google.javascript.rhino.jstype.AllType",
229:       "com.google.common.collect.Maps",
230:       "com.google.common.collect.SetMultimap",
231:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
232:       "com.google.common.collect.Maps$EntryTransformer",
233:       "com.google.javascript.rhino.JSTypeExpression",
234:       "com.google.common.collect.Iterators$MergingIterator"
235:     );
236:   } 
237: 
238:   private static void resetClasses() {
239:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_143_tmp__ESTest_scaffolding.class.getClassLoader()); 
240: 
241:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
242:       "com.google.javascript.rhino.Node",
243:       "com.google.javascript.rhino.Node$NumberNode",
244:       "com.google.javascript.rhino.Node$StringNode",
245:       "com.google.javascript.rhino.Node$AbstractPropListItem",
246:       "com.google.javascript.rhino.Node$ObjectPropListItem",
247:       "com.google.javascript.rhino.Node$IntPropListItem",
248:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
249:       "com.google.javascript.rhino.Node$AncestorIterable",
250:       "com.google.javascript.rhino.Node$NodeMismatch",
251:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
252:       "com.google.javascript.rhino.Node$SideEffectFlags",
253:       "com.google.javascript.rhino.Token",
254:       "com.google.common.base.Preconditions",
255:       "com.google.common.base.Objects",
256:       "com.google.javascript.rhino.SimpleErrorReporter",
257:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
258:       "com.google.common.base.Joiner",
259:       "com.google.common.base.Joiner$1",
260:       "com.google.common.collect.Collections2",
261:       "com.google.common.base.Joiner$MapJoiner",
262:       "com.google.common.collect.Maps",
263:       "com.google.common.collect.AbstractMultimap",
264:       "com.google.common.collect.AbstractMapBasedMultimap",
265:       "com.google.common.collect.AbstractSetMultimap",
266:       "com.google.common.collect.LinkedHashMultimap",
267:       "com.google.common.collect.AbstractMapEntry",
268:       "com.google.common.collect.ImmutableEntry",
269:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
270:       "com.google.common.collect.AbstractListMultimap",
271:       "com.google.common.collect.ArrayListMultimap",
272:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
273:       "com.google.common.collect.ImmutableCollection",
274:       "com.google.common.collect.RegularImmutableList",
275:       "com.google.common.collect.ObjectArrays",
276:       "com.google.common.collect.ImmutableList",
277:       "com.google.javascript.rhino.jstype.ModificationVisitor",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
279:       "com.google.common.collect.ImmutableCollection$Builder",
280:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
281:       "com.google.common.collect.ImmutableList$Builder",
282:       "com.google.common.collect.UnmodifiableIterator",
283:       "com.google.common.collect.UnmodifiableListIterator",
284:       "com.google.common.collect.Iterators$1",
285:       "com.google.common.collect.Iterators$2",
286:       "com.google.common.collect.Iterators",
287:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
288:       "com.google.javascript.rhino.jstype.JSType$1",
289:       "com.google.javascript.rhino.jstype.JSType",
290:       "com.google.javascript.rhino.jstype.ObjectType",
291:       "com.google.javascript.rhino.jstype.ProxyObjectType",
292:       "com.google.javascript.rhino.jstype.TemplateType",
293:       "com.google.javascript.rhino.jstype.ValueType",
294:       "com.google.javascript.rhino.jstype.BooleanType",
295:       "com.google.javascript.rhino.jstype.NullType",
296:       "com.google.javascript.rhino.jstype.NumberType",
297:       "com.google.javascript.rhino.jstype.StringType",
298:       "com.google.javascript.rhino.jstype.UnknownType",
299:       "com.google.javascript.rhino.jstype.VoidType",
300:       "com.google.javascript.rhino.jstype.AllType",
301:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
302:       "com.google.common.collect.ImmutableMap",
303:       "com.google.common.collect.ImmutableBiMap",
304:       "com.google.common.collect.EmptyImmutableBiMap",
305:       "com.google.javascript.rhino.jstype.PropertyMap$1",
306:       "com.google.javascript.rhino.jstype.PropertyMap",
307:       "com.google.javascript.rhino.jstype.FunctionType",
308:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
309:       "com.google.javascript.rhino.jstype.ArrowType",
310:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
311:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
312:       "com.google.javascript.rhino.jstype.InstanceObjectType",
313:       "com.google.javascript.rhino.jstype.Property",
314:       "com.google.common.collect.Lists",
315:       "com.google.javascript.rhino.jstype.NoObjectType",
316:       "com.google.javascript.rhino.jstype.NoType",
317:       "com.google.javascript.rhino.jstype.NoResolvedType",
318:       "com.google.common.collect.SingletonImmutableList",
319:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
320:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
321:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
322:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
323:       "com.google.javascript.rhino.jstype.UnionType",
324:       "com.google.javascript.rhino.jstype.FunctionBuilder",
325:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
326:       "com.google.javascript.rhino.jstype.EnumType",
327:       "com.google.javascript.rhino.jstype.EnumElementType",
328:       "com.google.javascript.rhino.JSDocInfo",
329:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.InputId",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.collect.Iterables",
335:       "com.google.javascript.rhino.jstype.TemplatizedType",
336:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.javascript.rhino.jstype.JSType$TypePair",
340:       "com.google.common.collect.Sets$ImprovedAbstractSet",
341:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
342:       "com.google.common.collect.Hashing",
343:       "com.google.javascript.rhino.jstype.NamedType",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.javascript.rhino.jstype.JSType$2",
350:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
351:       "com.google.common.collect.Iterators$12",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.Platform"
360:     );
361:   }
362: }

[MASTER] 18:02:17.940 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0);
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertNotNull(node0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean0 = node0.isArrayLit();
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);

Node node1 = new Node(55);
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isDefaultCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAdd());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals(55, node1.getType());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isDo());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertNotNull(node1);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.equals((Object)node0));

node1.putIntProp(38, 25);
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isDefaultCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAdd());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals(55, node1.getType());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isDo());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.equals((Object)node0));

Node node2 = new Node(1110, node1, node0, node0, node0);
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isDefaultCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAdd());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals(55, node1.getType());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isDo());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertEquals(2, node2.getChildCount());
assertFalse(node2.isThrow());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertEquals(1110, node2.getType());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isVoid());
assertFalse(node2.isString());
assertFalse(node2.isExprResult());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isLabelName());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIn());
assertFalse(node2.isScript());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertNotNull(node2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));

boolean boolean1 = node1.hasMoreThanOneChild();
assertNotSame(node1, node2);
assertFalse(node1.isIf());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isDefaultCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAdd());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals(55, node1.getType());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isDo());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(boolean1);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean1 == boolean0);

boolean boolean2 = node0.isOnlyModifiesArgumentsCall();
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isContinue());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isCast());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isString());
assertFalse(node0.isNE());
assertFalse(node0.isEmpty());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isScript());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isIf());
assertFalse(node0.isThis());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasOneChild());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(boolean2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);


[MASTER] 18:02:33.237 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_228_1629223352847/com/google/javascript/rhino/Node_228_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_228_1629223352847/com/google/javascript/rhino/Node_228_tmp__ESTest_scaffolding.java]]
[MASTER] 18:02:33.237 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:33.237 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:02:33.238 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 829
[MASTER] 18:02:33.241 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_228_1629223352847/com/google/javascript/rhino/Node_228_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:02:32 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.io.StringWriter;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_228_tmp__ESTest extends Node_228_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("", 153, 153);
23:       assertFalse(node0.isHook());
24:       assertFalse(node0.isFalse());
25:       assertFalse(node0.isThrow());
26:       assertFalse(node0.isSwitch());
27:       assertFalse(node0.isBreak());
28:       assertFalse(node0.isIn());
29:       assertFalse(node0.isEmpty());
30:       assertFalse(node0.isInc());
31:       assertFalse(node0.isCast());
32:       assertFalse(node0.isTrue());
33:       assertFalse(node0.isAssign());
34:       assertFalse(node0.hasChildren());
35:       assertFalse(node0.isDebugger());
36:       assertFalse(node0.isDec());
37:       assertFalse(node0.isTypeOf());
38:       assertFalse(node0.isDelProp());
39:       assertFalse(node0.isFunction());
40:       assertFalse(node0.isGetElem());
41:       assertFalse(node0.isExprResult());
42:       assertFalse(node0.isVoid());
43:       assertFalse(node0.isAnd());
44:       assertEquals(153, node0.getLineno());
45:       assertFalse(node0.isObjectLit());
46:       assertFalse(node0.isReturn());
47:       assertFalse(node0.isNot());
48:       assertFalse(node0.isComma());
49:       assertFalse(node0.isWhile());
50:       assertFalse(node0.isGetProp());
51:       assertFalse(node0.isVar());
52:       assertFalse(node0.isStringKey());
53:       assertFalse(node0.isBlock());
54:       assertFalse(node0.isNull());
55:       assertFalse(node0.isParamList());
56:       assertFalse(node0.isName());
57:       assertFalse(node0.isCall());
58:       assertEquals(0, node0.getChildCount());
59:       assertFalse(node0.isAssignAdd());
60:       assertFalse(node0.isContinue());
61:       assertEquals(40, node0.getType());
62:       assertFalse(node0.isOr());
63:       assertFalse(node0.isLabel());
64:       assertFalse(node0.isDefaultCase());
65:       assertFalse(node0.isAdd());
66:       assertFalse(node0.isSetterDef());
67:       assertFalse(node0.isDo());
68:       assertFalse(node0.isNew());
69:       assertFalse(node0.hasOneChild());
70:       assertEquals(153, node0.getCharno());
71:       assertFalse(node0.isFor());
72:       assertEquals(626841, node0.getSourcePosition());
73:       assertFalse(node0.isIf());
74:       assertFalse(node0.isRegExp());
75:       assertFalse(node0.isWith());
76:       assertFalse(node0.isNE());
77:       assertFalse(node0.isLabelName());
78:       assertFalse(node0.isArrayLit());
79:       assertFalse(node0.isInstanceOf());
80:       assertFalse(node0.isCatch());
81:       assertFalse(node0.hasMoreThanOneChild());
82:       assertFalse(node0.isThis());
83:       assertFalse(node0.isNumber());
84:       assertFalse(node0.isScript());
85:       assertFalse(node0.isGetterDef());
86:       assertFalse(node0.isTry());
87:       assertTrue(node0.isString());
88:       assertFalse(node0.isCase());
89:       assertNotNull(node0);
90:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
91:       assertEquals(55, Node.INFERRED_FUNCTION);
92:       assertEquals(4095, Node.COLUMN_MASK);
93:       assertEquals(48, Node.DIRECTIVES);
94:       assertEquals(36, Node.QUOTED_PROP);
95:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
96:       assertEquals(43, Node.IS_CONSTANT_NAME);
97:       assertEquals(50, Node.FREE_CALL);
98:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
99:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
100:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
101:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
102:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
103:       assertEquals(12, Node.COLUMN_BITS);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(1, Node.DECR_FLAG);
106:       assertEquals(30, Node.VAR_ARGS_NAME);
107:       assertEquals(49, Node.DIRECT_EVAL);
108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
109:       assertEquals(15, Node.NO_SIDE_EFFECTS);
110:       assertEquals(54, Node.SLASH_V);
111:       assertEquals(37, Node.OPT_ARG_NAME);
112:       assertEquals(56, Node.CHANGE_TIME);
113:       assertEquals(46, Node.IS_NAMESPACE);
114:       assertEquals(57, Node.REFLECTED_OBJECT);
115:       assertEquals(40, Node.ORIGINALNAME_PROP);
116:       assertEquals(29, Node.JSDOC_INFO_PROP);
117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
118:       assertEquals(52, Node.LENGTH);
119:       assertEquals(8, Node.FLAG_NO_THROWS);
120:       assertEquals(53, Node.INPUT_ID);
121:       assertEquals(2, Node.POST_FLAG);
122:       assertEquals(39, Node.EMPTY_BLOCK);
123:       assertEquals(57, Node.LAST_PROP);
124:       assertEquals(47, Node.IS_DISPATCHER);
125:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
126:       
127:       boolean boolean0 = node0.isNot();
128:       assertFalse(node0.isHook());
129:       assertFalse(node0.isFalse());
130:       assertFalse(node0.isThrow());
131:       assertFalse(node0.isSwitch());
132:       assertFalse(node0.isBreak());
133:       assertFalse(node0.isIn());
134:       assertFalse(node0.isEmpty());
135:       assertFalse(node0.isInc());
136:       assertFalse(node0.isCast());
137:       assertFalse(node0.isTrue());
138:       assertFalse(node0.isAssign());
139:       assertFalse(node0.hasChildren());
140:       assertFalse(node0.isDebugger());
141:       assertFalse(node0.isDec());
142:       assertFalse(node0.isTypeOf());
143:       assertFalse(node0.isDelProp());
144:       assertFalse(node0.isFunction());
145:       assertFalse(node0.isGetElem());
146:       assertFalse(node0.isExprResult());
147:       assertFalse(node0.isVoid());
148:       assertFalse(node0.isAnd());
149:       assertEquals(153, node0.getLineno());
150:       assertFalse(node0.isObjectLit());
151:       assertFalse(node0.isReturn());
152:       assertFalse(node0.isNot());
153:       assertFalse(node0.isComma());
154:       assertFalse(node0.isWhile());
155:       assertFalse(node0.isGetProp());
156:       assertFalse(node0.isVar());
157:       assertFalse(node0.isStringKey());
158:       assertFalse(node0.isBlock());
159:       assertFalse(node0.isNull());
160:       assertFalse(node0.isParamList());
161:       assertFalse(node0.isName());
162:       assertFalse(node0.isCall());
163:       assertEquals(0, node0.getChildCount());
164:       assertFalse(node0.isAssignAdd());
165:       assertFalse(node0.isContinue());
166:       assertEquals(40, node0.getType());
167:       assertFalse(node0.isOr());
168:       assertFalse(node0.isLabel());
169:       assertFalse(node0.isDefaultCase());
170:       assertFalse(node0.isAdd());
171:       assertFalse(node0.isSetterDef());
172:       assertFalse(node0.isDo());
173:       assertFalse(node0.isNew());
174:       assertFalse(node0.hasOneChild());
175:       assertEquals(153, node0.getCharno());
176:       assertFalse(node0.isFor());
177:       assertEquals(626841, node0.getSourcePosition());
178:       assertFalse(node0.isIf());
179:       assertFalse(node0.isRegExp());
180:       assertFalse(node0.isWith());
181:       assertFalse(node0.isNE());
182:       assertFalse(node0.isLabelName());
183:       assertFalse(node0.isArrayLit());
184:       assertFalse(node0.isInstanceOf());
185:       assertFalse(node0.isCatch());
186:       assertFalse(node0.hasMoreThanOneChild());
187:       assertFalse(node0.isThis());
188:       assertFalse(node0.isNumber());
189:       assertFalse(node0.isScript());
190:       assertFalse(node0.isGetterDef());
191:       assertFalse(node0.isTry());
192:       assertTrue(node0.isString());
193:       assertFalse(node0.isCase());
194:       assertFalse(boolean0);
195:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
196:       assertEquals(55, Node.INFERRED_FUNCTION);
197:       assertEquals(4095, Node.COLUMN_MASK);
198:       assertEquals(48, Node.DIRECTIVES);
199:       assertEquals(36, Node.QUOTED_PROP);
200:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
201:       assertEquals(43, Node.IS_CONSTANT_NAME);
202:       assertEquals(50, Node.FREE_CALL);
203:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
204:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
206:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
207:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
208:       assertEquals(12, Node.COLUMN_BITS);
209:       assertEquals(32, Node.INCRDECR_PROP);
210:       assertEquals(1, Node.DECR_FLAG);
211:       assertEquals(30, Node.VAR_ARGS_NAME);
212:       assertEquals(49, Node.DIRECT_EVAL);
213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
214:       assertEquals(15, Node.NO_SIDE_EFFECTS);
215:       assertEquals(54, Node.SLASH_V);
216:       assertEquals(37, Node.OPT_ARG_NAME);
217:       assertEquals(56, Node.CHANGE_TIME);
218:       assertEquals(46, Node.IS_NAMESPACE);
219:       assertEquals(57, Node.REFLECTED_OBJECT);
220:       assertEquals(40, Node.ORIGINALNAME_PROP);
221:       assertEquals(29, Node.JSDOC_INFO_PROP);
222:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
223:       assertEquals(52, Node.LENGTH);
224:       assertEquals(8, Node.FLAG_NO_THROWS);
225:       assertEquals(53, Node.INPUT_ID);
226:       assertEquals(2, Node.POST_FLAG);
227:       assertEquals(39, Node.EMPTY_BLOCK);
228:       assertEquals(57, Node.LAST_PROP);
229:       assertEquals(47, Node.IS_DISPATCHER);
230:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
231:       
232:       boolean boolean1 = node0.isVarArgs();
233:       assertFalse(node0.isHook());
234:       assertFalse(node0.isFalse());
235:       assertFalse(node0.isThrow());
236:       assertFalse(node0.isSwitch());
237:       assertFalse(node0.isBreak());
238:       assertFalse(node0.isIn());
239:       assertFalse(node0.isEmpty());
240:       assertFalse(node0.isInc());
241:       assertFalse(node0.isCast());
242:       assertFalse(node0.isTrue());
243:       assertFalse(node0.isAssign());
244:       assertFalse(node0.hasChildren());
245:       assertFalse(node0.isDebugger());
246:       assertFalse(node0.isDec());
247:       assertFalse(node0.isTypeOf());
248:       assertFalse(node0.isDelProp());
249:       assertFalse(node0.isFunction());
250:       assertFalse(node0.isGetElem());
251:       assertFalse(node0.isExprResult());
252:       assertFalse(node0.isVoid());
253:       assertFalse(node0.isAnd());
254:       assertEquals(153, node0.getLineno());
255:       assertFalse(node0.isObjectLit());
256:       assertFalse(node0.isReturn());
257:       assertFalse(node0.isNot());
258:       assertFalse(node0.isComma());
259:       assertFalse(node0.isWhile());
260:       assertFalse(node0.isGetProp());
261:       assertFalse(node0.isVar());
262:       assertFalse(node0.isStringKey());
263:       assertFalse(node0.isBlock());
264:       assertFalse(node0.isNull());
265:       assertFalse(node0.isParamList());
266:       assertFalse(node0.isName());
267:       assertFalse(node0.isCall());
268:       assertEquals(0, node0.getChildCount());
269:       assertFalse(node0.isAssignAdd());
270:       assertFalse(node0.isContinue());
271:       assertEquals(40, node0.getType());
272:       assertFalse(node0.isOr());
273:       assertFalse(node0.isLabel());
274:       assertFalse(node0.isDefaultCase());
275:       assertFalse(node0.isAdd());
276:       assertFalse(node0.isSetterDef());
277:       assertFalse(node0.isDo());
278:       assertFalse(node0.isNew());
279:       assertFalse(node0.hasOneChild());
280:       assertEquals(153, node0.getCharno());
281:       assertFalse(node0.isFor());
282:       assertEquals(626841, node0.getSourcePosition());
283:       assertFalse(node0.isIf());
284:       assertFalse(node0.isRegExp());
285:       assertFalse(node0.isWith());
286:       assertFalse(node0.isNE());
287:       assertFalse(node0.isLabelName());
288:       assertFalse(node0.isArrayLit());
289:       assertFalse(node0.isInstanceOf());
290:       assertFalse(node0.isCatch());
291:       assertFalse(node0.hasMoreThanOneChild());
292:       assertFalse(node0.isThis());
293:       assertFalse(node0.isNumber());
294:       assertFalse(node0.isScript());
295:       assertFalse(node0.isGetterDef());
296:       assertFalse(node0.isTry());
297:       assertTrue(node0.isString());
298:       assertFalse(node0.isCase());
299:       assertFalse(boolean1);
300:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
301:       assertEquals(55, Node.INFERRED_FUNCTION);
302:       assertEquals(4095, Node.COLUMN_MASK);
303:       assertEquals(48, Node.DIRECTIVES);
304:       assertEquals(36, Node.QUOTED_PROP);
305:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
306:       assertEquals(43, Node.IS_CONSTANT_NAME);
307:       assertEquals(50, Node.FREE_CALL);
308:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
309:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
310:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
312:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
313:       assertEquals(12, Node.COLUMN_BITS);
314:       assertEquals(32, Node.INCRDECR_PROP);
315:       assertEquals(1, Node.DECR_FLAG);
316:       assertEquals(30, Node.VAR_ARGS_NAME);
317:       assertEquals(49, Node.DIRECT_EVAL);
318:       assertEquals(51, Node.STATIC_SOURCE_FILE);
319:       assertEquals(15, Node.NO_SIDE_EFFECTS);
320:       assertEquals(54, Node.SLASH_V);
321:       assertEquals(37, Node.OPT_ARG_NAME);
322:       assertEquals(56, Node.CHANGE_TIME);
323:       assertEquals(46, Node.IS_NAMESPACE);
324:       assertEquals(57, Node.REFLECTED_OBJECT);
325:       assertEquals(40, Node.ORIGINALNAME_PROP);
326:       assertEquals(29, Node.JSDOC_INFO_PROP);
327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
328:       assertEquals(52, Node.LENGTH);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(53, Node.INPUT_ID);
331:       assertEquals(2, Node.POST_FLAG);
332:       assertEquals(39, Node.EMPTY_BLOCK);
333:       assertEquals(57, Node.LAST_PROP);
334:       assertEquals(47, Node.IS_DISPATCHER);
335:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
336:       assertTrue(boolean1 == boolean0);
337:       
338:       boolean boolean2 = node0.isThis();
339:       assertFalse(node0.isHook());
340:       assertFalse(node0.isFalse());
341:       assertFalse(node0.isThrow());
342:       assertFalse(node0.isSwitch());
343:       assertFalse(node0.isBreak());
344:       assertFalse(node0.isIn());
345:       assertFalse(node0.isEmpty());
346:       assertFalse(node0.isInc());
347:       assertFalse(node0.isCast());
348:       assertFalse(node0.isTrue());
349:       assertFalse(node0.isAssign());
350:       assertFalse(node0.hasChildren());
351:       assertFalse(node0.isDebugger());
352:       assertFalse(node0.isDec());
353:       assertFalse(node0.isTypeOf());
354:       assertFalse(node0.isDelProp());
355:       assertFalse(node0.isFunction());
356:       assertFalse(node0.isGetElem());
357:       assertFalse(node0.isExprResult());
358:       assertFalse(node0.isVoid());
359:       assertFalse(node0.isAnd());
360:       assertEquals(153, node0.getLineno());
361:       assertFalse(node0.isObjectLit());
362:       assertFalse(node0.isReturn());
363:       assertFalse(node0.isNot());
364:       assertFalse(node0.isComma());
365:       assertFalse(node0.isWhile());
366:       assertFalse(node0.isGetProp());
367:       assertFalse(node0.isVar());
368:       assertFalse(node0.isStringKey());
369:       assertFalse(node0.isBlock());
370:       assertFalse(node0.isNull());
371:       assertFalse(node0.isParamList());
372:       assertFalse(node0.isName());
373:       assertFalse(node0.isCall());
374:       assertEquals(0, node0.getChildCount());
375:       assertFalse(node0.isAssignAdd());
376:       assertFalse(node0.isContinue());
377:       assertEquals(40, node0.getType());
378:       assertFalse(node0.isOr());
379:       assertFalse(node0.isLabel());
380:       assertFalse(node0.isDefaultCase());
381:       assertFalse(node0.isAdd());
382:       assertFalse(node0.isSetterDef());
383:       assertFalse(node0.isDo());
384:       assertFalse(node0.isNew());
385:       assertFalse(node0.hasOneChild());
386:       assertEquals(153, node0.getCharno());
387:       assertFalse(node0.isFor());
388:       assertEquals(626841, node0.getSourcePosition());
389:       assertFalse(node0.isIf());
390:       assertFalse(node0.isRegExp());
391:       assertFalse(node0.isWith());
392:       assertFalse(node0.isNE());
393:       assertFalse(node0.isLabelName());
394:       assertFalse(node0.isArrayLit());
395:       assertFalse(node0.isInstanceOf());
396:       assertFalse(node0.isCatch());
397:       assertFalse(node0.hasMoreThanOneChild());
398:       assertFalse(node0.isThis());
399:       assertFalse(node0.isNumber());
400:       assertFalse(node0.isScript());
401:       assertFalse(node0.isGetterDef());
402:       assertFalse(node0.isTry());
403:       assertTrue(node0.isString());
404:       assertFalse(node0.isCase());
405:       assertFalse(boolean2);
406:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
407:       assertEquals(55, Node.INFERRED_FUNCTION);
408:       assertEquals(4095, Node.COLUMN_MASK);
409:       assertEquals(48, Node.DIRECTIVES);
410:       assertEquals(36, Node.QUOTED_PROP);
411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
412:       assertEquals(43, Node.IS_CONSTANT_NAME);
413:       assertEquals(50, Node.FREE_CALL);
414:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
415:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
416:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
417:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
418:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
419:       assertEquals(12, Node.COLUMN_BITS);
420:       assertEquals(32, Node.INCRDECR_PROP);
421:       assertEquals(1, Node.DECR_FLAG);
422:       assertEquals(30, Node.VAR_ARGS_NAME);
423:       assertEquals(49, Node.DIRECT_EVAL);
424:       assertEquals(51, Node.STATIC_SOURCE_FILE);
425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
426:       assertEquals(54, Node.SLASH_V);
427:       assertEquals(37, Node.OPT_ARG_NAME);
428:       assertEquals(56, Node.CHANGE_TIME);
429:       assertEquals(46, Node.IS_NAMESPACE);
430:       assertEquals(57, Node.REFLECTED_OBJECT);
431:       assertEquals(40, Node.ORIGINALNAME_PROP);
432:       assertEquals(29, Node.JSDOC_INFO_PROP);
433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
434:       assertEquals(52, Node.LENGTH);
435:       assertEquals(8, Node.FLAG_NO_THROWS);
436:       assertEquals(53, Node.INPUT_ID);
437:       assertEquals(2, Node.POST_FLAG);
438:       assertEquals(39, Node.EMPTY_BLOCK);
439:       assertEquals(57, Node.LAST_PROP);
440:       assertEquals(47, Node.IS_DISPATCHER);
441:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
442:       assertTrue(boolean2 == boolean1);
443:       assertTrue(boolean2 == boolean0);
444:       
445:       boolean boolean3 = node0.isLocalResultCall();
446:       assertFalse(node0.isHook());
447:       assertFalse(node0.isFalse());
448:       assertFalse(node0.isThrow());
449:       assertFalse(node0.isSwitch());
450:       assertFalse(node0.isBreak());
451:       assertFalse(node0.isIn());
452:       assertFalse(node0.isEmpty());
453:       assertFalse(node0.isInc());
454:       assertFalse(node0.isCast());
455:       assertFalse(node0.isTrue());
456:       assertFalse(node0.isAssign());
457:       assertFalse(node0.hasChildren());
458:       assertFalse(node0.isDebugger());
459:       assertFalse(node0.isDec());
460:       assertFalse(node0.isTypeOf());
461:       assertFalse(node0.isDelProp());
462:       assertFalse(node0.isFunction());
463:       assertFalse(node0.isGetElem());
464:       assertFalse(node0.isExprResult());
465:       assertFalse(node0.isVoid());
466:       assertFalse(node0.isAnd());
467:       assertEquals(153, node0.getLineno());
468:       assertFalse(node0.isObjectLit());
469:       assertFalse(node0.isReturn());
470:       assertFalse(node0.isNot());
471:       assertFalse(node0.isComma());
472:       assertFalse(node0.isWhile());
473:       assertFalse(node0.isGetProp());
474:       assertFalse(node0.isVar());
475:       assertFalse(node0.isStringKey());
476:       assertFalse(node0.isBlock());
477:       assertFalse(node0.isNull());
478:       assertFalse(node0.isParamList());
479:       assertFalse(node0.isName());
480:       assertFalse(node0.isCall());
481:       assertEquals(0, node0.getChildCount());
482:       assertFalse(node0.isAssignAdd());
483:       assertFalse(node0.isContinue());
484:       assertEquals(40, node0.getType());
485:       assertFalse(node0.isOr());
486:       assertFalse(node0.isLabel());
487:       assertFalse(node0.isDefaultCase());
488:       assertFalse(node0.isAdd());
489:       assertFalse(node0.isSetterDef());
490:       assertFalse(node0.isDo());
491:       assertFalse(node0.isNew());
492:       assertFalse(node0.hasOneChild());
493:       assertEquals(153, node0.getCharno());
494:       assertFalse(node0.isFor());
495:       assertEquals(626841, node0.getSourcePosition());
496:       assertFalse(node0.isIf());
497:       assertFalse(node0.isRegExp());
498:       assertFalse(node0.isWith());
499:       assertFalse(node0.isNE());
500:       assertFalse(node0.isLabelName());
501:       assertFalse(node0.isArrayLit());
502:       assertFalse(node0.isInstanceOf());
503:       assertFalse(node0.isCatch());
504:       assertFalse(node0.hasMoreThanOneChild());
505:       assertFalse(node0.isThis());
506:       assertFalse(node0.isNumber());
507:       assertFalse(node0.isScript());
508:       assertFalse(node0.isGetterDef());
509:       assertFalse(node0.isTry());
510:       assertTrue(node0.isString());
511:       assertFalse(node0.isCase());
512:       assertFalse(boolean3);
513:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
514:       assertEquals(55, Node.INFERRED_FUNCTION);
515:       assertEquals(4095, Node.COLUMN_MASK);
516:       assertEquals(48, Node.DIRECTIVES);
517:       assertEquals(36, Node.QUOTED_PROP);
518:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
519:       assertEquals(43, Node.IS_CONSTANT_NAME);
520:       assertEquals(50, Node.FREE_CALL);
521:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
522:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
523:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
524:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
525:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
526:       assertEquals(12, Node.COLUMN_BITS);
527:       assertEquals(32, Node.INCRDECR_PROP);
528:       assertEquals(1, Node.DECR_FLAG);
529:       assertEquals(30, Node.VAR_ARGS_NAME);
530:       assertEquals(49, Node.DIRECT_EVAL);
531:       assertEquals(51, Node.STATIC_SOURCE_FILE);
532:       assertEquals(15, Node.NO_SIDE_EFFECTS);
533:       assertEquals(54, Node.SLASH_V);
534:       assertEquals(37, Node.OPT_ARG_NAME);
535:       assertEquals(56, Node.CHANGE_TIME);
536:       assertEquals(46, Node.IS_NAMESPACE);
537:       assertEquals(57, Node.REFLECTED_OBJECT);
538:       assertEquals(40, Node.ORIGINALNAME_PROP);
539:       assertEquals(29, Node.JSDOC_INFO_PROP);
540:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
541:       assertEquals(52, Node.LENGTH);
542:       assertEquals(8, Node.FLAG_NO_THROWS);
543:       assertEquals(53, Node.INPUT_ID);
544:       assertEquals(2, Node.POST_FLAG);
545:       assertEquals(39, Node.EMPTY_BLOCK);
546:       assertEquals(57, Node.LAST_PROP);
547:       assertEquals(47, Node.IS_DISPATCHER);
548:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
549:       assertTrue(boolean3 == boolean1);
550:       assertTrue(boolean3 == boolean0);
551:       assertTrue(boolean3 == boolean2);
552:       
553:       Node node1 = new Node(0, node0, node0, node0, 1837, 47);
554:       assertFalse(node0.isHook());
555:       assertFalse(node0.isFalse());
556:       assertFalse(node0.isThrow());
557:       assertFalse(node0.isSwitch());
558:       assertFalse(node0.isBreak());
559:       assertFalse(node0.isIn());
560:       assertFalse(node0.isEmpty());
561:       assertFalse(node0.isInc());
562:       assertFalse(node0.isCast());
563:       assertFalse(node0.isTrue());
564:       assertFalse(node0.isAssign());
565:       assertFalse(node0.hasChildren());
566:       assertFalse(node0.isDebugger());
567:       assertFalse(node0.isDec());
568:       assertFalse(node0.isTypeOf());
569:       assertFalse(node0.isDelProp());
570:       assertFalse(node0.isFunction());
571:       assertFalse(node0.isGetElem());
572:       assertFalse(node0.isExprResult());
573:       assertFalse(node0.isVoid());
574:       assertFalse(node0.isAnd());
575:       assertEquals(153, node0.getLineno());
576:       assertFalse(node0.isObjectLit());
577:       assertFalse(node0.isReturn());
578:       assertFalse(node0.isNot());
579:       assertFalse(node0.isComma());
580:       assertFalse(node0.isWhile());
581:       assertFalse(node0.isGetProp());
582:       assertFalse(node0.isVar());
583:       assertFalse(node0.isStringKey());
584:       assertFalse(node0.isBlock());
585:       assertFalse(node0.isNull());
586:       assertFalse(node0.isParamList());
587:       assertFalse(node0.isName());
588:       assertFalse(node0.isCall());
589:       assertEquals(0, node0.getChildCount());
590:       assertFalse(node0.isAssignAdd());
591:       assertFalse(node0.isContinue());
592:       assertEquals(40, node0.getType());
593:       assertFalse(node0.isOr());
594:       assertFalse(node0.isLabel());
595:       assertFalse(node0.isDefaultCase());
596:       assertFalse(node0.isAdd());
597:       assertFalse(node0.isSetterDef());
598:       assertFalse(node0.isDo());
599:       assertFalse(node0.isNew());
600:       assertFalse(node0.hasOneChild());
601:       assertEquals(153, node0.getCharno());
602:       assertFalse(node0.isFor());
603:       assertEquals(626841, node0.getSourcePosition());
604:       assertFalse(node0.isIf());
605:       assertFalse(node0.isRegExp());
606:       assertFalse(node0.isWith());
607:       assertFalse(node0.isNE());
608:       assertFalse(node0.isLabelName());
609:       assertFalse(node0.isArrayLit());
610:       assertFalse(node0.isInstanceOf());
611:       assertFalse(node0.isCatch());
612:       assertFalse(node0.hasMoreThanOneChild());
613:       assertFalse(node0.isThis());
614:       assertFalse(node0.isNumber());
615:       assertFalse(node0.isScript());
616:       assertFalse(node0.isGetterDef());
617:       assertFalse(node0.isTry());
618:       assertTrue(node0.isString());
619:       assertFalse(node0.isCase());
620:       assertFalse(node1.isStringKey());
621:       assertFalse(node1.isVar());
622:       assertFalse(node1.isCall());
623:       assertFalse(node1.isParamList());
624:       assertFalse(node1.isNull());
625:       assertFalse(node1.isName());
626:       assertFalse(node1.isContinue());
627:       assertFalse(node1.isOr());
628:       assertFalse(node1.isLabel());
629:       assertFalse(node1.isSetterDef());
630:       assertFalse(node1.isAdd());
631:       assertFalse(node1.isAssignAdd());
632:       assertFalse(node1.isDo());
633:       assertFalse(node1.isNew());
634:       assertEquals(1837, node1.getLineno());
635:       assertFalse(node1.isDefaultCase());
636:       assertFalse(node1.isCast());
637:       assertFalse(node1.isGetElem());
638:       assertFalse(node1.isEmpty());
639:       assertTrue(node1.hasOneChild());
640:       assertFalse(node1.isAssign());
641:       assertFalse(node1.isDec());
642:       assertFalse(node1.isTypeOf());
643:       assertFalse(node1.isFunction());
644:       assertFalse(node1.isDebugger());
645:       assertFalse(node1.isExprResult());
646:       assertFalse(node1.isTrue());
647:       assertFalse(node1.isDelProp());
648:       assertFalse(node1.isVoid());
649:       assertFalse(node1.isAnd());
650:       assertFalse(node1.isReturn());
651:       assertFalse(node1.isNot());
652:       assertFalse(node1.isString());
653:       assertFalse(node1.isObjectLit());
654:       assertFalse(node1.isComma());
655:       assertEquals(47, node1.getCharno());
656:       assertFalse(node1.isGetProp());
657:       assertFalse(node1.isWhile());
658:       assertFalse(node1.isThrow());
659:       assertFalse(node1.isHook());
660:       assertFalse(node1.isFalse());
661:       assertFalse(node1.isSwitch());
662:       assertEquals(0, node1.getType());
663:       assertFalse(node1.isBreak());
664:       assertEquals(7524399, node1.getSourcePosition());
665:       assertFalse(node1.isIn());
666:       assertFalse(node1.isInc());
667:       assertFalse(node1.isArrayLit());
668:       assertFalse(node1.isFor());
669:       assertFalse(node1.isNumber());
670:       assertFalse(node1.isGetterDef());
671:       assertFalse(node1.isNE());
672:       assertFalse(node1.isLabelName());
673:       assertFalse(node1.isIf());
674:       assertFalse(node1.isCatch());
675:       assertFalse(node1.hasMoreThanOneChild());
676:       assertFalse(node1.isInstanceOf());
677:       assertFalse(node1.isWith());
678:       assertTrue(node1.hasChildren());
679:       assertEquals(1, node1.getChildCount());
680:       assertFalse(node1.isRegExp());
681:       assertFalse(node1.isThis());
682:       assertFalse(node1.isScript());
683:       assertFalse(node1.isBlock());
684:       assertFalse(node1.isCase());
685:       assertFalse(node1.isTry());
686:       assertNotNull(node1);
687:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
688:       assertEquals(55, Node.INFERRED_FUNCTION);
689:       assertEquals(4095, Node.COLUMN_MASK);
690:       assertEquals(48, Node.DIRECTIVES);
691:       assertEquals(36, Node.QUOTED_PROP);
692:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
693:       assertEquals(43, Node.IS_CONSTANT_NAME);
694:       assertEquals(50, Node.FREE_CALL);
695:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
696:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
697:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
698:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
699:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
700:       assertEquals(12, Node.COLUMN_BITS);
701:       assertEquals(32, Node.INCRDECR_PROP);
702:       assertEquals(1, Node.DECR_FLAG);
703:       assertEquals(30, Node.VAR_ARGS_NAME);
704:       assertEquals(49, Node.DIRECT_EVAL);
705:       assertEquals(51, Node.STATIC_SOURCE_FILE);
706:       assertEquals(15, Node.NO_SIDE_EFFECTS);
707:       assertEquals(54, Node.SLASH_V);
708:       assertEquals(37, Node.OPT_ARG_NAME);
709:       assertEquals(56, Node.CHANGE_TIME);
710:       assertEquals(46, Node.IS_NAMESPACE);
711:       assertEquals(57, Node.REFLECTED_OBJECT);
712:       assertEquals(40, Node.ORIGINALNAME_PROP);
713:       assertEquals(29, Node.JSDOC_INFO_PROP);
714:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
715:       assertEquals(52, Node.LENGTH);
716:       assertEquals(8, Node.FLAG_NO_THROWS);
717:       assertEquals(53, Node.INPUT_ID);
718:       assertEquals(2, Node.POST_FLAG);
719:       assertEquals(39, Node.EMPTY_BLOCK);
720:       assertEquals(57, Node.LAST_PROP);
721:       assertEquals(47, Node.IS_DISPATCHER);
722:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
723:       assertEquals(55, Node.INFERRED_FUNCTION);
724:       assertEquals(4095, Node.COLUMN_MASK);
725:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
726:       assertEquals(53, Node.INPUT_ID);
727:       assertEquals(48, Node.DIRECTIVES);
728:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
729:       assertEquals(43, Node.IS_CONSTANT_NAME);
730:       assertEquals(36, Node.QUOTED_PROP);
731:       assertEquals(50, Node.FREE_CALL);
732:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
733:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
734:       assertEquals(37, Node.OPT_ARG_NAME);
735:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
736:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
737:       assertEquals(32, Node.INCRDECR_PROP);
738:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
739:       assertEquals(12, Node.COLUMN_BITS);
740:       assertEquals(30, Node.VAR_ARGS_NAME);
741:       assertEquals(49, Node.DIRECT_EVAL);
742:       assertEquals(57, Node.LAST_PROP);
743:       assertEquals(1, Node.DECR_FLAG);
744:       assertEquals(15, Node.NO_SIDE_EFFECTS);
745:       assertEquals(52, Node.LENGTH);
746:       assertEquals(56, Node.CHANGE_TIME);
747:       assertEquals(51, Node.STATIC_SOURCE_FILE);
748:       assertEquals(54, Node.SLASH_V);
749:       assertEquals(46, Node.IS_NAMESPACE);
750:       assertEquals(57, Node.REFLECTED_OBJECT);
751:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
752:       assertEquals(29, Node.JSDOC_INFO_PROP);
753:       assertEquals(8, Node.FLAG_NO_THROWS);
754:       assertEquals(39, Node.EMPTY_BLOCK);
755:       assertEquals(40, Node.ORIGINALNAME_PROP);
756:       assertEquals(2, Node.POST_FLAG);
757:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
758:       assertEquals(47, Node.IS_DISPATCHER);
759:       assertFalse(node1.equals((Object)node0));
760:       
761:       Iterable<Node> iterable0 = node0.children();
762:       assertFalse(node0.isHook());
763:       assertFalse(node0.isFalse());
764:       assertFalse(node0.isThrow());
765:       assertFalse(node0.isSwitch());
766:       assertFalse(node0.isBreak());
767:       assertFalse(node0.isIn());
768:       assertFalse(node0.isEmpty());
769:       assertFalse(node0.isInc());
770:       assertFalse(node0.isCast());
771:       assertFalse(node0.isTrue());
772:       assertFalse(node0.isAssign());
773:       assertFalse(node0.hasChildren());
774:       assertFalse(node0.isDebugger());
775:       assertFalse(node0.isDec());
776:       assertFalse(node0.isTypeOf());
777:       assertFalse(node0.isDelProp());
778:       assertFalse(node0.isFunction());
779:       assertFalse(node0.isGetElem());
780:       assertFalse(node0.isExprResult());
781:       assertFalse(node0.isVoid());
782:       assertFalse(node0.isAnd());
783:       assertEquals(153, node0.getLineno());
784:       assertFalse(node0.isObjectLit());
785:       assertFalse(node0.isReturn());
786:       assertFalse(node0.isNot());
787:       assertFalse(node0.isComma());
788:       assertFalse(node0.isWhile());
789:       assertFalse(node0.isGetProp());
790:       assertFalse(node0.isVar());
791:       assertFalse(node0.isStringKey());
792:       assertFalse(node0.isBlock());
793:       assertFalse(node0.isNull());
794:       assertFalse(node0.isParamList());
795:       assertFalse(node0.isName());
796:       assertFalse(node0.isCall());
797:       assertEquals(0, node0.getChildCount());
798:       assertFalse(node0.isAssignAdd());
799:       assertFalse(node0.isContinue());
800:       assertEquals(40, node0.getType());
801:       assertFalse(node0.isOr());
802:       assertFalse(node0.isLabel());
803:       assertFalse(node0.isDefaultCase());
804:       assertFalse(node0.isAdd());
805:       assertFalse(node0.isSetterDef());
806:       assertFalse(node0.isDo());
807:       assertFalse(node0.isNew());
808:       assertFalse(node0.hasOneChild());
809:       assertEquals(153, node0.getCharno());
810:       assertFalse(node0.isFor());
811:       assertEquals(626841, node0.getSourcePosition());
812:       assertFalse(node0.isIf());
813:       assertFalse(node0.isRegExp());
814:       assertFalse(node0.isWith());
815:       assertFalse(node0.isNE());
816:       assertFalse(node0.isLabelName());
817:       assertFalse(node0.isArrayLit());
818:       assertFalse(node0.isInstanceOf());
819:       assertFalse(node0.isCatch());
820:       assertFalse(node0.hasMoreThanOneChild());
821:       assertFalse(node0.isThis());
822:       assertFalse(node0.isNumber());
823:       assertFalse(node0.isScript());
824:       assertFalse(node0.isGetterDef());
825:       assertFalse(node0.isTry());
826:       assertTrue(node0.isString());
827:       assertFalse(node0.isCase());
828:       assertNotNull(iterable0);
829:       assertFalse(iterable0.contains(node0));
830:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
831:       assertEquals(55, Node.INFERRED_FUNCTION);
832:       assertEquals(4095, Node.COLUMN_MASK);
833:       assertEquals(48, Node.DIRECTIVES);
834:       assertEquals(36, Node.QUOTED_PROP);
835:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
836:       assertEquals(43, Node.IS_CONSTANT_NAME);
837:       assertEquals(50, Node.FREE_CALL);
838:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
839:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
840:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
841:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
842:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
843:       assertEquals(12, Node.COLUMN_BITS);
844:       assertEquals(32, Node.INCRDECR_PROP);
845:       assertEquals(1, Node.DECR_FLAG);
846:       assertEquals(30, Node.VAR_ARGS_NAME);
847:       assertEquals(49, Node.DIRECT_EVAL);
848:       assertEquals(51, Node.STATIC_SOURCE_FILE);
849:       assertEquals(15, Node.NO_SIDE_EFFECTS);
850:       assertEquals(54, Node.SLASH_V);
851:       assertEquals(37, Node.OPT_ARG_NAME);
852:       assertEquals(56, Node.CHANGE_TIME);
853:       assertEquals(46, Node.IS_NAMESPACE);
854:       assertEquals(57, Node.REFLECTED_OBJECT);
855:       assertEquals(40, Node.ORIGINALNAME_PROP);
856:       assertEquals(29, Node.JSDOC_INFO_PROP);
857:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
858:       assertEquals(52, Node.LENGTH);
859:       assertEquals(8, Node.FLAG_NO_THROWS);
860:       assertEquals(53, Node.INPUT_ID);
861:       assertEquals(2, Node.POST_FLAG);
862:       assertEquals(39, Node.EMPTY_BLOCK);
863:       assertEquals(57, Node.LAST_PROP);
864:       assertEquals(47, Node.IS_DISPATCHER);
865:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
866:       assertFalse(node0.equals((Object)node1));
867:       
868:       Node node2 = node0.copyInformationFromForTree(node1);
869:       assertSame(node0, node2);
870:       assertSame(node2, node0);
871:       assertFalse(node0.isHook());
872:       assertFalse(node0.isFalse());
873:       assertFalse(node0.isThrow());
874:       assertFalse(node0.isSwitch());
875:       assertFalse(node0.isBreak());
876:       assertFalse(node0.isIn());
877:       assertFalse(node0.isEmpty());
878:       assertFalse(node0.isInc());
879:       assertFalse(node0.isCast());
880:       assertFalse(node0.isTrue());
881:       assertFalse(node0.isAssign());
882:       assertFalse(node0.hasChildren());
883:       assertFalse(node0.isDebugger());
884:       assertFalse(node0.isDec());
885:       assertFalse(node0.isTypeOf());
886:       assertFalse(node0.isDelProp());
887:       assertFalse(node0.isFunction());
888:       assertFalse(node0.isGetElem());
889:       assertFalse(node0.isExprResult());
890:       assertFalse(node0.isVoid());
891:       assertFalse(node0.isAnd());
892:       assertFalse(node0.isObjectLit());
893:       assertFalse(node0.isReturn());
894:       assertFalse(node0.isNot());
895:       assertFalse(node0.isComma());
896:       assertEquals(47, node0.getCharno());
897:       assertFalse(node0.isWhile());
898:       assertFalse(node0.isGetProp());
899:       assertEquals(1837, node0.getLineno());
900:       assertFalse(node0.isVar());
901:       assertFalse(node0.isStringKey());
902:       assertFalse(node0.isBlock());
903:       assertFalse(node0.isNull());
904:       assertFalse(node0.isParamList());
905:       assertFalse(node0.isName());
906:       assertFalse(node0.isCall());
907:       assertEquals(0, node0.getChildCount());
908:       assertFalse(node0.isAssignAdd());
909:       assertFalse(node0.isContinue());
910:       assertEquals(40, node0.getType());
911:       assertFalse(node0.isOr());
912:       assertFalse(node0.isLabel());
913:       assertFalse(node0.isDefaultCase());
914:       assertFalse(node0.isAdd());
915:       assertFalse(node0.isSetterDef());
916:       assertFalse(node0.isDo());
917:       assertFalse(node0.isNew());
918:       assertFalse(node0.hasOneChild());
919:       assertFalse(node0.isFor());
920:       assertFalse(node0.isIf());
921:       assertFalse(node0.isRegExp());
922:       assertFalse(node0.isWith());
923:       assertFalse(node0.isNE());
924:       assertFalse(node0.isLabelName());
925:       assertEquals(7524399, node0.getSourcePosition());
926:       assertFalse(node0.isArrayLit());
927:       assertFalse(node0.isInstanceOf());
928:       assertFalse(node0.isCatch());
929:       assertFalse(node0.hasMoreThanOneChild());
930:       assertFalse(node0.isThis());
931:       assertFalse(node0.isNumber());
932:       assertFalse(node0.isScript());
933:       assertFalse(node0.isGetterDef());
934:       assertFalse(node0.isTry());
935:       assertTrue(node0.isString());
936:       assertFalse(node0.isCase());
937:       assertFalse(node1.isStringKey());
938:       assertFalse(node1.isVar());
939:       assertFalse(node1.isCall());
940:       assertFalse(node1.isParamList());
941:       assertFalse(node1.isNull());
942:       assertFalse(node1.isName());
943:       assertFalse(node1.isContinue());
944:       assertFalse(node1.isOr());
945:       assertFalse(node1.isLabel());
946:       assertFalse(node1.isSetterDef());
947:       assertFalse(node1.isAdd());
948:       assertFalse(node1.isAssignAdd());
949:       assertFalse(node1.isDo());
950:       assertFalse(node1.isNew());
951:       assertEquals(1837, node1.getLineno());
952:       assertFalse(node1.isDefaultCase());
953:       assertFalse(node1.isCast());
954:       assertFalse(node1.isGetElem());
955:       assertFalse(node1.isEmpty());
956:       assertTrue(node1.hasOneChild());
957:       assertFalse(node1.isAssign());
958:       assertFalse(node1.isDec());
959:       assertFalse(node1.isTypeOf());
960:       assertFalse(node1.isFunction());
961:       assertFalse(node1.isDebugger());
962:       assertFalse(node1.isExprResult());
963:       assertFalse(node1.isTrue());
964:       assertFalse(node1.isDelProp());
965:       assertFalse(node1.isVoid());
966:       assertFalse(node1.isAnd());
967:       assertFalse(node1.isReturn());
968:       assertFalse(node1.isNot());
969:       assertFalse(node1.isString());
970:       assertFalse(node1.isObjectLit());
971:       assertFalse(node1.isComma());
972:       assertEquals(47, node1.getCharno());
973:       assertFalse(node1.isGetProp());
974:       assertFalse(node1.isWhile());
975:       assertFalse(node1.isThrow());
976:       assertFalse(node1.isHook());
977:       assertFalse(node1.isFalse());
978:       assertFalse(node1.isSwitch());
979:       assertEquals(0, node1.getType());
980:       assertFalse(node1.isBreak());
981:       assertEquals(7524399, node1.getSourcePosition());
982:       assertFalse(node1.isIn());
983:       assertFalse(node1.isInc());
984:       assertFalse(node1.isArrayLit());
985:       assertFalse(node1.isFor());
986:       assertFalse(node1.isNumber());
987:       assertFalse(node1.isGetterDef());
988:       assertFalse(node1.isNE());
989:       assertFalse(node1.isLabelName());
990:       assertFalse(node1.isIf());
991:       assertFalse(node1.isCatch());
992:       assertFalse(node1.hasMoreThanOneChild());
993:       assertFalse(node1.isInstanceOf());
994:       assertFalse(node1.isWith());
995:       assertTrue(node1.hasChildren());
996:       assertEquals(1, node1.getChildCount());
997:       assertFalse(node1.isRegExp());
998:       assertFalse(node1.isThis());
999:       assertFalse(node1.isScript());
1000:       assertFalse(node1.isBlock());
1001:       assertFalse(node1.isCase());
1002:       assertFalse(node1.isTry());
1003:       assertFalse(node2.isCall());
1004:       assertFalse(node2.isName());
1005:       assertEquals(1837, node2.getLineno());
1006:       assertFalse(node2.isBlock());
1007:       assertFalse(node2.isNull());
1008:       assertFalse(node2.isStringKey());
1009:       assertFalse(node2.isVar());
1010:       assertEquals(47, node2.getCharno());
1011:       assertFalse(node2.isParamList());
1012:       assertFalse(node2.isCatch());
1013:       assertFalse(node2.isContinue());
1014:       assertEquals(0, node2.getChildCount());
1015:       assertFalse(node2.isDo());
1016:       assertFalse(node2.isDefaultCase());
1017:       assertFalse(node2.isAssignAdd());
1018:       assertEquals(40, node2.getType());
1019:       assertFalse(node2.isTrue());
1020:       assertFalse(node2.isSetterDef());
1021:       assertFalse(node2.isNew());
1022:       assertFalse(node2.isOr());
1023:       assertFalse(node2.isAdd());
1024:       assertFalse(node2.isArrayLit());
1025:       assertFalse(node2.hasOneChild());
1026:       assertFalse(node2.isLabelName());
1027:       assertFalse(node2.isIf());
1028:       assertFalse(node2.isFor());
1029:       assertFalse(node2.isNE());
1030:       assertFalse(node2.isLabel());
1031:       assertFalse(node2.isRegExp());
1032:       assertFalse(node2.isWith());
1033:       assertEquals(7524399, node2.getSourcePosition());
1034:       assertFalse(node2.hasMoreThanOneChild());
1035:       assertFalse(node2.isCase());
1036:       assertTrue(node2.isString());
1037:       assertFalse(node2.isTry());
1038:       assertFalse(node2.isGetterDef());
1039:       assertFalse(node2.isNumber());
1040:       assertFalse(node2.isScript());
1041:       assertFalse(node2.isFalse());
1042:       assertFalse(node2.isHook());
1043:       assertFalse(node2.isThrow());
1044:       assertFalse(node2.isThis());
1045:       assertFalse(node2.isSwitch());
1046:       assertFalse(node2.isComma());
1047:       assertFalse(node2.isBreak());
1048:       assertFalse(node2.isInstanceOf());
1049:       assertFalse(node2.isInc());
1050:       assertFalse(node2.isIn());
1051:       assertFalse(node2.isEmpty());
1052:       assertFalse(node2.isAssign());
1053:       assertFalse(node2.isDelProp());
1054:       assertFalse(node2.hasChildren());
1055:       assertFalse(node2.isExprResult());
1056:       assertFalse(node2.isFunction());
1057:       assertFalse(node2.isVoid());
1058:       assertFalse(node2.isTypeOf());
1059:       assertFalse(node2.isDec());
1060:       assertFalse(node2.isGetElem());
1061:       assertFalse(node2.isCast());
1062:       assertFalse(node2.isAnd());
1063:       assertFalse(node2.isObjectLit());
1064:       assertFalse(node2.isNot());
1065:       assertFalse(node2.isWhile());
1066:       assertFalse(node2.isReturn());
1067:       assertFalse(node2.isDebugger());
1068:       assertFalse(node2.isGetProp());
1069:       assertNotNull(node2);
1070:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1071:       assertEquals(55, Node.INFERRED_FUNCTION);
1072:       assertEquals(4095, Node.COLUMN_MASK);
1073:       assertEquals(48, Node.DIRECTIVES);
1074:       assertEquals(36, Node.QUOTED_PROP);
1075:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1076:       assertEquals(43, Node.IS_CONSTANT_NAME);
1077:       assertEquals(50, Node.FREE_CALL);
1078:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1079:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1080:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1081:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1082:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1083:       assertEquals(12, Node.COLUMN_BITS);
1084:       assertEquals(32, Node.INCRDECR_PROP);
1085:       assertEquals(1, Node.DECR_FLAG);
1086:       assertEquals(30, Node.VAR_ARGS_NAME);
1087:       assertEquals(49, Node.DIRECT_EVAL);
1088:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1089:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1090:       assertEquals(54, Node.SLASH_V);
1091:       assertEquals(37, Node.OPT_ARG_NAME);
1092:       assertEquals(56, Node.CHANGE_TIME);
1093:       assertEquals(46, Node.IS_NAMESPACE);
1094:       assertEquals(57, Node.REFLECTED_OBJECT);
1095:       assertEquals(40, Node.ORIGINALNAME_PROP);
1096:       assertEquals(29, Node.JSDOC_INFO_PROP);
1097:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1098:       assertEquals(52, Node.LENGTH);
1099:       assertEquals(8, Node.FLAG_NO_THROWS);
1100:       assertEquals(53, Node.INPUT_ID);
1101:       assertEquals(2, Node.POST_FLAG);
1102:       assertEquals(39, Node.EMPTY_BLOCK);
1103:       assertEquals(57, Node.LAST_PROP);
1104:       assertEquals(47, Node.IS_DISPATCHER);
1105:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1106:       assertEquals(55, Node.INFERRED_FUNCTION);
1107:       assertEquals(4095, Node.COLUMN_MASK);
1108:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1109:       assertEquals(53, Node.INPUT_ID);
1110:       assertEquals(48, Node.DIRECTIVES);
1111:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1112:       assertEquals(43, Node.IS_CONSTANT_NAME);
1113:       assertEquals(36, Node.QUOTED_PROP);
1114:       assertEquals(50, Node.FREE_CALL);
1115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1116:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1117:       assertEquals(37, Node.OPT_ARG_NAME);
1118:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1119:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1120:       assertEquals(32, Node.INCRDECR_PROP);
1121:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1122:       assertEquals(12, Node.COLUMN_BITS);
1123:       assertEquals(30, Node.VAR_ARGS_NAME);
1124:       assertEquals(49, Node.DIRECT_EVAL);
1125:       assertEquals(57, Node.LAST_PROP);
1126:       assertEquals(1, Node.DECR_FLAG);
1127:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1128:       assertEquals(52, Node.LENGTH);
1129:       assertEquals(56, Node.CHANGE_TIME);
1130:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1131:       assertEquals(54, Node.SLASH_V);
1132:       assertEquals(46, Node.IS_NAMESPACE);
1133:       assertEquals(57, Node.REFLECTED_OBJECT);
1134:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1135:       assertEquals(29, Node.JSDOC_INFO_PROP);
1136:       assertEquals(8, Node.FLAG_NO_THROWS);
1137:       assertEquals(39, Node.EMPTY_BLOCK);
1138:       assertEquals(40, Node.ORIGINALNAME_PROP);
1139:       assertEquals(2, Node.POST_FLAG);
1140:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1141:       assertEquals(47, Node.IS_DISPATCHER);
1142:       assertEquals(43, Node.IS_CONSTANT_NAME);
1143:       assertEquals(36, Node.QUOTED_PROP);
1144:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1145:       assertEquals(4095, Node.COLUMN_MASK);
1146:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1147:       assertEquals(48, Node.DIRECTIVES);
1148:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1149:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1150:       assertEquals(50, Node.FREE_CALL);
1151:       assertEquals(32, Node.INCRDECR_PROP);
1152:       assertEquals(12, Node.COLUMN_BITS);
1153:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1154:       assertEquals(1, Node.DECR_FLAG);
1155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1156:       assertEquals(57, Node.LAST_PROP);
1157:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1159:       assertEquals(30, Node.VAR_ARGS_NAME);
1160:       assertEquals(57, Node.REFLECTED_OBJECT);
1161:       assertEquals(46, Node.IS_NAMESPACE);
1162:       assertEquals(54, Node.SLASH_V);
1163:       assertEquals(40, Node.ORIGINALNAME_PROP);
1164:       assertEquals(37, Node.OPT_ARG_NAME);
1165:       assertEquals(49, Node.DIRECT_EVAL);
1166:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1167:       assertEquals(47, Node.IS_DISPATCHER);
1168:       assertEquals(56, Node.CHANGE_TIME);
1169:       assertEquals(29, Node.JSDOC_INFO_PROP);
1170:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1171:       assertEquals(8, Node.FLAG_NO_THROWS);
1172:       assertEquals(2, Node.POST_FLAG);
1173:       assertEquals(52, Node.LENGTH);
1174:       assertEquals(53, Node.INPUT_ID);
1175:       assertEquals(55, Node.INFERRED_FUNCTION);
1176:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1177:       assertEquals(39, Node.EMPTY_BLOCK);
1178:       assertFalse(node0.equals((Object)node1));
1179:       assertFalse(node1.equals((Object)node0));
1180:       assertFalse(node2.equals((Object)node1));
1181:       
1182:       Node node3 = node1.getChildBefore(node2);
1183:       assertSame(node0, node2);
1184:       assertSame(node2, node0);
1185:       assertFalse(node0.isHook());
1186:       assertFalse(node0.isFalse());
1187:       assertFalse(node0.isThrow());
1188:       assertFalse(node0.isSwitch());
1189:       assertFalse(node0.isBreak());
1190:       assertFalse(node0.isIn());
1191:       assertFalse(node0.isEmpty());
1192:       assertFalse(node0.isInc());
1193:       assertFalse(node0.isCast());
1194:       assertFalse(node0.isTrue());
1195:       assertFalse(node0.isAssign());
1196:       assertFalse(node0.hasChildren());
1197:       assertFalse(node0.isDebugger());
1198:       assertFalse(node0.isDec());
1199:       assertFalse(node0.isTypeOf());
1200:       assertFalse(node0.isDelProp());
1201:       assertFalse(node0.isFunction());
1202:       assertFalse(node0.isGetElem());
1203:       assertFalse(node0.isExprResult());
1204:       assertFalse(node0.isVoid());
1205:       assertFalse(node0.isAnd());
1206:       assertFalse(node0.isObjectLit());
1207:       assertFalse(node0.isReturn());
1208:       assertFalse(node0.isNot());
1209:       assertFalse(node0.isComma());
1210:       assertEquals(47, node0.getCharno());
1211:       assertFalse(node0.isWhile());
1212:       assertFalse(node0.isGetProp());
1213:       assertEquals(1837, node0.getLineno());
1214:       assertFalse(node0.isVar());
1215:       assertFalse(node0.isStringKey());
1216:       assertFalse(node0.isBlock());
1217:       assertFalse(node0.isNull());
1218:       assertFalse(node0.isParamList());
1219:       assertFalse(node0.isName());
1220:       assertFalse(node0.isCall());
1221:       assertEquals(0, node0.getChildCount());
1222:       assertFalse(node0.isAssignAdd());
1223:       assertFalse(node0.isContinue());
1224:       assertEquals(40, node0.getType());
1225:       assertFalse(node0.isOr());
1226:       assertFalse(node0.isLabel());
1227:       assertFalse(node0.isDefaultCase());
1228:       assertFalse(node0.isAdd());
1229:       assertFalse(node0.isSetterDef());
1230:       assertFalse(node0.isDo());
1231:       assertFalse(node0.isNew());
1232:       assertFalse(node0.hasOneChild());
1233:       assertFalse(node0.isFor());
1234:       assertFalse(node0.isIf());
1235:       assertFalse(node0.isRegExp());
1236:       assertFalse(node0.isWith());
1237:       assertFalse(node0.isNE());
1238:       assertFalse(node0.isLabelName());
1239:       assertEquals(7524399, node0.getSourcePosition());
1240:       assertFalse(node0.isArrayLit());
1241:       assertFalse(node0.isInstanceOf());
1242:       assertFalse(node0.isCatch());
1243:       assertFalse(node0.hasMoreThanOneChild());
1244:       assertFalse(node0.isThis());
1245:       assertFalse(node0.isNumber());
1246:       assertFalse(node0.isScript());
1247:       assertFalse(node0.isGetterDef());
1248:       assertFalse(node0.isTry());
1249:       assertTrue(node0.isString());
1250:       assertFalse(node0.isCase());
1251:       assertFalse(node1.isStringKey());
1252:       assertFalse(node1.isVar());
1253:       assertFalse(node1.isCall());
1254:       assertFalse(node1.isParamList());
1255:       assertFalse(node1.isNull());
1256:       assertFalse(node1.isName());
1257:       assertFalse(node1.isContinue());
1258:       assertFalse(node1.isOr());
1259:       assertFalse(node1.isLabel());
1260:       assertFalse(node1.isSetterDef());
1261:       assertFalse(node1.isAdd());
1262:       assertFalse(node1.isAssignAdd());
1263:       assertFalse(node1.isDo());
1264:       assertFalse(node1.isNew());
1265:       assertEquals(1837, node1.getLineno());
1266:       assertFalse(node1.isDefaultCase());
1267:       assertFalse(node1.isCast());
1268:       assertFalse(node1.isGetElem());
1269:       assertFalse(node1.isEmpty());
1270:       assertTrue(node1.hasOneChild());
1271:       assertFalse(node1.isAssign());
1272:       assertFalse(node1.isDec());
1273:       assertFalse(node1.isTypeOf());
1274:       assertFalse(node1.isFunction());
1275:       assertFalse(node1.isDebugger());
1276:       assertFalse(node1.isExprResult());
1277:       assertFalse(node1.isTrue());
1278:       assertFalse(node1.isDelProp());
1279:       assertFalse(node1.isVoid());
1280:       assertFalse(node1.isAnd());
1281:       assertFalse(node1.isReturn());
1282:       assertFalse(node1.isNot());
1283:       assertFalse(node1.isString());
1284:       assertFalse(node1.isObjectLit());
1285:       assertFalse(node1.isComma());
1286:       assertEquals(47, node1.getCharno());
1287:       assertFalse(node1.isGetProp());
1288:       assertFalse(node1.isWhile());
1289:       assertFalse(node1.isThrow());
1290:       assertFalse(node1.isHook());
1291:       assertFalse(node1.isFalse());
1292:       assertFalse(node1.isSwitch());
1293:       assertEquals(0, node1.getType());
1294:       assertFalse(node1.isBreak());
1295:       assertEquals(7524399, node1.getSourcePosition());
1296:       assertFalse(node1.isIn());
1297:       assertFalse(node1.isInc());
1298:       assertFalse(node1.isArrayLit());
1299:       assertFalse(node1.isFor());
1300:       assertFalse(node1.isNumber());
1301:       assertFalse(node1.isGetterDef());
1302:       assertFalse(node1.isNE());
1303:       assertFalse(node1.isLabelName());
1304:       assertFalse(node1.isIf());
1305:       assertFalse(node1.isCatch());
1306:       assertFalse(node1.hasMoreThanOneChild());
1307:       assertFalse(node1.isInstanceOf());
1308:       assertFalse(node1.isWith());
1309:       assertTrue(node1.hasChildren());
1310:       assertEquals(1, node1.getChildCount());
1311:       assertFalse(node1.isRegExp());
1312:       assertFalse(node1.isThis());
1313:       assertFalse(node1.isScript());
1314:       assertFalse(node1.isBlock());
1315:       assertFalse(node1.isCase());
1316:       assertFalse(node1.isTry());
1317:       assertFalse(node2.isCall());
1318:       assertFalse(node2.isName());
1319:       assertEquals(1837, node2.getLineno());
1320:       assertFalse(node2.isBlock());
1321:       assertFalse(node2.isNull());
1322:       assertFalse(node2.isStringKey());
1323:       assertFalse(node2.isVar());
1324:       assertEquals(47, node2.getCharno());
1325:       assertFalse(node2.isParamList());
1326:       assertFalse(node2.isCatch());
1327:       assertFalse(node2.isContinue());
1328:       assertEquals(0, node2.getChildCount());
1329:       assertFalse(node2.isDo());
1330:       assertFalse(node2.isDefaultCase());
1331:       assertFalse(node2.isAssignAdd());
1332:       assertEquals(40, node2.getType());
1333:       assertFalse(node2.isTrue());
1334:       assertFalse(node2.isSetterDef());
1335:       assertFalse(node2.isNew());
1336:       assertFalse(node2.isOr());
1337:       assertFalse(node2.isAdd());
1338:       assertFalse(node2.isArrayLit());
1339:       assertFalse(node2.hasOneChild());
1340:       assertFalse(node2.isLabelName());
1341:       assertFalse(node2.isIf());
1342:       assertFalse(node2.isFor());
1343:       assertFalse(node2.isNE());
1344:       assertFalse(node2.isLabel());
1345:       assertFalse(node2.isRegExp());
1346:       assertFalse(node2.isWith());
1347:       assertEquals(7524399, node2.getSourcePosition());
1348:       assertFalse(node2.hasMoreThanOneChild());
1349:       assertFalse(node2.isCase());
1350:       assertTrue(node2.isString());
1351:       assertFalse(node2.isTry());
1352:       assertFalse(node2.isGetterDef());
1353:       assertFalse(node2.isNumber());
1354:       assertFalse(node2.isScript());
1355:       assertFalse(node2.isFalse());
1356:       assertFalse(node2.isHook());
1357:       assertFalse(node2.isThrow());
1358:       assertFalse(node2.isThis());
1359:       assertFalse(node2.isSwitch());
1360:       assertFalse(node2.isComma());
1361:       assertFalse(node2.isBreak());
1362:       assertFalse(node2.isInstanceOf());
1363:       assertFalse(node2.isInc());
1364:       assertFalse(node2.isIn());
1365:       assertFalse(node2.isEmpty());
1366:       assertFalse(node2.isAssign());
1367:       assertFalse(node2.isDelProp());
1368:       assertFalse(node2.hasChildren());
1369:       assertFalse(node2.isExprResult());
1370:       assertFalse(node2.isFunction());
1371:       assertFalse(node2.isVoid());
1372:       assertFalse(node2.isTypeOf());
1373:       assertFalse(node2.isDec());
1374:       assertFalse(node2.isGetElem());
1375:       assertFalse(node2.isCast());
1376:       assertFalse(node2.isAnd());
1377:       assertFalse(node2.isObjectLit());
1378:       assertFalse(node2.isNot());
1379:       assertFalse(node2.isWhile());
1380:       assertFalse(node2.isReturn());
1381:       assertFalse(node2.isDebugger());
1382:       assertFalse(node2.isGetProp());
1383:       assertNull(node3);
1384:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1385:       assertEquals(55, Node.INFERRED_FUNCTION);
1386:       assertEquals(4095, Node.COLUMN_MASK);
1387:       assertEquals(48, Node.DIRECTIVES);
1388:       assertEquals(36, Node.QUOTED_PROP);
1389:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1390:       assertEquals(43, Node.IS_CONSTANT_NAME);
1391:       assertEquals(50, Node.FREE_CALL);
1392:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1393:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1394:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1395:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1396:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1397:       assertEquals(12, Node.COLUMN_BITS);
1398:       assertEquals(32, Node.INCRDECR_PROP);
1399:       assertEquals(1, Node.DECR_FLAG);
1400:       assertEquals(30, Node.VAR_ARGS_NAME);
1401:       assertEquals(49, Node.DIRECT_EVAL);
1402:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1403:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1404:       assertEquals(54, Node.SLASH_V);
1405:       assertEquals(37, Node.OPT_ARG_NAME);
1406:       assertEquals(56, Node.CHANGE_TIME);
1407:       assertEquals(46, Node.IS_NAMESPACE);
1408:       assertEquals(57, Node.REFLECTED_OBJECT);
1409:       assertEquals(40, Node.ORIGINALNAME_PROP);
1410:       assertEquals(29, Node.JSDOC_INFO_PROP);
1411:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1412:       assertEquals(52, Node.LENGTH);
1413:       assertEquals(8, Node.FLAG_NO_THROWS);
1414:       assertEquals(53, Node.INPUT_ID);
1415:       assertEquals(2, Node.POST_FLAG);
1416:       assertEquals(39, Node.EMPTY_BLOCK);
1417:       assertEquals(57, Node.LAST_PROP);
1418:       assertEquals(47, Node.IS_DISPATCHER);
1419:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1420:       assertEquals(55, Node.INFERRED_FUNCTION);
1421:       assertEquals(4095, Node.COLUMN_MASK);
1422:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1423:       assertEquals(53, Node.INPUT_ID);
1424:       assertEquals(48, Node.DIRECTIVES);
1425:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1426:       assertEquals(43, Node.IS_CONSTANT_NAME);
1427:       assertEquals(36, Node.QUOTED_PROP);
1428:       assertEquals(50, Node.FREE_CALL);
1429:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1430:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1431:       assertEquals(37, Node.OPT_ARG_NAME);
1432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1433:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1434:       assertEquals(32, Node.INCRDECR_PROP);
1435:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1436:       assertEquals(12, Node.COLUMN_BITS);
1437:       assertEquals(30, Node.VAR_ARGS_NAME);
1438:       assertEquals(49, Node.DIRECT_EVAL);
1439:       assertEquals(57, Node.LAST_PROP);
1440:       assertEquals(1, Node.DECR_FLAG);
1441:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1442:       assertEquals(52, Node.LENGTH);
1443:       assertEquals(56, Node.CHANGE_TIME);
1444:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1445:       assertEquals(54, Node.SLASH_V);
1446:       assertEquals(46, Node.IS_NAMESPACE);
1447:       assertEquals(57, Node.REFLECTED_OBJECT);
1448:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1449:       assertEquals(29, Node.JSDOC_INFO_PROP);
1450:       assertEquals(8, Node.FLAG_NO_THROWS);
1451:       assertEquals(39, Node.EMPTY_BLOCK);
1452:       assertEquals(40, Node.ORIGINALNAME_PROP);
1453:       assertEquals(2, Node.POST_FLAG);
1454:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1455:       assertEquals(47, Node.IS_DISPATCHER);
1456:       assertEquals(43, Node.IS_CONSTANT_NAME);
1457:       assertEquals(36, Node.QUOTED_PROP);
1458:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1459:       assertEquals(4095, Node.COLUMN_MASK);
1460:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1461:       assertEquals(48, Node.DIRECTIVES);
1462:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1463:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1464:       assertEquals(50, Node.FREE_CALL);
1465:       assertEquals(32, Node.INCRDECR_PROP);
1466:       assertEquals(12, Node.COLUMN_BITS);
1467:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1468:       assertEquals(1, Node.DECR_FLAG);
1469:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1470:       assertEquals(57, Node.LAST_PROP);
1471:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1472:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1473:       assertEquals(30, Node.VAR_ARGS_NAME);
1474:       assertEquals(57, Node.REFLECTED_OBJECT);
1475:       assertEquals(46, Node.IS_NAMESPACE);
1476:       assertEquals(54, Node.SLASH_V);
1477:       assertEquals(40, Node.ORIGINALNAME_PROP);
1478:       assertEquals(37, Node.OPT_ARG_NAME);
1479:       assertEquals(49, Node.DIRECT_EVAL);
1480:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1481:       assertEquals(47, Node.IS_DISPATCHER);
1482:       assertEquals(56, Node.CHANGE_TIME);
1483:       assertEquals(29, Node.JSDOC_INFO_PROP);
1484:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1485:       assertEquals(8, Node.FLAG_NO_THROWS);
1486:       assertEquals(2, Node.POST_FLAG);
1487:       assertEquals(52, Node.LENGTH);
1488:       assertEquals(53, Node.INPUT_ID);
1489:       assertEquals(55, Node.INFERRED_FUNCTION);
1490:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1491:       assertEquals(39, Node.EMPTY_BLOCK);
1492:       assertFalse(node0.equals((Object)node1));
1493:       assertFalse(node1.equals((Object)node2));
1494:       assertFalse(node1.equals((Object)node0));
1495:       assertFalse(node2.equals((Object)node1));
1496:       
1497:       boolean boolean4 = node1.isOr();
1498:       assertSame(node0, node2);
1499:       assertFalse(node0.isHook());
1500:       assertFalse(node0.isFalse());
1501:       assertFalse(node0.isThrow());
1502:       assertFalse(node0.isSwitch());
1503:       assertFalse(node0.isBreak());
1504:       assertFalse(node0.isIn());
1505:       assertFalse(node0.isEmpty());
1506:       assertFalse(node0.isInc());
1507:       assertFalse(node0.isCast());
1508:       assertFalse(node0.isTrue());
1509:       assertFalse(node0.isAssign());
1510:       assertFalse(node0.hasChildren());
1511:       assertFalse(node0.isDebugger());
1512:       assertFalse(node0.isDec());
1513:       assertFalse(node0.isTypeOf());
1514:       assertFalse(node0.isDelProp());
1515:       assertFalse(node0.isFunction());
1516:       assertFalse(node0.isGetElem());
1517:       assertFalse(node0.isExprResult());
1518:       assertFalse(node0.isVoid());
1519:       assertFalse(node0.isAnd());
1520:       assertFalse(node0.isObjectLit());
1521:       assertFalse(node0.isReturn());
1522:       assertFalse(node0.isNot());
1523:       assertFalse(node0.isComma());
1524:       assertEquals(47, node0.getCharno());
1525:       assertFalse(node0.isWhile());
1526:       assertFalse(node0.isGetProp());
1527:       assertEquals(1837, node0.getLineno());
1528:       assertFalse(node0.isVar());
1529:       assertFalse(node0.isStringKey());
1530:       assertFalse(node0.isBlock());
1531:       assertFalse(node0.isNull());
1532:       assertFalse(node0.isParamList());
1533:       assertFalse(node0.isName());
1534:       assertFalse(node0.isCall());
1535:       assertEquals(0, node0.getChildCount());
1536:       assertFalse(node0.isAssignAdd());
1537:       assertFalse(node0.isContinue());
1538:       assertEquals(40, node0.getType());
1539:       assertFalse(node0.isOr());
1540:       assertFalse(node0.isLabel());
1541:       assertFalse(node0.isDefaultCase());
1542:       assertFalse(node0.isAdd());
1543:       assertFalse(node0.isSetterDef());
1544:       assertFalse(node0.isDo());
1545:       assertFalse(node0.isNew());
1546:       assertFalse(node0.hasOneChild());
1547:       assertFalse(node0.isFor());
1548:       assertFalse(node0.isIf());
1549:       assertFalse(node0.isRegExp());
1550:       assertFalse(node0.isWith());
1551:       assertFalse(node0.isNE());
1552:       assertFalse(node0.isLabelName());
1553:       assertEquals(7524399, node0.getSourcePosition());
1554:       assertFalse(node0.isArrayLit());
1555:       assertFalse(node0.isInstanceOf());
1556:       assertFalse(node0.isCatch());
1557:       assertFalse(node0.hasMoreThanOneChild());
1558:       assertFalse(node0.isThis());
1559:       assertFalse(node0.isNumber());
1560:       assertFalse(node0.isScript());
1561:       assertFalse(node0.isGetterDef());
1562:       assertFalse(node0.isTry());
1563:       assertTrue(node0.isString());
1564:       assertFalse(node0.isCase());
1565:       assertFalse(node1.isStringKey());
1566:       assertFalse(node1.isVar());
1567:       assertFalse(node1.isCall());
1568:       assertFalse(node1.isParamList());
1569:       assertFalse(node1.isNull());
1570:       assertFalse(node1.isName());
1571:       assertFalse(node1.isContinue());
1572:       assertFalse(node1.isOr());
1573:       assertFalse(node1.isLabel());
1574:       assertFalse(node1.isSetterDef());
1575:       assertFalse(node1.isAdd());
1576:       assertFalse(node1.isAssignAdd());
1577:       assertFalse(node1.isDo());
1578:       assertFalse(node1.isNew());
1579:       assertEquals(1837, node1.getLineno());
1580:       assertFalse(node1.isDefaultCase());
1581:       assertFalse(node1.isCast());
1582:       assertFalse(node1.isGetElem());
1583:       assertFalse(node1.isEmpty());
1584:       assertTrue(node1.hasOneChild());
1585:       assertFalse(node1.isAssign());
1586:       assertFalse(node1.isDec());
1587:       assertFalse(node1.isTypeOf());
1588:       assertFalse(node1.isFunction());
1589:       assertFalse(node1.isDebugger());
1590:       assertFalse(node1.isExprResult());
1591:       assertFalse(node1.isTrue());
1592:       assertFalse(node1.isDelProp());
1593:       assertFalse(node1.isVoid());
1594:       assertFalse(node1.isAnd());
1595:       assertFalse(node1.isReturn());
1596:       assertFalse(node1.isNot());
1597:       assertFalse(node1.isString());
1598:       assertFalse(node1.isObjectLit());
1599:       assertFalse(node1.isComma());
1600:       assertEquals(47, node1.getCharno());
1601:       assertFalse(node1.isGetProp());
1602:       assertFalse(node1.isWhile());
1603:       assertFalse(node1.isThrow());
1604:       assertFalse(node1.isHook());
1605:       assertFalse(node1.isFalse());
1606:       assertFalse(node1.isSwitch());
1607:       assertEquals(0, node1.getType());
1608:       assertFalse(node1.isBreak());
1609:       assertEquals(7524399, node1.getSourcePosition());
1610:       assertFalse(node1.isIn());
1611:       assertFalse(node1.isInc());
1612:       assertFalse(node1.isArrayLit());
1613:       assertFalse(node1.isFor());
1614:       assertFalse(node1.isNumber());
1615:       assertFalse(node1.isGetterDef());
1616:       assertFalse(node1.isNE());
1617:       assertFalse(node1.isLabelName());
1618:       assertFalse(node1.isIf());
1619:       assertFalse(node1.isCatch());
1620:       assertFalse(node1.hasMoreThanOneChild());
1621:       assertFalse(node1.isInstanceOf());
1622:       assertFalse(node1.isWith());
1623:       assertTrue(node1.hasChildren());
1624:       assertEquals(1, node1.getChildCount());
1625:       assertFalse(node1.isRegExp());
1626:       assertFalse(node1.isThis());
1627:       assertFalse(node1.isScript());
1628:       assertFalse(node1.isBlock());
1629:       assertFalse(node1.isCase());
1630:       assertFalse(node1.isTry());
1631:       assertFalse(boolean4);
1632:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1633:       assertEquals(55, Node.INFERRED_FUNCTION);
1634:       assertEquals(4095, Node.COLUMN_MASK);
1635:       assertEquals(48, Node.DIRECTIVES);
1636:       assertEquals(36, Node.QUOTED_PROP);
1637:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1638:       assertEquals(43, Node.IS_CONSTANT_NAME);
1639:       assertEquals(50, Node.FREE_CALL);
1640:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1641:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1642:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1643:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1644:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1645:       assertEquals(12, Node.COLUMN_BITS);
1646:       assertEquals(32, Node.INCRDECR_PROP);
1647:       assertEquals(1, Node.DECR_FLAG);
1648:       assertEquals(30, Node.VAR_ARGS_NAME);
1649:       assertEquals(49, Node.DIRECT_EVAL);
1650:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1651:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1652:       assertEquals(54, Node.SLASH_V);
1653:       assertEquals(37, Node.OPT_ARG_NAME);
1654:       assertEquals(56, Node.CHANGE_TIME);
1655:       assertEquals(46, Node.IS_NAMESPACE);
1656:       assertEquals(57, Node.REFLECTED_OBJECT);
1657:       assertEquals(40, Node.ORIGINALNAME_PROP);
1658:       assertEquals(29, Node.JSDOC_INFO_PROP);
1659:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1660:       assertEquals(52, Node.LENGTH);
1661:       assertEquals(8, Node.FLAG_NO_THROWS);
1662:       assertEquals(53, Node.INPUT_ID);
1663:       assertEquals(2, Node.POST_FLAG);
1664:       assertEquals(39, Node.EMPTY_BLOCK);
1665:       assertEquals(57, Node.LAST_PROP);
1666:       assertEquals(47, Node.IS_DISPATCHER);
1667:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1668:       assertEquals(55, Node.INFERRED_FUNCTION);
1669:       assertEquals(4095, Node.COLUMN_MASK);
1670:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1671:       assertEquals(53, Node.INPUT_ID);
1672:       assertEquals(48, Node.DIRECTIVES);
1673:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1674:       assertEquals(43, Node.IS_CONSTANT_NAME);
1675:       assertEquals(36, Node.QUOTED_PROP);
1676:       assertEquals(50, Node.FREE_CALL);
1677:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1678:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1679:       assertEquals(37, Node.OPT_ARG_NAME);
1680:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1681:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1682:       assertEquals(32, Node.INCRDECR_PROP);
1683:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1684:       assertEquals(12, Node.COLUMN_BITS);
1685:       assertEquals(30, Node.VAR_ARGS_NAME);
1686:       assertEquals(49, Node.DIRECT_EVAL);
1687:       assertEquals(57, Node.LAST_PROP);
1688:       assertEquals(1, Node.DECR_FLAG);
1689:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1690:       assertEquals(52, Node.LENGTH);
1691:       assertEquals(56, Node.CHANGE_TIME);
1692:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1693:       assertEquals(54, Node.SLASH_V);
1694:       assertEquals(46, Node.IS_NAMESPACE);
1695:       assertEquals(57, Node.REFLECTED_OBJECT);
1696:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1697:       assertEquals(29, Node.JSDOC_INFO_PROP);
1698:       assertEquals(8, Node.FLAG_NO_THROWS);
1699:       assertEquals(39, Node.EMPTY_BLOCK);
1700:       assertEquals(40, Node.ORIGINALNAME_PROP);
1701:       assertEquals(2, Node.POST_FLAG);
1702:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1703:       assertEquals(47, Node.IS_DISPATCHER);
1704:       assertFalse(node0.equals((Object)node1));
1705:       assertFalse(node1.equals((Object)node2));
1706:       assertFalse(node1.equals((Object)node0));
1707:       assertTrue(boolean4 == boolean3);
1708:       assertTrue(boolean4 == boolean1);
1709:       assertTrue(boolean4 == boolean0);
1710:       assertTrue(boolean4 == boolean2);
1711:       
1712:       boolean boolean5 = node1.isWith();
1713:       assertSame(node0, node2);
1714:       assertFalse(node0.isHook());
1715:       assertFalse(node0.isFalse());
1716:       assertFalse(node0.isThrow());
1717:       assertFalse(node0.isSwitch());
1718:       assertFalse(node0.isBreak());
1719:       assertFalse(node0.isIn());
1720:       assertFalse(node0.isEmpty());
1721:       assertFalse(node0.isInc());
1722:       assertFalse(node0.isCast());
1723:       assertFalse(node0.isTrue());
1724:       assertFalse(node0.isAssign());
1725:       assertFalse(node0.hasChildren());
1726:       assertFalse(node0.isDebugger());
1727:       assertFalse(node0.isDec());
1728:       assertFalse(node0.isTypeOf());
1729:       assertFalse(node0.isDelProp());
1730:       assertFalse(node0.isFunction());
1731:       assertFalse(node0.isGetElem());
1732:       assertFalse(node0.isExprResult());
1733:       assertFalse(node0.isVoid());
1734:       assertFalse(node0.isAnd());
1735:       assertFalse(node0.isObjectLit());
1736:       assertFalse(node0.isReturn());
1737:       assertFalse(node0.isNot());
1738:       assertFalse(node0.isComma());
1739:       assertEquals(47, node0.getCharno());
1740:       assertFalse(node0.isWhile());
1741:       assertFalse(node0.isGetProp());
1742:       assertEquals(1837, node0.getLineno());
1743:       assertFalse(node0.isVar());
1744:       assertFalse(node0.isStringKey());
1745:       assertFalse(node0.isBlock());
1746:       assertFalse(node0.isNull());
1747:       assertFalse(node0.isParamList());
1748:       assertFalse(node0.isName());
1749:       assertFalse(node0.isCall());
1750:       assertEquals(0, node0.getChildCount());
1751:       assertFalse(node0.isAssignAdd());
1752:       assertFalse(node0.isContinue());
1753:       assertEquals(40, node0.getType());
1754:       assertFalse(node0.isOr());
1755:       assertFalse(node0.isLabel());
1756:       assertFalse(node0.isDefaultCase());
1757:       assertFalse(node0.isAdd());
1758:       assertFalse(node0.isSetterDef());
1759:       assertFalse(node0.isDo());
1760:       assertFalse(node0.isNew());
1761:       assertFalse(node0.hasOneChild());
1762:       assertFalse(node0.isFor());
1763:       assertFalse(node0.isIf());
1764:       assertFalse(node0.isRegExp());
1765:       assertFalse(node0.isWith());
1766:       assertFalse(node0.isNE());
1767:       assertFalse(node0.isLabelName());
1768:       assertEquals(7524399, node0.getSourcePosition());
1769:       assertFalse(node0.isArrayLit());
1770:       assertFalse(node0.isInstanceOf());
1771:       assertFalse(node0.isCatch());
1772:       assertFalse(node0.hasMoreThanOneChild());
1773:       assertFalse(node0.isThis());
1774:       assertFalse(node0.isNumber());
1775:       assertFalse(node0.isScript());
1776:       assertFalse(node0.isGetterDef());
1777:       assertFalse(node0.isTry());
1778:       assertTrue(node0.isString());
1779:       assertFalse(node0.isCase());
1780:       assertFalse(node1.isStringKey());
1781:       assertFalse(node1.isVar());
1782:       assertFalse(node1.isCall());
1783:       assertFalse(node1.isParamList());
1784:       assertFalse(node1.isNull());
1785:       assertFalse(node1.isName());
1786:       assertFalse(node1.isContinue());
1787:       assertFalse(node1.isOr());
1788:       assertFalse(node1.isLabel());
1789:       assertFalse(node1.isSetterDef());
1790:       assertFalse(node1.isAdd());
1791:       assertFalse(node1.isAssignAdd());
1792:       assertFalse(node1.isDo());
1793:       assertFalse(node1.isNew());
1794:       assertEquals(1837, node1.getLineno());
1795:       assertFalse(node1.isDefaultCase());
1796:       assertFalse(node1.isCast());
1797:       assertFalse(node1.isGetElem());
1798:       assertFalse(node1.isEmpty());
1799:       assertTrue(node1.hasOneChild());
1800:       assertFalse(node1.isAssign());
1801:       assertFalse(node1.isDec());
1802:       assertFalse(node1.isTypeOf());
1803:       assertFalse(node1.isFunction());
1804:       assertFalse(node1.isDebugger());
1805:       assertFalse(node1.isExprResult());
1806:       assertFalse(node1.isTrue());
1807:       assertFalse(node1.isDelProp());
1808:       assertFalse(node1.isVoid());
1809:       assertFalse(node1.isAnd());
1810:       assertFalse(node1.isReturn());
1811:       assertFalse(node1.isNot());
1812:       assertFalse(node1.isString());
1813:       assertFalse(node1.isObjectLit());
1814:       assertFalse(node1.isComma());
1815:       assertEquals(47, node1.getCharno());
1816:       assertFalse(node1.isGetProp());
1817:       assertFalse(node1.isWhile());
1818:       assertFalse(node1.isThrow());
1819:       assertFalse(node1.isHook());
1820:       assertFalse(node1.isFalse());
1821:       assertFalse(node1.isSwitch());
1822:       assertEquals(0, node1.getType());
1823:       assertFalse(node1.isBreak());
1824:       assertEquals(7524399, node1.getSourcePosition());
1825:       assertFalse(node1.isIn());
1826:       assertFalse(node1.isInc());
1827:       assertFalse(node1.isArrayLit());
1828:       assertFalse(node1.isFor());
1829:       assertFalse(node1.isNumber());
1830:       assertFalse(node1.isGetterDef());
1831:       assertFalse(node1.isNE());
1832:       assertFalse(node1.isLabelName());
1833:       assertFalse(node1.isIf());
1834:       assertFalse(node1.isCatch());
1835:       assertFalse(node1.hasMoreThanOneChild());
1836:       assertFalse(node1.isInstanceOf());
1837:       assertFalse(node1.isWith());
1838:       assertTrue(node1.hasChildren());
1839:       assertEquals(1, node1.getChildCount());
1840:       assertFalse(node1.isRegExp());
1841:       assertFalse(node1.isThis());
1842:       assertFalse(node1.isScript());
1843:       assertFalse(node1.isBlock());
1844:       assertFalse(node1.isCase());
1845:       assertFalse(node1.isTry());
1846:       assertFalse(boolean5);
1847:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1848:       assertEquals(55, Node.INFERRED_FUNCTION);
1849:       assertEquals(4095, Node.COLUMN_MASK);
1850:       assertEquals(48, Node.DIRECTIVES);
1851:       assertEquals(36, Node.QUOTED_PROP);
1852:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1853:       assertEquals(43, Node.IS_CONSTANT_NAME);
1854:       assertEquals(50, Node.FREE_CALL);
1855:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1856:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1857:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1858:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1859:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1860:       assertEquals(12, Node.COLUMN_BITS);
1861:       assertEquals(32, Node.INCRDECR_PROP);
1862:       assertEquals(1, Node.DECR_FLAG);
1863:       assertEquals(30, Node.VAR_ARGS_NAME);
1864:       assertEquals(49, Node.DIRECT_EVAL);
1865:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1866:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1867:       assertEquals(54, Node.SLASH_V);
1868:       assertEquals(37, Node.OPT_ARG_NAME);
1869:       assertEquals(56, Node.CHANGE_TIME);
1870:       assertEquals(46, Node.IS_NAMESPACE);
1871:       assertEquals(57, Node.REFLECTED_OBJECT);
1872:       assertEquals(40, Node.ORIGINALNAME_PROP);
1873:       assertEquals(29, Node.JSDOC_INFO_PROP);
1874:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1875:       assertEquals(52, Node.LENGTH);
1876:       assertEquals(8, Node.FLAG_NO_THROWS);
1877:       assertEquals(53, Node.INPUT_ID);
1878:       assertEquals(2, Node.POST_FLAG);
1879:       assertEquals(39, Node.EMPTY_BLOCK);
1880:       assertEquals(57, Node.LAST_PROP);
1881:       assertEquals(47, Node.IS_DISPATCHER);
1882:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1883:       assertEquals(55, Node.INFERRED_FUNCTION);
1884:       assertEquals(4095, Node.COLUMN_MASK);
1885:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1886:       assertEquals(53, Node.INPUT_ID);
1887:       assertEquals(48, Node.DIRECTIVES);
1888:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1889:       assertEquals(43, Node.IS_CONSTANT_NAME);
1890:       assertEquals(36, Node.QUOTED_PROP);
1891:       assertEquals(50, Node.FREE_CALL);
1892:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1893:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1894:       assertEquals(37, Node.OPT_ARG_NAME);
1895:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1896:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1897:       assertEquals(32, Node.INCRDECR_PROP);
1898:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1899:       assertEquals(12, Node.COLUMN_BITS);
1900:       assertEquals(30, Node.VAR_ARGS_NAME);
1901:       assertEquals(49, Node.DIRECT_EVAL);
1902:       assertEquals(57, Node.LAST_PROP);
1903:       assertEquals(1, Node.DECR_FLAG);
1904:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1905:       assertEquals(52, Node.LENGTH);
1906:       assertEquals(56, Node.CHANGE_TIME);
1907:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1908:       assertEquals(54, Node.SLASH_V);
1909:       assertEquals(46, Node.IS_NAMESPACE);
1910:       assertEquals(57, Node.REFLECTED_OBJECT);
1911:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1912:       assertEquals(29, Node.JSDOC_INFO_PROP);
1913:       assertEquals(8, Node.FLAG_NO_THROWS);
1914:       assertEquals(39, Node.EMPTY_BLOCK);
1915:       assertEquals(40, Node.ORIGINALNAME_PROP);
1916:       assertEquals(2, Node.POST_FLAG);
1917:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1918:       assertEquals(47, Node.IS_DISPATCHER);
1919:       assertFalse(node0.equals((Object)node1));
1920:       assertFalse(node1.equals((Object)node2));
1921:       assertFalse(node1.equals((Object)node0));
1922:       assertTrue(boolean5 == boolean0);
1923:       assertTrue(boolean5 == boolean2);
1924:       assertTrue(boolean5 == boolean1);
1925:       assertTrue(boolean5 == boolean3);
1926:       assertTrue(boolean5 == boolean4);
1927:       
1928:       StringWriter stringWriter0 = new StringWriter();
1929:       assertEquals("", stringWriter0.toString());
1930:       assertNotNull(stringWriter0);
1931:       
1932:       // Undeclared exception!
1933:       try { 
1934:         stringWriter0.append((CharSequence) "", 3605, 40);
1935:         fail("Expecting exception: StringIndexOutOfBoundsException");
1936:       
1937:       } catch(StringIndexOutOfBoundsException e) {
1938:       }
1939:   }
1940: }
RegularFileObject[/tmp/EvoSuite_228_1629223352847/com/google/javascript/rhino/Node_228_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:02:33 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_228_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_228_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Maps$KeySet",
93:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
94:       "com.google.common.collect.LinkedHashMultimap",
95:       "com.google.javascript.rhino.Node",
96:       "com.google.javascript.rhino.jstype.ObjectType",
97:       "com.google.common.collect.ImmutableMapKeySet",
98:       "com.google.javascript.rhino.JSDocInfo$Marker",
99:       "com.google.common.collect.RegularImmutableMap",
100:       "com.google.common.collect.RegularImmutableBiMap",
101:       "com.google.javascript.rhino.Node$NodeMismatch",
102:       "com.google.javascript.rhino.jstype.RecordType",
103:       "com.google.common.collect.SortedMapDifference",
104:       "com.google.javascript.rhino.jstype.ModificationVisitor",
105:       "com.google.javascript.rhino.jstype.PropertyMap$1",
106:       "com.google.common.collect.AbstractMapEntry",
107:       "com.google.javascript.rhino.Node$AncestorIterable$1",
108:       "com.google.common.collect.Iterators$12",
109:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
110:       "com.google.common.collect.Iterators$11",
111:       "com.google.javascript.rhino.jstype.JSType$1",
112:       "com.google.common.collect.EmptyImmutableBiMap",
113:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
114:       "com.google.common.base.Predicate",
115:       "com.google.javascript.rhino.jstype.JSType$2",
116:       "com.google.javascript.rhino.jstype.VoidType",
117:       "com.google.common.base.Joiner",
118:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
119:       "com.google.common.collect.AbstractListMultimap",
120:       "com.google.javascript.rhino.jstype.JSType",
121:       "com.google.common.collect.ImmutableAsList",
122:       "com.google.javascript.rhino.Node$StringNode",
123:       "com.google.javascript.rhino.jstype.ProxyObjectType",
124:       "com.google.common.collect.RegularImmutableAsList",
125:       "com.google.javascript.rhino.jstype.TemplateType",
126:       "com.google.javascript.rhino.jstype.NamedType",
127:       "com.google.common.collect.Iterators$13",
128:       "com.google.javascript.rhino.InputId",
129:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
130:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
131:       "com.google.common.collect.AbstractMapBasedMultimap",
132:       "com.google.common.collect.Lists$Partition",
133:       "com.google.common.collect.Lists",
134:       "com.google.javascript.rhino.Node$SideEffectFlags",
135:       "com.google.common.collect.UnmodifiableListIterator",
136:       "com.google.javascript.rhino.jstype.NullType",
137:       "com.google.common.collect.Lists$TransformingSequentialList",
138:       "com.google.javascript.rhino.ErrorReporter",
139:       "com.google.javascript.rhino.jstype.UnknownType",
140:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
141:       "com.google.javascript.rhino.jstype.ValueType",
142:       "com.google.javascript.rhino.jstype.PropertyMap",
143:       "com.google.javascript.rhino.Token",
144:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
145:       "com.google.common.collect.ObjectArrays",
146:       "com.google.javascript.rhino.jstype.StaticSourceFile",
147:       "com.google.javascript.rhino.jstype.BooleanType",
148:       "com.google.javascript.rhino.jstype.NoObjectType",
149:       "com.google.common.collect.AbstractIterator",
150:       "com.google.javascript.rhino.jstype.FunctionBuilder",
151:       "com.google.javascript.rhino.jstype.JSType$TypePair",
152:       "com.google.common.base.Joiner$MapJoiner",
153:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
154:       "com.google.common.collect.ImmutableList$1",
155:       "com.google.common.collect.MapDifference",
156:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
157:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
158:       "com.google.common.collect.Sets$ImprovedAbstractSet",
159:       "com.google.javascript.rhino.jstype.FunctionType",
160:       "com.google.common.base.Preconditions",
161:       "com.google.common.collect.UnmodifiableIterator",
162:       "com.google.javascript.rhino.JSDocInfo",
163:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
164:       "com.google.javascript.rhino.jstype.Property",
165:       "com.google.common.collect.ImmutableMapValues",
166:       "com.google.common.collect.ImmutableEntry",
167:       "com.google.common.base.Joiner$1",
168:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
169:       "com.google.common.base.Joiner$2",
170:       "com.google.common.collect.ImmutableCollection",
171:       "com.google.common.collect.ImmutableEnumMap",
172:       "com.google.javascript.rhino.jstype.TernaryValue",
173:       "com.google.javascript.rhino.Node$AncestorIterable",
174:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
175:       "com.google.common.collect.Lists$RandomAccessListWrapper",
176:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
177:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
178:       "com.google.javascript.rhino.jstype.EnumElementType",
179:       "com.google.javascript.rhino.jstype.UnionType",
180:       "com.google.common.base.Objects",
181:       "com.google.javascript.rhino.Node$NumberNode",
182:       "com.google.common.collect.SingletonImmutableList",
183:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
184:       "com.google.common.collect.ImmutableCollection$Builder",
185:       "com.google.javascript.rhino.jstype.StaticSlot",
186:       "com.google.common.collect.Iterators$6",
187:       "com.google.common.collect.BiMap",
188:       "com.google.common.collect.Iterators$7",
189:       "com.google.common.collect.AbstractSetMultimap",
190:       "com.google.common.base.Function",
191:       "com.google.common.collect.ImmutableSet",
192:       "com.google.common.collect.Lists$AbstractListWrapper",
193:       "com.google.common.collect.ImmutableMap",
194:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
195:       "com.google.common.collect.AbstractIndexedListIterator",
196:       "com.google.common.collect.Maps$1",
197:       "com.google.javascript.rhino.jstype.EnumType",
198:       "com.google.common.collect.Iterators$1",
199:       "com.google.common.collect.Iterators$2",
200:       "com.google.javascript.rhino.jstype.NamespaceType",
201:       "com.google.common.collect.Iterators$3",
202:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
203:       "com.google.javascript.rhino.Node$ObjectPropListItem",
204:       "com.google.common.collect.Lists$StringAsImmutableList",
205:       "com.google.common.collect.Lists$2",
206:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
207:       "com.google.common.collect.ImmutableList$Builder",
208:       "com.google.common.collect.Lists$1",
209:       "com.google.javascript.rhino.jstype.StaticReference",
210:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
211:       "com.google.common.collect.Multiset",
212:       "com.google.common.collect.AbstractMultimap",
213:       "com.google.common.collect.Multimap",
214:       "com.google.common.collect.Iterators",
215:       "com.google.common.collect.Maps$ImprovedAbstractMap",
216:       "com.google.common.collect.ImmutableBiMap",
217:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
218:       "com.google.common.collect.ImmutableList",
219:       "com.google.common.collect.SingletonImmutableBiMap",
220:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
221:       "com.google.javascript.rhino.jstype.StringType",
222:       "com.google.javascript.rhino.Node$AbstractPropListItem",
223:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
224:       "com.google.javascript.rhino.jstype.TemplatizedType",
225:       "com.google.javascript.rhino.jstype.Visitor",
226:       "com.google.javascript.rhino.jstype.NoResolvedType",
227:       "com.google.javascript.rhino.jstype.JSTypeNative",
228:       "com.google.javascript.rhino.jstype.AllType",
229:       "com.google.common.collect.Maps",
230:       "com.google.common.collect.SetMultimap",
231:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
232:       "com.google.common.collect.Maps$EntryTransformer",
233:       "com.google.javascript.rhino.JSTypeExpression",
234:       "com.google.common.collect.Iterators$MergingIterator"
235:     );
236:   } 
237: 
238:   private static void resetClasses() {
239:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_228_tmp__ESTest_scaffolding.class.getClassLoader()); 
240: 
241:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
242:       "com.google.javascript.rhino.Node",
243:       "com.google.javascript.rhino.Node$NumberNode",
244:       "com.google.javascript.rhino.Node$StringNode",
245:       "com.google.javascript.rhino.Node$AbstractPropListItem",
246:       "com.google.javascript.rhino.Node$ObjectPropListItem",
247:       "com.google.javascript.rhino.Node$IntPropListItem",
248:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
249:       "com.google.javascript.rhino.Node$AncestorIterable",
250:       "com.google.javascript.rhino.Node$NodeMismatch",
251:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
252:       "com.google.javascript.rhino.Node$SideEffectFlags",
253:       "com.google.javascript.rhino.Token",
254:       "com.google.common.base.Preconditions",
255:       "com.google.common.base.Objects",
256:       "com.google.javascript.rhino.SimpleErrorReporter",
257:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
258:       "com.google.common.base.Joiner",
259:       "com.google.common.base.Joiner$1",
260:       "com.google.common.collect.Collections2",
261:       "com.google.common.base.Joiner$MapJoiner",
262:       "com.google.common.collect.Maps",
263:       "com.google.common.collect.AbstractMultimap",
264:       "com.google.common.collect.AbstractMapBasedMultimap",
265:       "com.google.common.collect.AbstractSetMultimap",
266:       "com.google.common.collect.LinkedHashMultimap",
267:       "com.google.common.collect.AbstractMapEntry",
268:       "com.google.common.collect.ImmutableEntry",
269:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
270:       "com.google.common.collect.AbstractListMultimap",
271:       "com.google.common.collect.ArrayListMultimap",
272:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
273:       "com.google.common.collect.ImmutableCollection",
274:       "com.google.common.collect.RegularImmutableList",
275:       "com.google.common.collect.ObjectArrays",
276:       "com.google.common.collect.ImmutableList",
277:       "com.google.javascript.rhino.jstype.ModificationVisitor",
278:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
279:       "com.google.common.collect.ImmutableCollection$Builder",
280:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
281:       "com.google.common.collect.ImmutableList$Builder",
282:       "com.google.common.collect.UnmodifiableIterator",
283:       "com.google.common.collect.UnmodifiableListIterator",
284:       "com.google.common.collect.Iterators$1",
285:       "com.google.common.collect.Iterators$2",
286:       "com.google.common.collect.Iterators",
287:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
288:       "com.google.javascript.rhino.jstype.JSType$1",
289:       "com.google.javascript.rhino.jstype.JSType",
290:       "com.google.javascript.rhino.jstype.ObjectType",
291:       "com.google.javascript.rhino.jstype.ProxyObjectType",
292:       "com.google.javascript.rhino.jstype.TemplateType",
293:       "com.google.javascript.rhino.jstype.ValueType",
294:       "com.google.javascript.rhino.jstype.BooleanType",
295:       "com.google.javascript.rhino.jstype.NullType",
296:       "com.google.javascript.rhino.jstype.NumberType",
297:       "com.google.javascript.rhino.jstype.StringType",
298:       "com.google.javascript.rhino.jstype.UnknownType",
299:       "com.google.javascript.rhino.jstype.VoidType",
300:       "com.google.javascript.rhino.jstype.AllType",
301:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
302:       "com.google.common.collect.ImmutableMap",
303:       "com.google.common.collect.ImmutableBiMap",
304:       "com.google.common.collect.EmptyImmutableBiMap",
305:       "com.google.javascript.rhino.jstype.PropertyMap$1",
306:       "com.google.javascript.rhino.jstype.PropertyMap",
307:       "com.google.javascript.rhino.jstype.FunctionType",
308:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
309:       "com.google.javascript.rhino.jstype.ArrowType",
310:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
311:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
312:       "com.google.javascript.rhino.jstype.InstanceObjectType",
313:       "com.google.javascript.rhino.jstype.Property",
314:       "com.google.common.collect.Lists",
315:       "com.google.javascript.rhino.jstype.NoObjectType",
316:       "com.google.javascript.rhino.jstype.NoType",
317:       "com.google.javascript.rhino.jstype.NoResolvedType",
318:       "com.google.common.collect.SingletonImmutableList",
319:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
320:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
321:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
322:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
323:       "com.google.javascript.rhino.jstype.UnionType",
324:       "com.google.javascript.rhino.jstype.FunctionBuilder",
325:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
326:       "com.google.javascript.rhino.jstype.EnumType",
327:       "com.google.javascript.rhino.jstype.EnumElementType",
328:       "com.google.javascript.rhino.JSDocInfo",
329:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
330:       "com.google.common.collect.AbstractIndexedListIterator",
331:       "com.google.common.collect.Iterators$11",
332:       "com.google.javascript.rhino.InputId",
333:       "com.google.common.collect.Sets",
334:       "com.google.common.collect.Iterables",
335:       "com.google.javascript.rhino.jstype.TemplatizedType",
336:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
337:       "com.google.javascript.rhino.Node$AncestorIterable$1",
338:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
339:       "com.google.javascript.rhino.jstype.JSType$TypePair",
340:       "com.google.common.collect.Sets$ImprovedAbstractSet",
341:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
342:       "com.google.common.collect.Hashing",
343:       "com.google.javascript.rhino.jstype.NamedType",
344:       "com.google.common.collect.ImmutableSet",
345:       "com.google.common.collect.EmptyImmutableSet",
346:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.javascript.rhino.jstype.JSType$2",
350:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
351:       "com.google.common.collect.Iterators$12",
352:       "com.google.common.collect.AbstractMultimap$Values",
353:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
354:       "com.google.common.collect.AbstractMapBasedMultimap$1",
355:       "com.google.common.collect.Multimaps$Entries",
356:       "com.google.common.collect.AbstractMultimap$Entries",
357:       "com.google.common.collect.AbstractMapBasedMultimap$2",
358:       "com.google.javascript.rhino.JSTypeExpression",
359:       "com.google.common.collect.Platform"
360:     );
361:   }
362: }

[MASTER] 18:02:33.333 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("", 153, 153);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertEquals(153, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertEquals(153, node0.getCharno());
assertFalse(node0.isFor());
assertEquals(626841, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertNotNull(node0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean0 = node0.isNot();
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertEquals(153, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertEquals(153, node0.getCharno());
assertFalse(node0.isFor());
assertEquals(626841, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(boolean0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean1 = node0.isVarArgs();
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertEquals(153, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertEquals(153, node0.getCharno());
assertFalse(node0.isFor());
assertEquals(626841, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(boolean1);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertTrue(boolean1 == boolean0);

boolean boolean2 = node0.isThis();
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertEquals(153, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertEquals(153, node0.getCharno());
assertFalse(node0.isFor());
assertEquals(626841, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(boolean2);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

boolean boolean3 = node0.isLocalResultCall();
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertEquals(153, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertEquals(153, node0.getCharno());
assertFalse(node0.isFor());
assertEquals(626841, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(boolean3);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);

Node node1 = new Node(0, node0, node0, node0, 1837, 47);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertEquals(153, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertEquals(153, node0.getCharno());
assertFalse(node0.isFor());
assertEquals(626841, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertEquals(1837, node1.getLineno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isBreak());
assertEquals(7524399, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertNotNull(node1);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node1.equals((Object)node0));

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertEquals(153, node0.getLineno());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertEquals(153, node0.getCharno());
assertFalse(node0.isFor());
assertEquals(626841, node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.equals((Object)node1));

Node node2 = node0.copyInformationFromForTree(node1);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertEquals(47, node0.getCharno());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals(1837, node0.getLineno());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertEquals(7524399, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertEquals(1837, node1.getLineno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isBreak());
assertEquals(7524399, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(1837, node2.getLineno());
assertFalse(node2.isBlock());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertEquals(47, node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isCatch());
assertFalse(node2.isContinue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertEquals(40, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isLabel());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertEquals(7524399, node2.getSourcePosition());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isSwitch());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertNotNull(node2);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node node3 = node1.getChildBefore(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertEquals(47, node0.getCharno());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals(1837, node0.getLineno());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertEquals(7524399, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertEquals(1837, node1.getLineno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isBreak());
assertEquals(7524399, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertEquals(1837, node2.getLineno());
assertFalse(node2.isBlock());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertEquals(47, node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isCatch());
assertFalse(node2.isContinue());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isDo());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertEquals(40, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isLabel());
assertFalse(node2.isRegExp());
assertFalse(node2.isWith());
assertEquals(7524399, node2.getSourcePosition());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isSwitch());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssign());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isExprResult());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertNull(node3);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean4 = node1.isOr();
assertSame(node0, node2);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertEquals(47, node0.getCharno());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals(1837, node0.getLineno());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertEquals(7524399, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertEquals(1837, node1.getLineno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isBreak());
assertEquals(7524399, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(boolean4);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);

boolean boolean5 = node1.isWith();
assertSame(node0, node2);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isTrue());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDebugger());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isComma());
assertEquals(47, node0.getCharno());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals(1837, node0.getLineno());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isContinue());
assertEquals(40, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isLabelName());
assertEquals(7524399, node0.getSourcePosition());
assertFalse(node0.isArrayLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isName());
assertFalse(node1.isContinue());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertEquals(1837, node1.getLineno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isBreak());
assertEquals(7524399, node1.getSourcePosition());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isLabelName());
assertFalse(node1.isIf());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isBlock());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(boolean5);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);

StringWriter stringWriter0 = new StringWriter();
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

stringWriter0.append((CharSequence) "", 3605, 40);

[MASTER] 18:02:51.203 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:51.555 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:51.847 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:52.087 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:53.163 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:53.406 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:53.622 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:53.848 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:54.050 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:54.292 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:54.485 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:54.700 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:55.013 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:55.260 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:55.498 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:55.733 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:55.967 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:56.235 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:56.498 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:56.724 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:56.937 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:57.180 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:57.437 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:57.637 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:57.852 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:58.058 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:58.272 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:58.512 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:58.736 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:02:59.929 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/21
* Done!

* Computation finished
