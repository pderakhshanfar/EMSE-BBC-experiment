* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 12233
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 131228449
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 17:46:53.346 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 17:47:12.910 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
[MASTER] 17:47:44.099 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:48:00.214 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 606s and 410 generations, 183804 statements, best individual has fitness: 2860.0
* Minimizing test suite
[MASTER] 17:58:24.574 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 801
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 613
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 107
* Number of covered goals: 107
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 466
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 4536
* Number of covered goals: 2211
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 714
* Number of covered goals: 568
* Generated 753 tests with total length 9570
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:59:36.513 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.68935% of time used, but only 52/753 tests minimized), falling back to using all assertions
[MASTER] 17:59:55.229 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 18:00:06.650 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 18:00:19.779 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_121_1629223219684/com/google/javascript/rhino/Node_121_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_121_1629223219684/com/google/javascript/rhino/Node_121_tmp__ESTest_scaffolding.java]]
[MASTER] 18:00:19.779 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:19.779 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:19.783 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 127
[MASTER] 18:00:19.785 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_121_1629223219684/com/google/javascript/rhino/Node_121_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:00:19 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_121_tmp__ESTest extends Node_121_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("Q#{!t ");
22:       assertFalse(node0.isSetterDef());
23:       assertFalse(node0.isParamList());
24:       assertFalse(node0.isNull());
25:       assertFalse(node0.isName());
26:       assertFalse(node0.isCatch());
27:       assertFalse(node0.isVar());
28:       assertEquals(40, node0.getType());
29:       assertFalse(node0.isCall());
30:       assertEquals(0, node0.getChildCount());
31:       assertFalse(node0.isFunction());
32:       assertFalse(node0.isRegExp());
33:       assertFalse(node0.isBlock());
34:       assertFalse(node0.isDebugger());
35:       assertFalse(node0.isArrayLit());
36:       assertFalse(node0.isTry());
37:       assertTrue(node0.isString());
38:       assertFalse(node0.isStringKey());
39:       assertFalse(node0.isGetterDef());
40:       assertFalse(node0.isLabel());
41:       assertFalse(node0.isAssignAdd());
42:       assertFalse(node0.isReturn());
43:       assertFalse(node0.isLabelName());
44:       assertFalse(node0.isDelProp());
45:       assertFalse(node0.isGetElem());
46:       assertFalse(node0.isWhile());
47:       assertFalse(node0.isDec());
48:       assertFalse(node0.hasChildren());
49:       assertFalse(node0.isAssign());
50:       assertFalse(node0.isTypeOf());
51:       assertFalse(node0.isNew());
52:       assertFalse(node0.isTrue());
53:       assertFalse(node0.isAdd());
54:       assertFalse(node0.isExprResult());
55:       assertFalse(node0.isDefaultCase());
56:       assertFalse(node0.isDo());
57:       assertFalse(node0.isVoid());
58:       assertFalse(node0.isEmpty());
59:       assertFalse(node0.isOr());
60:       assertFalse(node0.isGetProp());
61:       assertFalse(node0.isThis());
62:       assertFalse(node0.isBreak());
63:       assertFalse(node0.isThrow());
64:       assertFalse(node0.isFalse());
65:       assertFalse(node0.isHook());
66:       assertFalse(node0.isInstanceOf());
67:       assertFalse(node0.isWith());
68:       assertFalse(node0.isComma());
69:       assertEquals((-1), node0.getCharno());
70:       assertFalse(node0.isScript());
71:       assertFalse(node0.hasOneChild());
72:       assertFalse(node0.isSwitch());
73:       assertFalse(node0.isCase());
74:       assertFalse(node0.isAnd());
75:       assertFalse(node0.isNumber());
76:       assertEquals((-1), node0.getSourcePosition());
77:       assertFalse(node0.isNot());
78:       assertFalse(node0.isObjectLit());
79:       assertFalse(node0.isNE());
80:       assertFalse(node0.isIf());
81:       assertEquals((-1), node0.getLineno());
82:       assertFalse(node0.isContinue());
83:       assertFalse(node0.isCast());
84:       assertFalse(node0.isFor());
85:       assertFalse(node0.hasMoreThanOneChild());
86:       assertFalse(node0.isInc());
87:       assertFalse(node0.isIn());
88:       assertNotNull(node0);
89:       assertEquals(37, Node.OPT_ARG_NAME);
90:       assertEquals(56, Node.CHANGE_TIME);
91:       assertEquals(32, Node.INCRDECR_PROP);
92:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
93:       assertEquals(29, Node.JSDOC_INFO_PROP);
94:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
95:       assertEquals(46, Node.IS_NAMESPACE);
96:       assertEquals(51, Node.STATIC_SOURCE_FILE);
97:       assertEquals(54, Node.SLASH_V);
98:       assertEquals(53, Node.INPUT_ID);
99:       assertEquals(43, Node.IS_CONSTANT_NAME);
100:       assertEquals(15, Node.NO_SIDE_EFFECTS);
101:       assertEquals(57, Node.LAST_PROP);
102:       assertEquals(40, Node.ORIGINALNAME_PROP);
103:       assertEquals(47, Node.IS_DISPATCHER);
104:       assertEquals(2, Node.POST_FLAG);
105:       assertEquals(30, Node.VAR_ARGS_NAME);
106:       assertEquals(8, Node.FLAG_NO_THROWS);
107:       assertEquals(39, Node.EMPTY_BLOCK);
108:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
110:       assertEquals(48, Node.DIRECTIVES);
111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
112:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(52, Node.LENGTH);
115:       assertEquals(57, Node.REFLECTED_OBJECT);
116:       assertEquals(36, Node.QUOTED_PROP);
117:       assertEquals(50, Node.FREE_CALL);
118:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
119:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
120:       assertEquals(49, Node.DIRECT_EVAL);
121:       assertEquals(1, Node.DECR_FLAG);
122:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
123:       assertEquals(12, Node.COLUMN_BITS);
124:       assertEquals(4095, Node.COLUMN_MASK);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(iterable0.contains(node0));
128:       assertFalse(node0.isSetterDef());
129:       assertFalse(node0.isParamList());
130:       assertFalse(node0.isNull());
131:       assertFalse(node0.isName());
132:       assertFalse(node0.isCatch());
133:       assertFalse(node0.isVar());
134:       assertEquals(40, node0.getType());
135:       assertFalse(node0.isCall());
136:       assertEquals(0, node0.getChildCount());
137:       assertFalse(node0.isFunction());
138:       assertFalse(node0.isRegExp());
139:       assertFalse(node0.isBlock());
140:       assertFalse(node0.isDebugger());
141:       assertFalse(node0.isArrayLit());
142:       assertFalse(node0.isTry());
143:       assertTrue(node0.isString());
144:       assertFalse(node0.isStringKey());
145:       assertFalse(node0.isGetterDef());
146:       assertFalse(node0.isLabel());
147:       assertFalse(node0.isAssignAdd());
148:       assertFalse(node0.isReturn());
149:       assertFalse(node0.isLabelName());
150:       assertFalse(node0.isDelProp());
151:       assertFalse(node0.isGetElem());
152:       assertFalse(node0.isWhile());
153:       assertFalse(node0.isDec());
154:       assertFalse(node0.hasChildren());
155:       assertFalse(node0.isAssign());
156:       assertFalse(node0.isTypeOf());
157:       assertFalse(node0.isNew());
158:       assertFalse(node0.isTrue());
159:       assertFalse(node0.isAdd());
160:       assertFalse(node0.isExprResult());
161:       assertFalse(node0.isDefaultCase());
162:       assertFalse(node0.isDo());
163:       assertFalse(node0.isVoid());
164:       assertFalse(node0.isEmpty());
165:       assertFalse(node0.isOr());
166:       assertFalse(node0.isGetProp());
167:       assertFalse(node0.isThis());
168:       assertFalse(node0.isBreak());
169:       assertFalse(node0.isThrow());
170:       assertFalse(node0.isFalse());
171:       assertFalse(node0.isHook());
172:       assertFalse(node0.isInstanceOf());
173:       assertFalse(node0.isWith());
174:       assertFalse(node0.isComma());
175:       assertEquals((-1), node0.getCharno());
176:       assertFalse(node0.isScript());
177:       assertFalse(node0.hasOneChild());
178:       assertFalse(node0.isSwitch());
179:       assertFalse(node0.isCase());
180:       assertFalse(node0.isAnd());
181:       assertFalse(node0.isNumber());
182:       assertEquals((-1), node0.getSourcePosition());
183:       assertFalse(node0.isNot());
184:       assertFalse(node0.isObjectLit());
185:       assertFalse(node0.isNE());
186:       assertFalse(node0.isIf());
187:       assertEquals((-1), node0.getLineno());
188:       assertFalse(node0.isContinue());
189:       assertFalse(node0.isCast());
190:       assertFalse(node0.isFor());
191:       assertFalse(node0.hasMoreThanOneChild());
192:       assertFalse(node0.isInc());
193:       assertFalse(node0.isIn());
194:       assertNotNull(iterable0);
195:       assertEquals(37, Node.OPT_ARG_NAME);
196:       assertEquals(56, Node.CHANGE_TIME);
197:       assertEquals(32, Node.INCRDECR_PROP);
198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
199:       assertEquals(29, Node.JSDOC_INFO_PROP);
200:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
201:       assertEquals(46, Node.IS_NAMESPACE);
202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
203:       assertEquals(54, Node.SLASH_V);
204:       assertEquals(53, Node.INPUT_ID);
205:       assertEquals(43, Node.IS_CONSTANT_NAME);
206:       assertEquals(15, Node.NO_SIDE_EFFECTS);
207:       assertEquals(57, Node.LAST_PROP);
208:       assertEquals(40, Node.ORIGINALNAME_PROP);
209:       assertEquals(47, Node.IS_DISPATCHER);
210:       assertEquals(2, Node.POST_FLAG);
211:       assertEquals(30, Node.VAR_ARGS_NAME);
212:       assertEquals(8, Node.FLAG_NO_THROWS);
213:       assertEquals(39, Node.EMPTY_BLOCK);
214:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
216:       assertEquals(48, Node.DIRECTIVES);
217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
218:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
219:       assertEquals(55, Node.INFERRED_FUNCTION);
220:       assertEquals(52, Node.LENGTH);
221:       assertEquals(57, Node.REFLECTED_OBJECT);
222:       assertEquals(36, Node.QUOTED_PROP);
223:       assertEquals(50, Node.FREE_CALL);
224:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
225:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
226:       assertEquals(49, Node.DIRECT_EVAL);
227:       assertEquals(1, Node.DECR_FLAG);
228:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
229:       assertEquals(12, Node.COLUMN_BITS);
230:       assertEquals(4095, Node.COLUMN_MASK);
231:       
232:       node0.setLength(122);
233:       assertFalse(node0.isSetterDef());
234:       assertFalse(node0.isParamList());
235:       assertFalse(node0.isNull());
236:       assertFalse(node0.isName());
237:       assertFalse(node0.isCatch());
238:       assertFalse(node0.isVar());
239:       assertEquals(40, node0.getType());
240:       assertFalse(node0.isCall());
241:       assertEquals(0, node0.getChildCount());
242:       assertFalse(node0.isFunction());
243:       assertFalse(node0.isRegExp());
244:       assertFalse(node0.isBlock());
245:       assertFalse(node0.isDebugger());
246:       assertFalse(node0.isArrayLit());
247:       assertFalse(node0.isTry());
248:       assertTrue(node0.isString());
249:       assertFalse(node0.isStringKey());
250:       assertFalse(node0.isGetterDef());
251:       assertFalse(node0.isLabel());
252:       assertFalse(node0.isAssignAdd());
253:       assertFalse(node0.isReturn());
254:       assertFalse(node0.isLabelName());
255:       assertFalse(node0.isDelProp());
256:       assertFalse(node0.isGetElem());
257:       assertFalse(node0.isWhile());
258:       assertFalse(node0.isDec());
259:       assertFalse(node0.hasChildren());
260:       assertFalse(node0.isAssign());
261:       assertFalse(node0.isTypeOf());
262:       assertFalse(node0.isNew());
263:       assertFalse(node0.isTrue());
264:       assertFalse(node0.isAdd());
265:       assertFalse(node0.isExprResult());
266:       assertFalse(node0.isDefaultCase());
267:       assertFalse(node0.isDo());
268:       assertFalse(node0.isVoid());
269:       assertFalse(node0.isEmpty());
270:       assertFalse(node0.isOr());
271:       assertFalse(node0.isGetProp());
272:       assertFalse(node0.isThis());
273:       assertFalse(node0.isBreak());
274:       assertFalse(node0.isThrow());
275:       assertFalse(node0.isFalse());
276:       assertFalse(node0.isHook());
277:       assertFalse(node0.isInstanceOf());
278:       assertFalse(node0.isWith());
279:       assertFalse(node0.isComma());
280:       assertEquals((-1), node0.getCharno());
281:       assertFalse(node0.isScript());
282:       assertFalse(node0.hasOneChild());
283:       assertFalse(node0.isSwitch());
284:       assertFalse(node0.isCase());
285:       assertFalse(node0.isAnd());
286:       assertFalse(node0.isNumber());
287:       assertEquals((-1), node0.getSourcePosition());
288:       assertFalse(node0.isNot());
289:       assertFalse(node0.isObjectLit());
290:       assertFalse(node0.isNE());
291:       assertFalse(node0.isIf());
292:       assertEquals((-1), node0.getLineno());
293:       assertFalse(node0.isContinue());
294:       assertFalse(node0.isCast());
295:       assertFalse(node0.isFor());
296:       assertFalse(node0.hasMoreThanOneChild());
297:       assertFalse(node0.isInc());
298:       assertFalse(node0.isIn());
299:       assertEquals(37, Node.OPT_ARG_NAME);
300:       assertEquals(56, Node.CHANGE_TIME);
301:       assertEquals(32, Node.INCRDECR_PROP);
302:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
303:       assertEquals(29, Node.JSDOC_INFO_PROP);
304:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
305:       assertEquals(46, Node.IS_NAMESPACE);
306:       assertEquals(51, Node.STATIC_SOURCE_FILE);
307:       assertEquals(54, Node.SLASH_V);
308:       assertEquals(53, Node.INPUT_ID);
309:       assertEquals(43, Node.IS_CONSTANT_NAME);
310:       assertEquals(15, Node.NO_SIDE_EFFECTS);
311:       assertEquals(57, Node.LAST_PROP);
312:       assertEquals(40, Node.ORIGINALNAME_PROP);
313:       assertEquals(47, Node.IS_DISPATCHER);
314:       assertEquals(2, Node.POST_FLAG);
315:       assertEquals(30, Node.VAR_ARGS_NAME);
316:       assertEquals(8, Node.FLAG_NO_THROWS);
317:       assertEquals(39, Node.EMPTY_BLOCK);
318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
319:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
320:       assertEquals(48, Node.DIRECTIVES);
321:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
322:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
323:       assertEquals(55, Node.INFERRED_FUNCTION);
324:       assertEquals(52, Node.LENGTH);
325:       assertEquals(57, Node.REFLECTED_OBJECT);
326:       assertEquals(36, Node.QUOTED_PROP);
327:       assertEquals(50, Node.FREE_CALL);
328:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
329:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
330:       assertEquals(49, Node.DIRECT_EVAL);
331:       assertEquals(1, Node.DECR_FLAG);
332:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
333:       assertEquals(12, Node.COLUMN_BITS);
334:       assertEquals(4095, Node.COLUMN_MASK);
335:       
336:       String string0 = node0.toString();
337:       assertFalse(node0.isSetterDef());
338:       assertFalse(node0.isParamList());
339:       assertFalse(node0.isNull());
340:       assertFalse(node0.isName());
341:       assertFalse(node0.isCatch());
342:       assertFalse(node0.isVar());
343:       assertEquals(40, node0.getType());
344:       assertFalse(node0.isCall());
345:       assertEquals(0, node0.getChildCount());
346:       assertFalse(node0.isFunction());
347:       assertFalse(node0.isRegExp());
348:       assertFalse(node0.isBlock());
349:       assertFalse(node0.isDebugger());
350:       assertFalse(node0.isArrayLit());
351:       assertFalse(node0.isTry());
352:       assertTrue(node0.isString());
353:       assertFalse(node0.isStringKey());
354:       assertFalse(node0.isGetterDef());
355:       assertFalse(node0.isLabel());
356:       assertFalse(node0.isAssignAdd());
357:       assertFalse(node0.isReturn());
358:       assertFalse(node0.isLabelName());
359:       assertFalse(node0.isDelProp());
360:       assertFalse(node0.isGetElem());
361:       assertFalse(node0.isWhile());
362:       assertFalse(node0.isDec());
363:       assertFalse(node0.hasChildren());
364:       assertFalse(node0.isAssign());
365:       assertFalse(node0.isTypeOf());
366:       assertFalse(node0.isNew());
367:       assertFalse(node0.isTrue());
368:       assertFalse(node0.isAdd());
369:       assertFalse(node0.isExprResult());
370:       assertFalse(node0.isDefaultCase());
371:       assertFalse(node0.isDo());
372:       assertFalse(node0.isVoid());
373:       assertFalse(node0.isEmpty());
374:       assertFalse(node0.isOr());
375:       assertFalse(node0.isGetProp());
376:       assertFalse(node0.isThis());
377:       assertFalse(node0.isBreak());
378:       assertFalse(node0.isThrow());
379:       assertFalse(node0.isFalse());
380:       assertFalse(node0.isHook());
381:       assertFalse(node0.isInstanceOf());
382:       assertFalse(node0.isWith());
383:       assertFalse(node0.isComma());
384:       assertEquals((-1), node0.getCharno());
385:       assertFalse(node0.isScript());
386:       assertFalse(node0.hasOneChild());
387:       assertFalse(node0.isSwitch());
388:       assertFalse(node0.isCase());
389:       assertFalse(node0.isAnd());
390:       assertFalse(node0.isNumber());
391:       assertEquals((-1), node0.getSourcePosition());
392:       assertFalse(node0.isNot());
393:       assertFalse(node0.isObjectLit());
394:       assertFalse(node0.isNE());
395:       assertFalse(node0.isIf());
396:       assertEquals((-1), node0.getLineno());
397:       assertFalse(node0.isContinue());
398:       assertFalse(node0.isCast());
399:       assertFalse(node0.isFor());
400:       assertFalse(node0.hasMoreThanOneChild());
401:       assertFalse(node0.isInc());
402:       assertFalse(node0.isIn());
403:       assertNotNull(string0);
404:       assertEquals(37, Node.OPT_ARG_NAME);
405:       assertEquals(56, Node.CHANGE_TIME);
406:       assertEquals(32, Node.INCRDECR_PROP);
407:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
408:       assertEquals(29, Node.JSDOC_INFO_PROP);
409:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
410:       assertEquals(46, Node.IS_NAMESPACE);
411:       assertEquals(51, Node.STATIC_SOURCE_FILE);
412:       assertEquals(54, Node.SLASH_V);
413:       assertEquals(53, Node.INPUT_ID);
414:       assertEquals(43, Node.IS_CONSTANT_NAME);
415:       assertEquals(15, Node.NO_SIDE_EFFECTS);
416:       assertEquals(57, Node.LAST_PROP);
417:       assertEquals(40, Node.ORIGINALNAME_PROP);
418:       assertEquals(47, Node.IS_DISPATCHER);
419:       assertEquals(2, Node.POST_FLAG);
420:       assertEquals(30, Node.VAR_ARGS_NAME);
421:       assertEquals(8, Node.FLAG_NO_THROWS);
422:       assertEquals(39, Node.EMPTY_BLOCK);
423:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
424:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
425:       assertEquals(48, Node.DIRECTIVES);
426:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
427:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
428:       assertEquals(55, Node.INFERRED_FUNCTION);
429:       assertEquals(52, Node.LENGTH);
430:       assertEquals(57, Node.REFLECTED_OBJECT);
431:       assertEquals(36, Node.QUOTED_PROP);
432:       assertEquals(50, Node.FREE_CALL);
433:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
434:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
435:       assertEquals(49, Node.DIRECT_EVAL);
436:       assertEquals(1, Node.DECR_FLAG);
437:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
438:       assertEquals(12, Node.COLUMN_BITS);
439:       assertEquals(4095, Node.COLUMN_MASK);
440:       
441:       node0.setVarArgs(false);
442:       assertFalse(node0.isSetterDef());
443:       assertFalse(node0.isParamList());
444:       assertFalse(node0.isNull());
445:       assertFalse(node0.isName());
446:       assertFalse(node0.isCatch());
447:       assertFalse(node0.isVar());
448:       assertEquals(40, node0.getType());
449:       assertFalse(node0.isCall());
450:       assertEquals(0, node0.getChildCount());
451:       assertFalse(node0.isFunction());
452:       assertFalse(node0.isRegExp());
453:       assertFalse(node0.isBlock());
454:       assertFalse(node0.isDebugger());
455:       assertFalse(node0.isArrayLit());
456:       assertFalse(node0.isTry());
457:       assertTrue(node0.isString());
458:       assertFalse(node0.isStringKey());
459:       assertFalse(node0.isGetterDef());
460:       assertFalse(node0.isLabel());
461:       assertFalse(node0.isAssignAdd());
462:       assertFalse(node0.isReturn());
463:       assertFalse(node0.isLabelName());
464:       assertFalse(node0.isDelProp());
465:       assertFalse(node0.isGetElem());
466:       assertFalse(node0.isWhile());
467:       assertFalse(node0.isDec());
468:       assertFalse(node0.hasChildren());
469:       assertFalse(node0.isAssign());
470:       assertFalse(node0.isTypeOf());
471:       assertFalse(node0.isNew());
472:       assertFalse(node0.isTrue());
473:       assertFalse(node0.isAdd());
474:       assertFalse(node0.isExprResult());
475:       assertFalse(node0.isDefaultCase());
476:       assertFalse(node0.isDo());
477:       assertFalse(node0.isVoid());
478:       assertFalse(node0.isEmpty());
479:       assertFalse(node0.isOr());
480:       assertFalse(node0.isGetProp());
481:       assertFalse(node0.isThis());
482:       assertFalse(node0.isBreak());
483:       assertFalse(node0.isThrow());
484:       assertFalse(node0.isFalse());
485:       assertFalse(node0.isHook());
486:       assertFalse(node0.isInstanceOf());
487:       assertFalse(node0.isWith());
488:       assertFalse(node0.isComma());
489:       assertEquals((-1), node0.getCharno());
490:       assertFalse(node0.isScript());
491:       assertFalse(node0.hasOneChild());
492:       assertFalse(node0.isSwitch());
493:       assertFalse(node0.isCase());
494:       assertFalse(node0.isAnd());
495:       assertFalse(node0.isNumber());
496:       assertEquals((-1), node0.getSourcePosition());
497:       assertFalse(node0.isNot());
498:       assertFalse(node0.isObjectLit());
499:       assertFalse(node0.isNE());
500:       assertFalse(node0.isIf());
501:       assertEquals((-1), node0.getLineno());
502:       assertFalse(node0.isContinue());
503:       assertFalse(node0.isCast());
504:       assertFalse(node0.isFor());
505:       assertFalse(node0.hasMoreThanOneChild());
506:       assertFalse(node0.isInc());
507:       assertFalse(node0.isIn());
508:       assertEquals(37, Node.OPT_ARG_NAME);
509:       assertEquals(56, Node.CHANGE_TIME);
510:       assertEquals(32, Node.INCRDECR_PROP);
511:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
512:       assertEquals(29, Node.JSDOC_INFO_PROP);
513:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
514:       assertEquals(46, Node.IS_NAMESPACE);
515:       assertEquals(51, Node.STATIC_SOURCE_FILE);
516:       assertEquals(54, Node.SLASH_V);
517:       assertEquals(53, Node.INPUT_ID);
518:       assertEquals(43, Node.IS_CONSTANT_NAME);
519:       assertEquals(15, Node.NO_SIDE_EFFECTS);
520:       assertEquals(57, Node.LAST_PROP);
521:       assertEquals(40, Node.ORIGINALNAME_PROP);
522:       assertEquals(47, Node.IS_DISPATCHER);
523:       assertEquals(2, Node.POST_FLAG);
524:       assertEquals(30, Node.VAR_ARGS_NAME);
525:       assertEquals(8, Node.FLAG_NO_THROWS);
526:       assertEquals(39, Node.EMPTY_BLOCK);
527:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
528:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
529:       assertEquals(48, Node.DIRECTIVES);
530:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
531:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
532:       assertEquals(55, Node.INFERRED_FUNCTION);
533:       assertEquals(52, Node.LENGTH);
534:       assertEquals(57, Node.REFLECTED_OBJECT);
535:       assertEquals(36, Node.QUOTED_PROP);
536:       assertEquals(50, Node.FREE_CALL);
537:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
538:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
539:       assertEquals(49, Node.DIRECT_EVAL);
540:       assertEquals(1, Node.DECR_FLAG);
541:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
542:       assertEquals(12, Node.COLUMN_BITS);
543:       assertEquals(4095, Node.COLUMN_MASK);
544:       
545:       Node node1 = new Node(55);
546:       assertFalse(node1.isBlock());
547:       assertFalse(node1.isAdd());
548:       assertFalse(node1.isNew());
549:       assertFalse(node1.isCall());
550:       assertFalse(node1.isName());
551:       assertFalse(node1.isStringKey());
552:       assertFalse(node1.isNull());
553:       assertFalse(node1.isLabel());
554:       assertFalse(node1.isOr());
555:       assertFalse(node1.isParamList());
556:       assertFalse(node1.isAssignAdd());
557:       assertFalse(node1.isSetterDef());
558:       assertFalse(node1.isDo());
559:       assertFalse(node1.isContinue());
560:       assertFalse(node1.isDefaultCase());
561:       assertFalse(node1.isVar());
562:       assertEquals(0, node1.getChildCount());
563:       assertFalse(node1.isFunction());
564:       assertFalse(node1.isVoid());
565:       assertFalse(node1.isCast());
566:       assertFalse(node1.isExprResult());
567:       assertFalse(node1.isGetElem());
568:       assertFalse(node1.isEmpty());
569:       assertFalse(node1.isNot());
570:       assertFalse(node1.isAnd());
571:       assertFalse(node1.isObjectLit());
572:       assertFalse(node1.isDelProp());
573:       assertEquals((-1), node1.getSourcePosition());
574:       assertFalse(node1.isTrue());
575:       assertFalse(node1.isDebugger());
576:       assertFalse(node1.isBreak());
577:       assertFalse(node1.isGetProp());
578:       assertFalse(node1.isAssign());
579:       assertFalse(node1.isWhile());
580:       assertFalse(node1.isTypeOf());
581:       assertFalse(node1.isDec());
582:       assertFalse(node1.isComma());
583:       assertFalse(node1.hasChildren());
584:       assertFalse(node1.isReturn());
585:       assertFalse(node1.isSwitch());
586:       assertFalse(node1.isInc());
587:       assertFalse(node1.isString());
588:       assertEquals((-1), node1.getCharno());
589:       assertFalse(node1.isIn());
590:       assertFalse(node1.isThrow());
591:       assertFalse(node1.isFalse());
592:       assertFalse(node1.isTry());
593:       assertFalse(node1.isArrayLit());
594:       assertFalse(node1.isScript());
595:       assertFalse(node1.hasOneChild());
596:       assertFalse(node1.isLabelName());
597:       assertFalse(node1.isGetterDef());
598:       assertFalse(node1.isNumber());
599:       assertFalse(node1.isIf());
600:       assertFalse(node1.isNE());
601:       assertEquals(55, node1.getType());
602:       assertEquals((-1), node1.getLineno());
603:       assertFalse(node1.isCatch());
604:       assertFalse(node1.isInstanceOf());
605:       assertFalse(node1.isCase());
606:       assertFalse(node1.isFor());
607:       assertFalse(node1.hasMoreThanOneChild());
608:       assertFalse(node1.isWith());
609:       assertFalse(node1.isRegExp());
610:       assertFalse(node1.isThis());
611:       assertFalse(node1.isHook());
612:       assertNotNull(node1);
613:       assertFalse(node1.equals((Object)node0));
614:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
615:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
616:       assertEquals(53, Node.INPUT_ID);
617:       assertEquals(47, Node.IS_DISPATCHER);
618:       assertEquals(48, Node.DIRECTIVES);
619:       assertEquals(37, Node.OPT_ARG_NAME);
620:       assertEquals(8, Node.FLAG_NO_THROWS);
621:       assertEquals(4095, Node.COLUMN_MASK);
622:       assertEquals(55, Node.INFERRED_FUNCTION);
623:       assertEquals(39, Node.EMPTY_BLOCK);
624:       assertEquals(29, Node.JSDOC_INFO_PROP);
625:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
626:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
627:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
628:       assertEquals(49, Node.DIRECT_EVAL);
629:       assertEquals(56, Node.CHANGE_TIME);
630:       assertEquals(57, Node.REFLECTED_OBJECT);
631:       assertEquals(36, Node.QUOTED_PROP);
632:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
633:       assertEquals(52, Node.LENGTH);
634:       assertEquals(15, Node.NO_SIDE_EFFECTS);
635:       assertEquals(40, Node.ORIGINALNAME_PROP);
636:       assertEquals(1, Node.DECR_FLAG);
637:       assertEquals(30, Node.VAR_ARGS_NAME);
638:       assertEquals(57, Node.LAST_PROP);
639:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
640:       assertEquals(12, Node.COLUMN_BITS);
641:       assertEquals(2, Node.POST_FLAG);
642:       assertEquals(32, Node.INCRDECR_PROP);
643:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
644:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
645:       assertEquals(50, Node.FREE_CALL);
646:       assertEquals(43, Node.IS_CONSTANT_NAME);
647:       assertEquals(51, Node.STATIC_SOURCE_FILE);
648:       assertEquals(46, Node.IS_NAMESPACE);
649:       assertEquals(54, Node.SLASH_V);
650:       
651:       node1.type = 49;
652:       assertFalse(node1.isBlock());
653:       assertFalse(node1.isAdd());
654:       assertFalse(node1.isNew());
655:       assertFalse(node1.isCall());
656:       assertFalse(node1.isName());
657:       assertFalse(node1.isStringKey());
658:       assertFalse(node1.isNull());
659:       assertFalse(node1.isLabel());
660:       assertFalse(node1.isOr());
661:       assertFalse(node1.isParamList());
662:       assertTrue(node1.isThrow());
663:       assertFalse(node1.isAssignAdd());
664:       assertFalse(node1.isSetterDef());
665:       assertFalse(node1.isDo());
666:       assertFalse(node1.isContinue());
667:       assertFalse(node1.isDefaultCase());
668:       assertFalse(node1.isVar());
669:       assertEquals(0, node1.getChildCount());
670:       assertFalse(node1.isFunction());
671:       assertFalse(node1.isVoid());
672:       assertFalse(node1.isCast());
673:       assertFalse(node1.isExprResult());
674:       assertFalse(node1.isGetElem());
675:       assertFalse(node1.isEmpty());
676:       assertFalse(node1.isNot());
677:       assertFalse(node1.isAnd());
678:       assertFalse(node1.isObjectLit());
679:       assertFalse(node1.isDelProp());
680:       assertEquals((-1), node1.getSourcePosition());
681:       assertFalse(node1.isTrue());
682:       assertFalse(node1.isDebugger());
683:       assertEquals(49, node1.getType());
684:       assertFalse(node1.isBreak());
685:       assertFalse(node1.isGetProp());
686:       assertFalse(node1.isAssign());
687:       assertFalse(node1.isWhile());
688:       assertFalse(node1.isTypeOf());
689:       assertFalse(node1.isDec());
690:       assertFalse(node1.isComma());
691:       assertFalse(node1.hasChildren());
692:       assertFalse(node1.isReturn());
693:       assertFalse(node1.isSwitch());
694:       assertFalse(node1.isInc());
695:       assertFalse(node1.isString());
696:       assertEquals((-1), node1.getCharno());
697:       assertFalse(node1.isIn());
698:       assertFalse(node1.isFalse());
699:       assertFalse(node1.isTry());
700:       assertFalse(node1.isArrayLit());
701:       assertFalse(node1.isScript());
702:       assertFalse(node1.hasOneChild());
703:       assertFalse(node1.isLabelName());
704:       assertFalse(node1.isGetterDef());
705:       assertFalse(node1.isNumber());
706:       assertFalse(node1.isIf());
707:       assertFalse(node1.isNE());
708:       assertEquals((-1), node1.getLineno());
709:       assertFalse(node1.isCatch());
710:       assertFalse(node1.isInstanceOf());
711:       assertFalse(node1.isCase());
712:       assertFalse(node1.isFor());
713:       assertFalse(node1.hasMoreThanOneChild());
714:       assertFalse(node1.isWith());
715:       assertFalse(node1.isRegExp());
716:       assertFalse(node1.isThis());
717:       assertFalse(node1.isHook());
718:       
719:       Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
720:       assertFalse(node1.isBlock());
721:       assertFalse(node1.isAdd());
722:       assertFalse(node1.isNew());
723:       assertFalse(node1.isCall());
724:       assertFalse(node1.isName());
725:       assertFalse(node1.isStringKey());
726:       assertFalse(node1.isNull());
727:       assertFalse(node1.isLabel());
728:       assertFalse(node1.isOr());
729:       assertFalse(node1.isParamList());
730:       assertTrue(node1.isThrow());
731:       assertFalse(node1.isAssignAdd());
732:       assertFalse(node1.isSetterDef());
733:       assertFalse(node1.isDo());
734:       assertFalse(node1.isContinue());
735:       assertFalse(node1.isDefaultCase());
736:       assertFalse(node1.isVar());
737:       assertEquals(0, node1.getChildCount());
738:       assertFalse(node1.isFunction());
739:       assertFalse(node1.isVoid());
740:       assertFalse(node1.isCast());
741:       assertFalse(node1.isExprResult());
742:       assertFalse(node1.isGetElem());
743:       assertFalse(node1.isEmpty());
744:       assertFalse(node1.isNot());
745:       assertFalse(node1.isAnd());
746:       assertFalse(node1.isObjectLit());
747:       assertFalse(node1.isDelProp());
748:       assertEquals((-1), node1.getSourcePosition());
749:       assertFalse(node1.isTrue());
750:       assertFalse(node1.isDebugger());
751:       assertEquals(49, node1.getType());
752:       assertFalse(node1.isBreak());
753:       assertFalse(node1.isGetProp());
754:       assertFalse(node1.isAssign());
755:       assertFalse(node1.isWhile());
756:       assertFalse(node1.isTypeOf());
757:       assertFalse(node1.isDec());
758:       assertFalse(node1.isComma());
759:       assertFalse(node1.hasChildren());
760:       assertFalse(node1.isReturn());
761:       assertFalse(node1.isSwitch());
762:       assertFalse(node1.isInc());
763:       assertFalse(node1.isString());
764:       assertEquals((-1), node1.getCharno());
765:       assertFalse(node1.isIn());
766:       assertFalse(node1.isFalse());
767:       assertFalse(node1.isTry());
768:       assertFalse(node1.isArrayLit());
769:       assertFalse(node1.isScript());
770:       assertFalse(node1.hasOneChild());
771:       assertFalse(node1.isLabelName());
772:       assertFalse(node1.isGetterDef());
773:       assertFalse(node1.isNumber());
774:       assertFalse(node1.isIf());
775:       assertFalse(node1.isNE());
776:       assertEquals((-1), node1.getLineno());
777:       assertFalse(node1.isCatch());
778:       assertFalse(node1.isInstanceOf());
779:       assertFalse(node1.isCase());
780:       assertFalse(node1.isFor());
781:       assertFalse(node1.hasMoreThanOneChild());
782:       assertFalse(node1.isWith());
783:       assertFalse(node1.isRegExp());
784:       assertFalse(node1.isThis());
785:       assertFalse(node1.isHook());
786:       assertNotNull(node_AncestorIterable0);
787:       assertFalse(node1.equals((Object)node0));
788:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
789:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
790:       assertEquals(53, Node.INPUT_ID);
791:       assertEquals(47, Node.IS_DISPATCHER);
792:       assertEquals(48, Node.DIRECTIVES);
793:       assertEquals(37, Node.OPT_ARG_NAME);
794:       assertEquals(8, Node.FLAG_NO_THROWS);
795:       assertEquals(4095, Node.COLUMN_MASK);
796:       assertEquals(55, Node.INFERRED_FUNCTION);
797:       assertEquals(39, Node.EMPTY_BLOCK);
798:       assertEquals(29, Node.JSDOC_INFO_PROP);
799:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
800:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
801:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
802:       assertEquals(49, Node.DIRECT_EVAL);
803:       assertEquals(56, Node.CHANGE_TIME);
804:       assertEquals(57, Node.REFLECTED_OBJECT);
805:       assertEquals(36, Node.QUOTED_PROP);
806:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
807:       assertEquals(52, Node.LENGTH);
808:       assertEquals(15, Node.NO_SIDE_EFFECTS);
809:       assertEquals(40, Node.ORIGINALNAME_PROP);
810:       assertEquals(1, Node.DECR_FLAG);
811:       assertEquals(30, Node.VAR_ARGS_NAME);
812:       assertEquals(57, Node.LAST_PROP);
813:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
814:       assertEquals(12, Node.COLUMN_BITS);
815:       assertEquals(2, Node.POST_FLAG);
816:       assertEquals(32, Node.INCRDECR_PROP);
817:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
818:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
819:       assertEquals(50, Node.FREE_CALL);
820:       assertEquals(43, Node.IS_CONSTANT_NAME);
821:       assertEquals(51, Node.STATIC_SOURCE_FILE);
822:       assertEquals(46, Node.IS_NAMESPACE);
823:       assertEquals(54, Node.SLASH_V);
824:       
825:       boolean boolean0 = node1.isNew();
826:       assertFalse(node1.isBlock());
827:       assertFalse(node1.isAdd());
828:       assertFalse(node1.isNew());
829:       assertFalse(node1.isCall());
830:       assertFalse(node1.isName());
831:       assertFalse(node1.isStringKey());
832:       assertFalse(node1.isNull());
833:       assertFalse(node1.isLabel());
834:       assertFalse(node1.isOr());
835:       assertFalse(node1.isParamList());
836:       assertTrue(node1.isThrow());
837:       assertFalse(node1.isAssignAdd());
838:       assertFalse(node1.isSetterDef());
839:       assertFalse(node1.isDo());
840:       assertFalse(node1.isContinue());
841:       assertFalse(node1.isDefaultCase());
842:       assertFalse(node1.isVar());
843:       assertEquals(0, node1.getChildCount());
844:       assertFalse(node1.isFunction());
845:       assertFalse(node1.isVoid());
846:       assertFalse(node1.isCast());
847:       assertFalse(node1.isExprResult());
848:       assertFalse(node1.isGetElem());
849:       assertFalse(node1.isEmpty());
850:       assertFalse(node1.isNot());
851:       assertFalse(node1.isAnd());
852:       assertFalse(node1.isObjectLit());
853:       assertFalse(node1.isDelProp());
854:       assertEquals((-1), node1.getSourcePosition());
855:       assertFalse(node1.isTrue());
856:       assertFalse(node1.isDebugger());
857:       assertEquals(49, node1.getType());
858:       assertFalse(node1.isBreak());
859:       assertFalse(node1.isGetProp());
860:       assertFalse(node1.isAssign());
861:       assertFalse(node1.isWhile());
862:       assertFalse(node1.isTypeOf());
863:       assertFalse(node1.isDec());
864:       assertFalse(node1.isComma());
865:       assertFalse(node1.hasChildren());
866:       assertFalse(node1.isReturn());
867:       assertFalse(node1.isSwitch());
868:       assertFalse(node1.isInc());
869:       assertFalse(node1.isString());
870:       assertEquals((-1), node1.getCharno());
871:       assertFalse(node1.isIn());
872:       assertFalse(node1.isFalse());
873:       assertFalse(node1.isTry());
874:       assertFalse(node1.isArrayLit());
875:       assertFalse(node1.isScript());
876:       assertFalse(node1.hasOneChild());
877:       assertFalse(node1.isLabelName());
878:       assertFalse(node1.isGetterDef());
879:       assertFalse(node1.isNumber());
880:       assertFalse(node1.isIf());
881:       assertFalse(node1.isNE());
882:       assertEquals((-1), node1.getLineno());
883:       assertFalse(node1.isCatch());
884:       assertFalse(node1.isInstanceOf());
885:       assertFalse(node1.isCase());
886:       assertFalse(node1.isFor());
887:       assertFalse(node1.hasMoreThanOneChild());
888:       assertFalse(node1.isWith());
889:       assertFalse(node1.isRegExp());
890:       assertFalse(node1.isThis());
891:       assertFalse(node1.isHook());
892:       assertFalse(boolean0);
893:       assertFalse(node1.equals((Object)node0));
894:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
895:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
896:       assertEquals(53, Node.INPUT_ID);
897:       assertEquals(47, Node.IS_DISPATCHER);
898:       assertEquals(48, Node.DIRECTIVES);
899:       assertEquals(37, Node.OPT_ARG_NAME);
900:       assertEquals(8, Node.FLAG_NO_THROWS);
901:       assertEquals(4095, Node.COLUMN_MASK);
902:       assertEquals(55, Node.INFERRED_FUNCTION);
903:       assertEquals(39, Node.EMPTY_BLOCK);
904:       assertEquals(29, Node.JSDOC_INFO_PROP);
905:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
906:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
907:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
908:       assertEquals(49, Node.DIRECT_EVAL);
909:       assertEquals(56, Node.CHANGE_TIME);
910:       assertEquals(57, Node.REFLECTED_OBJECT);
911:       assertEquals(36, Node.QUOTED_PROP);
912:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
913:       assertEquals(52, Node.LENGTH);
914:       assertEquals(15, Node.NO_SIDE_EFFECTS);
915:       assertEquals(40, Node.ORIGINALNAME_PROP);
916:       assertEquals(1, Node.DECR_FLAG);
917:       assertEquals(30, Node.VAR_ARGS_NAME);
918:       assertEquals(57, Node.LAST_PROP);
919:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
920:       assertEquals(12, Node.COLUMN_BITS);
921:       assertEquals(2, Node.POST_FLAG);
922:       assertEquals(32, Node.INCRDECR_PROP);
923:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
924:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
925:       assertEquals(50, Node.FREE_CALL);
926:       assertEquals(43, Node.IS_CONSTANT_NAME);
927:       assertEquals(51, Node.STATIC_SOURCE_FILE);
928:       assertEquals(46, Node.IS_NAMESPACE);
929:       assertEquals(54, Node.SLASH_V);
930:       
931:       // Undeclared exception!
932:       try { 
933:         node0.addChildAfter(node1, node1);
934:         fail("Expecting exception: IllegalArgumentException");
935:       
936:       } catch(IllegalArgumentException e) {
937:          //
938:          // no message in exception (getMessage() returned null)
939:          //
940:          verifyException("com.google.common.base.Preconditions", e);
941:       }
942:   }
943: }
RegularFileObject[/tmp/EvoSuite_121_1629223219684/com/google/javascript/rhino/Node_121_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:00:19 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_121_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_121_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_121_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.common.base.Objects",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.common.collect.ImmutableSet",
337:       "com.google.common.collect.EmptyImmutableSet",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Platform",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.javascript.rhino.InputId",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.javascript.rhino.jstype.JSType$2",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.javascript.rhino.JSTypeExpression",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.common.collect.AbstractMultimap$Values",
360:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
361:       "com.google.common.collect.AbstractMapBasedMultimap$1",
362:       "com.google.common.collect.Multimaps$Entries",
363:       "com.google.common.collect.AbstractMultimap$Entries",
364:       "com.google.common.collect.AbstractMapBasedMultimap$2"
365:     );
366:   }
367: }

[MASTER] 18:00:19.805 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("Q#{!t ");
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertNotNull(node0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertNotNull(iterable0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

node0.setLength(122);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

String string0 = node0.toString();
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertNotNull(string0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

node0.setVarArgs(false);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isExprResult());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

Node node1 = new Node(55);
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDelProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(55, node1.getType());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

node1.type = 49;
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertTrue(node1.isThrow());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDelProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertEquals(49, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isHook());

Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertTrue(node1.isThrow());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDelProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertEquals(49, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertNotNull(node_AncestorIterable0);
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean0 = node1.isNew();
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isParamList());
assertTrue(node1.isThrow());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isContinue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDelProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertEquals(49, node1.getType());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(boolean0);
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

node0.addChildAfter(node1, node1);

[MASTER] 18:00:20.887 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_127_1629223220330/com/google/javascript/rhino/Node_127_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_127_1629223220330/com/google/javascript/rhino/Node_127_tmp__ESTest_scaffolding.java]]
[MASTER] 18:00:20.887 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:20.887 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:20.888 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 18:00:20.896 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_127_1629223220330/com/google/javascript/rhino/Node_127_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:00:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_127_tmp__ESTest extends Node_127_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("Q#{!t ");
21:       assertFalse(node0.isHook());
22:       assertFalse(node0.isThrow());
23:       assertFalse(node0.isFalse());
24:       assertEquals((-1), node0.getCharno());
25:       assertFalse(node0.isInc());
26:       assertFalse(node0.isThis());
27:       assertFalse(node0.isCase());
28:       assertFalse(node0.isGetProp());
29:       assertFalse(node0.isInstanceOf());
30:       assertFalse(node0.isIn());
31:       assertFalse(node0.isWith());
32:       assertFalse(node0.isComma());
33:       assertFalse(node0.isIf());
34:       assertFalse(node0.isBreak());
35:       assertFalse(node0.isNE());
36:       assertFalse(node0.isExprResult());
37:       assertFalse(node0.isDelProp());
38:       assertFalse(node0.hasOneChild());
39:       assertFalse(node0.isArrayLit());
40:       assertFalse(node0.isGetterDef());
41:       assertFalse(node0.isRegExp());
42:       assertFalse(node0.isNumber());
43:       assertFalse(node0.isDefaultCase());
44:       assertFalse(node0.isEmpty());
45:       assertFalse(node0.isFor());
46:       assertFalse(node0.isScript());
47:       assertFalse(node0.isAssignAdd());
48:       assertFalse(node0.isTry());
49:       assertFalse(node0.isLabel());
50:       assertEquals(0, node0.getChildCount());
51:       assertFalse(node0.isParamList());
52:       assertFalse(node0.isStringKey());
53:       assertFalse(node0.isSwitch());
54:       assertFalse(node0.isLabelName());
55:       assertFalse(node0.isCall());
56:       assertFalse(node0.isVar());
57:       assertFalse(node0.isAdd());
58:       assertFalse(node0.isBlock());
59:       assertFalse(node0.isSetterDef());
60:       assertFalse(node0.isWhile());
61:       assertFalse(node0.isNew());
62:       assertTrue(node0.isString());
63:       assertFalse(node0.isDo());
64:       assertFalse(node0.isCatch());
65:       assertFalse(node0.isReturn());
66:       assertFalse(node0.hasMoreThanOneChild());
67:       assertFalse(node0.isOr());
68:       assertFalse(node0.isTypeOf());
69:       assertFalse(node0.isTrue());
70:       assertFalse(node0.isNull());
71:       assertFalse(node0.isGetElem());
72:       assertFalse(node0.isName());
73:       assertEquals((-1), node0.getLineno());
74:       assertFalse(node0.isVoid());
75:       assertFalse(node0.isCast());
76:       assertFalse(node0.isDebugger());
77:       assertFalse(node0.isFunction());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.isDec());
80:       assertFalse(node0.hasChildren());
81:       assertEquals(40, node0.getType());
82:       assertFalse(node0.isContinue());
83:       assertFalse(node0.isNot());
84:       assertFalse(node0.isObjectLit());
85:       assertEquals((-1), node0.getSourcePosition());
86:       assertFalse(node0.isAnd());
87:       assertNotNull(node0);
88:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
89:       assertEquals(36, Node.QUOTED_PROP);
90:       assertEquals(43, Node.IS_CONSTANT_NAME);
91:       assertEquals(56, Node.CHANGE_TIME);
92:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
93:       assertEquals(37, Node.OPT_ARG_NAME);
94:       assertEquals(32, Node.INCRDECR_PROP);
95:       assertEquals(46, Node.IS_NAMESPACE);
96:       assertEquals(12, Node.COLUMN_BITS);
97:       assertEquals(4095, Node.COLUMN_MASK);
98:       assertEquals(51, Node.STATIC_SOURCE_FILE);
99:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
101:       assertEquals(1, Node.DECR_FLAG);
102:       assertEquals(52, Node.LENGTH);
103:       assertEquals(57, Node.REFLECTED_OBJECT);
104:       assertEquals(54, Node.SLASH_V);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(50, Node.FREE_CALL);
107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
108:       assertEquals(48, Node.DIRECTIVES);
109:       assertEquals(40, Node.ORIGINALNAME_PROP);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(8, Node.FLAG_NO_THROWS);
113:       assertEquals(2, Node.POST_FLAG);
114:       assertEquals(30, Node.VAR_ARGS_NAME);
115:       assertEquals(57, Node.LAST_PROP);
116:       assertEquals(15, Node.NO_SIDE_EFFECTS);
117:       assertEquals(47, Node.IS_DISPATCHER);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(29, Node.JSDOC_INFO_PROP);
120:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
121:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
122:       assertEquals(39, Node.EMPTY_BLOCK);
123:       assertEquals(53, Node.INPUT_ID);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertFalse(node0.isHook());
128:       assertFalse(node0.isThrow());
129:       assertFalse(node0.isFalse());
130:       assertEquals((-1), node0.getCharno());
131:       assertFalse(node0.isInc());
132:       assertFalse(node0.isThis());
133:       assertFalse(node0.isCase());
134:       assertFalse(node0.isGetProp());
135:       assertFalse(node0.isInstanceOf());
136:       assertFalse(node0.isIn());
137:       assertFalse(node0.isWith());
138:       assertFalse(node0.isComma());
139:       assertFalse(node0.isIf());
140:       assertFalse(node0.isBreak());
141:       assertFalse(node0.isNE());
142:       assertFalse(node0.isExprResult());
143:       assertFalse(node0.isDelProp());
144:       assertFalse(node0.hasOneChild());
145:       assertFalse(node0.isArrayLit());
146:       assertFalse(node0.isGetterDef());
147:       assertFalse(node0.isRegExp());
148:       assertFalse(node0.isNumber());
149:       assertFalse(node0.isDefaultCase());
150:       assertFalse(node0.isEmpty());
151:       assertFalse(node0.isFor());
152:       assertFalse(node0.isScript());
153:       assertFalse(node0.isAssignAdd());
154:       assertFalse(node0.isTry());
155:       assertFalse(node0.isLabel());
156:       assertEquals(0, node0.getChildCount());
157:       assertFalse(node0.isParamList());
158:       assertFalse(node0.isStringKey());
159:       assertFalse(node0.isSwitch());
160:       assertFalse(node0.isLabelName());
161:       assertFalse(node0.isCall());
162:       assertFalse(node0.isVar());
163:       assertFalse(node0.isAdd());
164:       assertFalse(node0.isBlock());
165:       assertFalse(node0.isSetterDef());
166:       assertFalse(node0.isWhile());
167:       assertFalse(node0.isNew());
168:       assertTrue(node0.isString());
169:       assertFalse(node0.isDo());
170:       assertFalse(node0.isCatch());
171:       assertFalse(node0.isReturn());
172:       assertFalse(node0.hasMoreThanOneChild());
173:       assertFalse(node0.isOr());
174:       assertFalse(node0.isTypeOf());
175:       assertFalse(node0.isTrue());
176:       assertFalse(node0.isNull());
177:       assertFalse(node0.isGetElem());
178:       assertFalse(node0.isName());
179:       assertEquals((-1), node0.getLineno());
180:       assertFalse(node0.isVoid());
181:       assertFalse(node0.isCast());
182:       assertFalse(node0.isDebugger());
183:       assertFalse(node0.isFunction());
184:       assertFalse(node0.isAssign());
185:       assertFalse(node0.isDec());
186:       assertFalse(node0.hasChildren());
187:       assertEquals(40, node0.getType());
188:       assertFalse(node0.isContinue());
189:       assertFalse(node0.isNot());
190:       assertFalse(node0.isObjectLit());
191:       assertEquals((-1), node0.getSourcePosition());
192:       assertFalse(node0.isAnd());
193:       assertNotNull(iterable0);
194:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
195:       assertEquals(36, Node.QUOTED_PROP);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(56, Node.CHANGE_TIME);
198:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
199:       assertEquals(37, Node.OPT_ARG_NAME);
200:       assertEquals(32, Node.INCRDECR_PROP);
201:       assertEquals(46, Node.IS_NAMESPACE);
202:       assertEquals(12, Node.COLUMN_BITS);
203:       assertEquals(4095, Node.COLUMN_MASK);
204:       assertEquals(51, Node.STATIC_SOURCE_FILE);
205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
207:       assertEquals(1, Node.DECR_FLAG);
208:       assertEquals(52, Node.LENGTH);
209:       assertEquals(57, Node.REFLECTED_OBJECT);
210:       assertEquals(54, Node.SLASH_V);
211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
212:       assertEquals(50, Node.FREE_CALL);
213:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
214:       assertEquals(48, Node.DIRECTIVES);
215:       assertEquals(40, Node.ORIGINALNAME_PROP);
216:       assertEquals(49, Node.DIRECT_EVAL);
217:       assertEquals(55, Node.INFERRED_FUNCTION);
218:       assertEquals(8, Node.FLAG_NO_THROWS);
219:       assertEquals(2, Node.POST_FLAG);
220:       assertEquals(30, Node.VAR_ARGS_NAME);
221:       assertEquals(57, Node.LAST_PROP);
222:       assertEquals(15, Node.NO_SIDE_EFFECTS);
223:       assertEquals(47, Node.IS_DISPATCHER);
224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
225:       assertEquals(29, Node.JSDOC_INFO_PROP);
226:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
227:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
228:       assertEquals(39, Node.EMPTY_BLOCK);
229:       assertEquals(53, Node.INPUT_ID);
230:       
231:       node0.setLength(122);
232:       assertFalse(node0.isHook());
233:       assertFalse(node0.isThrow());
234:       assertFalse(node0.isFalse());
235:       assertEquals((-1), node0.getCharno());
236:       assertFalse(node0.isInc());
237:       assertFalse(node0.isThis());
238:       assertFalse(node0.isCase());
239:       assertFalse(node0.isGetProp());
240:       assertFalse(node0.isInstanceOf());
241:       assertFalse(node0.isIn());
242:       assertFalse(node0.isWith());
243:       assertFalse(node0.isComma());
244:       assertFalse(node0.isIf());
245:       assertFalse(node0.isBreak());
246:       assertFalse(node0.isNE());
247:       assertFalse(node0.isExprResult());
248:       assertFalse(node0.isDelProp());
249:       assertFalse(node0.hasOneChild());
250:       assertFalse(node0.isArrayLit());
251:       assertFalse(node0.isGetterDef());
252:       assertFalse(node0.isRegExp());
253:       assertFalse(node0.isNumber());
254:       assertFalse(node0.isDefaultCase());
255:       assertFalse(node0.isEmpty());
256:       assertFalse(node0.isFor());
257:       assertFalse(node0.isScript());
258:       assertFalse(node0.isAssignAdd());
259:       assertFalse(node0.isTry());
260:       assertFalse(node0.isLabel());
261:       assertEquals(0, node0.getChildCount());
262:       assertFalse(node0.isParamList());
263:       assertFalse(node0.isStringKey());
264:       assertFalse(node0.isSwitch());
265:       assertFalse(node0.isLabelName());
266:       assertFalse(node0.isCall());
267:       assertFalse(node0.isVar());
268:       assertFalse(node0.isAdd());
269:       assertFalse(node0.isBlock());
270:       assertFalse(node0.isSetterDef());
271:       assertFalse(node0.isWhile());
272:       assertFalse(node0.isNew());
273:       assertTrue(node0.isString());
274:       assertFalse(node0.isDo());
275:       assertFalse(node0.isCatch());
276:       assertFalse(node0.isReturn());
277:       assertFalse(node0.hasMoreThanOneChild());
278:       assertFalse(node0.isOr());
279:       assertFalse(node0.isTypeOf());
280:       assertFalse(node0.isTrue());
281:       assertFalse(node0.isNull());
282:       assertFalse(node0.isGetElem());
283:       assertFalse(node0.isName());
284:       assertEquals((-1), node0.getLineno());
285:       assertFalse(node0.isVoid());
286:       assertFalse(node0.isCast());
287:       assertFalse(node0.isDebugger());
288:       assertFalse(node0.isFunction());
289:       assertFalse(node0.isAssign());
290:       assertFalse(node0.isDec());
291:       assertFalse(node0.hasChildren());
292:       assertEquals(40, node0.getType());
293:       assertFalse(node0.isContinue());
294:       assertFalse(node0.isNot());
295:       assertFalse(node0.isObjectLit());
296:       assertEquals((-1), node0.getSourcePosition());
297:       assertFalse(node0.isAnd());
298:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
299:       assertEquals(36, Node.QUOTED_PROP);
300:       assertEquals(43, Node.IS_CONSTANT_NAME);
301:       assertEquals(56, Node.CHANGE_TIME);
302:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
303:       assertEquals(37, Node.OPT_ARG_NAME);
304:       assertEquals(32, Node.INCRDECR_PROP);
305:       assertEquals(46, Node.IS_NAMESPACE);
306:       assertEquals(12, Node.COLUMN_BITS);
307:       assertEquals(4095, Node.COLUMN_MASK);
308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
309:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
311:       assertEquals(1, Node.DECR_FLAG);
312:       assertEquals(52, Node.LENGTH);
313:       assertEquals(57, Node.REFLECTED_OBJECT);
314:       assertEquals(54, Node.SLASH_V);
315:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
316:       assertEquals(50, Node.FREE_CALL);
317:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
318:       assertEquals(48, Node.DIRECTIVES);
319:       assertEquals(40, Node.ORIGINALNAME_PROP);
320:       assertEquals(49, Node.DIRECT_EVAL);
321:       assertEquals(55, Node.INFERRED_FUNCTION);
322:       assertEquals(8, Node.FLAG_NO_THROWS);
323:       assertEquals(2, Node.POST_FLAG);
324:       assertEquals(30, Node.VAR_ARGS_NAME);
325:       assertEquals(57, Node.LAST_PROP);
326:       assertEquals(15, Node.NO_SIDE_EFFECTS);
327:       assertEquals(47, Node.IS_DISPATCHER);
328:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
329:       assertEquals(29, Node.JSDOC_INFO_PROP);
330:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
331:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
332:       assertEquals(39, Node.EMPTY_BLOCK);
333:       assertEquals(53, Node.INPUT_ID);
334:       
335:       String string0 = node0.toString();
336:       assertFalse(node0.isHook());
337:       assertFalse(node0.isThrow());
338:       assertFalse(node0.isFalse());
339:       assertEquals((-1), node0.getCharno());
340:       assertFalse(node0.isInc());
341:       assertFalse(node0.isThis());
342:       assertFalse(node0.isCase());
343:       assertFalse(node0.isGetProp());
344:       assertFalse(node0.isInstanceOf());
345:       assertFalse(node0.isIn());
346:       assertFalse(node0.isWith());
347:       assertFalse(node0.isComma());
348:       assertFalse(node0.isIf());
349:       assertFalse(node0.isBreak());
350:       assertFalse(node0.isNE());
351:       assertFalse(node0.isExprResult());
352:       assertFalse(node0.isDelProp());
353:       assertFalse(node0.hasOneChild());
354:       assertFalse(node0.isArrayLit());
355:       assertFalse(node0.isGetterDef());
356:       assertFalse(node0.isRegExp());
357:       assertFalse(node0.isNumber());
358:       assertFalse(node0.isDefaultCase());
359:       assertFalse(node0.isEmpty());
360:       assertFalse(node0.isFor());
361:       assertFalse(node0.isScript());
362:       assertFalse(node0.isAssignAdd());
363:       assertFalse(node0.isTry());
364:       assertFalse(node0.isLabel());
365:       assertEquals(0, node0.getChildCount());
366:       assertFalse(node0.isParamList());
367:       assertFalse(node0.isStringKey());
368:       assertFalse(node0.isSwitch());
369:       assertFalse(node0.isLabelName());
370:       assertFalse(node0.isCall());
371:       assertFalse(node0.isVar());
372:       assertFalse(node0.isAdd());
373:       assertFalse(node0.isBlock());
374:       assertFalse(node0.isSetterDef());
375:       assertFalse(node0.isWhile());
376:       assertFalse(node0.isNew());
377:       assertTrue(node0.isString());
378:       assertFalse(node0.isDo());
379:       assertFalse(node0.isCatch());
380:       assertFalse(node0.isReturn());
381:       assertFalse(node0.hasMoreThanOneChild());
382:       assertFalse(node0.isOr());
383:       assertFalse(node0.isTypeOf());
384:       assertFalse(node0.isTrue());
385:       assertFalse(node0.isNull());
386:       assertFalse(node0.isGetElem());
387:       assertFalse(node0.isName());
388:       assertEquals((-1), node0.getLineno());
389:       assertFalse(node0.isVoid());
390:       assertFalse(node0.isCast());
391:       assertFalse(node0.isDebugger());
392:       assertFalse(node0.isFunction());
393:       assertFalse(node0.isAssign());
394:       assertFalse(node0.isDec());
395:       assertFalse(node0.hasChildren());
396:       assertEquals(40, node0.getType());
397:       assertFalse(node0.isContinue());
398:       assertFalse(node0.isNot());
399:       assertFalse(node0.isObjectLit());
400:       assertEquals((-1), node0.getSourcePosition());
401:       assertFalse(node0.isAnd());
402:       assertNotNull(string0);
403:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
404:       assertEquals(36, Node.QUOTED_PROP);
405:       assertEquals(43, Node.IS_CONSTANT_NAME);
406:       assertEquals(56, Node.CHANGE_TIME);
407:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
408:       assertEquals(37, Node.OPT_ARG_NAME);
409:       assertEquals(32, Node.INCRDECR_PROP);
410:       assertEquals(46, Node.IS_NAMESPACE);
411:       assertEquals(12, Node.COLUMN_BITS);
412:       assertEquals(4095, Node.COLUMN_MASK);
413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
414:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
415:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
416:       assertEquals(1, Node.DECR_FLAG);
417:       assertEquals(52, Node.LENGTH);
418:       assertEquals(57, Node.REFLECTED_OBJECT);
419:       assertEquals(54, Node.SLASH_V);
420:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
421:       assertEquals(50, Node.FREE_CALL);
422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
423:       assertEquals(48, Node.DIRECTIVES);
424:       assertEquals(40, Node.ORIGINALNAME_PROP);
425:       assertEquals(49, Node.DIRECT_EVAL);
426:       assertEquals(55, Node.INFERRED_FUNCTION);
427:       assertEquals(8, Node.FLAG_NO_THROWS);
428:       assertEquals(2, Node.POST_FLAG);
429:       assertEquals(30, Node.VAR_ARGS_NAME);
430:       assertEquals(57, Node.LAST_PROP);
431:       assertEquals(15, Node.NO_SIDE_EFFECTS);
432:       assertEquals(47, Node.IS_DISPATCHER);
433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
434:       assertEquals(29, Node.JSDOC_INFO_PROP);
435:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
436:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
437:       assertEquals(39, Node.EMPTY_BLOCK);
438:       assertEquals(53, Node.INPUT_ID);
439:       
440:       node0.setOptionalArg(false);
441:       assertFalse(node0.isHook());
442:       assertFalse(node0.isThrow());
443:       assertFalse(node0.isFalse());
444:       assertEquals((-1), node0.getCharno());
445:       assertFalse(node0.isInc());
446:       assertFalse(node0.isThis());
447:       assertFalse(node0.isCase());
448:       assertFalse(node0.isGetProp());
449:       assertFalse(node0.isInstanceOf());
450:       assertFalse(node0.isIn());
451:       assertFalse(node0.isWith());
452:       assertFalse(node0.isComma());
453:       assertFalse(node0.isIf());
454:       assertFalse(node0.isBreak());
455:       assertFalse(node0.isNE());
456:       assertFalse(node0.isExprResult());
457:       assertFalse(node0.isDelProp());
458:       assertFalse(node0.hasOneChild());
459:       assertFalse(node0.isArrayLit());
460:       assertFalse(node0.isGetterDef());
461:       assertFalse(node0.isRegExp());
462:       assertFalse(node0.isNumber());
463:       assertFalse(node0.isDefaultCase());
464:       assertFalse(node0.isEmpty());
465:       assertFalse(node0.isFor());
466:       assertFalse(node0.isScript());
467:       assertFalse(node0.isAssignAdd());
468:       assertFalse(node0.isTry());
469:       assertFalse(node0.isLabel());
470:       assertEquals(0, node0.getChildCount());
471:       assertFalse(node0.isParamList());
472:       assertFalse(node0.isStringKey());
473:       assertFalse(node0.isSwitch());
474:       assertFalse(node0.isLabelName());
475:       assertFalse(node0.isCall());
476:       assertFalse(node0.isVar());
477:       assertFalse(node0.isAdd());
478:       assertFalse(node0.isBlock());
479:       assertFalse(node0.isSetterDef());
480:       assertFalse(node0.isWhile());
481:       assertFalse(node0.isNew());
482:       assertTrue(node0.isString());
483:       assertFalse(node0.isDo());
484:       assertFalse(node0.isCatch());
485:       assertFalse(node0.isReturn());
486:       assertFalse(node0.hasMoreThanOneChild());
487:       assertFalse(node0.isOr());
488:       assertFalse(node0.isTypeOf());
489:       assertFalse(node0.isTrue());
490:       assertFalse(node0.isNull());
491:       assertFalse(node0.isGetElem());
492:       assertFalse(node0.isName());
493:       assertEquals((-1), node0.getLineno());
494:       assertFalse(node0.isVoid());
495:       assertFalse(node0.isCast());
496:       assertFalse(node0.isDebugger());
497:       assertFalse(node0.isFunction());
498:       assertFalse(node0.isAssign());
499:       assertFalse(node0.isDec());
500:       assertFalse(node0.hasChildren());
501:       assertEquals(40, node0.getType());
502:       assertFalse(node0.isContinue());
503:       assertFalse(node0.isNot());
504:       assertFalse(node0.isObjectLit());
505:       assertEquals((-1), node0.getSourcePosition());
506:       assertFalse(node0.isAnd());
507:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
508:       assertEquals(36, Node.QUOTED_PROP);
509:       assertEquals(43, Node.IS_CONSTANT_NAME);
510:       assertEquals(56, Node.CHANGE_TIME);
511:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
512:       assertEquals(37, Node.OPT_ARG_NAME);
513:       assertEquals(32, Node.INCRDECR_PROP);
514:       assertEquals(46, Node.IS_NAMESPACE);
515:       assertEquals(12, Node.COLUMN_BITS);
516:       assertEquals(4095, Node.COLUMN_MASK);
517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
518:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
519:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
520:       assertEquals(1, Node.DECR_FLAG);
521:       assertEquals(52, Node.LENGTH);
522:       assertEquals(57, Node.REFLECTED_OBJECT);
523:       assertEquals(54, Node.SLASH_V);
524:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
525:       assertEquals(50, Node.FREE_CALL);
526:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
527:       assertEquals(48, Node.DIRECTIVES);
528:       assertEquals(40, Node.ORIGINALNAME_PROP);
529:       assertEquals(49, Node.DIRECT_EVAL);
530:       assertEquals(55, Node.INFERRED_FUNCTION);
531:       assertEquals(8, Node.FLAG_NO_THROWS);
532:       assertEquals(2, Node.POST_FLAG);
533:       assertEquals(30, Node.VAR_ARGS_NAME);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(15, Node.NO_SIDE_EFFECTS);
536:       assertEquals(47, Node.IS_DISPATCHER);
537:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
538:       assertEquals(29, Node.JSDOC_INFO_PROP);
539:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
540:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
541:       assertEquals(39, Node.EMPTY_BLOCK);
542:       assertEquals(53, Node.INPUT_ID);
543:       
544:       Node node1 = new Node(49, node0, node0);
545:       assertFalse(node0.isHook());
546:       assertFalse(node0.isThrow());
547:       assertFalse(node0.isFalse());
548:       assertEquals((-1), node0.getCharno());
549:       assertFalse(node0.isInc());
550:       assertFalse(node0.isThis());
551:       assertFalse(node0.isCase());
552:       assertFalse(node0.isGetProp());
553:       assertFalse(node0.isInstanceOf());
554:       assertFalse(node0.isIn());
555:       assertFalse(node0.isWith());
556:       assertFalse(node0.isComma());
557:       assertFalse(node0.isIf());
558:       assertFalse(node0.isBreak());
559:       assertFalse(node0.isNE());
560:       assertFalse(node0.isExprResult());
561:       assertFalse(node0.isDelProp());
562:       assertFalse(node0.hasOneChild());
563:       assertFalse(node0.isArrayLit());
564:       assertFalse(node0.isGetterDef());
565:       assertFalse(node0.isRegExp());
566:       assertFalse(node0.isNumber());
567:       assertFalse(node0.isDefaultCase());
568:       assertFalse(node0.isEmpty());
569:       assertFalse(node0.isFor());
570:       assertFalse(node0.isScript());
571:       assertFalse(node0.isAssignAdd());
572:       assertFalse(node0.isTry());
573:       assertFalse(node0.isLabel());
574:       assertEquals(0, node0.getChildCount());
575:       assertFalse(node0.isParamList());
576:       assertFalse(node0.isStringKey());
577:       assertFalse(node0.isSwitch());
578:       assertFalse(node0.isLabelName());
579:       assertFalse(node0.isCall());
580:       assertFalse(node0.isVar());
581:       assertFalse(node0.isAdd());
582:       assertFalse(node0.isBlock());
583:       assertFalse(node0.isSetterDef());
584:       assertFalse(node0.isWhile());
585:       assertFalse(node0.isNew());
586:       assertTrue(node0.isString());
587:       assertFalse(node0.isDo());
588:       assertFalse(node0.isCatch());
589:       assertFalse(node0.isReturn());
590:       assertFalse(node0.hasMoreThanOneChild());
591:       assertFalse(node0.isOr());
592:       assertFalse(node0.isTypeOf());
593:       assertFalse(node0.isTrue());
594:       assertFalse(node0.isNull());
595:       assertFalse(node0.isGetElem());
596:       assertFalse(node0.isName());
597:       assertEquals((-1), node0.getLineno());
598:       assertFalse(node0.isVoid());
599:       assertFalse(node0.isCast());
600:       assertFalse(node0.isDebugger());
601:       assertFalse(node0.isFunction());
602:       assertFalse(node0.isAssign());
603:       assertFalse(node0.isDec());
604:       assertFalse(node0.hasChildren());
605:       assertEquals(40, node0.getType());
606:       assertFalse(node0.isContinue());
607:       assertFalse(node0.isNot());
608:       assertFalse(node0.isObjectLit());
609:       assertEquals((-1), node0.getSourcePosition());
610:       assertFalse(node0.isAnd());
611:       assertEquals(49, node1.getType());
612:       assertFalse(node1.isNE());
613:       assertTrue(node1.hasChildren());
614:       assertFalse(node1.isIf());
615:       assertFalse(node1.isDelProp());
616:       assertTrue(node1.hasOneChild());
617:       assertFalse(node1.isFor());
618:       assertEquals(1, node1.getChildCount());
619:       assertFalse(node1.isDebugger());
620:       assertEquals((-1), node1.getCharno());
621:       assertFalse(node1.isArrayLit());
622:       assertFalse(node1.isSwitch());
623:       assertFalse(node1.isTry());
624:       assertFalse(node1.isCase());
625:       assertFalse(node1.isString());
626:       assertFalse(node1.isGetterDef());
627:       assertFalse(node1.isSetterDef());
628:       assertFalse(node1.isThis());
629:       assertFalse(node1.isFalse());
630:       assertFalse(node1.isWith());
631:       assertFalse(node1.isCatch());
632:       assertFalse(node1.isHook());
633:       assertFalse(node1.isRegExp());
634:       assertFalse(node1.isInstanceOf());
635:       assertFalse(node1.isFunction());
636:       assertFalse(node1.isInc());
637:       assertFalse(node1.isIn());
638:       assertFalse(node1.isLabel());
639:       assertFalse(node1.isAssignAdd());
640:       assertFalse(node1.isReturn());
641:       assertEquals((-1), node1.getLineno());
642:       assertFalse(node1.isLabelName());
643:       assertFalse(node1.isGetElem());
644:       assertFalse(node1.isContinue());
645:       assertFalse(node1.isWhile());
646:       assertFalse(node1.isCast());
647:       assertFalse(node1.isDec());
648:       assertFalse(node1.isTypeOf());
649:       assertFalse(node1.hasMoreThanOneChild());
650:       assertFalse(node1.isAssign());
651:       assertFalse(node1.isBlock());
652:       assertFalse(node1.isScript());
653:       assertFalse(node1.isStringKey());
654:       assertFalse(node1.isAnd());
655:       assertFalse(node1.isNumber());
656:       assertEquals((-1), node1.getSourcePosition());
657:       assertFalse(node1.isObjectLit());
658:       assertFalse(node1.isNot());
659:       assertFalse(node1.isGetProp());
660:       assertFalse(node1.isParamList());
661:       assertFalse(node1.isBreak());
662:       assertFalse(node1.isCall());
663:       assertFalse(node1.isVar());
664:       assertTrue(node1.isThrow());
665:       assertFalse(node1.isComma());
666:       assertFalse(node1.isNew());
667:       assertFalse(node1.isTrue());
668:       assertFalse(node1.isExprResult());
669:       assertFalse(node1.isAdd());
670:       assertFalse(node1.isDefaultCase());
671:       assertFalse(node1.isDo());
672:       assertFalse(node1.isVoid());
673:       assertFalse(node1.isName());
674:       assertFalse(node1.isEmpty());
675:       assertFalse(node1.isNull());
676:       assertFalse(node1.isOr());
677:       assertNotNull(node1);
678:       assertFalse(node1.equals((Object)node0));
679:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
680:       assertEquals(36, Node.QUOTED_PROP);
681:       assertEquals(43, Node.IS_CONSTANT_NAME);
682:       assertEquals(56, Node.CHANGE_TIME);
683:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
684:       assertEquals(37, Node.OPT_ARG_NAME);
685:       assertEquals(32, Node.INCRDECR_PROP);
686:       assertEquals(46, Node.IS_NAMESPACE);
687:       assertEquals(12, Node.COLUMN_BITS);
688:       assertEquals(4095, Node.COLUMN_MASK);
689:       assertEquals(51, Node.STATIC_SOURCE_FILE);
690:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
691:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
692:       assertEquals(1, Node.DECR_FLAG);
693:       assertEquals(52, Node.LENGTH);
694:       assertEquals(57, Node.REFLECTED_OBJECT);
695:       assertEquals(54, Node.SLASH_V);
696:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
697:       assertEquals(50, Node.FREE_CALL);
698:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
699:       assertEquals(48, Node.DIRECTIVES);
700:       assertEquals(40, Node.ORIGINALNAME_PROP);
701:       assertEquals(49, Node.DIRECT_EVAL);
702:       assertEquals(55, Node.INFERRED_FUNCTION);
703:       assertEquals(8, Node.FLAG_NO_THROWS);
704:       assertEquals(2, Node.POST_FLAG);
705:       assertEquals(30, Node.VAR_ARGS_NAME);
706:       assertEquals(57, Node.LAST_PROP);
707:       assertEquals(15, Node.NO_SIDE_EFFECTS);
708:       assertEquals(47, Node.IS_DISPATCHER);
709:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
710:       assertEquals(29, Node.JSDOC_INFO_PROP);
711:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
712:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
713:       assertEquals(39, Node.EMPTY_BLOCK);
714:       assertEquals(53, Node.INPUT_ID);
715:       assertEquals(48, Node.DIRECTIVES);
716:       assertEquals(8, Node.FLAG_NO_THROWS);
717:       assertEquals(39, Node.EMPTY_BLOCK);
718:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
719:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
720:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
721:       assertEquals(55, Node.INFERRED_FUNCTION);
722:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
723:       assertEquals(57, Node.REFLECTED_OBJECT);
724:       assertEquals(50, Node.FREE_CALL);
725:       assertEquals(36, Node.QUOTED_PROP);
726:       assertEquals(54, Node.SLASH_V);
727:       assertEquals(53, Node.INPUT_ID);
728:       assertEquals(52, Node.LENGTH);
729:       assertEquals(43, Node.IS_CONSTANT_NAME);
730:       assertEquals(15, Node.NO_SIDE_EFFECTS);
731:       assertEquals(57, Node.LAST_PROP);
732:       assertEquals(40, Node.ORIGINALNAME_PROP);
733:       assertEquals(47, Node.IS_DISPATCHER);
734:       assertEquals(2, Node.POST_FLAG);
735:       assertEquals(30, Node.VAR_ARGS_NAME);
736:       assertEquals(56, Node.CHANGE_TIME);
737:       assertEquals(32, Node.INCRDECR_PROP);
738:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
739:       assertEquals(37, Node.OPT_ARG_NAME);
740:       assertEquals(29, Node.JSDOC_INFO_PROP);
741:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
742:       assertEquals(46, Node.IS_NAMESPACE);
743:       assertEquals(51, Node.STATIC_SOURCE_FILE);
744:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
745:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
746:       assertEquals(49, Node.DIRECT_EVAL);
747:       assertEquals(1, Node.DECR_FLAG);
748:       assertEquals(4095, Node.COLUMN_MASK);
749:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
750:       assertEquals(12, Node.COLUMN_BITS);
751:       
752:       boolean boolean0 = node1.isThis();
753:       assertFalse(node0.isHook());
754:       assertFalse(node0.isThrow());
755:       assertFalse(node0.isFalse());
756:       assertEquals((-1), node0.getCharno());
757:       assertFalse(node0.isInc());
758:       assertFalse(node0.isThis());
759:       assertFalse(node0.isCase());
760:       assertFalse(node0.isGetProp());
761:       assertFalse(node0.isInstanceOf());
762:       assertFalse(node0.isIn());
763:       assertFalse(node0.isWith());
764:       assertFalse(node0.isComma());
765:       assertFalse(node0.isIf());
766:       assertFalse(node0.isBreak());
767:       assertFalse(node0.isNE());
768:       assertFalse(node0.isExprResult());
769:       assertFalse(node0.isDelProp());
770:       assertFalse(node0.hasOneChild());
771:       assertFalse(node0.isArrayLit());
772:       assertFalse(node0.isGetterDef());
773:       assertFalse(node0.isRegExp());
774:       assertFalse(node0.isNumber());
775:       assertFalse(node0.isDefaultCase());
776:       assertFalse(node0.isEmpty());
777:       assertFalse(node0.isFor());
778:       assertFalse(node0.isScript());
779:       assertFalse(node0.isAssignAdd());
780:       assertFalse(node0.isTry());
781:       assertFalse(node0.isLabel());
782:       assertEquals(0, node0.getChildCount());
783:       assertFalse(node0.isParamList());
784:       assertFalse(node0.isStringKey());
785:       assertFalse(node0.isSwitch());
786:       assertFalse(node0.isLabelName());
787:       assertFalse(node0.isCall());
788:       assertFalse(node0.isVar());
789:       assertFalse(node0.isAdd());
790:       assertFalse(node0.isBlock());
791:       assertFalse(node0.isSetterDef());
792:       assertFalse(node0.isWhile());
793:       assertFalse(node0.isNew());
794:       assertTrue(node0.isString());
795:       assertFalse(node0.isDo());
796:       assertFalse(node0.isCatch());
797:       assertFalse(node0.isReturn());
798:       assertFalse(node0.hasMoreThanOneChild());
799:       assertFalse(node0.isOr());
800:       assertFalse(node0.isTypeOf());
801:       assertFalse(node0.isTrue());
802:       assertFalse(node0.isNull());
803:       assertFalse(node0.isGetElem());
804:       assertFalse(node0.isName());
805:       assertEquals((-1), node0.getLineno());
806:       assertFalse(node0.isVoid());
807:       assertFalse(node0.isCast());
808:       assertFalse(node0.isDebugger());
809:       assertFalse(node0.isFunction());
810:       assertFalse(node0.isAssign());
811:       assertFalse(node0.isDec());
812:       assertFalse(node0.hasChildren());
813:       assertEquals(40, node0.getType());
814:       assertFalse(node0.isContinue());
815:       assertFalse(node0.isNot());
816:       assertFalse(node0.isObjectLit());
817:       assertEquals((-1), node0.getSourcePosition());
818:       assertFalse(node0.isAnd());
819:       assertEquals(49, node1.getType());
820:       assertFalse(node1.isNE());
821:       assertTrue(node1.hasChildren());
822:       assertFalse(node1.isIf());
823:       assertFalse(node1.isDelProp());
824:       assertTrue(node1.hasOneChild());
825:       assertFalse(node1.isFor());
826:       assertEquals(1, node1.getChildCount());
827:       assertFalse(node1.isDebugger());
828:       assertEquals((-1), node1.getCharno());
829:       assertFalse(node1.isArrayLit());
830:       assertFalse(node1.isSwitch());
831:       assertFalse(node1.isTry());
832:       assertFalse(node1.isCase());
833:       assertFalse(node1.isString());
834:       assertFalse(node1.isGetterDef());
835:       assertFalse(node1.isSetterDef());
836:       assertFalse(node1.isThis());
837:       assertFalse(node1.isFalse());
838:       assertFalse(node1.isWith());
839:       assertFalse(node1.isCatch());
840:       assertFalse(node1.isHook());
841:       assertFalse(node1.isRegExp());
842:       assertFalse(node1.isInstanceOf());
843:       assertFalse(node1.isFunction());
844:       assertFalse(node1.isInc());
845:       assertFalse(node1.isIn());
846:       assertFalse(node1.isLabel());
847:       assertFalse(node1.isAssignAdd());
848:       assertFalse(node1.isReturn());
849:       assertEquals((-1), node1.getLineno());
850:       assertFalse(node1.isLabelName());
851:       assertFalse(node1.isGetElem());
852:       assertFalse(node1.isContinue());
853:       assertFalse(node1.isWhile());
854:       assertFalse(node1.isCast());
855:       assertFalse(node1.isDec());
856:       assertFalse(node1.isTypeOf());
857:       assertFalse(node1.hasMoreThanOneChild());
858:       assertFalse(node1.isAssign());
859:       assertFalse(node1.isBlock());
860:       assertFalse(node1.isScript());
861:       assertFalse(node1.isStringKey());
862:       assertFalse(node1.isAnd());
863:       assertFalse(node1.isNumber());
864:       assertEquals((-1), node1.getSourcePosition());
865:       assertFalse(node1.isObjectLit());
866:       assertFalse(node1.isNot());
867:       assertFalse(node1.isGetProp());
868:       assertFalse(node1.isParamList());
869:       assertFalse(node1.isBreak());
870:       assertFalse(node1.isCall());
871:       assertFalse(node1.isVar());
872:       assertTrue(node1.isThrow());
873:       assertFalse(node1.isComma());
874:       assertFalse(node1.isNew());
875:       assertFalse(node1.isTrue());
876:       assertFalse(node1.isExprResult());
877:       assertFalse(node1.isAdd());
878:       assertFalse(node1.isDefaultCase());
879:       assertFalse(node1.isDo());
880:       assertFalse(node1.isVoid());
881:       assertFalse(node1.isName());
882:       assertFalse(node1.isEmpty());
883:       assertFalse(node1.isNull());
884:       assertFalse(node1.isOr());
885:       assertFalse(boolean0);
886:       assertFalse(node0.equals((Object)node1));
887:       assertFalse(node1.equals((Object)node0));
888:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
889:       assertEquals(36, Node.QUOTED_PROP);
890:       assertEquals(43, Node.IS_CONSTANT_NAME);
891:       assertEquals(56, Node.CHANGE_TIME);
892:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
893:       assertEquals(37, Node.OPT_ARG_NAME);
894:       assertEquals(32, Node.INCRDECR_PROP);
895:       assertEquals(46, Node.IS_NAMESPACE);
896:       assertEquals(12, Node.COLUMN_BITS);
897:       assertEquals(4095, Node.COLUMN_MASK);
898:       assertEquals(51, Node.STATIC_SOURCE_FILE);
899:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
900:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
901:       assertEquals(1, Node.DECR_FLAG);
902:       assertEquals(52, Node.LENGTH);
903:       assertEquals(57, Node.REFLECTED_OBJECT);
904:       assertEquals(54, Node.SLASH_V);
905:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
906:       assertEquals(50, Node.FREE_CALL);
907:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
908:       assertEquals(48, Node.DIRECTIVES);
909:       assertEquals(40, Node.ORIGINALNAME_PROP);
910:       assertEquals(49, Node.DIRECT_EVAL);
911:       assertEquals(55, Node.INFERRED_FUNCTION);
912:       assertEquals(8, Node.FLAG_NO_THROWS);
913:       assertEquals(2, Node.POST_FLAG);
914:       assertEquals(30, Node.VAR_ARGS_NAME);
915:       assertEquals(57, Node.LAST_PROP);
916:       assertEquals(15, Node.NO_SIDE_EFFECTS);
917:       assertEquals(47, Node.IS_DISPATCHER);
918:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
919:       assertEquals(29, Node.JSDOC_INFO_PROP);
920:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
921:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
922:       assertEquals(39, Node.EMPTY_BLOCK);
923:       assertEquals(53, Node.INPUT_ID);
924:       assertEquals(48, Node.DIRECTIVES);
925:       assertEquals(8, Node.FLAG_NO_THROWS);
926:       assertEquals(39, Node.EMPTY_BLOCK);
927:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
928:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
929:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
930:       assertEquals(55, Node.INFERRED_FUNCTION);
931:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
932:       assertEquals(57, Node.REFLECTED_OBJECT);
933:       assertEquals(50, Node.FREE_CALL);
934:       assertEquals(36, Node.QUOTED_PROP);
935:       assertEquals(54, Node.SLASH_V);
936:       assertEquals(53, Node.INPUT_ID);
937:       assertEquals(52, Node.LENGTH);
938:       assertEquals(43, Node.IS_CONSTANT_NAME);
939:       assertEquals(15, Node.NO_SIDE_EFFECTS);
940:       assertEquals(57, Node.LAST_PROP);
941:       assertEquals(40, Node.ORIGINALNAME_PROP);
942:       assertEquals(47, Node.IS_DISPATCHER);
943:       assertEquals(2, Node.POST_FLAG);
944:       assertEquals(30, Node.VAR_ARGS_NAME);
945:       assertEquals(56, Node.CHANGE_TIME);
946:       assertEquals(32, Node.INCRDECR_PROP);
947:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
948:       assertEquals(37, Node.OPT_ARG_NAME);
949:       assertEquals(29, Node.JSDOC_INFO_PROP);
950:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
951:       assertEquals(46, Node.IS_NAMESPACE);
952:       assertEquals(51, Node.STATIC_SOURCE_FILE);
953:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
954:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
955:       assertEquals(49, Node.DIRECT_EVAL);
956:       assertEquals(1, Node.DECR_FLAG);
957:       assertEquals(4095, Node.COLUMN_MASK);
958:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
959:       assertEquals(12, Node.COLUMN_BITS);
960:       
961:       Node node2 = new Node(376, 46, 3208);
962:       assertFalse(node2.isNot());
963:       assertFalse(node2.isWith());
964:       assertFalse(node2.isObjectLit());
965:       assertFalse(node2.isAnd());
966:       assertEquals(3208, node2.getCharno());
967:       assertFalse(node2.isComma());
968:       assertFalse(node2.isCast());
969:       assertFalse(node2.isExprResult());
970:       assertFalse(node2.isInstanceOf());
971:       assertFalse(node2.isLabelName());
972:       assertFalse(node2.isAssign());
973:       assertFalse(node2.hasChildren());
974:       assertFalse(node2.isDec());
975:       assertFalse(node2.isThis());
976:       assertFalse(node2.isHook());
977:       assertFalse(node2.isGetProp());
978:       assertFalse(node2.hasOneChild());
979:       assertFalse(node2.isScript());
980:       assertFalse(node2.isNumber());
981:       assertFalse(node2.isString());
982:       assertFalse(node2.isCase());
983:       assertFalse(node2.isBlock());
984:       assertFalse(node2.hasMoreThanOneChild());
985:       assertFalse(node2.isContinue());
986:       assertEquals(191624, node2.getSourcePosition());
987:       assertFalse(node2.isFalse());
988:       assertFalse(node2.isNE());
989:       assertFalse(node2.isIf());
990:       assertFalse(node2.isThrow());
991:       assertFalse(node2.isSetterDef());
992:       assertFalse(node2.isInc());
993:       assertFalse(node2.isIn());
994:       assertFalse(node2.isTrue());
995:       assertFalse(node2.isDefaultCase());
996:       assertEquals(0, node2.getChildCount());
997:       assertFalse(node2.isVoid());
998:       assertFalse(node2.isArrayLit());
999:       assertFalse(node2.isRegExp());
1000:       assertFalse(node2.isFunction());
1001:       assertFalse(node2.isCatch());
1002:       assertFalse(node2.isFor());
1003:       assertFalse(node2.isGetterDef());
1004:       assertFalse(node2.isStringKey());
1005:       assertFalse(node2.isParamList());
1006:       assertFalse(node2.isTry());
1007:       assertFalse(node2.isDebugger());
1008:       assertEquals(46, node2.getLineno());
1009:       assertFalse(node2.isDo());
1010:       assertFalse(node2.isSwitch());
1011:       assertFalse(node2.isWhile());
1012:       assertFalse(node2.isLabel());
1013:       assertFalse(node2.isReturn());
1014:       assertFalse(node2.isCall());
1015:       assertFalse(node2.isTypeOf());
1016:       assertFalse(node2.isEmpty());
1017:       assertEquals(376, node2.getType());
1018:       assertFalse(node2.isGetElem());
1019:       assertFalse(node2.isName());
1020:       assertFalse(node2.isDelProp());
1021:       assertFalse(node2.isBreak());
1022:       assertFalse(node2.isVar());
1023:       assertFalse(node2.isNull());
1024:       assertFalse(node2.isAssignAdd());
1025:       assertFalse(node2.isOr());
1026:       assertFalse(node2.isAdd());
1027:       assertFalse(node2.isNew());
1028:       assertNotNull(node2);
1029:       assertFalse(node2.equals((Object)node0));
1030:       assertFalse(node2.equals((Object)node1));
1031:       assertEquals(1, Node.DECR_FLAG);
1032:       assertEquals(30, Node.VAR_ARGS_NAME);
1033:       assertEquals(49, Node.DIRECT_EVAL);
1034:       assertEquals(12, Node.COLUMN_BITS);
1035:       assertEquals(32, Node.INCRDECR_PROP);
1036:       assertEquals(46, Node.IS_NAMESPACE);
1037:       assertEquals(57, Node.LAST_PROP);
1038:       assertEquals(54, Node.SLASH_V);
1039:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1040:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1041:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1042:       assertEquals(52, Node.LENGTH);
1043:       assertEquals(29, Node.JSDOC_INFO_PROP);
1044:       assertEquals(50, Node.FREE_CALL);
1045:       assertEquals(40, Node.ORIGINALNAME_PROP);
1046:       assertEquals(47, Node.IS_DISPATCHER);
1047:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1048:       assertEquals(2, Node.POST_FLAG);
1049:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1050:       assertEquals(43, Node.IS_CONSTANT_NAME);
1051:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1052:       assertEquals(53, Node.INPUT_ID);
1053:       assertEquals(39, Node.EMPTY_BLOCK);
1054:       assertEquals(36, Node.QUOTED_PROP);
1055:       assertEquals(55, Node.INFERRED_FUNCTION);
1056:       assertEquals(8, Node.FLAG_NO_THROWS);
1057:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1058:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1059:       assertEquals(56, Node.CHANGE_TIME);
1060:       assertEquals(57, Node.REFLECTED_OBJECT);
1061:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1062:       assertEquals(48, Node.DIRECTIVES);
1063:       assertEquals(37, Node.OPT_ARG_NAME);
1064:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1065:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1066:       assertEquals(4095, Node.COLUMN_MASK);
1067:       
1068:       boolean boolean1 = node2.isBlock();
1069:       assertNotSame(node2, node1);
1070:       assertFalse(node2.isNot());
1071:       assertFalse(node2.isWith());
1072:       assertFalse(node2.isObjectLit());
1073:       assertFalse(node2.isAnd());
1074:       assertEquals(3208, node2.getCharno());
1075:       assertFalse(node2.isComma());
1076:       assertFalse(node2.isCast());
1077:       assertFalse(node2.isExprResult());
1078:       assertFalse(node2.isInstanceOf());
1079:       assertFalse(node2.isLabelName());
1080:       assertFalse(node2.isAssign());
1081:       assertFalse(node2.hasChildren());
1082:       assertFalse(node2.isDec());
1083:       assertFalse(node2.isThis());
1084:       assertFalse(node2.isHook());
1085:       assertFalse(node2.isGetProp());
1086:       assertFalse(node2.hasOneChild());
1087:       assertFalse(node2.isScript());
1088:       assertFalse(node2.isNumber());
1089:       assertFalse(node2.isString());
1090:       assertFalse(node2.isCase());
1091:       assertFalse(node2.isBlock());
1092:       assertFalse(node2.hasMoreThanOneChild());
1093:       assertFalse(node2.isContinue());
1094:       assertEquals(191624, node2.getSourcePosition());
1095:       assertFalse(node2.isFalse());
1096:       assertFalse(node2.isNE());
1097:       assertFalse(node2.isIf());
1098:       assertFalse(node2.isThrow());
1099:       assertFalse(node2.isSetterDef());
1100:       assertFalse(node2.isInc());
1101:       assertFalse(node2.isIn());
1102:       assertFalse(node2.isTrue());
1103:       assertFalse(node2.isDefaultCase());
1104:       assertEquals(0, node2.getChildCount());
1105:       assertFalse(node2.isVoid());
1106:       assertFalse(node2.isArrayLit());
1107:       assertFalse(node2.isRegExp());
1108:       assertFalse(node2.isFunction());
1109:       assertFalse(node2.isCatch());
1110:       assertFalse(node2.isFor());
1111:       assertFalse(node2.isGetterDef());
1112:       assertFalse(node2.isStringKey());
1113:       assertFalse(node2.isParamList());
1114:       assertFalse(node2.isTry());
1115:       assertFalse(node2.isDebugger());
1116:       assertEquals(46, node2.getLineno());
1117:       assertFalse(node2.isDo());
1118:       assertFalse(node2.isSwitch());
1119:       assertFalse(node2.isWhile());
1120:       assertFalse(node2.isLabel());
1121:       assertFalse(node2.isReturn());
1122:       assertFalse(node2.isCall());
1123:       assertFalse(node2.isTypeOf());
1124:       assertFalse(node2.isEmpty());
1125:       assertEquals(376, node2.getType());
1126:       assertFalse(node2.isGetElem());
1127:       assertFalse(node2.isName());
1128:       assertFalse(node2.isDelProp());
1129:       assertFalse(node2.isBreak());
1130:       assertFalse(node2.isVar());
1131:       assertFalse(node2.isNull());
1132:       assertFalse(node2.isAssignAdd());
1133:       assertFalse(node2.isOr());
1134:       assertFalse(node2.isAdd());
1135:       assertFalse(node2.isNew());
1136:       assertFalse(boolean1);
1137:       assertFalse(node2.equals((Object)node0));
1138:       assertFalse(node2.equals((Object)node1));
1139:       assertTrue(boolean1 == boolean0);
1140:       assertEquals(1, Node.DECR_FLAG);
1141:       assertEquals(30, Node.VAR_ARGS_NAME);
1142:       assertEquals(49, Node.DIRECT_EVAL);
1143:       assertEquals(12, Node.COLUMN_BITS);
1144:       assertEquals(32, Node.INCRDECR_PROP);
1145:       assertEquals(46, Node.IS_NAMESPACE);
1146:       assertEquals(57, Node.LAST_PROP);
1147:       assertEquals(54, Node.SLASH_V);
1148:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1149:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1150:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1151:       assertEquals(52, Node.LENGTH);
1152:       assertEquals(29, Node.JSDOC_INFO_PROP);
1153:       assertEquals(50, Node.FREE_CALL);
1154:       assertEquals(40, Node.ORIGINALNAME_PROP);
1155:       assertEquals(47, Node.IS_DISPATCHER);
1156:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1157:       assertEquals(2, Node.POST_FLAG);
1158:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1159:       assertEquals(43, Node.IS_CONSTANT_NAME);
1160:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1161:       assertEquals(53, Node.INPUT_ID);
1162:       assertEquals(39, Node.EMPTY_BLOCK);
1163:       assertEquals(36, Node.QUOTED_PROP);
1164:       assertEquals(55, Node.INFERRED_FUNCTION);
1165:       assertEquals(8, Node.FLAG_NO_THROWS);
1166:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1167:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1168:       assertEquals(56, Node.CHANGE_TIME);
1169:       assertEquals(57, Node.REFLECTED_OBJECT);
1170:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1171:       assertEquals(48, Node.DIRECTIVES);
1172:       assertEquals(37, Node.OPT_ARG_NAME);
1173:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1174:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1175:       assertEquals(4095, Node.COLUMN_MASK);
1176:       
1177:       boolean boolean2 = node0.isBlock();
1178:       assertFalse(node0.isHook());
1179:       assertFalse(node0.isThrow());
1180:       assertFalse(node0.isFalse());
1181:       assertEquals((-1), node0.getCharno());
1182:       assertFalse(node0.isInc());
1183:       assertFalse(node0.isThis());
1184:       assertFalse(node0.isCase());
1185:       assertFalse(node0.isGetProp());
1186:       assertFalse(node0.isInstanceOf());
1187:       assertFalse(node0.isIn());
1188:       assertFalse(node0.isWith());
1189:       assertFalse(node0.isComma());
1190:       assertFalse(node0.isIf());
1191:       assertFalse(node0.isBreak());
1192:       assertFalse(node0.isNE());
1193:       assertFalse(node0.isExprResult());
1194:       assertFalse(node0.isDelProp());
1195:       assertFalse(node0.hasOneChild());
1196:       assertFalse(node0.isArrayLit());
1197:       assertFalse(node0.isGetterDef());
1198:       assertFalse(node0.isRegExp());
1199:       assertFalse(node0.isNumber());
1200:       assertFalse(node0.isDefaultCase());
1201:       assertFalse(node0.isEmpty());
1202:       assertFalse(node0.isFor());
1203:       assertFalse(node0.isScript());
1204:       assertFalse(node0.isAssignAdd());
1205:       assertFalse(node0.isTry());
1206:       assertFalse(node0.isLabel());
1207:       assertEquals(0, node0.getChildCount());
1208:       assertFalse(node0.isParamList());
1209:       assertFalse(node0.isStringKey());
1210:       assertFalse(node0.isSwitch());
1211:       assertFalse(node0.isLabelName());
1212:       assertFalse(node0.isCall());
1213:       assertFalse(node0.isVar());
1214:       assertFalse(node0.isAdd());
1215:       assertFalse(node0.isBlock());
1216:       assertFalse(node0.isSetterDef());
1217:       assertFalse(node0.isWhile());
1218:       assertFalse(node0.isNew());
1219:       assertTrue(node0.isString());
1220:       assertFalse(node0.isDo());
1221:       assertFalse(node0.isCatch());
1222:       assertFalse(node0.isReturn());
1223:       assertFalse(node0.hasMoreThanOneChild());
1224:       assertFalse(node0.isOr());
1225:       assertFalse(node0.isTypeOf());
1226:       assertFalse(node0.isTrue());
1227:       assertFalse(node0.isNull());
1228:       assertFalse(node0.isGetElem());
1229:       assertFalse(node0.isName());
1230:       assertEquals((-1), node0.getLineno());
1231:       assertFalse(node0.isVoid());
1232:       assertFalse(node0.isCast());
1233:       assertFalse(node0.isDebugger());
1234:       assertFalse(node0.isFunction());
1235:       assertFalse(node0.isAssign());
1236:       assertFalse(node0.isDec());
1237:       assertFalse(node0.hasChildren());
1238:       assertEquals(40, node0.getType());
1239:       assertFalse(node0.isContinue());
1240:       assertFalse(node0.isNot());
1241:       assertFalse(node0.isObjectLit());
1242:       assertEquals((-1), node0.getSourcePosition());
1243:       assertFalse(node0.isAnd());
1244:       assertFalse(boolean2);
1245:       assertFalse(node0.equals((Object)node2));
1246:       assertFalse(node0.equals((Object)node1));
1247:       assertTrue(boolean2 == boolean1);
1248:       assertTrue(boolean2 == boolean0);
1249:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1250:       assertEquals(36, Node.QUOTED_PROP);
1251:       assertEquals(43, Node.IS_CONSTANT_NAME);
1252:       assertEquals(56, Node.CHANGE_TIME);
1253:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1254:       assertEquals(37, Node.OPT_ARG_NAME);
1255:       assertEquals(32, Node.INCRDECR_PROP);
1256:       assertEquals(46, Node.IS_NAMESPACE);
1257:       assertEquals(12, Node.COLUMN_BITS);
1258:       assertEquals(4095, Node.COLUMN_MASK);
1259:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1260:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1261:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1262:       assertEquals(1, Node.DECR_FLAG);
1263:       assertEquals(52, Node.LENGTH);
1264:       assertEquals(57, Node.REFLECTED_OBJECT);
1265:       assertEquals(54, Node.SLASH_V);
1266:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1267:       assertEquals(50, Node.FREE_CALL);
1268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1269:       assertEquals(48, Node.DIRECTIVES);
1270:       assertEquals(40, Node.ORIGINALNAME_PROP);
1271:       assertEquals(49, Node.DIRECT_EVAL);
1272:       assertEquals(55, Node.INFERRED_FUNCTION);
1273:       assertEquals(8, Node.FLAG_NO_THROWS);
1274:       assertEquals(2, Node.POST_FLAG);
1275:       assertEquals(30, Node.VAR_ARGS_NAME);
1276:       assertEquals(57, Node.LAST_PROP);
1277:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1278:       assertEquals(47, Node.IS_DISPATCHER);
1279:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1280:       assertEquals(29, Node.JSDOC_INFO_PROP);
1281:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1282:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1283:       assertEquals(39, Node.EMPTY_BLOCK);
1284:       assertEquals(53, Node.INPUT_ID);
1285:       
1286:       boolean boolean3 = node0.isFromExterns();
1287:       assertFalse(node0.isHook());
1288:       assertFalse(node0.isThrow());
1289:       assertFalse(node0.isFalse());
1290:       assertEquals((-1), node0.getCharno());
1291:       assertFalse(node0.isInc());
1292:       assertFalse(node0.isThis());
1293:       assertFalse(node0.isCase());
1294:       assertFalse(node0.isGetProp());
1295:       assertFalse(node0.isInstanceOf());
1296:       assertFalse(node0.isIn());
1297:       assertFalse(node0.isWith());
1298:       assertFalse(node0.isComma());
1299:       assertFalse(node0.isIf());
1300:       assertFalse(node0.isBreak());
1301:       assertFalse(node0.isNE());
1302:       assertFalse(node0.isExprResult());
1303:       assertFalse(node0.isDelProp());
1304:       assertFalse(node0.hasOneChild());
1305:       assertFalse(node0.isArrayLit());
1306:       assertFalse(node0.isGetterDef());
1307:       assertFalse(node0.isRegExp());
1308:       assertFalse(node0.isNumber());
1309:       assertFalse(node0.isDefaultCase());
1310:       assertFalse(node0.isEmpty());
1311:       assertFalse(node0.isFor());
1312:       assertFalse(node0.isScript());
1313:       assertFalse(node0.isAssignAdd());
1314:       assertFalse(node0.isTry());
1315:       assertFalse(node0.isLabel());
1316:       assertEquals(0, node0.getChildCount());
1317:       assertFalse(node0.isParamList());
1318:       assertFalse(node0.isStringKey());
1319:       assertFalse(node0.isSwitch());
1320:       assertFalse(node0.isLabelName());
1321:       assertFalse(node0.isCall());
1322:       assertFalse(node0.isVar());
1323:       assertFalse(node0.isAdd());
1324:       assertFalse(node0.isBlock());
1325:       assertFalse(node0.isSetterDef());
1326:       assertFalse(node0.isWhile());
1327:       assertFalse(node0.isNew());
1328:       assertTrue(node0.isString());
1329:       assertFalse(node0.isDo());
1330:       assertFalse(node0.isCatch());
1331:       assertFalse(node0.isReturn());
1332:       assertFalse(node0.hasMoreThanOneChild());
1333:       assertFalse(node0.isOr());
1334:       assertFalse(node0.isTypeOf());
1335:       assertFalse(node0.isTrue());
1336:       assertFalse(node0.isNull());
1337:       assertFalse(node0.isGetElem());
1338:       assertFalse(node0.isName());
1339:       assertEquals((-1), node0.getLineno());
1340:       assertFalse(node0.isVoid());
1341:       assertFalse(node0.isCast());
1342:       assertFalse(node0.isDebugger());
1343:       assertFalse(node0.isFunction());
1344:       assertFalse(node0.isAssign());
1345:       assertFalse(node0.isDec());
1346:       assertFalse(node0.hasChildren());
1347:       assertEquals(40, node0.getType());
1348:       assertFalse(node0.isContinue());
1349:       assertFalse(node0.isNot());
1350:       assertFalse(node0.isObjectLit());
1351:       assertEquals((-1), node0.getSourcePosition());
1352:       assertFalse(node0.isAnd());
1353:       assertFalse(boolean3);
1354:       assertFalse(node0.equals((Object)node2));
1355:       assertFalse(node0.equals((Object)node1));
1356:       assertTrue(boolean3 == boolean1);
1357:       assertTrue(boolean3 == boolean2);
1358:       assertTrue(boolean3 == boolean0);
1359:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1360:       assertEquals(36, Node.QUOTED_PROP);
1361:       assertEquals(43, Node.IS_CONSTANT_NAME);
1362:       assertEquals(56, Node.CHANGE_TIME);
1363:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1364:       assertEquals(37, Node.OPT_ARG_NAME);
1365:       assertEquals(32, Node.INCRDECR_PROP);
1366:       assertEquals(46, Node.IS_NAMESPACE);
1367:       assertEquals(12, Node.COLUMN_BITS);
1368:       assertEquals(4095, Node.COLUMN_MASK);
1369:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1370:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1371:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1372:       assertEquals(1, Node.DECR_FLAG);
1373:       assertEquals(52, Node.LENGTH);
1374:       assertEquals(57, Node.REFLECTED_OBJECT);
1375:       assertEquals(54, Node.SLASH_V);
1376:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1377:       assertEquals(50, Node.FREE_CALL);
1378:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1379:       assertEquals(48, Node.DIRECTIVES);
1380:       assertEquals(40, Node.ORIGINALNAME_PROP);
1381:       assertEquals(49, Node.DIRECT_EVAL);
1382:       assertEquals(55, Node.INFERRED_FUNCTION);
1383:       assertEquals(8, Node.FLAG_NO_THROWS);
1384:       assertEquals(2, Node.POST_FLAG);
1385:       assertEquals(30, Node.VAR_ARGS_NAME);
1386:       assertEquals(57, Node.LAST_PROP);
1387:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1388:       assertEquals(47, Node.IS_DISPATCHER);
1389:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1390:       assertEquals(29, Node.JSDOC_INFO_PROP);
1391:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1392:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1393:       assertEquals(39, Node.EMPTY_BLOCK);
1394:       assertEquals(53, Node.INPUT_ID);
1395:       
1396:       Node node3 = Node.newString(12288, "STRING Q#{!t  [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002]");
1397:       assertNotSame(node3, node0);
1398:       assertFalse(node3.isHook());
1399:       assertFalse(node3.isSwitch());
1400:       assertFalse(node3.isInc());
1401:       assertFalse(node3.isCase());
1402:       assertEquals(12288, node3.getType());
1403:       assertFalse(node3.isString());
1404:       assertEquals((-1), node3.getCharno());
1405:       assertFalse(node3.isIn());
1406:       assertFalse(node3.isAnd());
1407:       assertFalse(node3.isThrow());
1408:       assertFalse(node3.isFalse());
1409:       assertFalse(node3.isArrayLit());
1410:       assertFalse(node3.hasOneChild());
1411:       assertFalse(node3.isTry());
1412:       assertFalse(node3.isLabelName());
1413:       assertFalse(node3.isIf());
1414:       assertFalse(node3.isScript());
1415:       assertFalse(node3.isNumber());
1416:       assertFalse(node3.isGetterDef());
1417:       assertEquals((-1), node3.getLineno());
1418:       assertFalse(node3.isInstanceOf());
1419:       assertFalse(node3.isNE());
1420:       assertFalse(node3.isWith());
1421:       assertFalse(node3.isFor());
1422:       assertFalse(node3.isThis());
1423:       assertFalse(node3.hasMoreThanOneChild());
1424:       assertFalse(node3.isCatch());
1425:       assertFalse(node3.isRegExp());
1426:       assertFalse(node3.isBlock());
1427:       assertFalse(node3.isVar());
1428:       assertFalse(node3.isAdd());
1429:       assertFalse(node3.isNew());
1430:       assertFalse(node3.isName());
1431:       assertFalse(node3.isStringKey());
1432:       assertFalse(node3.isNull());
1433:       assertFalse(node3.isLabel());
1434:       assertFalse(node3.isAssignAdd());
1435:       assertFalse(node3.isSetterDef());
1436:       assertFalse(node3.isParamList());
1437:       assertFalse(node3.isDo());
1438:       assertFalse(node3.isFunction());
1439:       assertFalse(node3.isCast());
1440:       assertFalse(node3.isContinue());
1441:       assertEquals(0, node3.getChildCount());
1442:       assertFalse(node3.isTrue());
1443:       assertFalse(node3.isExprResult());
1444:       assertFalse(node3.isDefaultCase());
1445:       assertFalse(node3.isVoid());
1446:       assertFalse(node3.isEmpty());
1447:       assertFalse(node3.isDebugger());
1448:       assertEquals((-1), node3.getSourcePosition());
1449:       assertFalse(node3.isNot());
1450:       assertFalse(node3.isObjectLit());
1451:       assertFalse(node3.isOr());
1452:       assertFalse(node3.isReturn());
1453:       assertFalse(node3.isGetProp());
1454:       assertFalse(node3.isDelProp());
1455:       assertFalse(node3.isWhile());
1456:       assertFalse(node3.isBreak());
1457:       assertFalse(node3.hasChildren());
1458:       assertFalse(node3.isGetElem());
1459:       assertFalse(node3.isCall());
1460:       assertFalse(node3.isComma());
1461:       assertFalse(node3.isDec());
1462:       assertFalse(node3.isAssign());
1463:       assertFalse(node3.isTypeOf());
1464:       assertNotNull(node3);
1465:       assertFalse(node3.equals((Object)node0));
1466:       assertFalse(node3.equals((Object)node2));
1467:       assertFalse(node3.equals((Object)node1));
1468:       assertEquals(53, Node.INPUT_ID);
1469:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1470:       assertEquals(2, Node.POST_FLAG);
1471:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1472:       assertEquals(4095, Node.COLUMN_MASK);
1473:       assertEquals(47, Node.IS_DISPATCHER);
1474:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1475:       assertEquals(39, Node.EMPTY_BLOCK);
1476:       assertEquals(37, Node.OPT_ARG_NAME);
1477:       assertEquals(48, Node.DIRECTIVES);
1478:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1479:       assertEquals(29, Node.JSDOC_INFO_PROP);
1480:       assertEquals(49, Node.DIRECT_EVAL);
1481:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1482:       assertEquals(55, Node.INFERRED_FUNCTION);
1483:       assertEquals(56, Node.CHANGE_TIME);
1484:       assertEquals(36, Node.QUOTED_PROP);
1485:       assertEquals(8, Node.FLAG_NO_THROWS);
1486:       assertEquals(57, Node.REFLECTED_OBJECT);
1487:       assertEquals(52, Node.LENGTH);
1488:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1489:       assertEquals(54, Node.SLASH_V);
1490:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1491:       assertEquals(57, Node.LAST_PROP);
1492:       assertEquals(40, Node.ORIGINALNAME_PROP);
1493:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1494:       assertEquals(12, Node.COLUMN_BITS);
1495:       assertEquals(30, Node.VAR_ARGS_NAME);
1496:       assertEquals(46, Node.IS_NAMESPACE);
1497:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1498:       assertEquals(32, Node.INCRDECR_PROP);
1499:       assertEquals(1, Node.DECR_FLAG);
1500:       assertEquals(50, Node.FREE_CALL);
1501:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1502:       assertEquals(43, Node.IS_CONSTANT_NAME);
1503:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1504:       
1505:       int int0 = node1.getSideEffectFlags();
1506:       assertNotSame(node0, node3);
1507:       assertNotSame(node1, node2);
1508:       assertFalse(node0.isHook());
1509:       assertFalse(node0.isThrow());
1510:       assertFalse(node0.isFalse());
1511:       assertEquals((-1), node0.getCharno());
1512:       assertFalse(node0.isInc());
1513:       assertFalse(node0.isThis());
1514:       assertFalse(node0.isCase());
1515:       assertFalse(node0.isGetProp());
1516:       assertFalse(node0.isInstanceOf());
1517:       assertFalse(node0.isIn());
1518:       assertFalse(node0.isWith());
1519:       assertFalse(node0.isComma());
1520:       assertFalse(node0.isIf());
1521:       assertFalse(node0.isBreak());
1522:       assertFalse(node0.isNE());
1523:       assertFalse(node0.isExprResult());
1524:       assertFalse(node0.isDelProp());
1525:       assertFalse(node0.hasOneChild());
1526:       assertFalse(node0.isArrayLit());
1527:       assertFalse(node0.isGetterDef());
1528:       assertFalse(node0.isRegExp());
1529:       assertFalse(node0.isNumber());
1530:       assertFalse(node0.isDefaultCase());
1531:       assertFalse(node0.isEmpty());
1532:       assertFalse(node0.isFor());
1533:       assertFalse(node0.isScript());
1534:       assertFalse(node0.isAssignAdd());
1535:       assertFalse(node0.isTry());
1536:       assertFalse(node0.isLabel());
1537:       assertEquals(0, node0.getChildCount());
1538:       assertFalse(node0.isParamList());
1539:       assertFalse(node0.isStringKey());
1540:       assertFalse(node0.isSwitch());
1541:       assertFalse(node0.isLabelName());
1542:       assertFalse(node0.isCall());
1543:       assertFalse(node0.isVar());
1544:       assertFalse(node0.isAdd());
1545:       assertFalse(node0.isBlock());
1546:       assertFalse(node0.isSetterDef());
1547:       assertFalse(node0.isWhile());
1548:       assertFalse(node0.isNew());
1549:       assertTrue(node0.isString());
1550:       assertFalse(node0.isDo());
1551:       assertFalse(node0.isCatch());
1552:       assertFalse(node0.isReturn());
1553:       assertFalse(node0.hasMoreThanOneChild());
1554:       assertFalse(node0.isOr());
1555:       assertFalse(node0.isTypeOf());
1556:       assertFalse(node0.isTrue());
1557:       assertFalse(node0.isNull());
1558:       assertFalse(node0.isGetElem());
1559:       assertFalse(node0.isName());
1560:       assertEquals((-1), node0.getLineno());
1561:       assertFalse(node0.isVoid());
1562:       assertFalse(node0.isCast());
1563:       assertFalse(node0.isDebugger());
1564:       assertFalse(node0.isFunction());
1565:       assertFalse(node0.isAssign());
1566:       assertFalse(node0.isDec());
1567:       assertFalse(node0.hasChildren());
1568:       assertEquals(40, node0.getType());
1569:       assertFalse(node0.isContinue());
1570:       assertFalse(node0.isNot());
1571:       assertFalse(node0.isObjectLit());
1572:       assertEquals((-1), node0.getSourcePosition());
1573:       assertFalse(node0.isAnd());
1574:       assertEquals(49, node1.getType());
1575:       assertFalse(node1.isNE());
1576:       assertTrue(node1.hasChildren());
1577:       assertFalse(node1.isIf());
1578:       assertFalse(node1.isDelProp());
1579:       assertTrue(node1.hasOneChild());
1580:       assertFalse(node1.isFor());
1581:       assertEquals(1, node1.getChildCount());
1582:       assertFalse(node1.isDebugger());
1583:       assertEquals((-1), node1.getCharno());
1584:       assertFalse(node1.isArrayLit());
1585:       assertFalse(node1.isSwitch());
1586:       assertFalse(node1.isTry());
1587:       assertFalse(node1.isCase());
1588:       assertFalse(node1.isString());
1589:       assertFalse(node1.isGetterDef());
1590:       assertFalse(node1.isSetterDef());
1591:       assertFalse(node1.isThis());
1592:       assertFalse(node1.isFalse());
1593:       assertFalse(node1.isWith());
1594:       assertFalse(node1.isCatch());
1595:       assertFalse(node1.isHook());
1596:       assertFalse(node1.isRegExp());
1597:       assertFalse(node1.isInstanceOf());
1598:       assertFalse(node1.isFunction());
1599:       assertFalse(node1.isInc());
1600:       assertFalse(node1.isIn());
1601:       assertFalse(node1.isLabel());
1602:       assertFalse(node1.isAssignAdd());
1603:       assertFalse(node1.isReturn());
1604:       assertEquals((-1), node1.getLineno());
1605:       assertFalse(node1.isLabelName());
1606:       assertFalse(node1.isGetElem());
1607:       assertFalse(node1.isContinue());
1608:       assertFalse(node1.isWhile());
1609:       assertFalse(node1.isCast());
1610:       assertFalse(node1.isDec());
1611:       assertFalse(node1.isTypeOf());
1612:       assertFalse(node1.hasMoreThanOneChild());
1613:       assertFalse(node1.isAssign());
1614:       assertFalse(node1.isBlock());
1615:       assertFalse(node1.isScript());
1616:       assertFalse(node1.isStringKey());
1617:       assertFalse(node1.isAnd());
1618:       assertFalse(node1.isNumber());
1619:       assertEquals((-1), node1.getSourcePosition());
1620:       assertFalse(node1.isObjectLit());
1621:       assertFalse(node1.isNot());
1622:       assertFalse(node1.isGetProp());
1623:       assertFalse(node1.isParamList());
1624:       assertFalse(node1.isBreak());
1625:       assertFalse(node1.isCall());
1626:       assertFalse(node1.isVar());
1627:       assertTrue(node1.isThrow());
1628:       assertFalse(node1.isComma());
1629:       assertFalse(node1.isNew());
1630:       assertFalse(node1.isTrue());
1631:       assertFalse(node1.isExprResult());
1632:       assertFalse(node1.isAdd());
1633:       assertFalse(node1.isDefaultCase());
1634:       assertFalse(node1.isDo());
1635:       assertFalse(node1.isVoid());
1636:       assertFalse(node1.isName());
1637:       assertFalse(node1.isEmpty());
1638:       assertFalse(node1.isNull());
1639:       assertFalse(node1.isOr());
1640:       assertEquals(0, int0);
1641:       assertFalse(node0.equals((Object)node2));
1642:       assertFalse(node0.equals((Object)node1));
1643:       assertFalse(node0.equals((Object)node3));
1644:       assertFalse(node1.equals((Object)node0));
1645:       assertFalse(node1.equals((Object)node3));
1646:       assertFalse(node1.equals((Object)node2));
1647:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1648:       assertEquals(36, Node.QUOTED_PROP);
1649:       assertEquals(43, Node.IS_CONSTANT_NAME);
1650:       assertEquals(56, Node.CHANGE_TIME);
1651:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1652:       assertEquals(37, Node.OPT_ARG_NAME);
1653:       assertEquals(32, Node.INCRDECR_PROP);
1654:       assertEquals(46, Node.IS_NAMESPACE);
1655:       assertEquals(12, Node.COLUMN_BITS);
1656:       assertEquals(4095, Node.COLUMN_MASK);
1657:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1658:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1659:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1660:       assertEquals(1, Node.DECR_FLAG);
1661:       assertEquals(52, Node.LENGTH);
1662:       assertEquals(57, Node.REFLECTED_OBJECT);
1663:       assertEquals(54, Node.SLASH_V);
1664:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1665:       assertEquals(50, Node.FREE_CALL);
1666:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1667:       assertEquals(48, Node.DIRECTIVES);
1668:       assertEquals(40, Node.ORIGINALNAME_PROP);
1669:       assertEquals(49, Node.DIRECT_EVAL);
1670:       assertEquals(55, Node.INFERRED_FUNCTION);
1671:       assertEquals(8, Node.FLAG_NO_THROWS);
1672:       assertEquals(2, Node.POST_FLAG);
1673:       assertEquals(30, Node.VAR_ARGS_NAME);
1674:       assertEquals(57, Node.LAST_PROP);
1675:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1676:       assertEquals(47, Node.IS_DISPATCHER);
1677:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1678:       assertEquals(29, Node.JSDOC_INFO_PROP);
1679:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1680:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1681:       assertEquals(39, Node.EMPTY_BLOCK);
1682:       assertEquals(53, Node.INPUT_ID);
1683:       assertEquals(48, Node.DIRECTIVES);
1684:       assertEquals(8, Node.FLAG_NO_THROWS);
1685:       assertEquals(39, Node.EMPTY_BLOCK);
1686:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1687:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1688:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1689:       assertEquals(55, Node.INFERRED_FUNCTION);
1690:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1691:       assertEquals(57, Node.REFLECTED_OBJECT);
1692:       assertEquals(50, Node.FREE_CALL);
1693:       assertEquals(36, Node.QUOTED_PROP);
1694:       assertEquals(54, Node.SLASH_V);
1695:       assertEquals(53, Node.INPUT_ID);
1696:       assertEquals(52, Node.LENGTH);
1697:       assertEquals(43, Node.IS_CONSTANT_NAME);
1698:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1699:       assertEquals(57, Node.LAST_PROP);
1700:       assertEquals(40, Node.ORIGINALNAME_PROP);
1701:       assertEquals(47, Node.IS_DISPATCHER);
1702:       assertEquals(2, Node.POST_FLAG);
1703:       assertEquals(30, Node.VAR_ARGS_NAME);
1704:       assertEquals(56, Node.CHANGE_TIME);
1705:       assertEquals(32, Node.INCRDECR_PROP);
1706:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1707:       assertEquals(37, Node.OPT_ARG_NAME);
1708:       assertEquals(29, Node.JSDOC_INFO_PROP);
1709:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1710:       assertEquals(46, Node.IS_NAMESPACE);
1711:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1712:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1713:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1714:       assertEquals(49, Node.DIRECT_EVAL);
1715:       assertEquals(1, Node.DECR_FLAG);
1716:       assertEquals(4095, Node.COLUMN_MASK);
1717:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1718:       assertEquals(12, Node.COLUMN_BITS);
1719:       
1720:       boolean boolean4 = node3.isContinue();
1721:       assertNotSame(node3, node0);
1722:       assertFalse(node3.isHook());
1723:       assertFalse(node3.isSwitch());
1724:       assertFalse(node3.isInc());
1725:       assertFalse(node3.isCase());
1726:       assertEquals(12288, node3.getType());
1727:       assertFalse(node3.isString());
1728:       assertEquals((-1), node3.getCharno());
1729:       assertFalse(node3.isIn());
1730:       assertFalse(node3.isAnd());
1731:       assertFalse(node3.isThrow());
1732:       assertFalse(node3.isFalse());
1733:       assertFalse(node3.isArrayLit());
1734:       assertFalse(node3.hasOneChild());
1735:       assertFalse(node3.isTry());
1736:       assertFalse(node3.isLabelName());
1737:       assertFalse(node3.isIf());
1738:       assertFalse(node3.isScript());
1739:       assertFalse(node3.isNumber());
1740:       assertFalse(node3.isGetterDef());
1741:       assertEquals((-1), node3.getLineno());
1742:       assertFalse(node3.isInstanceOf());
1743:       assertFalse(node3.isNE());
1744:       assertFalse(node3.isWith());
1745:       assertFalse(node3.isFor());
1746:       assertFalse(node3.isThis());
1747:       assertFalse(node3.hasMoreThanOneChild());
1748:       assertFalse(node3.isCatch());
1749:       assertFalse(node3.isRegExp());
1750:       assertFalse(node3.isBlock());
1751:       assertFalse(node3.isVar());
1752:       assertFalse(node3.isAdd());
1753:       assertFalse(node3.isNew());
1754:       assertFalse(node3.isName());
1755:       assertFalse(node3.isStringKey());
1756:       assertFalse(node3.isNull());
1757:       assertFalse(node3.isLabel());
1758:       assertFalse(node3.isAssignAdd());
1759:       assertFalse(node3.isSetterDef());
1760:       assertFalse(node3.isParamList());
1761:       assertFalse(node3.isDo());
1762:       assertFalse(node3.isFunction());
1763:       assertFalse(node3.isCast());
1764:       assertFalse(node3.isContinue());
1765:       assertEquals(0, node3.getChildCount());
1766:       assertFalse(node3.isTrue());
1767:       assertFalse(node3.isExprResult());
1768:       assertFalse(node3.isDefaultCase());
1769:       assertFalse(node3.isVoid());
1770:       assertFalse(node3.isEmpty());
1771:       assertFalse(node3.isDebugger());
1772:       assertEquals((-1), node3.getSourcePosition());
1773:       assertFalse(node3.isNot());
1774:       assertFalse(node3.isObjectLit());
1775:       assertFalse(node3.isOr());
1776:       assertFalse(node3.isReturn());
1777:       assertFalse(node3.isGetProp());
1778:       assertFalse(node3.isDelProp());
1779:       assertFalse(node3.isWhile());
1780:       assertFalse(node3.isBreak());
1781:       assertFalse(node3.hasChildren());
1782:       assertFalse(node3.isGetElem());
1783:       assertFalse(node3.isCall());
1784:       assertFalse(node3.isComma());
1785:       assertFalse(node3.isDec());
1786:       assertFalse(node3.isAssign());
1787:       assertFalse(node3.isTypeOf());
1788:       assertFalse(boolean4);
1789:       assertFalse(node3.equals((Object)node0));
1790:       assertFalse(node3.equals((Object)node2));
1791:       assertFalse(node3.equals((Object)node1));
1792:       assertTrue(boolean4 == boolean1);
1793:       assertTrue(boolean4 == boolean0);
1794:       assertTrue(boolean4 == boolean3);
1795:       assertTrue(boolean4 == boolean2);
1796:       assertEquals(53, Node.INPUT_ID);
1797:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1798:       assertEquals(2, Node.POST_FLAG);
1799:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1800:       assertEquals(4095, Node.COLUMN_MASK);
1801:       assertEquals(47, Node.IS_DISPATCHER);
1802:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1803:       assertEquals(39, Node.EMPTY_BLOCK);
1804:       assertEquals(37, Node.OPT_ARG_NAME);
1805:       assertEquals(48, Node.DIRECTIVES);
1806:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1807:       assertEquals(29, Node.JSDOC_INFO_PROP);
1808:       assertEquals(49, Node.DIRECT_EVAL);
1809:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1810:       assertEquals(55, Node.INFERRED_FUNCTION);
1811:       assertEquals(56, Node.CHANGE_TIME);
1812:       assertEquals(36, Node.QUOTED_PROP);
1813:       assertEquals(8, Node.FLAG_NO_THROWS);
1814:       assertEquals(57, Node.REFLECTED_OBJECT);
1815:       assertEquals(52, Node.LENGTH);
1816:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1817:       assertEquals(54, Node.SLASH_V);
1818:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1819:       assertEquals(57, Node.LAST_PROP);
1820:       assertEquals(40, Node.ORIGINALNAME_PROP);
1821:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1822:       assertEquals(12, Node.COLUMN_BITS);
1823:       assertEquals(30, Node.VAR_ARGS_NAME);
1824:       assertEquals(46, Node.IS_NAMESPACE);
1825:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1826:       assertEquals(32, Node.INCRDECR_PROP);
1827:       assertEquals(1, Node.DECR_FLAG);
1828:       assertEquals(50, Node.FREE_CALL);
1829:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1830:       assertEquals(43, Node.IS_CONSTANT_NAME);
1831:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1832:       
1833:       node0.setChangeTime(40);
1834:       assertNotSame(node0, node3);
1835:       assertFalse(node0.isHook());
1836:       assertFalse(node0.isThrow());
1837:       assertFalse(node0.isFalse());
1838:       assertEquals((-1), node0.getCharno());
1839:       assertFalse(node0.isInc());
1840:       assertFalse(node0.isThis());
1841:       assertFalse(node0.isCase());
1842:       assertFalse(node0.isGetProp());
1843:       assertFalse(node0.isInstanceOf());
1844:       assertFalse(node0.isIn());
1845:       assertFalse(node0.isWith());
1846:       assertFalse(node0.isComma());
1847:       assertFalse(node0.isIf());
1848:       assertFalse(node0.isBreak());
1849:       assertFalse(node0.isNE());
1850:       assertFalse(node0.isExprResult());
1851:       assertFalse(node0.isDelProp());
1852:       assertFalse(node0.hasOneChild());
1853:       assertFalse(node0.isArrayLit());
1854:       assertFalse(node0.isGetterDef());
1855:       assertFalse(node0.isRegExp());
1856:       assertFalse(node0.isNumber());
1857:       assertFalse(node0.isDefaultCase());
1858:       assertFalse(node0.isEmpty());
1859:       assertFalse(node0.isFor());
1860:       assertFalse(node0.isScript());
1861:       assertFalse(node0.isAssignAdd());
1862:       assertFalse(node0.isTry());
1863:       assertFalse(node0.isLabel());
1864:       assertEquals(0, node0.getChildCount());
1865:       assertFalse(node0.isParamList());
1866:       assertFalse(node0.isStringKey());
1867:       assertFalse(node0.isSwitch());
1868:       assertFalse(node0.isLabelName());
1869:       assertFalse(node0.isCall());
1870:       assertFalse(node0.isVar());
1871:       assertFalse(node0.isAdd());
1872:       assertFalse(node0.isBlock());
1873:       assertFalse(node0.isSetterDef());
1874:       assertFalse(node0.isWhile());
1875:       assertFalse(node0.isNew());
1876:       assertTrue(node0.isString());
1877:       assertFalse(node0.isDo());
1878:       assertFalse(node0.isCatch());
1879:       assertFalse(node0.isReturn());
1880:       assertFalse(node0.hasMoreThanOneChild());
1881:       assertFalse(node0.isOr());
1882:       assertFalse(node0.isTypeOf());
1883:       assertFalse(node0.isTrue());
1884:       assertFalse(node0.isNull());
1885:       assertFalse(node0.isGetElem());
1886:       assertFalse(node0.isName());
1887:       assertEquals((-1), node0.getLineno());
1888:       assertFalse(node0.isVoid());
1889:       assertFalse(node0.isCast());
1890:       assertFalse(node0.isDebugger());
1891:       assertFalse(node0.isFunction());
1892:       assertFalse(node0.isAssign());
1893:       assertFalse(node0.isDec());
1894:       assertFalse(node0.hasChildren());
1895:       assertEquals(40, node0.getType());
1896:       assertFalse(node0.isContinue());
1897:       assertFalse(node0.isNot());
1898:       assertFalse(node0.isObjectLit());
1899:       assertEquals((-1), node0.getSourcePosition());
1900:       assertFalse(node0.isAnd());
1901:       assertFalse(node0.equals((Object)node2));
1902:       assertFalse(node0.equals((Object)node1));
1903:       assertFalse(node0.equals((Object)node3));
1904:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1905:       assertEquals(36, Node.QUOTED_PROP);
1906:       assertEquals(43, Node.IS_CONSTANT_NAME);
1907:       assertEquals(56, Node.CHANGE_TIME);
1908:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1909:       assertEquals(37, Node.OPT_ARG_NAME);
1910:       assertEquals(32, Node.INCRDECR_PROP);
1911:       assertEquals(46, Node.IS_NAMESPACE);
1912:       assertEquals(12, Node.COLUMN_BITS);
1913:       assertEquals(4095, Node.COLUMN_MASK);
1914:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1915:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1916:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1917:       assertEquals(1, Node.DECR_FLAG);
1918:       assertEquals(52, Node.LENGTH);
1919:       assertEquals(57, Node.REFLECTED_OBJECT);
1920:       assertEquals(54, Node.SLASH_V);
1921:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1922:       assertEquals(50, Node.FREE_CALL);
1923:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1924:       assertEquals(48, Node.DIRECTIVES);
1925:       assertEquals(40, Node.ORIGINALNAME_PROP);
1926:       assertEquals(49, Node.DIRECT_EVAL);
1927:       assertEquals(55, Node.INFERRED_FUNCTION);
1928:       assertEquals(8, Node.FLAG_NO_THROWS);
1929:       assertEquals(2, Node.POST_FLAG);
1930:       assertEquals(30, Node.VAR_ARGS_NAME);
1931:       assertEquals(57, Node.LAST_PROP);
1932:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1933:       assertEquals(47, Node.IS_DISPATCHER);
1934:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1935:       assertEquals(29, Node.JSDOC_INFO_PROP);
1936:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1937:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1938:       assertEquals(39, Node.EMPTY_BLOCK);
1939:       assertEquals(53, Node.INPUT_ID);
1940:       
1941:       boolean boolean5 = node3.isThis();
1942:       assertNotSame(node3, node0);
1943:       assertFalse(node3.isHook());
1944:       assertFalse(node3.isSwitch());
1945:       assertFalse(node3.isInc());
1946:       assertFalse(node3.isCase());
1947:       assertEquals(12288, node3.getType());
1948:       assertFalse(node3.isString());
1949:       assertEquals((-1), node3.getCharno());
1950:       assertFalse(node3.isIn());
1951:       assertFalse(node3.isAnd());
1952:       assertFalse(node3.isThrow());
1953:       assertFalse(node3.isFalse());
1954:       assertFalse(node3.isArrayLit());
1955:       assertFalse(node3.hasOneChild());
1956:       assertFalse(node3.isTry());
1957:       assertFalse(node3.isLabelName());
1958:       assertFalse(node3.isIf());
1959:       assertFalse(node3.isScript());
1960:       assertFalse(node3.isNumber());
1961:       assertFalse(node3.isGetterDef());
1962:       assertEquals((-1), node3.getLineno());
1963:       assertFalse(node3.isInstanceOf());
1964:       assertFalse(node3.isNE());
1965:       assertFalse(node3.isWith());
1966:       assertFalse(node3.isFor());
1967:       assertFalse(node3.isThis());
1968:       assertFalse(node3.hasMoreThanOneChild());
1969:       assertFalse(node3.isCatch());
1970:       assertFalse(node3.isRegExp());
1971:       assertFalse(node3.isBlock());
1972:       assertFalse(node3.isVar());
1973:       assertFalse(node3.isAdd());
1974:       assertFalse(node3.isNew());
1975:       assertFalse(node3.isName());
1976:       assertFalse(node3.isStringKey());
1977:       assertFalse(node3.isNull());
1978:       assertFalse(node3.isLabel());
1979:       assertFalse(node3.isAssignAdd());
1980:       assertFalse(node3.isSetterDef());
1981:       assertFalse(node3.isParamList());
1982:       assertFalse(node3.isDo());
1983:       assertFalse(node3.isFunction());
1984:       assertFalse(node3.isCast());
1985:       assertFalse(node3.isContinue());
1986:       assertEquals(0, node3.getChildCount());
1987:       assertFalse(node3.isTrue());
1988:       assertFalse(node3.isExprResult());
1989:       assertFalse(node3.isDefaultCase());
1990:       assertFalse(node3.isVoid());
1991:       assertFalse(node3.isEmpty());
1992:       assertFalse(node3.isDebugger());
1993:       assertEquals((-1), node3.getSourcePosition());
1994:       assertFalse(node3.isNot());
1995:       assertFalse(node3.isObjectLit());
1996:       assertFalse(node3.isOr());
1997:       assertFalse(node3.isReturn());
1998:       assertFalse(node3.isGetProp());
1999:       assertFalse(node3.isDelProp());
2000:       assertFalse(node3.isWhile());
2001:       assertFalse(node3.isBreak());
2002:       assertFalse(node3.hasChildren());
2003:       assertFalse(node3.isGetElem());
2004:       assertFalse(node3.isCall());
2005:       assertFalse(node3.isComma());
2006:       assertFalse(node3.isDec());
2007:       assertFalse(node3.isAssign());
2008:       assertFalse(node3.isTypeOf());
2009:       assertFalse(boolean5);
2010:       assertFalse(node3.equals((Object)node0));
2011:       assertFalse(node3.equals((Object)node2));
2012:       assertFalse(node3.equals((Object)node1));
2013:       assertTrue(boolean5 == boolean2);
2014:       assertTrue(boolean5 == boolean1);
2015:       assertTrue(boolean5 == boolean0);
2016:       assertTrue(boolean5 == boolean4);
2017:       assertTrue(boolean5 == boolean3);
2018:       assertEquals(53, Node.INPUT_ID);
2019:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2020:       assertEquals(2, Node.POST_FLAG);
2021:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2022:       assertEquals(4095, Node.COLUMN_MASK);
2023:       assertEquals(47, Node.IS_DISPATCHER);
2024:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2025:       assertEquals(39, Node.EMPTY_BLOCK);
2026:       assertEquals(37, Node.OPT_ARG_NAME);
2027:       assertEquals(48, Node.DIRECTIVES);
2028:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2029:       assertEquals(29, Node.JSDOC_INFO_PROP);
2030:       assertEquals(49, Node.DIRECT_EVAL);
2031:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2032:       assertEquals(55, Node.INFERRED_FUNCTION);
2033:       assertEquals(56, Node.CHANGE_TIME);
2034:       assertEquals(36, Node.QUOTED_PROP);
2035:       assertEquals(8, Node.FLAG_NO_THROWS);
2036:       assertEquals(57, Node.REFLECTED_OBJECT);
2037:       assertEquals(52, Node.LENGTH);
2038:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2039:       assertEquals(54, Node.SLASH_V);
2040:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2041:       assertEquals(57, Node.LAST_PROP);
2042:       assertEquals(40, Node.ORIGINALNAME_PROP);
2043:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2044:       assertEquals(12, Node.COLUMN_BITS);
2045:       assertEquals(30, Node.VAR_ARGS_NAME);
2046:       assertEquals(46, Node.IS_NAMESPACE);
2047:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2048:       assertEquals(32, Node.INCRDECR_PROP);
2049:       assertEquals(1, Node.DECR_FLAG);
2050:       assertEquals(50, Node.FREE_CALL);
2051:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2052:       assertEquals(43, Node.IS_CONSTANT_NAME);
2053:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2054:       
2055:       boolean boolean6 = node1.isBlock();
2056:       assertNotSame(node0, node3);
2057:       assertNotSame(node1, node2);
2058:       assertFalse(node0.isHook());
2059:       assertFalse(node0.isThrow());
2060:       assertFalse(node0.isFalse());
2061:       assertEquals((-1), node0.getCharno());
2062:       assertFalse(node0.isInc());
2063:       assertFalse(node0.isThis());
2064:       assertFalse(node0.isCase());
2065:       assertFalse(node0.isGetProp());
2066:       assertFalse(node0.isInstanceOf());
2067:       assertFalse(node0.isIn());
2068:       assertFalse(node0.isWith());
2069:       assertFalse(node0.isComma());
2070:       assertFalse(node0.isIf());
2071:       assertFalse(node0.isBreak());
2072:       assertFalse(node0.isNE());
2073:       assertFalse(node0.isExprResult());
2074:       assertFalse(node0.isDelProp());
2075:       assertFalse(node0.hasOneChild());
2076:       assertFalse(node0.isArrayLit());
2077:       assertFalse(node0.isGetterDef());
2078:       assertFalse(node0.isRegExp());
2079:       assertFalse(node0.isNumber());
2080:       assertFalse(node0.isDefaultCase());
2081:       assertFalse(node0.isEmpty());
2082:       assertFalse(node0.isFor());
2083:       assertFalse(node0.isScript());
2084:       assertFalse(node0.isAssignAdd());
2085:       assertFalse(node0.isTry());
2086:       assertFalse(node0.isLabel());
2087:       assertEquals(0, node0.getChildCount());
2088:       assertFalse(node0.isParamList());
2089:       assertFalse(node0.isStringKey());
2090:       assertFalse(node0.isSwitch());
2091:       assertFalse(node0.isLabelName());
2092:       assertFalse(node0.isCall());
2093:       assertFalse(node0.isVar());
2094:       assertFalse(node0.isAdd());
2095:       assertFalse(node0.isBlock());
2096:       assertFalse(node0.isSetterDef());
2097:       assertFalse(node0.isWhile());
2098:       assertFalse(node0.isNew());
2099:       assertTrue(node0.isString());
2100:       assertFalse(node0.isDo());
2101:       assertFalse(node0.isCatch());
2102:       assertFalse(node0.isReturn());
2103:       assertFalse(node0.hasMoreThanOneChild());
2104:       assertFalse(node0.isOr());
2105:       assertFalse(node0.isTypeOf());
2106:       assertFalse(node0.isTrue());
2107:       assertFalse(node0.isNull());
2108:       assertFalse(node0.isGetElem());
2109:       assertFalse(node0.isName());
2110:       assertEquals((-1), node0.getLineno());
2111:       assertFalse(node0.isVoid());
2112:       assertFalse(node0.isCast());
2113:       assertFalse(node0.isDebugger());
2114:       assertFalse(node0.isFunction());
2115:       assertFalse(node0.isAssign());
2116:       assertFalse(node0.isDec());
2117:       assertFalse(node0.hasChildren());
2118:       assertEquals(40, node0.getType());
2119:       assertFalse(node0.isContinue());
2120:       assertFalse(node0.isNot());
2121:       assertFalse(node0.isObjectLit());
2122:       assertEquals((-1), node0.getSourcePosition());
2123:       assertFalse(node0.isAnd());
2124:       assertEquals(49, node1.getType());
2125:       assertFalse(node1.isNE());
2126:       assertTrue(node1.hasChildren());
2127:       assertFalse(node1.isIf());
2128:       assertFalse(node1.isDelProp());
2129:       assertTrue(node1.hasOneChild());
2130:       assertFalse(node1.isFor());
2131:       assertEquals(1, node1.getChildCount());
2132:       assertFalse(node1.isDebugger());
2133:       assertEquals((-1), node1.getCharno());
2134:       assertFalse(node1.isArrayLit());
2135:       assertFalse(node1.isSwitch());
2136:       assertFalse(node1.isTry());
2137:       assertFalse(node1.isCase());
2138:       assertFalse(node1.isString());
2139:       assertFalse(node1.isGetterDef());
2140:       assertFalse(node1.isSetterDef());
2141:       assertFalse(node1.isThis());
2142:       assertFalse(node1.isFalse());
2143:       assertFalse(node1.isWith());
2144:       assertFalse(node1.isCatch());
2145:       assertFalse(node1.isHook());
2146:       assertFalse(node1.isRegExp());
2147:       assertFalse(node1.isInstanceOf());
2148:       assertFalse(node1.isFunction());
2149:       assertFalse(node1.isInc());
2150:       assertFalse(node1.isIn());
2151:       assertFalse(node1.isLabel());
2152:       assertFalse(node1.isAssignAdd());
2153:       assertFalse(node1.isReturn());
2154:       assertEquals((-1), node1.getLineno());
2155:       assertFalse(node1.isLabelName());
2156:       assertFalse(node1.isGetElem());
2157:       assertFalse(node1.isContinue());
2158:       assertFalse(node1.isWhile());
2159:       assertFalse(node1.isCast());
2160:       assertFalse(node1.isDec());
2161:       assertFalse(node1.isTypeOf());
2162:       assertFalse(node1.hasMoreThanOneChild());
2163:       assertFalse(node1.isAssign());
2164:       assertFalse(node1.isBlock());
2165:       assertFalse(node1.isScript());
2166:       assertFalse(node1.isStringKey());
2167:       assertFalse(node1.isAnd());
2168:       assertFalse(node1.isNumber());
2169:       assertEquals((-1), node1.getSourcePosition());
2170:       assertFalse(node1.isObjectLit());
2171:       assertFalse(node1.isNot());
2172:       assertFalse(node1.isGetProp());
2173:       assertFalse(node1.isParamList());
2174:       assertFalse(node1.isBreak());
2175:       assertFalse(node1.isCall());
2176:       assertFalse(node1.isVar());
2177:       assertTrue(node1.isThrow());
2178:       assertFalse(node1.isComma());
2179:       assertFalse(node1.isNew());
2180:       assertFalse(node1.isTrue());
2181:       assertFalse(node1.isExprResult());
2182:       assertFalse(node1.isAdd());
2183:       assertFalse(node1.isDefaultCase());
2184:       assertFalse(node1.isDo());
2185:       assertFalse(node1.isVoid());
2186:       assertFalse(node1.isName());
2187:       assertFalse(node1.isEmpty());
2188:       assertFalse(node1.isNull());
2189:       assertFalse(node1.isOr());
2190:       assertFalse(boolean6);
2191:       assertTrue(boolean6 == boolean4);
2192:       assertTrue(boolean6 == boolean3);
2193:       assertTrue(boolean6 == boolean2);
2194:       assertTrue(boolean6 == boolean1);
2195:       assertTrue(boolean6 == boolean5);
2196:       assertTrue(boolean6 == boolean0);
2197:       assertFalse(node0.equals((Object)node2));
2198:       assertFalse(node0.equals((Object)node1));
2199:       assertFalse(node0.equals((Object)node3));
2200:       assertFalse(node1.equals((Object)node0));
2201:       assertFalse(node1.equals((Object)node3));
2202:       assertFalse(node1.equals((Object)node2));
2203:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2204:       assertEquals(36, Node.QUOTED_PROP);
2205:       assertEquals(43, Node.IS_CONSTANT_NAME);
2206:       assertEquals(56, Node.CHANGE_TIME);
2207:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2208:       assertEquals(37, Node.OPT_ARG_NAME);
2209:       assertEquals(32, Node.INCRDECR_PROP);
2210:       assertEquals(46, Node.IS_NAMESPACE);
2211:       assertEquals(12, Node.COLUMN_BITS);
2212:       assertEquals(4095, Node.COLUMN_MASK);
2213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2214:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2215:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2216:       assertEquals(1, Node.DECR_FLAG);
2217:       assertEquals(52, Node.LENGTH);
2218:       assertEquals(57, Node.REFLECTED_OBJECT);
2219:       assertEquals(54, Node.SLASH_V);
2220:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2221:       assertEquals(50, Node.FREE_CALL);
2222:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2223:       assertEquals(48, Node.DIRECTIVES);
2224:       assertEquals(40, Node.ORIGINALNAME_PROP);
2225:       assertEquals(49, Node.DIRECT_EVAL);
2226:       assertEquals(55, Node.INFERRED_FUNCTION);
2227:       assertEquals(8, Node.FLAG_NO_THROWS);
2228:       assertEquals(2, Node.POST_FLAG);
2229:       assertEquals(30, Node.VAR_ARGS_NAME);
2230:       assertEquals(57, Node.LAST_PROP);
2231:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2232:       assertEquals(47, Node.IS_DISPATCHER);
2233:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2234:       assertEquals(29, Node.JSDOC_INFO_PROP);
2235:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2236:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2237:       assertEquals(39, Node.EMPTY_BLOCK);
2238:       assertEquals(53, Node.INPUT_ID);
2239:       assertEquals(48, Node.DIRECTIVES);
2240:       assertEquals(8, Node.FLAG_NO_THROWS);
2241:       assertEquals(39, Node.EMPTY_BLOCK);
2242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2243:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2244:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2245:       assertEquals(55, Node.INFERRED_FUNCTION);
2246:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2247:       assertEquals(57, Node.REFLECTED_OBJECT);
2248:       assertEquals(50, Node.FREE_CALL);
2249:       assertEquals(36, Node.QUOTED_PROP);
2250:       assertEquals(54, Node.SLASH_V);
2251:       assertEquals(53, Node.INPUT_ID);
2252:       assertEquals(52, Node.LENGTH);
2253:       assertEquals(43, Node.IS_CONSTANT_NAME);
2254:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2255:       assertEquals(57, Node.LAST_PROP);
2256:       assertEquals(40, Node.ORIGINALNAME_PROP);
2257:       assertEquals(47, Node.IS_DISPATCHER);
2258:       assertEquals(2, Node.POST_FLAG);
2259:       assertEquals(30, Node.VAR_ARGS_NAME);
2260:       assertEquals(56, Node.CHANGE_TIME);
2261:       assertEquals(32, Node.INCRDECR_PROP);
2262:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2263:       assertEquals(37, Node.OPT_ARG_NAME);
2264:       assertEquals(29, Node.JSDOC_INFO_PROP);
2265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2266:       assertEquals(46, Node.IS_NAMESPACE);
2267:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2268:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2269:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2270:       assertEquals(49, Node.DIRECT_EVAL);
2271:       assertEquals(1, Node.DECR_FLAG);
2272:       assertEquals(4095, Node.COLUMN_MASK);
2273:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2274:       assertEquals(12, Node.COLUMN_BITS);
2275:       
2276:       boolean boolean7 = node3.isFromExterns();
2277:       assertNotSame(node3, node0);
2278:       assertFalse(node3.isHook());
2279:       assertFalse(node3.isSwitch());
2280:       assertFalse(node3.isInc());
2281:       assertFalse(node3.isCase());
2282:       assertEquals(12288, node3.getType());
2283:       assertFalse(node3.isString());
2284:       assertEquals((-1), node3.getCharno());
2285:       assertFalse(node3.isIn());
2286:       assertFalse(node3.isAnd());
2287:       assertFalse(node3.isThrow());
2288:       assertFalse(node3.isFalse());
2289:       assertFalse(node3.isArrayLit());
2290:       assertFalse(node3.hasOneChild());
2291:       assertFalse(node3.isTry());
2292:       assertFalse(node3.isLabelName());
2293:       assertFalse(node3.isIf());
2294:       assertFalse(node3.isScript());
2295:       assertFalse(node3.isNumber());
2296:       assertFalse(node3.isGetterDef());
2297:       assertEquals((-1), node3.getLineno());
2298:       assertFalse(node3.isInstanceOf());
2299:       assertFalse(node3.isNE());
2300:       assertFalse(node3.isWith());
2301:       assertFalse(node3.isFor());
2302:       assertFalse(node3.isThis());
2303:       assertFalse(node3.hasMoreThanOneChild());
2304:       assertFalse(node3.isCatch());
2305:       assertFalse(node3.isRegExp());
2306:       assertFalse(node3.isBlock());
2307:       assertFalse(node3.isVar());
2308:       assertFalse(node3.isAdd());
2309:       assertFalse(node3.isNew());
2310:       assertFalse(node3.isName());
2311:       assertFalse(node3.isStringKey());
2312:       assertFalse(node3.isNull());
2313:       assertFalse(node3.isLabel());
2314:       assertFalse(node3.isAssignAdd());
2315:       assertFalse(node3.isSetterDef());
2316:       assertFalse(node3.isParamList());
2317:       assertFalse(node3.isDo());
2318:       assertFalse(node3.isFunction());
2319:       assertFalse(node3.isCast());
2320:       assertFalse(node3.isContinue());
2321:       assertEquals(0, node3.getChildCount());
2322:       assertFalse(node3.isTrue());
2323:       assertFalse(node3.isExprResult());
2324:       assertFalse(node3.isDefaultCase());
2325:       assertFalse(node3.isVoid());
2326:       assertFalse(node3.isEmpty());
2327:       assertFalse(node3.isDebugger());
2328:       assertEquals((-1), node3.getSourcePosition());
2329:       assertFalse(node3.isNot());
2330:       assertFalse(node3.isObjectLit());
2331:       assertFalse(node3.isOr());
2332:       assertFalse(node3.isReturn());
2333:       assertFalse(node3.isGetProp());
2334:       assertFalse(node3.isDelProp());
2335:       assertFalse(node3.isWhile());
2336:       assertFalse(node3.isBreak());
2337:       assertFalse(node3.hasChildren());
2338:       assertFalse(node3.isGetElem());
2339:       assertFalse(node3.isCall());
2340:       assertFalse(node3.isComma());
2341:       assertFalse(node3.isDec());
2342:       assertFalse(node3.isAssign());
2343:       assertFalse(node3.isTypeOf());
2344:       assertFalse(boolean7);
2345:       assertTrue(boolean7 == boolean0);
2346:       assertTrue(boolean7 == boolean5);
2347:       assertTrue(boolean7 == boolean3);
2348:       assertTrue(boolean7 == boolean6);
2349:       assertTrue(boolean7 == boolean4);
2350:       assertTrue(boolean7 == boolean2);
2351:       assertTrue(boolean7 == boolean1);
2352:       assertFalse(node3.equals((Object)node0));
2353:       assertFalse(node3.equals((Object)node2));
2354:       assertFalse(node3.equals((Object)node1));
2355:       assertEquals(53, Node.INPUT_ID);
2356:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2357:       assertEquals(2, Node.POST_FLAG);
2358:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2359:       assertEquals(4095, Node.COLUMN_MASK);
2360:       assertEquals(47, Node.IS_DISPATCHER);
2361:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2362:       assertEquals(39, Node.EMPTY_BLOCK);
2363:       assertEquals(37, Node.OPT_ARG_NAME);
2364:       assertEquals(48, Node.DIRECTIVES);
2365:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2366:       assertEquals(29, Node.JSDOC_INFO_PROP);
2367:       assertEquals(49, Node.DIRECT_EVAL);
2368:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2369:       assertEquals(55, Node.INFERRED_FUNCTION);
2370:       assertEquals(56, Node.CHANGE_TIME);
2371:       assertEquals(36, Node.QUOTED_PROP);
2372:       assertEquals(8, Node.FLAG_NO_THROWS);
2373:       assertEquals(57, Node.REFLECTED_OBJECT);
2374:       assertEquals(52, Node.LENGTH);
2375:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2376:       assertEquals(54, Node.SLASH_V);
2377:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2378:       assertEquals(57, Node.LAST_PROP);
2379:       assertEquals(40, Node.ORIGINALNAME_PROP);
2380:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2381:       assertEquals(12, Node.COLUMN_BITS);
2382:       assertEquals(30, Node.VAR_ARGS_NAME);
2383:       assertEquals(46, Node.IS_NAMESPACE);
2384:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2385:       assertEquals(32, Node.INCRDECR_PROP);
2386:       assertEquals(1, Node.DECR_FLAG);
2387:       assertEquals(50, Node.FREE_CALL);
2388:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2389:       assertEquals(43, Node.IS_CONSTANT_NAME);
2390:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2391:       
2392:       int int1 = node1.getSourcePosition();
2393:       assertNotSame(node0, node3);
2394:       assertNotSame(node1, node2);
2395:       assertFalse(node0.isHook());
2396:       assertFalse(node0.isThrow());
2397:       assertFalse(node0.isFalse());
2398:       assertEquals((-1), node0.getCharno());
2399:       assertFalse(node0.isInc());
2400:       assertFalse(node0.isThis());
2401:       assertFalse(node0.isCase());
2402:       assertFalse(node0.isGetProp());
2403:       assertFalse(node0.isInstanceOf());
2404:       assertFalse(node0.isIn());
2405:       assertFalse(node0.isWith());
2406:       assertFalse(node0.isComma());
2407:       assertFalse(node0.isIf());
2408:       assertFalse(node0.isBreak());
2409:       assertFalse(node0.isNE());
2410:       assertFalse(node0.isExprResult());
2411:       assertFalse(node0.isDelProp());
2412:       assertFalse(node0.hasOneChild());
2413:       assertFalse(node0.isArrayLit());
2414:       assertFalse(node0.isGetterDef());
2415:       assertFalse(node0.isRegExp());
2416:       assertFalse(node0.isNumber());
2417:       assertFalse(node0.isDefaultCase());
2418:       assertFalse(node0.isEmpty());
2419:       assertFalse(node0.isFor());
2420:       assertFalse(node0.isScript());
2421:       assertFalse(node0.isAssignAdd());
2422:       assertFalse(node0.isTry());
2423:       assertFalse(node0.isLabel());
2424:       assertEquals(0, node0.getChildCount());
2425:       assertFalse(node0.isParamList());
2426:       assertFalse(node0.isStringKey());
2427:       assertFalse(node0.isSwitch());
2428:       assertFalse(node0.isLabelName());
2429:       assertFalse(node0.isCall());
2430:       assertFalse(node0.isVar());
2431:       assertFalse(node0.isAdd());
2432:       assertFalse(node0.isBlock());
2433:       assertFalse(node0.isSetterDef());
2434:       assertFalse(node0.isWhile());
2435:       assertFalse(node0.isNew());
2436:       assertTrue(node0.isString());
2437:       assertFalse(node0.isDo());
2438:       assertFalse(node0.isCatch());
2439:       assertFalse(node0.isReturn());
2440:       assertFalse(node0.hasMoreThanOneChild());
2441:       assertFalse(node0.isOr());
2442:       assertFalse(node0.isTypeOf());
2443:       assertFalse(node0.isTrue());
2444:       assertFalse(node0.isNull());
2445:       assertFalse(node0.isGetElem());
2446:       assertFalse(node0.isName());
2447:       assertEquals((-1), node0.getLineno());
2448:       assertFalse(node0.isVoid());
2449:       assertFalse(node0.isCast());
2450:       assertFalse(node0.isDebugger());
2451:       assertFalse(node0.isFunction());
2452:       assertFalse(node0.isAssign());
2453:       assertFalse(node0.isDec());
2454:       assertFalse(node0.hasChildren());
2455:       assertEquals(40, node0.getType());
2456:       assertFalse(node0.isContinue());
2457:       assertFalse(node0.isNot());
2458:       assertFalse(node0.isObjectLit());
2459:       assertEquals((-1), node0.getSourcePosition());
2460:       assertFalse(node0.isAnd());
2461:       assertEquals(49, node1.getType());
2462:       assertFalse(node1.isNE());
2463:       assertTrue(node1.hasChildren());
2464:       assertFalse(node1.isIf());
2465:       assertFalse(node1.isDelProp());
2466:       assertTrue(node1.hasOneChild());
2467:       assertFalse(node1.isFor());
2468:       assertEquals(1, node1.getChildCount());
2469:       assertFalse(node1.isDebugger());
2470:       assertEquals((-1), node1.getCharno());
2471:       assertFalse(node1.isArrayLit());
2472:       assertFalse(node1.isSwitch());
2473:       assertFalse(node1.isTry());
2474:       assertFalse(node1.isCase());
2475:       assertFalse(node1.isString());
2476:       assertFalse(node1.isGetterDef());
2477:       assertFalse(node1.isSetterDef());
2478:       assertFalse(node1.isThis());
2479:       assertFalse(node1.isFalse());
2480:       assertFalse(node1.isWith());
2481:       assertFalse(node1.isCatch());
2482:       assertFalse(node1.isHook());
2483:       assertFalse(node1.isRegExp());
2484:       assertFalse(node1.isInstanceOf());
2485:       assertFalse(node1.isFunction());
2486:       assertFalse(node1.isInc());
2487:       assertFalse(node1.isIn());
2488:       assertFalse(node1.isLabel());
2489:       assertFalse(node1.isAssignAdd());
2490:       assertFalse(node1.isReturn());
2491:       assertEquals((-1), node1.getLineno());
2492:       assertFalse(node1.isLabelName());
2493:       assertFalse(node1.isGetElem());
2494:       assertFalse(node1.isContinue());
2495:       assertFalse(node1.isWhile());
2496:       assertFalse(node1.isCast());
2497:       assertFalse(node1.isDec());
2498:       assertFalse(node1.isTypeOf());
2499:       assertFalse(node1.hasMoreThanOneChild());
2500:       assertFalse(node1.isAssign());
2501:       assertFalse(node1.isBlock());
2502:       assertFalse(node1.isScript());
2503:       assertFalse(node1.isStringKey());
2504:       assertFalse(node1.isAnd());
2505:       assertFalse(node1.isNumber());
2506:       assertEquals((-1), node1.getSourcePosition());
2507:       assertFalse(node1.isObjectLit());
2508:       assertFalse(node1.isNot());
2509:       assertFalse(node1.isGetProp());
2510:       assertFalse(node1.isParamList());
2511:       assertFalse(node1.isBreak());
2512:       assertFalse(node1.isCall());
2513:       assertFalse(node1.isVar());
2514:       assertTrue(node1.isThrow());
2515:       assertFalse(node1.isComma());
2516:       assertFalse(node1.isNew());
2517:       assertFalse(node1.isTrue());
2518:       assertFalse(node1.isExprResult());
2519:       assertFalse(node1.isAdd());
2520:       assertFalse(node1.isDefaultCase());
2521:       assertFalse(node1.isDo());
2522:       assertFalse(node1.isVoid());
2523:       assertFalse(node1.isName());
2524:       assertFalse(node1.isEmpty());
2525:       assertFalse(node1.isNull());
2526:       assertFalse(node1.isOr());
2527:       assertEquals((-1), int1);
2528:       assertFalse(node0.equals((Object)node2));
2529:       assertFalse(node0.equals((Object)node1));
2530:       assertFalse(node0.equals((Object)node3));
2531:       assertFalse(int1 == int0);
2532:       assertFalse(node1.equals((Object)node0));
2533:       assertFalse(node1.equals((Object)node3));
2534:       assertFalse(node1.equals((Object)node2));
2535:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2536:       assertEquals(36, Node.QUOTED_PROP);
2537:       assertEquals(43, Node.IS_CONSTANT_NAME);
2538:   }
2539: }
RegularFileObject[/tmp/EvoSuite_127_1629223220330/com/google/javascript/rhino/Node_127_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:00:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_127_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_127_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_127_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.common.base.Objects",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.common.collect.ImmutableSet",
337:       "com.google.common.collect.EmptyImmutableSet",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Platform",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.javascript.rhino.InputId",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.javascript.rhino.jstype.JSType$2",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.javascript.rhino.JSTypeExpression",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.common.collect.AbstractMultimap$Values",
360:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
361:       "com.google.common.collect.AbstractMapBasedMultimap$1",
362:       "com.google.common.collect.Multimaps$Entries",
363:       "com.google.common.collect.AbstractMultimap$Entries",
364:       "com.google.common.collect.AbstractMapBasedMultimap$2"
365:     );
366:   }
367: }

[MASTER] 18:00:21.142 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("Q#{!t ");
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertNotNull(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertNotNull(iterable0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

node0.setLength(122);
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

String string0 = node0.toString();
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertNotNull(string0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

node0.setOptionalArg(false);
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

Node node1 = new Node(49, node0, node0);
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean0 = node1.isThis();
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);

Node node2 = new Node(376, 46, 3208);
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals(3208, node2.getCharno());
assertFalse(node2.isComma());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertEquals(191624, node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertEquals(46, node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isWhile());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertFalse(node2.isEmpty());
assertEquals(376, node2.getType());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean1 = node2.isBlock();
assertNotSame(node2, node1);
assertFalse(node2.isNot());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals(3208, node2.getCharno());
assertFalse(node2.isComma());
assertFalse(node2.isCast());
assertFalse(node2.isExprResult());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isGetProp());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertEquals(191624, node2.getSourcePosition());
assertFalse(node2.isFalse());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isVoid());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertEquals(46, node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isSwitch());
assertFalse(node2.isWhile());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isCall());
assertFalse(node2.isTypeOf());
assertFalse(node2.isEmpty());
assertEquals(376, node2.getType());
assertFalse(node2.isGetElem());
assertFalse(node2.isName());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(boolean1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean2 = node0.isBlock();
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(boolean2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

boolean boolean3 = node0.isFromExterns();
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(boolean3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

Node node3 = Node.newString(12288, "STRING Q#{!t  [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002]");
assertNotSame(node3, node0);
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertEquals(12288, node3.getType());
assertFalse(node3.isString());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isIn());
assertFalse(node3.isAnd());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isLabelName());
assertFalse(node3.isIf());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isNE());
assertFalse(node3.isWith());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isNull());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isDo());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isOr());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isDelProp());
assertFalse(node3.isWhile());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertNotNull(node3);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

int int0 = node1.getSideEffectFlags();
assertNotSame(node0, node3);
assertNotSame(node1, node2);
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertEquals(0, int0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean4 = node3.isContinue();
assertNotSame(node3, node0);
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertEquals(12288, node3.getType());
assertFalse(node3.isString());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isIn());
assertFalse(node3.isAnd());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isLabelName());
assertFalse(node3.isIf());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isNE());
assertFalse(node3.isWith());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isNull());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isDo());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isOr());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isDelProp());
assertFalse(node3.isWhile());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(boolean4);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node0.setChangeTime(40);
assertNotSame(node0, node3);
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

boolean boolean5 = node3.isThis();
assertNotSame(node3, node0);
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertEquals(12288, node3.getType());
assertFalse(node3.isString());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isIn());
assertFalse(node3.isAnd());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isLabelName());
assertFalse(node3.isIf());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isNE());
assertFalse(node3.isWith());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isNull());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isDo());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isOr());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isDelProp());
assertFalse(node3.isWhile());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(boolean5);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean3);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

boolean boolean6 = node1.isBlock();
assertNotSame(node0, node3);
assertNotSame(node1, node2);
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(boolean6);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean7 = node3.isFromExterns();
assertNotSame(node3, node0);
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isInc());
assertFalse(node3.isCase());
assertEquals(12288, node3.getType());
assertFalse(node3.isString());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isIn());
assertFalse(node3.isAnd());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isArrayLit());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isLabelName());
assertFalse(node3.isIf());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isNE());
assertFalse(node3.isWith());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isName());
assertFalse(node3.isStringKey());
assertFalse(node3.isNull());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertFalse(node3.isDo());
assertFalse(node3.isFunction());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isEmpty());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isOr());
assertFalse(node3.isReturn());
assertFalse(node3.isGetProp());
assertFalse(node3.isDelProp());
assertFalse(node3.isWhile());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isComma());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(boolean7);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean1);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);

int int1 = node1.getSourcePosition();
assertNotSame(node0, node3);
assertNotSame(node1, node2);
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isRegExp());
assertFalse(node0.isNumber());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isScript());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertEquals(49, node1.getType());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFor());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isCast());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isParamList());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertTrue(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertEquals((-1), int1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(int1 == int0);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);


[MASTER] 18:00:23.793 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_144_1629223223632/com/google/javascript/rhino/Node_144_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_144_1629223223632/com/google/javascript/rhino/Node_144_tmp__ESTest_scaffolding.java]]
[MASTER] 18:00:23.793 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:23.793 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:23.795 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 235
[MASTER] 18:00:23.795 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 450
[MASTER] 18:00:23.796 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_144_1629223223632/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:00:23 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_144_tmp__ESTest extends Node_144_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("Q#{!t ");
22:       assertFalse(node0.isNot());
23:       assertFalse(node0.isWith());
24:       assertFalse(node0.isAnd());
25:       assertFalse(node0.hasOneChild());
26:       assertFalse(node0.isGetProp());
27:       assertFalse(node0.isObjectLit());
28:       assertFalse(node0.isScript());
29:       assertFalse(node0.isLabelName());
30:       assertEquals((-1), node0.getSourcePosition());
31:       assertFalse(node0.isThrow());
32:       assertFalse(node0.isLabel());
33:       assertFalse(node0.isCast());
34:       assertFalse(node0.isFalse());
35:       assertFalse(node0.isContinue());
36:       assertFalse(node0.isDo());
37:       assertFalse(node0.isWhile());
38:       assertFalse(node0.isAssignAdd());
39:       assertFalse(node0.isOr());
40:       assertFalse(node0.isAdd());
41:       assertFalse(node0.isNew());
42:       assertFalse(node0.isAssign());
43:       assertFalse(node0.isDelProp());
44:       assertFalse(node0.isGetElem());
45:       assertFalse(node0.isName());
46:       assertFalse(node0.isBreak());
47:       assertFalse(node0.isDec());
48:       assertFalse(node0.hasChildren());
49:       assertFalse(node0.isNull());
50:       assertFalse(node0.isReturn());
51:       assertFalse(node0.isComma());
52:       assertFalse(node0.isCall());
53:       assertFalse(node0.isExprResult());
54:       assertFalse(node0.isTypeOf());
55:       assertEquals(40, node0.getType());
56:       assertFalse(node0.isTrue());
57:       assertFalse(node0.isVoid());
58:       assertFalse(node0.isDefaultCase());
59:       assertFalse(node0.isTry());
60:       assertFalse(node0.isDebugger());
61:       assertFalse(node0.isSetterDef());
62:       assertFalse(node0.isEmpty());
63:       assertFalse(node0.isGetterDef());
64:       assertFalse(node0.isVar());
65:       assertFalse(node0.isStringKey());
66:       assertFalse(node0.isParamList());
67:       assertEquals(0, node0.getChildCount());
68:       assertFalse(node0.isArrayLit());
69:       assertFalse(node0.isFunction());
70:       assertFalse(node0.isCase());
71:       assertFalse(node0.isSwitch());
72:       assertTrue(node0.isString());
73:       assertEquals((-1), node0.getCharno());
74:       assertFalse(node0.isInc());
75:       assertFalse(node0.isIn());
76:       assertFalse(node0.isNumber());
77:       assertFalse(node0.isFor());
78:       assertFalse(node0.isNE());
79:       assertFalse(node0.isThis());
80:       assertFalse(node0.isIf());
81:       assertFalse(node0.isBlock());
82:       assertFalse(node0.isHook());
83:       assertEquals((-1), node0.getLineno());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isCatch());
86:       assertFalse(node0.isRegExp());
87:       assertFalse(node0.isInstanceOf());
88:       assertNotNull(node0);
89:       assertEquals(49, Node.DIRECT_EVAL);
90:       assertEquals(30, Node.VAR_ARGS_NAME);
91:       assertEquals(1, Node.DECR_FLAG);
92:       assertEquals(15, Node.NO_SIDE_EFFECTS);
93:       assertEquals(12, Node.COLUMN_BITS);
94:       assertEquals(32, Node.INCRDECR_PROP);
95:       assertEquals(57, Node.LAST_PROP);
96:       assertEquals(37, Node.OPT_ARG_NAME);
97:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
98:       assertEquals(2, Node.POST_FLAG);
99:       assertEquals(29, Node.JSDOC_INFO_PROP);
100:       assertEquals(47, Node.IS_DISPATCHER);
101:       assertEquals(57, Node.REFLECTED_OBJECT);
102:       assertEquals(56, Node.CHANGE_TIME);
103:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
104:       assertEquals(53, Node.INPUT_ID);
105:       assertEquals(39, Node.EMPTY_BLOCK);
106:       assertEquals(36, Node.QUOTED_PROP);
107:       assertEquals(55, Node.INFERRED_FUNCTION);
108:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
109:       assertEquals(52, Node.LENGTH);
110:       assertEquals(8, Node.FLAG_NO_THROWS);
111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
112:       assertEquals(43, Node.IS_CONSTANT_NAME);
113:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
114:       assertEquals(48, Node.DIRECTIVES);
115:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
116:       assertEquals(4095, Node.COLUMN_MASK);
117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
119:       assertEquals(50, Node.FREE_CALL);
120:       assertEquals(40, Node.ORIGINALNAME_PROP);
121:       assertEquals(46, Node.IS_NAMESPACE);
122:       assertEquals(54, Node.SLASH_V);
123:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
124:       assertEquals(51, Node.STATIC_SOURCE_FILE);
125:       
126:       Node node1 = Node.newString("Q#{!t ");
127:       assertNotSame(node1, node0);
128:       assertEquals((-1), node1.getLineno());
129:       assertFalse(node1.isAssignAdd());
130:       assertFalse(node1.isOr());
131:       assertFalse(node1.hasMoreThanOneChild());
132:       assertFalse(node1.isContinue());
133:       assertEquals((-1), node1.getSourcePosition());
134:       assertFalse(node1.isLabelName());
135:       assertFalse(node1.isNumber());
136:       assertFalse(node1.isNew());
137:       assertFalse(node1.isCast());
138:       assertFalse(node1.isAdd());
139:       assertFalse(node1.isDo());
140:       assertFalse(node1.isVar());
141:       assertFalse(node1.isLabel());
142:       assertEquals(0, node1.getChildCount());
143:       assertFalse(node1.isInstanceOf());
144:       assertFalse(node1.isCatch());
145:       assertFalse(node1.isSetterDef());
146:       assertFalse(node1.isStringKey());
147:       assertFalse(node1.isParamList());
148:       assertFalse(node1.hasOneChild());
149:       assertFalse(node1.isTry());
150:       assertTrue(node1.isString());
151:       assertFalse(node1.isScript());
152:       assertFalse(node1.isRegExp());
153:       assertFalse(node1.isWith());
154:       assertFalse(node1.isFor());
155:       assertFalse(node1.isThis());
156:       assertFalse(node1.isBlock());
157:       assertFalse(node1.isHook());
158:       assertFalse(node1.isIn());
159:       assertFalse(node1.isCase());
160:       assertFalse(node1.isGetterDef());
161:       assertFalse(node1.isIf());
162:       assertFalse(node1.isDelProp());
163:       assertFalse(node1.isSwitch());
164:       assertEquals((-1), node1.getCharno());
165:       assertFalse(node1.isNE());
166:       assertFalse(node1.isEmpty());
167:       assertFalse(node1.isArrayLit());
168:       assertFalse(node1.isInc());
169:       assertFalse(node1.isDefaultCase());
170:       assertFalse(node1.isFunction());
171:       assertFalse(node1.isFalse());
172:       assertFalse(node1.isThrow());
173:       assertEquals(40, node1.getType());
174:       assertFalse(node1.isGetProp());
175:       assertFalse(node1.isBreak());
176:       assertFalse(node1.isNot());
177:       assertFalse(node1.isName());
178:       assertFalse(node1.isDebugger());
179:       assertFalse(node1.isAnd());
180:       assertFalse(node1.isObjectLit());
181:       assertFalse(node1.isTrue());
182:       assertFalse(node1.isNull());
183:       assertFalse(node1.isVoid());
184:       assertFalse(node1.isGetElem());
185:       assertFalse(node1.isCall());
186:       assertFalse(node1.isExprResult());
187:       assertFalse(node1.hasChildren());
188:       assertFalse(node1.isWhile());
189:       assertFalse(node1.isDec());
190:       assertFalse(node1.isAssign());
191:       assertFalse(node1.isTypeOf());
192:       assertFalse(node1.isComma());
193:       assertFalse(node1.isReturn());
194:       assertNotNull(node1);
195:       assertFalse(node1.equals((Object)node0));
196:       assertEquals(48, Node.DIRECTIVES);
197:       assertEquals(55, Node.INFERRED_FUNCTION);
198:       assertEquals(8, Node.FLAG_NO_THROWS);
199:       assertEquals(39, Node.EMPTY_BLOCK);
200:       assertEquals(4095, Node.COLUMN_MASK);
201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
202:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
203:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
204:       assertEquals(52, Node.LENGTH);
205:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
206:       assertEquals(15, Node.NO_SIDE_EFFECTS);
207:       assertEquals(53, Node.INPUT_ID);
208:       assertEquals(29, Node.JSDOC_INFO_PROP);
209:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
210:       assertEquals(36, Node.QUOTED_PROP);
211:       assertEquals(49, Node.DIRECT_EVAL);
212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
213:       assertEquals(56, Node.CHANGE_TIME);
214:       assertEquals(57, Node.REFLECTED_OBJECT);
215:       assertEquals(51, Node.STATIC_SOURCE_FILE);
216:       assertEquals(32, Node.INCRDECR_PROP);
217:       assertEquals(37, Node.OPT_ARG_NAME);
218:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
219:       assertEquals(57, Node.LAST_PROP);
220:       assertEquals(47, Node.IS_DISPATCHER);
221:       assertEquals(1, Node.DECR_FLAG);
222:       assertEquals(2, Node.POST_FLAG);
223:       assertEquals(30, Node.VAR_ARGS_NAME);
224:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
225:       assertEquals(12, Node.COLUMN_BITS);
226:       assertEquals(40, Node.ORIGINALNAME_PROP);
227:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
228:       assertEquals(50, Node.FREE_CALL);
229:       assertEquals(43, Node.IS_CONSTANT_NAME);
230:       assertEquals(46, Node.IS_NAMESPACE);
231:       assertEquals(54, Node.SLASH_V);
232:       
233:       Iterable<Node> iterable0 = node0.children();
234:       assertNotSame(node0, node1);
235:       assertFalse(iterable0.contains(node1));
236:       assertFalse(node0.isNot());
237:       assertFalse(node0.isWith());
238:       assertFalse(node0.isAnd());
239:       assertFalse(node0.hasOneChild());
240:       assertFalse(node0.isGetProp());
241:       assertFalse(node0.isObjectLit());
242:       assertFalse(node0.isScript());
243:       assertFalse(node0.isLabelName());
244:       assertEquals((-1), node0.getSourcePosition());
245:       assertFalse(node0.isThrow());
246:       assertFalse(node0.isLabel());
247:       assertFalse(node0.isCast());
248:       assertFalse(node0.isFalse());
249:       assertFalse(node0.isContinue());
250:       assertFalse(node0.isDo());
251:       assertFalse(node0.isWhile());
252:       assertFalse(node0.isAssignAdd());
253:       assertFalse(node0.isOr());
254:       assertFalse(node0.isAdd());
255:       assertFalse(node0.isNew());
256:       assertFalse(node0.isAssign());
257:       assertFalse(node0.isDelProp());
258:       assertFalse(node0.isGetElem());
259:       assertFalse(node0.isName());
260:       assertFalse(node0.isBreak());
261:       assertFalse(node0.isDec());
262:       assertFalse(node0.hasChildren());
263:       assertFalse(node0.isNull());
264:       assertFalse(node0.isReturn());
265:       assertFalse(node0.isComma());
266:       assertFalse(node0.isCall());
267:       assertFalse(node0.isExprResult());
268:       assertFalse(node0.isTypeOf());
269:       assertEquals(40, node0.getType());
270:       assertFalse(node0.isTrue());
271:       assertFalse(node0.isVoid());
272:       assertFalse(node0.isDefaultCase());
273:       assertFalse(node0.isTry());
274:       assertFalse(node0.isDebugger());
275:       assertFalse(node0.isSetterDef());
276:       assertFalse(node0.isEmpty());
277:       assertFalse(node0.isGetterDef());
278:       assertFalse(node0.isVar());
279:       assertFalse(node0.isStringKey());
280:       assertFalse(node0.isParamList());
281:       assertEquals(0, node0.getChildCount());
282:       assertFalse(node0.isArrayLit());
283:       assertFalse(node0.isFunction());
284:       assertFalse(node0.isCase());
285:       assertFalse(node0.isSwitch());
286:       assertTrue(node0.isString());
287:       assertEquals((-1), node0.getCharno());
288:       assertFalse(node0.isInc());
289:       assertFalse(node0.isIn());
290:       assertFalse(node0.isNumber());
291:       assertFalse(node0.isFor());
292:       assertFalse(node0.isNE());
293:       assertFalse(node0.isThis());
294:       assertFalse(node0.isIf());
295:       assertFalse(node0.isBlock());
296:       assertFalse(node0.isHook());
297:       assertEquals((-1), node0.getLineno());
298:       assertFalse(node0.hasMoreThanOneChild());
299:       assertFalse(node0.isCatch());
300:       assertFalse(node0.isRegExp());
301:       assertFalse(node0.isInstanceOf());
302:       assertNotNull(iterable0);
303:       assertFalse(node0.equals((Object)node1));
304:       assertEquals(49, Node.DIRECT_EVAL);
305:       assertEquals(30, Node.VAR_ARGS_NAME);
306:       assertEquals(1, Node.DECR_FLAG);
307:       assertEquals(15, Node.NO_SIDE_EFFECTS);
308:       assertEquals(12, Node.COLUMN_BITS);
309:       assertEquals(32, Node.INCRDECR_PROP);
310:       assertEquals(57, Node.LAST_PROP);
311:       assertEquals(37, Node.OPT_ARG_NAME);
312:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
313:       assertEquals(2, Node.POST_FLAG);
314:       assertEquals(29, Node.JSDOC_INFO_PROP);
315:       assertEquals(47, Node.IS_DISPATCHER);
316:       assertEquals(57, Node.REFLECTED_OBJECT);
317:       assertEquals(56, Node.CHANGE_TIME);
318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
319:       assertEquals(53, Node.INPUT_ID);
320:       assertEquals(39, Node.EMPTY_BLOCK);
321:       assertEquals(36, Node.QUOTED_PROP);
322:       assertEquals(55, Node.INFERRED_FUNCTION);
323:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
324:       assertEquals(52, Node.LENGTH);
325:       assertEquals(8, Node.FLAG_NO_THROWS);
326:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
327:       assertEquals(43, Node.IS_CONSTANT_NAME);
328:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
329:       assertEquals(48, Node.DIRECTIVES);
330:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
331:       assertEquals(4095, Node.COLUMN_MASK);
332:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
333:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
334:       assertEquals(50, Node.FREE_CALL);
335:       assertEquals(40, Node.ORIGINALNAME_PROP);
336:       assertEquals(46, Node.IS_NAMESPACE);
337:       assertEquals(54, Node.SLASH_V);
338:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
339:       assertEquals(51, Node.STATIC_SOURCE_FILE);
340:       
341:       node0.setLength(122);
342:       assertNotSame(node0, node1);
343:       assertFalse(node0.isNot());
344:       assertFalse(node0.isWith());
345:       assertFalse(node0.isAnd());
346:       assertFalse(node0.hasOneChild());
347:       assertFalse(node0.isGetProp());
348:       assertFalse(node0.isObjectLit());
349:       assertFalse(node0.isScript());
350:       assertFalse(node0.isLabelName());
351:       assertEquals((-1), node0.getSourcePosition());
352:       assertFalse(node0.isThrow());
353:       assertFalse(node0.isLabel());
354:       assertFalse(node0.isCast());
355:       assertFalse(node0.isFalse());
356:       assertFalse(node0.isContinue());
357:       assertFalse(node0.isDo());
358:       assertFalse(node0.isWhile());
359:       assertFalse(node0.isAssignAdd());
360:       assertFalse(node0.isOr());
361:       assertFalse(node0.isAdd());
362:       assertFalse(node0.isNew());
363:       assertFalse(node0.isAssign());
364:       assertFalse(node0.isDelProp());
365:       assertFalse(node0.isGetElem());
366:       assertFalse(node0.isName());
367:       assertFalse(node0.isBreak());
368:       assertFalse(node0.isDec());
369:       assertFalse(node0.hasChildren());
370:       assertFalse(node0.isNull());
371:       assertFalse(node0.isReturn());
372:       assertFalse(node0.isComma());
373:       assertFalse(node0.isCall());
374:       assertFalse(node0.isExprResult());
375:       assertFalse(node0.isTypeOf());
376:       assertEquals(40, node0.getType());
377:       assertFalse(node0.isTrue());
378:       assertFalse(node0.isVoid());
379:       assertFalse(node0.isDefaultCase());
380:       assertFalse(node0.isTry());
381:       assertFalse(node0.isDebugger());
382:       assertFalse(node0.isSetterDef());
383:       assertFalse(node0.isEmpty());
384:       assertFalse(node0.isGetterDef());
385:       assertFalse(node0.isVar());
386:       assertFalse(node0.isStringKey());
387:       assertFalse(node0.isParamList());
388:       assertEquals(0, node0.getChildCount());
389:       assertFalse(node0.isArrayLit());
390:       assertFalse(node0.isFunction());
391:       assertFalse(node0.isCase());
392:       assertFalse(node0.isSwitch());
393:       assertTrue(node0.isString());
394:       assertEquals((-1), node0.getCharno());
395:       assertFalse(node0.isInc());
396:       assertFalse(node0.isIn());
397:       assertFalse(node0.isNumber());
398:       assertFalse(node0.isFor());
399:       assertFalse(node0.isNE());
400:       assertFalse(node0.isThis());
401:       assertFalse(node0.isIf());
402:       assertFalse(node0.isBlock());
403:       assertFalse(node0.isHook());
404:       assertEquals((-1), node0.getLineno());
405:       assertFalse(node0.hasMoreThanOneChild());
406:       assertFalse(node0.isCatch());
407:       assertFalse(node0.isRegExp());
408:       assertFalse(node0.isInstanceOf());
409:       assertFalse(node0.equals((Object)node1));
410:       assertEquals(49, Node.DIRECT_EVAL);
411:       assertEquals(30, Node.VAR_ARGS_NAME);
412:       assertEquals(1, Node.DECR_FLAG);
413:       assertEquals(15, Node.NO_SIDE_EFFECTS);
414:       assertEquals(12, Node.COLUMN_BITS);
415:       assertEquals(32, Node.INCRDECR_PROP);
416:       assertEquals(57, Node.LAST_PROP);
417:       assertEquals(37, Node.OPT_ARG_NAME);
418:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
419:       assertEquals(2, Node.POST_FLAG);
420:       assertEquals(29, Node.JSDOC_INFO_PROP);
421:       assertEquals(47, Node.IS_DISPATCHER);
422:       assertEquals(57, Node.REFLECTED_OBJECT);
423:       assertEquals(56, Node.CHANGE_TIME);
424:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
425:       assertEquals(53, Node.INPUT_ID);
426:       assertEquals(39, Node.EMPTY_BLOCK);
427:       assertEquals(36, Node.QUOTED_PROP);
428:       assertEquals(55, Node.INFERRED_FUNCTION);
429:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
430:       assertEquals(52, Node.LENGTH);
431:       assertEquals(8, Node.FLAG_NO_THROWS);
432:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
433:       assertEquals(43, Node.IS_CONSTANT_NAME);
434:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
435:       assertEquals(48, Node.DIRECTIVES);
436:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
437:       assertEquals(4095, Node.COLUMN_MASK);
438:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
440:       assertEquals(50, Node.FREE_CALL);
441:       assertEquals(40, Node.ORIGINALNAME_PROP);
442:       assertEquals(46, Node.IS_NAMESPACE);
443:       assertEquals(54, Node.SLASH_V);
444:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
445:       assertEquals(51, Node.STATIC_SOURCE_FILE);
446:       
447:       Iterable<Node> iterable1 = node0.children();
448:       assertNotSame(node0, node1);
449:       assertSame(iterable1, iterable0);
450:       assertFalse(iterable1.contains(node1));
451:       assertFalse(node0.isNot());
452:       assertFalse(node0.isWith());
453:       assertFalse(node0.isAnd());
454:       assertFalse(node0.hasOneChild());
455:       assertFalse(node0.isGetProp());
456:       assertFalse(node0.isObjectLit());
457:       assertFalse(node0.isScript());
458:       assertFalse(node0.isLabelName());
459:       assertEquals((-1), node0.getSourcePosition());
460:       assertFalse(node0.isThrow());
461:       assertFalse(node0.isLabel());
462:       assertFalse(node0.isCast());
463:       assertFalse(node0.isFalse());
464:       assertFalse(node0.isContinue());
465:       assertFalse(node0.isDo());
466:       assertFalse(node0.isWhile());
467:       assertFalse(node0.isAssignAdd());
468:       assertFalse(node0.isOr());
469:       assertFalse(node0.isAdd());
470:       assertFalse(node0.isNew());
471:       assertFalse(node0.isAssign());
472:       assertFalse(node0.isDelProp());
473:       assertFalse(node0.isGetElem());
474:       assertFalse(node0.isName());
475:       assertFalse(node0.isBreak());
476:       assertFalse(node0.isDec());
477:       assertFalse(node0.hasChildren());
478:       assertFalse(node0.isNull());
479:       assertFalse(node0.isReturn());
480:       assertFalse(node0.isComma());
481:       assertFalse(node0.isCall());
482:       assertFalse(node0.isExprResult());
483:       assertFalse(node0.isTypeOf());
484:       assertEquals(40, node0.getType());
485:       assertFalse(node0.isTrue());
486:       assertFalse(node0.isVoid());
487:       assertFalse(node0.isDefaultCase());
488:       assertFalse(node0.isTry());
489:       assertFalse(node0.isDebugger());
490:       assertFalse(node0.isSetterDef());
491:       assertFalse(node0.isEmpty());
492:       assertFalse(node0.isGetterDef());
493:       assertFalse(node0.isVar());
494:       assertFalse(node0.isStringKey());
495:       assertFalse(node0.isParamList());
496:       assertEquals(0, node0.getChildCount());
497:       assertFalse(node0.isArrayLit());
498:       assertFalse(node0.isFunction());
499:       assertFalse(node0.isCase());
500:       assertFalse(node0.isSwitch());
501:       assertTrue(node0.isString());
502:       assertEquals((-1), node0.getCharno());
503:       assertFalse(node0.isInc());
504:       assertFalse(node0.isIn());
505:       assertFalse(node0.isNumber());
506:       assertFalse(node0.isFor());
507:       assertFalse(node0.isNE());
508:       assertFalse(node0.isThis());
509:       assertFalse(node0.isIf());
510:       assertFalse(node0.isBlock());
511:       assertFalse(node0.isHook());
512:       assertEquals((-1), node0.getLineno());
513:       assertFalse(node0.hasMoreThanOneChild());
514:       assertFalse(node0.isCatch());
515:       assertFalse(node0.isRegExp());
516:       assertFalse(node0.isInstanceOf());
517:       assertNotNull(iterable1);
518:       assertFalse(node0.equals((Object)node1));
519:       assertEquals(49, Node.DIRECT_EVAL);
520:       assertEquals(30, Node.VAR_ARGS_NAME);
521:       assertEquals(1, Node.DECR_FLAG);
522:       assertEquals(15, Node.NO_SIDE_EFFECTS);
523:       assertEquals(12, Node.COLUMN_BITS);
524:       assertEquals(32, Node.INCRDECR_PROP);
525:       assertEquals(57, Node.LAST_PROP);
526:       assertEquals(37, Node.OPT_ARG_NAME);
527:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
528:       assertEquals(2, Node.POST_FLAG);
529:       assertEquals(29, Node.JSDOC_INFO_PROP);
530:       assertEquals(47, Node.IS_DISPATCHER);
531:       assertEquals(57, Node.REFLECTED_OBJECT);
532:       assertEquals(56, Node.CHANGE_TIME);
533:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
534:       assertEquals(53, Node.INPUT_ID);
535:       assertEquals(39, Node.EMPTY_BLOCK);
536:       assertEquals(36, Node.QUOTED_PROP);
537:       assertEquals(55, Node.INFERRED_FUNCTION);
538:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
539:       assertEquals(52, Node.LENGTH);
540:       assertEquals(8, Node.FLAG_NO_THROWS);
541:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
542:       assertEquals(43, Node.IS_CONSTANT_NAME);
543:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
544:       assertEquals(48, Node.DIRECTIVES);
545:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
546:       assertEquals(4095, Node.COLUMN_MASK);
547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
548:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
549:       assertEquals(50, Node.FREE_CALL);
550:       assertEquals(40, Node.ORIGINALNAME_PROP);
551:       assertEquals(46, Node.IS_NAMESPACE);
552:       assertEquals(54, Node.SLASH_V);
553:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
554:       assertEquals(51, Node.STATIC_SOURCE_FILE);
555:       
556:       node0.setLength(122);
557:       assertNotSame(node0, node1);
558:       assertFalse(node0.isNot());
559:       assertFalse(node0.isWith());
560:       assertFalse(node0.isAnd());
561:       assertFalse(node0.hasOneChild());
562:       assertFalse(node0.isGetProp());
563:       assertFalse(node0.isObjectLit());
564:       assertFalse(node0.isScript());
565:       assertFalse(node0.isLabelName());
566:       assertEquals((-1), node0.getSourcePosition());
567:       assertFalse(node0.isThrow());
568:       assertFalse(node0.isLabel());
569:       assertFalse(node0.isCast());
570:       assertFalse(node0.isFalse());
571:       assertFalse(node0.isContinue());
572:       assertFalse(node0.isDo());
573:       assertFalse(node0.isWhile());
574:       assertFalse(node0.isAssignAdd());
575:       assertFalse(node0.isOr());
576:       assertFalse(node0.isAdd());
577:       assertFalse(node0.isNew());
578:       assertFalse(node0.isAssign());
579:       assertFalse(node0.isDelProp());
580:       assertFalse(node0.isGetElem());
581:       assertFalse(node0.isName());
582:       assertFalse(node0.isBreak());
583:       assertFalse(node0.isDec());
584:       assertFalse(node0.hasChildren());
585:       assertFalse(node0.isNull());
586:       assertFalse(node0.isReturn());
587:       assertFalse(node0.isComma());
588:       assertFalse(node0.isCall());
589:       assertFalse(node0.isExprResult());
590:       assertFalse(node0.isTypeOf());
591:       assertEquals(40, node0.getType());
592:       assertFalse(node0.isTrue());
593:       assertFalse(node0.isVoid());
594:       assertFalse(node0.isDefaultCase());
595:       assertFalse(node0.isTry());
596:       assertFalse(node0.isDebugger());
597:       assertFalse(node0.isSetterDef());
598:       assertFalse(node0.isEmpty());
599:       assertFalse(node0.isGetterDef());
600:       assertFalse(node0.isVar());
601:       assertFalse(node0.isStringKey());
602:       assertFalse(node0.isParamList());
603:       assertEquals(0, node0.getChildCount());
604:       assertFalse(node0.isArrayLit());
605:       assertFalse(node0.isFunction());
606:       assertFalse(node0.isCase());
607:       assertFalse(node0.isSwitch());
608:       assertTrue(node0.isString());
609:       assertEquals((-1), node0.getCharno());
610:       assertFalse(node0.isInc());
611:       assertFalse(node0.isIn());
612:       assertFalse(node0.isNumber());
613:       assertFalse(node0.isFor());
614:       assertFalse(node0.isNE());
615:       assertFalse(node0.isThis());
616:       assertFalse(node0.isIf());
617:       assertFalse(node0.isBlock());
618:       assertFalse(node0.isHook());
619:       assertEquals((-1), node0.getLineno());
620:       assertFalse(node0.hasMoreThanOneChild());
621:       assertFalse(node0.isCatch());
622:       assertFalse(node0.isRegExp());
623:       assertFalse(node0.isInstanceOf());
624:       assertFalse(node0.equals((Object)node1));
625:       assertEquals(49, Node.DIRECT_EVAL);
626:       assertEquals(30, Node.VAR_ARGS_NAME);
627:       assertEquals(1, Node.DECR_FLAG);
628:       assertEquals(15, Node.NO_SIDE_EFFECTS);
629:       assertEquals(12, Node.COLUMN_BITS);
630:       assertEquals(32, Node.INCRDECR_PROP);
631:       assertEquals(57, Node.LAST_PROP);
632:       assertEquals(37, Node.OPT_ARG_NAME);
633:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
634:       assertEquals(2, Node.POST_FLAG);
635:       assertEquals(29, Node.JSDOC_INFO_PROP);
636:       assertEquals(47, Node.IS_DISPATCHER);
637:       assertEquals(57, Node.REFLECTED_OBJECT);
638:       assertEquals(56, Node.CHANGE_TIME);
639:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
640:       assertEquals(53, Node.INPUT_ID);
641:       assertEquals(39, Node.EMPTY_BLOCK);
642:       assertEquals(36, Node.QUOTED_PROP);
643:       assertEquals(55, Node.INFERRED_FUNCTION);
644:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
645:       assertEquals(52, Node.LENGTH);
646:       assertEquals(8, Node.FLAG_NO_THROWS);
647:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
648:       assertEquals(43, Node.IS_CONSTANT_NAME);
649:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
650:       assertEquals(48, Node.DIRECTIVES);
651:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
652:       assertEquals(4095, Node.COLUMN_MASK);
653:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
654:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
655:       assertEquals(50, Node.FREE_CALL);
656:       assertEquals(40, Node.ORIGINALNAME_PROP);
657:       assertEquals(46, Node.IS_NAMESPACE);
658:       assertEquals(54, Node.SLASH_V);
659:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
660:       assertEquals(51, Node.STATIC_SOURCE_FILE);
661:       
662:       String string0 = node0.toString();
663:       assertNotSame(node0, node1);
664:       assertFalse(node0.isNot());
665:       assertFalse(node0.isWith());
666:       assertFalse(node0.isAnd());
667:       assertFalse(node0.hasOneChild());
668:       assertFalse(node0.isGetProp());
669:       assertFalse(node0.isObjectLit());
670:       assertFalse(node0.isScript());
671:       assertFalse(node0.isLabelName());
672:       assertEquals((-1), node0.getSourcePosition());
673:       assertFalse(node0.isThrow());
674:       assertFalse(node0.isLabel());
675:       assertFalse(node0.isCast());
676:       assertFalse(node0.isFalse());
677:       assertFalse(node0.isContinue());
678:       assertFalse(node0.isDo());
679:       assertFalse(node0.isWhile());
680:       assertFalse(node0.isAssignAdd());
681:       assertFalse(node0.isOr());
682:       assertFalse(node0.isAdd());
683:       assertFalse(node0.isNew());
684:       assertFalse(node0.isAssign());
685:       assertFalse(node0.isDelProp());
686:       assertFalse(node0.isGetElem());
687:       assertFalse(node0.isName());
688:       assertFalse(node0.isBreak());
689:       assertFalse(node0.isDec());
690:       assertFalse(node0.hasChildren());
691:       assertFalse(node0.isNull());
692:       assertFalse(node0.isReturn());
693:       assertFalse(node0.isComma());
694:       assertFalse(node0.isCall());
695:       assertFalse(node0.isExprResult());
696:       assertFalse(node0.isTypeOf());
697:       assertEquals(40, node0.getType());
698:       assertFalse(node0.isTrue());
699:       assertFalse(node0.isVoid());
700:       assertFalse(node0.isDefaultCase());
701:       assertFalse(node0.isTry());
702:       assertFalse(node0.isDebugger());
703:       assertFalse(node0.isSetterDef());
704:       assertFalse(node0.isEmpty());
705:       assertFalse(node0.isGetterDef());
706:       assertFalse(node0.isVar());
707:       assertFalse(node0.isStringKey());
708:       assertFalse(node0.isParamList());
709:       assertEquals(0, node0.getChildCount());
710:       assertFalse(node0.isArrayLit());
711:       assertFalse(node0.isFunction());
712:       assertFalse(node0.isCase());
713:       assertFalse(node0.isSwitch());
714:       assertTrue(node0.isString());
715:       assertEquals((-1), node0.getCharno());
716:       assertFalse(node0.isInc());
717:       assertFalse(node0.isIn());
718:       assertFalse(node0.isNumber());
719:       assertFalse(node0.isFor());
720:       assertFalse(node0.isNE());
721:       assertFalse(node0.isThis());
722:       assertFalse(node0.isIf());
723:       assertFalse(node0.isBlock());
724:       assertFalse(node0.isHook());
725:       assertEquals((-1), node0.getLineno());
726:       assertFalse(node0.hasMoreThanOneChild());
727:       assertFalse(node0.isCatch());
728:       assertFalse(node0.isRegExp());
729:       assertFalse(node0.isInstanceOf());
730:       assertNotNull(string0);
731:       assertFalse(node0.equals((Object)node1));
732:       assertEquals(49, Node.DIRECT_EVAL);
733:       assertEquals(30, Node.VAR_ARGS_NAME);
734:       assertEquals(1, Node.DECR_FLAG);
735:       assertEquals(15, Node.NO_SIDE_EFFECTS);
736:       assertEquals(12, Node.COLUMN_BITS);
737:       assertEquals(32, Node.INCRDECR_PROP);
738:       assertEquals(57, Node.LAST_PROP);
739:       assertEquals(37, Node.OPT_ARG_NAME);
740:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
741:       assertEquals(2, Node.POST_FLAG);
742:       assertEquals(29, Node.JSDOC_INFO_PROP);
743:       assertEquals(47, Node.IS_DISPATCHER);
744:       assertEquals(57, Node.REFLECTED_OBJECT);
745:       assertEquals(56, Node.CHANGE_TIME);
746:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
747:       assertEquals(53, Node.INPUT_ID);
748:       assertEquals(39, Node.EMPTY_BLOCK);
749:       assertEquals(36, Node.QUOTED_PROP);
750:       assertEquals(55, Node.INFERRED_FUNCTION);
751:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
752:       assertEquals(52, Node.LENGTH);
753:       assertEquals(8, Node.FLAG_NO_THROWS);
754:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
755:       assertEquals(43, Node.IS_CONSTANT_NAME);
756:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
757:       assertEquals(48, Node.DIRECTIVES);
758:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
759:       assertEquals(4095, Node.COLUMN_MASK);
760:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
761:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
762:       assertEquals(50, Node.FREE_CALL);
763:       assertEquals(40, Node.ORIGINALNAME_PROP);
764:       assertEquals(46, Node.IS_NAMESPACE);
765:       assertEquals(54, Node.SLASH_V);
766:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
767:       assertEquals(51, Node.STATIC_SOURCE_FILE);
768:       
769:       node0.setVarArgs(false);
770:       assertNotSame(node0, node1);
771:       assertFalse(node0.isNot());
772:       assertFalse(node0.isWith());
773:       assertFalse(node0.isAnd());
774:       assertFalse(node0.hasOneChild());
775:       assertFalse(node0.isGetProp());
776:       assertFalse(node0.isObjectLit());
777:       assertFalse(node0.isScript());
778:       assertFalse(node0.isLabelName());
779:       assertEquals((-1), node0.getSourcePosition());
780:       assertFalse(node0.isThrow());
781:       assertFalse(node0.isLabel());
782:       assertFalse(node0.isCast());
783:       assertFalse(node0.isFalse());
784:       assertFalse(node0.isContinue());
785:       assertFalse(node0.isDo());
786:       assertFalse(node0.isWhile());
787:       assertFalse(node0.isAssignAdd());
788:       assertFalse(node0.isOr());
789:       assertFalse(node0.isAdd());
790:       assertFalse(node0.isNew());
791:       assertFalse(node0.isAssign());
792:       assertFalse(node0.isDelProp());
793:       assertFalse(node0.isGetElem());
794:       assertFalse(node0.isName());
795:       assertFalse(node0.isBreak());
796:       assertFalse(node0.isDec());
797:       assertFalse(node0.hasChildren());
798:       assertFalse(node0.isNull());
799:       assertFalse(node0.isReturn());
800:       assertFalse(node0.isComma());
801:       assertFalse(node0.isCall());
802:       assertFalse(node0.isExprResult());
803:       assertFalse(node0.isTypeOf());
804:       assertEquals(40, node0.getType());
805:       assertFalse(node0.isTrue());
806:       assertFalse(node0.isVoid());
807:       assertFalse(node0.isDefaultCase());
808:       assertFalse(node0.isTry());
809:       assertFalse(node0.isDebugger());
810:       assertFalse(node0.isSetterDef());
811:       assertFalse(node0.isEmpty());
812:       assertFalse(node0.isGetterDef());
813:       assertFalse(node0.isVar());
814:       assertFalse(node0.isStringKey());
815:       assertFalse(node0.isParamList());
816:       assertEquals(0, node0.getChildCount());
817:       assertFalse(node0.isArrayLit());
818:       assertFalse(node0.isFunction());
819:       assertFalse(node0.isCase());
820:       assertFalse(node0.isSwitch());
821:       assertTrue(node0.isString());
822:       assertEquals((-1), node0.getCharno());
823:       assertFalse(node0.isInc());
824:       assertFalse(node0.isIn());
825:       assertFalse(node0.isNumber());
826:       assertFalse(node0.isFor());
827:       assertFalse(node0.isNE());
828:       assertFalse(node0.isThis());
829:       assertFalse(node0.isIf());
830:       assertFalse(node0.isBlock());
831:       assertFalse(node0.isHook());
832:       assertEquals((-1), node0.getLineno());
833:       assertFalse(node0.hasMoreThanOneChild());
834:       assertFalse(node0.isCatch());
835:       assertFalse(node0.isRegExp());
836:       assertFalse(node0.isInstanceOf());
837:       assertFalse(node0.equals((Object)node1));
838:       assertEquals(49, Node.DIRECT_EVAL);
839:       assertEquals(30, Node.VAR_ARGS_NAME);
840:       assertEquals(1, Node.DECR_FLAG);
841:       assertEquals(15, Node.NO_SIDE_EFFECTS);
842:       assertEquals(12, Node.COLUMN_BITS);
843:       assertEquals(32, Node.INCRDECR_PROP);
844:       assertEquals(57, Node.LAST_PROP);
845:       assertEquals(37, Node.OPT_ARG_NAME);
846:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
847:       assertEquals(2, Node.POST_FLAG);
848:       assertEquals(29, Node.JSDOC_INFO_PROP);
849:       assertEquals(47, Node.IS_DISPATCHER);
850:       assertEquals(57, Node.REFLECTED_OBJECT);
851:       assertEquals(56, Node.CHANGE_TIME);
852:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
853:       assertEquals(53, Node.INPUT_ID);
854:       assertEquals(39, Node.EMPTY_BLOCK);
855:       assertEquals(36, Node.QUOTED_PROP);
856:       assertEquals(55, Node.INFERRED_FUNCTION);
857:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
858:       assertEquals(52, Node.LENGTH);
859:       assertEquals(8, Node.FLAG_NO_THROWS);
860:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
861:       assertEquals(43, Node.IS_CONSTANT_NAME);
862:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
863:       assertEquals(48, Node.DIRECTIVES);
864:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
865:       assertEquals(4095, Node.COLUMN_MASK);
866:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
867:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
868:       assertEquals(50, Node.FREE_CALL);
869:       assertEquals(40, Node.ORIGINALNAME_PROP);
870:       assertEquals(46, Node.IS_NAMESPACE);
871:       assertEquals(54, Node.SLASH_V);
872:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
873:       assertEquals(51, Node.STATIC_SOURCE_FILE);
874:       
875:       Node node2 = new Node(41);
876:       assertFalse(node2.isCase());
877:       assertFalse(node2.isString());
878:       assertEquals(41, node2.getType());
879:       assertFalse(node2.isSwitch());
880:       assertFalse(node2.isInc());
881:       assertFalse(node2.isHook());
882:       assertFalse(node2.isFor());
883:       assertFalse(node2.isFalse());
884:       assertFalse(node2.isArrayLit());
885:       assertFalse(node2.isGetProp());
886:       assertFalse(node2.isDebugger());
887:       assertEquals((-1), node2.getCharno());
888:       assertFalse(node2.isGetterDef());
889:       assertFalse(node2.isObjectLit());
890:       assertFalse(node2.isWith());
891:       assertFalse(node2.isAnd());
892:       assertFalse(node2.isCatch());
893:       assertFalse(node2.isScript());
894:       assertFalse(node2.isTry());
895:       assertFalse(node2.isInstanceOf());
896:       assertFalse(node2.isRegExp());
897:       assertFalse(node2.isFunction());
898:       assertFalse(node2.isThis());
899:       assertFalse(node2.isThrow());
900:       assertFalse(node2.isSetterDef());
901:       assertFalse(node2.isIf());
902:       assertTrue(node2.isNull());
903:       assertFalse(node2.isNE());
904:       assertFalse(node2.isIn());
905:       assertFalse(node2.isContinue());
906:       assertFalse(node2.isWhile());
907:       assertEquals((-1), node2.getLineno());
908:       assertFalse(node2.isDo());
909:       assertFalse(node2.isNew());
910:       assertFalse(node2.isBlock());
911:       assertFalse(node2.isLabel());
912:       assertFalse(node2.isAssignAdd());
913:       assertFalse(node2.isReturn());
914:       assertFalse(node2.isVar());
915:       assertFalse(node2.isTypeOf());
916:       assertFalse(node2.hasMoreThanOneChild());
917:       assertFalse(node2.hasChildren());
918:       assertFalse(node2.isAssign());
919:       assertFalse(node2.isDec());
920:       assertFalse(node2.isLabelName());
921:       assertFalse(node2.isStringKey());
922:       assertFalse(node2.isCast());
923:       assertFalse(node2.hasOneChild());
924:       assertFalse(node2.isParamList());
925:       assertEquals((-1), node2.getSourcePosition());
926:       assertFalse(node2.isNumber());
927:       assertFalse(node2.isNot());
928:       assertFalse(node2.isDefaultCase());
929:       assertFalse(node2.isVoid());
930:       assertFalse(node2.isExprResult());
931:       assertEquals(0, node2.getChildCount());
932:       assertFalse(node2.isComma());
933:       assertFalse(node2.isEmpty());
934:       assertFalse(node2.isName());
935:       assertFalse(node2.isGetElem());
936:       assertFalse(node2.isCall());
937:       assertFalse(node2.isDelProp());
938:       assertFalse(node2.isBreak());
939:       assertFalse(node2.isAdd());
940:       assertFalse(node2.isTrue());
941:       assertFalse(node2.isOr());
942:       assertNotNull(node2);
943:       assertFalse(node2.equals((Object)node1));
944:       assertFalse(node2.equals((Object)node0));
945:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
946:       assertEquals(55, Node.INFERRED_FUNCTION);
947:       assertEquals(4095, Node.COLUMN_MASK);
948:       assertEquals(48, Node.DIRECTIVES);
949:       assertEquals(53, Node.INPUT_ID);
950:       assertEquals(8, Node.FLAG_NO_THROWS);
951:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
952:       assertEquals(43, Node.IS_CONSTANT_NAME);
953:       assertEquals(36, Node.QUOTED_PROP);
954:       assertEquals(40, Node.ORIGINALNAME_PROP);
955:       assertEquals(29, Node.JSDOC_INFO_PROP);
956:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
957:       assertEquals(39, Node.EMPTY_BLOCK);
958:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
959:       assertEquals(47, Node.IS_DISPATCHER);
960:       assertEquals(2, Node.POST_FLAG);
961:       assertEquals(30, Node.VAR_ARGS_NAME);
962:       assertEquals(1, Node.DECR_FLAG);
963:       assertEquals(49, Node.DIRECT_EVAL);
964:       assertEquals(15, Node.NO_SIDE_EFFECTS);
965:       assertEquals(57, Node.LAST_PROP);
966:       assertEquals(32, Node.INCRDECR_PROP);
967:       assertEquals(54, Node.SLASH_V);
968:       assertEquals(52, Node.LENGTH);
969:       assertEquals(56, Node.CHANGE_TIME);
970:       assertEquals(51, Node.STATIC_SOURCE_FILE);
971:       assertEquals(57, Node.REFLECTED_OBJECT);
972:       assertEquals(46, Node.IS_NAMESPACE);
973:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
974:       assertEquals(50, Node.FREE_CALL);
975:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
976:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
977:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
978:       assertEquals(37, Node.OPT_ARG_NAME);
979:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
980:       assertEquals(12, Node.COLUMN_BITS);
981:       
982:       Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
983:       assertFalse(node2.isCase());
984:       assertFalse(node2.isString());
985:       assertEquals(41, node2.getType());
986:       assertFalse(node2.isSwitch());
987:       assertFalse(node2.isInc());
988:       assertFalse(node2.isHook());
989:       assertFalse(node2.isFor());
990:       assertFalse(node2.isFalse());
991:       assertFalse(node2.isArrayLit());
992:       assertFalse(node2.isGetProp());
993:       assertFalse(node2.isDebugger());
994:       assertEquals((-1), node2.getCharno());
995:       assertFalse(node2.isGetterDef());
996:       assertFalse(node2.isObjectLit());
997:       assertFalse(node2.isWith());
998:       assertFalse(node2.isAnd());
999:       assertFalse(node2.isCatch());
1000:       assertFalse(node2.isScript());
1001:       assertFalse(node2.isTry());
1002:       assertFalse(node2.isInstanceOf());
1003:       assertFalse(node2.isRegExp());
1004:       assertFalse(node2.isFunction());
1005:       assertFalse(node2.isThis());
1006:       assertFalse(node2.isThrow());
1007:       assertFalse(node2.isSetterDef());
1008:       assertFalse(node2.isIf());
1009:       assertTrue(node2.isNull());
1010:       assertFalse(node2.isNE());
1011:       assertFalse(node2.isIn());
1012:       assertFalse(node2.isContinue());
1013:       assertFalse(node2.isWhile());
1014:       assertEquals((-1), node2.getLineno());
1015:       assertFalse(node2.isDo());
1016:       assertFalse(node2.isNew());
1017:       assertFalse(node2.isBlock());
1018:       assertFalse(node2.isLabel());
1019:       assertFalse(node2.isAssignAdd());
1020:       assertFalse(node2.isReturn());
1021:       assertFalse(node2.isVar());
1022:       assertFalse(node2.isTypeOf());
1023:       assertFalse(node2.hasMoreThanOneChild());
1024:       assertFalse(node2.hasChildren());
1025:       assertFalse(node2.isAssign());
1026:       assertFalse(node2.isDec());
1027:       assertFalse(node2.isLabelName());
1028:       assertFalse(node2.isStringKey());
1029:       assertFalse(node2.isCast());
1030:       assertFalse(node2.hasOneChild());
1031:       assertFalse(node2.isParamList());
1032:       assertEquals((-1), node2.getSourcePosition());
1033:       assertFalse(node2.isNumber());
1034:       assertFalse(node2.isNot());
1035:       assertFalse(node2.isDefaultCase());
1036:       assertFalse(node2.isVoid());
1037:       assertFalse(node2.isExprResult());
1038:       assertEquals(0, node2.getChildCount());
1039:       assertFalse(node2.isComma());
1040:       assertFalse(node2.isEmpty());
1041:       assertFalse(node2.isName());
1042:       assertFalse(node2.isGetElem());
1043:       assertFalse(node2.isCall());
1044:       assertFalse(node2.isDelProp());
1045:       assertFalse(node2.isBreak());
1046:       assertFalse(node2.isAdd());
1047:       assertFalse(node2.isTrue());
1048:       assertFalse(node2.isOr());
1049:       assertNotNull(node_AncestorIterable0);
1050:       assertFalse(node2.equals((Object)node1));
1051:       assertFalse(node2.equals((Object)node0));
1052:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1053:       assertEquals(55, Node.INFERRED_FUNCTION);
1054:       assertEquals(4095, Node.COLUMN_MASK);
1055:       assertEquals(48, Node.DIRECTIVES);
1056:       assertEquals(53, Node.INPUT_ID);
1057:       assertEquals(8, Node.FLAG_NO_THROWS);
1058:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1059:       assertEquals(43, Node.IS_CONSTANT_NAME);
1060:       assertEquals(36, Node.QUOTED_PROP);
1061:       assertEquals(40, Node.ORIGINALNAME_PROP);
1062:       assertEquals(29, Node.JSDOC_INFO_PROP);
1063:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1064:       assertEquals(39, Node.EMPTY_BLOCK);
1065:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1066:       assertEquals(47, Node.IS_DISPATCHER);
1067:       assertEquals(2, Node.POST_FLAG);
1068:       assertEquals(30, Node.VAR_ARGS_NAME);
1069:       assertEquals(1, Node.DECR_FLAG);
1070:       assertEquals(49, Node.DIRECT_EVAL);
1071:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1072:       assertEquals(57, Node.LAST_PROP);
1073:       assertEquals(32, Node.INCRDECR_PROP);
1074:       assertEquals(54, Node.SLASH_V);
1075:       assertEquals(52, Node.LENGTH);
1076:       assertEquals(56, Node.CHANGE_TIME);
1077:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1078:       assertEquals(57, Node.REFLECTED_OBJECT);
1079:       assertEquals(46, Node.IS_NAMESPACE);
1080:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1081:       assertEquals(50, Node.FREE_CALL);
1082:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1083:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1084:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1085:       assertEquals(37, Node.OPT_ARG_NAME);
1086:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1087:       assertEquals(12, Node.COLUMN_BITS);
1088:       
1089:       boolean boolean0 = node2.isNew();
1090:       assertFalse(node2.isCase());
1091:       assertFalse(node2.isString());
1092:       assertEquals(41, node2.getType());
1093:       assertFalse(node2.isSwitch());
1094:       assertFalse(node2.isInc());
1095:       assertFalse(node2.isHook());
1096:       assertFalse(node2.isFor());
1097:       assertFalse(node2.isFalse());
1098:       assertFalse(node2.isArrayLit());
1099:       assertFalse(node2.isGetProp());
1100:       assertFalse(node2.isDebugger());
1101:       assertEquals((-1), node2.getCharno());
1102:       assertFalse(node2.isGetterDef());
1103:       assertFalse(node2.isObjectLit());
1104:       assertFalse(node2.isWith());
1105:       assertFalse(node2.isAnd());
1106:       assertFalse(node2.isCatch());
1107:       assertFalse(node2.isScript());
1108:       assertFalse(node2.isTry());
1109:       assertFalse(node2.isInstanceOf());
1110:       assertFalse(node2.isRegExp());
1111:       assertFalse(node2.isFunction());
1112:       assertFalse(node2.isThis());
1113:       assertFalse(node2.isThrow());
1114:       assertFalse(node2.isSetterDef());
1115:       assertFalse(node2.isIf());
1116:       assertTrue(node2.isNull());
1117:       assertFalse(node2.isNE());
1118:       assertFalse(node2.isIn());
1119:       assertFalse(node2.isContinue());
1120:       assertFalse(node2.isWhile());
1121:       assertEquals((-1), node2.getLineno());
1122:       assertFalse(node2.isDo());
1123:       assertFalse(node2.isNew());
1124:       assertFalse(node2.isBlock());
1125:       assertFalse(node2.isLabel());
1126:       assertFalse(node2.isAssignAdd());
1127:       assertFalse(node2.isReturn());
1128:       assertFalse(node2.isVar());
1129:       assertFalse(node2.isTypeOf());
1130:       assertFalse(node2.hasMoreThanOneChild());
1131:       assertFalse(node2.hasChildren());
1132:       assertFalse(node2.isAssign());
1133:       assertFalse(node2.isDec());
1134:       assertFalse(node2.isLabelName());
1135:       assertFalse(node2.isStringKey());
1136:       assertFalse(node2.isCast());
1137:       assertFalse(node2.hasOneChild());
1138:       assertFalse(node2.isParamList());
1139:       assertEquals((-1), node2.getSourcePosition());
1140:       assertFalse(node2.isNumber());
1141:       assertFalse(node2.isNot());
1142:       assertFalse(node2.isDefaultCase());
1143:       assertFalse(node2.isVoid());
1144:       assertFalse(node2.isExprResult());
1145:       assertEquals(0, node2.getChildCount());
1146:       assertFalse(node2.isComma());
1147:       assertFalse(node2.isEmpty());
1148:       assertFalse(node2.isName());
1149:       assertFalse(node2.isGetElem());
1150:       assertFalse(node2.isCall());
1151:       assertFalse(node2.isDelProp());
1152:       assertFalse(node2.isBreak());
1153:       assertFalse(node2.isAdd());
1154:       assertFalse(node2.isTrue());
1155:       assertFalse(node2.isOr());
1156:       assertFalse(boolean0);
1157:       assertFalse(node2.equals((Object)node1));
1158:       assertFalse(node2.equals((Object)node0));
1159:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1160:       assertEquals(55, Node.INFERRED_FUNCTION);
1161:       assertEquals(4095, Node.COLUMN_MASK);
1162:       assertEquals(48, Node.DIRECTIVES);
1163:       assertEquals(53, Node.INPUT_ID);
1164:       assertEquals(8, Node.FLAG_NO_THROWS);
1165:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1166:       assertEquals(43, Node.IS_CONSTANT_NAME);
1167:       assertEquals(36, Node.QUOTED_PROP);
1168:       assertEquals(40, Node.ORIGINALNAME_PROP);
1169:       assertEquals(29, Node.JSDOC_INFO_PROP);
1170:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1171:       assertEquals(39, Node.EMPTY_BLOCK);
1172:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1173:       assertEquals(47, Node.IS_DISPATCHER);
1174:       assertEquals(2, Node.POST_FLAG);
1175:       assertEquals(30, Node.VAR_ARGS_NAME);
1176:       assertEquals(1, Node.DECR_FLAG);
1177:       assertEquals(49, Node.DIRECT_EVAL);
1178:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1179:       assertEquals(57, Node.LAST_PROP);
1180:       assertEquals(32, Node.INCRDECR_PROP);
1181:       assertEquals(54, Node.SLASH_V);
1182:       assertEquals(52, Node.LENGTH);
1183:       assertEquals(56, Node.CHANGE_TIME);
1184:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1185:       assertEquals(57, Node.REFLECTED_OBJECT);
1186:       assertEquals(46, Node.IS_NAMESPACE);
1187:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1188:       assertEquals(50, Node.FREE_CALL);
1189:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1190:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1191:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1192:       assertEquals(37, Node.OPT_ARG_NAME);
1193:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1194:       assertEquals(12, Node.COLUMN_BITS);
1195:       
1196:       // Undeclared exception!
1197:       try { 
1198:         node0.addChildAfter(node2, node2);
1199:         fail("Expecting exception: IllegalArgumentException");
1200:       
1201:       } catch(IllegalArgumentException e) {
1202:          //
1203:          // no message in exception (getMessage() returned null)
1204:          //
1205:          verifyException("com.google.common.base.Preconditions", e);
1206:       }
1207:   }
1208: }
RegularFileObject[/tmp/EvoSuite_144_1629223223632/com/google/javascript/rhino/Node_144_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:00:23 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_144_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_144_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_144_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.common.base.Objects",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.common.collect.ImmutableSet",
337:       "com.google.common.collect.EmptyImmutableSet",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Platform",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.javascript.rhino.InputId",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.javascript.rhino.jstype.JSType$2",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.javascript.rhino.JSTypeExpression",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.common.collect.AbstractMultimap$Values",
360:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
361:       "com.google.common.collect.AbstractMapBasedMultimap$1",
362:       "com.google.common.collect.Multimaps$Entries",
363:       "com.google.common.collect.AbstractMultimap$Entries",
364:       "com.google.common.collect.AbstractMapBasedMultimap$2"
365:     );
366:   }
367: }

[MASTER] 18:00:23.824 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("Q#{!t ");
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertNotNull(node0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node node1 = Node.newString("Q#{!t ");
assertNotSame(node1, node0);
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isNew());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isInc());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertFalse(node1.isNot());
assertFalse(node1.isName());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Iterable<Node> iterable0 = node0.children();
assertNotSame(node0, node1);
assertFalse(iterable0.contains(node1));
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node0.setLength(122);
assertNotSame(node0, node1);
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.equals((Object)node1));
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Iterable<Node> iterable1 = node0.children();
assertNotSame(node0, node1);
assertSame(iterable1, iterable0);
assertFalse(iterable1.contains(node1));
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertNotNull(iterable1);
assertFalse(node0.equals((Object)node1));
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node0.setLength(122);
assertNotSame(node0, node1);
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.equals((Object)node1));
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);

String string0 = node0.toString();
assertNotSame(node0, node1);
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertNotNull(string0);
assertFalse(node0.equals((Object)node1));
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);

node0.setVarArgs(false);
assertNotSame(node0, node1);
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isThrow());
assertFalse(node0.isLabel());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertEquals(40, node0.getType());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.equals((Object)node1));
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node node2 = new Node(41);
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertEquals(41, node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isFalse());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertTrue(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isVar());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isNot());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertEquals(41, node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isFalse());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertTrue(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isVar());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isNot());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertNotNull(node_AncestorIterable0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean0 = node2.isNew();
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertEquals(41, node2.getType());
assertFalse(node2.isSwitch());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isFalse());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetProp());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isGetterDef());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIf());
assertTrue(node2.isNull());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isWhile());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isVar());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isNot());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isOr());
assertFalse(boolean0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

node0.addChildAfter(node2, node2);

[MASTER] 18:00:31.898 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_185_1629223231862/com/google/javascript/rhino/Node_185_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_185_1629223231862/com/google/javascript/rhino/Node_185_tmp__ESTest_scaffolding.java]]
[MASTER] 18:00:31.898 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:31.898 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:31.898 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 235
[MASTER] 18:00:31.899 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_185_1629223231862/com/google/javascript/rhino/Node_185_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:00:31 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_185_tmp__ESTest extends Node_185_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("Q#{!t ");
22:       assertFalse(node0.isScript());
23:       assertFalse(node0.isExprResult());
24:       assertFalse(node0.isAnd());
25:       assertFalse(node0.hasOneChild());
26:       assertFalse(node0.isNot());
27:       assertFalse(node0.isNumber());
28:       assertFalse(node0.isObjectLit());
29:       assertFalse(node0.isDec());
30:       assertFalse(node0.isComma());
31:       assertFalse(node0.isGetProp());
32:       assertFalse(node0.isBreak());
33:       assertFalse(node0.hasChildren());
34:       assertFalse(node0.isThis());
35:       assertEquals((-1), node0.getLineno());
36:       assertFalse(node0.hasMoreThanOneChild());
37:       assertFalse(node0.isInstanceOf());
38:       assertFalse(node0.isHook());
39:       assertFalse(node0.isGetElem());
40:       assertFalse(node0.isReturn());
41:       assertFalse(node0.isWith());
42:       assertFalse(node0.isAssign());
43:       assertFalse(node0.isTypeOf());
44:       assertFalse(node0.isSwitch());
45:       assertEquals((-1), node0.getCharno());
46:       assertFalse(node0.isBlock());
47:       assertFalse(node0.isDo());
48:       assertFalse(node0.isCase());
49:       assertFalse(node0.isNew());
50:       assertTrue(node0.isString());
51:       assertFalse(node0.isOr());
52:       assertFalse(node0.isAdd());
53:       assertFalse(node0.isParamList());
54:       assertFalse(node0.isLabelName());
55:       assertFalse(node0.isAssignAdd());
56:       assertFalse(node0.isStringKey());
57:       assertFalse(node0.isVar());
58:       assertFalse(node0.isArrayLit());
59:       assertFalse(node0.isLabel());
60:       assertEquals(0, node0.getChildCount());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isTrue());
63:       assertFalse(node0.isTry());
64:       assertFalse(node0.isDefaultCase());
65:       assertFalse(node0.isVoid());
66:       assertFalse(node0.isEmpty());
67:       assertFalse(node0.isGetterDef());
68:       assertFalse(node0.isNE());
69:       assertFalse(node0.isNull());
70:       assertFalse(node0.isFor());
71:       assertFalse(node0.isIf());
72:       assertFalse(node0.isDelProp());
73:       assertFalse(node0.isName());
74:       assertFalse(node0.isCatch());
75:       assertFalse(node0.isCall());
76:       assertFalse(node0.isRegExp());
77:       assertFalse(node0.isInc());
78:       assertFalse(node0.isWhile());
79:       assertFalse(node0.isIn());
80:       assertEquals((-1), node0.getSourcePosition());
81:       assertFalse(node0.isSetterDef());
82:       assertFalse(node0.isCast());
83:       assertFalse(node0.isThrow());
84:       assertEquals(40, node0.getType());
85:       assertFalse(node0.isContinue());
86:       assertFalse(node0.isFunction());
87:       assertFalse(node0.isFalse());
88:       assertNotNull(node0);
89:       assertEquals(15, Node.NO_SIDE_EFFECTS);
90:       assertEquals(57, Node.LAST_PROP);
91:       assertEquals(54, Node.SLASH_V);
92:       assertEquals(49, Node.DIRECT_EVAL);
93:       assertEquals(1, Node.DECR_FLAG);
94:       assertEquals(12, Node.COLUMN_BITS);
95:       assertEquals(40, Node.ORIGINALNAME_PROP);
96:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
97:       assertEquals(2, Node.POST_FLAG);
98:       assertEquals(30, Node.VAR_ARGS_NAME);
99:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
100:       assertEquals(32, Node.INCRDECR_PROP);
101:       assertEquals(51, Node.STATIC_SOURCE_FILE);
102:       assertEquals(46, Node.IS_NAMESPACE);
103:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
104:       assertEquals(50, Node.FREE_CALL);
105:       assertEquals(43, Node.IS_CONSTANT_NAME);
106:       assertEquals(36, Node.QUOTED_PROP);
107:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
108:       assertEquals(53, Node.INPUT_ID);
109:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
110:       assertEquals(4095, Node.COLUMN_MASK);
111:       assertEquals(56, Node.CHANGE_TIME);
112:       assertEquals(47, Node.IS_DISPATCHER);
113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
114:       assertEquals(39, Node.EMPTY_BLOCK);
115:       assertEquals(29, Node.JSDOC_INFO_PROP);
116:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
117:       assertEquals(37, Node.OPT_ARG_NAME);
118:       assertEquals(48, Node.DIRECTIVES);
119:       assertEquals(57, Node.REFLECTED_OBJECT);
120:       assertEquals(55, Node.INFERRED_FUNCTION);
121:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
122:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
123:       assertEquals(52, Node.LENGTH);
124:       assertEquals(8, Node.FLAG_NO_THROWS);
125:       
126:       Node node1 = Node.newString("Q#{!t ");
127:       assertNotSame(node1, node0);
128:       assertFalse(node1.isRegExp());
129:       assertFalse(node1.isDefaultCase());
130:       assertFalse(node1.isFunction());
131:       assertFalse(node1.isDebugger());
132:       assertFalse(node1.isVoid());
133:       assertFalse(node1.isCatch());
134:       assertEquals(0, node1.getChildCount());
135:       assertFalse(node1.isTry());
136:       assertFalse(node1.isFor());
137:       assertEquals(40, node1.getType());
138:       assertFalse(node1.isNull());
139:       assertFalse(node1.isSetterDef());
140:       assertFalse(node1.isDelProp());
141:       assertFalse(node1.isEmpty());
142:       assertFalse(node1.isIn());
143:       assertFalse(node1.isCall());
144:       assertFalse(node1.isName());
145:       assertFalse(node1.isTrue());
146:       assertFalse(node1.isIf());
147:       assertFalse(node1.isNE());
148:       assertFalse(node1.isInc());
149:       assertFalse(node1.isContinue());
150:       assertFalse(node1.isReturn());
151:       assertFalse(node1.isWhile());
152:       assertFalse(node1.isThrow());
153:       assertEquals((-1), node1.getSourcePosition());
154:       assertFalse(node1.isGetProp());
155:       assertFalse(node1.isFalse());
156:       assertFalse(node1.isCast());
157:       assertFalse(node1.isObjectLit());
158:       assertFalse(node1.isAnd());
159:       assertFalse(node1.isScript());
160:       assertFalse(node1.isNot());
161:       assertFalse(node1.isWith());
162:       assertFalse(node1.isExprResult());
163:       assertFalse(node1.hasOneChild());
164:       assertFalse(node1.isTypeOf());
165:       assertFalse(node1.isThis());
166:       assertFalse(node1.isBreak());
167:       assertFalse(node1.hasChildren());
168:       assertFalse(node1.isDec());
169:       assertFalse(node1.isComma());
170:       assertFalse(node1.isAssign());
171:       assertFalse(node1.isGetElem());
172:       assertFalse(node1.isInstanceOf());
173:       assertEquals((-1), node1.getLineno());
174:       assertFalse(node1.isOr());
175:       assertFalse(node1.isSwitch());
176:       assertEquals((-1), node1.getCharno());
177:       assertFalse(node1.isNew());
178:       assertFalse(node1.isCase());
179:       assertFalse(node1.isAdd());
180:       assertFalse(node1.isVar());
181:       assertFalse(node1.isHook());
182:       assertFalse(node1.hasMoreThanOneChild());
183:       assertFalse(node1.isLabel());
184:       assertFalse(node1.isDo());
185:       assertFalse(node1.isAssignAdd());
186:       assertTrue(node1.isString());
187:       assertFalse(node1.isBlock());
188:       assertFalse(node1.isNumber());
189:       assertFalse(node1.isGetterDef());
190:       assertFalse(node1.isArrayLit());
191:       assertFalse(node1.isLabelName());
192:       assertFalse(node1.isStringKey());
193:       assertFalse(node1.isParamList());
194:       assertNotNull(node1);
195:       assertFalse(node1.equals((Object)node0));
196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
197:       assertEquals(57, Node.LAST_PROP);
198:       assertEquals(30, Node.VAR_ARGS_NAME);
199:       assertEquals(52, Node.LENGTH);
200:       assertEquals(51, Node.STATIC_SOURCE_FILE);
201:       assertEquals(57, Node.REFLECTED_OBJECT);
202:       assertEquals(46, Node.IS_NAMESPACE);
203:       assertEquals(49, Node.DIRECT_EVAL);
204:       assertEquals(54, Node.SLASH_V);
205:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
207:       assertEquals(37, Node.OPT_ARG_NAME);
208:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
209:       assertEquals(50, Node.FREE_CALL);
210:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
211:       assertEquals(12, Node.COLUMN_BITS);
212:       assertEquals(32, Node.INCRDECR_PROP);
213:       assertEquals(1, Node.DECR_FLAG);
214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
215:       assertEquals(43, Node.IS_CONSTANT_NAME);
216:       assertEquals(36, Node.QUOTED_PROP);
217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
218:       assertEquals(53, Node.INPUT_ID);
219:       assertEquals(55, Node.INFERRED_FUNCTION);
220:       assertEquals(4095, Node.COLUMN_MASK);
221:       assertEquals(48, Node.DIRECTIVES);
222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
223:       assertEquals(56, Node.CHANGE_TIME);
224:       assertEquals(47, Node.IS_DISPATCHER);
225:       assertEquals(2, Node.POST_FLAG);
226:       assertEquals(39, Node.EMPTY_BLOCK);
227:       assertEquals(40, Node.ORIGINALNAME_PROP);
228:       assertEquals(29, Node.JSDOC_INFO_PROP);
229:       assertEquals(8, Node.FLAG_NO_THROWS);
230:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
231:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
232:       
233:       Iterable<Node> iterable0 = node0.children();
234:       assertNotSame(node0, node1);
235:       assertFalse(iterable0.contains(node0));
236:       assertFalse(node0.isScript());
237:       assertFalse(node0.isExprResult());
238:       assertFalse(node0.isAnd());
239:       assertFalse(node0.hasOneChild());
240:       assertFalse(node0.isNot());
241:       assertFalse(node0.isNumber());
242:       assertFalse(node0.isObjectLit());
243:       assertFalse(node0.isDec());
244:       assertFalse(node0.isComma());
245:       assertFalse(node0.isGetProp());
246:       assertFalse(node0.isBreak());
247:       assertFalse(node0.hasChildren());
248:       assertFalse(node0.isThis());
249:       assertEquals((-1), node0.getLineno());
250:       assertFalse(node0.hasMoreThanOneChild());
251:       assertFalse(node0.isInstanceOf());
252:       assertFalse(node0.isHook());
253:       assertFalse(node0.isGetElem());
254:       assertFalse(node0.isReturn());
255:       assertFalse(node0.isWith());
256:       assertFalse(node0.isAssign());
257:       assertFalse(node0.isTypeOf());
258:       assertFalse(node0.isSwitch());
259:       assertEquals((-1), node0.getCharno());
260:       assertFalse(node0.isBlock());
261:       assertFalse(node0.isDo());
262:       assertFalse(node0.isCase());
263:       assertFalse(node0.isNew());
264:       assertTrue(node0.isString());
265:       assertFalse(node0.isOr());
266:       assertFalse(node0.isAdd());
267:       assertFalse(node0.isParamList());
268:       assertFalse(node0.isLabelName());
269:       assertFalse(node0.isAssignAdd());
270:       assertFalse(node0.isStringKey());
271:       assertFalse(node0.isVar());
272:       assertFalse(node0.isArrayLit());
273:       assertFalse(node0.isLabel());
274:       assertEquals(0, node0.getChildCount());
275:       assertFalse(node0.isDebugger());
276:       assertFalse(node0.isTrue());
277:       assertFalse(node0.isTry());
278:       assertFalse(node0.isDefaultCase());
279:       assertFalse(node0.isVoid());
280:       assertFalse(node0.isEmpty());
281:       assertFalse(node0.isGetterDef());
282:       assertFalse(node0.isNE());
283:       assertFalse(node0.isNull());
284:       assertFalse(node0.isFor());
285:       assertFalse(node0.isIf());
286:       assertFalse(node0.isDelProp());
287:       assertFalse(node0.isName());
288:       assertFalse(node0.isCatch());
289:       assertFalse(node0.isCall());
290:       assertFalse(node0.isRegExp());
291:       assertFalse(node0.isInc());
292:       assertFalse(node0.isWhile());
293:       assertFalse(node0.isIn());
294:       assertEquals((-1), node0.getSourcePosition());
295:       assertFalse(node0.isSetterDef());
296:       assertFalse(node0.isCast());
297:       assertFalse(node0.isThrow());
298:       assertEquals(40, node0.getType());
299:       assertFalse(node0.isContinue());
300:       assertFalse(node0.isFunction());
301:       assertFalse(node0.isFalse());
302:       assertNotNull(iterable0);
303:       assertFalse(node0.equals((Object)node1));
304:       assertEquals(15, Node.NO_SIDE_EFFECTS);
305:       assertEquals(57, Node.LAST_PROP);
306:       assertEquals(54, Node.SLASH_V);
307:       assertEquals(49, Node.DIRECT_EVAL);
308:       assertEquals(1, Node.DECR_FLAG);
309:       assertEquals(12, Node.COLUMN_BITS);
310:       assertEquals(40, Node.ORIGINALNAME_PROP);
311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
312:       assertEquals(2, Node.POST_FLAG);
313:       assertEquals(30, Node.VAR_ARGS_NAME);
314:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
315:       assertEquals(32, Node.INCRDECR_PROP);
316:       assertEquals(51, Node.STATIC_SOURCE_FILE);
317:       assertEquals(46, Node.IS_NAMESPACE);
318:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
319:       assertEquals(50, Node.FREE_CALL);
320:       assertEquals(43, Node.IS_CONSTANT_NAME);
321:       assertEquals(36, Node.QUOTED_PROP);
322:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
323:       assertEquals(53, Node.INPUT_ID);
324:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
325:       assertEquals(4095, Node.COLUMN_MASK);
326:       assertEquals(56, Node.CHANGE_TIME);
327:       assertEquals(47, Node.IS_DISPATCHER);
328:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
329:       assertEquals(39, Node.EMPTY_BLOCK);
330:       assertEquals(29, Node.JSDOC_INFO_PROP);
331:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
332:       assertEquals(37, Node.OPT_ARG_NAME);
333:       assertEquals(48, Node.DIRECTIVES);
334:       assertEquals(57, Node.REFLECTED_OBJECT);
335:       assertEquals(55, Node.INFERRED_FUNCTION);
336:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
337:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
338:       assertEquals(52, Node.LENGTH);
339:       assertEquals(8, Node.FLAG_NO_THROWS);
340:       
341:       try { 
342:         node1.setDouble(43);
343:         fail("Expecting exception: UnsupportedOperationException");
344:       
345:       } catch(UnsupportedOperationException e) {
346:          //
347:          // STRING Q#{!t  is not a string node
348:          //
349:          verifyException("com.google.javascript.rhino.Node", e);
350:       }
351:   }
352: }
RegularFileObject[/tmp/EvoSuite_185_1629223231862/com/google/javascript/rhino/Node_185_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:00:31 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_185_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_185_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_185_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.common.base.Objects",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.common.collect.ImmutableSet",
337:       "com.google.common.collect.EmptyImmutableSet",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Platform",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.javascript.rhino.InputId",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.javascript.rhino.jstype.JSType$2",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.javascript.rhino.JSTypeExpression",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.common.collect.AbstractMultimap$Values",
360:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
361:       "com.google.common.collect.AbstractMapBasedMultimap$1",
362:       "com.google.common.collect.Multimaps$Entries",
363:       "com.google.common.collect.AbstractMultimap$Entries",
364:       "com.google.common.collect.AbstractMapBasedMultimap$2"
365:     );
366:   }
367: }

[MASTER] 18:00:31.903 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("Q#{!t ");
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertNotNull(node0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

Node node1 = Node.newString("Q#{!t ");
assertNotSame(node1, node0);
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertEquals(40, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTypeOf());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isGetElem());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isString());
assertFalse(node1.isBlock());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Iterable<Node> iterable0 = node0.children();
assertNotSame(node0, node1);
assertFalse(iterable0.contains(node0));
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertTrue(node0.isString());
assertFalse(node0.isOr());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isWhile());
assertFalse(node0.isIn());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCast());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

node1.setDouble(43);

[MASTER] 18:00:32.784 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_187_1629223232410/com/google/javascript/rhino/Node_187_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_187_1629223232410/com/google/javascript/rhino/Node_187_tmp__ESTest_scaffolding.java]]
[MASTER] 18:00:32.784 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:32.784 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:32.784 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 18:00:32.786 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_187_1629223232410/com/google/javascript/rhino/Node_187_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:00:32 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_187_tmp__ESTest extends Node_187_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("Q#{!t ");
21:       assertFalse(node0.isWith());
22:       assertFalse(node0.isScript());
23:       assertFalse(node0.isNot());
24:       assertFalse(node0.isObjectLit());
25:       assertFalse(node0.isInstanceOf());
26:       assertFalse(node0.isExprResult());
27:       assertFalse(node0.isAnd());
28:       assertFalse(node0.isLabelName());
29:       assertFalse(node0.isThrow());
30:       assertFalse(node0.isCast());
31:       assertFalse(node0.isFalse());
32:       assertFalse(node0.isAssignAdd());
33:       assertFalse(node0.isLabel());
34:       assertFalse(node0.isInc());
35:       assertFalse(node0.isDo());
36:       assertFalse(node0.isWhile());
37:       assertFalse(node0.isContinue());
38:       assertFalse(node0.isOr());
39:       assertFalse(node0.isDelProp());
40:       assertFalse(node0.isName());
41:       assertFalse(node0.isAssign());
42:       assertFalse(node0.isBreak());
43:       assertFalse(node0.hasChildren());
44:       assertFalse(node0.isGetElem());
45:       assertFalse(node0.isCall());
46:       assertFalse(node0.isComma());
47:       assertEquals((-1), node0.getSourcePosition());
48:       assertFalse(node0.isDec());
49:       assertFalse(node0.isTypeOf());
50:       assertFalse(node0.isReturn());
51:       assertFalse(node0.isGetProp());
52:       assertEquals(40, node0.getType());
53:       assertFalse(node0.isFunction());
54:       assertFalse(node0.isCatch());
55:       assertFalse(node0.isDebugger());
56:       assertEquals(0, node0.getChildCount());
57:       assertFalse(node0.isRegExp());
58:       assertFalse(node0.isTrue());
59:       assertFalse(node0.isParamList());
60:       assertFalse(node0.isArrayLit());
61:       assertFalse(node0.isVoid());
62:       assertFalse(node0.isEmpty());
63:       assertFalse(node0.isNull());
64:       assertFalse(node0.isVar());
65:       assertFalse(node0.isAdd());
66:       assertFalse(node0.isSetterDef());
67:       assertFalse(node0.isDefaultCase());
68:       assertFalse(node0.isNew());
69:       assertFalse(node0.isCase());
70:       assertFalse(node0.hasMoreThanOneChild());
71:       assertEquals((-1), node0.getCharno());
72:       assertFalse(node0.isIn());
73:       assertEquals((-1), node0.getLineno());
74:       assertFalse(node0.isSwitch());
75:       assertFalse(node0.isNE());
76:       assertFalse(node0.isIf());
77:       assertFalse(node0.isStringKey());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.isThis());
80:       assertFalse(node0.isNumber());
81:       assertFalse(node0.isGetterDef());
82:       assertFalse(node0.isHook());
83:       assertFalse(node0.isBlock());
84:       assertFalse(node0.hasOneChild());
85:       assertFalse(node0.isTry());
86:       assertTrue(node0.isString());
87:       assertNotNull(node0);
88:       assertEquals(49, Node.DIRECT_EVAL);
89:       assertEquals(12, Node.COLUMN_BITS);
90:       assertEquals(30, Node.VAR_ARGS_NAME);
91:       assertEquals(51, Node.STATIC_SOURCE_FILE);
92:       assertEquals(52, Node.LENGTH);
93:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
94:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
95:       assertEquals(15, Node.NO_SIDE_EFFECTS);
96:       assertEquals(57, Node.LAST_PROP);
97:       assertEquals(32, Node.INCRDECR_PROP);
98:       assertEquals(1, Node.DECR_FLAG);
99:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
100:       assertEquals(29, Node.JSDOC_INFO_PROP);
101:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
102:       assertEquals(56, Node.CHANGE_TIME);
103:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
104:       assertEquals(8, Node.FLAG_NO_THROWS);
105:       assertEquals(57, Node.REFLECTED_OBJECT);
106:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
107:       assertEquals(37, Node.OPT_ARG_NAME);
108:       assertEquals(48, Node.DIRECTIVES);
109:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
110:       assertEquals(55, Node.INFERRED_FUNCTION);
111:       assertEquals(43, Node.IS_CONSTANT_NAME);
112:       assertEquals(36, Node.QUOTED_PROP);
113:       assertEquals(4095, Node.COLUMN_MASK);
114:       assertEquals(53, Node.INPUT_ID);
115:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
116:       assertEquals(39, Node.EMPTY_BLOCK);
117:       assertEquals(50, Node.FREE_CALL);
118:       assertEquals(40, Node.ORIGINALNAME_PROP);
119:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
120:       assertEquals(2, Node.POST_FLAG);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(46, Node.IS_NAMESPACE);
123:       assertEquals(54, Node.SLASH_V);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertFalse(node0.isWith());
128:       assertFalse(node0.isScript());
129:       assertFalse(node0.isNot());
130:       assertFalse(node0.isObjectLit());
131:       assertFalse(node0.isInstanceOf());
132:       assertFalse(node0.isExprResult());
133:       assertFalse(node0.isAnd());
134:       assertFalse(node0.isLabelName());
135:       assertFalse(node0.isThrow());
136:       assertFalse(node0.isCast());
137:       assertFalse(node0.isFalse());
138:       assertFalse(node0.isAssignAdd());
139:       assertFalse(node0.isLabel());
140:       assertFalse(node0.isInc());
141:       assertFalse(node0.isDo());
142:       assertFalse(node0.isWhile());
143:       assertFalse(node0.isContinue());
144:       assertFalse(node0.isOr());
145:       assertFalse(node0.isDelProp());
146:       assertFalse(node0.isName());
147:       assertFalse(node0.isAssign());
148:       assertFalse(node0.isBreak());
149:       assertFalse(node0.hasChildren());
150:       assertFalse(node0.isGetElem());
151:       assertFalse(node0.isCall());
152:       assertFalse(node0.isComma());
153:       assertEquals((-1), node0.getSourcePosition());
154:       assertFalse(node0.isDec());
155:       assertFalse(node0.isTypeOf());
156:       assertFalse(node0.isReturn());
157:       assertFalse(node0.isGetProp());
158:       assertEquals(40, node0.getType());
159:       assertFalse(node0.isFunction());
160:       assertFalse(node0.isCatch());
161:       assertFalse(node0.isDebugger());
162:       assertEquals(0, node0.getChildCount());
163:       assertFalse(node0.isRegExp());
164:       assertFalse(node0.isTrue());
165:       assertFalse(node0.isParamList());
166:       assertFalse(node0.isArrayLit());
167:       assertFalse(node0.isVoid());
168:       assertFalse(node0.isEmpty());
169:       assertFalse(node0.isNull());
170:       assertFalse(node0.isVar());
171:       assertFalse(node0.isAdd());
172:       assertFalse(node0.isSetterDef());
173:       assertFalse(node0.isDefaultCase());
174:       assertFalse(node0.isNew());
175:       assertFalse(node0.isCase());
176:       assertFalse(node0.hasMoreThanOneChild());
177:       assertEquals((-1), node0.getCharno());
178:       assertFalse(node0.isIn());
179:       assertEquals((-1), node0.getLineno());
180:       assertFalse(node0.isSwitch());
181:       assertFalse(node0.isNE());
182:       assertFalse(node0.isIf());
183:       assertFalse(node0.isStringKey());
184:       assertFalse(node0.isFor());
185:       assertFalse(node0.isThis());
186:       assertFalse(node0.isNumber());
187:       assertFalse(node0.isGetterDef());
188:       assertFalse(node0.isHook());
189:       assertFalse(node0.isBlock());
190:       assertFalse(node0.hasOneChild());
191:       assertFalse(node0.isTry());
192:       assertTrue(node0.isString());
193:       assertNotNull(iterable0);
194:       assertEquals(49, Node.DIRECT_EVAL);
195:       assertEquals(12, Node.COLUMN_BITS);
196:       assertEquals(30, Node.VAR_ARGS_NAME);
197:       assertEquals(51, Node.STATIC_SOURCE_FILE);
198:       assertEquals(52, Node.LENGTH);
199:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
200:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
201:       assertEquals(15, Node.NO_SIDE_EFFECTS);
202:       assertEquals(57, Node.LAST_PROP);
203:       assertEquals(32, Node.INCRDECR_PROP);
204:       assertEquals(1, Node.DECR_FLAG);
205:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
206:       assertEquals(29, Node.JSDOC_INFO_PROP);
207:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
208:       assertEquals(56, Node.CHANGE_TIME);
209:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
210:       assertEquals(8, Node.FLAG_NO_THROWS);
211:       assertEquals(57, Node.REFLECTED_OBJECT);
212:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
213:       assertEquals(37, Node.OPT_ARG_NAME);
214:       assertEquals(48, Node.DIRECTIVES);
215:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
216:       assertEquals(55, Node.INFERRED_FUNCTION);
217:       assertEquals(43, Node.IS_CONSTANT_NAME);
218:       assertEquals(36, Node.QUOTED_PROP);
219:       assertEquals(4095, Node.COLUMN_MASK);
220:       assertEquals(53, Node.INPUT_ID);
221:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
222:       assertEquals(39, Node.EMPTY_BLOCK);
223:       assertEquals(50, Node.FREE_CALL);
224:       assertEquals(40, Node.ORIGINALNAME_PROP);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(2, Node.POST_FLAG);
227:       assertEquals(47, Node.IS_DISPATCHER);
228:       assertEquals(46, Node.IS_NAMESPACE);
229:       assertEquals(54, Node.SLASH_V);
230:       
231:       node0.setLength(122);
232:       assertFalse(node0.isWith());
233:       assertFalse(node0.isScript());
234:       assertFalse(node0.isNot());
235:       assertFalse(node0.isObjectLit());
236:       assertFalse(node0.isInstanceOf());
237:       assertFalse(node0.isExprResult());
238:       assertFalse(node0.isAnd());
239:       assertFalse(node0.isLabelName());
240:       assertFalse(node0.isThrow());
241:       assertFalse(node0.isCast());
242:       assertFalse(node0.isFalse());
243:       assertFalse(node0.isAssignAdd());
244:       assertFalse(node0.isLabel());
245:       assertFalse(node0.isInc());
246:       assertFalse(node0.isDo());
247:       assertFalse(node0.isWhile());
248:       assertFalse(node0.isContinue());
249:       assertFalse(node0.isOr());
250:       assertFalse(node0.isDelProp());
251:       assertFalse(node0.isName());
252:       assertFalse(node0.isAssign());
253:       assertFalse(node0.isBreak());
254:       assertFalse(node0.hasChildren());
255:       assertFalse(node0.isGetElem());
256:       assertFalse(node0.isCall());
257:       assertFalse(node0.isComma());
258:       assertEquals((-1), node0.getSourcePosition());
259:       assertFalse(node0.isDec());
260:       assertFalse(node0.isTypeOf());
261:       assertFalse(node0.isReturn());
262:       assertFalse(node0.isGetProp());
263:       assertEquals(40, node0.getType());
264:       assertFalse(node0.isFunction());
265:       assertFalse(node0.isCatch());
266:       assertFalse(node0.isDebugger());
267:       assertEquals(0, node0.getChildCount());
268:       assertFalse(node0.isRegExp());
269:       assertFalse(node0.isTrue());
270:       assertFalse(node0.isParamList());
271:       assertFalse(node0.isArrayLit());
272:       assertFalse(node0.isVoid());
273:       assertFalse(node0.isEmpty());
274:       assertFalse(node0.isNull());
275:       assertFalse(node0.isVar());
276:       assertFalse(node0.isAdd());
277:       assertFalse(node0.isSetterDef());
278:       assertFalse(node0.isDefaultCase());
279:       assertFalse(node0.isNew());
280:       assertFalse(node0.isCase());
281:       assertFalse(node0.hasMoreThanOneChild());
282:       assertEquals((-1), node0.getCharno());
283:       assertFalse(node0.isIn());
284:       assertEquals((-1), node0.getLineno());
285:       assertFalse(node0.isSwitch());
286:       assertFalse(node0.isNE());
287:       assertFalse(node0.isIf());
288:       assertFalse(node0.isStringKey());
289:       assertFalse(node0.isFor());
290:       assertFalse(node0.isThis());
291:       assertFalse(node0.isNumber());
292:       assertFalse(node0.isGetterDef());
293:       assertFalse(node0.isHook());
294:       assertFalse(node0.isBlock());
295:       assertFalse(node0.hasOneChild());
296:       assertFalse(node0.isTry());
297:       assertTrue(node0.isString());
298:       assertEquals(49, Node.DIRECT_EVAL);
299:       assertEquals(12, Node.COLUMN_BITS);
300:       assertEquals(30, Node.VAR_ARGS_NAME);
301:       assertEquals(51, Node.STATIC_SOURCE_FILE);
302:       assertEquals(52, Node.LENGTH);
303:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
304:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
305:       assertEquals(15, Node.NO_SIDE_EFFECTS);
306:       assertEquals(57, Node.LAST_PROP);
307:       assertEquals(32, Node.INCRDECR_PROP);
308:       assertEquals(1, Node.DECR_FLAG);
309:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
310:       assertEquals(29, Node.JSDOC_INFO_PROP);
311:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
312:       assertEquals(56, Node.CHANGE_TIME);
313:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
314:       assertEquals(8, Node.FLAG_NO_THROWS);
315:       assertEquals(57, Node.REFLECTED_OBJECT);
316:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
317:       assertEquals(37, Node.OPT_ARG_NAME);
318:       assertEquals(48, Node.DIRECTIVES);
319:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
320:       assertEquals(55, Node.INFERRED_FUNCTION);
321:       assertEquals(43, Node.IS_CONSTANT_NAME);
322:       assertEquals(36, Node.QUOTED_PROP);
323:       assertEquals(4095, Node.COLUMN_MASK);
324:       assertEquals(53, Node.INPUT_ID);
325:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
326:       assertEquals(39, Node.EMPTY_BLOCK);
327:       assertEquals(50, Node.FREE_CALL);
328:       assertEquals(40, Node.ORIGINALNAME_PROP);
329:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
330:       assertEquals(2, Node.POST_FLAG);
331:       assertEquals(47, Node.IS_DISPATCHER);
332:       assertEquals(46, Node.IS_NAMESPACE);
333:       assertEquals(54, Node.SLASH_V);
334:       
335:       String string0 = node0.toString();
336:       assertFalse(node0.isWith());
337:       assertFalse(node0.isScript());
338:       assertFalse(node0.isNot());
339:       assertFalse(node0.isObjectLit());
340:       assertFalse(node0.isInstanceOf());
341:       assertFalse(node0.isExprResult());
342:       assertFalse(node0.isAnd());
343:       assertFalse(node0.isLabelName());
344:       assertFalse(node0.isThrow());
345:       assertFalse(node0.isCast());
346:       assertFalse(node0.isFalse());
347:       assertFalse(node0.isAssignAdd());
348:       assertFalse(node0.isLabel());
349:       assertFalse(node0.isInc());
350:       assertFalse(node0.isDo());
351:       assertFalse(node0.isWhile());
352:       assertFalse(node0.isContinue());
353:       assertFalse(node0.isOr());
354:       assertFalse(node0.isDelProp());
355:       assertFalse(node0.isName());
356:       assertFalse(node0.isAssign());
357:       assertFalse(node0.isBreak());
358:       assertFalse(node0.hasChildren());
359:       assertFalse(node0.isGetElem());
360:       assertFalse(node0.isCall());
361:       assertFalse(node0.isComma());
362:       assertEquals((-1), node0.getSourcePosition());
363:       assertFalse(node0.isDec());
364:       assertFalse(node0.isTypeOf());
365:       assertFalse(node0.isReturn());
366:       assertFalse(node0.isGetProp());
367:       assertEquals(40, node0.getType());
368:       assertFalse(node0.isFunction());
369:       assertFalse(node0.isCatch());
370:       assertFalse(node0.isDebugger());
371:       assertEquals(0, node0.getChildCount());
372:       assertFalse(node0.isRegExp());
373:       assertFalse(node0.isTrue());
374:       assertFalse(node0.isParamList());
375:       assertFalse(node0.isArrayLit());
376:       assertFalse(node0.isVoid());
377:       assertFalse(node0.isEmpty());
378:       assertFalse(node0.isNull());
379:       assertFalse(node0.isVar());
380:       assertFalse(node0.isAdd());
381:       assertFalse(node0.isSetterDef());
382:       assertFalse(node0.isDefaultCase());
383:       assertFalse(node0.isNew());
384:       assertFalse(node0.isCase());
385:       assertFalse(node0.hasMoreThanOneChild());
386:       assertEquals((-1), node0.getCharno());
387:       assertFalse(node0.isIn());
388:       assertEquals((-1), node0.getLineno());
389:       assertFalse(node0.isSwitch());
390:       assertFalse(node0.isNE());
391:       assertFalse(node0.isIf());
392:       assertFalse(node0.isStringKey());
393:       assertFalse(node0.isFor());
394:       assertFalse(node0.isThis());
395:       assertFalse(node0.isNumber());
396:       assertFalse(node0.isGetterDef());
397:       assertFalse(node0.isHook());
398:       assertFalse(node0.isBlock());
399:       assertFalse(node0.hasOneChild());
400:       assertFalse(node0.isTry());
401:       assertTrue(node0.isString());
402:       assertNotNull(string0);
403:       assertEquals(49, Node.DIRECT_EVAL);
404:       assertEquals(12, Node.COLUMN_BITS);
405:       assertEquals(30, Node.VAR_ARGS_NAME);
406:       assertEquals(51, Node.STATIC_SOURCE_FILE);
407:       assertEquals(52, Node.LENGTH);
408:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
409:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
410:       assertEquals(15, Node.NO_SIDE_EFFECTS);
411:       assertEquals(57, Node.LAST_PROP);
412:       assertEquals(32, Node.INCRDECR_PROP);
413:       assertEquals(1, Node.DECR_FLAG);
414:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
415:       assertEquals(29, Node.JSDOC_INFO_PROP);
416:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
417:       assertEquals(56, Node.CHANGE_TIME);
418:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
419:       assertEquals(8, Node.FLAG_NO_THROWS);
420:       assertEquals(57, Node.REFLECTED_OBJECT);
421:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
422:       assertEquals(37, Node.OPT_ARG_NAME);
423:       assertEquals(48, Node.DIRECTIVES);
424:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
425:       assertEquals(55, Node.INFERRED_FUNCTION);
426:       assertEquals(43, Node.IS_CONSTANT_NAME);
427:       assertEquals(36, Node.QUOTED_PROP);
428:       assertEquals(4095, Node.COLUMN_MASK);
429:       assertEquals(53, Node.INPUT_ID);
430:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
431:       assertEquals(39, Node.EMPTY_BLOCK);
432:       assertEquals(50, Node.FREE_CALL);
433:       assertEquals(40, Node.ORIGINALNAME_PROP);
434:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
435:       assertEquals(2, Node.POST_FLAG);
436:       assertEquals(47, Node.IS_DISPATCHER);
437:       assertEquals(46, Node.IS_NAMESPACE);
438:       assertEquals(54, Node.SLASH_V);
439:       
440:       node0.setOptionalArg(false);
441:       assertFalse(node0.isWith());
442:       assertFalse(node0.isScript());
443:       assertFalse(node0.isNot());
444:       assertFalse(node0.isObjectLit());
445:       assertFalse(node0.isInstanceOf());
446:       assertFalse(node0.isExprResult());
447:       assertFalse(node0.isAnd());
448:       assertFalse(node0.isLabelName());
449:       assertFalse(node0.isThrow());
450:       assertFalse(node0.isCast());
451:       assertFalse(node0.isFalse());
452:       assertFalse(node0.isAssignAdd());
453:       assertFalse(node0.isLabel());
454:       assertFalse(node0.isInc());
455:       assertFalse(node0.isDo());
456:       assertFalse(node0.isWhile());
457:       assertFalse(node0.isContinue());
458:       assertFalse(node0.isOr());
459:       assertFalse(node0.isDelProp());
460:       assertFalse(node0.isName());
461:       assertFalse(node0.isAssign());
462:       assertFalse(node0.isBreak());
463:       assertFalse(node0.hasChildren());
464:       assertFalse(node0.isGetElem());
465:       assertFalse(node0.isCall());
466:       assertFalse(node0.isComma());
467:       assertEquals((-1), node0.getSourcePosition());
468:       assertFalse(node0.isDec());
469:       assertFalse(node0.isTypeOf());
470:       assertFalse(node0.isReturn());
471:       assertFalse(node0.isGetProp());
472:       assertEquals(40, node0.getType());
473:       assertFalse(node0.isFunction());
474:       assertFalse(node0.isCatch());
475:       assertFalse(node0.isDebugger());
476:       assertEquals(0, node0.getChildCount());
477:       assertFalse(node0.isRegExp());
478:       assertFalse(node0.isTrue());
479:       assertFalse(node0.isParamList());
480:       assertFalse(node0.isArrayLit());
481:       assertFalse(node0.isVoid());
482:       assertFalse(node0.isEmpty());
483:       assertFalse(node0.isNull());
484:       assertFalse(node0.isVar());
485:       assertFalse(node0.isAdd());
486:       assertFalse(node0.isSetterDef());
487:       assertFalse(node0.isDefaultCase());
488:       assertFalse(node0.isNew());
489:       assertFalse(node0.isCase());
490:       assertFalse(node0.hasMoreThanOneChild());
491:       assertEquals((-1), node0.getCharno());
492:       assertFalse(node0.isIn());
493:       assertEquals((-1), node0.getLineno());
494:       assertFalse(node0.isSwitch());
495:       assertFalse(node0.isNE());
496:       assertFalse(node0.isIf());
497:       assertFalse(node0.isStringKey());
498:       assertFalse(node0.isFor());
499:       assertFalse(node0.isThis());
500:       assertFalse(node0.isNumber());
501:       assertFalse(node0.isGetterDef());
502:       assertFalse(node0.isHook());
503:       assertFalse(node0.isBlock());
504:       assertFalse(node0.hasOneChild());
505:       assertFalse(node0.isTry());
506:       assertTrue(node0.isString());
507:       assertEquals(49, Node.DIRECT_EVAL);
508:       assertEquals(12, Node.COLUMN_BITS);
509:       assertEquals(30, Node.VAR_ARGS_NAME);
510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
511:       assertEquals(52, Node.LENGTH);
512:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
513:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
514:       assertEquals(15, Node.NO_SIDE_EFFECTS);
515:       assertEquals(57, Node.LAST_PROP);
516:       assertEquals(32, Node.INCRDECR_PROP);
517:       assertEquals(1, Node.DECR_FLAG);
518:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
519:       assertEquals(29, Node.JSDOC_INFO_PROP);
520:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
521:       assertEquals(56, Node.CHANGE_TIME);
522:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
523:       assertEquals(8, Node.FLAG_NO_THROWS);
524:       assertEquals(57, Node.REFLECTED_OBJECT);
525:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
526:       assertEquals(37, Node.OPT_ARG_NAME);
527:       assertEquals(48, Node.DIRECTIVES);
528:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
529:       assertEquals(55, Node.INFERRED_FUNCTION);
530:       assertEquals(43, Node.IS_CONSTANT_NAME);
531:       assertEquals(36, Node.QUOTED_PROP);
532:       assertEquals(4095, Node.COLUMN_MASK);
533:       assertEquals(53, Node.INPUT_ID);
534:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
535:       assertEquals(39, Node.EMPTY_BLOCK);
536:       assertEquals(50, Node.FREE_CALL);
537:       assertEquals(40, Node.ORIGINALNAME_PROP);
538:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
539:       assertEquals(2, Node.POST_FLAG);
540:       assertEquals(47, Node.IS_DISPATCHER);
541:       assertEquals(46, Node.IS_NAMESPACE);
542:       assertEquals(54, Node.SLASH_V);
543:       
544:       Node node1 = new Node(49, node0, node0);
545:       assertFalse(node0.isWith());
546:       assertFalse(node0.isScript());
547:       assertFalse(node0.isNot());
548:       assertFalse(node0.isObjectLit());
549:       assertFalse(node0.isInstanceOf());
550:       assertFalse(node0.isExprResult());
551:       assertFalse(node0.isAnd());
552:       assertFalse(node0.isLabelName());
553:       assertFalse(node0.isThrow());
554:       assertFalse(node0.isCast());
555:       assertFalse(node0.isFalse());
556:       assertFalse(node0.isAssignAdd());
557:       assertFalse(node0.isLabel());
558:       assertFalse(node0.isInc());
559:       assertFalse(node0.isDo());
560:       assertFalse(node0.isWhile());
561:       assertFalse(node0.isContinue());
562:       assertFalse(node0.isOr());
563:       assertFalse(node0.isDelProp());
564:       assertFalse(node0.isName());
565:       assertFalse(node0.isAssign());
566:       assertFalse(node0.isBreak());
567:       assertFalse(node0.hasChildren());
568:       assertFalse(node0.isGetElem());
569:       assertFalse(node0.isCall());
570:       assertFalse(node0.isComma());
571:       assertEquals((-1), node0.getSourcePosition());
572:       assertFalse(node0.isDec());
573:       assertFalse(node0.isTypeOf());
574:       assertFalse(node0.isReturn());
575:       assertFalse(node0.isGetProp());
576:       assertEquals(40, node0.getType());
577:       assertFalse(node0.isFunction());
578:       assertFalse(node0.isCatch());
579:       assertFalse(node0.isDebugger());
580:       assertEquals(0, node0.getChildCount());
581:       assertFalse(node0.isRegExp());
582:       assertFalse(node0.isTrue());
583:       assertFalse(node0.isParamList());
584:       assertFalse(node0.isArrayLit());
585:       assertFalse(node0.isVoid());
586:       assertFalse(node0.isEmpty());
587:       assertFalse(node0.isNull());
588:       assertFalse(node0.isVar());
589:       assertFalse(node0.isAdd());
590:       assertFalse(node0.isSetterDef());
591:       assertFalse(node0.isDefaultCase());
592:       assertFalse(node0.isNew());
593:       assertFalse(node0.isCase());
594:       assertFalse(node0.hasMoreThanOneChild());
595:       assertEquals((-1), node0.getCharno());
596:       assertFalse(node0.isIn());
597:       assertEquals((-1), node0.getLineno());
598:       assertFalse(node0.isSwitch());
599:       assertFalse(node0.isNE());
600:       assertFalse(node0.isIf());
601:       assertFalse(node0.isStringKey());
602:       assertFalse(node0.isFor());
603:       assertFalse(node0.isThis());
604:       assertFalse(node0.isNumber());
605:       assertFalse(node0.isGetterDef());
606:       assertFalse(node0.isHook());
607:       assertFalse(node0.isBlock());
608:       assertFalse(node0.hasOneChild());
609:       assertFalse(node0.isTry());
610:       assertTrue(node0.isString());
611:       assertTrue(node1.isThrow());
612:       assertFalse(node1.isSetterDef());
613:       assertFalse(node1.isNull());
614:       assertFalse(node1.isParamList());
615:       assertFalse(node1.isCall());
616:       assertFalse(node1.isStringKey());
617:       assertFalse(node1.isCatch());
618:       assertFalse(node1.isName());
619:       assertFalse(node1.isRegExp());
620:       assertFalse(node1.isWhile());
621:       assertFalse(node1.isBlock());
622:       assertFalse(node1.isDebugger());
623:       assertFalse(node1.isTry());
624:       assertFalse(node1.isNE());
625:       assertEquals(49, node1.getType());
626:       assertFalse(node1.isIf());
627:       assertFalse(node1.isFor());
628:       assertEquals((-1), node1.getSourcePosition());
629:       assertEquals(1, node1.getChildCount());
630:       assertFalse(node1.isCast());
631:       assertFalse(node1.hasMoreThanOneChild());
632:       assertFalse(node1.isContinue());
633:       assertTrue(node1.hasChildren());
634:       assertEquals((-1), node1.getLineno());
635:       assertFalse(node1.isFunction());
636:       assertFalse(node1.isInc());
637:       assertFalse(node1.isIn());
638:       assertFalse(node1.isThis());
639:       assertFalse(node1.isFalse());
640:       assertFalse(node1.isComma());
641:       assertFalse(node1.isAnd());
642:       assertFalse(node1.isInstanceOf());
643:       assertFalse(node1.isBreak());
644:       assertFalse(node1.isSwitch());
645:       assertFalse(node1.isScript());
646:       assertFalse(node1.isExprResult());
647:       assertFalse(node1.isString());
648:       assertFalse(node1.isNot());
649:       assertFalse(node1.isWith());
650:       assertEquals((-1), node1.getCharno());
651:       assertFalse(node1.isObjectLit());
652:       assertFalse(node1.isHook());
653:       assertFalse(node1.isGetProp());
654:       assertFalse(node1.isCase());
655:       assertFalse(node1.isNumber());
656:       assertFalse(node1.isTypeOf());
657:       assertFalse(node1.isLabel());
658:       assertFalse(node1.isOr());
659:       assertFalse(node1.isAssign());
660:       assertTrue(node1.hasOneChild());
661:       assertFalse(node1.isReturn());
662:       assertFalse(node1.isGetterDef());
663:       assertFalse(node1.isDec());
664:       assertFalse(node1.isArrayLit());
665:       assertFalse(node1.isLabelName());
666:       assertFalse(node1.isGetElem());
667:       assertFalse(node1.isDelProp());
668:       assertFalse(node1.isVoid());
669:       assertFalse(node1.isTrue());
670:       assertFalse(node1.isDefaultCase());
671:       assertFalse(node1.isVar());
672:       assertFalse(node1.isEmpty());
673:       assertFalse(node1.isDo());
674:       assertFalse(node1.isAssignAdd());
675:       assertFalse(node1.isAdd());
676:       assertFalse(node1.isNew());
677:       assertNotNull(node1);
678:       assertFalse(node1.equals((Object)node0));
679:       assertEquals(49, Node.DIRECT_EVAL);
680:       assertEquals(12, Node.COLUMN_BITS);
681:       assertEquals(30, Node.VAR_ARGS_NAME);
682:       assertEquals(51, Node.STATIC_SOURCE_FILE);
683:       assertEquals(52, Node.LENGTH);
684:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
685:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
686:       assertEquals(15, Node.NO_SIDE_EFFECTS);
687:       assertEquals(57, Node.LAST_PROP);
688:       assertEquals(32, Node.INCRDECR_PROP);
689:       assertEquals(1, Node.DECR_FLAG);
690:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
691:       assertEquals(29, Node.JSDOC_INFO_PROP);
692:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
693:       assertEquals(56, Node.CHANGE_TIME);
694:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
695:       assertEquals(8, Node.FLAG_NO_THROWS);
696:       assertEquals(57, Node.REFLECTED_OBJECT);
697:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
698:       assertEquals(37, Node.OPT_ARG_NAME);
699:       assertEquals(48, Node.DIRECTIVES);
700:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
701:       assertEquals(55, Node.INFERRED_FUNCTION);
702:       assertEquals(43, Node.IS_CONSTANT_NAME);
703:       assertEquals(36, Node.QUOTED_PROP);
704:       assertEquals(4095, Node.COLUMN_MASK);
705:       assertEquals(53, Node.INPUT_ID);
706:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
707:       assertEquals(39, Node.EMPTY_BLOCK);
708:       assertEquals(50, Node.FREE_CALL);
709:       assertEquals(40, Node.ORIGINALNAME_PROP);
710:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
711:       assertEquals(2, Node.POST_FLAG);
712:       assertEquals(47, Node.IS_DISPATCHER);
713:       assertEquals(46, Node.IS_NAMESPACE);
714:       assertEquals(54, Node.SLASH_V);
715:       assertEquals(56, Node.CHANGE_TIME);
716:       assertEquals(2, Node.POST_FLAG);
717:       assertEquals(47, Node.IS_DISPATCHER);
718:       assertEquals(51, Node.STATIC_SOURCE_FILE);
719:       assertEquals(12, Node.COLUMN_BITS);
720:       assertEquals(32, Node.INCRDECR_PROP);
721:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
722:       assertEquals(1, Node.DECR_FLAG);
723:       assertEquals(53, Node.INPUT_ID);
724:       assertEquals(29, Node.JSDOC_INFO_PROP);
725:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
726:       assertEquals(43, Node.IS_CONSTANT_NAME);
727:       assertEquals(57, Node.LAST_PROP);
728:       assertEquals(30, Node.VAR_ARGS_NAME);
729:       assertEquals(54, Node.SLASH_V);
730:       assertEquals(46, Node.IS_NAMESPACE);
731:       assertEquals(40, Node.ORIGINALNAME_PROP);
732:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
733:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
734:       assertEquals(8, Node.FLAG_NO_THROWS);
735:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
736:       assertEquals(50, Node.FREE_CALL);
737:       assertEquals(55, Node.INFERRED_FUNCTION);
738:       assertEquals(52, Node.LENGTH);
739:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
740:       assertEquals(39, Node.EMPTY_BLOCK);
741:       assertEquals(15, Node.NO_SIDE_EFFECTS);
742:       assertEquals(36, Node.QUOTED_PROP);
743:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
744:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
745:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
746:       assertEquals(57, Node.REFLECTED_OBJECT);
747:       assertEquals(4095, Node.COLUMN_MASK);
748:       assertEquals(48, Node.DIRECTIVES);
749:       assertEquals(49, Node.DIRECT_EVAL);
750:       assertEquals(37, Node.OPT_ARG_NAME);
751:       
752:       boolean boolean0 = node1.isThis();
753:       assertFalse(node0.isWith());
754:       assertFalse(node0.isScript());
755:       assertFalse(node0.isNot());
756:       assertFalse(node0.isObjectLit());
757:       assertFalse(node0.isInstanceOf());
758:       assertFalse(node0.isExprResult());
759:       assertFalse(node0.isAnd());
760:       assertFalse(node0.isLabelName());
761:       assertFalse(node0.isThrow());
762:       assertFalse(node0.isCast());
763:       assertFalse(node0.isFalse());
764:       assertFalse(node0.isAssignAdd());
765:       assertFalse(node0.isLabel());
766:       assertFalse(node0.isInc());
767:       assertFalse(node0.isDo());
768:       assertFalse(node0.isWhile());
769:       assertFalse(node0.isContinue());
770:       assertFalse(node0.isOr());
771:       assertFalse(node0.isDelProp());
772:       assertFalse(node0.isName());
773:       assertFalse(node0.isAssign());
774:       assertFalse(node0.isBreak());
775:       assertFalse(node0.hasChildren());
776:       assertFalse(node0.isGetElem());
777:       assertFalse(node0.isCall());
778:       assertFalse(node0.isComma());
779:       assertEquals((-1), node0.getSourcePosition());
780:       assertFalse(node0.isDec());
781:       assertFalse(node0.isTypeOf());
782:       assertFalse(node0.isReturn());
783:       assertFalse(node0.isGetProp());
784:       assertEquals(40, node0.getType());
785:       assertFalse(node0.isFunction());
786:       assertFalse(node0.isCatch());
787:       assertFalse(node0.isDebugger());
788:       assertEquals(0, node0.getChildCount());
789:       assertFalse(node0.isRegExp());
790:       assertFalse(node0.isTrue());
791:       assertFalse(node0.isParamList());
792:       assertFalse(node0.isArrayLit());
793:       assertFalse(node0.isVoid());
794:       assertFalse(node0.isEmpty());
795:       assertFalse(node0.isNull());
796:       assertFalse(node0.isVar());
797:       assertFalse(node0.isAdd());
798:       assertFalse(node0.isSetterDef());
799:       assertFalse(node0.isDefaultCase());
800:       assertFalse(node0.isNew());
801:       assertFalse(node0.isCase());
802:       assertFalse(node0.hasMoreThanOneChild());
803:       assertEquals((-1), node0.getCharno());
804:       assertFalse(node0.isIn());
805:       assertEquals((-1), node0.getLineno());
806:       assertFalse(node0.isSwitch());
807:       assertFalse(node0.isNE());
808:       assertFalse(node0.isIf());
809:       assertFalse(node0.isStringKey());
810:       assertFalse(node0.isFor());
811:       assertFalse(node0.isThis());
812:       assertFalse(node0.isNumber());
813:       assertFalse(node0.isGetterDef());
814:       assertFalse(node0.isHook());
815:       assertFalse(node0.isBlock());
816:       assertFalse(node0.hasOneChild());
817:       assertFalse(node0.isTry());
818:       assertTrue(node0.isString());
819:       assertTrue(node1.isThrow());
820:       assertFalse(node1.isSetterDef());
821:       assertFalse(node1.isNull());
822:       assertFalse(node1.isParamList());
823:       assertFalse(node1.isCall());
824:       assertFalse(node1.isStringKey());
825:       assertFalse(node1.isCatch());
826:       assertFalse(node1.isName());
827:       assertFalse(node1.isRegExp());
828:       assertFalse(node1.isWhile());
829:       assertFalse(node1.isBlock());
830:       assertFalse(node1.isDebugger());
831:       assertFalse(node1.isTry());
832:       assertFalse(node1.isNE());
833:       assertEquals(49, node1.getType());
834:       assertFalse(node1.isIf());
835:       assertFalse(node1.isFor());
836:       assertEquals((-1), node1.getSourcePosition());
837:       assertEquals(1, node1.getChildCount());
838:       assertFalse(node1.isCast());
839:       assertFalse(node1.hasMoreThanOneChild());
840:       assertFalse(node1.isContinue());
841:       assertTrue(node1.hasChildren());
842:       assertEquals((-1), node1.getLineno());
843:       assertFalse(node1.isFunction());
844:       assertFalse(node1.isInc());
845:       assertFalse(node1.isIn());
846:       assertFalse(node1.isThis());
847:       assertFalse(node1.isFalse());
848:       assertFalse(node1.isComma());
849:       assertFalse(node1.isAnd());
850:       assertFalse(node1.isInstanceOf());
851:       assertFalse(node1.isBreak());
852:       assertFalse(node1.isSwitch());
853:       assertFalse(node1.isScript());
854:       assertFalse(node1.isExprResult());
855:       assertFalse(node1.isString());
856:       assertFalse(node1.isNot());
857:       assertFalse(node1.isWith());
858:       assertEquals((-1), node1.getCharno());
859:       assertFalse(node1.isObjectLit());
860:       assertFalse(node1.isHook());
861:       assertFalse(node1.isGetProp());
862:       assertFalse(node1.isCase());
863:       assertFalse(node1.isNumber());
864:       assertFalse(node1.isTypeOf());
865:       assertFalse(node1.isLabel());
866:       assertFalse(node1.isOr());
867:       assertFalse(node1.isAssign());
868:       assertTrue(node1.hasOneChild());
869:       assertFalse(node1.isReturn());
870:       assertFalse(node1.isGetterDef());
871:       assertFalse(node1.isDec());
872:       assertFalse(node1.isArrayLit());
873:       assertFalse(node1.isLabelName());
874:       assertFalse(node1.isGetElem());
875:       assertFalse(node1.isDelProp());
876:       assertFalse(node1.isVoid());
877:       assertFalse(node1.isTrue());
878:       assertFalse(node1.isDefaultCase());
879:       assertFalse(node1.isVar());
880:       assertFalse(node1.isEmpty());
881:       assertFalse(node1.isDo());
882:       assertFalse(node1.isAssignAdd());
883:       assertFalse(node1.isAdd());
884:       assertFalse(node1.isNew());
885:       assertFalse(boolean0);
886:       assertFalse(node0.equals((Object)node1));
887:       assertFalse(node1.equals((Object)node0));
888:       assertEquals(49, Node.DIRECT_EVAL);
889:       assertEquals(12, Node.COLUMN_BITS);
890:       assertEquals(30, Node.VAR_ARGS_NAME);
891:       assertEquals(51, Node.STATIC_SOURCE_FILE);
892:       assertEquals(52, Node.LENGTH);
893:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
894:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
895:       assertEquals(15, Node.NO_SIDE_EFFECTS);
896:       assertEquals(57, Node.LAST_PROP);
897:       assertEquals(32, Node.INCRDECR_PROP);
898:       assertEquals(1, Node.DECR_FLAG);
899:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
900:       assertEquals(29, Node.JSDOC_INFO_PROP);
901:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
902:       assertEquals(56, Node.CHANGE_TIME);
903:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
904:       assertEquals(8, Node.FLAG_NO_THROWS);
905:       assertEquals(57, Node.REFLECTED_OBJECT);
906:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
907:       assertEquals(37, Node.OPT_ARG_NAME);
908:       assertEquals(48, Node.DIRECTIVES);
909:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
910:       assertEquals(55, Node.INFERRED_FUNCTION);
911:       assertEquals(43, Node.IS_CONSTANT_NAME);
912:       assertEquals(36, Node.QUOTED_PROP);
913:       assertEquals(4095, Node.COLUMN_MASK);
914:       assertEquals(53, Node.INPUT_ID);
915:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
916:       assertEquals(39, Node.EMPTY_BLOCK);
917:       assertEquals(50, Node.FREE_CALL);
918:       assertEquals(40, Node.ORIGINALNAME_PROP);
919:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
920:       assertEquals(2, Node.POST_FLAG);
921:       assertEquals(47, Node.IS_DISPATCHER);
922:       assertEquals(46, Node.IS_NAMESPACE);
923:       assertEquals(54, Node.SLASH_V);
924:       assertEquals(56, Node.CHANGE_TIME);
925:       assertEquals(2, Node.POST_FLAG);
926:       assertEquals(47, Node.IS_DISPATCHER);
927:       assertEquals(51, Node.STATIC_SOURCE_FILE);
928:       assertEquals(12, Node.COLUMN_BITS);
929:       assertEquals(32, Node.INCRDECR_PROP);
930:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
931:       assertEquals(1, Node.DECR_FLAG);
932:       assertEquals(53, Node.INPUT_ID);
933:       assertEquals(29, Node.JSDOC_INFO_PROP);
934:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
935:       assertEquals(43, Node.IS_CONSTANT_NAME);
936:       assertEquals(57, Node.LAST_PROP);
937:       assertEquals(30, Node.VAR_ARGS_NAME);
938:       assertEquals(54, Node.SLASH_V);
939:       assertEquals(46, Node.IS_NAMESPACE);
940:       assertEquals(40, Node.ORIGINALNAME_PROP);
941:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
942:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
943:       assertEquals(8, Node.FLAG_NO_THROWS);
944:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
945:       assertEquals(50, Node.FREE_CALL);
946:       assertEquals(55, Node.INFERRED_FUNCTION);
947:       assertEquals(52, Node.LENGTH);
948:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
949:       assertEquals(39, Node.EMPTY_BLOCK);
950:       assertEquals(15, Node.NO_SIDE_EFFECTS);
951:       assertEquals(36, Node.QUOTED_PROP);
952:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
953:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
954:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
955:       assertEquals(57, Node.REFLECTED_OBJECT);
956:       assertEquals(4095, Node.COLUMN_MASK);
957:       assertEquals(48, Node.DIRECTIVES);
958:       assertEquals(49, Node.DIRECT_EVAL);
959:       assertEquals(37, Node.OPT_ARG_NAME);
960:       
961:       Node node2 = Node.newString(51, "CGdy$k/:pbdplN#$K!{", (-425), 52);
962:       assertNotSame(node2, node0);
963:       assertFalse(node2.isExprResult());
964:       assertFalse(node2.isNot());
965:       assertFalse(node2.isScript());
966:       assertFalse(node2.hasOneChild());
967:       assertFalse(node2.isLabel());
968:       assertFalse(node2.isGetProp());
969:       assertFalse(node2.isAssignAdd());
970:       assertEquals((-1), node2.getSourcePosition());
971:       assertFalse(node2.isNumber());
972:       assertEquals(51, node2.getType());
973:       assertFalse(node2.isObjectLit());
974:       assertFalse(node2.isLabelName());
975:       assertFalse(node2.isFalse());
976:       assertFalse(node2.isAnd());
977:       assertFalse(node2.isContinue());
978:       assertFalse(node2.isCast());
979:       assertFalse(node2.isAdd());
980:       assertFalse(node2.isVar());
981:       assertFalse(node2.isWhile());
982:       assertFalse(node2.isString());
983:       assertTrue(node2.isIn());
984:       assertFalse(node2.isDo());
985:       assertFalse(node2.isNew());
986:       assertFalse(node2.isReturn());
987:       assertFalse(node2.isNull());
988:       assertFalse(node2.isTypeOf());
989:       assertFalse(node2.hasChildren());
990:       assertFalse(node2.isOr());
991:       assertFalse(node2.isAssign());
992:       assertFalse(node2.isDec());
993:       assertFalse(node2.isComma());
994:       assertFalse(node2.isName());
995:       assertFalse(node2.isGetElem());
996:       assertFalse(node2.isCall());
997:       assertFalse(node2.isDelProp());
998:       assertFalse(node2.isBreak());
999:       assertFalse(node2.isVoid());
1000:       assertFalse(node2.isTry());
1001:       assertFalse(node2.isTrue());
1002:       assertFalse(node2.isRegExp());
1003:       assertFalse(node2.isFunction());
1004:       assertFalse(node2.isDebugger());
1005:       assertFalse(node2.isEmpty());
1006:       assertFalse(node2.isFor());
1007:       assertFalse(node2.isDefaultCase());
1008:       assertFalse(node2.isParamList());
1009:       assertFalse(node2.isGetterDef());
1010:       assertEquals(0, node2.getChildCount());
1011:       assertFalse(node2.isStringKey());
1012:       assertFalse(node2.isArrayLit());
1013:       assertFalse(node2.isSwitch());
1014:       assertFalse(node2.isBlock());
1015:       assertFalse(node2.isHook());
1016:       assertEquals((-1), node2.getCharno());
1017:       assertFalse(node2.isCase());
1018:       assertFalse(node2.isThrow());
1019:       assertFalse(node2.isSetterDef());
1020:       assertFalse(node2.isInc());
1021:       assertFalse(node2.isNE());
1022:       assertFalse(node2.isInstanceOf());
1023:       assertFalse(node2.isThis());
1024:       assertFalse(node2.hasMoreThanOneChild());
1025:       assertFalse(node2.isWith());
1026:       assertFalse(node2.isCatch());
1027:       assertFalse(node2.isIf());
1028:       assertEquals((-1), node2.getLineno());
1029:       assertNotNull(node2);
1030:       assertFalse(node2.equals((Object)node0));
1031:       assertFalse(node2.equals((Object)node1));
1032:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1033:       assertEquals(54, Node.SLASH_V);
1034:       assertEquals(52, Node.LENGTH);
1035:       assertEquals(57, Node.REFLECTED_OBJECT);
1036:       assertEquals(30, Node.VAR_ARGS_NAME);
1037:       assertEquals(40, Node.ORIGINALNAME_PROP);
1038:       assertEquals(49, Node.DIRECT_EVAL);
1039:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1040:       assertEquals(48, Node.DIRECTIVES);
1041:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1042:       assertEquals(8, Node.FLAG_NO_THROWS);
1043:       assertEquals(56, Node.CHANGE_TIME);
1044:       assertEquals(47, Node.IS_DISPATCHER);
1045:       assertEquals(2, Node.POST_FLAG);
1046:       assertEquals(29, Node.JSDOC_INFO_PROP);
1047:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1048:       assertEquals(55, Node.INFERRED_FUNCTION);
1049:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1050:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1051:       assertEquals(57, Node.LAST_PROP);
1052:       assertEquals(39, Node.EMPTY_BLOCK);
1053:       assertEquals(53, Node.INPUT_ID);
1054:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1055:       assertEquals(43, Node.IS_CONSTANT_NAME);
1056:       assertEquals(36, Node.QUOTED_PROP);
1057:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1058:       assertEquals(4095, Node.COLUMN_MASK);
1059:       assertEquals(37, Node.OPT_ARG_NAME);
1060:       assertEquals(12, Node.COLUMN_BITS);
1061:       assertEquals(46, Node.IS_NAMESPACE);
1062:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1063:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1064:       assertEquals(1, Node.DECR_FLAG);
1065:       assertEquals(50, Node.FREE_CALL);
1066:       assertEquals(32, Node.INCRDECR_PROP);
1067:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1068:       
1069:       node2.setCharno(39);
1070:       assertNotSame(node2, node0);
1071:       assertFalse(node2.isExprResult());
1072:       assertFalse(node2.isNot());
1073:       assertFalse(node2.isScript());
1074:       assertFalse(node2.hasOneChild());
1075:       assertFalse(node2.isLabel());
1076:       assertFalse(node2.isGetProp());
1077:       assertFalse(node2.isAssignAdd());
1078:       assertEquals((-1), node2.getSourcePosition());
1079:       assertFalse(node2.isNumber());
1080:       assertEquals(51, node2.getType());
1081:       assertFalse(node2.isObjectLit());
1082:       assertFalse(node2.isLabelName());
1083:       assertFalse(node2.isFalse());
1084:       assertFalse(node2.isAnd());
1085:       assertFalse(node2.isContinue());
1086:       assertFalse(node2.isCast());
1087:       assertFalse(node2.isAdd());
1088:       assertFalse(node2.isVar());
1089:       assertFalse(node2.isWhile());
1090:       assertFalse(node2.isString());
1091:       assertTrue(node2.isIn());
1092:       assertFalse(node2.isDo());
1093:       assertFalse(node2.isNew());
1094:       assertFalse(node2.isReturn());
1095:       assertFalse(node2.isNull());
1096:       assertFalse(node2.isTypeOf());
1097:       assertFalse(node2.hasChildren());
1098:       assertFalse(node2.isOr());
1099:       assertFalse(node2.isAssign());
1100:       assertFalse(node2.isDec());
1101:       assertFalse(node2.isComma());
1102:       assertFalse(node2.isName());
1103:       assertFalse(node2.isGetElem());
1104:       assertFalse(node2.isCall());
1105:       assertFalse(node2.isDelProp());
1106:       assertFalse(node2.isBreak());
1107:       assertFalse(node2.isVoid());
1108:       assertFalse(node2.isTry());
1109:       assertFalse(node2.isTrue());
1110:       assertFalse(node2.isRegExp());
1111:       assertFalse(node2.isFunction());
1112:       assertFalse(node2.isDebugger());
1113:       assertFalse(node2.isEmpty());
1114:       assertFalse(node2.isFor());
1115:       assertFalse(node2.isDefaultCase());
1116:       assertFalse(node2.isParamList());
1117:       assertFalse(node2.isGetterDef());
1118:       assertEquals(0, node2.getChildCount());
1119:       assertFalse(node2.isStringKey());
1120:       assertFalse(node2.isArrayLit());
1121:       assertFalse(node2.isSwitch());
1122:       assertFalse(node2.isBlock());
1123:       assertFalse(node2.isHook());
1124:       assertEquals((-1), node2.getCharno());
1125:       assertFalse(node2.isCase());
1126:       assertFalse(node2.isThrow());
1127:       assertFalse(node2.isSetterDef());
1128:       assertFalse(node2.isInc());
1129:       assertFalse(node2.isNE());
1130:       assertFalse(node2.isInstanceOf());
1131:       assertFalse(node2.isThis());
1132:       assertFalse(node2.hasMoreThanOneChild());
1133:       assertFalse(node2.isWith());
1134:       assertFalse(node2.isCatch());
1135:       assertFalse(node2.isIf());
1136:       assertEquals((-1), node2.getLineno());
1137:       assertFalse(node2.equals((Object)node0));
1138:       assertFalse(node2.equals((Object)node1));
1139:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1140:       assertEquals(54, Node.SLASH_V);
1141:       assertEquals(52, Node.LENGTH);
1142:       assertEquals(57, Node.REFLECTED_OBJECT);
1143:       assertEquals(30, Node.VAR_ARGS_NAME);
1144:       assertEquals(40, Node.ORIGINALNAME_PROP);
1145:       assertEquals(49, Node.DIRECT_EVAL);
1146:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1147:       assertEquals(48, Node.DIRECTIVES);
1148:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1149:       assertEquals(8, Node.FLAG_NO_THROWS);
1150:       assertEquals(56, Node.CHANGE_TIME);
1151:       assertEquals(47, Node.IS_DISPATCHER);
1152:       assertEquals(2, Node.POST_FLAG);
1153:       assertEquals(29, Node.JSDOC_INFO_PROP);
1154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1155:       assertEquals(55, Node.INFERRED_FUNCTION);
1156:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1157:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1158:       assertEquals(57, Node.LAST_PROP);
1159:       assertEquals(39, Node.EMPTY_BLOCK);
1160:       assertEquals(53, Node.INPUT_ID);
1161:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1162:       assertEquals(43, Node.IS_CONSTANT_NAME);
1163:       assertEquals(36, Node.QUOTED_PROP);
1164:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1165:       assertEquals(4095, Node.COLUMN_MASK);
1166:       assertEquals(37, Node.OPT_ARG_NAME);
1167:       assertEquals(12, Node.COLUMN_BITS);
1168:       assertEquals(46, Node.IS_NAMESPACE);
1169:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1170:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1171:       assertEquals(1, Node.DECR_FLAG);
1172:       assertEquals(50, Node.FREE_CALL);
1173:       assertEquals(32, Node.INCRDECR_PROP);
1174:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1175:       
1176:       boolean boolean1 = node0.isEquivalentToTyped(node1);
1177:       assertNotSame(node0, node2);
1178:       assertFalse(node0.isWith());
1179:       assertFalse(node0.isScript());
1180:       assertFalse(node0.isNot());
1181:       assertFalse(node0.isObjectLit());
1182:       assertFalse(node0.isInstanceOf());
1183:       assertFalse(node0.isExprResult());
1184:       assertFalse(node0.isAnd());
1185:       assertFalse(node0.isLabelName());
1186:       assertFalse(node0.isThrow());
1187:       assertFalse(node0.isCast());
1188:       assertFalse(node0.isFalse());
1189:       assertFalse(node0.isAssignAdd());
1190:       assertFalse(node0.isLabel());
1191:       assertFalse(node0.isInc());
1192:       assertFalse(node0.isDo());
1193:       assertFalse(node0.isWhile());
1194:       assertFalse(node0.isContinue());
1195:       assertFalse(node0.isOr());
1196:       assertFalse(node0.isDelProp());
1197:       assertFalse(node0.isName());
1198:       assertFalse(node0.isAssign());
1199:       assertFalse(node0.isBreak());
1200:       assertFalse(node0.hasChildren());
1201:       assertFalse(node0.isGetElem());
1202:       assertFalse(node0.isCall());
1203:       assertFalse(node0.isComma());
1204:       assertEquals((-1), node0.getSourcePosition());
1205:       assertFalse(node0.isDec());
1206:       assertFalse(node0.isTypeOf());
1207:       assertFalse(node0.isReturn());
1208:       assertFalse(node0.isGetProp());
1209:       assertEquals(40, node0.getType());
1210:       assertFalse(node0.isFunction());
1211:       assertFalse(node0.isCatch());
1212:       assertFalse(node0.isDebugger());
1213:       assertEquals(0, node0.getChildCount());
1214:       assertFalse(node0.isRegExp());
1215:       assertFalse(node0.isTrue());
1216:       assertFalse(node0.isParamList());
1217:       assertFalse(node0.isArrayLit());
1218:       assertFalse(node0.isVoid());
1219:       assertFalse(node0.isEmpty());
1220:       assertFalse(node0.isNull());
1221:       assertFalse(node0.isVar());
1222:       assertFalse(node0.isAdd());
1223:       assertFalse(node0.isSetterDef());
1224:       assertFalse(node0.isDefaultCase());
1225:       assertFalse(node0.isNew());
1226:       assertFalse(node0.isCase());
1227:       assertFalse(node0.hasMoreThanOneChild());
1228:       assertEquals((-1), node0.getCharno());
1229:       assertFalse(node0.isIn());
1230:       assertEquals((-1), node0.getLineno());
1231:       assertFalse(node0.isSwitch());
1232:       assertFalse(node0.isNE());
1233:       assertFalse(node0.isIf());
1234:       assertFalse(node0.isStringKey());
1235:       assertFalse(node0.isFor());
1236:       assertFalse(node0.isThis());
1237:       assertFalse(node0.isNumber());
1238:       assertFalse(node0.isGetterDef());
1239:       assertFalse(node0.isHook());
1240:       assertFalse(node0.isBlock());
1241:       assertFalse(node0.hasOneChild());
1242:       assertFalse(node0.isTry());
1243:       assertTrue(node0.isString());
1244:       assertTrue(node1.isThrow());
1245:       assertFalse(node1.isSetterDef());
1246:       assertFalse(node1.isNull());
1247:       assertFalse(node1.isParamList());
1248:       assertFalse(node1.isCall());
1249:       assertFalse(node1.isStringKey());
1250:       assertFalse(node1.isCatch());
1251:       assertFalse(node1.isName());
1252:       assertFalse(node1.isRegExp());
1253:       assertFalse(node1.isWhile());
1254:       assertFalse(node1.isBlock());
1255:       assertFalse(node1.isDebugger());
1256:       assertFalse(node1.isTry());
1257:       assertFalse(node1.isNE());
1258:       assertEquals(49, node1.getType());
1259:       assertFalse(node1.isIf());
1260:       assertFalse(node1.isFor());
1261:       assertEquals((-1), node1.getSourcePosition());
1262:       assertEquals(1, node1.getChildCount());
1263:       assertFalse(node1.isCast());
1264:       assertFalse(node1.hasMoreThanOneChild());
1265:       assertFalse(node1.isContinue());
1266:       assertTrue(node1.hasChildren());
1267:       assertEquals((-1), node1.getLineno());
1268:       assertFalse(node1.isFunction());
1269:       assertFalse(node1.isInc());
1270:       assertFalse(node1.isIn());
1271:       assertFalse(node1.isThis());
1272:       assertFalse(node1.isFalse());
1273:       assertFalse(node1.isComma());
1274:       assertFalse(node1.isAnd());
1275:       assertFalse(node1.isInstanceOf());
1276:       assertFalse(node1.isBreak());
1277:       assertFalse(node1.isSwitch());
1278:       assertFalse(node1.isScript());
1279:       assertFalse(node1.isExprResult());
1280:       assertFalse(node1.isString());
1281:       assertFalse(node1.isNot());
1282:       assertFalse(node1.isWith());
1283:       assertEquals((-1), node1.getCharno());
1284:       assertFalse(node1.isObjectLit());
1285:       assertFalse(node1.isHook());
1286:       assertFalse(node1.isGetProp());
1287:       assertFalse(node1.isCase());
1288:       assertFalse(node1.isNumber());
1289:       assertFalse(node1.isTypeOf());
1290:       assertFalse(node1.isLabel());
1291:       assertFalse(node1.isOr());
1292:       assertFalse(node1.isAssign());
1293:       assertTrue(node1.hasOneChild());
1294:       assertFalse(node1.isReturn());
1295:       assertFalse(node1.isGetterDef());
1296:       assertFalse(node1.isDec());
1297:       assertFalse(node1.isArrayLit());
1298:       assertFalse(node1.isLabelName());
1299:       assertFalse(node1.isGetElem());
1300:       assertFalse(node1.isDelProp());
1301:       assertFalse(node1.isVoid());
1302:       assertFalse(node1.isTrue());
1303:       assertFalse(node1.isDefaultCase());
1304:       assertFalse(node1.isVar());
1305:       assertFalse(node1.isEmpty());
1306:       assertFalse(node1.isDo());
1307:       assertFalse(node1.isAssignAdd());
1308:       assertFalse(node1.isAdd());
1309:       assertFalse(node1.isNew());
1310:       assertFalse(boolean1);
1311:       assertFalse(node0.equals((Object)node1));
1312:       assertFalse(node0.equals((Object)node2));
1313:       assertFalse(node1.equals((Object)node2));
1314:       assertFalse(node1.equals((Object)node0));
1315:       assertTrue(boolean1 == boolean0);
1316:       assertEquals(49, Node.DIRECT_EVAL);
1317:       assertEquals(12, Node.COLUMN_BITS);
1318:       assertEquals(30, Node.VAR_ARGS_NAME);
1319:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1320:       assertEquals(52, Node.LENGTH);
1321:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1322:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1323:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1324:       assertEquals(57, Node.LAST_PROP);
1325:       assertEquals(32, Node.INCRDECR_PROP);
1326:       assertEquals(1, Node.DECR_FLAG);
1327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1328:       assertEquals(29, Node.JSDOC_INFO_PROP);
1329:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1330:       assertEquals(56, Node.CHANGE_TIME);
1331:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1332:       assertEquals(8, Node.FLAG_NO_THROWS);
1333:       assertEquals(57, Node.REFLECTED_OBJECT);
1334:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1335:       assertEquals(37, Node.OPT_ARG_NAME);
1336:       assertEquals(48, Node.DIRECTIVES);
1337:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1338:       assertEquals(55, Node.INFERRED_FUNCTION);
1339:       assertEquals(43, Node.IS_CONSTANT_NAME);
1340:       assertEquals(36, Node.QUOTED_PROP);
1341:       assertEquals(4095, Node.COLUMN_MASK);
1342:       assertEquals(53, Node.INPUT_ID);
1343:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1344:       assertEquals(39, Node.EMPTY_BLOCK);
1345:       assertEquals(50, Node.FREE_CALL);
1346:       assertEquals(40, Node.ORIGINALNAME_PROP);
1347:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1348:       assertEquals(2, Node.POST_FLAG);
1349:       assertEquals(47, Node.IS_DISPATCHER);
1350:       assertEquals(46, Node.IS_NAMESPACE);
1351:       assertEquals(54, Node.SLASH_V);
1352:       assertEquals(56, Node.CHANGE_TIME);
1353:       assertEquals(2, Node.POST_FLAG);
1354:       assertEquals(47, Node.IS_DISPATCHER);
1355:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1356:       assertEquals(12, Node.COLUMN_BITS);
1357:       assertEquals(32, Node.INCRDECR_PROP);
1358:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1359:       assertEquals(1, Node.DECR_FLAG);
1360:       assertEquals(53, Node.INPUT_ID);
1361:       assertEquals(29, Node.JSDOC_INFO_PROP);
1362:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1363:       assertEquals(43, Node.IS_CONSTANT_NAME);
1364:       assertEquals(57, Node.LAST_PROP);
1365:       assertEquals(30, Node.VAR_ARGS_NAME);
1366:       assertEquals(54, Node.SLASH_V);
1367:       assertEquals(46, Node.IS_NAMESPACE);
1368:       assertEquals(40, Node.ORIGINALNAME_PROP);
1369:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1370:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1371:       assertEquals(8, Node.FLAG_NO_THROWS);
1372:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1373:       assertEquals(50, Node.FREE_CALL);
1374:       assertEquals(55, Node.INFERRED_FUNCTION);
1375:       assertEquals(52, Node.LENGTH);
1376:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1377:       assertEquals(39, Node.EMPTY_BLOCK);
1378:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1379:       assertEquals(36, Node.QUOTED_PROP);
1380:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1381:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1382:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1383:       assertEquals(57, Node.REFLECTED_OBJECT);
1384:       assertEquals(4095, Node.COLUMN_MASK);
1385:       assertEquals(48, Node.DIRECTIVES);
1386:       assertEquals(49, Node.DIRECT_EVAL);
1387:       assertEquals(37, Node.OPT_ARG_NAME);
1388:       
1389:       node2.setSourceFileForTesting((String) null);
1390:       assertNotSame(node2, node0);
1391:       assertFalse(node2.isExprResult());
1392:       assertFalse(node2.isNot());
1393:       assertFalse(node2.isScript());
1394:       assertFalse(node2.hasOneChild());
1395:       assertFalse(node2.isLabel());
1396:       assertFalse(node2.isGetProp());
1397:       assertFalse(node2.isAssignAdd());
1398:       assertEquals((-1), node2.getSourcePosition());
1399:       assertFalse(node2.isNumber());
1400:       assertEquals(51, node2.getType());
1401:       assertFalse(node2.isObjectLit());
1402:       assertFalse(node2.isLabelName());
1403:       assertFalse(node2.isFalse());
1404:       assertFalse(node2.isAnd());
1405:       assertFalse(node2.isContinue());
1406:       assertFalse(node2.isCast());
1407:       assertFalse(node2.isAdd());
1408:       assertFalse(node2.isVar());
1409:       assertFalse(node2.isWhile());
1410:       assertFalse(node2.isString());
1411:       assertTrue(node2.isIn());
1412:       assertFalse(node2.isDo());
1413:       assertFalse(node2.isNew());
1414:       assertFalse(node2.isReturn());
1415:       assertFalse(node2.isNull());
1416:       assertFalse(node2.isTypeOf());
1417:       assertFalse(node2.hasChildren());
1418:       assertFalse(node2.isOr());
1419:       assertFalse(node2.isAssign());
1420:       assertFalse(node2.isDec());
1421:       assertFalse(node2.isComma());
1422:       assertFalse(node2.isName());
1423:       assertFalse(node2.isGetElem());
1424:       assertFalse(node2.isCall());
1425:       assertFalse(node2.isDelProp());
1426:       assertFalse(node2.isBreak());
1427:       assertFalse(node2.isVoid());
1428:       assertFalse(node2.isTry());
1429:       assertFalse(node2.isTrue());
1430:       assertFalse(node2.isRegExp());
1431:       assertFalse(node2.isFunction());
1432:       assertFalse(node2.isDebugger());
1433:       assertFalse(node2.isEmpty());
1434:       assertFalse(node2.isFor());
1435:       assertFalse(node2.isDefaultCase());
1436:       assertFalse(node2.isParamList());
1437:       assertFalse(node2.isGetterDef());
1438:       assertEquals(0, node2.getChildCount());
1439:       assertFalse(node2.isStringKey());
1440:       assertFalse(node2.isArrayLit());
1441:       assertFalse(node2.isSwitch());
1442:       assertFalse(node2.isBlock());
1443:       assertFalse(node2.isHook());
1444:       assertEquals((-1), node2.getCharno());
1445:       assertFalse(node2.isCase());
1446:       assertFalse(node2.isThrow());
1447:       assertFalse(node2.isSetterDef());
1448:       assertFalse(node2.isInc());
1449:       assertFalse(node2.isNE());
1450:       assertFalse(node2.isInstanceOf());
1451:       assertFalse(node2.isThis());
1452:       assertFalse(node2.hasMoreThanOneChild());
1453:       assertFalse(node2.isWith());
1454:       assertFalse(node2.isCatch());
1455:       assertFalse(node2.isIf());
1456:       assertEquals((-1), node2.getLineno());
1457:       assertFalse(node2.equals((Object)node0));
1458:       assertFalse(node2.equals((Object)node1));
1459:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1460:       assertEquals(54, Node.SLASH_V);
1461:       assertEquals(52, Node.LENGTH);
1462:       assertEquals(57, Node.REFLECTED_OBJECT);
1463:       assertEquals(30, Node.VAR_ARGS_NAME);
1464:       assertEquals(40, Node.ORIGINALNAME_PROP);
1465:       assertEquals(49, Node.DIRECT_EVAL);
1466:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1467:       assertEquals(48, Node.DIRECTIVES);
1468:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1469:       assertEquals(8, Node.FLAG_NO_THROWS);
1470:       assertEquals(56, Node.CHANGE_TIME);
1471:       assertEquals(47, Node.IS_DISPATCHER);
1472:       assertEquals(2, Node.POST_FLAG);
1473:       assertEquals(29, Node.JSDOC_INFO_PROP);
1474:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1475:       assertEquals(55, Node.INFERRED_FUNCTION);
1476:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1477:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1478:       assertEquals(57, Node.LAST_PROP);
1479:       assertEquals(39, Node.EMPTY_BLOCK);
1480:       assertEquals(53, Node.INPUT_ID);
1481:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1482:       assertEquals(43, Node.IS_CONSTANT_NAME);
1483:       assertEquals(36, Node.QUOTED_PROP);
1484:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1485:       assertEquals(4095, Node.COLUMN_MASK);
1486:       assertEquals(37, Node.OPT_ARG_NAME);
1487:       assertEquals(12, Node.COLUMN_BITS);
1488:       assertEquals(46, Node.IS_NAMESPACE);
1489:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1490:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1491:       assertEquals(1, Node.DECR_FLAG);
1492:       assertEquals(50, Node.FREE_CALL);
1493:       assertEquals(32, Node.INCRDECR_PROP);
1494:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1495:       
1496:       boolean boolean2 = node1.isStringKey();
1497:       assertNotSame(node0, node2);
1498:       assertFalse(node0.isWith());
1499:       assertFalse(node0.isScript());
1500:       assertFalse(node0.isNot());
1501:       assertFalse(node0.isObjectLit());
1502:       assertFalse(node0.isInstanceOf());
1503:       assertFalse(node0.isExprResult());
1504:       assertFalse(node0.isAnd());
1505:       assertFalse(node0.isLabelName());
1506:       assertFalse(node0.isThrow());
1507:       assertFalse(node0.isCast());
1508:       assertFalse(node0.isFalse());
1509:       assertFalse(node0.isAssignAdd());
1510:       assertFalse(node0.isLabel());
1511:       assertFalse(node0.isInc());
1512:       assertFalse(node0.isDo());
1513:       assertFalse(node0.isWhile());
1514:       assertFalse(node0.isContinue());
1515:       assertFalse(node0.isOr());
1516:       assertFalse(node0.isDelProp());
1517:       assertFalse(node0.isName());
1518:       assertFalse(node0.isAssign());
1519:       assertFalse(node0.isBreak());
1520:       assertFalse(node0.hasChildren());
1521:       assertFalse(node0.isGetElem());
1522:       assertFalse(node0.isCall());
1523:       assertFalse(node0.isComma());
1524:       assertEquals((-1), node0.getSourcePosition());
1525:       assertFalse(node0.isDec());
1526:       assertFalse(node0.isTypeOf());
1527:       assertFalse(node0.isReturn());
1528:       assertFalse(node0.isGetProp());
1529:       assertEquals(40, node0.getType());
1530:       assertFalse(node0.isFunction());
1531:       assertFalse(node0.isCatch());
1532:       assertFalse(node0.isDebugger());
1533:       assertEquals(0, node0.getChildCount());
1534:       assertFalse(node0.isRegExp());
1535:       assertFalse(node0.isTrue());
1536:       assertFalse(node0.isParamList());
1537:       assertFalse(node0.isArrayLit());
1538:       assertFalse(node0.isVoid());
1539:       assertFalse(node0.isEmpty());
1540:       assertFalse(node0.isNull());
1541:       assertFalse(node0.isVar());
1542:       assertFalse(node0.isAdd());
1543:       assertFalse(node0.isSetterDef());
1544:       assertFalse(node0.isDefaultCase());
1545:       assertFalse(node0.isNew());
1546:       assertFalse(node0.isCase());
1547:       assertFalse(node0.hasMoreThanOneChild());
1548:       assertEquals((-1), node0.getCharno());
1549:       assertFalse(node0.isIn());
1550:       assertEquals((-1), node0.getLineno());
1551:       assertFalse(node0.isSwitch());
1552:       assertFalse(node0.isNE());
1553:       assertFalse(node0.isIf());
1554:       assertFalse(node0.isStringKey());
1555:       assertFalse(node0.isFor());
1556:       assertFalse(node0.isThis());
1557:       assertFalse(node0.isNumber());
1558:       assertFalse(node0.isGetterDef());
1559:       assertFalse(node0.isHook());
1560:       assertFalse(node0.isBlock());
1561:       assertFalse(node0.hasOneChild());
1562:       assertFalse(node0.isTry());
1563:       assertTrue(node0.isString());
1564:       assertTrue(node1.isThrow());
1565:       assertFalse(node1.isSetterDef());
1566:       assertFalse(node1.isNull());
1567:       assertFalse(node1.isParamList());
1568:       assertFalse(node1.isCall());
1569:       assertFalse(node1.isStringKey());
1570:       assertFalse(node1.isCatch());
1571:       assertFalse(node1.isName());
1572:       assertFalse(node1.isRegExp());
1573:       assertFalse(node1.isWhile());
1574:       assertFalse(node1.isBlock());
1575:       assertFalse(node1.isDebugger());
1576:       assertFalse(node1.isTry());
1577:       assertFalse(node1.isNE());
1578:       assertEquals(49, node1.getType());
1579:       assertFalse(node1.isIf());
1580:       assertFalse(node1.isFor());
1581:       assertEquals((-1), node1.getSourcePosition());
1582:       assertEquals(1, node1.getChildCount());
1583:       assertFalse(node1.isCast());
1584:       assertFalse(node1.hasMoreThanOneChild());
1585:       assertFalse(node1.isContinue());
1586:       assertTrue(node1.hasChildren());
1587:       assertEquals((-1), node1.getLineno());
1588:       assertFalse(node1.isFunction());
1589:       assertFalse(node1.isInc());
1590:       assertFalse(node1.isIn());
1591:       assertFalse(node1.isThis());
1592:       assertFalse(node1.isFalse());
1593:       assertFalse(node1.isComma());
1594:       assertFalse(node1.isAnd());
1595:       assertFalse(node1.isInstanceOf());
1596:       assertFalse(node1.isBreak());
1597:       assertFalse(node1.isSwitch());
1598:       assertFalse(node1.isScript());
1599:       assertFalse(node1.isExprResult());
1600:       assertFalse(node1.isString());
1601:       assertFalse(node1.isNot());
1602:       assertFalse(node1.isWith());
1603:       assertEquals((-1), node1.getCharno());
1604:       assertFalse(node1.isObjectLit());
1605:       assertFalse(node1.isHook());
1606:       assertFalse(node1.isGetProp());
1607:       assertFalse(node1.isCase());
1608:       assertFalse(node1.isNumber());
1609:       assertFalse(node1.isTypeOf());
1610:       assertFalse(node1.isLabel());
1611:       assertFalse(node1.isOr());
1612:       assertFalse(node1.isAssign());
1613:       assertTrue(node1.hasOneChild());
1614:       assertFalse(node1.isReturn());
1615:       assertFalse(node1.isGetterDef());
1616:       assertFalse(node1.isDec());
1617:       assertFalse(node1.isArrayLit());
1618:       assertFalse(node1.isLabelName());
1619:       assertFalse(node1.isGetElem());
1620:       assertFalse(node1.isDelProp());
1621:       assertFalse(node1.isVoid());
1622:       assertFalse(node1.isTrue());
1623:       assertFalse(node1.isDefaultCase());
1624:       assertFalse(node1.isVar());
1625:       assertFalse(node1.isEmpty());
1626:       assertFalse(node1.isDo());
1627:       assertFalse(node1.isAssignAdd());
1628:       assertFalse(node1.isAdd());
1629:       assertFalse(node1.isNew());
1630:       assertFalse(boolean2);
1631:       assertFalse(node0.equals((Object)node1));
1632:       assertFalse(node0.equals((Object)node2));
1633:       assertFalse(node1.equals((Object)node2));
1634:       assertFalse(node1.equals((Object)node0));
1635:       assertTrue(boolean2 == boolean1);
1636:       assertTrue(boolean2 == boolean0);
1637:       assertEquals(49, Node.DIRECT_EVAL);
1638:       assertEquals(12, Node.COLUMN_BITS);
1639:       assertEquals(30, Node.VAR_ARGS_NAME);
1640:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1641:       assertEquals(52, Node.LENGTH);
1642:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1643:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1644:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1645:       assertEquals(57, Node.LAST_PROP);
1646:       assertEquals(32, Node.INCRDECR_PROP);
1647:       assertEquals(1, Node.DECR_FLAG);
1648:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1649:       assertEquals(29, Node.JSDOC_INFO_PROP);
1650:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1651:       assertEquals(56, Node.CHANGE_TIME);
1652:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1653:       assertEquals(8, Node.FLAG_NO_THROWS);
1654:       assertEquals(57, Node.REFLECTED_OBJECT);
1655:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1656:       assertEquals(37, Node.OPT_ARG_NAME);
1657:       assertEquals(48, Node.DIRECTIVES);
1658:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1659:       assertEquals(55, Node.INFERRED_FUNCTION);
1660:       assertEquals(43, Node.IS_CONSTANT_NAME);
1661:       assertEquals(36, Node.QUOTED_PROP);
1662:       assertEquals(4095, Node.COLUMN_MASK);
1663:       assertEquals(53, Node.INPUT_ID);
1664:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1665:       assertEquals(39, Node.EMPTY_BLOCK);
1666:       assertEquals(50, Node.FREE_CALL);
1667:       assertEquals(40, Node.ORIGINALNAME_PROP);
1668:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1669:       assertEquals(2, Node.POST_FLAG);
1670:       assertEquals(47, Node.IS_DISPATCHER);
1671:       assertEquals(46, Node.IS_NAMESPACE);
1672:       assertEquals(54, Node.SLASH_V);
1673:       assertEquals(56, Node.CHANGE_TIME);
1674:       assertEquals(2, Node.POST_FLAG);
1675:       assertEquals(47, Node.IS_DISPATCHER);
1676:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1677:       assertEquals(12, Node.COLUMN_BITS);
1678:       assertEquals(32, Node.INCRDECR_PROP);
1679:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1680:       assertEquals(1, Node.DECR_FLAG);
1681:       assertEquals(53, Node.INPUT_ID);
1682:       assertEquals(29, Node.JSDOC_INFO_PROP);
1683:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1684:       assertEquals(43, Node.IS_CONSTANT_NAME);
1685:       assertEquals(57, Node.LAST_PROP);
1686:       assertEquals(30, Node.VAR_ARGS_NAME);
1687:       assertEquals(54, Node.SLASH_V);
1688:       assertEquals(46, Node.IS_NAMESPACE);
1689:       assertEquals(40, Node.ORIGINALNAME_PROP);
1690:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1691:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1692:       assertEquals(8, Node.FLAG_NO_THROWS);
1693:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1694:       assertEquals(50, Node.FREE_CALL);
1695:       assertEquals(55, Node.INFERRED_FUNCTION);
1696:       assertEquals(52, Node.LENGTH);
1697:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1698:       assertEquals(39, Node.EMPTY_BLOCK);
1699:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1700:       assertEquals(36, Node.QUOTED_PROP);
1701:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1702:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1703:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1704:       assertEquals(57, Node.REFLECTED_OBJECT);
1705:       assertEquals(4095, Node.COLUMN_MASK);
1706:       assertEquals(48, Node.DIRECTIVES);
1707:       assertEquals(49, Node.DIRECT_EVAL);
1708:       assertEquals(37, Node.OPT_ARG_NAME);
1709:       
1710:       int int0 = node2.getSourceOffset();
1711:       assertNotSame(node2, node0);
1712:       assertFalse(node2.isExprResult());
1713:       assertFalse(node2.isNot());
1714:       assertFalse(node2.isScript());
1715:       assertFalse(node2.hasOneChild());
1716:       assertFalse(node2.isLabel());
1717:       assertFalse(node2.isGetProp());
1718:       assertFalse(node2.isAssignAdd());
1719:       assertEquals((-1), node2.getSourcePosition());
1720:       assertFalse(node2.isNumber());
1721:       assertEquals(51, node2.getType());
1722:       assertFalse(node2.isObjectLit());
1723:       assertFalse(node2.isLabelName());
1724:       assertFalse(node2.isFalse());
1725:       assertFalse(node2.isAnd());
1726:       assertFalse(node2.isContinue());
1727:       assertFalse(node2.isCast());
1728:       assertFalse(node2.isAdd());
1729:       assertFalse(node2.isVar());
1730:       assertFalse(node2.isWhile());
1731:       assertFalse(node2.isString());
1732:       assertTrue(node2.isIn());
1733:       assertFalse(node2.isDo());
1734:       assertFalse(node2.isNew());
1735:       assertFalse(node2.isReturn());
1736:       assertFalse(node2.isNull());
1737:       assertFalse(node2.isTypeOf());
1738:       assertFalse(node2.hasChildren());
1739:       assertFalse(node2.isOr());
1740:       assertFalse(node2.isAssign());
1741:       assertFalse(node2.isDec());
1742:       assertFalse(node2.isComma());
1743:       assertFalse(node2.isName());
1744:       assertFalse(node2.isGetElem());
1745:       assertFalse(node2.isCall());
1746:       assertFalse(node2.isDelProp());
1747:       assertFalse(node2.isBreak());
1748:       assertFalse(node2.isVoid());
1749:       assertFalse(node2.isTry());
1750:       assertFalse(node2.isTrue());
1751:       assertFalse(node2.isRegExp());
1752:       assertFalse(node2.isFunction());
1753:       assertFalse(node2.isDebugger());
1754:       assertFalse(node2.isEmpty());
1755:       assertFalse(node2.isFor());
1756:       assertFalse(node2.isDefaultCase());
1757:       assertFalse(node2.isParamList());
1758:       assertFalse(node2.isGetterDef());
1759:       assertEquals(0, node2.getChildCount());
1760:       assertFalse(node2.isStringKey());
1761:       assertFalse(node2.isArrayLit());
1762:       assertFalse(node2.isSwitch());
1763:       assertFalse(node2.isBlock());
1764:       assertFalse(node2.isHook());
1765:       assertEquals((-1), node2.getCharno());
1766:       assertFalse(node2.isCase());
1767:       assertFalse(node2.isThrow());
1768:       assertFalse(node2.isSetterDef());
1769:       assertFalse(node2.isInc());
1770:       assertFalse(node2.isNE());
1771:       assertFalse(node2.isInstanceOf());
1772:       assertFalse(node2.isThis());
1773:       assertFalse(node2.hasMoreThanOneChild());
1774:       assertFalse(node2.isWith());
1775:       assertFalse(node2.isCatch());
1776:       assertFalse(node2.isIf());
1777:       assertEquals((-1), node2.getLineno());
1778:       assertEquals((-1), int0);
1779:       assertFalse(node2.equals((Object)node0));
1780:       assertFalse(node2.equals((Object)node1));
1781:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1782:       assertEquals(54, Node.SLASH_V);
1783:       assertEquals(52, Node.LENGTH);
1784:       assertEquals(57, Node.REFLECTED_OBJECT);
1785:       assertEquals(30, Node.VAR_ARGS_NAME);
1786:       assertEquals(40, Node.ORIGINALNAME_PROP);
1787:       assertEquals(49, Node.DIRECT_EVAL);
1788:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1789:       assertEquals(48, Node.DIRECTIVES);
1790:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1791:       assertEquals(8, Node.FLAG_NO_THROWS);
1792:       assertEquals(56, Node.CHANGE_TIME);
1793:       assertEquals(47, Node.IS_DISPATCHER);
1794:       assertEquals(2, Node.POST_FLAG);
1795:       assertEquals(29, Node.JSDOC_INFO_PROP);
1796:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1797:       
1798:       boolean boolean3 = node2.isEquivalentTo(node1, false, false, true);
1799:       assertNotSame(node0, node2);
1800:       assertNotSame(node2, node0);
1801:       assertFalse(node0.isWith());
1802:       assertFalse(node0.isScript());
1803:       assertFalse(node0.isNot());
1804:       assertFalse(node0.isObjectLit());
1805:       assertFalse(node0.isInstanceOf());
1806:       assertFalse(node0.isExprResult());
1807:       assertFalse(node0.isAnd());
1808:       assertFalse(node0.isLabelName());
1809:       assertFalse(node0.isThrow());
1810:       assertFalse(node0.isCast());
1811:       assertFalse(node0.isFalse());
1812:       assertFalse(node0.isAssignAdd());
1813:       assertFalse(node0.isLabel());
1814:       assertFalse(node0.isInc());
1815:       assertFalse(node0.isDo());
1816:       assertFalse(node0.isWhile());
1817:       assertFalse(node0.isContinue());
1818:       assertFalse(node0.isOr());
1819:       assertFalse(node0.isDelProp());
1820:       assertFalse(node0.isName());
1821:       assertFalse(node0.isAssign());
1822:       assertFalse(node0.isBreak());
1823:       assertFalse(node0.hasChildren());
1824:       assertFalse(node0.isGetElem());
1825:       assertFalse(node0.isCall());
1826:       assertFalse(node0.isComma());
1827:       assertEquals((-1), node0.getSourcePosition());
1828:       assertFalse(node0.isDec());
1829:       assertFalse(node0.isTypeOf());
1830:       assertFalse(node0.isReturn());
1831:       assertFalse(node0.isGetProp());
1832:       assertEquals(40, node0.getType());
1833:       assertFalse(node0.isFunction());
1834:       assertFalse(node0.isCatch());
1835:       assertFalse(node0.isDebugger());
1836:       assertEquals(0, node0.getChildCount());
1837:       assertFalse(node0.isRegExp());
1838:       assertFalse(node0.isTrue());
1839:       assertFalse(node0.isParamList());
1840:       assertFalse(node0.isArrayLit());
1841:       assertFalse(node0.isVoid());
1842:       assertFalse(node0.isEmpty());
1843:       assertFalse(node0.isNull());
1844:       assertFalse(node0.isVar());
1845:       assertFalse(node0.isAdd());
1846:       assertFalse(node0.isSetterDef());
1847:       assertFalse(node0.isDefaultCase());
1848:       assertFalse(node0.isNew());
1849:       assertFalse(node0.isCase());
1850:       assertFalse(node0.hasMoreThanOneChild());
1851:       assertEquals((-1), node0.getCharno());
1852:       assertFalse(node0.isIn());
1853:       assertEquals((-1), node0.getLineno());
1854:       assertFalse(node0.isSwitch());
1855:       assertFalse(node0.isNE());
1856:       assertFalse(node0.isIf());
1857:       assertFalse(node0.isStringKey());
1858:       assertFalse(node0.isFor());
1859:       assertFalse(node0.isThis());
1860:       assertFalse(node0.isNumber());
1861:       assertFalse(node0.isGetterDef());
1862:       assertFalse(node0.isHook());
1863:       assertFalse(node0.isBlock());
1864:       assertFalse(node0.hasOneChild());
1865:       assertFalse(node0.isTry());
1866:       assertTrue(node0.isString());
1867:       assertTrue(node1.isThrow());
1868:       assertFalse(node1.isSetterDef());
1869:       assertFalse(node1.isNull());
1870:       assertFalse(node1.isParamList());
1871:       assertFalse(node1.isCall());
1872:       assertFalse(node1.isStringKey());
1873:       assertFalse(node1.isCatch());
1874:       assertFalse(node1.isName());
1875:       assertFalse(node1.isRegExp());
1876:       assertFalse(node1.isWhile());
1877:       assertFalse(node1.isBlock());
1878:       assertFalse(node1.isDebugger());
1879:       assertFalse(node1.isTry());
1880:       assertFalse(node1.isNE());
1881:       assertEquals(49, node1.getType());
1882:       assertFalse(node1.isIf());
1883:       assertFalse(node1.isFor());
1884:       assertEquals((-1), node1.getSourcePosition());
1885:       assertEquals(1, node1.getChildCount());
1886:       assertFalse(node1.isCast());
1887:       assertFalse(node1.hasMoreThanOneChild());
1888:       assertFalse(node1.isContinue());
1889:       assertTrue(node1.hasChildren());
1890:       assertEquals((-1), node1.getLineno());
1891:       assertFalse(node1.isFunction());
1892:       assertFalse(node1.isInc());
1893:       assertFalse(node1.isIn());
1894:       assertFalse(node1.isThis());
1895:       assertFalse(node1.isFalse());
1896:       assertFalse(node1.isComma());
1897:       assertFalse(node1.isAnd());
1898:       assertFalse(node1.isInstanceOf());
1899:       assertFalse(node1.isBreak());
1900:       assertFalse(node1.isSwitch());
1901:       assertFalse(node1.isScript());
1902:       assertFalse(node1.isExprResult());
1903:       assertFalse(node1.isString());
1904:       assertFalse(node1.isNot());
1905:       assertFalse(node1.isWith());
1906:       assertEquals((-1), node1.getCharno());
1907:       assertFalse(node1.isObjectLit());
1908:       assertFalse(node1.isHook());
1909:       assertFalse(node1.isGetProp());
1910:       assertFalse(node1.isCase());
1911:       assertFalse(node1.isNumber());
1912:       assertFalse(node1.isTypeOf());
1913:       assertFalse(node1.isLabel());
1914:       assertFalse(node1.isOr());
1915:       assertFalse(node1.isAssign());
1916:       assertTrue(node1.hasOneChild());
1917:       assertFalse(node1.isReturn());
1918:       assertFalse(node1.isGetterDef());
1919:       assertFalse(node1.isDec());
1920:       assertFalse(node1.isArrayLit());
1921:       assertFalse(node1.isLabelName());
1922:       assertFalse(node1.isGetElem());
1923:       assertFalse(node1.isDelProp());
1924:       assertFalse(node1.isVoid());
1925:       assertFalse(node1.isTrue());
1926:       assertFalse(node1.isDefaultCase());
1927:       assertFalse(node1.isVar());
1928:       assertFalse(node1.isEmpty());
1929:       assertFalse(node1.isDo());
1930:       assertFalse(node1.isAssignAdd());
1931:       assertFalse(node1.isAdd());
1932:       assertFalse(node1.isNew());
1933:       assertFalse(node2.isExprResult());
1934:       assertFalse(node2.isNot());
1935:       assertFalse(node2.isScript());
1936:       assertFalse(node2.hasOneChild());
1937:       assertFalse(node2.isLabel());
1938:       assertFalse(node2.isGetProp());
1939:       assertFalse(node2.isAssignAdd());
1940:       assertEquals((-1), node2.getSourcePosition());
1941:       assertFalse(node2.isNumber());
1942:       assertEquals(51, node2.getType());
1943:       assertFalse(node2.isObjectLit());
1944:       assertFalse(node2.isLabelName());
1945:       assertFalse(node2.isFalse());
1946:       assertFalse(node2.isAnd());
1947:       assertFalse(node2.isContinue());
1948:       assertFalse(node2.isCast());
1949:       assertFalse(node2.isAdd());
1950:       assertFalse(node2.isVar());
1951:       assertFalse(node2.isWhile());
1952:       assertFalse(node2.isString());
1953:       assertTrue(node2.isIn());
1954:       assertFalse(node2.isDo());
1955:       assertFalse(node2.isNew());
1956:       assertFalse(node2.isReturn());
1957:       assertFalse(node2.isNull());
1958:       assertFalse(node2.isTypeOf());
1959:       assertFalse(node2.hasChildren());
1960:       assertFalse(node2.isOr());
1961:       assertFalse(node2.isAssign());
1962:       assertFalse(node2.isDec());
1963:       assertFalse(node2.isComma());
1964:       assertFalse(node2.isName());
1965:       assertFalse(node2.isGetElem());
1966:       assertFalse(node2.isCall());
1967:       assertFalse(node2.isDelProp());
1968:       assertFalse(node2.isBreak());
1969:       assertFalse(node2.isVoid());
1970:       assertFalse(node2.isTry());
1971:       assertFalse(node2.isTrue());
1972:       assertFalse(node2.isRegExp());
1973:       assertFalse(node2.isFunction());
1974:       assertFalse(node2.isDebugger());
1975:       assertFalse(node2.isEmpty());
1976:       assertFalse(node2.isFor());
1977:       assertFalse(node2.isDefaultCase());
1978:       assertFalse(node2.isParamList());
1979:       assertFalse(node2.isGetterDef());
1980:       assertEquals(0, node2.getChildCount());
1981:       assertFalse(node2.isStringKey());
1982:       assertFalse(node2.isArrayLit());
1983:       assertFalse(node2.isSwitch());
1984:       assertFalse(node2.isBlock());
1985:       assertFalse(node2.isHook());
1986:       assertEquals((-1), node2.getCharno());
1987:       assertFalse(node2.isCase());
1988:       assertFalse(node2.isThrow());
1989:       assertFalse(node2.isSetterDef());
1990:       assertFalse(node2.isInc());
1991:       assertFalse(node2.isNE());
1992:       assertFalse(node2.isInstanceOf());
1993:       assertFalse(node2.isThis());
1994:       assertFalse(node2.hasMoreThanOneChild());
1995:       assertFalse(node2.isWith());
1996:       assertFalse(node2.isCatch());
1997:       assertFalse(node2.isIf());
1998:       assertEquals((-1), node2.getLineno());
1999:       assertFalse(boolean3);
2000:       assertFalse(node0.equals((Object)node1));
2001:       assertFalse(node0.equals((Object)node2));
2002:       assertFalse(node1.equals((Object)node2));
2003:       assertFalse(node1.equals((Object)node0));
2004:       assertFalse(node2.equals((Object)node0));
2005:       assertFalse(node2.equals((Object)node1));
2006:       assertTrue(boolean3 == boolean0);
2007:       assertTrue(boolean3 == boolean2);
2008:       assertTrue(boolean3 == boolean1);
2009:       
2010:       int int1 = Node.FLAG_LOCAL_RESULTS;
2011:       assertEquals(16, int1);
2012:       assertFalse(int1 == int0);
2013:       
2014:       boolean boolean4 = node0.isObjectLit();
2015:       assertNotSame(node0, node2);
2016:       assertFalse(node0.isWith());
2017:       assertFalse(node0.isScript());
2018:       assertFalse(node0.isNot());
2019:       assertFalse(node0.isObjectLit());
2020:       assertFalse(node0.isInstanceOf());
2021:       assertFalse(node0.isExprResult());
2022:       assertFalse(node0.isAnd());
2023:       assertFalse(node0.isLabelName());
2024:       assertFalse(node0.isThrow());
2025:       assertFalse(node0.isCast());
2026:       assertFalse(node0.isFalse());
2027:       assertFalse(node0.isAssignAdd());
2028:       assertFalse(node0.isLabel());
2029:       assertFalse(node0.isInc());
2030:       assertFalse(node0.isDo());
2031:       assertFalse(node0.isWhile());
2032:       assertFalse(node0.isContinue());
2033:       assertFalse(node0.isOr());
2034:       assertFalse(node0.isDelProp());
2035:       assertFalse(node0.isName());
2036:       assertFalse(node0.isAssign());
2037:       assertFalse(node0.isBreak());
2038:       assertFalse(node0.hasChildren());
2039:       assertFalse(node0.isGetElem());
2040:       assertFalse(node0.isCall());
2041:       assertFalse(node0.isComma());
2042:       assertEquals((-1), node0.getSourcePosition());
2043:       assertFalse(node0.isDec());
2044:       assertFalse(node0.isTypeOf());
2045:       assertFalse(node0.isReturn());
2046:       assertFalse(node0.isGetProp());
2047:       assertEquals(40, node0.getType());
2048:       assertFalse(node0.isFunction());
2049:       assertFalse(node0.isCatch());
2050:       assertFalse(node0.isDebugger());
2051:       assertEquals(0, node0.getChildCount());
2052:       assertFalse(node0.isRegExp());
2053:       assertFalse(node0.isTrue());
2054:       assertFalse(node0.isParamList());
2055:       assertFalse(node0.isArrayLit());
2056:       assertFalse(node0.isVoid());
2057:       assertFalse(node0.isEmpty());
2058:       assertFalse(node0.isNull());
2059:       assertFalse(node0.isVar());
2060:       assertFalse(node0.isAdd());
2061:       assertFalse(node0.isSetterDef());
2062:       assertFalse(node0.isDefaultCase());
2063:       assertFalse(node0.isNew());
2064:       assertFalse(node0.isCase());
2065:       assertFalse(node0.hasMoreThanOneChild());
2066:       assertEquals((-1), node0.getCharno());
2067:       assertFalse(node0.isIn());
2068:       assertEquals((-1), node0.getLineno());
2069:       assertFalse(node0.isSwitch());
2070:       assertFalse(node0.isNE());
2071:       assertFalse(node0.isIf());
2072:       assertFalse(node0.isStringKey());
2073:       assertFalse(node0.isFor());
2074:       assertFalse(node0.isThis());
2075:       assertFalse(node0.isNumber());
2076:       assertFalse(node0.isGetterDef());
2077:       assertFalse(node0.isHook());
2078:       assertFalse(node0.isBlock());
2079:       assertFalse(node0.hasOneChild());
2080:       assertFalse(node0.isTry());
2081:       assertTrue(node0.isString());
2082:       assertFalse(boolean4);
2083:       assertFalse(node0.equals((Object)node1));
2084:       assertFalse(node0.equals((Object)node2));
2085:       assertTrue(boolean4 == boolean2);
2086:       assertTrue(boolean4 == boolean0);
2087:       assertTrue(boolean4 == boolean1);
2088:       assertTrue(boolean4 == boolean3);
2089:       
2090:       boolean boolean5 = node2.isObjectLit();
2091:       assertNotSame(node2, node0);
2092:       assertFalse(node2.isExprResult());
2093:       assertFalse(node2.isNot());
2094:       assertFalse(node2.isScript());
2095:       assertFalse(node2.hasOneChild());
2096:       assertFalse(node2.isLabel());
2097:       assertFalse(node2.isGetProp());
2098:       assertFalse(node2.isAssignAdd());
2099:       assertEquals((-1), node2.getSourcePosition());
2100:       assertFalse(node2.isNumber());
2101:       assertEquals(51, node2.getType());
2102:       assertFalse(node2.isObjectLit());
2103:       assertFalse(node2.isLabelName());
2104:       assertFalse(node2.isFalse());
2105:       assertFalse(node2.isAnd());
2106:       assertFalse(node2.isContinue());
2107:       assertFalse(node2.isCast());
2108:       assertFalse(node2.isAdd());
2109:       assertFalse(node2.isVar());
2110:       assertFalse(node2.isWhile());
2111:       assertFalse(node2.isString());
2112:       assertTrue(node2.isIn());
2113:       assertFalse(node2.isDo());
2114:       assertFalse(node2.isNew());
2115:       assertFalse(node2.isReturn());
2116:       assertFalse(node2.isNull());
2117:       assertFalse(node2.isTypeOf());
2118:       assertFalse(node2.hasChildren());
2119:       assertFalse(node2.isOr());
2120:       assertFalse(node2.isAssign());
2121:       assertFalse(node2.isDec());
2122:       assertFalse(node2.isComma());
2123:       assertFalse(node2.isName());
2124:       assertFalse(node2.isGetElem());
2125:       assertFalse(node2.isCall());
2126:       assertFalse(node2.isDelProp());
2127:       assertFalse(node2.isBreak());
2128:       assertFalse(node2.isVoid());
2129:       assertFalse(node2.isTry());
2130:       assertFalse(node2.isTrue());
2131:       assertFalse(node2.isRegExp());
2132:       assertFalse(node2.isFunction());
2133:       assertFalse(node2.isDebugger());
2134:       assertFalse(node2.isEmpty());
2135:       assertFalse(node2.isFor());
2136:       assertFalse(node2.isDefaultCase());
2137:       assertFalse(node2.isParamList());
2138:       assertFalse(node2.isGetterDef());
2139:       assertEquals(0, node2.getChildCount());
2140:       assertFalse(node2.isStringKey());
2141:       assertFalse(node2.isArrayLit());
2142:       assertFalse(node2.isSwitch());
2143:       assertFalse(node2.isBlock());
2144:       assertFalse(node2.isHook());
2145:       assertEquals((-1), node2.getCharno());
2146:       assertFalse(node2.isCase());
2147:       assertFalse(node2.isThrow());
2148:       assertFalse(node2.isSetterDef());
2149:       assertFalse(node2.isInc());
2150:       assertFalse(node2.isNE());
2151:       assertFalse(node2.isInstanceOf());
2152:       assertFalse(node2.isThis());
2153:       assertFalse(node2.hasMoreThanOneChild());
2154:       assertFalse(node2.isWith());
2155:       assertFalse(node2.isCatch());
2156:       assertFalse(node2.isIf());
2157:       assertEquals((-1), node2.getLineno());
2158:       assertFalse(boolean5);
2159:       assertTrue(boolean5 == boolean3);
2160:       assertTrue(boolean5 == boolean1);
2161:       assertTrue(boolean5 == boolean2);
2162:       assertTrue(boolean5 == boolean0);
2163:       assertTrue(boolean5 == boolean4);
2164:       assertFalse(node2.equals((Object)node0));
2165:       assertFalse(node2.equals((Object)node1));
2166:       
2167:       boolean boolean6 = node1.isLabel();
2168:       assertNotSame(node0, node2);
2169:       assertFalse(node0.isWith());
2170:       assertFalse(node0.isScript());
2171:       assertFalse(node0.isNot());
2172:       assertFalse(node0.isObjectLit());
2173:       assertFalse(node0.isInstanceOf());
2174:       assertFalse(node0.isExprResult());
2175:       assertFalse(node0.isAnd());
2176:       assertFalse(node0.isLabelName());
2177:       assertFalse(node0.isThrow());
2178:       assertFalse(node0.isCast());
2179:       assertFalse(node0.isFalse());
2180:       assertFalse(node0.isAssignAdd());
2181:       assertFalse(node0.isLabel());
2182:       assertFalse(node0.isInc());
2183:       assertFalse(node0.isDo());
2184:       assertFalse(node0.isWhile());
2185:       assertFalse(node0.isContinue());
2186:       assertFalse(node0.isOr());
2187:       assertFalse(node0.isDelProp());
2188:       assertFalse(node0.isName());
2189:       assertFalse(node0.isAssign());
2190:       assertFalse(node0.isBreak());
2191:       assertFalse(node0.hasChildren());
2192:       assertFalse(node0.isGetElem());
2193:       assertFalse(node0.isCall());
2194:       assertFalse(node0.isComma());
2195:       assertEquals((-1), node0.getSourcePosition());
2196:       assertFalse(node0.isDec());
2197:       assertFalse(node0.isTypeOf());
2198:       assertFalse(node0.isReturn());
2199:       assertFalse(node0.isGetProp());
2200:       assertEquals(40, node0.getType());
2201:       assertFalse(node0.isFunction());
2202:       assertFalse(node0.isCatch());
2203:       assertFalse(node0.isDebugger());
2204:       assertEquals(0, node0.getChildCount());
2205:       assertFalse(node0.isRegExp());
2206:       assertFalse(node0.isTrue());
2207:       assertFalse(node0.isParamList());
2208:       assertFalse(node0.isArrayLit());
2209:       assertFalse(node0.isVoid());
2210:       assertFalse(node0.isEmpty());
2211:       assertFalse(node0.isNull());
2212:       assertFalse(node0.isVar());
2213:       assertFalse(node0.isAdd());
2214:       assertFalse(node0.isSetterDef());
2215:       assertFalse(node0.isDefaultCase());
2216:       assertFalse(node0.isNew());
2217:       assertFalse(node0.isCase());
2218:       assertFalse(node0.hasMoreThanOneChild());
2219:       assertEquals((-1), node0.getCharno());
2220:       assertFalse(node0.isIn());
2221:       assertEquals((-1), node0.getLineno());
2222:       assertFalse(node0.isSwitch());
2223:       assertFalse(node0.isNE());
2224:       assertFalse(node0.isIf());
2225:       assertFalse(node0.isStringKey());
2226:       assertFalse(node0.isFor());
2227:       assertFalse(node0.isThis());
2228:       assertFalse(node0.isNumber());
2229:       assertFalse(node0.isGetterDef());
2230:       assertFalse(node0.isHook());
2231:       assertFalse(node0.isBlock());
2232:       assertFalse(node0.hasOneChild());
2233:       assertFalse(node0.isTry());
2234:       assertTrue(node0.isString());
2235:       assertTrue(node1.isThrow());
2236:       assertFalse(node1.isSetterDef());
2237:       assertFalse(node1.isNull());
2238:       assertFalse(node1.isParamList());
2239:       assertFalse(node1.isCall());
2240:       assertFalse(node1.isStringKey());
2241:       assertFalse(node1.isCatch());
2242:       assertFalse(node1.isName());
2243:       assertFalse(node1.isRegExp());
2244:       assertFalse(node1.isWhile());
2245:       assertFalse(node1.isBlock());
2246:       assertFalse(node1.isDebugger());
2247:       assertFalse(node1.isTry());
2248:       assertFalse(node1.isNE());
2249:       assertEquals(49, node1.getType());
2250:       assertFalse(node1.isIf());
2251:       assertFalse(node1.isFor());
2252:       assertEquals((-1), node1.getSourcePosition());
2253:       assertEquals(1, node1.getChildCount());
2254:       assertFalse(node1.isCast());
2255:       assertFalse(node1.hasMoreThanOneChild());
2256:       assertFalse(node1.isContinue());
2257:       assertTrue(node1.hasChildren());
2258:       assertEquals((-1), node1.getLineno());
2259:       assertFalse(node1.isFunction());
2260:       assertFalse(node1.isInc());
2261:       assertFalse(node1.isIn());
2262:       assertFalse(node1.isThis());
2263:       assertFalse(node1.isFalse());
2264:       assertFalse(node1.isComma());
2265:       assertFalse(node1.isAnd());
2266:       assertFalse(node1.isInstanceOf());
2267:       assertFalse(node1.isBreak());
2268:       assertFalse(node1.isSwitch());
2269:       assertFalse(node1.isScript());
2270:       assertFalse(node1.isExprResult());
2271:       assertFalse(node1.isString());
2272:       assertFalse(node1.isNot());
2273:       assertFalse(node1.isWith());
2274:       assertEquals((-1), node1.getCharno());
2275:       assertFalse(node1.isObjectLit());
2276:       assertFalse(node1.isHook());
2277:       assertFalse(node1.isGetProp());
2278:       assertFalse(node1.isCase());
2279:       assertFalse(node1.isNumber());
2280:       assertFalse(node1.isTypeOf());
2281:       assertFalse(node1.isLabel());
2282:       assertFalse(node1.isOr());
2283:       assertFalse(node1.isAssign());
2284:       assertTrue(node1.hasOneChild());
2285:       assertFalse(node1.isReturn());
2286:       assertFalse(node1.isGetterDef());
2287:       assertFalse(node1.isDec());
2288:       assertFalse(node1.isArrayLit());
2289:       assertFalse(node1.isLabelName());
2290:       assertFalse(node1.isGetElem());
2291:       assertFalse(node1.isDelProp());
2292:       assertFalse(node1.isVoid());
2293:       assertFalse(node1.isTrue());
2294:       assertFalse(node1.isDefaultCase());
2295:       assertFalse(node1.isVar());
2296:       assertFalse(node1.isEmpty());
2297:       assertFalse(node1.isDo());
2298:       assertFalse(node1.isAssignAdd());
2299:       assertFalse(node1.isAdd());
2300:       assertFalse(node1.isNew());
2301:       assertFalse(boolean6);
2302:       assertFalse(node0.equals((Object)node1));
2303:       assertFalse(node0.equals((Object)node2));
2304:       assertTrue(boolean6 == boolean2);
2305:       assertTrue(boolean6 == boolean1);
2306:       assertTrue(boolean6 == boolean3);
2307:       assertTrue(boolean6 == boolean0);
2308:       assertTrue(boolean6 == boolean5);
2309:       assertTrue(boolean6 == boolean4);
2310:       assertFalse(node1.equals((Object)node2));
2311:       assertFalse(node1.equals((Object)node0));
2312:       
2313:       boolean boolean7 = node2.isFor();
2314:       assertNotSame(node2, node0);
2315:       assertFalse(node2.isExprResult());
2316:       assertFalse(node2.isNot());
2317:       assertFalse(node2.isScript());
2318:       assertFalse(node2.hasOneChild());
2319:       assertFalse(node2.isLabel());
2320:       assertFalse(node2.isGetProp());
2321:       assertFalse(node2.isAssignAdd());
2322:       assertEquals((-1), node2.getSourcePosition());
2323:       assertFalse(node2.isNumber());
2324:       assertEquals(51, node2.getType());
2325:       assertFalse(node2.isObjectLit());
2326:       assertFalse(node2.isLabelName());
2327:       assertFalse(node2.isFalse());
2328:       assertFalse(node2.isAnd());
2329:       assertFalse(node2.isContinue());
2330:       assertFalse(node2.isCast());
2331:       assertFalse(node2.isAdd());
2332:       assertFalse(node2.isVar());
2333:       assertFalse(node2.isWhile());
2334:       assertFalse(node2.isString());
2335:       assertTrue(node2.isIn());
2336:       assertFalse(node2.isDo());
2337:       assertFalse(node2.isNew());
2338:       assertFalse(node2.isReturn());
2339:       assertFalse(node2.isNull());
2340:       assertFalse(node2.isTypeOf());
2341:       assertFalse(node2.hasChildren());
2342:       assertFalse(node2.isOr());
2343:       assertFalse(node2.isAssign());
2344:       assertFalse(node2.isDec());
2345:       assertFalse(node2.isComma());
2346:       assertFalse(node2.isName());
2347:       assertFalse(node2.isGetElem());
2348:       assertFalse(node2.isCall());
2349:       assertFalse(node2.isDelProp());
2350:       assertFalse(node2.isBreak());
2351:       assertFalse(node2.isVoid());
2352:       assertFalse(node2.isTry());
2353:       assertFalse(node2.isTrue());
2354:       assertFalse(node2.isRegExp());
2355:       assertFalse(node2.isFunction());
2356:       assertFalse(node2.isDebugger());
2357:       assertFalse(node2.isEmpty());
2358:       assertFalse(node2.isFor());
2359:       assertFalse(node2.isDefaultCase());
2360:       assertFalse(node2.isParamList());
2361:       assertFalse(node2.isGetterDef());
2362:       assertEquals(0, node2.getChildCount());
2363:       assertFalse(node2.isStringKey());
2364:       assertFalse(node2.isArrayLit());
2365:       assertFalse(node2.isSwitch());
2366:       assertFalse(node2.isBlock());
2367:       assertFalse(node2.isHook());
2368:       assertEquals((-1), node2.getCharno());
2369:       assertFalse(node2.isCase());
2370:       assertFalse(node2.isThrow());
2371:       assertFalse(node2.isSetterDef());
2372:       assertFalse(node2.isInc());
2373:       assertFalse(node2.isNE());
2374:       assertFalse(node2.isInstanceOf());
2375:       assertFalse(node2.isThis());
2376:       assertFalse(node2.hasMoreThanOneChild());
2377:       assertFalse(node2.isWith());
2378:       assertFalse(node2.isCatch());
2379:       assertFalse(node2.isIf());
2380:       assertEquals((-1), node2.getLineno());
2381:       assertFalse(boolean7);
2382:       assertTrue(boolean7 == boolean4);
2383:       assertTrue(boolean7 == boolean1);
2384:       assertTrue(boolean7 == boolean5);
2385:       assertTrue(boolean7 == boolean2);
2386:       assertTrue(boolean7 == boolean0);
2387:       assertTrue(boolean7 == boolean6);
2388:       assertTrue(boolean7 == boolean3);
2389:       assertFalse(node2.equals((Object)node0));
2390:       assertFalse(node2.equals((Object)node1));
2391:       
2392:       boolean boolean8 = node0.isEquivalentToShallow(node1);
2393:       assertNotSame(node0, node2);
2394:       assertFalse(node0.isWith());
2395:       assertFalse(node0.isScript());
2396:       assertFalse(node0.isNot());
2397:       assertFalse(node0.isObjectLit());
2398:       assertFalse(node0.isInstanceOf());
2399:       assertFalse(node0.isExprResult());
2400:       assertFalse(node0.isAnd());
2401:       assertFalse(node0.isLabelName());
2402:       assertFalse(node0.isThrow());
2403:       assertFalse(node0.isCast());
2404:       assertFalse(node0.isFalse());
2405:       assertFalse(node0.isAssignAdd());
2406:       assertFalse(node0.isLabel());
2407:       assertFalse(node0.isInc());
2408:       assertFalse(node0.isDo());
2409:       assertFalse(node0.isWhile());
2410:       assertFalse(node0.isContinue());
2411:       assertFalse(node0.isOr());
2412:       assertFalse(node0.isDelProp());
2413:       assertFalse(node0.isName());
2414:       assertFalse(node0.isAssign());
2415:       assertFalse(node0.isBreak());
2416:       assertFalse(node0.hasChildren());
2417:       assertFalse(node0.isGetElem());
2418:       assertFalse(node0.isCall());
2419:       assertFalse(node0.isComma());
2420:       assertEquals((-1), node0.getSourcePosition());
2421:       assertFalse(node0.isDec());
2422:       assertFalse(node0.isTypeOf());
2423:       assertFalse(node0.isReturn());
2424:       assertFalse(node0.isGetProp());
2425:       assertEquals(40, node0.getType());
2426:       assertFalse(node0.isFunction());
2427:       assertFalse(node0.isCatch());
2428:       assertFalse(node0.isDebugger());
2429:       assertEquals(0, node0.getChildCount());
2430:       assertFalse(node0.isRegExp());
2431:       assertFalse(node0.isTrue());
2432:       assertFalse(node0.isParamList());
2433:       assertFalse(node0.isArrayLit());
2434:       assertFalse(node0.isVoid());
2435:       assertFalse(node0.isEmpty());
2436:       assertFalse(node0.isNull());
2437:       assertFalse(node0.isVar());
2438:       assertFalse(node0.isAdd());
2439:       assertFalse(node0.isSetterDef());
2440:       assertFalse(node0.isDefaultCase());
2441:       assertFalse(node0.isNew());
2442:       assertFalse(node0.isCase());
2443:       assertFalse(node0.hasMoreThanOneChild());
2444:       assertEquals((-1), node0.getCharno());
2445:       assertFalse(node0.isIn());
2446:       assertEquals((-1), node0.getLineno());
2447:       assertFalse(node0.isSwitch());
2448:       assertFalse(node0.isNE());
2449:       assertFalse(node0.isIf());
2450:       assertFalse(node0.isStringKey());
2451:       assertFalse(node0.isFor());
2452:       assertFalse(node0.isThis());
2453:       assertFalse(node0.isNumber());
2454:       assertFalse(node0.isGetterDef());
2455:       assertFalse(node0.isHook());
2456:       assertFalse(node0.isBlock());
2457:       assertFalse(node0.hasOneChild());
2458:       assertFalse(node0.isTry());
2459:       assertTrue(node0.isString());
2460:       assertTrue(node1.isThrow());
2461:       assertFalse(node1.isSetterDef());
2462:       assertFalse(node1.isNull());
2463:       assertFalse(node1.isParamList());
2464:       assertFalse(node1.isCall());
2465:       assertFalse(node1.isStringKey());
2466:       assertFalse(node1.isCatch());
2467:       assertFalse(node1.isName());
2468:       assertFalse(node1.isRegExp());
2469:       assertFalse(node1.isWhile());
2470:       assertFalse(node1.isBlock());
2471:       assertFalse(node1.isDebugger());
2472:       assertFalse(node1.isTry());
2473:       assertFalse(node1.isNE());
2474:       assertEquals(49, node1.getType());
2475:       assertFalse(node1.isIf());
2476:       assertFalse(node1.isFor());
2477:       assertEquals((-1), node1.getSourcePosition());
2478:       assertEquals(1, node1.getChildCount());
2479:       assertFalse(node1.isCast());
2480:       assertFalse(node1.hasMoreThanOneChild());
2481:       assertFalse(node1.isContinue());
2482:       assertTrue(node1.hasChildren());
2483:       assertEquals((-1), node1.getLineno());
2484:       assertFalse(node1.isFunction());
2485:       assertFalse(node1.isInc());
2486:       assertFalse(node1.isIn());
2487:       assertFalse(node1.isThis());
2488:       assertFalse(node1.isFalse());
2489:       assertFalse(node1.isComma());
2490:       assertFalse(node1.isAnd());
2491:       assertFalse(node1.isInstanceOf());
2492:       assertFalse(node1.isBreak());
2493:       assertFalse(node1.isSwitch());
2494:       assertFalse(node1.isScript());
2495:       assertFalse(node1.isExprResult());
2496:       assertFalse(node1.isString());
2497:       assertFalse(node1.isNot());
2498:       assertFalse(node1.isWith());
2499:       assertEquals((-1), node1.getCharno());
2500:       assertFalse(node1.isObjectLit());
2501:       assertFalse(node1.isHook());
2502:       assertFalse(node1.isGetProp());
2503:       assertFalse(node1.isCase());
2504:       assertFalse(node1.isNumber());
2505:       assertFalse(node1.isTypeOf());
2506:       assertFalse(node1.isLabel());
2507:       assertFalse(node1.isOr());
2508:       assertFalse(node1.isAssign());
2509:       assertTrue(node1.hasOneChild());
2510:       assertFalse(node1.isReturn());
2511:       assertFalse(node1.isGetterDef());
2512:       assertFalse(node1.isDec());
2513:       assertFalse(node1.isArrayLit());
2514:       assertFalse(node1.isLabelName());
2515:       assertFalse(node1.isGetElem());
2516:       assertFalse(node1.isDelProp());
2517:       assertFalse(node1.isVoid());
2518:       assertFalse(node1.isTrue());
2519:       assertFalse(node1.isDefaultCase());
2520:       assertFalse(node1.isVar());
2521:       assertFalse(node1.isEmpty());
2522:       assertFalse(node1.isDo());
2523:       assertFalse(node1.isAssignAdd());
2524:       assertFalse(node1.isAdd());
2525:       assertFalse(node1.isNew());
2526:       assertFalse(boolean8);
2527:       assertFalse(node0.equals((Object)node1));
2528:       assertFalse(node0.equals((Object)node2));
2529:       assertTrue(boolean8 == boolean5);
2530:       assertTrue(boolean8 == boolean2);
2531:       assertTrue(boolean8 == boolean3);
2532:       assertTrue(boolean8 == boolean0);
2533:       assertTrue(boolean8 == boolean6);
2534:       assertTrue(boolean8 == boolean7);
2535:       assertTrue(boolean8 == boolean1);
2536:       assertTrue(boolean8 == boolean4);
2537:       assertFalse(node1.equals((Object)node2));
2538:       assertFalse(node1.equals((Object)node0));
2539:   }
2540: }
RegularFileObject[/tmp/EvoSuite_187_1629223232410/com/google/javascript/rhino/Node_187_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:00:32 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_187_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_187_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_187_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.common.base.Objects",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.common.collect.ImmutableSet",
337:       "com.google.common.collect.EmptyImmutableSet",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Platform",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.javascript.rhino.InputId",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.javascript.rhino.jstype.JSType$2",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.javascript.rhino.JSTypeExpression",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.common.collect.AbstractMultimap$Values",
360:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
361:       "com.google.common.collect.AbstractMapBasedMultimap$1",
362:       "com.google.common.collect.Multimaps$Entries",
363:       "com.google.common.collect.AbstractMultimap$Entries",
364:       "com.google.common.collect.AbstractMapBasedMultimap$2"
365:     );
366:   }
367: }

[MASTER] 18:00:32.975 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("Q#{!t ");
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertNotNull(node0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertNotNull(iterable0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

node0.setLength(122);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

String string0 = node0.toString();
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertNotNull(string0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

node0.setOptionalArg(false);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Node node1 = new Node(49, node0, node0);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertTrue(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertEquals(49, node1.getType());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals((-1), node1.getSourcePosition());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDec());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

boolean boolean0 = node1.isThis();
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertTrue(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertEquals(49, node1.getType());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals((-1), node1.getSourcePosition());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDec());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

Node node2 = Node.newString(51, "CGdy$k/:pbdplN#$K!{", (-425), 52);
assertNotSame(node2, node0);
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertEquals(51, node2.getType());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertTrue(node2.isIn());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node2.setCharno(39);
assertNotSame(node2, node0);
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertEquals(51, node2.getType());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertTrue(node2.isIn());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean1 = node0.isEquivalentToTyped(node1);
assertNotSame(node0, node2);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertTrue(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertEquals(49, node1.getType());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals((-1), node1.getSourcePosition());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDec());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(boolean1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

node2.setSourceFileForTesting((String) null);
assertNotSame(node2, node0);
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertEquals(51, node2.getType());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertTrue(node2.isIn());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean2 = node1.isStringKey();
assertNotSame(node0, node2);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertTrue(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertEquals(49, node1.getType());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals((-1), node1.getSourcePosition());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDec());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(boolean2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

int int0 = node2.getSourceOffset();
assertNotSame(node2, node0);
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertEquals(51, node2.getType());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertTrue(node2.isIn());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertEquals((-1), int0);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);

boolean boolean3 = node2.isEquivalentTo(node1, false, false, true);
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertTrue(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertEquals(49, node1.getType());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals((-1), node1.getSourcePosition());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDec());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertEquals(51, node2.getType());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertTrue(node2.isIn());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(boolean3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);

int int1 = Node.FLAG_LOCAL_RESULTS;
assertEquals(16, int1);
assertFalse(int1 == int0);

boolean boolean4 = node0.isObjectLit();
assertNotSame(node0, node2);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertFalse(boolean4);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);

boolean boolean5 = node2.isObjectLit();
assertNotSame(node2, node0);
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertEquals(51, node2.getType());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertTrue(node2.isIn());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(boolean5);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean4);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean6 = node1.isLabel();
assertNotSame(node0, node2);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertTrue(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertEquals(49, node1.getType());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals((-1), node1.getSourcePosition());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDec());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(boolean6);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean4);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));

boolean boolean7 = node2.isFor();
assertNotSame(node2, node0);
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isAssignAdd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertEquals(51, node2.getType());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertTrue(node2.isIn());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isReturn());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isDebugger());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isParamList());
assertFalse(node2.isGetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isNE());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isIf());
assertEquals((-1), node2.getLineno());
assertFalse(boolean7);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean3);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean8 = node0.isEquivalentToShallow(node1);
assertNotSame(node0, node2);
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isInc());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isCatch());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertTrue(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isCatch());
assertFalse(node1.isName());
assertFalse(node1.isRegExp());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isNE());
assertEquals(49, node1.getType());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertEquals((-1), node1.getSourcePosition());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isObjectLit());
assertFalse(node1.isHook());
assertFalse(node1.isGetProp());
assertFalse(node1.isCase());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDec());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(boolean8);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean8 == boolean5);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean6);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean4);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));


[MASTER] 18:00:34.050 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_192_1629223233653/com/google/javascript/rhino/Node_192_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_192_1629223233653/com/google/javascript/rhino/Node_192_tmp__ESTest_scaffolding.java]]
[MASTER] 18:00:34.050 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:34.051 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:34.052 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 334
[MASTER] 18:00:34.052 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 547
[MASTER] 18:00:34.053 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_192_1629223233653/com/google/javascript/rhino/Node_192_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:00:33 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_192_tmp__ESTest extends Node_192_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("/ZLKF`]n.6`K@F_b0n4");
21:       assertFalse(node0.isBreak());
22:       assertFalse(node0.isThis());
23:       assertFalse(node0.isGetProp());
24:       assertFalse(node0.isThrow());
25:       assertEquals((-1), node0.getCharno());
26:       assertFalse(node0.isNot());
27:       assertFalse(node0.isObjectLit());
28:       assertFalse(node0.isScript());
29:       assertFalse(node0.isExprResult());
30:       assertFalse(node0.isCase());
31:       assertFalse(node0.isHook());
32:       assertFalse(node0.isInstanceOf());
33:       assertFalse(node0.isWith());
34:       assertFalse(node0.isAssign());
35:       assertFalse(node0.isComma());
36:       assertFalse(node0.isIf());
37:       assertFalse(node0.isDec());
38:       assertFalse(node0.hasChildren());
39:       assertEquals((-1), node0.getSourcePosition());
40:       assertFalse(node0.isNE());
41:       assertFalse(node0.isIn());
42:       assertFalse(node0.isDebugger());
43:       assertFalse(node0.isInc());
44:       assertEquals(40, node0.getType());
45:       assertFalse(node0.isAnd());
46:       assertFalse(node0.isCast());
47:       assertFalse(node0.isFalse());
48:       assertFalse(node0.isContinue());
49:       assertFalse(node0.isFunction());
50:       assertFalse(node0.isSetterDef());
51:       assertFalse(node0.isNull());
52:       assertFalse(node0.isStringKey());
53:       assertFalse(node0.isParamList());
54:       assertFalse(node0.isName());
55:       assertFalse(node0.isAdd());
56:       assertFalse(node0.isWhile());
57:       assertFalse(node0.isTrue());
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isTry());
60:       assertTrue(node0.isString());
61:       assertEquals((-1), node0.getLineno());
62:       assertFalse(node0.isCatch());
63:       assertFalse(node0.isBlock());
64:       assertFalse(node0.isReturn());
65:       assertFalse(node0.isCall());
66:       assertFalse(node0.hasMoreThanOneChild());
67:       assertFalse(node0.isRegExp());
68:       assertFalse(node0.isTypeOf());
69:       assertFalse(node0.isNumber());
70:       assertFalse(node0.isEmpty());
71:       assertFalse(node0.isFor());
72:       assertFalse(node0.isGetElem());
73:       assertFalse(node0.isLabelName());
74:       assertFalse(node0.isAssignAdd());
75:       assertFalse(node0.isDelProp());
76:       assertFalse(node0.hasOneChild());
77:       assertFalse(node0.isOr());
78:       assertFalse(node0.isGetterDef());
79:       assertFalse(node0.isDefaultCase());
80:       assertFalse(node0.isNew());
81:       assertFalse(node0.isSwitch());
82:       assertFalse(node0.isDo());
83:       assertEquals(0, node0.getChildCount());
84:       assertFalse(node0.isArrayLit());
85:       assertFalse(node0.isVar());
86:       assertFalse(node0.isLabel());
87:       assertNotNull(node0);
88:       assertEquals(47, Node.IS_DISPATCHER);
89:       assertEquals(29, Node.JSDOC_INFO_PROP);
90:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
91:       assertEquals(56, Node.CHANGE_TIME);
92:       assertEquals(37, Node.OPT_ARG_NAME);
93:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
94:       assertEquals(32, Node.INCRDECR_PROP);
95:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
96:       assertEquals(12, Node.COLUMN_BITS);
97:       assertEquals(2, Node.POST_FLAG);
98:       assertEquals(30, Node.VAR_ARGS_NAME);
99:       assertEquals(43, Node.IS_CONSTANT_NAME);
100:       assertEquals(1, Node.DECR_FLAG);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(54, Node.SLASH_V);
103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
104:       assertEquals(50, Node.FREE_CALL);
105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
107:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
108:       assertEquals(40, Node.ORIGINALNAME_PROP);
109:       assertEquals(39, Node.EMPTY_BLOCK);
110:       assertEquals(48, Node.DIRECTIVES);
111:       assertEquals(4095, Node.COLUMN_MASK);
112:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
114:       assertEquals(57, Node.LAST_PROP);
115:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
117:       assertEquals(49, Node.DIRECT_EVAL);
118:       assertEquals(52, Node.LENGTH);
119:       assertEquals(53, Node.INPUT_ID);
120:       assertEquals(57, Node.REFLECTED_OBJECT);
121:       assertEquals(55, Node.INFERRED_FUNCTION);
122:       assertEquals(8, Node.FLAG_NO_THROWS);
123:       assertEquals(36, Node.QUOTED_PROP);
124:       
125:       Node node1 = new Node(50, node0, node0);
126:       assertFalse(node0.isBreak());
127:       assertFalse(node0.isThis());
128:       assertFalse(node0.isGetProp());
129:       assertFalse(node0.isThrow());
130:       assertEquals((-1), node0.getCharno());
131:       assertFalse(node0.isNot());
132:       assertFalse(node0.isObjectLit());
133:       assertFalse(node0.isScript());
134:       assertFalse(node0.isExprResult());
135:       assertFalse(node0.isCase());
136:       assertFalse(node0.isHook());
137:       assertFalse(node0.isInstanceOf());
138:       assertFalse(node0.isWith());
139:       assertFalse(node0.isAssign());
140:       assertFalse(node0.isComma());
141:       assertFalse(node0.isIf());
142:       assertFalse(node0.isDec());
143:       assertFalse(node0.hasChildren());
144:       assertEquals((-1), node0.getSourcePosition());
145:       assertFalse(node0.isNE());
146:       assertFalse(node0.isIn());
147:       assertFalse(node0.isDebugger());
148:       assertFalse(node0.isInc());
149:       assertEquals(40, node0.getType());
150:       assertFalse(node0.isAnd());
151:       assertFalse(node0.isCast());
152:       assertFalse(node0.isFalse());
153:       assertFalse(node0.isContinue());
154:       assertFalse(node0.isFunction());
155:       assertFalse(node0.isSetterDef());
156:       assertFalse(node0.isNull());
157:       assertFalse(node0.isStringKey());
158:       assertFalse(node0.isParamList());
159:       assertFalse(node0.isName());
160:       assertFalse(node0.isAdd());
161:       assertFalse(node0.isWhile());
162:       assertFalse(node0.isTrue());
163:       assertFalse(node0.isVoid());
164:       assertFalse(node0.isTry());
165:       assertTrue(node0.isString());
166:       assertEquals((-1), node0.getLineno());
167:       assertFalse(node0.isCatch());
168:       assertFalse(node0.isBlock());
169:       assertFalse(node0.isReturn());
170:       assertFalse(node0.isCall());
171:       assertFalse(node0.hasMoreThanOneChild());
172:       assertFalse(node0.isRegExp());
173:       assertFalse(node0.isTypeOf());
174:       assertFalse(node0.isNumber());
175:       assertFalse(node0.isEmpty());
176:       assertFalse(node0.isFor());
177:       assertFalse(node0.isGetElem());
178:       assertFalse(node0.isLabelName());
179:       assertFalse(node0.isAssignAdd());
180:       assertFalse(node0.isDelProp());
181:       assertFalse(node0.hasOneChild());
182:       assertFalse(node0.isOr());
183:       assertFalse(node0.isGetterDef());
184:       assertFalse(node0.isDefaultCase());
185:       assertFalse(node0.isNew());
186:       assertFalse(node0.isSwitch());
187:       assertFalse(node0.isDo());
188:       assertEquals(0, node0.getChildCount());
189:       assertFalse(node0.isArrayLit());
190:       assertFalse(node0.isVar());
191:       assertFalse(node0.isLabel());
192:       assertFalse(node1.isThrow());
193:       assertFalse(node1.isFalse());
194:       assertFalse(node1.isBreak());
195:       assertEquals(50, node1.getType());
196:       assertFalse(node1.isGetProp());
197:       assertFalse(node1.isInc());
198:       assertFalse(node1.isThis());
199:       assertFalse(node1.isComma());
200:       assertFalse(node1.isHook());
201:       assertFalse(node1.isIn());
202:       assertFalse(node1.isInstanceOf());
203:       assertFalse(node1.isWith());
204:       assertTrue(node1.hasChildren());
205:       assertFalse(node1.isExprResult());
206:       assertFalse(node1.isIf());
207:       assertFalse(node1.isDelProp());
208:       assertFalse(node1.isNE());
209:       assertFalse(node1.isEmpty());
210:       assertFalse(node1.isFor());
211:       assertFalse(node1.isLabelName());
212:       assertFalse(node1.isArrayLit());
213:       assertFalse(node1.isNumber());
214:       assertFalse(node1.isGetterDef());
215:       assertFalse(node1.isTry());
216:       assertEquals(1, node1.getChildCount());
217:       assertFalse(node1.isLabel());
218:       assertFalse(node1.isDefaultCase());
219:       assertFalse(node1.isAssignAdd());
220:       assertFalse(node1.isCase());
221:       assertFalse(node1.isScript());
222:       assertEquals((-1), node1.getCharno());
223:       assertFalse(node1.isSwitch());
224:       assertFalse(node1.isParamList());
225:       assertFalse(node1.isStringKey());
226:       assertFalse(node1.isName());
227:       assertFalse(node1.isCall());
228:       assertFalse(node1.isNew());
229:       assertFalse(node1.isBlock());
230:       assertFalse(node1.isAdd());
231:       assertFalse(node1.isSetterDef());
232:       assertFalse(node1.isVar());
233:       assertFalse(node1.isWhile());
234:       assertFalse(node1.isDo());
235:       assertFalse(node1.isRegExp());
236:       assertFalse(node1.hasMoreThanOneChild());
237:       assertFalse(node1.isCatch());
238:       assertFalse(node1.isTrue());
239:       assertFalse(node1.isVoid());
240:       assertEquals((-1), node1.getLineno());
241:       assertFalse(node1.isOr());
242:       assertFalse(node1.isNull());
243:       assertFalse(node1.isGetElem());
244:       assertTrue(node1.hasOneChild());
245:       assertFalse(node1.isAssign());
246:       assertFalse(node1.isDec());
247:       assertFalse(node1.isTypeOf());
248:       assertFalse(node1.isCast());
249:       assertFalse(node1.isReturn());
250:       assertFalse(node1.isNot());
251:       assertFalse(node1.isObjectLit());
252:       assertFalse(node1.isFunction());
253:       assertFalse(node1.isContinue());
254:       assertFalse(node1.isString());
255:       assertFalse(node1.isDebugger());
256:       assertEquals((-1), node1.getSourcePosition());
257:       assertFalse(node1.isAnd());
258:       assertNotNull(node1);
259:       assertFalse(node1.equals((Object)node0));
260:       assertEquals(47, Node.IS_DISPATCHER);
261:       assertEquals(29, Node.JSDOC_INFO_PROP);
262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
263:       assertEquals(56, Node.CHANGE_TIME);
264:       assertEquals(37, Node.OPT_ARG_NAME);
265:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
266:       assertEquals(32, Node.INCRDECR_PROP);
267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
268:       assertEquals(12, Node.COLUMN_BITS);
269:       assertEquals(2, Node.POST_FLAG);
270:       assertEquals(30, Node.VAR_ARGS_NAME);
271:       assertEquals(43, Node.IS_CONSTANT_NAME);
272:       assertEquals(1, Node.DECR_FLAG);
273:       assertEquals(46, Node.IS_NAMESPACE);
274:       assertEquals(54, Node.SLASH_V);
275:       assertEquals(51, Node.STATIC_SOURCE_FILE);
276:       assertEquals(50, Node.FREE_CALL);
277:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
278:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
279:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
280:       assertEquals(40, Node.ORIGINALNAME_PROP);
281:       assertEquals(39, Node.EMPTY_BLOCK);
282:       assertEquals(48, Node.DIRECTIVES);
283:       assertEquals(4095, Node.COLUMN_MASK);
284:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
285:       assertEquals(15, Node.NO_SIDE_EFFECTS);
286:       assertEquals(57, Node.LAST_PROP);
287:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
288:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
289:       assertEquals(49, Node.DIRECT_EVAL);
290:       assertEquals(52, Node.LENGTH);
291:       assertEquals(53, Node.INPUT_ID);
292:       assertEquals(57, Node.REFLECTED_OBJECT);
293:       assertEquals(55, Node.INFERRED_FUNCTION);
294:       assertEquals(8, Node.FLAG_NO_THROWS);
295:       assertEquals(36, Node.QUOTED_PROP);
296:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
297:       assertEquals(29, Node.JSDOC_INFO_PROP);
298:       assertEquals(2, Node.POST_FLAG);
299:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
300:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
301:       assertEquals(37, Node.OPT_ARG_NAME);
302:       assertEquals(36, Node.QUOTED_PROP);
303:       assertEquals(46, Node.IS_NAMESPACE);
304:       assertEquals(43, Node.IS_CONSTANT_NAME);
305:       assertEquals(56, Node.CHANGE_TIME);
306:       assertEquals(1, Node.DECR_FLAG);
307:       assertEquals(12, Node.COLUMN_BITS);
308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
309:       assertEquals(4095, Node.COLUMN_MASK);
310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
312:       assertEquals(32, Node.INCRDECR_PROP);
313:       assertEquals(40, Node.ORIGINALNAME_PROP);
314:       assertEquals(57, Node.REFLECTED_OBJECT);
315:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
316:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
317:       assertEquals(50, Node.FREE_CALL);
318:       assertEquals(52, Node.LENGTH);
319:       assertEquals(8, Node.FLAG_NO_THROWS);
320:       assertEquals(54, Node.SLASH_V);
321:       assertEquals(48, Node.DIRECTIVES);
322:       assertEquals(49, Node.DIRECT_EVAL);
323:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
324:       assertEquals(55, Node.INFERRED_FUNCTION);
325:       assertEquals(30, Node.VAR_ARGS_NAME);
326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
327:       assertEquals(53, Node.INPUT_ID);
328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
329:       assertEquals(39, Node.EMPTY_BLOCK);
330:       assertEquals(47, Node.IS_DISPATCHER);
331:       assertEquals(57, Node.LAST_PROP);
332:       
333:       Iterable<Node> iterable0 = node0.children();
334:       assertFalse(iterable0.contains(node1));
335:       assertFalse(node0.isBreak());
336:       assertFalse(node0.isThis());
337:       assertFalse(node0.isGetProp());
338:       assertFalse(node0.isThrow());
339:       assertEquals((-1), node0.getCharno());
340:       assertFalse(node0.isNot());
341:       assertFalse(node0.isObjectLit());
342:       assertFalse(node0.isScript());
343:       assertFalse(node0.isExprResult());
344:       assertFalse(node0.isCase());
345:       assertFalse(node0.isHook());
346:       assertFalse(node0.isInstanceOf());
347:       assertFalse(node0.isWith());
348:       assertFalse(node0.isAssign());
349:       assertFalse(node0.isComma());
350:       assertFalse(node0.isIf());
351:       assertFalse(node0.isDec());
352:       assertFalse(node0.hasChildren());
353:       assertEquals((-1), node0.getSourcePosition());
354:       assertFalse(node0.isNE());
355:       assertFalse(node0.isIn());
356:       assertFalse(node0.isDebugger());
357:       assertFalse(node0.isInc());
358:       assertEquals(40, node0.getType());
359:       assertFalse(node0.isAnd());
360:       assertFalse(node0.isCast());
361:       assertFalse(node0.isFalse());
362:       assertFalse(node0.isContinue());
363:       assertFalse(node0.isFunction());
364:       assertFalse(node0.isSetterDef());
365:       assertFalse(node0.isNull());
366:       assertFalse(node0.isStringKey());
367:       assertFalse(node0.isParamList());
368:       assertFalse(node0.isName());
369:       assertFalse(node0.isAdd());
370:       assertFalse(node0.isWhile());
371:       assertFalse(node0.isTrue());
372:       assertFalse(node0.isVoid());
373:       assertFalse(node0.isTry());
374:       assertTrue(node0.isString());
375:       assertEquals((-1), node0.getLineno());
376:       assertFalse(node0.isCatch());
377:       assertFalse(node0.isBlock());
378:       assertFalse(node0.isReturn());
379:       assertFalse(node0.isCall());
380:       assertFalse(node0.hasMoreThanOneChild());
381:       assertFalse(node0.isRegExp());
382:       assertFalse(node0.isTypeOf());
383:       assertFalse(node0.isNumber());
384:       assertFalse(node0.isEmpty());
385:       assertFalse(node0.isFor());
386:       assertFalse(node0.isGetElem());
387:       assertFalse(node0.isLabelName());
388:       assertFalse(node0.isAssignAdd());
389:       assertFalse(node0.isDelProp());
390:       assertFalse(node0.hasOneChild());
391:       assertFalse(node0.isOr());
392:       assertFalse(node0.isGetterDef());
393:       assertFalse(node0.isDefaultCase());
394:       assertFalse(node0.isNew());
395:       assertFalse(node0.isSwitch());
396:       assertFalse(node0.isDo());
397:       assertEquals(0, node0.getChildCount());
398:       assertFalse(node0.isArrayLit());
399:       assertFalse(node0.isVar());
400:       assertFalse(node0.isLabel());
401:       assertNotNull(iterable0);
402:       assertFalse(node0.equals((Object)node1));
403:       assertEquals(47, Node.IS_DISPATCHER);
404:       assertEquals(29, Node.JSDOC_INFO_PROP);
405:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
406:       assertEquals(56, Node.CHANGE_TIME);
407:       assertEquals(37, Node.OPT_ARG_NAME);
408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
409:       assertEquals(32, Node.INCRDECR_PROP);
410:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
411:       assertEquals(12, Node.COLUMN_BITS);
412:       assertEquals(2, Node.POST_FLAG);
413:       assertEquals(30, Node.VAR_ARGS_NAME);
414:       assertEquals(43, Node.IS_CONSTANT_NAME);
415:       assertEquals(1, Node.DECR_FLAG);
416:       assertEquals(46, Node.IS_NAMESPACE);
417:       assertEquals(54, Node.SLASH_V);
418:       assertEquals(51, Node.STATIC_SOURCE_FILE);
419:       assertEquals(50, Node.FREE_CALL);
420:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
421:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
423:       assertEquals(40, Node.ORIGINALNAME_PROP);
424:       assertEquals(39, Node.EMPTY_BLOCK);
425:       assertEquals(48, Node.DIRECTIVES);
426:       assertEquals(4095, Node.COLUMN_MASK);
427:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
428:       assertEquals(15, Node.NO_SIDE_EFFECTS);
429:       assertEquals(57, Node.LAST_PROP);
430:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
432:       assertEquals(49, Node.DIRECT_EVAL);
433:       assertEquals(52, Node.LENGTH);
434:       assertEquals(53, Node.INPUT_ID);
435:       assertEquals(57, Node.REFLECTED_OBJECT);
436:       assertEquals(55, Node.INFERRED_FUNCTION);
437:       assertEquals(8, Node.FLAG_NO_THROWS);
438:       assertEquals(36, Node.QUOTED_PROP);
439:       
440:       node0.setLength(122);
441:       assertFalse(node0.isBreak());
442:       assertFalse(node0.isThis());
443:       assertFalse(node0.isGetProp());
444:       assertFalse(node0.isThrow());
445:       assertEquals((-1), node0.getCharno());
446:       assertFalse(node0.isNot());
447:       assertFalse(node0.isObjectLit());
448:       assertFalse(node0.isScript());
449:       assertFalse(node0.isExprResult());
450:       assertFalse(node0.isCase());
451:       assertFalse(node0.isHook());
452:       assertFalse(node0.isInstanceOf());
453:       assertFalse(node0.isWith());
454:       assertFalse(node0.isAssign());
455:       assertFalse(node0.isComma());
456:       assertFalse(node0.isIf());
457:       assertFalse(node0.isDec());
458:       assertFalse(node0.hasChildren());
459:       assertEquals((-1), node0.getSourcePosition());
460:       assertFalse(node0.isNE());
461:       assertFalse(node0.isIn());
462:       assertFalse(node0.isDebugger());
463:       assertFalse(node0.isInc());
464:       assertEquals(40, node0.getType());
465:       assertFalse(node0.isAnd());
466:       assertFalse(node0.isCast());
467:       assertFalse(node0.isFalse());
468:       assertFalse(node0.isContinue());
469:       assertFalse(node0.isFunction());
470:       assertFalse(node0.isSetterDef());
471:       assertFalse(node0.isNull());
472:       assertFalse(node0.isStringKey());
473:       assertFalse(node0.isParamList());
474:       assertFalse(node0.isName());
475:       assertFalse(node0.isAdd());
476:       assertFalse(node0.isWhile());
477:       assertFalse(node0.isTrue());
478:       assertFalse(node0.isVoid());
479:       assertFalse(node0.isTry());
480:       assertTrue(node0.isString());
481:       assertEquals((-1), node0.getLineno());
482:       assertFalse(node0.isCatch());
483:       assertFalse(node0.isBlock());
484:       assertFalse(node0.isReturn());
485:       assertFalse(node0.isCall());
486:       assertFalse(node0.hasMoreThanOneChild());
487:       assertFalse(node0.isRegExp());
488:       assertFalse(node0.isTypeOf());
489:       assertFalse(node0.isNumber());
490:       assertFalse(node0.isEmpty());
491:       assertFalse(node0.isFor());
492:       assertFalse(node0.isGetElem());
493:       assertFalse(node0.isLabelName());
494:       assertFalse(node0.isAssignAdd());
495:       assertFalse(node0.isDelProp());
496:       assertFalse(node0.hasOneChild());
497:       assertFalse(node0.isOr());
498:       assertFalse(node0.isGetterDef());
499:       assertFalse(node0.isDefaultCase());
500:       assertFalse(node0.isNew());
501:       assertFalse(node0.isSwitch());
502:       assertFalse(node0.isDo());
503:       assertEquals(0, node0.getChildCount());
504:       assertFalse(node0.isArrayLit());
505:       assertFalse(node0.isVar());
506:       assertFalse(node0.isLabel());
507:       assertFalse(node0.equals((Object)node1));
508:       assertEquals(47, Node.IS_DISPATCHER);
509:       assertEquals(29, Node.JSDOC_INFO_PROP);
510:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
511:       assertEquals(56, Node.CHANGE_TIME);
512:       assertEquals(37, Node.OPT_ARG_NAME);
513:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
514:       assertEquals(32, Node.INCRDECR_PROP);
515:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
516:       assertEquals(12, Node.COLUMN_BITS);
517:       assertEquals(2, Node.POST_FLAG);
518:       assertEquals(30, Node.VAR_ARGS_NAME);
519:       assertEquals(43, Node.IS_CONSTANT_NAME);
520:       assertEquals(1, Node.DECR_FLAG);
521:       assertEquals(46, Node.IS_NAMESPACE);
522:       assertEquals(54, Node.SLASH_V);
523:       assertEquals(51, Node.STATIC_SOURCE_FILE);
524:       assertEquals(50, Node.FREE_CALL);
525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
526:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
527:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
528:       assertEquals(40, Node.ORIGINALNAME_PROP);
529:       assertEquals(39, Node.EMPTY_BLOCK);
530:       assertEquals(48, Node.DIRECTIVES);
531:       assertEquals(4095, Node.COLUMN_MASK);
532:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
533:       assertEquals(15, Node.NO_SIDE_EFFECTS);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
536:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
537:       assertEquals(49, Node.DIRECT_EVAL);
538:       assertEquals(52, Node.LENGTH);
539:       assertEquals(53, Node.INPUT_ID);
540:       assertEquals(57, Node.REFLECTED_OBJECT);
541:       assertEquals(55, Node.INFERRED_FUNCTION);
542:       assertEquals(8, Node.FLAG_NO_THROWS);
543:       assertEquals(36, Node.QUOTED_PROP);
544:       
545:       Iterable<Node> iterable1 = node0.children();
546:       assertSame(iterable1, iterable0);
547:       assertFalse(iterable1.contains(node1));
548:       assertFalse(node0.isBreak());
549:       assertFalse(node0.isThis());
550:       assertFalse(node0.isGetProp());
551:       assertFalse(node0.isThrow());
552:       assertEquals((-1), node0.getCharno());
553:       assertFalse(node0.isNot());
554:       assertFalse(node0.isObjectLit());
555:       assertFalse(node0.isScript());
556:       assertFalse(node0.isExprResult());
557:       assertFalse(node0.isCase());
558:       assertFalse(node0.isHook());
559:       assertFalse(node0.isInstanceOf());
560:       assertFalse(node0.isWith());
561:       assertFalse(node0.isAssign());
562:       assertFalse(node0.isComma());
563:       assertFalse(node0.isIf());
564:       assertFalse(node0.isDec());
565:       assertFalse(node0.hasChildren());
566:       assertEquals((-1), node0.getSourcePosition());
567:       assertFalse(node0.isNE());
568:       assertFalse(node0.isIn());
569:       assertFalse(node0.isDebugger());
570:       assertFalse(node0.isInc());
571:       assertEquals(40, node0.getType());
572:       assertFalse(node0.isAnd());
573:       assertFalse(node0.isCast());
574:       assertFalse(node0.isFalse());
575:       assertFalse(node0.isContinue());
576:       assertFalse(node0.isFunction());
577:       assertFalse(node0.isSetterDef());
578:       assertFalse(node0.isNull());
579:       assertFalse(node0.isStringKey());
580:       assertFalse(node0.isParamList());
581:       assertFalse(node0.isName());
582:       assertFalse(node0.isAdd());
583:       assertFalse(node0.isWhile());
584:       assertFalse(node0.isTrue());
585:       assertFalse(node0.isVoid());
586:       assertFalse(node0.isTry());
587:       assertTrue(node0.isString());
588:       assertEquals((-1), node0.getLineno());
589:       assertFalse(node0.isCatch());
590:       assertFalse(node0.isBlock());
591:       assertFalse(node0.isReturn());
592:       assertFalse(node0.isCall());
593:       assertFalse(node0.hasMoreThanOneChild());
594:       assertFalse(node0.isRegExp());
595:       assertFalse(node0.isTypeOf());
596:       assertFalse(node0.isNumber());
597:       assertFalse(node0.isEmpty());
598:       assertFalse(node0.isFor());
599:       assertFalse(node0.isGetElem());
600:       assertFalse(node0.isLabelName());
601:       assertFalse(node0.isAssignAdd());
602:       assertFalse(node0.isDelProp());
603:       assertFalse(node0.hasOneChild());
604:       assertFalse(node0.isOr());
605:       assertFalse(node0.isGetterDef());
606:       assertFalse(node0.isDefaultCase());
607:       assertFalse(node0.isNew());
608:       assertFalse(node0.isSwitch());
609:       assertFalse(node0.isDo());
610:       assertEquals(0, node0.getChildCount());
611:       assertFalse(node0.isArrayLit());
612:       assertFalse(node0.isVar());
613:       assertFalse(node0.isLabel());
614:       assertNotNull(iterable1);
615:       assertFalse(node0.equals((Object)node1));
616:       assertEquals(47, Node.IS_DISPATCHER);
617:       assertEquals(29, Node.JSDOC_INFO_PROP);
618:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
619:       assertEquals(56, Node.CHANGE_TIME);
620:       assertEquals(37, Node.OPT_ARG_NAME);
621:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
622:       assertEquals(32, Node.INCRDECR_PROP);
623:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
624:       assertEquals(12, Node.COLUMN_BITS);
625:       assertEquals(2, Node.POST_FLAG);
626:       assertEquals(30, Node.VAR_ARGS_NAME);
627:       assertEquals(43, Node.IS_CONSTANT_NAME);
628:       assertEquals(1, Node.DECR_FLAG);
629:       assertEquals(46, Node.IS_NAMESPACE);
630:       assertEquals(54, Node.SLASH_V);
631:       assertEquals(51, Node.STATIC_SOURCE_FILE);
632:       assertEquals(50, Node.FREE_CALL);
633:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
634:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
635:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
636:       assertEquals(40, Node.ORIGINALNAME_PROP);
637:       assertEquals(39, Node.EMPTY_BLOCK);
638:       assertEquals(48, Node.DIRECTIVES);
639:       assertEquals(4095, Node.COLUMN_MASK);
640:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
641:       assertEquals(15, Node.NO_SIDE_EFFECTS);
642:       assertEquals(57, Node.LAST_PROP);
643:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
644:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
645:       assertEquals(49, Node.DIRECT_EVAL);
646:       assertEquals(52, Node.LENGTH);
647:       assertEquals(53, Node.INPUT_ID);
648:       assertEquals(57, Node.REFLECTED_OBJECT);
649:       assertEquals(55, Node.INFERRED_FUNCTION);
650:       assertEquals(8, Node.FLAG_NO_THROWS);
651:       assertEquals(36, Node.QUOTED_PROP);
652:       
653:       node0.setLength(122);
654:       assertFalse(node0.isBreak());
655:       assertFalse(node0.isThis());
656:       assertFalse(node0.isGetProp());
657:       assertFalse(node0.isThrow());
658:       assertEquals((-1), node0.getCharno());
659:       assertFalse(node0.isNot());
660:       assertFalse(node0.isObjectLit());
661:       assertFalse(node0.isScript());
662:       assertFalse(node0.isExprResult());
663:       assertFalse(node0.isCase());
664:       assertFalse(node0.isHook());
665:       assertFalse(node0.isInstanceOf());
666:       assertFalse(node0.isWith());
667:       assertFalse(node0.isAssign());
668:       assertFalse(node0.isComma());
669:       assertFalse(node0.isIf());
670:       assertFalse(node0.isDec());
671:       assertFalse(node0.hasChildren());
672:       assertEquals((-1), node0.getSourcePosition());
673:       assertFalse(node0.isNE());
674:       assertFalse(node0.isIn());
675:       assertFalse(node0.isDebugger());
676:       assertFalse(node0.isInc());
677:       assertEquals(40, node0.getType());
678:       assertFalse(node0.isAnd());
679:       assertFalse(node0.isCast());
680:       assertFalse(node0.isFalse());
681:       assertFalse(node0.isContinue());
682:       assertFalse(node0.isFunction());
683:       assertFalse(node0.isSetterDef());
684:       assertFalse(node0.isNull());
685:       assertFalse(node0.isStringKey());
686:       assertFalse(node0.isParamList());
687:       assertFalse(node0.isName());
688:       assertFalse(node0.isAdd());
689:       assertFalse(node0.isWhile());
690:       assertFalse(node0.isTrue());
691:       assertFalse(node0.isVoid());
692:       assertFalse(node0.isTry());
693:       assertTrue(node0.isString());
694:       assertEquals((-1), node0.getLineno());
695:       assertFalse(node0.isCatch());
696:       assertFalse(node0.isBlock());
697:       assertFalse(node0.isReturn());
698:       assertFalse(node0.isCall());
699:       assertFalse(node0.hasMoreThanOneChild());
700:       assertFalse(node0.isRegExp());
701:       assertFalse(node0.isTypeOf());
702:       assertFalse(node0.isNumber());
703:       assertFalse(node0.isEmpty());
704:       assertFalse(node0.isFor());
705:       assertFalse(node0.isGetElem());
706:       assertFalse(node0.isLabelName());
707:       assertFalse(node0.isAssignAdd());
708:       assertFalse(node0.isDelProp());
709:       assertFalse(node0.hasOneChild());
710:       assertFalse(node0.isOr());
711:       assertFalse(node0.isGetterDef());
712:       assertFalse(node0.isDefaultCase());
713:       assertFalse(node0.isNew());
714:       assertFalse(node0.isSwitch());
715:       assertFalse(node0.isDo());
716:       assertEquals(0, node0.getChildCount());
717:       assertFalse(node0.isArrayLit());
718:       assertFalse(node0.isVar());
719:       assertFalse(node0.isLabel());
720:       assertFalse(node0.equals((Object)node1));
721:       assertEquals(47, Node.IS_DISPATCHER);
722:       assertEquals(29, Node.JSDOC_INFO_PROP);
723:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
724:       assertEquals(56, Node.CHANGE_TIME);
725:       assertEquals(37, Node.OPT_ARG_NAME);
726:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
727:       assertEquals(32, Node.INCRDECR_PROP);
728:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
729:       assertEquals(12, Node.COLUMN_BITS);
730:       assertEquals(2, Node.POST_FLAG);
731:       assertEquals(30, Node.VAR_ARGS_NAME);
732:       assertEquals(43, Node.IS_CONSTANT_NAME);
733:       assertEquals(1, Node.DECR_FLAG);
734:       assertEquals(46, Node.IS_NAMESPACE);
735:       assertEquals(54, Node.SLASH_V);
736:       assertEquals(51, Node.STATIC_SOURCE_FILE);
737:       assertEquals(50, Node.FREE_CALL);
738:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
739:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
740:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
741:       assertEquals(40, Node.ORIGINALNAME_PROP);
742:       assertEquals(39, Node.EMPTY_BLOCK);
743:       assertEquals(48, Node.DIRECTIVES);
744:       assertEquals(4095, Node.COLUMN_MASK);
745:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
746:       assertEquals(15, Node.NO_SIDE_EFFECTS);
747:       assertEquals(57, Node.LAST_PROP);
748:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
749:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
750:       assertEquals(49, Node.DIRECT_EVAL);
751:       assertEquals(52, Node.LENGTH);
752:       assertEquals(53, Node.INPUT_ID);
753:       assertEquals(57, Node.REFLECTED_OBJECT);
754:       assertEquals(55, Node.INFERRED_FUNCTION);
755:       assertEquals(8, Node.FLAG_NO_THROWS);
756:       assertEquals(36, Node.QUOTED_PROP);
757:       
758:       String string0 = node0.toString();
759:       assertFalse(node0.isBreak());
760:       assertFalse(node0.isThis());
761:       assertFalse(node0.isGetProp());
762:       assertFalse(node0.isThrow());
763:       assertEquals((-1), node0.getCharno());
764:       assertFalse(node0.isNot());
765:       assertFalse(node0.isObjectLit());
766:       assertFalse(node0.isScript());
767:       assertFalse(node0.isExprResult());
768:       assertFalse(node0.isCase());
769:       assertFalse(node0.isHook());
770:       assertFalse(node0.isInstanceOf());
771:       assertFalse(node0.isWith());
772:       assertFalse(node0.isAssign());
773:       assertFalse(node0.isComma());
774:       assertFalse(node0.isIf());
775:       assertFalse(node0.isDec());
776:       assertFalse(node0.hasChildren());
777:       assertEquals((-1), node0.getSourcePosition());
778:       assertFalse(node0.isNE());
779:       assertFalse(node0.isIn());
780:       assertFalse(node0.isDebugger());
781:       assertFalse(node0.isInc());
782:       assertEquals(40, node0.getType());
783:       assertFalse(node0.isAnd());
784:       assertFalse(node0.isCast());
785:       assertFalse(node0.isFalse());
786:       assertFalse(node0.isContinue());
787:       assertFalse(node0.isFunction());
788:       assertFalse(node0.isSetterDef());
789:       assertFalse(node0.isNull());
790:       assertFalse(node0.isStringKey());
791:       assertFalse(node0.isParamList());
792:       assertFalse(node0.isName());
793:       assertFalse(node0.isAdd());
794:       assertFalse(node0.isWhile());
795:       assertFalse(node0.isTrue());
796:       assertFalse(node0.isVoid());
797:       assertFalse(node0.isTry());
798:       assertTrue(node0.isString());
799:       assertEquals((-1), node0.getLineno());
800:       assertFalse(node0.isCatch());
801:       assertFalse(node0.isBlock());
802:       assertFalse(node0.isReturn());
803:       assertFalse(node0.isCall());
804:       assertFalse(node0.hasMoreThanOneChild());
805:       assertFalse(node0.isRegExp());
806:       assertFalse(node0.isTypeOf());
807:       assertFalse(node0.isNumber());
808:       assertFalse(node0.isEmpty());
809:       assertFalse(node0.isFor());
810:       assertFalse(node0.isGetElem());
811:       assertFalse(node0.isLabelName());
812:       assertFalse(node0.isAssignAdd());
813:       assertFalse(node0.isDelProp());
814:       assertFalse(node0.hasOneChild());
815:       assertFalse(node0.isOr());
816:       assertFalse(node0.isGetterDef());
817:       assertFalse(node0.isDefaultCase());
818:       assertFalse(node0.isNew());
819:       assertFalse(node0.isSwitch());
820:       assertFalse(node0.isDo());
821:       assertEquals(0, node0.getChildCount());
822:       assertFalse(node0.isArrayLit());
823:       assertFalse(node0.isVar());
824:       assertFalse(node0.isLabel());
825:       assertNotNull(string0);
826:       assertFalse(node0.equals((Object)node1));
827:       assertEquals(47, Node.IS_DISPATCHER);
828:       assertEquals(29, Node.JSDOC_INFO_PROP);
829:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
830:       assertEquals(56, Node.CHANGE_TIME);
831:       assertEquals(37, Node.OPT_ARG_NAME);
832:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
833:       assertEquals(32, Node.INCRDECR_PROP);
834:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
835:       assertEquals(12, Node.COLUMN_BITS);
836:       assertEquals(2, Node.POST_FLAG);
837:       assertEquals(30, Node.VAR_ARGS_NAME);
838:       assertEquals(43, Node.IS_CONSTANT_NAME);
839:       assertEquals(1, Node.DECR_FLAG);
840:       assertEquals(46, Node.IS_NAMESPACE);
841:       assertEquals(54, Node.SLASH_V);
842:       assertEquals(51, Node.STATIC_SOURCE_FILE);
843:       assertEquals(50, Node.FREE_CALL);
844:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
845:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
846:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
847:       assertEquals(40, Node.ORIGINALNAME_PROP);
848:       assertEquals(39, Node.EMPTY_BLOCK);
849:       assertEquals(48, Node.DIRECTIVES);
850:       assertEquals(4095, Node.COLUMN_MASK);
851:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
852:       assertEquals(15, Node.NO_SIDE_EFFECTS);
853:       assertEquals(57, Node.LAST_PROP);
854:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
855:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
856:       assertEquals(49, Node.DIRECT_EVAL);
857:       assertEquals(52, Node.LENGTH);
858:       assertEquals(53, Node.INPUT_ID);
859:       assertEquals(57, Node.REFLECTED_OBJECT);
860:       assertEquals(55, Node.INFERRED_FUNCTION);
861:       assertEquals(8, Node.FLAG_NO_THROWS);
862:       assertEquals(36, Node.QUOTED_PROP);
863:       
864:       Node node2 = new Node(38);
865:       assertFalse(node2.isThrow());
866:       assertFalse(node2.isFalse());
867:       assertFalse(node2.isHook());
868:       assertFalse(node2.isThis());
869:       assertFalse(node2.isComma());
870:       assertTrue(node2.isName());
871:       assertFalse(node2.isGetProp());
872:       assertFalse(node2.isInc());
873:       assertFalse(node2.isCase());
874:       assertFalse(node2.isWith());
875:       assertFalse(node2.isIn());
876:       assertFalse(node2.isExprResult());
877:       assertFalse(node2.isNE());
878:       assertFalse(node2.isIf());
879:       assertFalse(node2.isInstanceOf());
880:       assertFalse(node2.isDelProp());
881:       assertFalse(node2.isBreak());
882:       assertFalse(node2.isEmpty());
883:       assertFalse(node2.isFor());
884:       assertFalse(node2.isLabelName());
885:       assertFalse(node2.isNumber());
886:       assertFalse(node2.isGetterDef());
887:       assertFalse(node2.isTry());
888:       assertFalse(node2.isAssignAdd());
889:       assertFalse(node2.isDefaultCase());
890:       assertFalse(node2.hasOneChild());
891:       assertFalse(node2.isScript());
892:       assertEquals(0, node2.getChildCount());
893:       assertEquals((-1), node2.getCharno());
894:       assertEquals(38, node2.getType());
895:       assertFalse(node2.isLabel());
896:       assertFalse(node2.isSwitch());
897:       assertFalse(node2.isParamList());
898:       assertFalse(node2.isArrayLit());
899:       assertFalse(node2.isStringKey());
900:       assertFalse(node2.isCall());
901:       assertFalse(node2.isVar());
902:       assertFalse(node2.isNull());
903:       assertFalse(node2.isNew());
904:       assertFalse(node2.isBlock());
905:       assertFalse(node2.isAdd());
906:       assertFalse(node2.isSetterDef());
907:       assertFalse(node2.isDo());
908:       assertFalse(node2.hasMoreThanOneChild());
909:       assertFalse(node2.isCatch());
910:       assertFalse(node2.isWhile());
911:       assertFalse(node2.isRegExp());
912:       assertFalse(node2.isOr());
913:       assertFalse(node2.isReturn());
914:       assertFalse(node2.isTrue());
915:       assertFalse(node2.isVoid());
916:       assertEquals((-1), node2.getLineno());
917:       assertFalse(node2.isGetElem());
918:       assertFalse(node2.isCast());
919:       assertFalse(node2.isDec());
920:       assertFalse(node2.isTypeOf());
921:       assertFalse(node2.isAssign());
922:       assertEquals((-1), node2.getSourcePosition());
923:       assertFalse(node2.hasChildren());
924:       assertFalse(node2.isNot());
925:       assertFalse(node2.isObjectLit());
926:       assertFalse(node2.isAnd());
927:       assertFalse(node2.isContinue());
928:       assertFalse(node2.isString());
929:       assertFalse(node2.isDebugger());
930:       assertFalse(node2.isFunction());
931:       assertNotNull(node2);
932:       assertFalse(node2.equals((Object)node1));
933:       assertFalse(node2.equals((Object)node0));
934:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
935:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
936:       assertEquals(56, Node.CHANGE_TIME);
937:       assertEquals(47, Node.IS_DISPATCHER);
938:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
939:       assertEquals(37, Node.OPT_ARG_NAME);
940:       assertEquals(2, Node.POST_FLAG);
941:       assertEquals(1, Node.DECR_FLAG);
942:       assertEquals(4095, Node.COLUMN_MASK);
943:       assertEquals(46, Node.IS_NAMESPACE);
944:       assertEquals(43, Node.IS_CONSTANT_NAME);
945:       assertEquals(51, Node.STATIC_SOURCE_FILE);
946:       assertEquals(12, Node.COLUMN_BITS);
947:       assertEquals(32, Node.INCRDECR_PROP);
948:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
949:       assertEquals(40, Node.ORIGINALNAME_PROP);
950:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
951:       assertEquals(50, Node.FREE_CALL);
952:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
953:       assertEquals(57, Node.REFLECTED_OBJECT);
954:       assertEquals(54, Node.SLASH_V);
955:       assertEquals(48, Node.DIRECTIVES);
956:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
957:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
958:       assertEquals(55, Node.INFERRED_FUNCTION);
959:       assertEquals(49, Node.DIRECT_EVAL);
960:       assertEquals(30, Node.VAR_ARGS_NAME);
961:       assertEquals(36, Node.QUOTED_PROP);
962:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
963:       assertEquals(52, Node.LENGTH);
964:       assertEquals(8, Node.FLAG_NO_THROWS);
965:       assertEquals(57, Node.LAST_PROP);
966:       assertEquals(29, Node.JSDOC_INFO_PROP);
967:       assertEquals(53, Node.INPUT_ID);
968:       assertEquals(15, Node.NO_SIDE_EFFECTS);
969:       assertEquals(39, Node.EMPTY_BLOCK);
970:       
971:       boolean boolean0 = node2.isNew();
972:       assertNotSame(node2, node1);
973:       assertFalse(node2.isThrow());
974:       assertFalse(node2.isFalse());
975:       assertFalse(node2.isHook());
976:       assertFalse(node2.isThis());
977:       assertFalse(node2.isComma());
978:       assertTrue(node2.isName());
979:       assertFalse(node2.isGetProp());
980:       assertFalse(node2.isInc());
981:       assertFalse(node2.isCase());
982:       assertFalse(node2.isWith());
983:       assertFalse(node2.isIn());
984:       assertFalse(node2.isExprResult());
985:       assertFalse(node2.isNE());
986:       assertFalse(node2.isIf());
987:       assertFalse(node2.isInstanceOf());
988:       assertFalse(node2.isDelProp());
989:       assertFalse(node2.isBreak());
990:       assertFalse(node2.isEmpty());
991:       assertFalse(node2.isFor());
992:       assertFalse(node2.isLabelName());
993:       assertFalse(node2.isNumber());
994:       assertFalse(node2.isGetterDef());
995:       assertFalse(node2.isTry());
996:       assertFalse(node2.isAssignAdd());
997:       assertFalse(node2.isDefaultCase());
998:       assertFalse(node2.hasOneChild());
999:       assertFalse(node2.isScript());
1000:       assertEquals(0, node2.getChildCount());
1001:       assertEquals((-1), node2.getCharno());
1002:       assertEquals(38, node2.getType());
1003:       assertFalse(node2.isLabel());
1004:       assertFalse(node2.isSwitch());
1005:       assertFalse(node2.isParamList());
1006:       assertFalse(node2.isArrayLit());
1007:       assertFalse(node2.isStringKey());
1008:       assertFalse(node2.isCall());
1009:       assertFalse(node2.isVar());
1010:       assertFalse(node2.isNull());
1011:       assertFalse(node2.isNew());
1012:       assertFalse(node2.isBlock());
1013:       assertFalse(node2.isAdd());
1014:       assertFalse(node2.isSetterDef());
1015:       assertFalse(node2.isDo());
1016:       assertFalse(node2.hasMoreThanOneChild());
1017:       assertFalse(node2.isCatch());
1018:       assertFalse(node2.isWhile());
1019:       assertFalse(node2.isRegExp());
1020:       assertFalse(node2.isOr());
1021:       assertFalse(node2.isReturn());
1022:       assertFalse(node2.isTrue());
1023:       assertFalse(node2.isVoid());
1024:       assertEquals((-1), node2.getLineno());
1025:       assertFalse(node2.isGetElem());
1026:       assertFalse(node2.isCast());
1027:       assertFalse(node2.isDec());
1028:       assertFalse(node2.isTypeOf());
1029:       assertFalse(node2.isAssign());
1030:       assertEquals((-1), node2.getSourcePosition());
1031:       assertFalse(node2.hasChildren());
1032:       assertFalse(node2.isNot());
1033:       assertFalse(node2.isObjectLit());
1034:       assertFalse(node2.isAnd());
1035:       assertFalse(node2.isContinue());
1036:       assertFalse(node2.isString());
1037:       assertFalse(node2.isDebugger());
1038:       assertFalse(node2.isFunction());
1039:       assertFalse(boolean0);
1040:       assertFalse(node2.equals((Object)node1));
1041:       assertFalse(node2.equals((Object)node0));
1042:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1043:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1044:       assertEquals(56, Node.CHANGE_TIME);
1045:       assertEquals(47, Node.IS_DISPATCHER);
1046:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1047:       assertEquals(37, Node.OPT_ARG_NAME);
1048:       assertEquals(2, Node.POST_FLAG);
1049:       assertEquals(1, Node.DECR_FLAG);
1050:       assertEquals(4095, Node.COLUMN_MASK);
1051:       assertEquals(46, Node.IS_NAMESPACE);
1052:       assertEquals(43, Node.IS_CONSTANT_NAME);
1053:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1054:       assertEquals(12, Node.COLUMN_BITS);
1055:       assertEquals(32, Node.INCRDECR_PROP);
1056:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1057:       assertEquals(40, Node.ORIGINALNAME_PROP);
1058:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1059:       assertEquals(50, Node.FREE_CALL);
1060:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1061:       assertEquals(57, Node.REFLECTED_OBJECT);
1062:       assertEquals(54, Node.SLASH_V);
1063:       assertEquals(48, Node.DIRECTIVES);
1064:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1065:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1066:       assertEquals(55, Node.INFERRED_FUNCTION);
1067:       assertEquals(49, Node.DIRECT_EVAL);
1068:       assertEquals(30, Node.VAR_ARGS_NAME);
1069:       assertEquals(36, Node.QUOTED_PROP);
1070:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1071:       assertEquals(52, Node.LENGTH);
1072:       assertEquals(8, Node.FLAG_NO_THROWS);
1073:       assertEquals(57, Node.LAST_PROP);
1074:       assertEquals(29, Node.JSDOC_INFO_PROP);
1075:       assertEquals(53, Node.INPUT_ID);
1076:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1077:       assertEquals(39, Node.EMPTY_BLOCK);
1078:       
1079:       Node node3 = node2.useSourceInfoIfMissingFrom(node1);
1080:       assertNotSame(node1, node3);
1081:       assertNotSame(node1, node2);
1082:       assertNotSame(node2, node1);
1083:       assertSame(node2, node3);
1084:       assertNotSame(node3, node1);
1085:       assertSame(node3, node2);
1086:       assertFalse(node0.isBreak());
1087:       assertFalse(node0.isThis());
1088:       assertFalse(node0.isGetProp());
1089:       assertFalse(node0.isThrow());
1090:       assertEquals((-1), node0.getCharno());
1091:       assertFalse(node0.isNot());
1092:       assertFalse(node0.isObjectLit());
1093:       assertFalse(node0.isScript());
1094:       assertFalse(node0.isExprResult());
1095:       assertFalse(node0.isCase());
1096:       assertFalse(node0.isHook());
1097:       assertFalse(node0.isInstanceOf());
1098:       assertFalse(node0.isWith());
1099:       assertFalse(node0.isAssign());
1100:       assertFalse(node0.isComma());
1101:       assertFalse(node0.isIf());
1102:       assertFalse(node0.isDec());
1103:       assertFalse(node0.hasChildren());
1104:       assertEquals((-1), node0.getSourcePosition());
1105:       assertFalse(node0.isNE());
1106:       assertFalse(node0.isIn());
1107:       assertFalse(node0.isDebugger());
1108:       assertFalse(node0.isInc());
1109:       assertEquals(40, node0.getType());
1110:       assertFalse(node0.isAnd());
1111:       assertFalse(node0.isCast());
1112:       assertFalse(node0.isFalse());
1113:       assertFalse(node0.isContinue());
1114:       assertFalse(node0.isFunction());
1115:       assertFalse(node0.isSetterDef());
1116:       assertFalse(node0.isNull());
1117:       assertFalse(node0.isStringKey());
1118:       assertFalse(node0.isParamList());
1119:       assertFalse(node0.isName());
1120:       assertFalse(node0.isAdd());
1121:       assertFalse(node0.isWhile());
1122:       assertFalse(node0.isTrue());
1123:       assertFalse(node0.isVoid());
1124:       assertFalse(node0.isTry());
1125:       assertTrue(node0.isString());
1126:       assertEquals((-1), node0.getLineno());
1127:       assertFalse(node0.isCatch());
1128:       assertFalse(node0.isBlock());
1129:       assertFalse(node0.isReturn());
1130:       assertFalse(node0.isCall());
1131:       assertFalse(node0.hasMoreThanOneChild());
1132:       assertFalse(node0.isRegExp());
1133:       assertFalse(node0.isTypeOf());
1134:       assertFalse(node0.isNumber());
1135:       assertFalse(node0.isEmpty());
1136:       assertFalse(node0.isFor());
1137:       assertFalse(node0.isGetElem());
1138:       assertFalse(node0.isLabelName());
1139:       assertFalse(node0.isAssignAdd());
1140:       assertFalse(node0.isDelProp());
1141:       assertFalse(node0.hasOneChild());
1142:       assertFalse(node0.isOr());
1143:       assertFalse(node0.isGetterDef());
1144:       assertFalse(node0.isDefaultCase());
1145:       assertFalse(node0.isNew());
1146:       assertFalse(node0.isSwitch());
1147:       assertFalse(node0.isDo());
1148:       assertEquals(0, node0.getChildCount());
1149:       assertFalse(node0.isArrayLit());
1150:       assertFalse(node0.isVar());
1151:       assertFalse(node0.isLabel());
1152:       assertFalse(node1.isThrow());
1153:       assertFalse(node1.isFalse());
1154:       assertFalse(node1.isBreak());
1155:       assertEquals(50, node1.getType());
1156:       assertFalse(node1.isGetProp());
1157:       assertFalse(node1.isInc());
1158:       assertFalse(node1.isThis());
1159:       assertFalse(node1.isComma());
1160:       assertFalse(node1.isHook());
1161:       assertFalse(node1.isIn());
1162:       assertFalse(node1.isInstanceOf());
1163:       assertFalse(node1.isWith());
1164:       assertTrue(node1.hasChildren());
1165:       assertFalse(node1.isExprResult());
1166:       assertFalse(node1.isIf());
1167:       assertFalse(node1.isDelProp());
1168:       assertFalse(node1.isNE());
1169:       assertFalse(node1.isEmpty());
1170:       assertFalse(node1.isFor());
1171:       assertFalse(node1.isLabelName());
1172:       assertFalse(node1.isArrayLit());
1173:       assertFalse(node1.isNumber());
1174:       assertFalse(node1.isGetterDef());
1175:       assertFalse(node1.isTry());
1176:       assertEquals(1, node1.getChildCount());
1177:       assertFalse(node1.isLabel());
1178:       assertFalse(node1.isDefaultCase());
1179:       assertFalse(node1.isAssignAdd());
1180:       assertFalse(node1.isCase());
1181:       assertFalse(node1.isScript());
1182:       assertEquals((-1), node1.getCharno());
1183:       assertFalse(node1.isSwitch());
1184:       assertFalse(node1.isParamList());
1185:       assertFalse(node1.isStringKey());
1186:       assertFalse(node1.isName());
1187:       assertFalse(node1.isCall());
1188:       assertFalse(node1.isNew());
1189:       assertFalse(node1.isBlock());
1190:       assertFalse(node1.isAdd());
1191:       assertFalse(node1.isSetterDef());
1192:       assertFalse(node1.isVar());
1193:       assertFalse(node1.isWhile());
1194:       assertFalse(node1.isDo());
1195:       assertFalse(node1.isRegExp());
1196:       assertFalse(node1.hasMoreThanOneChild());
1197:       assertFalse(node1.isCatch());
1198:       assertFalse(node1.isTrue());
1199:       assertFalse(node1.isVoid());
1200:       assertEquals((-1), node1.getLineno());
1201:       assertFalse(node1.isOr());
1202:       assertFalse(node1.isNull());
1203:       assertFalse(node1.isGetElem());
1204:       assertTrue(node1.hasOneChild());
1205:       assertFalse(node1.isAssign());
1206:       assertFalse(node1.isDec());
1207:       assertFalse(node1.isTypeOf());
1208:       assertFalse(node1.isCast());
1209:       assertFalse(node1.isReturn());
1210:       assertFalse(node1.isNot());
1211:       assertFalse(node1.isObjectLit());
1212:       assertFalse(node1.isFunction());
1213:       assertFalse(node1.isContinue());
1214:       assertFalse(node1.isString());
1215:       assertFalse(node1.isDebugger());
1216:       assertEquals((-1), node1.getSourcePosition());
1217:       assertFalse(node1.isAnd());
1218:       assertFalse(node2.isThrow());
1219:       assertFalse(node2.isFalse());
1220:       assertFalse(node2.isHook());
1221:       assertFalse(node2.isThis());
1222:       assertFalse(node2.isComma());
1223:       assertTrue(node2.isName());
1224:       assertFalse(node2.isGetProp());
1225:       assertFalse(node2.isInc());
1226:       assertFalse(node2.isCase());
1227:       assertFalse(node2.isWith());
1228:       assertFalse(node2.isIn());
1229:       assertFalse(node2.isExprResult());
1230:       assertFalse(node2.isNE());
1231:       assertFalse(node2.isIf());
1232:       assertFalse(node2.isInstanceOf());
1233:       assertFalse(node2.isDelProp());
1234:       assertFalse(node2.isBreak());
1235:       assertFalse(node2.isEmpty());
1236:       assertFalse(node2.isFor());
1237:       assertFalse(node2.isLabelName());
1238:       assertFalse(node2.isNumber());
1239:       assertFalse(node2.isGetterDef());
1240:       assertFalse(node2.isTry());
1241:       assertFalse(node2.isAssignAdd());
1242:       assertFalse(node2.isDefaultCase());
1243:       assertFalse(node2.hasOneChild());
1244:       assertFalse(node2.isScript());
1245:       assertEquals(0, node2.getChildCount());
1246:       assertEquals((-1), node2.getCharno());
1247:       assertEquals(38, node2.getType());
1248:       assertFalse(node2.isLabel());
1249:       assertFalse(node2.isSwitch());
1250:       assertFalse(node2.isParamList());
1251:       assertFalse(node2.isArrayLit());
1252:       assertFalse(node2.isStringKey());
1253:       assertFalse(node2.isCall());
1254:       assertFalse(node2.isVar());
1255:       assertFalse(node2.isNull());
1256:       assertFalse(node2.isNew());
1257:       assertFalse(node2.isBlock());
1258:       assertFalse(node2.isAdd());
1259:       assertFalse(node2.isSetterDef());
1260:       assertFalse(node2.isDo());
1261:       assertFalse(node2.hasMoreThanOneChild());
1262:       assertFalse(node2.isCatch());
1263:       assertFalse(node2.isWhile());
1264:       assertFalse(node2.isRegExp());
1265:       assertFalse(node2.isOr());
1266:       assertFalse(node2.isReturn());
1267:       assertFalse(node2.isTrue());
1268:       assertFalse(node2.isVoid());
1269:       assertEquals((-1), node2.getLineno());
1270:       assertFalse(node2.isGetElem());
1271:       assertFalse(node2.isCast());
1272:       assertFalse(node2.isDec());
1273:       assertFalse(node2.isTypeOf());
1274:       assertFalse(node2.isAssign());
1275:       assertEquals((-1), node2.getSourcePosition());
1276:       assertFalse(node2.hasChildren());
1277:       assertFalse(node2.isNot());
1278:       assertFalse(node2.isObjectLit());
1279:       assertFalse(node2.isAnd());
1280:       assertFalse(node2.isContinue());
1281:       assertFalse(node2.isString());
1282:       assertFalse(node2.isDebugger());
1283:       assertFalse(node2.isFunction());
1284:       assertFalse(node3.isSetterDef());
1285:       assertFalse(node3.isParamList());
1286:       assertEquals(0, node3.getChildCount());
1287:       assertFalse(node3.isNull());
1288:       assertFalse(node3.isVar());
1289:       assertFalse(node3.isAdd());
1290:       assertFalse(node3.isNew());
1291:       assertFalse(node3.isTrue());
1292:       assertFalse(node3.isRegExp());
1293:       assertFalse(node3.isVoid());
1294:       assertFalse(node3.isWhile());
1295:       assertFalse(node3.isBlock());
1296:       assertFalse(node3.isCatch());
1297:       assertFalse(node3.isCall());
1298:       assertFalse(node3.hasMoreThanOneChild());
1299:       assertEquals((-1), node3.getLineno());
1300:       assertFalse(node3.isDelProp());
1301:       assertFalse(node3.isNumber());
1302:       assertFalse(node3.isAssignAdd());
1303:       assertFalse(node3.isGetterDef());
1304:       assertFalse(node3.isFor());
1305:       assertFalse(node3.isOr());
1306:       assertFalse(node3.isLabel());
1307:       assertFalse(node3.isTry());
1308:       assertFalse(node3.isEmpty());
1309:       assertFalse(node3.isDo());
1310:       assertFalse(node3.isCase());
1311:       assertFalse(node3.hasOneChild());
1312:       assertFalse(node3.isScript());
1313:       assertFalse(node3.isDefaultCase());
1314:       assertFalse(node3.isSwitch());
1315:       assertEquals(38, node3.getType());
1316:       assertEquals((-1), node3.getCharno());
1317:       assertFalse(node3.isStringKey());
1318:       assertFalse(node3.isLabelName());
1319:       assertFalse(node3.isArrayLit());
1320:       assertFalse(node3.isThis());
1321:       assertTrue(node3.isName());
1322:       assertFalse(node3.isComma());
1323:       assertFalse(node3.isObjectLit());
1324:       assertFalse(node3.isThrow());
1325:       assertFalse(node3.isGetProp());
1326:       assertFalse(node3.isInc());
1327:       assertFalse(node3.isExprResult());
1328:       assertFalse(node3.isWith());
1329:       assertFalse(node3.isHook());
1330:       assertFalse(node3.isInstanceOf());
1331:       assertFalse(node3.isGetElem());
1332:       assertFalse(node3.isBreak());
1333:       assertFalse(node3.isNE());
1334:       assertFalse(node3.isTypeOf());
1335:       assertFalse(node3.isIf());
1336:       assertFalse(node3.isReturn());
1337:       assertFalse(node3.isAssign());
1338:       assertEquals((-1), node3.getSourcePosition());
1339:       assertFalse(node3.isDec());
1340:       assertFalse(node3.hasChildren());
1341:       assertFalse(node3.isIn());
1342:       assertFalse(node3.isString());
1343:       assertFalse(node3.isFunction());
1344:       assertFalse(node3.isNot());
1345:       assertFalse(node3.isDebugger());
1346:       assertFalse(node3.isCast());
1347:       assertFalse(node3.isFalse());
1348:       assertFalse(node3.isAnd());
1349:       assertFalse(node3.isContinue());
1350:       assertNotNull(node3);
1351:       assertFalse(node0.equals((Object)node2));
1352:       assertFalse(node0.equals((Object)node1));
1353:       assertFalse(node1.equals((Object)node2));
1354:       assertFalse(node1.equals((Object)node0));
1355:       assertFalse(node2.equals((Object)node1));
1356:       assertFalse(node2.equals((Object)node0));
1357:       assertFalse(node3.equals((Object)node0));
1358:       assertFalse(node3.equals((Object)node1));
1359:       assertEquals(47, Node.IS_DISPATCHER);
1360:       assertEquals(29, Node.JSDOC_INFO_PROP);
1361:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1362:       assertEquals(56, Node.CHANGE_TIME);
1363:       assertEquals(37, Node.OPT_ARG_NAME);
1364:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1365:       assertEquals(32, Node.INCRDECR_PROP);
1366:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1367:       assertEquals(12, Node.COLUMN_BITS);
1368:       assertEquals(2, Node.POST_FLAG);
1369:       assertEquals(30, Node.VAR_ARGS_NAME);
1370:       assertEquals(43, Node.IS_CONSTANT_NAME);
1371:       assertEquals(1, Node.DECR_FLAG);
1372:       assertEquals(46, Node.IS_NAMESPACE);
1373:       assertEquals(54, Node.SLASH_V);
1374:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1375:       assertEquals(50, Node.FREE_CALL);
1376:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1377:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1378:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1379:       assertEquals(40, Node.ORIGINALNAME_PROP);
1380:       assertEquals(39, Node.EMPTY_BLOCK);
1381:       assertEquals(48, Node.DIRECTIVES);
1382:       assertEquals(4095, Node.COLUMN_MASK);
1383:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1384:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1385:       assertEquals(57, Node.LAST_PROP);
1386:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1387:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1388:       assertEquals(49, Node.DIRECT_EVAL);
1389:       assertEquals(52, Node.LENGTH);
1390:       assertEquals(53, Node.INPUT_ID);
1391:       assertEquals(57, Node.REFLECTED_OBJECT);
1392:       assertEquals(55, Node.INFERRED_FUNCTION);
1393:       assertEquals(8, Node.FLAG_NO_THROWS);
1394:       assertEquals(36, Node.QUOTED_PROP);
1395:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1396:       assertEquals(29, Node.JSDOC_INFO_PROP);
1397:       assertEquals(2, Node.POST_FLAG);
1398:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1399:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1400:       assertEquals(37, Node.OPT_ARG_NAME);
1401:       assertEquals(36, Node.QUOTED_PROP);
1402:       assertEquals(46, Node.IS_NAMESPACE);
1403:       assertEquals(43, Node.IS_CONSTANT_NAME);
1404:       assertEquals(56, Node.CHANGE_TIME);
1405:       assertEquals(1, Node.DECR_FLAG);
1406:       assertEquals(12, Node.COLUMN_BITS);
1407:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1408:       assertEquals(4095, Node.COLUMN_MASK);
1409:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1410:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1411:       assertEquals(32, Node.INCRDECR_PROP);
1412:       assertEquals(40, Node.ORIGINALNAME_PROP);
1413:       assertEquals(57, Node.REFLECTED_OBJECT);
1414:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1415:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1416:       assertEquals(50, Node.FREE_CALL);
1417:       assertEquals(52, Node.LENGTH);
1418:       assertEquals(8, Node.FLAG_NO_THROWS);
1419:       assertEquals(54, Node.SLASH_V);
1420:       assertEquals(48, Node.DIRECTIVES);
1421:       assertEquals(49, Node.DIRECT_EVAL);
1422:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1423:       assertEquals(55, Node.INFERRED_FUNCTION);
1424:       assertEquals(30, Node.VAR_ARGS_NAME);
1425:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1426:       assertEquals(53, Node.INPUT_ID);
1427:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1428:       assertEquals(39, Node.EMPTY_BLOCK);
1429:       assertEquals(47, Node.IS_DISPATCHER);
1430:       assertEquals(57, Node.LAST_PROP);
1431:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1433:       assertEquals(56, Node.CHANGE_TIME);
1434:       assertEquals(47, Node.IS_DISPATCHER);
1435:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1436:       assertEquals(37, Node.OPT_ARG_NAME);
1437:       assertEquals(2, Node.POST_FLAG);
1438:       assertEquals(1, Node.DECR_FLAG);
1439:       assertEquals(4095, Node.COLUMN_MASK);
1440:       assertEquals(46, Node.IS_NAMESPACE);
1441:       assertEquals(43, Node.IS_CONSTANT_NAME);
1442:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1443:       assertEquals(12, Node.COLUMN_BITS);
1444:       assertEquals(32, Node.INCRDECR_PROP);
1445:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1446:       assertEquals(40, Node.ORIGINALNAME_PROP);
1447:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1448:       assertEquals(50, Node.FREE_CALL);
1449:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1450:       assertEquals(57, Node.REFLECTED_OBJECT);
1451:       assertEquals(54, Node.SLASH_V);
1452:       assertEquals(48, Node.DIRECTIVES);
1453:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1454:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1455:       assertEquals(55, Node.INFERRED_FUNCTION);
1456:       assertEquals(49, Node.DIRECT_EVAL);
1457:       assertEquals(30, Node.VAR_ARGS_NAME);
1458:       assertEquals(36, Node.QUOTED_PROP);
1459:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1460:       assertEquals(52, Node.LENGTH);
1461:       assertEquals(8, Node.FLAG_NO_THROWS);
1462:       assertEquals(57, Node.LAST_PROP);
1463:       assertEquals(29, Node.JSDOC_INFO_PROP);
1464:       assertEquals(53, Node.INPUT_ID);
1465:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1466:       assertEquals(39, Node.EMPTY_BLOCK);
1467:       assertEquals(2, Node.POST_FLAG);
1468:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1469:       assertEquals(37, Node.OPT_ARG_NAME);
1470:       assertEquals(56, Node.CHANGE_TIME);
1471:       assertEquals(46, Node.IS_NAMESPACE);
1472:       assertEquals(47, Node.IS_DISPATCHER);
1473:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1474:       assertEquals(49, Node.DIRECT_EVAL);
1475:       assertEquals(43, Node.IS_CONSTANT_NAME);
1476:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1477:       assertEquals(54, Node.SLASH_V);
1478:       assertEquals(12, Node.COLUMN_BITS);
1479:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1480:       assertEquals(32, Node.INCRDECR_PROP);
1481:       assertEquals(1, Node.DECR_FLAG);
1482:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1483:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1484:       assertEquals(48, Node.DIRECTIVES);
1485:       assertEquals(8, Node.FLAG_NO_THROWS);
1486:       assertEquals(50, Node.FREE_CALL);
1487:       assertEquals(4095, Node.COLUMN_MASK);
1488:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1489:       assertEquals(40, Node.ORIGINALNAME_PROP);
1490:       assertEquals(36, Node.QUOTED_PROP);
1491:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1492:       assertEquals(57, Node.LAST_PROP);
1493:       assertEquals(30, Node.VAR_ARGS_NAME);
1494:       assertEquals(57, Node.REFLECTED_OBJECT);
1495:       assertEquals(55, Node.INFERRED_FUNCTION);
1496:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1497:       assertEquals(29, Node.JSDOC_INFO_PROP);
1498:       assertEquals(52, Node.LENGTH);
1499:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1500:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1501:       assertEquals(39, Node.EMPTY_BLOCK);
1502:       assertEquals(53, Node.INPUT_ID);
1503:       
1504:       String string1 = node2.toString();
1505:       assertNotSame(node2, node1);
1506:       assertSame(node2, node3);
1507:       assertFalse(node2.isThrow());
1508:       assertFalse(node2.isFalse());
1509:       assertFalse(node2.isHook());
1510:       assertFalse(node2.isThis());
1511:       assertFalse(node2.isComma());
1512:       assertTrue(node2.isName());
1513:       assertFalse(node2.isGetProp());
1514:       assertFalse(node2.isInc());
1515:       assertFalse(node2.isCase());
1516:       assertFalse(node2.isWith());
1517:       assertFalse(node2.isIn());
1518:       assertFalse(node2.isExprResult());
1519:       assertFalse(node2.isNE());
1520:       assertFalse(node2.isIf());
1521:       assertFalse(node2.isInstanceOf());
1522:       assertFalse(node2.isDelProp());
1523:       assertFalse(node2.isBreak());
1524:       assertFalse(node2.isEmpty());
1525:       assertFalse(node2.isFor());
1526:       assertFalse(node2.isLabelName());
1527:       assertFalse(node2.isNumber());
1528:       assertFalse(node2.isGetterDef());
1529:       assertFalse(node2.isTry());
1530:       assertFalse(node2.isAssignAdd());
1531:       assertFalse(node2.isDefaultCase());
1532:       assertFalse(node2.hasOneChild());
1533:       assertFalse(node2.isScript());
1534:       assertEquals(0, node2.getChildCount());
1535:       assertEquals((-1), node2.getCharno());
1536:       assertEquals(38, node2.getType());
1537:       assertFalse(node2.isLabel());
1538:       assertFalse(node2.isSwitch());
1539:       assertFalse(node2.isParamList());
1540:       assertFalse(node2.isArrayLit());
1541:       assertFalse(node2.isStringKey());
1542:       assertFalse(node2.isCall());
1543:       assertFalse(node2.isVar());
1544:       assertFalse(node2.isNull());
1545:       assertFalse(node2.isNew());
1546:       assertFalse(node2.isBlock());
1547:       assertFalse(node2.isAdd());
1548:       assertFalse(node2.isSetterDef());
1549:       assertFalse(node2.isDo());
1550:       assertFalse(node2.hasMoreThanOneChild());
1551:       assertFalse(node2.isCatch());
1552:       assertFalse(node2.isWhile());
1553:       assertFalse(node2.isRegExp());
1554:       assertFalse(node2.isOr());
1555:       assertFalse(node2.isReturn());
1556:       assertFalse(node2.isTrue());
1557:       assertFalse(node2.isVoid());
1558:       assertEquals((-1), node2.getLineno());
1559:       assertFalse(node2.isGetElem());
1560:       assertFalse(node2.isCast());
1561:       assertFalse(node2.isDec());
1562:       assertFalse(node2.isTypeOf());
1563:       assertFalse(node2.isAssign());
1564:       assertEquals((-1), node2.getSourcePosition());
1565:       assertFalse(node2.hasChildren());
1566:       assertFalse(node2.isNot());
1567:       assertFalse(node2.isObjectLit());
1568:       assertFalse(node2.isAnd());
1569:       assertFalse(node2.isContinue());
1570:       assertFalse(node2.isString());
1571:       assertFalse(node2.isDebugger());
1572:       assertFalse(node2.isFunction());
1573:       assertNotNull(string1);
1574:       assertEquals("NAME", string1);
1575:       assertFalse(node2.equals((Object)node1));
1576:       assertFalse(node2.equals((Object)node0));
1577:       assertFalse(string1.equals((Object)string0));
1578:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1579:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1580:       assertEquals(56, Node.CHANGE_TIME);
1581:       assertEquals(47, Node.IS_DISPATCHER);
1582:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1583:       assertEquals(37, Node.OPT_ARG_NAME);
1584:       assertEquals(2, Node.POST_FLAG);
1585:       assertEquals(1, Node.DECR_FLAG);
1586:       assertEquals(4095, Node.COLUMN_MASK);
1587:       assertEquals(46, Node.IS_NAMESPACE);
1588:       assertEquals(43, Node.IS_CONSTANT_NAME);
1589:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1590:       assertEquals(12, Node.COLUMN_BITS);
1591:       assertEquals(32, Node.INCRDECR_PROP);
1592:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1593:       assertEquals(40, Node.ORIGINALNAME_PROP);
1594:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1595:       assertEquals(50, Node.FREE_CALL);
1596:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1597:       assertEquals(57, Node.REFLECTED_OBJECT);
1598:       assertEquals(54, Node.SLASH_V);
1599:       assertEquals(48, Node.DIRECTIVES);
1600:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1601:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1602:       assertEquals(55, Node.INFERRED_FUNCTION);
1603:       assertEquals(49, Node.DIRECT_EVAL);
1604:       assertEquals(30, Node.VAR_ARGS_NAME);
1605:       assertEquals(36, Node.QUOTED_PROP);
1606:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1607:       assertEquals(52, Node.LENGTH);
1608:       assertEquals(8, Node.FLAG_NO_THROWS);
1609:       assertEquals(57, Node.LAST_PROP);
1610:       assertEquals(29, Node.JSDOC_INFO_PROP);
1611:       assertEquals(53, Node.INPUT_ID);
1612:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1613:       assertEquals(39, Node.EMPTY_BLOCK);
1614:       
1615:       boolean boolean1 = node2.mayMutateArguments();
1616:       assertNotSame(node2, node1);
1617:       assertSame(node2, node3);
1618:       assertFalse(node2.isThrow());
1619:       assertFalse(node2.isFalse());
1620:       assertFalse(node2.isHook());
1621:       assertFalse(node2.isThis());
1622:       assertFalse(node2.isComma());
1623:       assertTrue(node2.isName());
1624:       assertFalse(node2.isGetProp());
1625:       assertFalse(node2.isInc());
1626:       assertFalse(node2.isCase());
1627:       assertFalse(node2.isWith());
1628:       assertFalse(node2.isIn());
1629:       assertFalse(node2.isExprResult());
1630:       assertFalse(node2.isNE());
1631:       assertFalse(node2.isIf());
1632:       assertFalse(node2.isInstanceOf());
1633:       assertFalse(node2.isDelProp());
1634:       assertFalse(node2.isBreak());
1635:       assertFalse(node2.isEmpty());
1636:       assertFalse(node2.isFor());
1637:       assertFalse(node2.isLabelName());
1638:       assertFalse(node2.isNumber());
1639:       assertFalse(node2.isGetterDef());
1640:       assertFalse(node2.isTry());
1641:       assertFalse(node2.isAssignAdd());
1642:       assertFalse(node2.isDefaultCase());
1643:       assertFalse(node2.hasOneChild());
1644:       assertFalse(node2.isScript());
1645:       assertEquals(0, node2.getChildCount());
1646:       assertEquals((-1), node2.getCharno());
1647:       assertEquals(38, node2.getType());
1648:       assertFalse(node2.isLabel());
1649:       assertFalse(node2.isSwitch());
1650:       assertFalse(node2.isParamList());
1651:       assertFalse(node2.isArrayLit());
1652:       assertFalse(node2.isStringKey());
1653:       assertFalse(node2.isCall());
1654:       assertFalse(node2.isVar());
1655:       assertFalse(node2.isNull());
1656:       assertFalse(node2.isNew());
1657:       assertFalse(node2.isBlock());
1658:       assertFalse(node2.isAdd());
1659:       assertFalse(node2.isSetterDef());
1660:       assertFalse(node2.isDo());
1661:       assertFalse(node2.hasMoreThanOneChild());
1662:       assertFalse(node2.isCatch());
1663:       assertFalse(node2.isWhile());
1664:       assertFalse(node2.isRegExp());
1665:       assertFalse(node2.isOr());
1666:       assertFalse(node2.isReturn());
1667:       assertFalse(node2.isTrue());
1668:       assertFalse(node2.isVoid());
1669:       assertEquals((-1), node2.getLineno());
1670:       assertFalse(node2.isGetElem());
1671:       assertFalse(node2.isCast());
1672:       assertFalse(node2.isDec());
1673:       assertFalse(node2.isTypeOf());
1674:       assertFalse(node2.isAssign());
1675:       assertEquals((-1), node2.getSourcePosition());
1676:       assertFalse(node2.hasChildren());
1677:       assertFalse(node2.isNot());
1678:       assertFalse(node2.isObjectLit());
1679:       assertFalse(node2.isAnd());
1680:       assertFalse(node2.isContinue());
1681:       assertFalse(node2.isString());
1682:       assertFalse(node2.isDebugger());
1683:       assertFalse(node2.isFunction());
1684:       assertTrue(boolean1);
1685:       assertFalse(node2.equals((Object)node1));
1686:       assertFalse(node2.equals((Object)node0));
1687:       assertFalse(boolean1 == boolean0);
1688:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1689:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1690:       assertEquals(56, Node.CHANGE_TIME);
1691:       assertEquals(47, Node.IS_DISPATCHER);
1692:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1693:       assertEquals(37, Node.OPT_ARG_NAME);
1694:       assertEquals(2, Node.POST_FLAG);
1695:       assertEquals(1, Node.DECR_FLAG);
1696:       assertEquals(4095, Node.COLUMN_MASK);
1697:       assertEquals(46, Node.IS_NAMESPACE);
1698:       assertEquals(43, Node.IS_CONSTANT_NAME);
1699:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1700:       assertEquals(12, Node.COLUMN_BITS);
1701:       assertEquals(32, Node.INCRDECR_PROP);
1702:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1703:       assertEquals(40, Node.ORIGINALNAME_PROP);
1704:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1705:       assertEquals(50, Node.FREE_CALL);
1706:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1707:       assertEquals(57, Node.REFLECTED_OBJECT);
1708:       assertEquals(54, Node.SLASH_V);
1709:       assertEquals(48, Node.DIRECTIVES);
1710:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1711:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1712:       assertEquals(55, Node.INFERRED_FUNCTION);
1713:       assertEquals(49, Node.DIRECT_EVAL);
1714:       assertEquals(30, Node.VAR_ARGS_NAME);
1715:       assertEquals(36, Node.QUOTED_PROP);
1716:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1717:       assertEquals(52, Node.LENGTH);
1718:       assertEquals(8, Node.FLAG_NO_THROWS);
1719:       assertEquals(57, Node.LAST_PROP);
1720:       assertEquals(29, Node.JSDOC_INFO_PROP);
1721:       assertEquals(53, Node.INPUT_ID);
1722:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1723:       assertEquals(39, Node.EMPTY_BLOCK);
1724:       
1725:       boolean boolean2 = node0.isVoid();
1726:       assertFalse(node0.isBreak());
1727:       assertFalse(node0.isThis());
1728:       assertFalse(node0.isGetProp());
1729:       assertFalse(node0.isThrow());
1730:       assertEquals((-1), node0.getCharno());
1731:       assertFalse(node0.isNot());
1732:       assertFalse(node0.isObjectLit());
1733:       assertFalse(node0.isScript());
1734:       assertFalse(node0.isExprResult());
1735:       assertFalse(node0.isCase());
1736:       assertFalse(node0.isHook());
1737:       assertFalse(node0.isInstanceOf());
1738:       assertFalse(node0.isWith());
1739:       assertFalse(node0.isAssign());
1740:       assertFalse(node0.isComma());
1741:       assertFalse(node0.isIf());
1742:       assertFalse(node0.isDec());
1743:       assertFalse(node0.hasChildren());
1744:       assertEquals((-1), node0.getSourcePosition());
1745:       assertFalse(node0.isNE());
1746:       assertFalse(node0.isIn());
1747:       assertFalse(node0.isDebugger());
1748:       assertFalse(node0.isInc());
1749:       assertEquals(40, node0.getType());
1750:       assertFalse(node0.isAnd());
1751:       assertFalse(node0.isCast());
1752:       assertFalse(node0.isFalse());
1753:       assertFalse(node0.isContinue());
1754:       assertFalse(node0.isFunction());
1755:       assertFalse(node0.isSetterDef());
1756:       assertFalse(node0.isNull());
1757:       assertFalse(node0.isStringKey());
1758:       assertFalse(node0.isParamList());
1759:       assertFalse(node0.isName());
1760:       assertFalse(node0.isAdd());
1761:       assertFalse(node0.isWhile());
1762:       assertFalse(node0.isTrue());
1763:       assertFalse(node0.isVoid());
1764:       assertFalse(node0.isTry());
1765:       assertTrue(node0.isString());
1766:       assertEquals((-1), node0.getLineno());
1767:       assertFalse(node0.isCatch());
1768:       assertFalse(node0.isBlock());
1769:       assertFalse(node0.isReturn());
1770:       assertFalse(node0.isCall());
1771:       assertFalse(node0.hasMoreThanOneChild());
1772:       assertFalse(node0.isRegExp());
1773:       assertFalse(node0.isTypeOf());
1774:       assertFalse(node0.isNumber());
1775:       assertFalse(node0.isEmpty());
1776:       assertFalse(node0.isFor());
1777:       assertFalse(node0.isGetElem());
1778:       assertFalse(node0.isLabelName());
1779:       assertFalse(node0.isAssignAdd());
1780:       assertFalse(node0.isDelProp());
1781:       assertFalse(node0.hasOneChild());
1782:       assertFalse(node0.isOr());
1783:       assertFalse(node0.isGetterDef());
1784:       assertFalse(node0.isDefaultCase());
1785:       assertFalse(node0.isNew());
1786:       assertFalse(node0.isSwitch());
1787:       assertFalse(node0.isDo());
1788:       assertEquals(0, node0.getChildCount());
1789:       assertFalse(node0.isArrayLit());
1790:       assertFalse(node0.isVar());
1791:       assertFalse(node0.isLabel());
1792:       assertFalse(boolean2);
1793:       assertFalse(node0.equals((Object)node3));
1794:       assertFalse(node0.equals((Object)node2));
1795:       assertFalse(node0.equals((Object)node1));
1796:       assertTrue(boolean2 == boolean0);
1797:       assertFalse(boolean2 == boolean1);
1798:       assertEquals(47, Node.IS_DISPATCHER);
1799:       assertEquals(29, Node.JSDOC_INFO_PROP);
1800:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1801:       assertEquals(56, Node.CHANGE_TIME);
1802:       assertEquals(37, Node.OPT_ARG_NAME);
1803:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1804:       assertEquals(32, Node.INCRDECR_PROP);
1805:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1806:       assertEquals(12, Node.COLUMN_BITS);
1807:       assertEquals(2, Node.POST_FLAG);
1808:       assertEquals(30, Node.VAR_ARGS_NAME);
1809:       assertEquals(43, Node.IS_CONSTANT_NAME);
1810:       assertEquals(1, Node.DECR_FLAG);
1811:       assertEquals(46, Node.IS_NAMESPACE);
1812:       assertEquals(54, Node.SLASH_V);
1813:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1814:       assertEquals(50, Node.FREE_CALL);
1815:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1816:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1817:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1818:       assertEquals(40, Node.ORIGINALNAME_PROP);
1819:       assertEquals(39, Node.EMPTY_BLOCK);
1820:       assertEquals(48, Node.DIRECTIVES);
1821:       assertEquals(4095, Node.COLUMN_MASK);
1822:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1823:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1824:       assertEquals(57, Node.LAST_PROP);
1825:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1826:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1827:       assertEquals(49, Node.DIRECT_EVAL);
1828:       assertEquals(52, Node.LENGTH);
1829:       assertEquals(53, Node.INPUT_ID);
1830:       assertEquals(57, Node.REFLECTED_OBJECT);
1831:       assertEquals(55, Node.INFERRED_FUNCTION);
1832:       assertEquals(8, Node.FLAG_NO_THROWS);
1833:       assertEquals(36, Node.QUOTED_PROP);
1834:       
1835:       boolean boolean3 = node2.isDo();
1836:       assertNotSame(node2, node1);
1837:       assertSame(node2, node3);
1838:       assertFalse(node2.isThrow());
1839:       assertFalse(node2.isFalse());
1840:       assertFalse(node2.isHook());
1841:       assertFalse(node2.isThis());
1842:       assertFalse(node2.isComma());
1843:       assertTrue(node2.isName());
1844:       assertFalse(node2.isGetProp());
1845:       assertFalse(node2.isInc());
1846:       assertFalse(node2.isCase());
1847:       assertFalse(node2.isWith());
1848:       assertFalse(node2.isIn());
1849:       assertFalse(node2.isExprResult());
1850:       assertFalse(node2.isNE());
1851:       assertFalse(node2.isIf());
1852:       assertFalse(node2.isInstanceOf());
1853:       assertFalse(node2.isDelProp());
1854:       assertFalse(node2.isBreak());
1855:       assertFalse(node2.isEmpty());
1856:       assertFalse(node2.isFor());
1857:       assertFalse(node2.isLabelName());
1858:       assertFalse(node2.isNumber());
1859:       assertFalse(node2.isGetterDef());
1860:       assertFalse(node2.isTry());
1861:       assertFalse(node2.isAssignAdd());
1862:       assertFalse(node2.isDefaultCase());
1863:       assertFalse(node2.hasOneChild());
1864:       assertFalse(node2.isScript());
1865:       assertEquals(0, node2.getChildCount());
1866:       assertEquals((-1), node2.getCharno());
1867:       assertEquals(38, node2.getType());
1868:       assertFalse(node2.isLabel());
1869:       assertFalse(node2.isSwitch());
1870:       assertFalse(node2.isParamList());
1871:       assertFalse(node2.isArrayLit());
1872:       assertFalse(node2.isStringKey());
1873:       assertFalse(node2.isCall());
1874:       assertFalse(node2.isVar());
1875:       assertFalse(node2.isNull());
1876:       assertFalse(node2.isNew());
1877:       assertFalse(node2.isBlock());
1878:       assertFalse(node2.isAdd());
1879:       assertFalse(node2.isSetterDef());
1880:       assertFalse(node2.isDo());
1881:       assertFalse(node2.hasMoreThanOneChild());
1882:       assertFalse(node2.isCatch());
1883:       assertFalse(node2.isWhile());
1884:       assertFalse(node2.isRegExp());
1885:       assertFalse(node2.isOr());
1886:       assertFalse(node2.isReturn());
1887:       assertFalse(node2.isTrue());
1888:       assertFalse(node2.isVoid());
1889:       assertEquals((-1), node2.getLineno());
1890:       assertFalse(node2.isGetElem());
1891:       assertFalse(node2.isCast());
1892:       assertFalse(node2.isDec());
1893:       assertFalse(node2.isTypeOf());
1894:       assertFalse(node2.isAssign());
1895:       assertEquals((-1), node2.getSourcePosition());
1896:       assertFalse(node2.hasChildren());
1897:       assertFalse(node2.isNot());
1898:       assertFalse(node2.isObjectLit());
1899:       assertFalse(node2.isAnd());
1900:       assertFalse(node2.isContinue());
1901:       assertFalse(node2.isString());
1902:       assertFalse(node2.isDebugger());
1903:       assertFalse(node2.isFunction());
1904:       assertFalse(boolean3);
1905:       assertFalse(node2.equals((Object)node1));
1906:       assertFalse(node2.equals((Object)node0));
1907:       assertTrue(boolean3 == boolean2);
1908:       assertFalse(boolean3 == boolean1);
1909:       assertTrue(boolean3 == boolean0);
1910:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1911:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1912:       assertEquals(56, Node.CHANGE_TIME);
1913:       assertEquals(47, Node.IS_DISPATCHER);
1914:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1915:       assertEquals(37, Node.OPT_ARG_NAME);
1916:       assertEquals(2, Node.POST_FLAG);
1917:       assertEquals(1, Node.DECR_FLAG);
1918:       assertEquals(4095, Node.COLUMN_MASK);
1919:       assertEquals(46, Node.IS_NAMESPACE);
1920:       assertEquals(43, Node.IS_CONSTANT_NAME);
1921:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1922:       assertEquals(12, Node.COLUMN_BITS);
1923:       assertEquals(32, Node.INCRDECR_PROP);
1924:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1925:       assertEquals(40, Node.ORIGINALNAME_PROP);
1926:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1927:       assertEquals(50, Node.FREE_CALL);
1928:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1929:       assertEquals(57, Node.REFLECTED_OBJECT);
1930:       assertEquals(54, Node.SLASH_V);
1931:       assertEquals(48, Node.DIRECTIVES);
1932:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1933:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1934:       assertEquals(55, Node.INFERRED_FUNCTION);
1935:       assertEquals(49, Node.DIRECT_EVAL);
1936:       assertEquals(30, Node.VAR_ARGS_NAME);
1937:       assertEquals(36, Node.QUOTED_PROP);
1938:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1939:       assertEquals(52, Node.LENGTH);
1940:       assertEquals(8, Node.FLAG_NO_THROWS);
1941:       assertEquals(57, Node.LAST_PROP);
1942:       assertEquals(29, Node.JSDOC_INFO_PROP);
1943:       assertEquals(53, Node.INPUT_ID);
1944:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1945:       assertEquals(39, Node.EMPTY_BLOCK);
1946:       
1947:       Node node4 = node2.cloneNode();
1948:       assertNotSame(node2, node1);
1949:       assertSame(node2, node3);
1950:       assertNotSame(node2, node4);
1951:       assertNotSame(node4, node3);
1952:       assertNotSame(node4, node1);
1953:       assertNotSame(node4, node2);
1954:       assertFalse(node2.isThrow());
1955:       assertFalse(node2.isFalse());
1956:       assertFalse(node2.isHook());
1957:       assertFalse(node2.isThis());
1958:       assertFalse(node2.isComma());
1959:       assertTrue(node2.isName());
1960:       assertFalse(node2.isGetProp());
1961:       assertFalse(node2.isInc());
1962:       assertFalse(node2.isCase());
1963:       assertFalse(node2.isWith());
1964:       assertFalse(node2.isIn());
1965:       assertFalse(node2.isExprResult());
1966:       assertFalse(node2.isNE());
1967:       assertFalse(node2.isIf());
1968:       assertFalse(node2.isInstanceOf());
1969:       assertFalse(node2.isDelProp());
1970:       assertFalse(node2.isBreak());
1971:       assertFalse(node2.isEmpty());
1972:       assertFalse(node2.isFor());
1973:       assertFalse(node2.isLabelName());
1974:       assertFalse(node2.isNumber());
1975:       assertFalse(node2.isGetterDef());
1976:       assertFalse(node2.isTry());
1977:       assertFalse(node2.isAssignAdd());
1978:       assertFalse(node2.isDefaultCase());
1979:       assertFalse(node2.hasOneChild());
1980:       assertFalse(node2.isScript());
1981:       assertEquals(0, node2.getChildCount());
1982:       assertEquals((-1), node2.getCharno());
1983:       assertEquals(38, node2.getType());
1984:       assertFalse(node2.isLabel());
1985:       assertFalse(node2.isSwitch());
1986:       assertFalse(node2.isParamList());
1987:       assertFalse(node2.isArrayLit());
1988:       assertFalse(node2.isStringKey());
1989:       assertFalse(node2.isCall());
1990:       assertFalse(node2.isVar());
1991:       assertFalse(node2.isNull());
1992:       assertFalse(node2.isNew());
1993:       assertFalse(node2.isBlock());
1994:       assertFalse(node2.isAdd());
1995:       assertFalse(node2.isSetterDef());
1996:       assertFalse(node2.isDo());
1997:       assertFalse(node2.hasMoreThanOneChild());
1998:       assertFalse(node2.isCatch());
1999:       assertFalse(node2.isWhile());
2000:       assertFalse(node2.isRegExp());
2001:       assertFalse(node2.isOr());
2002:       assertFalse(node2.isReturn());
2003:       assertFalse(node2.isTrue());
2004:       assertFalse(node2.isVoid());
2005:       assertEquals((-1), node2.getLineno());
2006:       assertFalse(node2.isGetElem());
2007:       assertFalse(node2.isCast());
2008:       assertFalse(node2.isDec());
2009:       assertFalse(node2.isTypeOf());
2010:       assertFalse(node2.isAssign());
2011:       assertEquals((-1), node2.getSourcePosition());
2012:       assertFalse(node2.hasChildren());
2013:       assertFalse(node2.isNot());
2014:       assertFalse(node2.isObjectLit());
2015:       assertFalse(node2.isAnd());
2016:       assertFalse(node2.isContinue());
2017:       assertFalse(node2.isString());
2018:       assertFalse(node2.isDebugger());
2019:       assertFalse(node2.isFunction());
2020:       assertFalse(node4.isNew());
2021:       assertFalse(node4.isAdd());
2022:       assertFalse(node4.isContinue());
2023:       assertFalse(node4.isVar());
2024:       assertFalse(node4.hasMoreThanOneChild());
2025:       assertFalse(node4.isLabel());
2026:       assertFalse(node4.isDo());
2027:       assertFalse(node4.isAssignAdd());
2028:       assertFalse(node4.isBlock());
2029:       assertFalse(node4.isReturn());
2030:       assertFalse(node4.isWhile());
2031:       assertFalse(node4.isSetterDef());
2032:       assertFalse(node4.isNull());
2033:       assertFalse(node4.isTypeOf());
2034:       assertFalse(node4.hasChildren());
2035:       assertFalse(node4.isDec());
2036:       assertFalse(node4.isOr());
2037:       assertFalse(node4.isAssign());
2038:       assertFalse(node4.isGetElem());
2039:       assertFalse(node4.isCatch());
2040:       assertFalse(node4.isCall());
2041:       assertEquals((-1), node4.getLineno());
2042:       assertFalse(node4.isScript());
2043:       assertFalse(node4.isTrue());
2044:       assertFalse(node4.isRegExp());
2045:       assertEquals(38, node4.getType());
2046:       assertFalse(node4.isWith());
2047:       assertEquals(0, node4.getChildCount());
2048:       assertFalse(node4.hasOneChild());
2049:       assertFalse(node4.isTry());
2050:       assertFalse(node4.isFor());
2051:       assertFalse(node4.isDefaultCase());
2052:       assertFalse(node4.isNumber());
2053:       assertFalse(node4.isGetterDef());
2054:       assertFalse(node4.isArrayLit());
2055:       assertFalse(node4.isLabelName());
2056:       assertFalse(node4.isStringKey());
2057:       assertFalse(node4.isParamList());
2058:       assertFalse(node4.isSwitch());
2059:       assertFalse(node4.isInc());
2060:       assertEquals((-1), node4.getCharno());
2061:       assertFalse(node4.isString());
2062:       assertFalse(node4.isHook());
2063:       assertFalse(node4.isCase());
2064:       assertFalse(node4.isThrow());
2065:       assertFalse(node4.isNE());
2066:       assertFalse(node4.isThis());
2067:       assertFalse(node4.isDelProp());
2068:       assertFalse(node4.isBreak());
2069:       assertTrue(node4.isName());
2070:       assertFalse(node4.isComma());
2071:       assertFalse(node4.isEmpty());
2072:       assertFalse(node4.isIn());
2073:       assertFalse(node4.isInstanceOf());
2074:       assertFalse(node4.isIf());
2075:       assertFalse(node4.isFunction());
2076:       assertFalse(node4.isExprResult());
2077:       assertFalse(node4.isVoid());
2078:       assertFalse(node4.isDebugger());
2079:       assertFalse(node4.isNot());
2080:       assertFalse(node4.isGetProp());
2081:       assertEquals((-1), node4.getSourcePosition());
2082:       assertFalse(node4.isFalse());
2083:       assertFalse(node4.isCast());
2084:       assertFalse(node4.isObjectLit());
2085:       assertFalse(node4.isAnd());
2086:       assertNotNull(node4);
2087:       assertFalse(node2.equals((Object)node1));
2088:       assertFalse(node2.equals((Object)node0));
2089:       assertFalse(node4.equals((Object)node3));
2090:       assertFalse(node4.equals((Object)node1));
2091:       assertFalse(node4.equals((Object)node2));
2092:       assertFalse(node4.equals((Object)node0));
2093:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2094:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2095:       assertEquals(56, Node.CHANGE_TIME);
2096:       assertEquals(47, Node.IS_DISPATCHER);
2097:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2098:       assertEquals(37, Node.OPT_ARG_NAME);
2099:       assertEquals(2, Node.POST_FLAG);
2100:       assertEquals(1, Node.DECR_FLAG);
2101:       assertEquals(4095, Node.COLUMN_MASK);
2102:       assertEquals(46, Node.IS_NAMESPACE);
2103:       assertEquals(43, Node.IS_CONSTANT_NAME);
2104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2105:       assertEquals(12, Node.COLUMN_BITS);
2106:       assertEquals(32, Node.INCRDECR_PROP);
2107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2108:       assertEquals(40, Node.ORIGINALNAME_PROP);
2109:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2110:       assertEquals(50, Node.FREE_CALL);
2111:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2112:       assertEquals(57, Node.REFLECTED_OBJECT);
2113:       assertEquals(54, Node.SLASH_V);
2114:       assertEquals(48, Node.DIRECTIVES);
2115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2117:       assertEquals(55, Node.INFERRED_FUNCTION);
2118:       assertEquals(49, Node.DIRECT_EVAL);
2119:       assertEquals(30, Node.VAR_ARGS_NAME);
2120:       assertEquals(36, Node.QUOTED_PROP);
2121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2122:       assertEquals(52, Node.LENGTH);
2123:       assertEquals(8, Node.FLAG_NO_THROWS);
2124:       assertEquals(57, Node.LAST_PROP);
2125:       assertEquals(29, Node.JSDOC_INFO_PROP);
2126:       assertEquals(53, Node.INPUT_ID);
2127:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2128:       assertEquals(39, Node.EMPTY_BLOCK);
2129:       assertEquals(43, Node.IS_CONSTANT_NAME);
2130:       assertEquals(36, Node.QUOTED_PROP);
2131:       assertEquals(53, Node.INPUT_ID);
2132:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2133:       assertEquals(4095, Node.COLUMN_MASK);
2134:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2135:       assertEquals(48, Node.DIRECTIVES);
2136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2137:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2138:       assertEquals(37, Node.OPT_ARG_NAME);
2139:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2140:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2141:       assertEquals(50, Node.FREE_CALL);
2142:       assertEquals(12, Node.COLUMN_BITS);
2143:       assertEquals(1, Node.DECR_FLAG);
2144:       assertEquals(32, Node.INCRDECR_PROP);
2145:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2146:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2147:       assertEquals(30, Node.VAR_ARGS_NAME);
2148:       assertEquals(52, Node.LENGTH);
2149:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2150:       assertEquals(57, Node.REFLECTED_OBJECT);
2151:       assertEquals(46, Node.IS_NAMESPACE);
2152:       assertEquals(40, Node.ORIGINALNAME_PROP);
2153:       assertEquals(49, Node.DIRECT_EVAL);
2154:       assertEquals(54, Node.SLASH_V);
2155:       assertEquals(56, Node.CHANGE_TIME);
2156:       assertEquals(2, Node.POST_FLAG);
2157:       assertEquals(39, Node.EMPTY_BLOCK);
2158:       assertEquals(47, Node.IS_DISPATCHER);
2159:       assertEquals(29, Node.JSDOC_INFO_PROP);
2160:       assertEquals(8, Node.FLAG_NO_THROWS);
2161:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2162:       assertEquals(55, Node.INFERRED_FUNCTION);
2163:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2164:       assertEquals(57, Node.LAST_PROP);
2165:   }
2166: }
RegularFileObject[/tmp/EvoSuite_192_1629223233653/com/google/javascript/rhino/Node_192_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:00:34 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_192_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_192_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_192_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.common.base.Objects",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.common.collect.ImmutableSet",
337:       "com.google.common.collect.EmptyImmutableSet",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Platform",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.javascript.rhino.InputId",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.javascript.rhino.jstype.JSType$2",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.javascript.rhino.JSTypeExpression",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.common.collect.AbstractMultimap$Values",
360:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
361:       "com.google.common.collect.AbstractMapBasedMultimap$1",
362:       "com.google.common.collect.Multimaps$Entries",
363:       "com.google.common.collect.AbstractMultimap$Entries",
364:       "com.google.common.collect.AbstractMapBasedMultimap$2"
365:     );
366:   }
367: }

[MASTER] 18:00:34.159 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("/ZLKF`]n.6`K@F_b0n4");
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertNotNull(node0);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

Node node1 = new Node(50, node0, node0);
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertEquals(50, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

node0.setLength(122);
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.equals((Object)node1));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

Iterable<Node> iterable1 = node0.children();
assertSame(iterable1, iterable0);
assertFalse(iterable1.contains(node1));
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertNotNull(iterable1);
assertFalse(node0.equals((Object)node1));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

node0.setLength(122);
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node0.equals((Object)node1));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

String string0 = node0.toString();
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertNotNull(string0);
assertFalse(node0.equals((Object)node1));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

Node node2 = new Node(38);
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertTrue(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node2.isExprResult());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getCharno());
assertEquals(38, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isRegExp());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean0 = node2.isNew();
assertNotSame(node2, node1);
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertTrue(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node2.isExprResult());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getCharno());
assertEquals(38, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isRegExp());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(boolean0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

Node node3 = node2.useSourceInfoIfMissingFrom(node1);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertSame(node2, node3);
assertNotSame(node3, node1);
assertSame(node3, node2);
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertEquals(50, node1.getType());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isIn());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isReturn());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAnd());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertTrue(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node2.isExprResult());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getCharno());
assertEquals(38, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isRegExp());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node3.isSetterDef());
assertFalse(node3.isParamList());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isTrue());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isWhile());
assertFalse(node3.isBlock());
assertFalse(node3.isCatch());
assertFalse(node3.isCall());
assertFalse(node3.hasMoreThanOneChild());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isDelProp());
assertFalse(node3.isNumber());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isOr());
assertFalse(node3.isLabel());
assertFalse(node3.isTry());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertFalse(node3.isCase());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSwitch());
assertEquals(38, node3.getType());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isLabelName());
assertFalse(node3.isArrayLit());
assertFalse(node3.isThis());
assertTrue(node3.isName());
assertFalse(node3.isComma());
assertFalse(node3.isObjectLit());
assertFalse(node3.isThrow());
assertFalse(node3.isGetProp());
assertFalse(node3.isInc());
assertFalse(node3.isExprResult());
assertFalse(node3.isWith());
assertFalse(node3.isHook());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isBreak());
assertFalse(node3.isNE());
assertFalse(node3.isTypeOf());
assertFalse(node3.isIf());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isIn());
assertFalse(node3.isString());
assertFalse(node3.isFunction());
assertFalse(node3.isNot());
assertFalse(node3.isDebugger());
assertFalse(node3.isCast());
assertFalse(node3.isFalse());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertNotNull(node3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

String string1 = node2.toString();
assertNotSame(node2, node1);
assertSame(node2, node3);
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertTrue(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node2.isExprResult());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getCharno());
assertEquals(38, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isRegExp());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertNotNull(string1);
assertEquals("NAME", string1);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(string1.equals((Object)string0));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean1 = node2.mayMutateArguments();
assertNotSame(node2, node1);
assertSame(node2, node3);
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertTrue(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node2.isExprResult());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getCharno());
assertEquals(38, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isRegExp());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertTrue(boolean1);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean2 = node0.isVoid();
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isCase());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isComma());
assertFalse(node0.isIf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isWhile());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertTrue(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertFalse(boolean2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean3 = node2.isDo();
assertNotSame(node2, node1);
assertSame(node2, node3);
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertTrue(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node2.isExprResult());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getCharno());
assertEquals(38, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isRegExp());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(boolean3);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertFalse(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

Node node4 = node2.cloneNode();
assertNotSame(node2, node1);
assertSame(node2, node3);
assertNotSame(node2, node4);
assertNotSame(node4, node3);
assertNotSame(node4, node1);
assertNotSame(node4, node2);
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertTrue(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isWith());
assertFalse(node2.isIn());
assertFalse(node2.isExprResult());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isDelProp());
assertFalse(node2.isBreak());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getCharno());
assertEquals(38, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isArrayLit());
assertFalse(node2.isStringKey());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isNull());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isRegExp());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isContinue());
assertFalse(node4.isVar());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isLabel());
assertFalse(node4.isDo());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isBlock());
assertFalse(node4.isReturn());
assertFalse(node4.isWhile());
assertFalse(node4.isSetterDef());
assertFalse(node4.isNull());
assertFalse(node4.isTypeOf());
assertFalse(node4.hasChildren());
assertFalse(node4.isDec());
assertFalse(node4.isOr());
assertFalse(node4.isAssign());
assertFalse(node4.isGetElem());
assertFalse(node4.isCatch());
assertFalse(node4.isCall());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isScript());
assertFalse(node4.isTrue());
assertFalse(node4.isRegExp());
assertEquals(38, node4.getType());
assertFalse(node4.isWith());
assertEquals(0, node4.getChildCount());
assertFalse(node4.hasOneChild());
assertFalse(node4.isTry());
assertFalse(node4.isFor());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isNumber());
assertFalse(node4.isGetterDef());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isStringKey());
assertFalse(node4.isParamList());
assertFalse(node4.isSwitch());
assertFalse(node4.isInc());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isString());
assertFalse(node4.isHook());
assertFalse(node4.isCase());
assertFalse(node4.isThrow());
assertFalse(node4.isNE());
assertFalse(node4.isThis());
assertFalse(node4.isDelProp());
assertFalse(node4.isBreak());
assertTrue(node4.isName());
assertFalse(node4.isComma());
assertFalse(node4.isEmpty());
assertFalse(node4.isIn());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isIf());
assertFalse(node4.isFunction());
assertFalse(node4.isExprResult());
assertFalse(node4.isVoid());
assertFalse(node4.isDebugger());
assertFalse(node4.isNot());
assertFalse(node4.isGetProp());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isFalse());
assertFalse(node4.isCast());
assertFalse(node4.isObjectLit());
assertFalse(node4.isAnd());
assertNotNull(node4);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node0));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);


[MASTER] 18:00:38.833 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_213_1629223238333/com/google/javascript/rhino/Node_213_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_213_1629223238333/com/google/javascript/rhino/Node_213_tmp__ESTest_scaffolding.java]]
[MASTER] 18:00:38.833 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:38.833 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 18:00:38.834 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 18:00:38.835 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_213_1629223238333/com/google/javascript/rhino/Node_213_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 18:00:38 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_213_tmp__ESTest extends Node_213_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newNumber((-1907.0901721195278));
21:       assertEquals(0, node0.getChildCount());
22:       assertFalse(node0.isSetterDef());
23:       assertFalse(node0.isCatch());
24:       assertFalse(node0.isNull());
25:       assertFalse(node0.isDebugger());
26:       assertFalse(node0.isVoid());
27:       assertFalse(node0.isStringKey());
28:       assertFalse(node0.isName());
29:       assertFalse(node0.isTrue());
30:       assertFalse(node0.isParamList());
31:       assertFalse(node0.isTry());
32:       assertFalse(node0.isCall());
33:       assertFalse(node0.isRegExp());
34:       assertFalse(node0.isBlock());
35:       assertEquals(39, node0.getType());
36:       assertFalse(node0.isWhile());
37:       assertFalse(node0.isFor());
38:       assertFalse(node0.isIn());
39:       assertFalse(node0.hasMoreThanOneChild());
40:       assertTrue(node0.isNumber());
41:       assertEquals((-1), node0.getLineno());
42:       assertFalse(node0.isContinue());
43:       assertFalse(node0.isString());
44:       assertEquals((-1), node0.getSourcePosition());
45:       assertFalse(node0.isIf());
46:       assertFalse(node0.isNE());
47:       assertFalse(node0.isFalse());
48:       assertFalse(node0.isInc());
49:       assertFalse(node0.isCast());
50:       assertFalse(node0.isFunction());
51:       assertFalse(node0.isThrow());
52:       assertFalse(node0.isInstanceOf());
53:       assertFalse(node0.isObjectLit());
54:       assertFalse(node0.isWith());
55:       assertFalse(node0.isGetProp());
56:       assertFalse(node0.isBreak());
57:       assertFalse(node0.isNot());
58:       assertFalse(node0.isAnd());
59:       assertFalse(node0.isHook());
60:       assertFalse(node0.hasOneChild());
61:       assertFalse(node0.isGetElem());
62:       assertFalse(node0.isExprResult());
63:       assertFalse(node0.isScript());
64:       assertFalse(node0.isDec());
65:       assertFalse(node0.isTypeOf());
66:       assertFalse(node0.hasChildren());
67:       assertFalse(node0.isComma());
68:       assertFalse(node0.isAssign());
69:       assertFalse(node0.isThis());
70:       assertFalse(node0.isReturn());
71:       assertFalse(node0.isOr());
72:       assertFalse(node0.isCase());
73:       assertFalse(node0.isSwitch());
74:       assertFalse(node0.isDelProp());
75:       assertFalse(node0.isGetterDef());
76:       assertFalse(node0.isLabelName());
77:       assertEquals((-1), node0.getCharno());
78:       assertFalse(node0.isArrayLit());
79:       assertFalse(node0.isAdd());
80:       assertFalse(node0.isNew());
81:       assertFalse(node0.isEmpty());
82:       assertFalse(node0.isDefaultCase());
83:       assertFalse(node0.isDo());
84:       assertFalse(node0.isLabel());
85:       assertFalse(node0.isAssignAdd());
86:       assertFalse(node0.isVar());
87:       assertNotNull(node0);
88:       assertEquals(46, Node.IS_NAMESPACE);
89:       assertEquals(12, Node.COLUMN_BITS);
90:       assertEquals(32, Node.INCRDECR_PROP);
91:       assertEquals(51, Node.STATIC_SOURCE_FILE);
92:       assertEquals(15, Node.NO_SIDE_EFFECTS);
93:       assertEquals(57, Node.LAST_PROP);
94:       assertEquals(47, Node.IS_DISPATCHER);
95:       assertEquals(2, Node.POST_FLAG);
96:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
97:       assertEquals(30, Node.VAR_ARGS_NAME);
98:       assertEquals(1, Node.DECR_FLAG);
99:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
100:       assertEquals(40, Node.ORIGINALNAME_PROP);
101:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
102:       assertEquals(50, Node.FREE_CALL);
103:       assertEquals(54, Node.SLASH_V);
104:       assertEquals(43, Node.IS_CONSTANT_NAME);
105:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
106:       assertEquals(8, Node.FLAG_NO_THROWS);
107:       assertEquals(39, Node.EMPTY_BLOCK);
108:       assertEquals(55, Node.INFERRED_FUNCTION);
109:       assertEquals(4095, Node.COLUMN_MASK);
110:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
111:       assertEquals(57, Node.REFLECTED_OBJECT);
112:       assertEquals(53, Node.INPUT_ID);
113:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
114:       assertEquals(29, Node.JSDOC_INFO_PROP);
115:       assertEquals(52, Node.LENGTH);
116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
117:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
118:       assertEquals(49, Node.DIRECT_EVAL);
119:       assertEquals(37, Node.OPT_ARG_NAME);
120:       assertEquals(36, Node.QUOTED_PROP);
121:       assertEquals(48, Node.DIRECTIVES);
122:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
123:       assertEquals(56, Node.CHANGE_TIME);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertEquals(0, node0.getChildCount());
128:       assertFalse(node0.isSetterDef());
129:       assertFalse(node0.isCatch());
130:       assertFalse(node0.isNull());
131:       assertFalse(node0.isDebugger());
132:       assertFalse(node0.isVoid());
133:       assertFalse(node0.isStringKey());
134:       assertFalse(node0.isName());
135:       assertFalse(node0.isTrue());
136:       assertFalse(node0.isParamList());
137:       assertFalse(node0.isTry());
138:       assertFalse(node0.isCall());
139:       assertFalse(node0.isRegExp());
140:       assertFalse(node0.isBlock());
141:       assertEquals(39, node0.getType());
142:       assertFalse(node0.isWhile());
143:       assertFalse(node0.isFor());
144:       assertFalse(node0.isIn());
145:       assertFalse(node0.hasMoreThanOneChild());
146:       assertTrue(node0.isNumber());
147:       assertEquals((-1), node0.getLineno());
148:       assertFalse(node0.isContinue());
149:       assertFalse(node0.isString());
150:       assertEquals((-1), node0.getSourcePosition());
151:       assertFalse(node0.isIf());
152:       assertFalse(node0.isNE());
153:       assertFalse(node0.isFalse());
154:       assertFalse(node0.isInc());
155:       assertFalse(node0.isCast());
156:       assertFalse(node0.isFunction());
157:       assertFalse(node0.isThrow());
158:       assertFalse(node0.isInstanceOf());
159:       assertFalse(node0.isObjectLit());
160:       assertFalse(node0.isWith());
161:       assertFalse(node0.isGetProp());
162:       assertFalse(node0.isBreak());
163:       assertFalse(node0.isNot());
164:       assertFalse(node0.isAnd());
165:       assertFalse(node0.isHook());
166:       assertFalse(node0.hasOneChild());
167:       assertFalse(node0.isGetElem());
168:       assertFalse(node0.isExprResult());
169:       assertFalse(node0.isScript());
170:       assertFalse(node0.isDec());
171:       assertFalse(node0.isTypeOf());
172:       assertFalse(node0.hasChildren());
173:       assertFalse(node0.isComma());
174:       assertFalse(node0.isAssign());
175:       assertFalse(node0.isThis());
176:       assertFalse(node0.isReturn());
177:       assertFalse(node0.isOr());
178:       assertFalse(node0.isCase());
179:       assertFalse(node0.isSwitch());
180:       assertFalse(node0.isDelProp());
181:       assertFalse(node0.isGetterDef());
182:       assertFalse(node0.isLabelName());
183:       assertEquals((-1), node0.getCharno());
184:       assertFalse(node0.isArrayLit());
185:       assertFalse(node0.isAdd());
186:       assertFalse(node0.isNew());
187:       assertFalse(node0.isEmpty());
188:       assertFalse(node0.isDefaultCase());
189:       assertFalse(node0.isDo());
190:       assertFalse(node0.isLabel());
191:       assertFalse(node0.isAssignAdd());
192:       assertFalse(node0.isVar());
193:       assertNotNull(iterable0);
194:       assertEquals(46, Node.IS_NAMESPACE);
195:       assertEquals(12, Node.COLUMN_BITS);
196:       assertEquals(32, Node.INCRDECR_PROP);
197:       assertEquals(51, Node.STATIC_SOURCE_FILE);
198:       assertEquals(15, Node.NO_SIDE_EFFECTS);
199:       assertEquals(57, Node.LAST_PROP);
200:       assertEquals(47, Node.IS_DISPATCHER);
201:       assertEquals(2, Node.POST_FLAG);
202:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
203:       assertEquals(30, Node.VAR_ARGS_NAME);
204:       assertEquals(1, Node.DECR_FLAG);
205:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
206:       assertEquals(40, Node.ORIGINALNAME_PROP);
207:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
208:       assertEquals(50, Node.FREE_CALL);
209:       assertEquals(54, Node.SLASH_V);
210:       assertEquals(43, Node.IS_CONSTANT_NAME);
211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
212:       assertEquals(8, Node.FLAG_NO_THROWS);
213:       assertEquals(39, Node.EMPTY_BLOCK);
214:       assertEquals(55, Node.INFERRED_FUNCTION);
215:       assertEquals(4095, Node.COLUMN_MASK);
216:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(53, Node.INPUT_ID);
219:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
220:       assertEquals(29, Node.JSDOC_INFO_PROP);
221:       assertEquals(52, Node.LENGTH);
222:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
223:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
224:       assertEquals(49, Node.DIRECT_EVAL);
225:       assertEquals(37, Node.OPT_ARG_NAME);
226:       assertEquals(36, Node.QUOTED_PROP);
227:       assertEquals(48, Node.DIRECTIVES);
228:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
229:       assertEquals(56, Node.CHANGE_TIME);
230:       
231:       node0.setLength(1013);
232:       assertEquals(0, node0.getChildCount());
233:       assertFalse(node0.isSetterDef());
234:       assertFalse(node0.isCatch());
235:       assertFalse(node0.isNull());
236:       assertFalse(node0.isDebugger());
237:       assertFalse(node0.isVoid());
238:       assertFalse(node0.isStringKey());
239:       assertFalse(node0.isName());
240:       assertFalse(node0.isTrue());
241:       assertFalse(node0.isParamList());
242:       assertFalse(node0.isTry());
243:       assertFalse(node0.isCall());
244:       assertFalse(node0.isRegExp());
245:       assertFalse(node0.isBlock());
246:       assertEquals(39, node0.getType());
247:       assertFalse(node0.isWhile());
248:       assertFalse(node0.isFor());
249:       assertFalse(node0.isIn());
250:       assertFalse(node0.hasMoreThanOneChild());
251:       assertTrue(node0.isNumber());
252:       assertEquals((-1), node0.getLineno());
253:       assertFalse(node0.isContinue());
254:       assertFalse(node0.isString());
255:       assertEquals((-1), node0.getSourcePosition());
256:       assertFalse(node0.isIf());
257:       assertFalse(node0.isNE());
258:       assertFalse(node0.isFalse());
259:       assertFalse(node0.isInc());
260:       assertFalse(node0.isCast());
261:       assertFalse(node0.isFunction());
262:       assertFalse(node0.isThrow());
263:       assertFalse(node0.isInstanceOf());
264:       assertFalse(node0.isObjectLit());
265:       assertFalse(node0.isWith());
266:       assertFalse(node0.isGetProp());
267:       assertFalse(node0.isBreak());
268:       assertFalse(node0.isNot());
269:       assertFalse(node0.isAnd());
270:       assertFalse(node0.isHook());
271:       assertFalse(node0.hasOneChild());
272:       assertFalse(node0.isGetElem());
273:       assertFalse(node0.isExprResult());
274:       assertFalse(node0.isScript());
275:       assertFalse(node0.isDec());
276:       assertFalse(node0.isTypeOf());
277:       assertFalse(node0.hasChildren());
278:       assertFalse(node0.isComma());
279:       assertFalse(node0.isAssign());
280:       assertFalse(node0.isThis());
281:       assertFalse(node0.isReturn());
282:       assertFalse(node0.isOr());
283:       assertFalse(node0.isCase());
284:       assertFalse(node0.isSwitch());
285:       assertFalse(node0.isDelProp());
286:       assertFalse(node0.isGetterDef());
287:       assertFalse(node0.isLabelName());
288:       assertEquals((-1), node0.getCharno());
289:       assertFalse(node0.isArrayLit());
290:       assertFalse(node0.isAdd());
291:       assertFalse(node0.isNew());
292:       assertFalse(node0.isEmpty());
293:       assertFalse(node0.isDefaultCase());
294:       assertFalse(node0.isDo());
295:       assertFalse(node0.isLabel());
296:       assertFalse(node0.isAssignAdd());
297:       assertFalse(node0.isVar());
298:       assertEquals(46, Node.IS_NAMESPACE);
299:       assertEquals(12, Node.COLUMN_BITS);
300:       assertEquals(32, Node.INCRDECR_PROP);
301:       assertEquals(51, Node.STATIC_SOURCE_FILE);
302:       assertEquals(15, Node.NO_SIDE_EFFECTS);
303:       assertEquals(57, Node.LAST_PROP);
304:       assertEquals(47, Node.IS_DISPATCHER);
305:       assertEquals(2, Node.POST_FLAG);
306:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
307:       assertEquals(30, Node.VAR_ARGS_NAME);
308:       assertEquals(1, Node.DECR_FLAG);
309:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
310:       assertEquals(40, Node.ORIGINALNAME_PROP);
311:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
312:       assertEquals(50, Node.FREE_CALL);
313:       assertEquals(54, Node.SLASH_V);
314:       assertEquals(43, Node.IS_CONSTANT_NAME);
315:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
316:       assertEquals(8, Node.FLAG_NO_THROWS);
317:       assertEquals(39, Node.EMPTY_BLOCK);
318:       assertEquals(55, Node.INFERRED_FUNCTION);
319:       assertEquals(4095, Node.COLUMN_MASK);
320:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
321:       assertEquals(57, Node.REFLECTED_OBJECT);
322:       assertEquals(53, Node.INPUT_ID);
323:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
324:       assertEquals(29, Node.JSDOC_INFO_PROP);
325:       assertEquals(52, Node.LENGTH);
326:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
327:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
328:       assertEquals(49, Node.DIRECT_EVAL);
329:       assertEquals(37, Node.OPT_ARG_NAME);
330:       assertEquals(36, Node.QUOTED_PROP);
331:       assertEquals(48, Node.DIRECTIVES);
332:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
333:       assertEquals(56, Node.CHANGE_TIME);
334:       
335:       String string0 = node0.toString();
336:       assertEquals(0, node0.getChildCount());
337:       assertFalse(node0.isSetterDef());
338:       assertFalse(node0.isCatch());
339:       assertFalse(node0.isNull());
340:       assertFalse(node0.isDebugger());
341:       assertFalse(node0.isVoid());
342:       assertFalse(node0.isStringKey());
343:       assertFalse(node0.isName());
344:       assertFalse(node0.isTrue());
345:       assertFalse(node0.isParamList());
346:       assertFalse(node0.isTry());
347:       assertFalse(node0.isCall());
348:       assertFalse(node0.isRegExp());
349:       assertFalse(node0.isBlock());
350:       assertEquals(39, node0.getType());
351:       assertFalse(node0.isWhile());
352:       assertFalse(node0.isFor());
353:       assertFalse(node0.isIn());
354:       assertFalse(node0.hasMoreThanOneChild());
355:       assertTrue(node0.isNumber());
356:       assertEquals((-1), node0.getLineno());
357:       assertFalse(node0.isContinue());
358:       assertFalse(node0.isString());
359:       assertEquals((-1), node0.getSourcePosition());
360:       assertFalse(node0.isIf());
361:       assertFalse(node0.isNE());
362:       assertFalse(node0.isFalse());
363:       assertFalse(node0.isInc());
364:       assertFalse(node0.isCast());
365:       assertFalse(node0.isFunction());
366:       assertFalse(node0.isThrow());
367:       assertFalse(node0.isInstanceOf());
368:       assertFalse(node0.isObjectLit());
369:       assertFalse(node0.isWith());
370:       assertFalse(node0.isGetProp());
371:       assertFalse(node0.isBreak());
372:       assertFalse(node0.isNot());
373:       assertFalse(node0.isAnd());
374:       assertFalse(node0.isHook());
375:       assertFalse(node0.hasOneChild());
376:       assertFalse(node0.isGetElem());
377:       assertFalse(node0.isExprResult());
378:       assertFalse(node0.isScript());
379:       assertFalse(node0.isDec());
380:       assertFalse(node0.isTypeOf());
381:       assertFalse(node0.hasChildren());
382:       assertFalse(node0.isComma());
383:       assertFalse(node0.isAssign());
384:       assertFalse(node0.isThis());
385:       assertFalse(node0.isReturn());
386:       assertFalse(node0.isOr());
387:       assertFalse(node0.isCase());
388:       assertFalse(node0.isSwitch());
389:       assertFalse(node0.isDelProp());
390:       assertFalse(node0.isGetterDef());
391:       assertFalse(node0.isLabelName());
392:       assertEquals((-1), node0.getCharno());
393:       assertFalse(node0.isArrayLit());
394:       assertFalse(node0.isAdd());
395:       assertFalse(node0.isNew());
396:       assertFalse(node0.isEmpty());
397:       assertFalse(node0.isDefaultCase());
398:       assertFalse(node0.isDo());
399:       assertFalse(node0.isLabel());
400:       assertFalse(node0.isAssignAdd());
401:       assertFalse(node0.isVar());
402:       assertNotNull(string0);
403:       assertEquals(46, Node.IS_NAMESPACE);
404:       assertEquals(12, Node.COLUMN_BITS);
405:       assertEquals(32, Node.INCRDECR_PROP);
406:       assertEquals(51, Node.STATIC_SOURCE_FILE);
407:       assertEquals(15, Node.NO_SIDE_EFFECTS);
408:       assertEquals(57, Node.LAST_PROP);
409:       assertEquals(47, Node.IS_DISPATCHER);
410:       assertEquals(2, Node.POST_FLAG);
411:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
412:       assertEquals(30, Node.VAR_ARGS_NAME);
413:       assertEquals(1, Node.DECR_FLAG);
414:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
415:       assertEquals(40, Node.ORIGINALNAME_PROP);
416:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
417:       assertEquals(50, Node.FREE_CALL);
418:       assertEquals(54, Node.SLASH_V);
419:       assertEquals(43, Node.IS_CONSTANT_NAME);
420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
421:       assertEquals(8, Node.FLAG_NO_THROWS);
422:       assertEquals(39, Node.EMPTY_BLOCK);
423:       assertEquals(55, Node.INFERRED_FUNCTION);
424:       assertEquals(4095, Node.COLUMN_MASK);
425:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
426:       assertEquals(57, Node.REFLECTED_OBJECT);
427:       assertEquals(53, Node.INPUT_ID);
428:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
429:       assertEquals(29, Node.JSDOC_INFO_PROP);
430:       assertEquals(52, Node.LENGTH);
431:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
432:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
433:       assertEquals(49, Node.DIRECT_EVAL);
434:       assertEquals(37, Node.OPT_ARG_NAME);
435:       assertEquals(36, Node.QUOTED_PROP);
436:       assertEquals(48, Node.DIRECTIVES);
437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
438:       assertEquals(56, Node.CHANGE_TIME);
439:       
440:       node0.setOptionalArg(true);
441:       assertEquals(0, node0.getChildCount());
442:       assertFalse(node0.isSetterDef());
443:       assertFalse(node0.isCatch());
444:       assertFalse(node0.isNull());
445:       assertFalse(node0.isDebugger());
446:       assertFalse(node0.isVoid());
447:       assertFalse(node0.isStringKey());
448:       assertFalse(node0.isName());
449:       assertFalse(node0.isTrue());
450:       assertFalse(node0.isParamList());
451:       assertFalse(node0.isTry());
452:       assertFalse(node0.isCall());
453:       assertFalse(node0.isRegExp());
454:       assertFalse(node0.isBlock());
455:       assertEquals(39, node0.getType());
456:       assertFalse(node0.isWhile());
457:       assertFalse(node0.isFor());
458:       assertFalse(node0.isIn());
459:       assertFalse(node0.hasMoreThanOneChild());
460:       assertTrue(node0.isNumber());
461:       assertEquals((-1), node0.getLineno());
462:       assertFalse(node0.isContinue());
463:       assertFalse(node0.isString());
464:       assertEquals((-1), node0.getSourcePosition());
465:       assertFalse(node0.isIf());
466:       assertFalse(node0.isNE());
467:       assertFalse(node0.isFalse());
468:       assertFalse(node0.isInc());
469:       assertFalse(node0.isCast());
470:       assertFalse(node0.isFunction());
471:       assertFalse(node0.isThrow());
472:       assertFalse(node0.isInstanceOf());
473:       assertFalse(node0.isObjectLit());
474:       assertFalse(node0.isWith());
475:       assertFalse(node0.isGetProp());
476:       assertFalse(node0.isBreak());
477:       assertFalse(node0.isNot());
478:       assertFalse(node0.isAnd());
479:       assertFalse(node0.isHook());
480:       assertFalse(node0.hasOneChild());
481:       assertFalse(node0.isGetElem());
482:       assertFalse(node0.isExprResult());
483:       assertFalse(node0.isScript());
484:       assertFalse(node0.isDec());
485:       assertFalse(node0.isTypeOf());
486:       assertFalse(node0.hasChildren());
487:       assertFalse(node0.isComma());
488:       assertFalse(node0.isAssign());
489:       assertFalse(node0.isThis());
490:       assertFalse(node0.isReturn());
491:       assertFalse(node0.isOr());
492:       assertFalse(node0.isCase());
493:       assertFalse(node0.isSwitch());
494:       assertFalse(node0.isDelProp());
495:       assertFalse(node0.isGetterDef());
496:       assertFalse(node0.isLabelName());
497:       assertEquals((-1), node0.getCharno());
498:       assertFalse(node0.isArrayLit());
499:       assertFalse(node0.isAdd());
500:       assertFalse(node0.isNew());
501:       assertFalse(node0.isEmpty());
502:       assertFalse(node0.isDefaultCase());
503:       assertFalse(node0.isDo());
504:       assertFalse(node0.isLabel());
505:       assertFalse(node0.isAssignAdd());
506:       assertFalse(node0.isVar());
507:       assertEquals(46, Node.IS_NAMESPACE);
508:       assertEquals(12, Node.COLUMN_BITS);
509:       assertEquals(32, Node.INCRDECR_PROP);
510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
511:       assertEquals(15, Node.NO_SIDE_EFFECTS);
512:       assertEquals(57, Node.LAST_PROP);
513:       assertEquals(47, Node.IS_DISPATCHER);
514:       assertEquals(2, Node.POST_FLAG);
515:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
516:       assertEquals(30, Node.VAR_ARGS_NAME);
517:       assertEquals(1, Node.DECR_FLAG);
518:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
519:       assertEquals(40, Node.ORIGINALNAME_PROP);
520:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
521:       assertEquals(50, Node.FREE_CALL);
522:       assertEquals(54, Node.SLASH_V);
523:       assertEquals(43, Node.IS_CONSTANT_NAME);
524:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
525:       assertEquals(8, Node.FLAG_NO_THROWS);
526:       assertEquals(39, Node.EMPTY_BLOCK);
527:       assertEquals(55, Node.INFERRED_FUNCTION);
528:       assertEquals(4095, Node.COLUMN_MASK);
529:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
530:       assertEquals(57, Node.REFLECTED_OBJECT);
531:       assertEquals(53, Node.INPUT_ID);
532:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
533:       assertEquals(29, Node.JSDOC_INFO_PROP);
534:       assertEquals(52, Node.LENGTH);
535:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
536:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
537:       assertEquals(49, Node.DIRECT_EVAL);
538:       assertEquals(37, Node.OPT_ARG_NAME);
539:       assertEquals(36, Node.QUOTED_PROP);
540:       assertEquals(48, Node.DIRECTIVES);
541:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
542:       assertEquals(56, Node.CHANGE_TIME);
543:       
544:       Node node1 = new Node(1980, node0, node0);
545:       assertEquals(0, node0.getChildCount());
546:       assertFalse(node0.isSetterDef());
547:       assertFalse(node0.isCatch());
548:       assertFalse(node0.isNull());
549:       assertFalse(node0.isDebugger());
550:       assertFalse(node0.isVoid());
551:       assertFalse(node0.isStringKey());
552:       assertFalse(node0.isName());
553:       assertFalse(node0.isTrue());
554:       assertFalse(node0.isParamList());
555:       assertFalse(node0.isTry());
556:       assertFalse(node0.isCall());
557:       assertFalse(node0.isRegExp());
558:       assertFalse(node0.isBlock());
559:       assertEquals(39, node0.getType());
560:       assertFalse(node0.isWhile());
561:       assertFalse(node0.isFor());
562:       assertFalse(node0.isIn());
563:       assertFalse(node0.hasMoreThanOneChild());
564:       assertTrue(node0.isNumber());
565:       assertEquals((-1), node0.getLineno());
566:       assertFalse(node0.isContinue());
567:       assertFalse(node0.isString());
568:       assertEquals((-1), node0.getSourcePosition());
569:       assertFalse(node0.isIf());
570:       assertFalse(node0.isNE());
571:       assertFalse(node0.isFalse());
572:       assertFalse(node0.isInc());
573:       assertFalse(node0.isCast());
574:       assertFalse(node0.isFunction());
575:       assertFalse(node0.isThrow());
576:       assertFalse(node0.isInstanceOf());
577:       assertFalse(node0.isObjectLit());
578:       assertFalse(node0.isWith());
579:       assertFalse(node0.isGetProp());
580:       assertFalse(node0.isBreak());
581:       assertFalse(node0.isNot());
582:       assertFalse(node0.isAnd());
583:       assertFalse(node0.isHook());
584:       assertFalse(node0.hasOneChild());
585:       assertFalse(node0.isGetElem());
586:       assertFalse(node0.isExprResult());
587:       assertFalse(node0.isScript());
588:       assertFalse(node0.isDec());
589:       assertFalse(node0.isTypeOf());
590:       assertFalse(node0.hasChildren());
591:       assertFalse(node0.isComma());
592:       assertFalse(node0.isAssign());
593:       assertFalse(node0.isThis());
594:       assertFalse(node0.isReturn());
595:       assertFalse(node0.isOr());
596:       assertFalse(node0.isCase());
597:       assertFalse(node0.isSwitch());
598:       assertFalse(node0.isDelProp());
599:       assertFalse(node0.isGetterDef());
600:       assertFalse(node0.isLabelName());
601:       assertEquals((-1), node0.getCharno());
602:       assertFalse(node0.isArrayLit());
603:       assertFalse(node0.isAdd());
604:       assertFalse(node0.isNew());
605:       assertFalse(node0.isEmpty());
606:       assertFalse(node0.isDefaultCase());
607:       assertFalse(node0.isDo());
608:       assertFalse(node0.isLabel());
609:       assertFalse(node0.isAssignAdd());
610:       assertFalse(node0.isVar());
611:       assertFalse(node1.isTrue());
612:       assertFalse(node1.isFunction());
613:       assertFalse(node1.isRegExp());
614:       assertFalse(node1.isVoid());
615:       assertFalse(node1.isDefaultCase());
616:       assertFalse(node1.isTry());
617:       assertFalse(node1.isArrayLit());
618:       assertFalse(node1.isGetterDef());
619:       assertFalse(node1.isDebugger());
620:       assertFalse(node1.isSetterDef());
621:       assertFalse(node1.isParamList());
622:       assertFalse(node1.isEmpty());
623:       assertFalse(node1.isVar());
624:       assertFalse(node1.isSwitch());
625:       assertFalse(node1.isInc());
626:       assertFalse(node1.isCase());
627:       assertFalse(node1.isStringKey());
628:       assertFalse(node1.isIn());
629:       assertEquals(1980, node1.getType());
630:       assertEquals((-1), node1.getCharno());
631:       assertFalse(node1.isNE());
632:       assertFalse(node1.isThis());
633:       assertFalse(node1.isNumber());
634:       assertFalse(node1.isIf());
635:       assertEquals((-1), node1.getLineno());
636:       assertTrue(node1.hasChildren());
637:       assertFalse(node1.hasMoreThanOneChild());
638:       assertFalse(node1.isCatch());
639:       assertFalse(node1.isInstanceOf());
640:       assertFalse(node1.isWith());
641:       assertFalse(node1.isFor());
642:       assertFalse(node1.isBlock());
643:       assertFalse(node1.isHook());
644:       assertEquals(1, node1.getChildCount());
645:       assertFalse(node1.isScript());
646:       assertFalse(node1.isExprResult());
647:       assertFalse(node1.isObjectLit());
648:       assertFalse(node1.isAnd());
649:       assertFalse(node1.isNot());
650:       assertEquals((-1), node1.getSourcePosition());
651:       assertFalse(node1.isLabelName());
652:       assertFalse(node1.isAssignAdd());
653:       assertFalse(node1.isCast());
654:       assertFalse(node1.isThrow());
655:       assertFalse(node1.isFalse());
656:       assertFalse(node1.isContinue());
657:       assertFalse(node1.isLabel());
658:       assertFalse(node1.isWhile());
659:       assertFalse(node1.isString());
660:       assertFalse(node1.isDo());
661:       assertFalse(node1.isAdd());
662:       assertFalse(node1.isNew());
663:       assertFalse(node1.isOr());
664:       assertFalse(node1.isComma());
665:       assertFalse(node1.isNull());
666:       assertFalse(node1.isTypeOf());
667:       assertFalse(node1.isDelProp());
668:       assertFalse(node1.isName());
669:       assertFalse(node1.isGetProp());
670:       assertFalse(node1.isGetElem());
671:       assertFalse(node1.isBreak());
672:       assertFalse(node1.isCall());
673:       assertTrue(node1.hasOneChild());
674:       assertFalse(node1.isAssign());
675:       assertFalse(node1.isReturn());
676:       assertFalse(node1.isDec());
677:       assertNotNull(node1);
678:       assertFalse(node1.equals((Object)node0));
679:       assertEquals(46, Node.IS_NAMESPACE);
680:       assertEquals(12, Node.COLUMN_BITS);
681:       assertEquals(32, Node.INCRDECR_PROP);
682:       assertEquals(51, Node.STATIC_SOURCE_FILE);
683:       assertEquals(15, Node.NO_SIDE_EFFECTS);
684:       assertEquals(57, Node.LAST_PROP);
685:       assertEquals(47, Node.IS_DISPATCHER);
686:       assertEquals(2, Node.POST_FLAG);
687:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
688:       assertEquals(30, Node.VAR_ARGS_NAME);
689:       assertEquals(1, Node.DECR_FLAG);
690:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
691:       assertEquals(40, Node.ORIGINALNAME_PROP);
692:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
693:       assertEquals(50, Node.FREE_CALL);
694:       assertEquals(54, Node.SLASH_V);
695:       assertEquals(43, Node.IS_CONSTANT_NAME);
696:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
697:       assertEquals(8, Node.FLAG_NO_THROWS);
698:       assertEquals(39, Node.EMPTY_BLOCK);
699:       assertEquals(55, Node.INFERRED_FUNCTION);
700:       assertEquals(4095, Node.COLUMN_MASK);
701:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
702:       assertEquals(57, Node.REFLECTED_OBJECT);
703:       assertEquals(53, Node.INPUT_ID);
704:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
705:       assertEquals(29, Node.JSDOC_INFO_PROP);
706:       assertEquals(52, Node.LENGTH);
707:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
708:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
709:       assertEquals(49, Node.DIRECT_EVAL);
710:       assertEquals(37, Node.OPT_ARG_NAME);
711:       assertEquals(36, Node.QUOTED_PROP);
712:       assertEquals(48, Node.DIRECTIVES);
713:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
714:       assertEquals(56, Node.CHANGE_TIME);
715:       assertEquals(57, Node.LAST_PROP);
716:       assertEquals(49, Node.DIRECT_EVAL);
717:       assertEquals(1, Node.DECR_FLAG);
718:       assertEquals(15, Node.NO_SIDE_EFFECTS);
719:       assertEquals(12, Node.COLUMN_BITS);
720:       assertEquals(32, Node.INCRDECR_PROP);
721:       assertEquals(30, Node.VAR_ARGS_NAME);
722:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
723:       assertEquals(56, Node.CHANGE_TIME);
724:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
725:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
726:       assertEquals(8, Node.FLAG_NO_THROWS);
727:       assertEquals(29, Node.JSDOC_INFO_PROP);
728:       assertEquals(48, Node.DIRECTIVES);
729:       assertEquals(37, Node.OPT_ARG_NAME);
730:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
731:       assertEquals(39, Node.EMPTY_BLOCK);
732:       assertEquals(55, Node.INFERRED_FUNCTION);
733:       assertEquals(52, Node.LENGTH);
734:       assertEquals(57, Node.REFLECTED_OBJECT);
735:       assertEquals(43, Node.IS_CONSTANT_NAME);
736:       assertEquals(36, Node.QUOTED_PROP);
737:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
738:       assertEquals(53, Node.INPUT_ID);
739:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
740:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
741:       assertEquals(4095, Node.COLUMN_MASK);
742:       assertEquals(47, Node.IS_DISPATCHER);
743:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
744:       assertEquals(2, Node.POST_FLAG);
745:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
746:       assertEquals(40, Node.ORIGINALNAME_PROP);
747:       assertEquals(51, Node.STATIC_SOURCE_FILE);
748:       assertEquals(50, Node.FREE_CALL);
749:       assertEquals(46, Node.IS_NAMESPACE);
750:       assertEquals(54, Node.SLASH_V);
751:       
752:       boolean boolean0 = node0.isThis();
753:       assertEquals(0, node0.getChildCount());
754:       assertFalse(node0.isSetterDef());
755:       assertFalse(node0.isCatch());
756:       assertFalse(node0.isNull());
757:       assertFalse(node0.isDebugger());
758:       assertFalse(node0.isVoid());
759:       assertFalse(node0.isStringKey());
760:       assertFalse(node0.isName());
761:       assertFalse(node0.isTrue());
762:       assertFalse(node0.isParamList());
763:       assertFalse(node0.isTry());
764:       assertFalse(node0.isCall());
765:       assertFalse(node0.isRegExp());
766:       assertFalse(node0.isBlock());
767:       assertEquals(39, node0.getType());
768:       assertFalse(node0.isWhile());
769:       assertFalse(node0.isFor());
770:       assertFalse(node0.isIn());
771:       assertFalse(node0.hasMoreThanOneChild());
772:       assertTrue(node0.isNumber());
773:       assertEquals((-1), node0.getLineno());
774:       assertFalse(node0.isContinue());
775:       assertFalse(node0.isString());
776:       assertEquals((-1), node0.getSourcePosition());
777:       assertFalse(node0.isIf());
778:       assertFalse(node0.isNE());
779:       assertFalse(node0.isFalse());
780:       assertFalse(node0.isInc());
781:       assertFalse(node0.isCast());
782:       assertFalse(node0.isFunction());
783:       assertFalse(node0.isThrow());
784:       assertFalse(node0.isInstanceOf());
785:       assertFalse(node0.isObjectLit());
786:       assertFalse(node0.isWith());
787:       assertFalse(node0.isGetProp());
788:       assertFalse(node0.isBreak());
789:       assertFalse(node0.isNot());
790:       assertFalse(node0.isAnd());
791:       assertFalse(node0.isHook());
792:       assertFalse(node0.hasOneChild());
793:       assertFalse(node0.isGetElem());
794:       assertFalse(node0.isExprResult());
795:       assertFalse(node0.isScript());
796:       assertFalse(node0.isDec());
797:       assertFalse(node0.isTypeOf());
798:       assertFalse(node0.hasChildren());
799:       assertFalse(node0.isComma());
800:       assertFalse(node0.isAssign());
801:       assertFalse(node0.isThis());
802:       assertFalse(node0.isReturn());
803:       assertFalse(node0.isOr());
804:       assertFalse(node0.isCase());
805:       assertFalse(node0.isSwitch());
806:       assertFalse(node0.isDelProp());
807:       assertFalse(node0.isGetterDef());
808:       assertFalse(node0.isLabelName());
809:       assertEquals((-1), node0.getCharno());
810:       assertFalse(node0.isArrayLit());
811:       assertFalse(node0.isAdd());
812:       assertFalse(node0.isNew());
813:       assertFalse(node0.isEmpty());
814:       assertFalse(node0.isDefaultCase());
815:       assertFalse(node0.isDo());
816:       assertFalse(node0.isLabel());
817:       assertFalse(node0.isAssignAdd());
818:       assertFalse(node0.isVar());
819:       assertFalse(boolean0);
820:       assertFalse(node0.equals((Object)node1));
821:       assertEquals(46, Node.IS_NAMESPACE);
822:       assertEquals(12, Node.COLUMN_BITS);
823:       assertEquals(32, Node.INCRDECR_PROP);
824:       assertEquals(51, Node.STATIC_SOURCE_FILE);
825:       assertEquals(15, Node.NO_SIDE_EFFECTS);
826:       assertEquals(57, Node.LAST_PROP);
827:       assertEquals(47, Node.IS_DISPATCHER);
828:       assertEquals(2, Node.POST_FLAG);
829:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
830:       assertEquals(30, Node.VAR_ARGS_NAME);
831:       assertEquals(1, Node.DECR_FLAG);
832:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
833:       assertEquals(40, Node.ORIGINALNAME_PROP);
834:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
835:       assertEquals(50, Node.FREE_CALL);
836:       assertEquals(54, Node.SLASH_V);
837:       assertEquals(43, Node.IS_CONSTANT_NAME);
838:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
839:       assertEquals(8, Node.FLAG_NO_THROWS);
840:       assertEquals(39, Node.EMPTY_BLOCK);
841:       assertEquals(55, Node.INFERRED_FUNCTION);
842:       assertEquals(4095, Node.COLUMN_MASK);
843:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
844:       assertEquals(57, Node.REFLECTED_OBJECT);
845:       assertEquals(53, Node.INPUT_ID);
846:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
847:       assertEquals(29, Node.JSDOC_INFO_PROP);
848:       assertEquals(52, Node.LENGTH);
849:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
850:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
851:       assertEquals(49, Node.DIRECT_EVAL);
852:       assertEquals(37, Node.OPT_ARG_NAME);
853:       assertEquals(36, Node.QUOTED_PROP);
854:       assertEquals(48, Node.DIRECTIVES);
855:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
856:       assertEquals(56, Node.CHANGE_TIME);
857:       
858:       Node node2 = Node.newString((-2921), "NUMBER -1907.0901721195278 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002]", 46, 100);
859:       assertFalse(node2.hasOneChild());
860:       assertFalse(node2.isNot());
861:       assertFalse(node2.isNumber());
862:       assertFalse(node2.isScript());
863:       assertFalse(node2.isAssignAdd());
864:       assertFalse(node2.isAnd());
865:       assertFalse(node2.isObjectLit());
866:       assertFalse(node2.isLabel());
867:       assertFalse(node2.isLabelName());
868:       assertEquals(100, node2.getCharno());
869:       assertFalse(node2.isFalse());
870:       assertFalse(node2.isContinue());
871:       assertFalse(node2.isCast());
872:       assertFalse(node2.isStringKey());
873:       assertFalse(node2.isThrow());
874:       assertFalse(node2.isBlock());
875:       assertFalse(node2.isHook());
876:       assertFalse(node2.isInc());
877:       assertFalse(node2.isCase());
878:       assertFalse(node2.isSetterDef());
879:       assertFalse(node2.isInstanceOf());
880:       assertFalse(node2.isIn());
881:       assertFalse(node2.hasMoreThanOneChild());
882:       assertFalse(node2.isThis());
883:       assertFalse(node2.isNE());
884:       assertEquals((-2921), node2.getType());
885:       assertFalse(node2.isRegExp());
886:       assertFalse(node2.isIf());
887:       assertFalse(node2.isWith());
888:       assertFalse(node2.isCatch());
889:       assertFalse(node2.isTry());
890:       assertEquals(46, node2.getLineno());
891:       assertFalse(node2.isTrue());
892:       assertFalse(node2.isDebugger());
893:       assertFalse(node2.isFunction());
894:       assertFalse(node2.isFor());
895:       assertFalse(node2.isGetterDef());
896:       assertFalse(node2.isEmpty());
897:       assertFalse(node2.isDefaultCase());
898:       assertEquals(0, node2.getChildCount());
899:       assertFalse(node2.isParamList());
900:       assertFalse(node2.isSwitch());
901:       assertFalse(node2.isArrayLit());
902:       assertFalse(node2.isVar());
903:       assertFalse(node2.isWhile());
904:       assertFalse(node2.isString());
905:       assertFalse(node2.isDo());
906:       assertFalse(node2.isAdd());
907:       assertFalse(node2.isNew());
908:       assertFalse(node2.isGetProp());
909:       assertFalse(node2.isReturn());
910:       assertFalse(node2.isOr());
911:       assertFalse(node2.isComma());
912:       assertFalse(node2.isNull());
913:       assertFalse(node2.hasChildren());
914:       assertFalse(node2.isDelProp());
915:       assertFalse(node2.isAssign());
916:       assertFalse(node2.isDec());
917:       assertFalse(node2.isName());
918:       assertFalse(node2.isTypeOf());
919:       assertEquals(188516, node2.getSourcePosition());
920:       assertFalse(node2.isCall());
921:       assertFalse(node2.isExprResult());
922:       assertFalse(node2.isVoid());
923:       assertFalse(node2.isGetElem());
924:       assertFalse(node2.isBreak());
925:       assertNotNull(node2);
926:       assertFalse(node2.equals((Object)node0));
927:       assertFalse(node2.equals((Object)node1));
928:       assertEquals(52, Node.LENGTH);
929:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
930:       assertEquals(54, Node.SLASH_V);
931:       assertEquals(57, Node.REFLECTED_OBJECT);
932:       assertEquals(30, Node.VAR_ARGS_NAME);
933:       assertEquals(49, Node.DIRECT_EVAL);
934:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
935:       assertEquals(40, Node.ORIGINALNAME_PROP);
936:       assertEquals(48, Node.DIRECTIVES);
937:       assertEquals(2, Node.POST_FLAG);
938:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
939:       assertEquals(56, Node.CHANGE_TIME);
940:       assertEquals(47, Node.IS_DISPATCHER);
941:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
942:       assertEquals(57, Node.LAST_PROP);
943:       assertEquals(55, Node.INFERRED_FUNCTION);
944:       assertEquals(8, Node.FLAG_NO_THROWS);
945:       assertEquals(39, Node.EMPTY_BLOCK);
946:       assertEquals(15, Node.NO_SIDE_EFFECTS);
947:       assertEquals(29, Node.JSDOC_INFO_PROP);
948:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
949:       assertEquals(53, Node.INPUT_ID);
950:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
951:       assertEquals(43, Node.IS_CONSTANT_NAME);
952:       assertEquals(36, Node.QUOTED_PROP);
953:       assertEquals(37, Node.OPT_ARG_NAME);
954:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
955:       assertEquals(4095, Node.COLUMN_MASK);
956:       assertEquals(32, Node.INCRDECR_PROP);
957:       assertEquals(51, Node.STATIC_SOURCE_FILE);
958:       assertEquals(12, Node.COLUMN_BITS);
959:       assertEquals(46, Node.IS_NAMESPACE);
960:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
961:       assertEquals(1, Node.DECR_FLAG);
962:       assertEquals(50, Node.FREE_CALL);
963:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
964:       
965:       node2.setCharno((-3111));
966:       assertFalse(node2.hasOneChild());
967:       assertFalse(node2.isNot());
968:       assertFalse(node2.isNumber());
969:       assertFalse(node2.isScript());
970:       assertFalse(node2.isAssignAdd());
971:       assertFalse(node2.isAnd());
972:       assertFalse(node2.isObjectLit());
973:       assertEquals((-1), node2.getSourcePosition());
974:       assertFalse(node2.isLabel());
975:       assertFalse(node2.isLabelName());
976:       assertFalse(node2.isFalse());
977:       assertFalse(node2.isContinue());
978:       assertFalse(node2.isCast());
979:       assertEquals((-1), node2.getCharno());
980:       assertFalse(node2.isStringKey());
981:       assertFalse(node2.isThrow());
982:       assertFalse(node2.isBlock());
983:       assertFalse(node2.isHook());
984:       assertFalse(node2.isInc());
985:       assertFalse(node2.isCase());
986:       assertFalse(node2.isSetterDef());
987:       assertEquals((-1), node2.getLineno());
988:       assertFalse(node2.isInstanceOf());
989:       assertFalse(node2.isIn());
990:       assertFalse(node2.hasMoreThanOneChild());
991:       assertFalse(node2.isThis());
992:       assertFalse(node2.isNE());
993:       assertEquals((-2921), node2.getType());
994:       assertFalse(node2.isRegExp());
995:       assertFalse(node2.isIf());
996:       assertFalse(node2.isWith());
997:       assertFalse(node2.isCatch());
998:       assertFalse(node2.isTry());
999:       assertFalse(node2.isTrue());
1000:       assertFalse(node2.isDebugger());
1001:       assertFalse(node2.isFunction());
1002:       assertFalse(node2.isFor());
1003:       assertFalse(node2.isGetterDef());
1004:       assertFalse(node2.isEmpty());
1005:       assertFalse(node2.isDefaultCase());
1006:       assertEquals(0, node2.getChildCount());
1007:       assertFalse(node2.isParamList());
1008:       assertFalse(node2.isSwitch());
1009:       assertFalse(node2.isArrayLit());
1010:       assertFalse(node2.isVar());
1011:       assertFalse(node2.isWhile());
1012:       assertFalse(node2.isString());
1013:       assertFalse(node2.isDo());
1014:       assertFalse(node2.isAdd());
1015:       assertFalse(node2.isNew());
1016:       assertFalse(node2.isGetProp());
1017:       assertFalse(node2.isReturn());
1018:       assertFalse(node2.isOr());
1019:       assertFalse(node2.isComma());
1020:       assertFalse(node2.isNull());
1021:       assertFalse(node2.hasChildren());
1022:       assertFalse(node2.isDelProp());
1023:       assertFalse(node2.isAssign());
1024:       assertFalse(node2.isDec());
1025:       assertFalse(node2.isName());
1026:       assertFalse(node2.isTypeOf());
1027:       assertFalse(node2.isCall());
1028:       assertFalse(node2.isExprResult());
1029:       assertFalse(node2.isVoid());
1030:       assertFalse(node2.isGetElem());
1031:       assertFalse(node2.isBreak());
1032:       assertFalse(node2.equals((Object)node0));
1033:       assertFalse(node2.equals((Object)node1));
1034:       assertEquals(52, Node.LENGTH);
1035:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1036:       assertEquals(54, Node.SLASH_V);
1037:       assertEquals(57, Node.REFLECTED_OBJECT);
1038:       assertEquals(30, Node.VAR_ARGS_NAME);
1039:       assertEquals(49, Node.DIRECT_EVAL);
1040:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1041:       assertEquals(40, Node.ORIGINALNAME_PROP);
1042:       assertEquals(48, Node.DIRECTIVES);
1043:       assertEquals(2, Node.POST_FLAG);
1044:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1045:       assertEquals(56, Node.CHANGE_TIME);
1046:       assertEquals(47, Node.IS_DISPATCHER);
1047:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1048:       assertEquals(57, Node.LAST_PROP);
1049:       assertEquals(55, Node.INFERRED_FUNCTION);
1050:       assertEquals(8, Node.FLAG_NO_THROWS);
1051:       assertEquals(39, Node.EMPTY_BLOCK);
1052:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1053:       assertEquals(29, Node.JSDOC_INFO_PROP);
1054:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1055:       assertEquals(53, Node.INPUT_ID);
1056:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1057:       assertEquals(43, Node.IS_CONSTANT_NAME);
1058:       assertEquals(36, Node.QUOTED_PROP);
1059:       assertEquals(37, Node.OPT_ARG_NAME);
1060:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1061:       assertEquals(4095, Node.COLUMN_MASK);
1062:       assertEquals(32, Node.INCRDECR_PROP);
1063:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1064:       assertEquals(12, Node.COLUMN_BITS);
1065:       assertEquals(46, Node.IS_NAMESPACE);
1066:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1067:       assertEquals(1, Node.DECR_FLAG);
1068:       assertEquals(50, Node.FREE_CALL);
1069:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1070:       
1071:       boolean boolean1 = node1.isEquivalentToTyped(node0);
1072:       assertEquals(0, node0.getChildCount());
1073:       assertFalse(node0.isSetterDef());
1074:       assertFalse(node0.isCatch());
1075:       assertFalse(node0.isNull());
1076:       assertFalse(node0.isDebugger());
1077:       assertFalse(node0.isVoid());
1078:       assertFalse(node0.isStringKey());
1079:       assertFalse(node0.isName());
1080:       assertFalse(node0.isTrue());
1081:       assertFalse(node0.isParamList());
1082:       assertFalse(node0.isTry());
1083:       assertFalse(node0.isCall());
1084:       assertFalse(node0.isRegExp());
1085:       assertFalse(node0.isBlock());
1086:       assertEquals(39, node0.getType());
1087:       assertFalse(node0.isWhile());
1088:       assertFalse(node0.isFor());
1089:       assertFalse(node0.isIn());
1090:       assertFalse(node0.hasMoreThanOneChild());
1091:       assertTrue(node0.isNumber());
1092:       assertEquals((-1), node0.getLineno());
1093:       assertFalse(node0.isContinue());
1094:       assertFalse(node0.isString());
1095:       assertEquals((-1), node0.getSourcePosition());
1096:       assertFalse(node0.isIf());
1097:       assertFalse(node0.isNE());
1098:       assertFalse(node0.isFalse());
1099:       assertFalse(node0.isInc());
1100:       assertFalse(node0.isCast());
1101:       assertFalse(node0.isFunction());
1102:       assertFalse(node0.isThrow());
1103:       assertFalse(node0.isInstanceOf());
1104:       assertFalse(node0.isObjectLit());
1105:       assertFalse(node0.isWith());
1106:       assertFalse(node0.isGetProp());
1107:       assertFalse(node0.isBreak());
1108:       assertFalse(node0.isNot());
1109:       assertFalse(node0.isAnd());
1110:       assertFalse(node0.isHook());
1111:       assertFalse(node0.hasOneChild());
1112:       assertFalse(node0.isGetElem());
1113:       assertFalse(node0.isExprResult());
1114:       assertFalse(node0.isScript());
1115:       assertFalse(node0.isDec());
1116:       assertFalse(node0.isTypeOf());
1117:       assertFalse(node0.hasChildren());
1118:       assertFalse(node0.isComma());
1119:       assertFalse(node0.isAssign());
1120:       assertFalse(node0.isThis());
1121:       assertFalse(node0.isReturn());
1122:       assertFalse(node0.isOr());
1123:       assertFalse(node0.isCase());
1124:       assertFalse(node0.isSwitch());
1125:       assertFalse(node0.isDelProp());
1126:       assertFalse(node0.isGetterDef());
1127:       assertFalse(node0.isLabelName());
1128:       assertEquals((-1), node0.getCharno());
1129:       assertFalse(node0.isArrayLit());
1130:       assertFalse(node0.isAdd());
1131:       assertFalse(node0.isNew());
1132:       assertFalse(node0.isEmpty());
1133:       assertFalse(node0.isDefaultCase());
1134:       assertFalse(node0.isDo());
1135:       assertFalse(node0.isLabel());
1136:       assertFalse(node0.isAssignAdd());
1137:       assertFalse(node0.isVar());
1138:       assertFalse(node1.isTrue());
1139:       assertFalse(node1.isFunction());
1140:       assertFalse(node1.isRegExp());
1141:       assertFalse(node1.isVoid());
1142:       assertFalse(node1.isDefaultCase());
1143:       assertFalse(node1.isTry());
1144:       assertFalse(node1.isArrayLit());
1145:       assertFalse(node1.isGetterDef());
1146:       assertFalse(node1.isDebugger());
1147:       assertFalse(node1.isSetterDef());
1148:       assertFalse(node1.isParamList());
1149:       assertFalse(node1.isEmpty());
1150:       assertFalse(node1.isVar());
1151:       assertFalse(node1.isSwitch());
1152:       assertFalse(node1.isInc());
1153:       assertFalse(node1.isCase());
1154:       assertFalse(node1.isStringKey());
1155:       assertFalse(node1.isIn());
1156:       assertEquals(1980, node1.getType());
1157:       assertEquals((-1), node1.getCharno());
1158:       assertFalse(node1.isNE());
1159:       assertFalse(node1.isThis());
1160:       assertFalse(node1.isNumber());
1161:       assertFalse(node1.isIf());
1162:       assertEquals((-1), node1.getLineno());
1163:       assertTrue(node1.hasChildren());
1164:       assertFalse(node1.hasMoreThanOneChild());
1165:       assertFalse(node1.isCatch());
1166:       assertFalse(node1.isInstanceOf());
1167:       assertFalse(node1.isWith());
1168:       assertFalse(node1.isFor());
1169:       assertFalse(node1.isBlock());
1170:       assertFalse(node1.isHook());
1171:       assertEquals(1, node1.getChildCount());
1172:       assertFalse(node1.isScript());
1173:       assertFalse(node1.isExprResult());
1174:       assertFalse(node1.isObjectLit());
1175:       assertFalse(node1.isAnd());
1176:       assertFalse(node1.isNot());
1177:       assertEquals((-1), node1.getSourcePosition());
1178:       assertFalse(node1.isLabelName());
1179:       assertFalse(node1.isAssignAdd());
1180:       assertFalse(node1.isCast());
1181:       assertFalse(node1.isThrow());
1182:       assertFalse(node1.isFalse());
1183:       assertFalse(node1.isContinue());
1184:       assertFalse(node1.isLabel());
1185:       assertFalse(node1.isWhile());
1186:       assertFalse(node1.isString());
1187:       assertFalse(node1.isDo());
1188:       assertFalse(node1.isAdd());
1189:       assertFalse(node1.isNew());
1190:       assertFalse(node1.isOr());
1191:       assertFalse(node1.isComma());
1192:       assertFalse(node1.isNull());
1193:       assertFalse(node1.isTypeOf());
1194:       assertFalse(node1.isDelProp());
1195:       assertFalse(node1.isName());
1196:       assertFalse(node1.isGetProp());
1197:       assertFalse(node1.isGetElem());
1198:       assertFalse(node1.isBreak());
1199:       assertFalse(node1.isCall());
1200:       assertTrue(node1.hasOneChild());
1201:       assertFalse(node1.isAssign());
1202:       assertFalse(node1.isReturn());
1203:       assertFalse(node1.isDec());
1204:       assertFalse(boolean1);
1205:       assertFalse(node0.equals((Object)node1));
1206:       assertFalse(node0.equals((Object)node2));
1207:       assertFalse(node1.equals((Object)node0));
1208:       assertFalse(node1.equals((Object)node2));
1209:       assertTrue(boolean1 == boolean0);
1210:       assertEquals(46, Node.IS_NAMESPACE);
1211:       assertEquals(12, Node.COLUMN_BITS);
1212:       assertEquals(32, Node.INCRDECR_PROP);
1213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1214:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1215:       assertEquals(57, Node.LAST_PROP);
1216:       assertEquals(47, Node.IS_DISPATCHER);
1217:       assertEquals(2, Node.POST_FLAG);
1218:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1219:       assertEquals(30, Node.VAR_ARGS_NAME);
1220:       assertEquals(1, Node.DECR_FLAG);
1221:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1222:       assertEquals(40, Node.ORIGINALNAME_PROP);
1223:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1224:       assertEquals(50, Node.FREE_CALL);
1225:       assertEquals(54, Node.SLASH_V);
1226:       assertEquals(43, Node.IS_CONSTANT_NAME);
1227:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1228:       assertEquals(8, Node.FLAG_NO_THROWS);
1229:       assertEquals(39, Node.EMPTY_BLOCK);
1230:       assertEquals(55, Node.INFERRED_FUNCTION);
1231:       assertEquals(4095, Node.COLUMN_MASK);
1232:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1233:       assertEquals(57, Node.REFLECTED_OBJECT);
1234:       assertEquals(53, Node.INPUT_ID);
1235:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1236:       assertEquals(29, Node.JSDOC_INFO_PROP);
1237:       assertEquals(52, Node.LENGTH);
1238:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1239:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1240:       assertEquals(49, Node.DIRECT_EVAL);
1241:       assertEquals(37, Node.OPT_ARG_NAME);
1242:       assertEquals(36, Node.QUOTED_PROP);
1243:       assertEquals(48, Node.DIRECTIVES);
1244:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1245:       assertEquals(56, Node.CHANGE_TIME);
1246:       assertEquals(57, Node.LAST_PROP);
1247:       assertEquals(49, Node.DIRECT_EVAL);
1248:       assertEquals(1, Node.DECR_FLAG);
1249:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1250:       assertEquals(12, Node.COLUMN_BITS);
1251:       assertEquals(32, Node.INCRDECR_PROP);
1252:       assertEquals(30, Node.VAR_ARGS_NAME);
1253:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1254:       assertEquals(56, Node.CHANGE_TIME);
1255:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1256:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1257:       assertEquals(8, Node.FLAG_NO_THROWS);
1258:       assertEquals(29, Node.JSDOC_INFO_PROP);
1259:       assertEquals(48, Node.DIRECTIVES);
1260:       assertEquals(37, Node.OPT_ARG_NAME);
1261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1262:       assertEquals(39, Node.EMPTY_BLOCK);
1263:       assertEquals(55, Node.INFERRED_FUNCTION);
1264:       assertEquals(52, Node.LENGTH);
1265:       assertEquals(57, Node.REFLECTED_OBJECT);
1266:       assertEquals(43, Node.IS_CONSTANT_NAME);
1267:       assertEquals(36, Node.QUOTED_PROP);
1268:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1269:       assertEquals(53, Node.INPUT_ID);
1270:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1271:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1272:       assertEquals(4095, Node.COLUMN_MASK);
1273:       assertEquals(47, Node.IS_DISPATCHER);
1274:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1275:       assertEquals(2, Node.POST_FLAG);
1276:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1277:       assertEquals(40, Node.ORIGINALNAME_PROP);
1278:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1279:       assertEquals(50, Node.FREE_CALL);
1280:       assertEquals(46, Node.IS_NAMESPACE);
1281:       assertEquals(54, Node.SLASH_V);
1282:       
1283:       node1.setSourceFileForTesting("CGdy$k/:pbdplN#$K!{");
1284:       assertEquals(0, node0.getChildCount());
1285:       assertFalse(node0.isSetterDef());
1286:       assertFalse(node0.isCatch());
1287:       assertFalse(node0.isNull());
1288:       assertFalse(node0.isDebugger());
1289:       assertFalse(node0.isVoid());
1290:       assertFalse(node0.isStringKey());
1291:       assertFalse(node0.isName());
1292:       assertFalse(node0.isTrue());
1293:       assertFalse(node0.isParamList());
1294:       assertFalse(node0.isTry());
1295:       assertFalse(node0.isCall());
1296:       assertFalse(node0.isRegExp());
1297:       assertFalse(node0.isBlock());
1298:       assertEquals(39, node0.getType());
1299:       assertFalse(node0.isWhile());
1300:       assertFalse(node0.isFor());
1301:       assertFalse(node0.isIn());
1302:       assertFalse(node0.hasMoreThanOneChild());
1303:       assertTrue(node0.isNumber());
1304:       assertEquals((-1), node0.getLineno());
1305:       assertFalse(node0.isContinue());
1306:       assertFalse(node0.isString());
1307:       assertEquals((-1), node0.getSourcePosition());
1308:       assertFalse(node0.isIf());
1309:       assertFalse(node0.isNE());
1310:       assertFalse(node0.isFalse());
1311:       assertFalse(node0.isInc());
1312:       assertFalse(node0.isCast());
1313:       assertFalse(node0.isFunction());
1314:       assertFalse(node0.isThrow());
1315:       assertFalse(node0.isInstanceOf());
1316:       assertFalse(node0.isObjectLit());
1317:       assertFalse(node0.isWith());
1318:       assertFalse(node0.isGetProp());
1319:       assertFalse(node0.isBreak());
1320:       assertFalse(node0.isNot());
1321:       assertFalse(node0.isAnd());
1322:       assertFalse(node0.isHook());
1323:       assertFalse(node0.hasOneChild());
1324:       assertFalse(node0.isGetElem());
1325:       assertFalse(node0.isExprResult());
1326:       assertFalse(node0.isScript());
1327:       assertFalse(node0.isDec());
1328:       assertFalse(node0.isTypeOf());
1329:       assertFalse(node0.hasChildren());
1330:       assertFalse(node0.isComma());
1331:       assertFalse(node0.isAssign());
1332:       assertFalse(node0.isThis());
1333:       assertFalse(node0.isReturn());
1334:       assertFalse(node0.isOr());
1335:       assertFalse(node0.isCase());
1336:       assertFalse(node0.isSwitch());
1337:       assertFalse(node0.isDelProp());
1338:       assertFalse(node0.isGetterDef());
1339:       assertFalse(node0.isLabelName());
1340:       assertEquals((-1), node0.getCharno());
1341:       assertFalse(node0.isArrayLit());
1342:       assertFalse(node0.isAdd());
1343:       assertFalse(node0.isNew());
1344:       assertFalse(node0.isEmpty());
1345:       assertFalse(node0.isDefaultCase());
1346:       assertFalse(node0.isDo());
1347:       assertFalse(node0.isLabel());
1348:       assertFalse(node0.isAssignAdd());
1349:       assertFalse(node0.isVar());
1350:       assertFalse(node1.isTrue());
1351:       assertFalse(node1.isFunction());
1352:       assertFalse(node1.isRegExp());
1353:       assertFalse(node1.isVoid());
1354:       assertFalse(node1.isDefaultCase());
1355:       assertFalse(node1.isTry());
1356:       assertFalse(node1.isArrayLit());
1357:       assertFalse(node1.isGetterDef());
1358:       assertFalse(node1.isDebugger());
1359:       assertFalse(node1.isSetterDef());
1360:       assertFalse(node1.isParamList());
1361:       assertFalse(node1.isEmpty());
1362:       assertFalse(node1.isVar());
1363:       assertFalse(node1.isSwitch());
1364:       assertFalse(node1.isInc());
1365:       assertFalse(node1.isCase());
1366:       assertFalse(node1.isStringKey());
1367:       assertFalse(node1.isIn());
1368:       assertEquals(1980, node1.getType());
1369:       assertEquals((-1), node1.getCharno());
1370:       assertFalse(node1.isNE());
1371:       assertFalse(node1.isThis());
1372:       assertFalse(node1.isNumber());
1373:       assertFalse(node1.isIf());
1374:       assertEquals((-1), node1.getLineno());
1375:       assertTrue(node1.hasChildren());
1376:       assertFalse(node1.hasMoreThanOneChild());
1377:       assertFalse(node1.isCatch());
1378:       assertFalse(node1.isInstanceOf());
1379:       assertFalse(node1.isWith());
1380:       assertFalse(node1.isFor());
1381:       assertFalse(node1.isBlock());
1382:       assertFalse(node1.isHook());
1383:       assertEquals(1, node1.getChildCount());
1384:       assertFalse(node1.isScript());
1385:       assertFalse(node1.isExprResult());
1386:       assertFalse(node1.isObjectLit());
1387:       assertFalse(node1.isAnd());
1388:       assertFalse(node1.isNot());
1389:       assertEquals((-1), node1.getSourcePosition());
1390:       assertFalse(node1.isLabelName());
1391:       assertFalse(node1.isAssignAdd());
1392:       assertFalse(node1.isCast());
1393:       assertFalse(node1.isThrow());
1394:       assertFalse(node1.isFalse());
1395:       assertFalse(node1.isContinue());
1396:       assertFalse(node1.isLabel());
1397:       assertFalse(node1.isWhile());
1398:       assertFalse(node1.isString());
1399:       assertFalse(node1.isDo());
1400:       assertFalse(node1.isAdd());
1401:       assertFalse(node1.isNew());
1402:       assertFalse(node1.isOr());
1403:       assertFalse(node1.isComma());
1404:       assertFalse(node1.isNull());
1405:       assertFalse(node1.isTypeOf());
1406:       assertFalse(node1.isDelProp());
1407:       assertFalse(node1.isName());
1408:       assertFalse(node1.isGetProp());
1409:       assertFalse(node1.isGetElem());
1410:       assertFalse(node1.isBreak());
1411:       assertFalse(node1.isCall());
1412:       assertTrue(node1.hasOneChild());
1413:       assertFalse(node1.isAssign());
1414:       assertFalse(node1.isReturn());
1415:       assertFalse(node1.isDec());
1416:       assertFalse(node0.equals((Object)node1));
1417:       assertFalse(node0.equals((Object)node2));
1418:       assertFalse(node1.equals((Object)node0));
1419:       assertFalse(node1.equals((Object)node2));
1420:       assertEquals(46, Node.IS_NAMESPACE);
1421:       assertEquals(12, Node.COLUMN_BITS);
1422:       assertEquals(32, Node.INCRDECR_PROP);
1423:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1424:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1425:       assertEquals(57, Node.LAST_PROP);
1426:       assertEquals(47, Node.IS_DISPATCHER);
1427:       assertEquals(2, Node.POST_FLAG);
1428:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1429:       assertEquals(30, Node.VAR_ARGS_NAME);
1430:       assertEquals(1, Node.DECR_FLAG);
1431:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1432:       assertEquals(40, Node.ORIGINALNAME_PROP);
1433:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1434:       assertEquals(50, Node.FREE_CALL);
1435:       assertEquals(54, Node.SLASH_V);
1436:       assertEquals(43, Node.IS_CONSTANT_NAME);
1437:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1438:       assertEquals(8, Node.FLAG_NO_THROWS);
1439:       assertEquals(39, Node.EMPTY_BLOCK);
1440:       assertEquals(55, Node.INFERRED_FUNCTION);
1441:       assertEquals(4095, Node.COLUMN_MASK);
1442:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1443:       assertEquals(57, Node.REFLECTED_OBJECT);
1444:       assertEquals(53, Node.INPUT_ID);
1445:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1446:       assertEquals(29, Node.JSDOC_INFO_PROP);
1447:       assertEquals(52, Node.LENGTH);
1448:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1449:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1450:       assertEquals(49, Node.DIRECT_EVAL);
1451:       assertEquals(37, Node.OPT_ARG_NAME);
1452:       assertEquals(36, Node.QUOTED_PROP);
1453:       assertEquals(48, Node.DIRECTIVES);
1454:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1455:       assertEquals(56, Node.CHANGE_TIME);
1456:       assertEquals(57, Node.LAST_PROP);
1457:       assertEquals(49, Node.DIRECT_EVAL);
1458:       assertEquals(1, Node.DECR_FLAG);
1459:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1460:       assertEquals(12, Node.COLUMN_BITS);
1461:       assertEquals(32, Node.INCRDECR_PROP);
1462:       assertEquals(30, Node.VAR_ARGS_NAME);
1463:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1464:       assertEquals(56, Node.CHANGE_TIME);
1465:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1466:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1467:       assertEquals(8, Node.FLAG_NO_THROWS);
1468:       assertEquals(29, Node.JSDOC_INFO_PROP);
1469:       assertEquals(48, Node.DIRECTIVES);
1470:       assertEquals(37, Node.OPT_ARG_NAME);
1471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1472:       assertEquals(39, Node.EMPTY_BLOCK);
1473:       assertEquals(55, Node.INFERRED_FUNCTION);
1474:       assertEquals(52, Node.LENGTH);
1475:       assertEquals(57, Node.REFLECTED_OBJECT);
1476:       assertEquals(43, Node.IS_CONSTANT_NAME);
1477:       assertEquals(36, Node.QUOTED_PROP);
1478:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1479:       assertEquals(53, Node.INPUT_ID);
1480:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1481:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1482:       assertEquals(4095, Node.COLUMN_MASK);
1483:       assertEquals(47, Node.IS_DISPATCHER);
1484:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1485:       assertEquals(2, Node.POST_FLAG);
1486:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1487:       assertEquals(40, Node.ORIGINALNAME_PROP);
1488:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1489:       assertEquals(50, Node.FREE_CALL);
1490:       assertEquals(46, Node.IS_NAMESPACE);
1491:       assertEquals(54, Node.SLASH_V);
1492:       
1493:       boolean boolean2 = node2.isStringKey();
1494:       assertFalse(node2.hasOneChild());
1495:       assertFalse(node2.isNot());
1496:       assertFalse(node2.isNumber());
1497:       assertFalse(node2.isScript());
1498:       assertFalse(node2.isAssignAdd());
1499:       assertFalse(node2.isAnd());
1500:       assertFalse(node2.isObjectLit());
1501:       assertEquals((-1), node2.getSourcePosition());
1502:       assertFalse(node2.isLabel());
1503:       assertFalse(node2.isLabelName());
1504:       assertFalse(node2.isFalse());
1505:       assertFalse(node2.isContinue());
1506:       assertFalse(node2.isCast());
1507:       assertEquals((-1), node2.getCharno());
1508:       assertFalse(node2.isStringKey());
1509:       assertFalse(node2.isThrow());
1510:       assertFalse(node2.isBlock());
1511:       assertFalse(node2.isHook());
1512:       assertFalse(node2.isInc());
1513:       assertFalse(node2.isCase());
1514:       assertFalse(node2.isSetterDef());
1515:       assertEquals((-1), node2.getLineno());
1516:       assertFalse(node2.isInstanceOf());
1517:       assertFalse(node2.isIn());
1518:       assertFalse(node2.hasMoreThanOneChild());
1519:       assertFalse(node2.isThis());
1520:       assertFalse(node2.isNE());
1521:       assertEquals((-2921), node2.getType());
1522:       assertFalse(node2.isRegExp());
1523:       assertFalse(node2.isIf());
1524:       assertFalse(node2.isWith());
1525:       assertFalse(node2.isCatch());
1526:       assertFalse(node2.isTry());
1527:       assertFalse(node2.isTrue());
1528:       assertFalse(node2.isDebugger());
1529:       assertFalse(node2.isFunction());
1530:       assertFalse(node2.isFor());
1531:       assertFalse(node2.isGetterDef());
1532:       assertFalse(node2.isEmpty());
1533:       assertFalse(node2.isDefaultCase());
1534:       assertEquals(0, node2.getChildCount());
1535:       assertFalse(node2.isParamList());
1536:       assertFalse(node2.isSwitch());
1537:       assertFalse(node2.isArrayLit());
1538:       assertFalse(node2.isVar());
1539:       assertFalse(node2.isWhile());
1540:       assertFalse(node2.isString());
1541:       assertFalse(node2.isDo());
1542:       assertFalse(node2.isAdd());
1543:       assertFalse(node2.isNew());
1544:       assertFalse(node2.isGetProp());
1545:       assertFalse(node2.isReturn());
1546:       assertFalse(node2.isOr());
1547:       assertFalse(node2.isComma());
1548:       assertFalse(node2.isNull());
1549:       assertFalse(node2.hasChildren());
1550:       assertFalse(node2.isDelProp());
1551:       assertFalse(node2.isAssign());
1552:       assertFalse(node2.isDec());
1553:       assertFalse(node2.isName());
1554:       assertFalse(node2.isTypeOf());
1555:       assertFalse(node2.isCall());
1556:       assertFalse(node2.isExprResult());
1557:       assertFalse(node2.isVoid());
1558:       assertFalse(node2.isGetElem());
1559:       assertFalse(node2.isBreak());
1560:       assertFalse(boolean2);
1561:       assertFalse(node2.equals((Object)node0));
1562:       assertFalse(node2.equals((Object)node1));
1563:       assertTrue(boolean2 == boolean0);
1564:       assertTrue(boolean2 == boolean1);
1565:       assertEquals(52, Node.LENGTH);
1566:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1567:       assertEquals(54, Node.SLASH_V);
1568:       assertEquals(57, Node.REFLECTED_OBJECT);
1569:       assertEquals(30, Node.VAR_ARGS_NAME);
1570:       assertEquals(49, Node.DIRECT_EVAL);
1571:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1572:       assertEquals(40, Node.ORIGINALNAME_PROP);
1573:       assertEquals(48, Node.DIRECTIVES);
1574:       assertEquals(2, Node.POST_FLAG);
1575:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1576:       assertEquals(56, Node.CHANGE_TIME);
1577:       assertEquals(47, Node.IS_DISPATCHER);
1578:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1579:       assertEquals(57, Node.LAST_PROP);
1580:       assertEquals(55, Node.INFERRED_FUNCTION);
1581:       assertEquals(8, Node.FLAG_NO_THROWS);
1582:       assertEquals(39, Node.EMPTY_BLOCK);
1583:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1584:       assertEquals(29, Node.JSDOC_INFO_PROP);
1585:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1586:       assertEquals(53, Node.INPUT_ID);
1587:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1588:       assertEquals(43, Node.IS_CONSTANT_NAME);
1589:       assertEquals(36, Node.QUOTED_PROP);
1590:       assertEquals(37, Node.OPT_ARG_NAME);
1591:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1592:       assertEquals(4095, Node.COLUMN_MASK);
1593:       assertEquals(32, Node.INCRDECR_PROP);
1594:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1595:       assertEquals(12, Node.COLUMN_BITS);
1596:       assertEquals(46, Node.IS_NAMESPACE);
1597:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1598:       assertEquals(1, Node.DECR_FLAG);
1599:       assertEquals(50, Node.FREE_CALL);
1600:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1601:       
1602:       int int0 = node2.getSourceOffset();
1603:       assertFalse(node2.hasOneChild());
1604:       assertFalse(node2.isNot());
1605:       assertFalse(node2.isNumber());
1606:       assertFalse(node2.isScript());
1607:       assertFalse(node2.isAssignAdd());
1608:       assertFalse(node2.isAnd());
1609:       assertFalse(node2.isObjectLit());
1610:       assertEquals((-1), node2.getSourcePosition());
1611:       assertFalse(node2.isLabel());
1612:       assertFalse(node2.isLabelName());
1613:       assertFalse(node2.isFalse());
1614:       assertFalse(node2.isContinue());
1615:       assertFalse(node2.isCast());
1616:       assertEquals((-1), node2.getCharno());
1617:       assertFalse(node2.isStringKey());
1618:       assertFalse(node2.isThrow());
1619:       assertFalse(node2.isBlock());
1620:       assertFalse(node2.isHook());
1621:       assertFalse(node2.isInc());
1622:       assertFalse(node2.isCase());
1623:       assertFalse(node2.isSetterDef());
1624:       assertEquals((-1), node2.getLineno());
1625:       assertFalse(node2.isInstanceOf());
1626:       assertFalse(node2.isIn());
1627:       assertFalse(node2.hasMoreThanOneChild());
1628:       assertFalse(node2.isThis());
1629:       assertFalse(node2.isNE());
1630:       assertEquals((-2921), node2.getType());
1631:       assertFalse(node2.isRegExp());
1632:       assertFalse(node2.isIf());
1633:       assertFalse(node2.isWith());
1634:       assertFalse(node2.isCatch());
1635:       assertFalse(node2.isTry());
1636:       assertFalse(node2.isTrue());
1637:       assertFalse(node2.isDebugger());
1638:       assertFalse(node2.isFunction());
1639:       assertFalse(node2.isFor());
1640:       assertFalse(node2.isGetterDef());
1641:       assertFalse(node2.isEmpty());
1642:       assertFalse(node2.isDefaultCase());
1643:       assertEquals(0, node2.getChildCount());
1644:       assertFalse(node2.isParamList());
1645:       assertFalse(node2.isSwitch());
1646:       assertFalse(node2.isArrayLit());
1647:       assertFalse(node2.isVar());
1648:       assertFalse(node2.isWhile());
1649:       assertFalse(node2.isString());
1650:       assertFalse(node2.isDo());
1651:       assertFalse(node2.isAdd());
1652:       assertFalse(node2.isNew());
1653:       assertFalse(node2.isGetProp());
1654:       assertFalse(node2.isReturn());
1655:       assertFalse(node2.isOr());
1656:       assertFalse(node2.isComma());
1657:       assertFalse(node2.isNull());
1658:       assertFalse(node2.hasChildren());
1659:       assertFalse(node2.isDelProp());
1660:       assertFalse(node2.isAssign());
1661:       assertFalse(node2.isDec());
1662:       assertFalse(node2.isName());
1663:       assertFalse(node2.isTypeOf());
1664:       assertFalse(node2.isCall());
1665:       assertFalse(node2.isExprResult());
1666:       assertFalse(node2.isVoid());
1667:       assertFalse(node2.isGetElem());
1668:       assertFalse(node2.isBreak());
1669:       assertEquals((-1), int0);
1670:       assertFalse(node2.equals((Object)node0));
1671:       assertFalse(node2.equals((Object)node1));
1672:       assertEquals(52, Node.LENGTH);
1673:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1674:       assertEquals(54, Node.SLASH_V);
1675:       assertEquals(57, Node.REFLECTED_OBJECT);
1676:       assertEquals(30, Node.VAR_ARGS_NAME);
1677:       assertEquals(49, Node.DIRECT_EVAL);
1678:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1679:       assertEquals(40, Node.ORIGINALNAME_PROP);
1680:       assertEquals(48, Node.DIRECTIVES);
1681:       assertEquals(2, Node.POST_FLAG);
1682:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1683:       assertEquals(56, Node.CHANGE_TIME);
1684:       assertEquals(47, Node.IS_DISPATCHER);
1685:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1686:       assertEquals(57, Node.LAST_PROP);
1687:       assertEquals(55, Node.INFERRED_FUNCTION);
1688:       assertEquals(8, Node.FLAG_NO_THROWS);
1689:       assertEquals(39, Node.EMPTY_BLOCK);
1690:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1691:       assertEquals(29, Node.JSDOC_INFO_PROP);
1692:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1693:       assertEquals(53, Node.INPUT_ID);
1694:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1695:       assertEquals(43, Node.IS_CONSTANT_NAME);
1696:       assertEquals(36, Node.QUOTED_PROP);
1697:       assertEquals(37, Node.OPT_ARG_NAME);
1698:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1699:       assertEquals(4095, Node.COLUMN_MASK);
1700:       assertEquals(32, Node.INCRDECR_PROP);
1701:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1702:       assertEquals(12, Node.COLUMN_BITS);
1703:       assertEquals(46, Node.IS_NAMESPACE);
1704:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1705:       assertEquals(1, Node.DECR_FLAG);
1706:       assertEquals(50, Node.FREE_CALL);
1707:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1708:       
1709:       boolean boolean3 = node1.isEquivalentTo(node0, false, true, true);
1710:       assertEquals(0, node0.getChildCount());
1711:       assertFalse(node0.isSetterDef());
1712:       assertFalse(node0.isCatch());
1713:       assertFalse(node0.isNull());
1714:       assertFalse(node0.isDebugger());
1715:       assertFalse(node0.isVoid());
1716:       assertFalse(node0.isStringKey());
1717:       assertFalse(node0.isName());
1718:       assertFalse(node0.isTrue());
1719:       assertFalse(node0.isParamList());
1720:       assertFalse(node0.isTry());
1721:       assertFalse(node0.isCall());
1722:       assertFalse(node0.isRegExp());
1723:       assertFalse(node0.isBlock());
1724:       assertEquals(39, node0.getType());
1725:       assertFalse(node0.isWhile());
1726:       assertFalse(node0.isFor());
1727:       assertFalse(node0.isIn());
1728:       assertFalse(node0.hasMoreThanOneChild());
1729:       assertTrue(node0.isNumber());
1730:       assertEquals((-1), node0.getLineno());
1731:       assertFalse(node0.isContinue());
1732:       assertFalse(node0.isString());
1733:       assertEquals((-1), node0.getSourcePosition());
1734:       assertFalse(node0.isIf());
1735:       assertFalse(node0.isNE());
1736:       assertFalse(node0.isFalse());
1737:       assertFalse(node0.isInc());
1738:       assertFalse(node0.isCast());
1739:       assertFalse(node0.isFunction());
1740:       assertFalse(node0.isThrow());
1741:       assertFalse(node0.isInstanceOf());
1742:       assertFalse(node0.isObjectLit());
1743:       assertFalse(node0.isWith());
1744:       assertFalse(node0.isGetProp());
1745:       assertFalse(node0.isBreak());
1746:       assertFalse(node0.isNot());
1747:       assertFalse(node0.isAnd());
1748:       assertFalse(node0.isHook());
1749:       assertFalse(node0.hasOneChild());
1750:       assertFalse(node0.isGetElem());
1751:       assertFalse(node0.isExprResult());
1752:       assertFalse(node0.isScript());
1753:       assertFalse(node0.isDec());
1754:       assertFalse(node0.isTypeOf());
1755:       assertFalse(node0.hasChildren());
1756:       assertFalse(node0.isComma());
1757:       assertFalse(node0.isAssign());
1758:       assertFalse(node0.isThis());
1759:       assertFalse(node0.isReturn());
1760:       assertFalse(node0.isOr());
1761:       assertFalse(node0.isCase());
1762:       assertFalse(node0.isSwitch());
1763:       assertFalse(node0.isDelProp());
1764:       assertFalse(node0.isGetterDef());
1765:       assertFalse(node0.isLabelName());
1766:       assertEquals((-1), node0.getCharno());
1767:       assertFalse(node0.isArrayLit());
1768:       assertFalse(node0.isAdd());
1769:       assertFalse(node0.isNew());
1770:       assertFalse(node0.isEmpty());
1771:       assertFalse(node0.isDefaultCase());
1772:       assertFalse(node0.isDo());
1773:       assertFalse(node0.isLabel());
1774:       assertFalse(node0.isAssignAdd());
1775:       assertFalse(node0.isVar());
1776:       assertFalse(node1.isTrue());
1777:       assertFalse(node1.isFunction());
1778:       assertFalse(node1.isRegExp());
1779:       assertFalse(node1.isVoid());
1780:       assertFalse(node1.isDefaultCase());
1781:       assertFalse(node1.isTry());
1782:       assertFalse(node1.isArrayLit());
1783:       assertFalse(node1.isGetterDef());
1784:       assertFalse(node1.isDebugger());
1785:       assertFalse(node1.isSetterDef());
1786:       assertFalse(node1.isParamList());
1787:       assertFalse(node1.isEmpty());
1788:       assertFalse(node1.isVar());
1789:       assertFalse(node1.isSwitch());
1790:       assertFalse(node1.isInc());
1791:       assertFalse(node1.isCase());
1792:       assertFalse(node1.isStringKey());
1793:       assertFalse(node1.isIn());
1794:       assertEquals(1980, node1.getType());
1795:       assertEquals((-1), node1.getCharno());
1796:       assertFalse(node1.isNE());
1797:       assertFalse(node1.isThis());
1798:       assertFalse(node1.isNumber());
1799:       assertFalse(node1.isIf());
1800:       assertEquals((-1), node1.getLineno());
1801:       assertTrue(node1.hasChildren());
1802:       assertFalse(node1.hasMoreThanOneChild());
1803:       assertFalse(node1.isCatch());
1804:       assertFalse(node1.isInstanceOf());
1805:       assertFalse(node1.isWith());
1806:       assertFalse(node1.isFor());
1807:       assertFalse(node1.isBlock());
1808:       assertFalse(node1.isHook());
1809:       assertEquals(1, node1.getChildCount());
1810:       assertFalse(node1.isScript());
1811:       assertFalse(node1.isExprResult());
1812:       assertFalse(node1.isObjectLit());
1813:       assertFalse(node1.isAnd());
1814:       assertFalse(node1.isNot());
1815:       assertEquals((-1), node1.getSourcePosition());
1816:       assertFalse(node1.isLabelName());
1817:       assertFalse(node1.isAssignAdd());
1818:       assertFalse(node1.isCast());
1819:       assertFalse(node1.isThrow());
1820:       assertFalse(node1.isFalse());
1821:       assertFalse(node1.isContinue());
1822:       assertFalse(node1.isLabel());
1823:       assertFalse(node1.isWhile());
1824:       assertFalse(node1.isString());
1825:       assertFalse(node1.isDo());
1826:       assertFalse(node1.isAdd());
1827:       assertFalse(node1.isNew());
1828:       assertFalse(node1.isOr());
1829:       assertFalse(node1.isComma());
1830:       assertFalse(node1.isNull());
1831:       assertFalse(node1.isTypeOf());
1832:       assertFalse(node1.isDelProp());
1833:       assertFalse(node1.isName());
1834:       assertFalse(node1.isGetProp());
1835:       assertFalse(node1.isGetElem());
1836:       assertFalse(node1.isBreak());
1837:       assertFalse(node1.isCall());
1838:       assertTrue(node1.hasOneChild());
1839:       assertFalse(node1.isAssign());
1840:       assertFalse(node1.isReturn());
1841:       assertFalse(node1.isDec());
1842:       assertFalse(boolean3);
1843:       assertFalse(node0.equals((Object)node1));
1844:       assertFalse(node0.equals((Object)node2));
1845:       assertFalse(node1.equals((Object)node0));
1846:       assertFalse(node1.equals((Object)node2));
1847:       assertTrue(boolean3 == boolean0);
1848:       assertTrue(boolean3 == boolean2);
1849:       assertTrue(boolean3 == boolean1);
1850:       assertEquals(46, Node.IS_NAMESPACE);
1851:       assertEquals(12, Node.COLUMN_BITS);
1852:       assertEquals(32, Node.INCRDECR_PROP);
1853:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1854:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1855:       assertEquals(57, Node.LAST_PROP);
1856:       assertEquals(47, Node.IS_DISPATCHER);
1857:       assertEquals(2, Node.POST_FLAG);
1858:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1859:       assertEquals(30, Node.VAR_ARGS_NAME);
1860:       assertEquals(1, Node.DECR_FLAG);
1861:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1862:       assertEquals(40, Node.ORIGINALNAME_PROP);
1863:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1864:       assertEquals(50, Node.FREE_CALL);
1865:       assertEquals(54, Node.SLASH_V);
1866:       assertEquals(43, Node.IS_CONSTANT_NAME);
1867:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1868:       assertEquals(8, Node.FLAG_NO_THROWS);
1869:       assertEquals(39, Node.EMPTY_BLOCK);
1870:       assertEquals(55, Node.INFERRED_FUNCTION);
1871:       assertEquals(4095, Node.COLUMN_MASK);
1872:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1873:       assertEquals(57, Node.REFLECTED_OBJECT);
1874:       assertEquals(53, Node.INPUT_ID);
1875:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1876:       assertEquals(29, Node.JSDOC_INFO_PROP);
1877:       assertEquals(52, Node.LENGTH);
1878:       
1879:       int int1 = Node.FLAG_LOCAL_RESULTS;
1880:       assertEquals(16, int1);
1881:       assertFalse(int1 == int0);
1882:       
1883:       boolean boolean4 = node2.isObjectLit();
1884:       assertFalse(node2.hasOneChild());
1885:       assertFalse(node2.isNot());
1886:       assertFalse(node2.isNumber());
1887:       assertFalse(node2.isScript());
1888:       assertFalse(node2.isAssignAdd());
1889:       assertFalse(node2.isAnd());
1890:       assertFalse(node2.isObjectLit());
1891:       assertEquals((-1), node2.getSourcePosition());
1892:       assertFalse(node2.isLabel());
1893:       assertFalse(node2.isLabelName());
1894:       assertFalse(node2.isFalse());
1895:       assertFalse(node2.isContinue());
1896:       assertFalse(node2.isCast());
1897:       assertEquals((-1), node2.getCharno());
1898:       assertFalse(node2.isStringKey());
1899:       assertFalse(node2.isThrow());
1900:       assertFalse(node2.isBlock());
1901:       assertFalse(node2.isHook());
1902:       assertFalse(node2.isInc());
1903:       assertFalse(node2.isCase());
1904:       assertFalse(node2.isSetterDef());
1905:       assertEquals((-1), node2.getLineno());
1906:       assertFalse(node2.isInstanceOf());
1907:       assertFalse(node2.isIn());
1908:       assertFalse(node2.hasMoreThanOneChild());
1909:       assertFalse(node2.isThis());
1910:       assertFalse(node2.isNE());
1911:       assertEquals((-2921), node2.getType());
1912:       assertFalse(node2.isRegExp());
1913:       assertFalse(node2.isIf());
1914:       assertFalse(node2.isWith());
1915:       assertFalse(node2.isCatch());
1916:       assertFalse(node2.isTry());
1917:       assertFalse(node2.isTrue());
1918:       assertFalse(node2.isDebugger());
1919:       assertFalse(node2.isFunction());
1920:       assertFalse(node2.isFor());
1921:       assertFalse(node2.isGetterDef());
1922:       assertFalse(node2.isEmpty());
1923:       assertFalse(node2.isDefaultCase());
1924:       assertEquals(0, node2.getChildCount());
1925:       assertFalse(node2.isParamList());
1926:       assertFalse(node2.isSwitch());
1927:       assertFalse(node2.isArrayLit());
1928:       assertFalse(node2.isVar());
1929:       assertFalse(node2.isWhile());
1930:       assertFalse(node2.isString());
1931:       assertFalse(node2.isDo());
1932:       assertFalse(node2.isAdd());
1933:       assertFalse(node2.isNew());
1934:       assertFalse(node2.isGetProp());
1935:       assertFalse(node2.isReturn());
1936:       assertFalse(node2.isOr());
1937:       assertFalse(node2.isComma());
1938:       assertFalse(node2.isNull());
1939:       assertFalse(node2.hasChildren());
1940:       assertFalse(node2.isDelProp());
1941:       assertFalse(node2.isAssign());
1942:       assertFalse(node2.isDec());
1943:       assertFalse(node2.isName());
1944:       assertFalse(node2.isTypeOf());
1945:       assertFalse(node2.isCall());
1946:       assertFalse(node2.isExprResult());
1947:       assertFalse(node2.isVoid());
1948:       assertFalse(node2.isGetElem());
1949:       assertFalse(node2.isBreak());
1950:       assertFalse(boolean4);
1951:       assertFalse(node2.equals((Object)node0));
1952:       assertFalse(node2.equals((Object)node1));
1953:       assertTrue(boolean4 == boolean2);
1954:       assertTrue(boolean4 == boolean3);
1955:       assertTrue(boolean4 == boolean1);
1956:       assertTrue(boolean4 == boolean0);
1957:       
1958:       boolean boolean5 = node1.isObjectLit();
1959:       assertEquals(0, node0.getChildCount());
1960:       assertFalse(node0.isSetterDef());
1961:       assertFalse(node0.isCatch());
1962:       assertFalse(node0.isNull());
1963:       assertFalse(node0.isDebugger());
1964:       assertFalse(node0.isVoid());
1965:       assertFalse(node0.isStringKey());
1966:       assertFalse(node0.isName());
1967:       assertFalse(node0.isTrue());
1968:       assertFalse(node0.isParamList());
1969:       assertFalse(node0.isTry());
1970:       assertFalse(node0.isCall());
1971:       assertFalse(node0.isRegExp());
1972:       assertFalse(node0.isBlock());
1973:       assertEquals(39, node0.getType());
1974:       assertFalse(node0.isWhile());
1975:       assertFalse(node0.isFor());
1976:       assertFalse(node0.isIn());
1977:       assertFalse(node0.hasMoreThanOneChild());
1978:       assertTrue(node0.isNumber());
1979:       assertEquals((-1), node0.getLineno());
1980:       assertFalse(node0.isContinue());
1981:       assertFalse(node0.isString());
1982:       assertEquals((-1), node0.getSourcePosition());
1983:       assertFalse(node0.isIf());
1984:       assertFalse(node0.isNE());
1985:       assertFalse(node0.isFalse());
1986:       assertFalse(node0.isInc());
1987:       assertFalse(node0.isCast());
1988:       assertFalse(node0.isFunction());
1989:       assertFalse(node0.isThrow());
1990:       assertFalse(node0.isInstanceOf());
1991:       assertFalse(node0.isObjectLit());
1992:       assertFalse(node0.isWith());
1993:       assertFalse(node0.isGetProp());
1994:       assertFalse(node0.isBreak());
1995:       assertFalse(node0.isNot());
1996:       assertFalse(node0.isAnd());
1997:       assertFalse(node0.isHook());
1998:       assertFalse(node0.hasOneChild());
1999:       assertFalse(node0.isGetElem());
2000:       assertFalse(node0.isExprResult());
2001:       assertFalse(node0.isScript());
2002:       assertFalse(node0.isDec());
2003:       assertFalse(node0.isTypeOf());
2004:       assertFalse(node0.hasChildren());
2005:       assertFalse(node0.isComma());
2006:       assertFalse(node0.isAssign());
2007:       assertFalse(node0.isThis());
2008:       assertFalse(node0.isReturn());
2009:       assertFalse(node0.isOr());
2010:       assertFalse(node0.isCase());
2011:       assertFalse(node0.isSwitch());
2012:       assertFalse(node0.isDelProp());
2013:       assertFalse(node0.isGetterDef());
2014:       assertFalse(node0.isLabelName());
2015:       assertEquals((-1), node0.getCharno());
2016:       assertFalse(node0.isArrayLit());
2017:       assertFalse(node0.isAdd());
2018:       assertFalse(node0.isNew());
2019:       assertFalse(node0.isEmpty());
2020:       assertFalse(node0.isDefaultCase());
2021:       assertFalse(node0.isDo());
2022:       assertFalse(node0.isLabel());
2023:       assertFalse(node0.isAssignAdd());
2024:       assertFalse(node0.isVar());
2025:       assertFalse(node1.isTrue());
2026:       assertFalse(node1.isFunction());
2027:       assertFalse(node1.isRegExp());
2028:       assertFalse(node1.isVoid());
2029:       assertFalse(node1.isDefaultCase());
2030:       assertFalse(node1.isTry());
2031:       assertFalse(node1.isArrayLit());
2032:       assertFalse(node1.isGetterDef());
2033:       assertFalse(node1.isDebugger());
2034:       assertFalse(node1.isSetterDef());
2035:       assertFalse(node1.isParamList());
2036:       assertFalse(node1.isEmpty());
2037:       assertFalse(node1.isVar());
2038:       assertFalse(node1.isSwitch());
2039:       assertFalse(node1.isInc());
2040:       assertFalse(node1.isCase());
2041:       assertFalse(node1.isStringKey());
2042:       assertFalse(node1.isIn());
2043:       assertEquals(1980, node1.getType());
2044:       assertEquals((-1), node1.getCharno());
2045:       assertFalse(node1.isNE());
2046:       assertFalse(node1.isThis());
2047:       assertFalse(node1.isNumber());
2048:       assertFalse(node1.isIf());
2049:       assertEquals((-1), node1.getLineno());
2050:       assertTrue(node1.hasChildren());
2051:       assertFalse(node1.hasMoreThanOneChild());
2052:       assertFalse(node1.isCatch());
2053:       assertFalse(node1.isInstanceOf());
2054:       assertFalse(node1.isWith());
2055:       assertFalse(node1.isFor());
2056:       assertFalse(node1.isBlock());
2057:       assertFalse(node1.isHook());
2058:       assertEquals(1, node1.getChildCount());
2059:       assertFalse(node1.isScript());
2060:       assertFalse(node1.isExprResult());
2061:       assertFalse(node1.isObjectLit());
2062:       assertFalse(node1.isAnd());
2063:       assertFalse(node1.isNot());
2064:       assertEquals((-1), node1.getSourcePosition());
2065:       assertFalse(node1.isLabelName());
2066:       assertFalse(node1.isAssignAdd());
2067:       assertFalse(node1.isCast());
2068:       assertFalse(node1.isThrow());
2069:       assertFalse(node1.isFalse());
2070:       assertFalse(node1.isContinue());
2071:       assertFalse(node1.isLabel());
2072:       assertFalse(node1.isWhile());
2073:       assertFalse(node1.isString());
2074:       assertFalse(node1.isDo());
2075:       assertFalse(node1.isAdd());
2076:       assertFalse(node1.isNew());
2077:       assertFalse(node1.isOr());
2078:       assertFalse(node1.isComma());
2079:       assertFalse(node1.isNull());
2080:       assertFalse(node1.isTypeOf());
2081:       assertFalse(node1.isDelProp());
2082:       assertFalse(node1.isName());
2083:       assertFalse(node1.isGetProp());
2084:       assertFalse(node1.isGetElem());
2085:       assertFalse(node1.isBreak());
2086:       assertFalse(node1.isCall());
2087:       assertTrue(node1.hasOneChild());
2088:       assertFalse(node1.isAssign());
2089:       assertFalse(node1.isReturn());
2090:       assertFalse(node1.isDec());
2091:       assertFalse(boolean5);
2092:       assertTrue(boolean5 == boolean4);
2093:       assertTrue(boolean5 == boolean2);
2094:       assertTrue(boolean5 == boolean1);
2095:       assertTrue(boolean5 == boolean0);
2096:       assertTrue(boolean5 == boolean3);
2097:       assertFalse(node0.equals((Object)node1));
2098:       assertFalse(node0.equals((Object)node2));
2099:       assertFalse(node1.equals((Object)node0));
2100:       assertFalse(node1.equals((Object)node2));
2101:       
2102:       boolean boolean6 = node1.isLabel();
2103:       assertEquals(0, node0.getChildCount());
2104:       assertFalse(node0.isSetterDef());
2105:       assertFalse(node0.isCatch());
2106:       assertFalse(node0.isNull());
2107:       assertFalse(node0.isDebugger());
2108:       assertFalse(node0.isVoid());
2109:       assertFalse(node0.isStringKey());
2110:       assertFalse(node0.isName());
2111:       assertFalse(node0.isTrue());
2112:       assertFalse(node0.isParamList());
2113:       assertFalse(node0.isTry());
2114:       assertFalse(node0.isCall());
2115:       assertFalse(node0.isRegExp());
2116:       assertFalse(node0.isBlock());
2117:       assertEquals(39, node0.getType());
2118:       assertFalse(node0.isWhile());
2119:       assertFalse(node0.isFor());
2120:       assertFalse(node0.isIn());
2121:       assertFalse(node0.hasMoreThanOneChild());
2122:       assertTrue(node0.isNumber());
2123:       assertEquals((-1), node0.getLineno());
2124:       assertFalse(node0.isContinue());
2125:       assertFalse(node0.isString());
2126:       assertEquals((-1), node0.getSourcePosition());
2127:       assertFalse(node0.isIf());
2128:       assertFalse(node0.isNE());
2129:       assertFalse(node0.isFalse());
2130:       assertFalse(node0.isInc());
2131:       assertFalse(node0.isCast());
2132:       assertFalse(node0.isFunction());
2133:       assertFalse(node0.isThrow());
2134:       assertFalse(node0.isInstanceOf());
2135:       assertFalse(node0.isObjectLit());
2136:       assertFalse(node0.isWith());
2137:       assertFalse(node0.isGetProp());
2138:       assertFalse(node0.isBreak());
2139:       assertFalse(node0.isNot());
2140:       assertFalse(node0.isAnd());
2141:       assertFalse(node0.isHook());
2142:       assertFalse(node0.hasOneChild());
2143:       assertFalse(node0.isGetElem());
2144:       assertFalse(node0.isExprResult());
2145:       assertFalse(node0.isScript());
2146:       assertFalse(node0.isDec());
2147:       assertFalse(node0.isTypeOf());
2148:       assertFalse(node0.hasChildren());
2149:       assertFalse(node0.isComma());
2150:       assertFalse(node0.isAssign());
2151:       assertFalse(node0.isThis());
2152:       assertFalse(node0.isReturn());
2153:       assertFalse(node0.isOr());
2154:       assertFalse(node0.isCase());
2155:       assertFalse(node0.isSwitch());
2156:       assertFalse(node0.isDelProp());
2157:       assertFalse(node0.isGetterDef());
2158:       assertFalse(node0.isLabelName());
2159:       assertEquals((-1), node0.getCharno());
2160:       assertFalse(node0.isArrayLit());
2161:       assertFalse(node0.isAdd());
2162:       assertFalse(node0.isNew());
2163:       assertFalse(node0.isEmpty());
2164:       assertFalse(node0.isDefaultCase());
2165:       assertFalse(node0.isDo());
2166:       assertFalse(node0.isLabel());
2167:       assertFalse(node0.isAssignAdd());
2168:       assertFalse(node0.isVar());
2169:       assertFalse(node1.isTrue());
2170:       assertFalse(node1.isFunction());
2171:       assertFalse(node1.isRegExp());
2172:       assertFalse(node1.isVoid());
2173:       assertFalse(node1.isDefaultCase());
2174:       assertFalse(node1.isTry());
2175:       assertFalse(node1.isArrayLit());
2176:       assertFalse(node1.isGetterDef());
2177:       assertFalse(node1.isDebugger());
2178:       assertFalse(node1.isSetterDef());
2179:       assertFalse(node1.isParamList());
2180:       assertFalse(node1.isEmpty());
2181:       assertFalse(node1.isVar());
2182:       assertFalse(node1.isSwitch());
2183:       assertFalse(node1.isInc());
2184:       assertFalse(node1.isCase());
2185:       assertFalse(node1.isStringKey());
2186:       assertFalse(node1.isIn());
2187:       assertEquals(1980, node1.getType());
2188:       assertEquals((-1), node1.getCharno());
2189:       assertFalse(node1.isNE());
2190:       assertFalse(node1.isThis());
2191:       assertFalse(node1.isNumber());
2192:       assertFalse(node1.isIf());
2193:       assertEquals((-1), node1.getLineno());
2194:       assertTrue(node1.hasChildren());
2195:       assertFalse(node1.hasMoreThanOneChild());
2196:       assertFalse(node1.isCatch());
2197:       assertFalse(node1.isInstanceOf());
2198:       assertFalse(node1.isWith());
2199:       assertFalse(node1.isFor());
2200:       assertFalse(node1.isBlock());
2201:       assertFalse(node1.isHook());
2202:       assertEquals(1, node1.getChildCount());
2203:       assertFalse(node1.isScript());
2204:       assertFalse(node1.isExprResult());
2205:       assertFalse(node1.isObjectLit());
2206:       assertFalse(node1.isAnd());
2207:       assertFalse(node1.isNot());
2208:       assertEquals((-1), node1.getSourcePosition());
2209:       assertFalse(node1.isLabelName());
2210:       assertFalse(node1.isAssignAdd());
2211:       assertFalse(node1.isCast());
2212:       assertFalse(node1.isThrow());
2213:       assertFalse(node1.isFalse());
2214:       assertFalse(node1.isContinue());
2215:       assertFalse(node1.isLabel());
2216:       assertFalse(node1.isWhile());
2217:       assertFalse(node1.isString());
2218:       assertFalse(node1.isDo());
2219:       assertFalse(node1.isAdd());
2220:       assertFalse(node1.isNew());
2221:       assertFalse(node1.isOr());
2222:       assertFalse(node1.isComma());
2223:       assertFalse(node1.isNull());
2224:       assertFalse(node1.isTypeOf());
2225:       assertFalse(node1.isDelProp());
2226:       assertFalse(node1.isName());
2227:       assertFalse(node1.isGetProp());
2228:       assertFalse(node1.isGetElem());
2229:       assertFalse(node1.isBreak());
2230:       assertFalse(node1.isCall());
2231:       assertTrue(node1.hasOneChild());
2232:       assertFalse(node1.isAssign());
2233:       assertFalse(node1.isReturn());
2234:       assertFalse(node1.isDec());
2235:       assertFalse(boolean6);
2236:       assertFalse(node0.equals((Object)node1));
2237:       assertFalse(node0.equals((Object)node2));
2238:       assertTrue(boolean6 == boolean1);
2239:       assertTrue(boolean6 == boolean0);
2240:       assertTrue(boolean6 == boolean4);
2241:       assertTrue(boolean6 == boolean5);
2242:       assertTrue(boolean6 == boolean2);
2243:       assertTrue(boolean6 == boolean3);
2244:       assertFalse(node1.equals((Object)node0));
2245:       assertFalse(node1.equals((Object)node2));
2246:       
2247:       boolean boolean7 = node2.isFor();
2248:       assertFalse(node2.hasOneChild());
2249:       assertFalse(node2.isNot());
2250:       assertFalse(node2.isNumber());
2251:       assertFalse(node2.isScript());
2252:       assertFalse(node2.isAssignAdd());
2253:       assertFalse(node2.isAnd());
2254:       assertFalse(node2.isObjectLit());
2255:       assertEquals((-1), node2.getSourcePosition());
2256:       assertFalse(node2.isLabel());
2257:       assertFalse(node2.isLabelName());
2258:       assertFalse(node2.isFalse());
2259:       assertFalse(node2.isContinue());
2260:       assertFalse(node2.isCast());
2261:       assertEquals((-1), node2.getCharno());
2262:       assertFalse(node2.isStringKey());
2263:       assertFalse(node2.isThrow());
2264:       assertFalse(node2.isBlock());
2265:       assertFalse(node2.isHook());
2266:       assertFalse(node2.isInc());
2267:       assertFalse(node2.isCase());
2268:       assertFalse(node2.isSetterDef());
2269:       assertEquals((-1), node2.getLineno());
2270:       assertFalse(node2.isInstanceOf());
2271:       assertFalse(node2.isIn());
2272:       assertFalse(node2.hasMoreThanOneChild());
2273:       assertFalse(node2.isThis());
2274:       assertFalse(node2.isNE());
2275:       assertEquals((-2921), node2.getType());
2276:       assertFalse(node2.isRegExp());
2277:       assertFalse(node2.isIf());
2278:       assertFalse(node2.isWith());
2279:       assertFalse(node2.isCatch());
2280:       assertFalse(node2.isTry());
2281:       assertFalse(node2.isTrue());
2282:       assertFalse(node2.isDebugger());
2283:       assertFalse(node2.isFunction());
2284:       assertFalse(node2.isFor());
2285:       assertFalse(node2.isGetterDef());
2286:       assertFalse(node2.isEmpty());
2287:       assertFalse(node2.isDefaultCase());
2288:       assertEquals(0, node2.getChildCount());
2289:       assertFalse(node2.isParamList());
2290:       assertFalse(node2.isSwitch());
2291:       assertFalse(node2.isArrayLit());
2292:       assertFalse(node2.isVar());
2293:       assertFalse(node2.isWhile());
2294:       assertFalse(node2.isString());
2295:       assertFalse(node2.isDo());
2296:       assertFalse(node2.isAdd());
2297:       assertFalse(node2.isNew());
2298:       assertFalse(node2.isGetProp());
2299:       assertFalse(node2.isReturn());
2300:       assertFalse(node2.isOr());
2301:       assertFalse(node2.isComma());
2302:       assertFalse(node2.isNull());
2303:       assertFalse(node2.hasChildren());
2304:       assertFalse(node2.isDelProp());
2305:       assertFalse(node2.isAssign());
2306:       assertFalse(node2.isDec());
2307:       assertFalse(node2.isName());
2308:       assertFalse(node2.isTypeOf());
2309:       assertFalse(node2.isCall());
2310:       assertFalse(node2.isExprResult());
2311:       assertFalse(node2.isVoid());
2312:       assertFalse(node2.isGetElem());
2313:       assertFalse(node2.isBreak());
2314:       assertFalse(boolean7);
2315:       assertTrue(boolean7 == boolean0);
2316:       assertTrue(boolean7 == boolean3);
2317:       assertTrue(boolean7 == boolean6);
2318:       assertTrue(boolean7 == boolean4);
2319:       assertTrue(boolean7 == boolean2);
2320:       assertTrue(boolean7 == boolean5);
2321:       assertTrue(boolean7 == boolean1);
2322:       assertFalse(node2.equals((Object)node0));
2323:       assertFalse(node2.equals((Object)node1));
2324:       
2325:       boolean boolean8 = node1.isEquivalentToShallow(node2);
2326:       assertEquals(0, node0.getChildCount());
2327:       assertFalse(node0.isSetterDef());
2328:       assertFalse(node0.isCatch());
2329:       assertFalse(node0.isNull());
2330:       assertFalse(node0.isDebugger());
2331:       assertFalse(node0.isVoid());
2332:       assertFalse(node0.isStringKey());
2333:       assertFalse(node0.isName());
2334:       assertFalse(node0.isTrue());
2335:       assertFalse(node0.isParamList());
2336:       assertFalse(node0.isTry());
2337:       assertFalse(node0.isCall());
2338:       assertFalse(node0.isRegExp());
2339:       assertFalse(node0.isBlock());
2340:       assertEquals(39, node0.getType());
2341:       assertFalse(node0.isWhile());
2342:       assertFalse(node0.isFor());
2343:       assertFalse(node0.isIn());
2344:       assertFalse(node0.hasMoreThanOneChild());
2345:       assertTrue(node0.isNumber());
2346:       assertEquals((-1), node0.getLineno());
2347:       assertFalse(node0.isContinue());
2348:       assertFalse(node0.isString());
2349:       assertEquals((-1), node0.getSourcePosition());
2350:       assertFalse(node0.isIf());
2351:       assertFalse(node0.isNE());
2352:       assertFalse(node0.isFalse());
2353:       assertFalse(node0.isInc());
2354:       assertFalse(node0.isCast());
2355:       assertFalse(node0.isFunction());
2356:       assertFalse(node0.isThrow());
2357:       assertFalse(node0.isInstanceOf());
2358:       assertFalse(node0.isObjectLit());
2359:       assertFalse(node0.isWith());
2360:       assertFalse(node0.isGetProp());
2361:       assertFalse(node0.isBreak());
2362:       assertFalse(node0.isNot());
2363:       assertFalse(node0.isAnd());
2364:       assertFalse(node0.isHook());
2365:       assertFalse(node0.hasOneChild());
2366:       assertFalse(node0.isGetElem());
2367:       assertFalse(node0.isExprResult());
2368:       assertFalse(node0.isScript());
2369:       assertFalse(node0.isDec());
2370:       assertFalse(node0.isTypeOf());
2371:       assertFalse(node0.hasChildren());
2372:       assertFalse(node0.isComma());
2373:       assertFalse(node0.isAssign());
2374:       assertFalse(node0.isThis());
2375:       assertFalse(node0.isReturn());
2376:       assertFalse(node0.isOr());
2377:       assertFalse(node0.isCase());
2378:       assertFalse(node0.isSwitch());
2379:       assertFalse(node0.isDelProp());
2380:       assertFalse(node0.isGetterDef());
2381:       assertFalse(node0.isLabelName());
2382:       assertEquals((-1), node0.getCharno());
2383:       assertFalse(node0.isArrayLit());
2384:       assertFalse(node0.isAdd());
2385:       assertFalse(node0.isNew());
2386:       assertFalse(node0.isEmpty());
2387:       assertFalse(node0.isDefaultCase());
2388:       assertFalse(node0.isDo());
2389:       assertFalse(node0.isLabel());
2390:       assertFalse(node0.isAssignAdd());
2391:       assertFalse(node0.isVar());
2392:       assertFalse(node1.isTrue());
2393:       assertFalse(node1.isFunction());
2394:       assertFalse(node1.isRegExp());
2395:       assertFalse(node1.isVoid());
2396:       assertFalse(node1.isDefaultCase());
2397:       assertFalse(node1.isTry());
2398:       assertFalse(node1.isArrayLit());
2399:       assertFalse(node1.isGetterDef());
2400:       assertFalse(node1.isDebugger());
2401:       assertFalse(node1.isSetterDef());
2402:       assertFalse(node1.isParamList());
2403:       assertFalse(node1.isEmpty());
2404:       assertFalse(node1.isVar());
2405:       assertFalse(node1.isSwitch());
2406:       assertFalse(node1.isInc());
2407:       assertFalse(node1.isCase());
2408:       assertFalse(node1.isStringKey());
2409:       assertFalse(node1.isIn());
2410:       assertEquals(1980, node1.getType());
2411:       assertEquals((-1), node1.getCharno());
2412:       assertFalse(node1.isNE());
2413:       assertFalse(node1.isThis());
2414:       assertFalse(node1.isNumber());
2415:       assertFalse(node1.isIf());
2416:       assertEquals((-1), node1.getLineno());
2417:       assertTrue(node1.hasChildren());
2418:       assertFalse(node1.hasMoreThanOneChild());
2419:       assertFalse(node1.isCatch());
2420:       assertFalse(node1.isInstanceOf());
2421:       assertFalse(node1.isWith());
2422:       assertFalse(node1.isFor());
2423:       assertFalse(node1.isBlock());
2424:       assertFalse(node1.isHook());
2425:       assertEquals(1, node1.getChildCount());
2426:       assertFalse(node1.isScript());
2427:       assertFalse(node1.isExprResult());
2428:       assertFalse(node1.isObjectLit());
2429:       assertFalse(node1.isAnd());
2430:       assertFalse(node1.isNot());
2431:       assertEquals((-1), node1.getSourcePosition());
2432:       assertFalse(node1.isLabelName());
2433:       assertFalse(node1.isAssignAdd());
2434:       assertFalse(node1.isCast());
2435:       assertFalse(node1.isThrow());
2436:       assertFalse(node1.isFalse());
2437:       assertFalse(node1.isContinue());
2438:       assertFalse(node1.isLabel());
2439:       assertFalse(node1.isWhile());
2440:       assertFalse(node1.isString());
2441:       assertFalse(node1.isDo());
2442:       assertFalse(node1.isAdd());
2443:       assertFalse(node1.isNew());
2444:       assertFalse(node1.isOr());
2445:       assertFalse(node1.isComma());
2446:       assertFalse(node1.isNull());
2447:       assertFalse(node1.isTypeOf());
2448:       assertFalse(node1.isDelProp());
2449:       assertFalse(node1.isName());
2450:       assertFalse(node1.isGetProp());
2451:       assertFalse(node1.isGetElem());
2452:       assertFalse(node1.isBreak());
2453:       assertFalse(node1.isCall());
2454:       assertTrue(node1.hasOneChild());
2455:       assertFalse(node1.isAssign());
2456:       assertFalse(node1.isReturn());
2457:       assertFalse(node1.isDec());
2458:       assertFalse(node2.hasOneChild());
2459:       assertFalse(node2.isNot());
2460:       assertFalse(node2.isNumber());
2461:       assertFalse(node2.isScript());
2462:       assertFalse(node2.isAssignAdd());
2463:       assertFalse(node2.isAnd());
2464:       assertFalse(node2.isObjectLit());
2465:       assertEquals((-1), node2.getSourcePosition());
2466:       assertFalse(node2.isLabel());
2467:       assertFalse(node2.isLabelName());
2468:       assertFalse(node2.isFalse());
2469:       assertFalse(node2.isContinue());
2470:       assertFalse(node2.isCast());
2471:       assertEquals((-1), node2.getCharno());
2472:       assertFalse(node2.isStringKey());
2473:       assertFalse(node2.isThrow());
2474:       assertFalse(node2.isBlock());
2475:       assertFalse(node2.isHook());
2476:       assertFalse(node2.isInc());
2477:       assertFalse(node2.isCase());
2478:       assertFalse(node2.isSetterDef());
2479:       assertEquals((-1), node2.getLineno());
2480:       assertFalse(node2.isInstanceOf());
2481:       assertFalse(node2.isIn());
2482:       assertFalse(node2.hasMoreThanOneChild());
2483:       assertFalse(node2.isThis());
2484:       assertFalse(node2.isNE());
2485:       assertEquals((-2921), node2.getType());
2486:       assertFalse(node2.isRegExp());
2487:       assertFalse(node2.isIf());
2488:       assertFalse(node2.isWith());
2489:       assertFalse(node2.isCatch());
2490:       assertFalse(node2.isTry());
2491:       assertFalse(node2.isTrue());
2492:       assertFalse(node2.isDebugger());
2493:       assertFalse(node2.isFunction());
2494:       assertFalse(node2.isFor());
2495:       assertFalse(node2.isGetterDef());
2496:       assertFalse(node2.isEmpty());
2497:       assertFalse(node2.isDefaultCase());
2498:       assertEquals(0, node2.getChildCount());
2499:       assertFalse(node2.isParamList());
2500:       assertFalse(node2.isSwitch());
2501:       assertFalse(node2.isArrayLit());
2502:       assertFalse(node2.isVar());
2503:       assertFalse(node2.isWhile());
2504:       assertFalse(node2.isString());
2505:       assertFalse(node2.isDo());
2506:       assertFalse(node2.isAdd());
2507:       assertFalse(node2.isNew());
2508:       assertFalse(node2.isGetProp());
2509:       assertFalse(node2.isReturn());
2510:       assertFalse(node2.isOr());
2511:       assertFalse(node2.isComma());
2512:       assertFalse(node2.isNull());
2513:       assertFalse(node2.hasChildren());
2514:       assertFalse(node2.isDelProp());
2515:       assertFalse(node2.isAssign());
2516:       assertFalse(node2.isDec());
2517:       assertFalse(node2.isName());
2518:       assertFalse(node2.isTypeOf());
2519:       assertFalse(node2.isCall());
2520:       assertFalse(node2.isExprResult());
2521:       assertFalse(node2.isVoid());
2522:       assertFalse(node2.isGetElem());
2523:       assertFalse(node2.isBreak());
2524:       assertFalse(boolean8);
2525:       assertFalse(node0.equals((Object)node1));
2526:       assertFalse(node0.equals((Object)node2));
2527:       assertTrue(boolean8 == boolean4);
2528:       assertTrue(boolean8 == boolean5);
2529:       assertTrue(boolean8 == boolean2);
2530:       assertTrue(boolean8 == boolean7);
2531:       assertTrue(boolean8 == boolean6);
2532:       assertTrue(boolean8 == boolean1);
2533:       assertTrue(boolean8 == boolean0);
2534:       assertTrue(boolean8 == boolean3);
2535:       assertFalse(node1.equals((Object)node0));
2536:       assertFalse(node1.equals((Object)node2));
2537:       assertFalse(node2.equals((Object)node0));
2538:       assertFalse(node2.equals((Object)node1));
2539:   }
2540: }
RegularFileObject[/tmp/EvoSuite_213_1629223238333/com/google/javascript/rhino/Node_213_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 18:00:38 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_213_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_213_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.VoidType",
119:       "com.google.common.base.Joiner",
120:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
121:       "com.google.common.collect.AbstractListMultimap",
122:       "com.google.javascript.rhino.jstype.JSType",
123:       "com.google.common.collect.ImmutableAsList",
124:       "com.google.javascript.rhino.Node$StringNode",
125:       "com.google.javascript.rhino.jstype.ProxyObjectType",
126:       "com.google.common.collect.Sets$SetView",
127:       "com.google.common.collect.RegularImmutableAsList",
128:       "com.google.javascript.rhino.jstype.TemplateType",
129:       "com.google.javascript.rhino.jstype.NamedType",
130:       "com.google.common.collect.Iterators$13",
131:       "com.google.javascript.rhino.InputId",
132:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
133:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
134:       "com.google.common.collect.AbstractMapBasedMultimap",
135:       "com.google.common.collect.Lists$Partition",
136:       "com.google.common.collect.Lists",
137:       "com.google.javascript.rhino.Node$SideEffectFlags",
138:       "com.google.common.collect.UnmodifiableListIterator",
139:       "com.google.javascript.rhino.jstype.NullType",
140:       "com.google.common.collect.Lists$TransformingSequentialList",
141:       "com.google.javascript.rhino.ErrorReporter",
142:       "com.google.javascript.rhino.jstype.UnknownType",
143:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
144:       "com.google.javascript.rhino.jstype.ValueType",
145:       "com.google.javascript.rhino.jstype.PropertyMap",
146:       "com.google.javascript.rhino.Token",
147:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
148:       "com.google.common.collect.ObjectArrays",
149:       "com.google.javascript.rhino.jstype.StaticSourceFile",
150:       "com.google.javascript.rhino.jstype.BooleanType",
151:       "com.google.javascript.rhino.jstype.NoObjectType",
152:       "com.google.common.collect.AbstractIterator",
153:       "com.google.javascript.rhino.jstype.FunctionBuilder",
154:       "com.google.javascript.rhino.jstype.JSType$TypePair",
155:       "com.google.common.base.Joiner$MapJoiner",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.collect.ImmutableList$1",
158:       "com.google.common.collect.MapDifference",
159:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
160:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
161:       "com.google.common.collect.Sets$ImprovedAbstractSet",
162:       "com.google.javascript.rhino.jstype.FunctionType",
163:       "com.google.common.base.Preconditions",
164:       "com.google.common.collect.UnmodifiableIterator",
165:       "com.google.javascript.rhino.JSDocInfo",
166:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
167:       "com.google.javascript.rhino.jstype.Property",
168:       "com.google.common.collect.ImmutableMapValues",
169:       "com.google.common.collect.ImmutableEntry",
170:       "com.google.common.base.Joiner$1",
171:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
172:       "com.google.common.base.Joiner$2",
173:       "com.google.common.collect.ImmutableCollection",
174:       "com.google.common.collect.ImmutableEnumMap",
175:       "com.google.javascript.rhino.jstype.TernaryValue",
176:       "com.google.javascript.rhino.Node$AncestorIterable",
177:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
178:       "com.google.common.collect.Lists$RandomAccessListWrapper",
179:       "com.google.common.collect.ImmutableEnumSet",
180:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
181:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
182:       "com.google.javascript.rhino.jstype.EnumElementType",
183:       "com.google.javascript.rhino.jstype.UnionType",
184:       "com.google.common.base.Objects",
185:       "com.google.javascript.rhino.Node$NumberNode",
186:       "com.google.common.collect.SingletonImmutableList",
187:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
188:       "com.google.common.collect.ImmutableCollection$Builder",
189:       "com.google.javascript.rhino.jstype.StaticSlot",
190:       "com.google.common.collect.Iterators$6",
191:       "com.google.common.collect.BiMap",
192:       "com.google.common.collect.Iterators$7",
193:       "com.google.common.collect.AbstractSetMultimap",
194:       "com.google.common.base.Function",
195:       "com.google.common.collect.ImmutableSet",
196:       "com.google.common.collect.Lists$AbstractListWrapper",
197:       "com.google.common.collect.ImmutableMap",
198:       "com.google.common.collect.AbstractIndexedListIterator",
199:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
200:       "com.google.common.collect.Maps$1",
201:       "com.google.javascript.rhino.jstype.EnumType",
202:       "com.google.common.collect.Iterators$1",
203:       "com.google.common.collect.Iterators$2",
204:       "com.google.javascript.rhino.jstype.NamespaceType",
205:       "com.google.common.collect.Iterators$3",
206:       "com.google.common.collect.Sets",
207:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
208:       "com.google.javascript.rhino.Node$ObjectPropListItem",
209:       "com.google.common.collect.Lists$StringAsImmutableList",
210:       "com.google.common.collect.Lists$2",
211:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
212:       "com.google.common.collect.ImmutableList$Builder",
213:       "com.google.common.collect.Lists$1",
214:       "com.google.javascript.rhino.jstype.StaticReference",
215:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
216:       "com.google.common.collect.Multiset",
217:       "com.google.common.collect.AbstractMultimap",
218:       "com.google.common.collect.Multimap",
219:       "com.google.common.collect.Iterators",
220:       "com.google.common.collect.Maps$ImprovedAbstractMap",
221:       "com.google.common.collect.ImmutableBiMap",
222:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
223:       "com.google.common.collect.ImmutableList",
224:       "com.google.common.collect.SingletonImmutableBiMap",
225:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
226:       "com.google.javascript.rhino.jstype.StringType",
227:       "com.google.javascript.rhino.Node$AbstractPropListItem",
228:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
229:       "com.google.javascript.rhino.jstype.TemplatizedType",
230:       "com.google.javascript.rhino.jstype.Visitor",
231:       "com.google.javascript.rhino.jstype.NoResolvedType",
232:       "com.google.javascript.rhino.jstype.JSTypeNative",
233:       "com.google.javascript.rhino.jstype.AllType",
234:       "com.google.common.collect.Maps",
235:       "com.google.common.collect.SetMultimap",
236:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
237:       "com.google.common.collect.Maps$EntryTransformer",
238:       "com.google.javascript.rhino.JSTypeExpression",
239:       "com.google.common.collect.Iterators$MergingIterator"
240:     );
241:   } 
242: 
243:   private static void resetClasses() {
244:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_213_tmp__ESTest_scaffolding.class.getClassLoader()); 
245: 
246:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
247:       "com.google.javascript.rhino.Node",
248:       "com.google.javascript.rhino.Node$NumberNode",
249:       "com.google.javascript.rhino.Node$StringNode",
250:       "com.google.javascript.rhino.Node$AbstractPropListItem",
251:       "com.google.javascript.rhino.Node$ObjectPropListItem",
252:       "com.google.javascript.rhino.Node$IntPropListItem",
253:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
254:       "com.google.javascript.rhino.Node$AncestorIterable",
255:       "com.google.javascript.rhino.Node$NodeMismatch",
256:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
257:       "com.google.javascript.rhino.Node$SideEffectFlags",
258:       "com.google.javascript.rhino.SimpleErrorReporter",
259:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
260:       "com.google.common.base.Joiner",
261:       "com.google.common.base.Preconditions",
262:       "com.google.common.base.Joiner$1",
263:       "com.google.common.collect.Collections2",
264:       "com.google.common.base.Joiner$MapJoiner",
265:       "com.google.common.collect.Maps",
266:       "com.google.common.collect.AbstractMultimap",
267:       "com.google.common.collect.AbstractMapBasedMultimap",
268:       "com.google.common.collect.AbstractSetMultimap",
269:       "com.google.common.collect.LinkedHashMultimap",
270:       "com.google.common.collect.AbstractMapEntry",
271:       "com.google.common.collect.ImmutableEntry",
272:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
273:       "com.google.common.collect.AbstractListMultimap",
274:       "com.google.common.collect.ArrayListMultimap",
275:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
276:       "com.google.common.collect.ImmutableCollection",
277:       "com.google.common.collect.RegularImmutableList",
278:       "com.google.common.collect.ObjectArrays",
279:       "com.google.common.collect.ImmutableList",
280:       "com.google.javascript.rhino.jstype.ModificationVisitor",
281:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
282:       "com.google.common.collect.ImmutableCollection$Builder",
283:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
284:       "com.google.common.collect.ImmutableList$Builder",
285:       "com.google.common.collect.UnmodifiableIterator",
286:       "com.google.common.collect.UnmodifiableListIterator",
287:       "com.google.common.collect.Iterators$1",
288:       "com.google.common.collect.Iterators$2",
289:       "com.google.common.collect.Iterators",
290:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
291:       "com.google.javascript.rhino.jstype.JSType$1",
292:       "com.google.javascript.rhino.jstype.JSType",
293:       "com.google.javascript.rhino.jstype.ObjectType",
294:       "com.google.javascript.rhino.jstype.ProxyObjectType",
295:       "com.google.javascript.rhino.jstype.TemplateType",
296:       "com.google.javascript.rhino.jstype.ValueType",
297:       "com.google.javascript.rhino.jstype.BooleanType",
298:       "com.google.javascript.rhino.jstype.NullType",
299:       "com.google.javascript.rhino.jstype.NumberType",
300:       "com.google.javascript.rhino.jstype.StringType",
301:       "com.google.javascript.rhino.jstype.UnknownType",
302:       "com.google.javascript.rhino.jstype.VoidType",
303:       "com.google.javascript.rhino.jstype.AllType",
304:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
305:       "com.google.common.collect.ImmutableMap",
306:       "com.google.common.collect.ImmutableBiMap",
307:       "com.google.common.collect.EmptyImmutableBiMap",
308:       "com.google.javascript.rhino.jstype.PropertyMap$1",
309:       "com.google.javascript.rhino.jstype.PropertyMap",
310:       "com.google.javascript.rhino.jstype.FunctionType",
311:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
312:       "com.google.javascript.rhino.Token",
313:       "com.google.javascript.rhino.jstype.ArrowType",
314:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
315:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
316:       "com.google.javascript.rhino.jstype.InstanceObjectType",
317:       "com.google.javascript.rhino.jstype.Property",
318:       "com.google.common.collect.Lists",
319:       "com.google.javascript.rhino.jstype.NoObjectType",
320:       "com.google.javascript.rhino.jstype.NoType",
321:       "com.google.javascript.rhino.jstype.NoResolvedType",
322:       "com.google.common.collect.SingletonImmutableList",
323:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
324:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
325:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
326:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
327:       "com.google.javascript.rhino.jstype.UnionType",
328:       "com.google.javascript.rhino.jstype.FunctionBuilder",
329:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
330:       "com.google.javascript.rhino.JSDocInfo",
331:       "com.google.common.base.Objects",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
336:       "com.google.common.collect.ImmutableSet",
337:       "com.google.common.collect.EmptyImmutableSet",
338:       "com.google.common.collect.AbstractIndexedListIterator",
339:       "com.google.common.collect.Iterators$11",
340:       "com.google.common.collect.Platform",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.javascript.rhino.InputId",
344:       "com.google.common.collect.Iterables",
345:       "com.google.javascript.rhino.jstype.NamedType",
346:       "com.google.javascript.rhino.jstype.TemplatizedType",
347:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
348:       "com.google.javascript.rhino.jstype.TernaryValue",
349:       "com.google.javascript.rhino.jstype.JSType$2",
350:       "com.google.javascript.rhino.jstype.JSType$TypePair",
351:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
352:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
353:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
354:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
355:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
356:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
357:       "com.google.javascript.rhino.JSTypeExpression",
358:       "com.google.common.collect.Iterators$12",
359:       "com.google.common.collect.AbstractMultimap$Values",
360:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
361:       "com.google.common.collect.AbstractMapBasedMultimap$1",
362:       "com.google.common.collect.Multimaps$Entries",
363:       "com.google.common.collect.AbstractMultimap$Entries",
364:       "com.google.common.collect.AbstractMapBasedMultimap$2"
365:     );
366:   }
367: }

[MASTER] 18:00:39.020 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-1907.0901721195278));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertNotNull(node0);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertNotNull(iterable0);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

node0.setLength(1013);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

String string0 = node0.toString();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertNotNull(string0);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

node0.setOptionalArg(true);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

Node node1 = new Node(1980, node0, node0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isIn());
assertEquals(1980, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean0 = node0.isThis();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(boolean0);
assertFalse(node0.equals((Object)node1));
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);

Node node2 = Node.newString((-2921), "NUMBER -1907.0901721195278 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002]", 46, 100);
assertFalse(node2.hasOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertEquals(100, node2.getCharno());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertEquals((-2921), node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertEquals(46, node2.getLineno());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertEquals(188516, node2.getSourcePosition());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node2.setCharno((-3111));
assertFalse(node2.hasOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertEquals((-2921), node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean1 = node1.isEquivalentToTyped(node0);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isIn());
assertEquals(1980, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(boolean1);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

node1.setSourceFileForTesting("CGdy$k/:pbdplN#$K!{");
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isIn());
assertEquals(1980, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean2 = node2.isStringKey();
assertFalse(node2.hasOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertEquals((-2921), node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(boolean2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

int int0 = node2.getSourceOffset();
assertFalse(node2.hasOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertEquals((-2921), node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertEquals((-1), int0);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean3 = node1.isEquivalentTo(node0, false, true, true);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isIn());
assertEquals(1980, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(boolean3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

int int1 = Node.FLAG_LOCAL_RESULTS;
assertEquals(16, int1);
assertFalse(int1 == int0);

boolean boolean4 = node2.isObjectLit();
assertFalse(node2.hasOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertEquals((-2921), node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(boolean4);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);

boolean boolean5 = node1.isObjectLit();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isIn());
assertEquals(1980, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(boolean5);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean1);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

boolean boolean6 = node1.isLabel();
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isIn());
assertEquals(1980, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(boolean6);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));

boolean boolean7 = node2.isFor();
assertFalse(node2.hasOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertEquals((-2921), node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(boolean7);
assertTrue(boolean7 == boolean0);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean8 = node1.isEquivalentToShallow(node2);
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isTry());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isBlock());
assertEquals(39, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertTrue(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isStringKey());
assertFalse(node1.isIn());
assertEquals(1980, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isThis());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isLabel());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isReturn());
assertFalse(node1.isDec());
assertFalse(node2.hasOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isThrow());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertEquals((-2921), node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isDo());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isReturn());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.hasChildren());
assertFalse(node2.isDelProp());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isName());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isGetElem());
assertFalse(node2.isBreak());
assertFalse(boolean8);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean5);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean6);
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));


[MASTER] 18:01:02.849 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:01:03.172 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:01:03.484 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:01:03.779 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-50/tests/20
* Done!

* Computation finished
